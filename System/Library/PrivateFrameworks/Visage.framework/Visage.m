void VGForceMissingSymbolsToBeLinked(vg::shared *a1)
{
  char *v1;
  void *v2;
  objc_object *v3;
  vg::shared *v4;
  double v5;
  unsigned char v6[60];
  int v7;
  void v8[3];
  void v9[3];
  char v10;
  int v11;
  void *v12;
  void *v13[2];
  int v14;
  void *v15;
  void *memptr;

  vg::shared::clipFToUInt8(a1, 1.0, 1.0, 0.0);
  memset(&v6[20], 0, 40);
  *(_OWORD *)&v6[4] = 0u;
  *(_DWORD *)v6 = 1065353216;
  *(_DWORD *)&v6[20] = 1065353216;
  *(_DWORD *)&v6[40] = 1065353216;
  v7 = 1065353216;
  v13[1] = (void *)16;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  v1 = (char *)memptr;
  v13[0] = memptr;
  v14 = 3;
  *(void *)((char *)memptr + 12) = 0;
  *(void *)(v1 + 4) = 0;
  *(void *)(v1 + 20) = 0;
  *(void *)(v1 + 28) = 0x3F80000000000000;
  *(_DWORD *)v1 = 1065353216;
  *((_DWORD *)v1 + 4) = 1065353216;
  vg::common::transformPoints(v6, (uint64_t)v13, (uint64_t)&v15);
  free(v13[0]);
  free(v15);
  memset(v6, 0, 24);
  *(void *)&v6[24] = 0x100000001;
  *(int64x2_t *)&v6[32] = vdupq_n_s64(1uLL);
  v6[48] = 0;
  v2 = vg::shared::remapImage((uint64_t)v6);

  vg::ObjIO::read(0, 0, (uint64_t)v6);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v6);
  vg::common::deserializedObjectFromObject(0, v3);

  vg::shared::MemoryUsage(v4);
  memset(v6, 0, 24);
  vg::VertexAttributeBuffer::bytesPerElement((vg::VertexAttributeBuffer *)v6);

  vg::shared::getAssetsForType(&stru_270CEF2A8, (void **)v6);
  *(_OWORD *)v6 = xmmword_260D21650;
  *(_DWORD *)&v6[16] = 1061997773;
  *(_OWORD *)&v6[24] = xmmword_260D21660;
  *(_OWORD *)&v6[40] = xmmword_260D21670;
  v6[56] = 0;
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  v10 = 1;
  v11 = 1083808154;
  v12 = &unk_270CFD900;
  vg::frame_selection::VGEarCaptureOptions::toDictionary((vg::frame_selection::VGEarCaptureOptions *)v6, v5);

  vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions((id *)v6);
  _os_crash();
  __break(1u);
}

void sub_260C8F818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void vg::frame_selection::VGEarCaptureOptions::~VGEarCaptureOptions(id *this)
{
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
}

void vg::ObjContents::~ObjContents(vg::ObjContents *this)
{
  v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 96);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)this;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26556FED8, MEMORY[0x263F8C060]);
}

void sub_260C8FB28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_260C8FC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260C90114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::setError(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a2;
  size_t v4 = __VGLogSharedInstance();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = [v3 UTF8String];
    _os_log_impl(&dword_260C8D000, v4, OS_LOG_TYPE_ERROR, " %s ", buf, 0xCu);
  }

  if (a1)
  {
    size_t v5 = (void *)MEMORY[0x263F087E8];
    v6 = objc_msgSend(MEMORY[0x263F086E0], "vg_bundle");
    uint64_t v7 = [v6 bundleIdentifier];
    uint64_t v9 = *MEMORY[0x263F08320];
    id v10 = v3;
    uint64_t v8 = [NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    *a1 = [v5 errorWithDomain:v7 code:100 userInfo:v8];
  }
}

void sub_260C90328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C907CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_260C90970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C90B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C91A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C91B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C92754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void (**a10)(void), void *a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a57);

  a10[2]();
  a9[2]();

  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

id detail::getEarPoseList(detail *this, unsigned int a2)
{
  unsigned int v3 = this;
  if (this >= a2) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = this;
  }
  size_t v5 = objc_opt_new();
  if (v4)
  {
    for (unsigned int i = 0; i != v4; ++i)
    {
      uint64_t v7 = [NSNumber numberWithBool:1];
      uint64_t v8 = [NSNumber numberWithDouble:(double)i];
      [v5 setObject:v7 forKeyedSubscript:v8];
    }
  }
  if (a2 > v3)
  {
    do
    {
      uint64_t v9 = [NSNumber numberWithBool:0];
      id v10 = [NSNumber numberWithDouble:(double)v4];
      [v5 setObject:v9 forKeyedSubscript:v10];

      ++v4;
    }
    while (a2 != v4);
  }

  return v5;
}

void sub_260C92B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id detail::getEarFrameData(uint64_t *a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      id v5 = [[VGHRTFEarFrameData alloc] initEmpty];
      objc_msgSend(v5, "setRgbImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(*(id *)v3, "rgbRectified")));
      objc_msgSend(v5, "setDepthImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(*(id *)v3, "depth")));
      [v5 setEarBox:*(double *)(v3 + 128)];
      [v2 addObject:v5];

      v3 += 192;
    }
    while (v3 != v4);
  }

  return v2;
}

void sub_260C92C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void vg::ear_detection::EarPose::~EarPose(vg::ear_detection::EarPose *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
}

void std::vector<EarFrame>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<EarFrame,0>(v4);
      }
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EarFrame,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
  }
  return a1;
}

vg::hrtf::Rectify *std::unique_ptr<vg::hrtf::Rectify>::reset[abi:ne180100](vg::hrtf::Rectify **a1, vg::hrtf::Rectify *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::Rectify::~Rectify(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void sub_260C92FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C934F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C9375C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C93FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_260C94564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C94CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void), uint64_t a12, void (**a13)(void), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  a13[2]();
  a11[2]();

  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_260C95610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void *a10, void *a11)
{
  a9[2]();
  _Unwind_Resume(a1);
}

id detail::getFacePoseList(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = v3;
  if (a2 == 1)
  {
    v18 = [v3 pitchAngleCapturedPoses];
  }
  else if (a2)
  {
    v18 = 0;
  }
  else
  {
    v18 = [v3 yawAngleCapturedPoses];
  }

  id v5 = objc_opt_new();
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = v18;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        [v10 doubleValue];
        double v12 = v11;
        uint64_t v13 = [v6 objectForKey:v10];
        uint64_t v14 = [v13 valid];

        v15 = [NSNumber numberWithBool:v14];
        v16 = [NSNumber numberWithDouble:round(v12 * 100.0) / 100.0];
        [v5 setObject:v15 forKeyedSubscript:v16];
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }

  return v5;
}

void sub_260C95AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C95DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C95F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C96074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C96A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void), void *a10, void (**a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(&a35);
  a11[2]();

  a9[2]();
  std::__optional_destruct_base<vg::hrtf::RectifiedData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a63);

  _Unwind_Resume(a1);
}

id detail::getEarPoseList(void *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v14 = a1;
  v1 = objc_opt_new();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = v14;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v7 = [v2 objectForKey:v6];
        uint64_t v8 = [v7 BOOLValue];
        [v6 doubleValue];
        double v10 = v9;
        double v11 = [NSNumber numberWithBool:v8];
        double v12 = [NSNumber numberWithDouble:ceil(v10 * 100.0) / 100.0];
        [v1 setObject:v11 forKeyedSubscript:v12];
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }

  return v1;
}

void sub_260C96E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

NSObject *detail::getEarFrameData(void *a1, void *a2)
{
  id v3 = a1;
  id v22 = a2;
  uint64_t v4 = [v22 allValues];
  uint64_t v5 = [v4 count];
  if (v5 == [v3 count])
  {
    id v6 = objc_opt_new();
    unint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F001A8];
    while (1)
    {
      if (v7 >= [v4 count])
      {
        id v6 = v6;
        long long v19 = v6;
        goto LABEL_13;
      }
      CFDictionaryRef v9 = [v4 objectAtIndexedSubscript:v7];
      double v10 = [v3 objectAtIndexedSubscript:v7];
      CGSize v11 = *(CGSize *)(v8 + 16);
      rect.origin = *(CGPoint *)v8;
      rect.size = v11;
      if (!CGRectMakeWithDictionaryRepresentation(v9, &rect)) {
        break;
      }
      double x = rect.origin.x;
      double y = rect.origin.y;
      id v14 = [[VGHRTFEarFrameData alloc] initEmpty];
      long long v15 = [v10 captureData];
      objc_msgSend(v14, "setRgbImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v15, "rgbRectified")));

      long long v16 = [v10 captureData];
      objc_msgSend(v14, "setDepthImage:", CVPixelBufferGetIOSurface((CVPixelBufferRef)objc_msgSend(v16, "depth")));
      *(float *)&double v17 = x;
      float v18 = y;
      *((float *)&v17 + 1) = v18;
      double v23 = v17;

      [v14 setEarBox:v23];
      [v6 addObject:v14];

      ++v7;
    }
    uint64_t v20 = __VGLogSharedInstance();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_ERROR, " CGRectMakeWithDictionaryRepresentation failed. ", buf, 2u);
    }
  }
  else
  {
    id v6 = __VGLogSharedInstance();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(rect.origin.x) = 0;
      _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_ERROR, " Captured size and Rect dictionary size doesn't match ", (uint8_t *)&rect, 2u);
    }
  }
  long long v19 = 0;
LABEL_13:

  return v19;
}

void sub_260C970F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(id *this)
{
  id v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  id v3 = this[18];
  if (v3)
  {
    this[19] = v3;
    operator delete(v3);
  }
}

void sub_260C972F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    unint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

vg::frame_selection::VGEarFrameSelectorImpl **std::unique_ptr<vg::frame_selection::VGEarFrameSelector>::reset[abi:ne180100](vg::frame_selection::VGEarFrameSelectorImpl ***a1, vg::frame_selection::VGEarFrameSelectorImpl **a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGEarFrameSelector::~VGEarFrameSelector(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void sub_260C9787C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260C98204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(unsigned char *)(v35 - 168))
  {
    if (*(char *)(v35 - 169) < 0) {
      operator delete(*(void **)(v35 - 192));
    }
  }

  vg::hrtf::HRTFModelInputs::~HRTFModelInputs(&__p);
  std::unique_ptr<vg::hrtf::HRTFModel>::reset[abi:ne180100]((void ****)(v35 - 216), 0);

  _Unwind_Resume(a1);
}

void vg::hrtf::FaceFrameData::~FaceFrameData(void **this)
{
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type **a2)
{
  id v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void vg::hrtf::HRTFModelInputs::~HRTFModelInputs(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  id v2 = this + 6;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = this + 3;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = this;
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t std::vector<vg::hrtf::FaceFrameData>::__push_back_slow_path<vg::hrtf::FaceFrameData>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>(v7, v9);
  CGSize v11 = &v10[96 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[96 * v12];
  long long v13 = *a2;
  *a2 = 0u;
  *(_OWORD *)CGSize v11 = v13;
  long long v14 = a2[2];
  long long v15 = a2[3];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v14;
  *((_OWORD *)v11 + 3) = v15;
  *((_OWORD *)v11 + 4) = 0u;
  *((void *)v11 + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  *((void *)v11 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = 0;
  *((_DWORD *)v11 + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = 0;
  v18[2] = v11 + 96;
  std::vector<vg::hrtf::FaceFrameData>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_260C9878C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::FaceFrameData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>,std::reverse_iterator<vg::hrtf::FaceFrameData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      long long v11 = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v10 - 96) = 0uLL;
      *(_OWORD *)(v9 - 96) = v11;
      long long v12 = *(_OWORD *)(a3 + v8 - 64);
      long long v13 = *(_OWORD *)(a3 + v8 - 48);
      *(_OWORD *)(v9 - 80) = *(_OWORD *)(a3 + v8 - 80);
      *(_OWORD *)(v9 - 64) = v12;
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 32) = 0uLL;
      uint64_t v14 = *(void *)(a3 + v8 - 24);
      *(void *)(v9 - 32) = *(void *)(a3 + v8 - 32);
      *(void *)(v9 - 24) = v14;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 24) = 0;
      *(_DWORD *)(v9 - 16) = *(_DWORD *)(a3 + v8 - 16);
      *(_DWORD *)(v10 - 16) = 0;
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>(void **a1)
{
  free(a1[8]);

  id v2 = *a1;
}

uint64_t std::__split_buffer<vg::hrtf::FaceFrameData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>((void **)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<vg::hrtf::EarFrameData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>,std::reverse_iterator<vg::hrtf::EarFrameData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 32) = v8;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 16);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>,std::reverse_iterator<std::reverse_iterator<vg::hrtf::EarFrameData*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = (id *)(*(void *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<vg::hrtf::EarFrameData>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
  }
}

void std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<vg::hrtf::EarFrameData>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<vg::hrtf::EarFrameData>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {

    uint64_t v5 = *(void **)(i - 32);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<vg::hrtf::HRTFModel>::reset[abi:ne180100](void ****a1, void ***a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFModel::~HRTFModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::ear_detection::BoxModelPreProcessor::create(uint32x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  __p = 0;
  v26 = 0;
  v27 = 0;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = (v8 - *a2) >> 2;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, v10);
  if (v8 != v9)
  {
    uint64_t v11 = 0;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    while (1)
    {
      vg::ear_detection::makeSquareCropBox(a1, buf, *(float *)(*a2 + 4 * v11));
      if (!v29) {
        goto LABEL_31;
      }
      uint64_t v12 = v26;
      if (v26 >= v27)
      {
        uint64_t v14 = (v26 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v14 + 1) >> 60) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (v27 - (unsigned char *)__p) >> 3;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v27 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v27, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[16 * v14];
        *(_OWORD *)uint64_t v18 = *(_OWORD *)buf;
        long long v13 = v18 + 16;
        uint64_t v20 = (char *)__p;
        long long v19 = v26;
        if (v26 != __p)
        {
          do
          {
            long long v21 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v18 - 1) = v21;
            v18 -= 16;
          }
          while (v19 != v20);
          long long v19 = (char *)__p;
        }
        __p = v18;
        v26 = v13;
        v27 = &v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_OWORD *)v26 = *(_OWORD *)buf;
        long long v13 = v12 + 16;
      }
      v26 = v13;
      if (++v11 == v10) {
        goto LABEL_24;
      }
    }
  }
  long long v13 = v26;
LABEL_24:
  if ((a2[1] - *a2) >> 2 != (v13 - (unsigned char *)__p) >> 4)
  {
    uint64_t v24 = __VGLogSharedInstance();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_260C8D000, v24, OS_LOG_TYPE_ERROR, " Number of crop alignments and crop boxes must be same. ", buf, 2u);
    }

LABEL_31:
    *a4 = 0;
    goto LABEL_32;
  }
  id v22 = operator new(0x80uLL, MEMORY[0x263F8C180]);
  double v23 = v22;
  if (v22) {
    vg::ear_detection::BoxModelPreProcessor::BoxModelPreProcessor((uint64_t)v22, a1, a3, (uint64_t)a2, (uint64_t)&__p);
  }
  *a4 = v23;
LABEL_32:
  if (__p)
  {
    v26 = (char *)__p;
    operator delete(__p);
  }
}

void sub_260C99038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x2612278C0](v11, MEMORY[0x263F8C180]);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t vg::ear_detection::BoxModelPreProcessor::BoxModelPreProcessor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v79[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v68 = a1 + 8;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 8), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v67 = a1 + 32;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((void *)(a1 + 32), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v70 = (int64x2_t *)(a1 + 104);
  v71 = (char **)(a1 + 56);
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(void *)(a4 + 8) != *(void *)a4)
  {
    unint64_t v9 = 0;
    v69 = (char **)(a1 + 80);
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      id v15 = objc_alloc(MEMORY[0x263F0ED00]);
      v78[0] = *MEMORY[0x263F0ECF8];
      unint64_t v16 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", a3, v67, v68);
      v79[0] = v16;
      v78[1] = *MEMORY[0x263F0ECC0];
      uint64_t v17 = [NSNumber numberWithUnsignedLong:a3];
      uint64_t v18 = *MEMORY[0x263F0ECC8];
      v79[1] = v17;
      v79[2] = &unk_270CFDA38;
      uint64_t v19 = *MEMORY[0x263F0ECA0];
      v78[2] = v18;
      v78[3] = v19;
      v79[3] = &unk_270CFDA50;
      uint64_t v20 = [NSDictionary dictionaryWithObjects:v79 forKeys:v78 count:4];
      uint64_t v21 = [v15 initWithProperties:v20];
      uint64_t v22 = v21;
      uint64_t v24 = *(uint64_t **)(a1 + 112);
      unint64_t v23 = *(void *)(a1 + 120);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((uint64_t)v24 - v70->i64[0]) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v23 - v70->i64[0];
        uint64_t v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        uint64_t v77 = a1 + 120;
        if (v29) {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(a1 + 120, v29);
        }
        else {
          uint64_t v30 = 0;
        }
        v31 = (uint64_t *)&v30[8 * v26];
        v32 = &v30[8 * v29];
        v76 = v32;
        uint64_t *v31 = v22;
        v25 = v31 + 1;
        v75.i64[1] = (uint64_t)(v31 + 1);
        v34 = *(void **)(a1 + 104);
        v33 = *(void **)(a1 + 112);
        if (v33 == v34)
        {
          int64x2_t v36 = vdupq_n_s64((unint64_t)v33);
        }
        else
        {
          do
          {
            uint64_t v35 = *--v33;
            void *v33 = 0;
            *--v31 = v35;
          }
          while (v33 != v34);
          int64x2_t v36 = *v70;
          v25 = (void *)v75.i64[1];
          v32 = v76;
        }
        *(void *)(a1 + 104) = v31;
        *(void *)(a1 + 112) = v25;
        int64x2_t v75 = v36;
        v37 = *(char **)(a1 + 120);
        *(void *)(a1 + 120) = v32;
        v76 = v37;
        uint64_t v74 = v36.i64[0];
        std::__split_buffer<IOSurface * {__strong}>::~__split_buffer((uint64_t)&v74);
      }
      else
      {
        uint64_t *v24 = v21;
        v25 = v24 + 1;
      }
      *(void *)(a1 + 112) = v25;

      int32x2_t v38 = vcvt_s32_f32(*(float32x2_t *)(*(void *)(a1 + 32) + 16 * v9));
      v39 = *(_WORD **)(a1 + 64);
      unint64_t v40 = *(void *)(a1 + 72);
      if ((unint64_t)v39 >= v40)
      {
        int32x2_t v72 = v38;
        uint64_t v42 = ((char *)v39 - *v71) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v40 - (void)*v71;
        if (v44 >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45) {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 72, v45);
        }
        else {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *((_WORD *)v47 + 1) = v72.i16[2];
        *(_WORD *)v47 = v72.i16[0];
        v49 = *(char **)(a1 + 56);
        v48 = *(char **)(a1 + 64);
        v50 = v47;
        if (v48 != v49)
        {
          do
          {
            int v51 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *((_DWORD *)v50 - 1) = v51;
            v50 -= 4;
          }
          while (v48 != v49);
          v48 = *v71;
        }
        v41 = v47 + 4;
        *(void *)(a1 + 56) = v50;
        *(void *)(a1 + 64) = v47 + 4;
        *(void *)(a1 + 72) = &v46[4 * v45];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        v39[1] = v38.i16[2];
        _WORD *v39 = v38.i16[0];
        v41 = v39 + 2;
      }
      *(void *)(a1 + 64) = v41;
      int32x2_t v52 = vcvt_s32_f32(vadd_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 32) + 16 * v9 + 8), *(float32x2_t *)(*(void *)(a1 + 32) + 16 * v9)), _D8));
      v53 = *(_WORD **)(a1 + 88);
      unint64_t v54 = *(void *)(a1 + 96);
      if ((unint64_t)v53 >= v54)
      {
        int32x2_t v73 = v52;
        uint64_t v56 = ((char *)v53 - *v69) >> 2;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v58 = v54 - (void)*v69;
        if (v58 >> 1 > v57) {
          unint64_t v57 = v58 >> 1;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59) {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v59);
        }
        else {
          v60 = 0;
        }
        v61 = &v60[4 * v56];
        *((_WORD *)v61 + 1) = v73.i16[2];
        *(_WORD *)v61 = v73.i16[0];
        v63 = *(char **)(a1 + 80);
        v62 = *(char **)(a1 + 88);
        v64 = v61;
        if (v62 != v63)
        {
          do
          {
            int v65 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
          while (v62 != v63);
          v62 = *v69;
        }
        v55 = v61 + 4;
        *(void *)(a1 + 80) = v64;
        *(void *)(a1 + 88) = v61 + 4;
        *(void *)(a1 + 96) = &v60[4 * v59];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        v53[1] = v52.i16[2];
        _WORD *v53 = v52.i16[0];
        v55 = v53 + 2;
      }
      *(void *)(a1 + 88) = v55;
      ++v9;
    }
    while (v9 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  return a1;
}

void sub_260C99600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26 = *a10;
  if (*a10)
  {
    *(void *)(v24 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void vg::ear_detection::BoxModelPreProcessor::preProcessImage(vg::ear_detection::BoxModelPreProcessor *this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v5 = a2;
  if ([(IOSurface *)v5 width] == *(void *)this
    && [(IOSurface *)v5 height] == *((_DWORD *)this + 1))
  {
    if (*((void *)this + 5) != *((void *)this + 4))
    {
      unint64_t v6 = 0;
      do
      {
        [(IOSurface *)v5 vg_cropAndResizeYIntoSurface:*(void *)(*((void *)this + 13) + 8 * v6) origin:*(unsigned int *)(*((void *)this + 7) + 4 * v6) size:*(unsigned int *)(*((void *)this + 10) + 4 * v6)];
        ++v6;
      }
      while (v6 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::vector<IOSurface * {__strong}>::__init_with_size[abi:ne180100]<IOSurface * {__strong}*,IOSurface * {__strong}*>((char *)a3, *((void ***)this + 13), *((void ***)this + 14), (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3);
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " Invalid input image size. ", v9, 2u);
    }

    char v7 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v7;
}

void sub_260C997E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::BoxModelPreProcessor::getCropCount(vg::ear_detection::BoxModelPreProcessor *this)
{
  return (*((void *)this + 2) - *((void *)this + 1)) >> 2;
}

float vg::ear_detection::BoxModelPreProcessor::getCropAlignment(vg::ear_detection::BoxModelPreProcessor *this, uint64_t a2)
{
  return *(float *)(*((void *)this + 1) + 4 * a2);
}

__n128 vg::ear_detection::BoxModelPreProcessor::getCropBox(vg::ear_detection::BoxModelPreProcessor *this, uint64_t a2)
{
  return *(__n128 *)(*((void *)this + 4) + 16 * a2);
}

double vg::ear_detection::BoxModelPreProcessor::makeScaledBox(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32) + 16 * a3;
  v4.i64[0] = *(void *)v3;
  v4.i64[1] = *(void *)v3;
  __asm { FMOV            V4.4S, #1.0 }
  *(void *)&double result = vmlaq_n_f32(v4, (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(*a2, _Q4), (int8x16_t)_Q4, *(int8x16_t *)a2), (int8x16_t)vcltzq_f32(*a2)), (float)(*(float *)(v3 + 8) - COERCE_FLOAT(*(void *)v3)) + -1.0).u64[0];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_260C998FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_260C999F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<IOSurface * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<IOSurface * {__strong}>::__init_with_size[abi:ne180100]<IOSurface * {__strong}*,IOSurface * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (char **)*((void *)v6 + 1);
    while (a2 != a3)
    {
      size_t v8 = *a2++;
      double result = v8;
      *v7++ = result;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_260C99BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

BOOL vg::ear_detection::isTooClose(vg::ear_detection *this, const IOSurface *a2)
{
  uint64_t v2 = this;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v14, (IOSurface *)v2, 1);
  uint64_t v3 = [(vg::ear_detection *)v2 width];
  uint64_t v4 = [(vg::ear_detection *)v2 height];
  unsigned int v5 = 0;
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (float *)v14[2];
    do
    {
      size_t v8 = v7;
      for (uint64_t i = v3; i; --i)
      {
        float v10 = *v8++;
        v5 += v10 < 0.3;
      }
      ++v6;
      uint64_t v7 = (float *)((char *)v7 + (unint64_t)v14[3]);
    }
    while (v6 != v4);
  }
  uint64_t v11 = [(vg::ear_detection *)v2 width];
  BOOL v12 = (float)((float)v5 / (float)([(vg::ear_detection *)v2 height] * v11)) > 0.8;
  vg::IOSurfaceData::~IOSurfaceData(v14);

  return v12;
}

void sub_260C99D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

BOOL vg::ear_detection::isEarTooFar(void *a1, int32x4_t a2)
{
  uint64_t v2 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v10, v2, 1);
  int v3 = [(IOSurface *)v2 width];
  int v4 = [(IOSurface *)v2 height];
  LODWORD(v5) = vmuls_lane_f32(0.5, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 3), (float32x4_t)a2), 1);
  LODWORD(v6) = (float)(0.5 * vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), (float32x4_t)a2).f32[0]);
  if (v3 - 1 >= v6) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = (v3 - 1);
  }
  if (v4 - 1 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = (v4 - 1);
  }
  BOOL v7 = *(float *)((char *)v10[2] + (uint64_t)v10[3] * v5 + (uint64_t)v10[4] * v6) > 0.6;
  vg::IOSurfaceData::~IOSurfaceData(v10);

  return v7;
}

void sub_260C99E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

void vg::IOSurfaceData::~IOSurfaceData(id *this)
{
}

vg::IOSurfaceData *vg::IOSurfaceData::IOSurfaceData(vg::IOSurfaceData *this, IOSurface *a2, int a3)
{
  uint64_t v5 = a2;
  *(void *)this = v5;
  *((_DWORD *)this + 2) = a3;
  uint64_t v6 = v5;
  *((void *)this + 2) = [(IOSurface *)v6 baseAddress];
  *((void *)this + 3) = [(IOSurface *)v6 bytesPerRow];
  *((void *)this + 4) = [(IOSurface *)v6 bytesPerElement];
  [*(id *)this lockWithOptions:*((unsigned int *)this + 2) seed:0];

  return this;
}

void sub_260C99EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64x2_t vg::ear_detection::EarSideSmoothPredictorImpl::pushSide(int64x2_t *this, int a2)
{
  int v7 = a2;
  if (this[2].i64[1] == this[4].i64[0]) {
    vg::ear_detection::EarSideSmoothPredictorImpl::popSide(this);
  }
  std::deque<vg::ear_detection::EarSide>::push_back(this, &v7);
  int32x2_t v3 = (int32x2_t)vld1_dup_f32((const float *)&v7);
  int32x2_t v4 = vceq_s32(v3, (int32x2_t)0x100000000);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  int64x2_t result = vaddq_s64(this[3], (int64x2_t)vandq_s8(v5, (int8x16_t)vdupq_n_s64(1uLL)));
  this[3] = result;
  return result;
}

BOOL vg::ear_detection::EarSideSmoothPredictorImpl::popSide(int64x2_t *this)
{
  uint64_t v1 = this[2].i64[1];
  if (v1)
  {
    int32x2_t v3 = (const float *)(*(void *)(this->i64[1] + (((unint64_t)this[2].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (this[2].i64[0] & 0x3FF));
    ++this[2].i64[0];
    this[2].i64[1] = v1 - 1;
    int32x2_t v4 = (int32x2_t)vld1_dup_f32(v3);
    std::deque<vg::ear_detection::EarSide>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this, 1);
    this[3] = vaddw_s32(this[3], vceq_s32(v4, (int32x2_t)0x100000000));
  }
  return v1 != 0;
}

uint64_t vg::ear_detection::EarSideSmoothPredictorImpl::estimateSmoothEarSide(int64x2_t *this, int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v4 = this[2].u64[1];
  float v5 = 0.0;
  if (v4 == this[4].i64[0])
  {
    uint64_t v6 = 7;
    if (!a2) {
      uint64_t v6 = 6;
    }
    float v5 = (float)this->u64[v6] / (float)v4;
  }
  vg::ear_detection::EarSideSmoothPredictorImpl::pushSide(this, a2);
  if (v4 >= this[4].i64[0])
  {
    if (v5 >= *(float *)&this[4].i32[2])
    {
      unsigned int v15 = a2 & 0xFFFFFF00;
      int v13 = a2;
      uint64_t v14 = 0x100000000;
      return v14 | v15 | v13;
    }
    float v10 = __VGLogSharedInstance();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = "right";
      float v12 = *(float *)&this[4].i32[2];
      if (!a2) {
        uint64_t v11 = "left";
      }
      int v17 = 136315650;
      uint64_t v18 = v11;
      __int16 v19 = 2048;
      double v20 = v5;
      __int16 v21 = 2048;
      double v22 = v12;
      _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_INFO, " Ear side not consistent with the buffer threshold; ignoring frame for selection purposes; side: %s, ratio: %f, threshold: %f ",
        (uint8_t *)&v17,
        0x20u);
    }
  }
  else
  {
    int v7 = __VGLogSharedInstance();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = this[2].i64[1];
      double v9 = *(double *)this[4].i64;
      int v17 = 134218240;
      uint64_t v18 = (const char *)v8;
      __int16 v19 = 2048;
      double v20 = v9;
      _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_INFO, " Collecting data for the ear side smoothing buffer: %zu / %zu ", (uint8_t *)&v17, 0x16u);
    }
  }
  int v13 = 0;
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  return v14 | v15 | v13;
}

uint64_t vg::ear_detection::EarSideSmoothPredictor::estimateSmoothEarSide(int64x2_t **a1, int a2)
{
  return vg::ear_detection::EarSideSmoothPredictorImpl::estimateSmoothEarSide(*a1, a2);
}

void vg::ear_detection::EarSideSmoothPredictor::create(vg::ear_detection::EarSideSmoothPredictor *this)
{
}

void vg::ear_detection::EarSideSmoothPredictor::create()
{
}

void sub_260C9A290(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarSideSmoothPredictor::EarSideSmoothPredictor()
{
}

{
  operator new();
}

void vg::ear_detection::EarSideSmoothPredictor::~EarSideSmoothPredictor(vg::ear_detection::EarSideSmoothPredictor *this)
{
}

{
  std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0);
}

void std::deque<vg::ear_detection::EarSide>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<vg::ear_detection::EarSide>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<vg::ear_detection::EarSide>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      int32x2_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<vg::ear_detection::EarSide *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<vg::ear_detection::EarSide *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<vg::ear_detection::EarSide *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<vg::ear_detection::EarSide *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_260C9A720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<vg::ear_detection::EarSide *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(a1[4], v16);
      __int16 v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<vg::ear_detection::EarSide *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<vg::ear_detection::EarSide>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void *std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100](void **a1, void *a2)
{
  int64x2_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::deque<vg::ear_detection::EarSide>::~deque[abi:ne180100](result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

uint64_t std::deque<vg::ear_detection::EarSide>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<vg::ear_detection::EarSide *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<vg::ear_detection::EarSide *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void vg::ear_detection::EarPoseDetectorImpl::detect(vg::ear_detection::EarPoseDetectorImpl *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd::float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, uint64_t a5@<X8>)
{
  double v74 = *(double *)a4.columns[1].i64;
  __n128 v76 = (__n128)a4.columns[2];
  float v72 = a4.columns[0].f32[0];
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(*(vg::ear_detection::EarBoundingBoxModelImpl ***)this, v8, (uint64_t)v100);
  if (!v101) {
    goto LABEL_24;
  }
  vg::ear_detection::EarLandmarksModel::predictLandmarks(*((uint64_t ***)this + 1), v8, v100, v97);
  if (!v99[8]) {
    goto LABEL_24;
  }
  int v10 = vg::ear_detection::EarPoseDetectorImpl::checkEarQuality(this, v8, v9, (const vg::ear_detection::EarBoundingBoxModel::BoundingBox *)v100, (const vg::ear_detection::EarLandmarksModel::Landmarks *)v97);
  if (!v10)
  {
    uint64_t v11 = v98;
    uint64_t v12 = vg::ear_detection::EarLandmarksModel::estimateEarSide(v98[0].f64);
    int v13 = v12;
    if ((v12 & 0xFF00000000) != 0)
    {
      if (*((_DWORD *)this + 10) != v12) {
        *((_DWORD *)this + 9) = 0;
      }
      uint64_t v14 = [(IOSurface *)v9 width];
      uint64_t v15 = [(IOSurface *)v9 height];
      uint64_t v16 = [(IOSurface *)v8 width];
      uint64_t v17 = [(IOSurface *)v8 height];
      v18.f32[0] = (float)v14;
      v19.i64[0] = v16;
      v19.i64[1] = v17;
      v18.f32[1] = (float)v15;
      __asm { FMOV            V1.2S, #-1.0 }
      float32x2_t v25 = vadd_f32(v18, _D1);
      float32x2_t v26 = vdiv_f32(v18, vcvt_f32_f64(vcvtq_f64_s64(v19)));
      float32x2_t v27 = vmul_f32(v26, vcvt_f32_f64(*(float64x2_t *)((char *)&v98[19] + 8)));
      float32x2_t v71 = vmul_f32(v26, vcvt_f32_f64(v98[0]));
      float32x2_t v28 = vmul_f32(vadd_f32(v71, v27), (float32x2_t)0x3F0000003F000000);
      float32x2_t v29 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v28, v25), (int8x8_t)v25, (int8x8_t)v28), (int8x8_t)vcltz_f32(v28));
      __n128 v30 = vg::ear_detection::pointFromPixelOnDepthImage(v9, *(double *)&v29, v72, v74, v76);
      float32x4_t v31 = vmulq_f32((float32x4_t)v30, (float32x4_t)v30);
      float32x4_t v96 = (float32x4_t)v30;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0] != 0.0)
      {
        float32x2_t v32 = (float32x2_t)vrev64_s32((int32x2_t)v27);
        float32x2_t v33 = (float32x2_t)vzip1_s32((int32x2_t)v32, (int32x2_t)v71);
        v32.i32[0] = v71.i32[1];
        float32x2_t v34 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v13 == 1), 0x1FuLL)), (int8x8_t)vsub_f32(v33, v32), (int8x8_t)vsub_f32(v32, v33));
        float32x2_t v35 = vmla_f32(v29, (float32x2_t)0x3F0000003F000000, v34);
        __n128 v36 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v35, v25), (int8x8_t)v25, (int8x8_t)v35), (int8x8_t)vcltz_f32(v35))), v72, v74, v76);
        float32x4_t v37 = vmulq_f32((float32x4_t)v36, (float32x4_t)v36);
        float32x4_t v95 = (float32x4_t)v36;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0] != 0.0)
        {
          __asm { FMOV            V0.2S, #0.75 }
          float32x2_t v39 = vmla_f32(v29, _D0, v34);
          __n128 v40 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v39, v25), (int8x8_t)v25, (int8x8_t)v39), (int8x8_t)vcltz_f32(v39))), v72, v74, v76);
          float32x4_t v41 = vmulq_f32((float32x4_t)v40, (float32x4_t)v40);
          float32x4_t v94 = (float32x4_t)v40;
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0] != 0.0)
          {
            float32x2_t v42 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v27, v25), (int8x8_t)v25, (int8x8_t)v27), (int8x8_t)vcltz_f32(v27));
            __n128 v43 = vg::ear_detection::pointFromPixelOnDepthImage(v9, *(double *)&v42, v72, v74, v76);
            float32x4_t v44 = vmulq_f32((float32x4_t)v43, (float32x4_t)v43);
            float32x4_t v93 = (float32x4_t)v43;
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0] != 0.0)
            {
              float32x2_t v45 = vmla_f32(v42, (float32x2_t)vdup_n_s32(0x3E4CCCCDu), vsub_f32(v27, v71));
              __n128 v46 = vg::ear_detection::pointFromPixelOnDepthImage(v9, COERCE_DOUBLE(vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v45, v25), (int8x8_t)v25, (int8x8_t)v45), (int8x8_t)vcltz_f32(v45))), v72, v74, v76);
              float32x4_t v47 = vmulq_f32((float32x4_t)v46, (float32x4_t)v46);
              float32x4_t v92 = (float32x4_t)v46;
              if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0] != 0.0)
              {
                if (vg::shared::arePointsCollinear(&v96, &v95, &v94, 0.9)
                  && vg::shared::arePointsCollinear(&v96, &v93, &v92, 0.9))
                {
                  long long v84 = 0u;
                  long long v85 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  char v86 = 0;
                  char v87 = 0;
                  memset(v91, 0, sizeof(v91));
                  std::vector<float>::reserve((void **)v91, 0x62uLL);
                  do
                  {
                    std::vector<float>::emplace_back<double const&>((uint64_t)v91, v11->f64);
                    v48 = &v11->f64[1];
                    std::vector<float>::emplace_back<double const&>((uint64_t)v91, v48);
                    uint64_t v11 = (float64x2_t *)(v48 + 2);
                  }
                  while (v11 != (float64x2_t *)v99);
                  __n128 v49 = vg::ear_detection::EarPoseDetectorImpl::computeEarPlaneNormal(v72, v74, v76, (uint64_t)this, *(float **)&v91[0], v13, v8, v9);
                  int32x4_t v50 = (int32x4_t)vmulq_f32((float32x4_t)v49, (float32x4_t)v49);
                  v50.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v50, 2), vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1))).u32[0];
                  float32x2_t v51 = vrsqrte_f32((float32x2_t)v50.u32[0]);
                  float32x2_t v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v51, v51)));
                  float32x4_t v80 = vnegq_f32(vmulq_n_f32((float32x4_t)v49, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52))).f32[0]));
                  int v79 = 0;
                  *(_OWORD *)v78 = 0u;
                  if (vg::shared::intersectPlane(&v80, &v96, (float32x4_t *)v78, &v93, &v79))
                  {
                    float32x4_t v77 = v80;
                    if (fabsf(v80.f32[2]) >= 0.1)
                    {
                      int v57 = *((_DWORD *)this + 9);
                      if (v57)
                      {
                        float32x4_t v58 = vmlaq_n_f32(vmulq_n_f32(*((float32x4_t *)this + 3), 1.0 - *((float *)this + 16)), v80, *((float *)this + 16));
                        *((float32x4_t *)this + 3) = v58;
                        float32x4_t v77 = v58;
                      }
                      else
                      {
                        *((float32x4_t *)this + 3) = v80;
                      }
                      *((_DWORD *)this + 9) = v57 + 1;
                      if (v13)
                      {
                        *(void *)&long long v59 = 0;
                        HIDWORD(v59) = 0;
                        float v60 = v77.f32[0];
                      }
                      else
                      {
                        float v60 = -v77.f32[0];
                        *(void *)&long long v59 = 0;
                        HIDWORD(v59) = 0;
                      }
                      *((float *)&v59 + 2) = v60;
                      long long v75 = v59;
                      float v62 = v77.f32[2];
                      if (v77.f32[2] == 0.0) {
                        float v62 = 0.001;
                      }
                      float v63 = atanf(*((float *)&v59 + 2) / v62);
                      float v64 = asinf(v77.f32[1]);
                      CompactBoundingBodouble x = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox((vg::ear_detection::EarLandmarksModel::Landmarks *)v97, 0.1);
                      uint64_t v65 = [(IOSurface *)v8 width];
                      uint64_t v66 = [(IOSurface *)v8 height];
                      *(void *)&long long v67 = 0;
                      *(void *)&long long v68 = 0;
                      *((void *)&v68 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.25, *(float32x2_t *)v77.f32, 1));
                      *((void *)&v67 + 1) = v77.u32[2];
                      v69.i64[0] = v65;
                      v69.i64[1] = v66;
                      float64x2_t v70 = vcvtq_f64_s64(v69);
                      LODWORD(buf) = v13;
                      long long v82 = v75;
                      long long v83 = v68;
                      long long v84 = v67;
                      long long v85 = xmmword_260D216E0;
                      float v88 = v63 * 57.296;
                      float v89 = v64 * -57.296;
                      float32x4_t v90 = vdivq_f32((float32x4_t)CompactBoundingBox, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v70), v70));
                      std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(a5, &buf);
                      int v56 = 0;
                      goto LABEL_39;
                    }
                    v53 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)v78 = 0;
                      long long v54 = " Frame rejected by pose estimator because of noise in angle estimation. test ";
LABEL_28:
                      _os_log_impl(&dword_260C8D000, v53, OS_LOG_TYPE_DEBUG, v54, v78, 2u);
                    }
                  }
                  else
                  {
                    v53 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)v78 = 0;
                      long long v54 = " Frame rejected by pose estimator because of failing normal - plane intersection test ";
                      goto LABEL_28;
                    }
                  }

                  *(unsigned char *)a5 = 0;
                  *(unsigned char *)(a5 + 176) = 0;
                  int v56 = 1;
LABEL_39:
                  *(_DWORD *)(a5 + 192) = v56;
                  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&buf);
                  goto LABEL_25;
                }
                long long v55 = __VGLogSharedInstance();
                if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_260C8D000, v55, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of noisy depth ", (uint8_t *)&buf, 2u);
                }
              }
            }
          }
        }
      }
    }
LABEL_24:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 176) = 0;
    *(_DWORD *)(a5 + 192) = 1;
    goto LABEL_25;
  }
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 176) = 0;
  *(_DWORD *)(a5 + 192) = v10;
LABEL_25:
}

void sub_260C9B480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)va);

  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPoseDetectorImpl::checkEarQuality(vg::ear_detection::EarPoseDetectorImpl *this, IOSurface *a2, IOSurface *a3, const vg::ear_detection::EarBoundingBoxModel::BoundingBox *a4, const vg::ear_detection::EarLandmarksModel::Landmarks *a5)
{
  uint64_t v9 = a2;
  int v10 = a3;
  if (vg::ear_detection::isTooClose((vg::ear_detection *)v10, v11))
  {
    uint64_t v12 = __VGLogSharedInstance();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too close. ", buf, 2u);
    }
    uint64_t v13 = 6;
    goto LABEL_14;
  }
  if (*((float *)a4 + 6) < *((float *)this + 4))
  {
    uint64_t v12 = __VGLogSharedInstance();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:
      uint64_t v13 = 1;
      goto LABEL_14;
    }
    *(_WORD *)float32x2_t v28 = 0;
    uint64_t v14 = " Frame rejected by pose estimator because of ear not present. ";
    uint64_t v15 = v28;
LABEL_8:
    _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, v14, v15, 2u);
    goto LABEL_9;
  }
  if (*((float *)a4 + 7) < *((float *)this + 5))
  {
    uint64_t v12 = __VGLogSharedInstance();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)float32x2_t v27 = 0;
      _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear occlusion. ", v27, 2u);
    }
    uint64_t v13 = 4;
    goto LABEL_14;
  }
  if (vg::ear_detection::EarBoundingBoxModel::BoundingBox::getMeanVisibility(a4) < *((float *)this + 6))
  {
    uint64_t v12 = __VGLogSharedInstance();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_9;
    }
    __int16 v26 = 0;
    uint64_t v14 = " Frame rejected by pose estimator because of low confidence bbox ";
    uint64_t v15 = (uint8_t *)&v26;
    goto LABEL_8;
  }
  if (vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(a5, *((float *)this + 7)) < *((float *)this + 8))
  {
    uint64_t v12 = __VGLogSharedInstance();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_9;
    }
    __int16 v25 = 0;
    uint64_t v14 = " Frame rejected by pose estimator because of low percentile confidence landmarks ";
    uint64_t v15 = (uint8_t *)&v25;
    goto LABEL_8;
  }
  uint64_t v17 = [(IOSurface *)v10 width];
  uint64_t v18 = [(IOSurface *)v9 width];
  uint64_t v19 = [(IOSurface *)v10 height];
  uint64_t v20 = [(IOSurface *)v9 height];
  float v21 = (float)v17 / (float)v18;
  float v22 = (float)v19 / (float)v20;
  *(float *)v23.i32 = v21 * *(float *)a4;
  *(float *)&v23.i32[1] = v22 * *((float *)a4 + 1);
  *(float *)&v23.i32[2] = v21 * *((float *)a4 + 2);
  *(float *)&v23.i32[3] = v22 * *((float *)a4 + 3);
  if (!vg::ear_detection::isEarTooFar(v10, v23))
  {
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  uint64_t v12 = __VGLogSharedInstance();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too far. ", v24, 2u);
  }
  uint64_t v13 = 7;
LABEL_14:

LABEL_15:
  return v13;
}

void sub_260C9B7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

float *std::vector<float>::emplace_back<double const&>(uint64_t a1, double *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(float **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(float **)a1;
    uint64_t v10 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      uint64_t v9 = *(float **)a1;
      uint64_t v6 = *(float **)(a1 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (float *)&v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    float v17 = *a2;
    float *v15 = v17;
    uint64_t v8 = v15 + 1;
    while (v6 != v9)
    {
      int v18 = *((_DWORD *)v6-- - 1);
      *((_DWORD *)v15-- - 1) = v18;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    float v7 = *a2;
    float *v6 = v7;
    uint64_t v8 = v6 + 1;
  }
  *(void *)(a1 + 8) = v8;
  return v8 - 1;
}

__n128 vg::ear_detection::EarPoseDetectorImpl::computeEarPlaneNormal(float a1, double a2, __n128 a3, uint64_t a4, float *a5, int a6, void *a7, void *a8)
{
  vg::ear_detection::EarPoseDetectorImpl::findROI(a5, a6, a7, a8, __p, a1, a2, a3);
  result.n128_f64[0] = vg::ear_detection::computePlaneNormal(__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    __n128 v9 = result;
    operator delete(__p[0]);
    return v9;
  }
  return result;
}

void sub_260C9B9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vg::ear_detection::EarPoseDetectorImpl::findROI(float *a1@<X1>, int a2@<W2>, void *a3@<X3>, void *a4@<X4>, void **a5@<X8>, float a6@<S0>, double a7@<D1>, __n128 a8@<Q2>)
{
  id v61 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = [(IOSurface *)v12 width];
  uint64_t v14 = [(IOSurface *)v12 height];
  uint64_t v15 = [v61 width];
  uint64_t v16 = [v61 height];
  float v17 = (float)v13 / (float)v15;
  float v18 = (float)v14 / (float)v16;
  v19.f32[0] = v17 * *a1;
  v19.f32[1] = v18 * a1[1];
  v20.f32[0] = v17 * a1[26];
  v20.f32[1] = v18 * a1[27];
  float32x2_t v73 = v20;
  v74[0] = v19;
  EarTriangleROIVertedouble x = vg::ear_detection::getEarTriangleROIVertex(a2, v19, v20);
  float32x2_t v72 = EarTriangleROIVertex;
  float32x2_t v23 = v73;
  float32x2_t v22 = v74[0];
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v71, v12, 1);
  v69.i32[0] = 0;
  std::vector<float>::vector(__p, [(IOSurface *)v12 height] * [(IOSurface *)v12 width], &v69);
  uint64_t v24 = [(IOSurface *)v12 width];
  int v25 = [(IOSurface *)v12 height];
  float32x2_t v26 = vminnm_f32(EarTriangleROIVertex, vminnm_f32(v22, v23));
  float32x2_t v27 = vmaxnm_f32(EarTriangleROIVertex, vmaxnm_f32(v22, v23));
  if (v25)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    __n128 v30 = (char *)v71[2];
    float32x4_t v31 = (char *)v71[3];
    float32x2_t v32 = __p[0];
    do
    {
      uint64_t v33 = v24;
      float32x2_t v34 = v30;
      uint64_t v35 = v28;
      if (v24)
      {
        do
        {
          int v36 = *(_DWORD *)v34;
          v34 += 4;
          v32[v35++] = v36;
          --v33;
        }
        while (v33);
      }
      ++v29;
      v28 += v24;
      __n128 v30 = &v31[(void)v30];
    }
    while (v29 != v25);
  }
  unint64_t v37 = (unint64_t)v26.f32[0];
  unint64_t v62 = (unint64_t)v27.f32[0];
  if ((unint64_t)v26.f32[0] < (unint64_t)v27.f32[0])
  {
    unint64_t v63 = (unint64_t)v26.f32[1];
    unint64_t v38 = (unint64_t)v27.f32[1];
    float v39 = (float)v13 + -1.0;
    float v40 = (float)v14 + -1.0;
    float32x2_t v41 = (float32x2_t)vdup_n_s32(0x4479FFFFu);
    do
    {
      if (v63 < v38)
      {
        float v42 = (float)v37;
        if (v39 < (float)v37) {
          float v42 = v39;
        }
        float v67 = v42;
        unint64_t v43 = v63;
        do
        {
          v44.f32[0] = (float)v37;
          v44.f32[1] = (float)v43;
          float32x2_t v69 = v44;
          if (vg::shared::isPointInTriangle(&v69, v74, &v73, &v72))
          {
            uint64_t v45 = [(IOSurface *)v12 width];
            *((_DWORD *)__p[0] + v37 + v45 * v43) = 0;
            if (v40 >= (float)v43) {
              float v46 = (float)v43;
            }
            else {
              float v46 = v40;
            }
            __n128 v47 = vg::ear_detection::pointFromPixelOnDepthImage(v12, COERCE_DOUBLE(__PAIR64__(LODWORD(v46), LODWORD(v67))), a6, a7, a8);
            *(float32x2_t *)&long long v48 = vmul_f32((float32x2_t)v47.n128_u64[0], v41);
            DWORD2(v48) = vmuls_lane_f32(1000.0, (float32x4_t)v47, 2);
            int32x4_t v50 = a5[1];
            unint64_t v49 = (unint64_t)a5[2];
            if ((unint64_t)v50 >= v49)
            {
              long long v68 = v48;
              uint64_t v52 = ((char *)v50 - (unsigned char *)*a5) >> 4;
              if ((unint64_t)(v52 + 1) >> 60) {
                std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v53 = v49 - (void)*a5;
              uint64_t v54 = v53 >> 3;
              if (v53 >> 3 <= (unint64_t)(v52 + 1)) {
                uint64_t v54 = v52 + 1;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v54;
              }
              if (v55) {
                int v56 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v55);
              }
              else {
                int v56 = 0;
              }
              int v57 = &v56[16 * v52];
              *(_OWORD *)int v57 = v68;
              float32x2_t v51 = v57 + 16;
              long long v59 = (char *)*a5;
              float32x4_t v58 = (char *)a5[1];
              if (v58 != *a5)
              {
                do
                {
                  long long v60 = *((_OWORD *)v58 - 1);
                  v58 -= 16;
                  *((_OWORD *)v57 - 1) = v60;
                  v57 -= 16;
                }
                while (v58 != v59);
                float32x4_t v58 = (char *)*a5;
              }
              *a5 = v57;
              a5[1] = v51;
              a5[2] = &v56[16 * v55];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              _OWORD *v50 = v48;
              float32x2_t v51 = v50 + 1;
            }
            a5[1] = v51;
          }
          ++v43;
        }
        while (v43 != v38);
      }
      ++v37;
    }
    while (v37 != v62);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  vg::IOSurfaceData::~IOSurfaceData(v71);
}

void sub_260C9BD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,id a30)
{
  if (__p) {
    operator delete(__p);
  }
  vg::IOSurfaceData::~IOSurfaceData(&a30);
  uint64_t v33 = *(void **)v31;
  if (*(void *)v31)
  {
    *(void *)(v31 + 8) = v33;
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPoseDetector::detectPose(vg::ear_detection::EarPoseDetectorImpl **this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd::float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, uint64_t a5@<X8>)
{
}

void vg::ear_detection::EarPoseDetector::create()
{
}

void sub_260C9BE60(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPoseDetector::EarPoseDetector()
{
}

void sub_260C9BEE0(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x1020C40B1F4174DLL);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPoseDetector::~EarPoseDetector(vg::ear_detection::EarBoundingBoxModel ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  vg::ear_detection::EarBoundingBoxModel **v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v8;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 128), *((const void **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 152), *((const void **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  *(unsigned char *)(a1 + 176) = 1;
  return a1;
}

void sub_260C9C00C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    long long v6 = (_DWORD *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_260C9C090(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::ear_detection::EarPoseDetectorImpl::EarPoseDetectorImpl(uint64_t a1, uint64_t a2)
{
  long long v4 = (uint64_t *)(a2 + 24);
  vg::ear_detection::EarBoundingBoxModel::create((uint64_t *)(a2 + 24), (void *)a1);
  vg::ear_detection::EarLandmarksModel::create(v4, (void *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 36) = 0x100000000;
  *(_DWORD *)(a1 + 64) = 1051372203;
  return a1;
}

void sub_260C9C120(_Unwind_Exception *a1)
{
  std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarBoundingBoxModel *std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel **a1, vg::ear_detection::EarBoundingBoxModel *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarBoundingBoxModel::~EarBoundingBoxModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void std::default_delete<vg::ear_detection::EarPoseDetectorImpl>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel **a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x2612278D0);
  }
}

vg::ear_detection::EarLandmarksModel *std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](vg::ear_detection::EarLandmarksModel **a1, vg::ear_detection::EarLandmarksModel *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarLandmarksModel::~EarLandmarksModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::ear_detection::makeSquareCropBox(uint32x2_t *a1@<X0>, unsigned char *a2@<X8>, float a3@<S0>)
{
  BOOL v4 = a3 >= 0.0 && a3 <= 1.0;
  if (!v4)
  {
    long long v5 = __VGLogSharedInstance();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = 0;
      long long v6 = " Invalid input alignment. ";
      long long v7 = (uint8_t *)&v17;
LABEL_16:
      _os_log_impl(&dword_260C8D000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  float32x2_t v8 = vcvt_f32_u32(*a1);
  float v9 = v8.f32[0] + -1.0;
  float v10 = v8.f32[1] + -1.0;
  if (v8.f32[1] <= v8.f32[0])
  {
    *(float *)&long long v12 = (float)(v8.f32[0] - v8.f32[1]) * a3;
    float v11 = 0.0;
    BOOL v4 = (float)((float)(*(float *)&v12 + v8.f32[1]) + -1.0) <= v9;
    float v9 = (float)(*(float *)&v12 + v8.f32[1]) + -1.0;
    if (!v4)
    {
      long long v5 = __VGLogSharedInstance();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      __int16 v15 = 0;
      long long v6 = " Invalid alignment, box bottom-right corner extends beyond image size. ";
      long long v7 = (uint8_t *)&v15;
      goto LABEL_16;
    }
  }
  else
  {
    float v11 = (float)(v8.f32[1] - v8.f32[0]) * a3;
    LODWORD(v12) = 0;
    BOOL v4 = (float)((float)(v11 + v8.f32[0]) + -1.0) <= v10;
    float v10 = (float)(v11 + v8.f32[0]) + -1.0;
    if (!v4)
    {
      long long v5 = __VGLogSharedInstance();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        __int16 v16 = 0;
        long long v6 = " Invalid alignment, box bottom-right corner extends beyond image size. ";
        long long v7 = (uint8_t *)&v16;
        goto LABEL_16;
      }
LABEL_17:

      char v13 = 0;
      *a2 = 0;
      goto LABEL_18;
    }
  }
  *((float *)&v12 + 1) = v11;
  *((void *)&v12 + 1) = __PAIR64__(LODWORD(v10), LODWORD(v9));
  *(_OWORD *)a2 = v12;
  char v13 = 1;
LABEL_18:
  a2[16] = v13;
}

uint64_t vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 16) = 0u;
  BOOL v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 64) = 0u;
  long long v5 = (void *)(a1 + 64);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  vg::ear_detection::LandmarkModelPreProcessor::create((vg::ear_detection::LandmarkModelPreProcessor *)0x190, (vg::ear_detection::LandmarkModelPreProcessor **)(a1 + 80));
  long long v6 = VGLogEarLandmarksModel();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
  }

  vg::shared::VGE5RT::compileModel((uint64_t *)a2, 1, buf);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)buf);
  uint64_t v8 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "input_image");
  float v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, buf);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = *((void *)v10 + 5);
  uint64_t v11 = *((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  char v13 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "detection");
  __int16 v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, buf);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v17 = *((void *)v15 + 5);
  uint64_t v16 = *((void *)v15 + 6);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  float v18 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v16;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::AllocateMemory();
  std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(v5, (uint64_t *)buf);
  uint64_t v20 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  float v21 = *(std::__shared_weak_count **)(a1 + 72);
  int v25 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::BindMemoryObject();
  float32x2_t v22 = (E5RT::ExecutionStream *)v25;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)buf, v22);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(v4, (uint64_t *)buf);
  uint64_t v23 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  return a1;
}

void sub_260C9C694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p) {
    vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl((uint64_t)__p);
  }
  std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100](v17, 0);
  float32x2_t v19 = (std::__shared_weak_count *)v16[9];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)v16[7];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  float v21 = (std::__shared_weak_count *)v16[5];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  float32x2_t v22 = (std::__shared_weak_count *)v16[3];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)v16[1];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

id VGLogEarLandmarksModel(void)
{
  if (VGLogEarLandmarksModel(void)::onceToken != -1) {
    dispatch_once(&VGLogEarLandmarksModel(void)::onceToken, &__block_literal_global);
  }
  v0 = (void *)VGLogEarLandmarksModel(void)::handle;

  return v0;
}

void *std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::shared_ptr[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::BufferObject>::shared_ptr[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<E5RT::ExecutionStream>::shared_ptr[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void vg::ear_detection::EarLandmarksModelImpl::predictLandmarks(uint64_t *a1@<X0>, void *a2@<X1>, int32x4_t *a3@<X2>, unsigned char *a4@<X8>)
{
  id v7 = a2;
  unsigned int v8 = [v7 width];
  unint64_t v42 = __PAIR64__([v7 height], v8);
  *(_OWORD *)v41[0].f32 = 0uLL;
  LODWORD(v9) = 1036831949;
  *(double *)&long long v10 = vg::ear_detection::makeLargeBox((uint32x2_t *)&v42, *a3, v9);
  *(_OWORD *)v41[0].f32 = v10;
  uint64_t v11 = vg::ear_detection::LandmarkModelPreProcessor::preProcessImage((void *)a1[10], v7, v41);
  if (v11)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    char v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v13);
    uint64_t v15 = *(void *)(*(void *)(TensorStrides + 8) - 16);
    if (v15 != [v11 bytesPerRow])
    {
      uint64_t v16 = objc_msgSend(v11, "vg_convertSurfaceStride:", *(void *)(*(void *)(TensorStrides + 8) - 16));

      uint64_t v11 = (void *)v16;
    }
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    uint64_t v39 = *(void *)&__src[0];
    if (*(void *)&__src[0]) {
      operator new();
    }
    uint64_t v40 = 0;
    E5RT::IOPort::BindMemoryObject();
    *(void *)&__src[0] = 0;
    float v18 = (std::__shared_weak_count *)a1[1];
    uint64_t v37 = *a1;
    unint64_t v38 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    float32x2_t v19 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      uint64_t v20 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
      float v21 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v20);
      vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v19, v21, v22, (uint64_t)&v35);
      if (v36 == 49)
      {
        uint64_t v23 = 0;
        __src[0] = *a3;
        uint64_t v24 = v35;
        int v25 = &__src[2];
        int v26 = 49;
        while (1)
        {
          float64x2_t v33 = 0uLL;
          float64_t v27 = *(float *)&v24[(v23 + v26)];
          v33.f64[0] = *(float *)&v24[v23];
          v33.f64[1] = v27;
          vg::ear_detection::LandmarkModelPreProcessor::makeScaledPoint(v41, &v33, (uint64_t)&v31);
          if (!v32) {
            break;
          }
          int v26 = v36;
          uint64_t v24 = v35;
          int v28 = v35[(v23 + 2 * v36)];
          *((_OWORD *)v25 - 1) = v31;
          _DWORD *v25 = v28;
          v25 += 6;
          if (++v23 == 49)
          {
            memcpy(a4, __src, 0x4B0uLL);
            a4[1200] = 1;
            goto LABEL_27;
          }
        }
        __n128 v30 = VGLogEarLandmarksModel();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
        }
      }
      else
      {
        __n128 v30 = VGLogEarLandmarksModel();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
        }
      }

      *a4 = 0;
      a4[1200] = 0;
LABEL_27:
      free(v35);
    }
    else
    {
      uint64_t v29 = VGLogEarLandmarksModel();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
      }

      *a4 = 0;
      a4[1200] = 0;
    }
  }
  else
  {
    uint64_t v17 = VGLogEarLandmarksModel();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarLandmarksModelImpl::predictLandmarks();
    }

    *a4 = 0;
    a4[1200] = 0;
  }
}

void sub_260C9CC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarLandmarksModel::EarLandmarksModel()
{
}

void sub_260C9CD50(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C40D3FB9507);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarLandmarksModel::~EarLandmarksModel(vg::ear_detection::EarLandmarksModel *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::ear_detection::EarLandmarksModel::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  v16[3] = *MEMORY[0x263EF8340];
  long long v4 = (char *)a1 + 23;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_10:
      uint64_t v12 = VGLogEarLandmarksModel();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        vg::ear_detection::EarLandmarksModel::create();
      }

      *a2 = 0;
      return;
    }
    long long v5 = (uint64_t *)*a1;
  }
  else
  {
    long long v5 = a1;
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_10;
    }
  }
  long long v6 = NSString;
  id v7 = [NSString stringWithUTF8String:v5];
  v16[0] = v7;
  v16[1] = @"ear_landmarks_detector_mlmodel";
  v16[2] = @"ear_landmarks_fp16.espresso.net";
  unsigned int v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v16 count:3];
  double v9 = [v6 pathWithComponents:v8];

  long long v10 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v11 = v10;
  if (v9)
  {
    if ([v10 fileExistsAtPath:v9])
    {
      if (operator new(8uLL, MEMORY[0x263F8C180]))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v9 UTF8String]);
        vg::ear_detection::EarLandmarksModel::EarLandmarksModel();
      }
    }
    else
    {
      uint64_t v14 = VGLogEarLandmarksModel();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        vg::ear_detection::EarLandmarksModel::create((uint64_t)v9, v14);
      }
    }
  }
  else
  {
    char v13 = VGLogEarLandmarksModel();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarLandmarksModel::create(v4, a1, v13);
    }
  }
  *a2 = 0;
}

void sub_260C9CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2612278C0](v17, MEMORY[0x263F8C180]);

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarLandmarksModel::predictLandmarks(uint64_t **a1@<X0>, void *a2@<X1>, int32x4_t *a3@<X2>, unsigned char *a4@<X8>)
{
}

float vg::ear_detection::EarLandmarksModel::Landmarks::getMeanLandmarkVisibility(vg::ear_detection::EarLandmarksModel::Landmarks *this)
{
  float v1 = 0.0;
  for (uint64_t i = 32; i != 1208; i += 24)
    float v1 = v1 + *(float *)((char *)this + i);
  return v1 / 49.0;
}

float vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(vg::ear_detection::EarLandmarksModel::Landmarks *this, float a2)
{
  unsigned int v2 = 0;
  for (uint64_t i = 32; i != 1208; i += 24)
  {
    if (*(float *)((char *)this + i) > a2) {
      ++v2;
    }
  }
  return (float)v2 / 49.0;
}

__n128 vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox(vg::ear_detection::EarLandmarksModel::Landmarks *this, float a2)
{
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x1A0uLL, 0x49090899uLL);
  uint64_t v3 = 0;
  long long v4 = (float *)memptr;
  long long v5 = (_OWORD *)((char *)this + 16);
  do
  {
    float64x2_t v6 = *(float64x2_t *)v5;
    long long v5 = (_OWORD *)((char *)v5 + 24);
    *(float32x2_t *)&v4[v3] = vcvt_f32_f64(v6);
    v3 += 2;
  }
  while (v3 != 98);
  float v7 = *v4;
  uint64_t v8 = 2;
  v9.f32[0] = *v4;
  do
  {
    if (v4[v8] < v9.f32[0]) {
      v9.f32[0] = v4[v8];
    }
    v8 += 2;
  }
  while (v8 != 98);
  for (uint64_t i = 2; i != 98; i += 2)
  {
    if (v7 < v4[i]) {
      float v7 = v4[i];
    }
  }
  float v11 = v4[1];
  uint64_t v12 = 3;
  float v13 = v11;
  do
  {
    if (v4[v12] < v13) {
      float v13 = v4[v12];
    }
    v12 += 2;
  }
  while (v12 != 99);
  for (uint64_t j = 3; j != 99; j += 2)
  {
    if (v11 < v4[j]) {
      float v11 = v4[j];
    }
  }
  *(float32x2_t *)v15.f32 = vmul_n_f32(vsub_f32((float32x2_t)__PAIR64__(LODWORD(v11), LODWORD(v7)), (float32x2_t)__PAIR64__(LODWORD(v13), v9.u32[0])), a2);
  v15.i64[1] = v15.i64[0];
  v9.f32[1] = v13;
  v9.i64[1] = __PAIR64__(LODWORD(v11), LODWORD(v7));
  *(void *)&long long v16 = vsubq_f32(v9, v15).u64[0];
  *((void *)&v16 + 1) = vaddq_f32(v9, v15).i64[1];
  long long v19 = v16;
  free(v4);
  return (__n128)v19;
}

uint64_t vg::ear_detection::EarLandmarksModel::estimateEarSide(double *a1)
{
  double v1 = a1[1];
  float v2 = a1[12] - *a1;
  float v3 = a1[13] - v1;
  float v4 = a1[39] - *a1;
  *(float *)&double v1 = a1[40] - v1;
  return ((float)((float)(v2 * *(float *)&v1) - (float)(v3 * v4)) <= 0.0) | 0x100000000;
}

void ___ZL22VGLogEarLandmarksModelv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "EarLandmarksModel");
  double v1 = (void *)VGLogEarLandmarksModel(void)::handle;
  VGLogEarLandmarksModel(void)::handle = (uint64_t)v0;
}

void sub_260C9D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id **std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100](id **result, id *a2)
{
  id v2 = *result;
  vg::ear_detection::EarLandmarksModel *result = a2;
  if (v2)
  {

    JUMPOUT(0x2612278D0);
  }
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t *std::shared_ptr<E5RT::ExecutionStreamOperation>::shared_ptr[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  vg::ear_detection::EarLandmarksModel *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612278D0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26556FEE0, MEMORY[0x263F8C068]);
}

void sub_260C9D550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  float v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      float v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      float32x2_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t *std::shared_ptr<E5RT::BufferObject>::shared_ptr[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::logic_error *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t *std::shared_ptr<E5RT::ExecutionStream>::shared_ptr[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::logic_error *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::default_delete<vg::ear_detection::EarLandmarksModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::LandmarkModelPreProcessor>::reset[abi:ne180100]((id **)(a2 + 80), 0);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a2 + 40);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    int v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    JUMPOUT(0x2612278D0);
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void vg::ear_detection::EarLandmarksModelImpl::predictLandmarks()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to prep image for landmark model.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Invalid landmark network output.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to scale CG point.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Incorrect number of detections for landmarks points.", v2, v3, v4, v5, v6);
}

void vg::ear_detection::EarLandmarksModel::create()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Unable to create model with empty modelRootPath", v2, v3, v4, v5, v6);
}

void vg::ear_detection::EarLandmarksModel::create(char *a1, void *a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*a1 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (void *)*a2;
  }
  int v4 = 136315650;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  int v7 = @"ear_landmarks_detector_mlmodel";
  __int16 v8 = 2112;
  uint64_t v9 = @"ear_landmarks_fp16.espresso.net";
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath: %s with directory: %@ and model file: %@", (uint8_t *)&v4, 0x20u);
}

void vg::ear_detection::EarLandmarksModel::create(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_260C8D000, a2, OS_LOG_TYPE_ERROR, "No model found at path: %@", (uint8_t *)&v2, 0xCu);
}

float32x2_t vg::ear_detection::getEarTriangleROIVertex(int a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3 = vmul_f32(vadd_f32(a2, a3), (float32x2_t)0x3F0000003F000000);
  float32x2_t v4 = vsub_f32(a2, a3);
  float v5 = sqrtf(vaddv_f32(vmul_f32(v4, v4)));
  float32x2_t v6 = vsub_f32((float32x2_t)vext_s8((int8x8_t)a2, (int8x8_t)a3, 4uLL), (float32x2_t)vext_s8((int8x8_t)a3, (int8x8_t)a2, 4uLL));
  float v7 = -(float)(v5 * 0.5);
  if (a1 != 1) {
    float v7 = v5 * 0.5;
  }
  float32x2_t v8 = vmul_f32(v6, v6);
  v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  return vmla_n_f32(v3, vmul_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]), v7);
}

__n128 vg::ear_detection::pointFromPixelOnDepthImage(void *a1, double a2, float a3, double a4, __n128 a5)
{
  unsigned int v15 = HIDWORD(a4);
  float v5 = a1;
  uint64_t v6 = [(IOSurface *)v5 width];
  uint64_t v7 = [(IOSurface *)v5 height];
  if (*(float *)&a2 < 0.0
    || (*((float *)&a2 + 1) >= 0.0 ? (BOOL v8 = *(float *)&a2 < (float)v6) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = *((float *)&a2 + 1) < (float)v7) : (BOOL v9 = 0),
        !v9))
  {
    float32x2_t v10 = __VGLogSharedInstance();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Point outside of depthImage image size bounds. ", (uint8_t *)buf, 2u);
    }
  }
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v5, 1);
  float v11 = *(float *)(v20 + v21 * (unint64_t)*((float *)&a2 + 1) + v22 * (unint64_t)*(float *)&a2);
  *(float32x2_t *)&long long v12 = vdiv_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)&a2, (float32x2_t)a5.n128_u64[0]), v11), (float32x2_t)__PAIR64__(v15, LODWORD(a3)));
  *((void *)&v12 + 1) = __PAIR64__(a5.n128_u32[3], LODWORD(v11));
  long long v18 = v12;
  vg::IOSurfaceData::~IOSurfaceData(buf);

  return (__n128)v18;
}

void sub_260C9E30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double vg::ear_detection::computePlaneNormal(void *a1)
{
  MEMORY[0x261227CE0]((uint64_t)(a1[1] - *a1) >> 4);
  int8x16_t v2 = (int8x16_t)vmulq_f32(v1, v1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  float32x2_t v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  *(void *)&double result = vmulq_n_f32(v1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]).u64[0];
  return result;
}

void vg::ear_detection::EarPCADetectorImpl::detect(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  int v9 = BYTE4(a4);
  float32x2_t v10 = a2;
  float v11 = a3;
  if (v9)
  {
    float v12 = *(float *)&a4;
    if (fabsf(*(float *)&a4) < *(float *)(a1 + 44))
    {
      unint64_t v13 = __VGLogSharedInstance();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        double v14 = *(float *)(a1 + 44);
        *(_DWORD *)long long buf = 134218240;
        double v73 = v12;
        __int16 v74 = 2048;
        *(double *)long long v75 = v14;
        _os_log_impl(&dword_260C8D000, v13, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of front facing view, yaw = %f, limit = %f ", buf, 0x16u);
      }

      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 176) = 0;
      int v15 = 3;
      goto LABEL_69;
    }
  }
  vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(*(vg::ear_detection::EarBoundingBoxModelImpl ***)a1, v10, (uint64_t)v77);
  if (!v78) {
    goto LABEL_68;
  }
  vg::ear_detection::EarLandmarksModel::predictLandmarks(*(uint64_t ***)(a1 + 8), v10, v77, buf);
  if (!v76[8]) {
    goto LABEL_68;
  }
  int v16 = vg::ear_detection::EarPCADetectorImpl::checkEarQuality((vg::ear_detection::EarPCADetectorImpl *)a1, v10, v11, (const vg::ear_detection::EarBoundingBoxModel::BoundingBox *)v77, (const vg::ear_detection::EarLandmarksModel::Landmarks *)buf);
  if (v16)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 176) = 0;
    *(_DWORD *)(a5 + 192) = v16;
    goto LABEL_70;
  }
  uint64_t v17 = (double *)((char *)v75 + 2);
  uint64_t v18 = vg::ear_detection::EarLandmarksModel::estimateEarSide((double *)((char *)v75 + 2));
  int v19 = v18;
  int v20 = BYTE4(v18);
  if (*(unsigned char *)(a1 + 48))
  {
    if (BYTE4(v18))
    {
      uint64_t v21 = vg::ear_detection::EarSideSmoothPredictor::estimateSmoothEarSide(*(int64x2_t ***)(a1 + 24), v18);
      int v20 = BYTE4(v21);
      int v19 = v21;
      goto LABEL_13;
    }
LABEL_68:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 176) = 0;
    int v15 = 1;
LABEL_69:
    *(_DWORD *)(a5 + 192) = v15;
    goto LABEL_70;
  }
LABEL_13:
  if (!v20) {
    goto LABEL_68;
  }
  long long v60 = v11;
  memset(&v63[1], 0, 64);
  LOBYTE(v66) = 0;
  char v67 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)float64x2_t v70 = 0u;
  long long v71 = 0u;
  LODWORD(v63[0]) = v19;
  std::vector<float>::reserve(__p, 0x31uLL);
  std::vector<float>::reserve(&v70[1], 0x31uLL);
  do
  {
    uint64_t v23 = (char *)__p[1];
    uint64_t v22 = (float *)v70[0];
    if (__p[1] >= v70[0])
    {
      uint64_t v26 = (char *)__p[0];
      int64_t v27 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62) {
        goto LABEL_71;
      }
      int64_t v29 = (char *)v70[0] - (char *)__p[0];
      if (((char *)v70[0] - (char *)__p[0]) >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v70, v30);
        uint64_t v26 = (char *)__p[0];
        uint64_t v23 = (char *)__p[1];
      }
      else
      {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (float *)&v31[4 * v27];
      float v33 = *v17;
      float *v32 = v33;
      uint64_t v25 = v32 + 1;
      while (v23 != v26)
      {
        int v34 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v32-- - 1) = v34;
      }
      uint64_t v22 = (float *)&v31[4 * v30];
      __p[0] = v32;
      __p[1] = v25;
      v70[0] = v22;
      if (v26)
      {
        operator delete(v26);
        uint64_t v22 = (float *)v70[0];
      }
    }
    else
    {
      float v24 = *v17;
      *(float *)__p[1] = v24;
      uint64_t v25 = (float *)(v23 + 4);
    }
    __p[1] = v25;
    if (v25 >= v22)
    {
      uint64_t v37 = (float *)__p[0];
      uint64_t v38 = ((char *)v25 - (char *)__p[0]) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        goto LABEL_71;
      }
      uint64_t v40 = (char *)v22 - (char *)__p[0];
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v70, v41);
        uint64_t v37 = (float *)__p[0];
        uint64_t v25 = (float *)__p[1];
      }
      else
      {
        unint64_t v42 = 0;
      }
      unint64_t v43 = (float *)&v42[4 * v38];
      float v44 = v17[1];
      float *v43 = v44;
      uint64_t v36 = v43 + 1;
      while (v25 != v37)
      {
        int v45 = *((_DWORD *)v25-- - 1);
        *((_DWORD *)v43-- - 1) = v45;
      }
      __p[0] = v43;
      __p[1] = v36;
      v70[0] = &v42[4 * v41];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      float v35 = v17[1];
      float *v25 = v35;
      uint64_t v36 = v25 + 1;
    }
    __p[1] = v36;
    float v46 = (char *)v71;
    if ((unint64_t)v71 >= *((void *)&v71 + 1))
    {
      long long v48 = (char *)v70[1];
      uint64_t v49 = (uint64_t)(v71 - (unint64_t)v70[1]) >> 2;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62) {
LABEL_71:
      }
        std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
      int64_t v51 = *((void *)&v71 + 1) - (unint64_t)v70[1];
      if ((uint64_t)(*((void *)&v71 + 1) - (unint64_t)v70[1]) >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v71 + 8, v52);
        long long v48 = (char *)v70[1];
        float v46 = (char *)v71;
      }
      else
      {
        uint64_t v53 = 0;
      }
      uint64_t v54 = &v53[4 * v49];
      *(_DWORD *)uint64_t v54 = *((_DWORD *)v17 + 4);
      __n128 v47 = v54 + 4;
      while (v46 != v48)
      {
        int v55 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *((_DWORD *)v54 - 1) = v55;
        v54 -= 4;
      }
      v70[1] = v54;
      *(void *)&long long v71 = v47;
      *((void *)&v71 + 1) = &v53[4 * v52];
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      *(_DWORD *)long long v71 = *((_DWORD *)v17 + 4);
      __n128 v47 = v46 + 4;
    }
    *(void *)&long long v71 = v47;
    v17 += 3;
  }
  while (v17 != (double *)v76);
  CompactBoundingBodouble x = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox((vg::ear_detection::EarLandmarksModel::Landmarks *)buf, 0.1);
  uint64_t v56 = [(IOSurface *)v10 width];
  uint64_t v57 = [(IOSurface *)v10 height];
  v58.i64[0] = v56;
  v58.i64[1] = v57;
  float64x2_t v59 = vcvtq_f64_s64(v58);
  float32x4_t v68 = vdivq_f32((float32x4_t)CompactBoundingBox, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v59), v59));
  memset(v62, 0, sizeof(v62));
  vg::ear_detection::EarLandmarksPCA::computePCA(*(const float ***)(a1 + 16), (double *)((char *)v75 + 2), v63[0], (float *)v62);
  uint64_t v64 = *(void *)&v62[0];
  int v65 = DWORD2(v62[0]);
  int v66 = a4;
  char v67 = BYTE4(a4);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::__optional_destruct_base[abi:ne180100]<vg::ear_detection::EarPose&>(a5, v63);
  *(_DWORD *)(a5 + 192) = 0;
  float v11 = v60;
  if (v70[1])
  {
    *(void **)&long long v71 = v70[1];
    operator delete(v70[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_70:
}

void sub_260C9E8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPCADetectorImpl::checkEarQuality(vg::ear_detection::EarPCADetectorImpl *this, IOSurface *a2, IOSurface *a3, const vg::ear_detection::EarBoundingBoxModel::BoundingBox *a4, const vg::ear_detection::EarLandmarksModel::Landmarks *a5)
{
  int v9 = a2;
  float32x2_t v10 = a3;
  if (vg::ear_detection::isTooClose((vg::ear_detection *)v10, v11))
  {
    float v12 = __VGLogSharedInstance();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too close. ", buf, 2u);
    }
    uint64_t v13 = 6;
  }
  else if (*((float *)a4 + 6) >= *((float *)this + 8))
  {
    if (*((float *)a4 + 7) >= *((float *)this + 9))
    {
      MeanLandmarkVisibilitdouble y = vg::ear_detection::EarLandmarksModel::Landmarks::getMeanLandmarkVisibility(a5);
      float v15 = *((float *)this + 10);
      if (MeanLandmarkVisibility >= v15
        && vg::ear_detection::EarLandmarksModel::Landmarks::getVisibleLandmarksFraction(a5, v15) >= 0.5)
      {
        for (uint64_t i = 704; i != 1136; i += 24)
        {
          if (*(float *)((char *)a5 + i) < *((float *)this + 10))
          {
            float v12 = __VGLogSharedInstance();
            uint64_t v13 = 2;
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_18;
            }
            __int16 v34 = 0;
            int v16 = " Frame rejected by pose estimator because of low inner landmarks visibility ";
            uint64_t v17 = (uint8_t *)&v34;
            goto LABEL_17;
          }
        }
        uint64_t v20 = [(IOSurface *)v10 width];
        uint64_t v21 = [(IOSurface *)v9 width];
        uint64_t v22 = [(IOSurface *)v10 height];
        uint64_t v23 = [(IOSurface *)v9 height];
        float v24 = (float)v20 / (float)v21;
        float v25 = (float)v22 / (float)v23;
        *(float *)v26.i32 = v24 * *(float *)a4;
        *(float *)&v26.i32[1] = v25 * *((float *)a4 + 1);
        *(float *)&v26.i32[2] = v24 * *((float *)a4 + 2);
        *(float *)&v26.i32[3] = v25 * *((float *)a4 + 3);
        if (vg::ear_detection::isEarTooFar(v10, v26))
        {
          float v12 = __VGLogSharedInstance();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)float v33 = 0;
            _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of camera too far. ", v33, 2u);
          }
          uint64_t v13 = 7;
        }
        else
        {
          CompactBoundingBodouble x = vg::ear_detection::EarLandmarksModel::Landmarks::makeCompactBoundingBox(a5, 0.1);
          uint64_t v27 = [(IOSurface *)v9 height];
          uint64_t v28 = [(IOSurface *)v9 width];
          if (CompactBoundingBox.n128_f32[0] >= 0.0)
          {
            float v29 = (float)(v28 - 1);
            if (CompactBoundingBox.n128_f32[0] <= v29 && CompactBoundingBox.n128_f32[1] >= 0.0)
            {
              float v30 = (float)(v27 - 1);
              if (CompactBoundingBox.n128_f32[1] <= v30
                && CompactBoundingBox.n128_f32[2] >= 0.0
                && CompactBoundingBox.n128_f32[2] <= v29
                && CompactBoundingBox.n128_f32[3] >= 0.0
                && CompactBoundingBox.n128_f32[3] <= v30)
              {
                uint64_t v13 = 0;
                goto LABEL_19;
              }
            }
          }
          float v12 = __VGLogSharedInstance();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v32 = 0;
            _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of box out of image bounds. ", v32, 2u);
          }
          uint64_t v13 = 8;
        }
      }
      else
      {
        float v12 = __VGLogSharedInstance();
        uint64_t v13 = 2;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)float v35 = 0;
          int v16 = " Frame rejected by pose estimator because of low mean or percentile confidence landmarks ";
          uint64_t v17 = v35;
LABEL_17:
          _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, v16, v17, 2u);
        }
      }
    }
    else
    {
      float v12 = __VGLogSharedInstance();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear occlusion. ", v36, 2u);
      }
      uint64_t v13 = 4;
    }
  }
  else
  {
    float v12 = __VGLogSharedInstance();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_DEBUG, " Frame rejected by pose estimator because of ear not present. ", v37, 2u);
    }
    uint64_t v13 = 1;
  }
LABEL_18:

LABEL_19:
  return v13;
}

void sub_260C9ECD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPCADetector::detectPCA(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void vg::ear_detection::EarPCADetector::create()
{
}

void sub_260C9EE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, vg::ear_detection::EarBoundingBoxModel ***a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    std::default_delete<vg::ear_detection::EarPCADetector>::operator()[abi:ne180100]((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void vg::ear_detection::EarPCADetector::EarPCADetector()
{
}

void sub_260C9EECC(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x1020C40F2144117);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarPCADetector::~EarPCADetector(vg::ear_detection::EarBoundingBoxModel ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  vg::ear_detection::EarBoundingBoxModel **v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t vg::ear_detection::EarPCADetectorImpl::EarPCADetectorImpl(uint64_t a1, uint64_t *a2)
{
  float32x2_t v4 = a2 + 3;
  vg::ear_detection::EarBoundingBoxModel::create(a2 + 3, (void *)a1);
  vg::ear_detection::EarLandmarksModel::create(v4, (void *)(a1 + 8));
  vg::ear_detection::EarLandmarksPCA::create((void *)(a1 + 16));
  *(void *)(a1 + 24) = 0;
  long long v5 = *(_OWORD *)a2;
  *((void *)&v5 + 1) = *(uint64_t *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 32) = v5;
  int v6 = *((unsigned __int8 *)a2 + 48);
  *(unsigned char *)(a1 + 48) = v6;
  if (v6) {
    vg::ear_detection::EarSideSmoothPredictor::create();
  }
  return a1;
}

void sub_260C9F040(_Unwind_Exception *a1)
{
  std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarSideSmoothPredictor *std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](vg::ear_detection::EarSideSmoothPredictor **a1, vg::ear_detection::EarSideSmoothPredictor *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarSideSmoothPredictor::~EarSideSmoothPredictor(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::ear_detection::EarLandmarksPCA *std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](vg::ear_detection::EarLandmarksPCA **a1, vg::ear_detection::EarLandmarksPCA *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarLandmarksPCA::~EarLandmarksPCA(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void std::default_delete<vg::ear_detection::EarPCADetector>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  if (a2)
  {
    float32x2_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    }
    JUMPOUT(0x2612278D0);
  }
}

void std::default_delete<vg::ear_detection::EarPCADetectorImpl>::operator()[abi:ne180100](uint64_t a1, vg::ear_detection::EarBoundingBoxModel **a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::EarSideSmoothPredictor>::reset[abi:ne180100](a2 + 3, 0);
    std::unique_ptr<vg::ear_detection::EarLandmarksPCA>::reset[abi:ne180100](a2 + 2, 0);
    std::unique_ptr<vg::ear_detection::EarLandmarksModel>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<vg::ear_detection::EarBoundingBoxModel>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x2612278D0);
  }
}

void vg::ear_detection::EarLandmarksPCAImpl::create(void *a1@<X8>)
{
  float32x2_t v3 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
  float32x2_t v4 = [v3 stringByAppendingPathComponent:@"ear_landmarks_pca/lm_pca_mean.bin"];

  id v5 = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 UTF8String]);
  vg::load1DVectorData<float>((uint64_t *)__p, (uint64_t)&__src);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 == 147)
  {
    int v6 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
    uint64_t v7 = [v6 stringByAppendingPathComponent:@"ear_landmarks_pca/lm_pca_weights.bin"];

    id v8 = v7;
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)[v8 UTF8String]);
    vg::load1DVectorData<float>((uint64_t *)v13, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 == 2352)
    {
      int v9 = (char *)operator new(0x270CuLL, MEMORY[0x263F8C180]);
      float32x2_t v10 = v9;
      if (v9)
      {
        if (v19) {
          memmove(v9, __src, 4 * v19);
        }
        memmove(v10 + 588, __p[0], 0x24C0uLL);
      }
    }
    else
    {
      float v12 = __VGLogSharedInstance();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13[0]) = 0;
        _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_ERROR, " Invalid input data size for PCA matrix. ", (uint8_t *)v13, 2u);
      }

      float32x2_t v10 = 0;
    }
    *a1 = v10;
    free(__p[0]);
  }
  else
  {
    float v11 = __VGLogSharedInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_ERROR, " Invalid input data size for PCA mean vector. ", (uint8_t *)__p, 2u);
    }

    *a1 = 0;
  }
  free(__src);
}

void sub_260C9F408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  free(a16);

  free(a22);
  _Unwind_Resume(a1);
}

void vg::load1DVectorData<float>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    float32x2_t v3 = a1;
  }
  else {
    float32x2_t v3 = (uint64_t *)*a1;
  }
  float32x2_t v4 = objc_msgSend(NSString, "stringWithCString:encoding:", v3, objc_msgSend(NSString, "defaultCStringEncoding"));
  id v5 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithContentsOfFile:v4];
  unint64_t v6 = [v5 length];
  size_t v7 = ((v6 & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v7 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  id v8 = memptr;
  *(void *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v6 >> 2;
  [v5 getBytes:v8 length:v6 & 0xFFFFFFFFFFFFFFFCLL];
}

void sub_260C9F564(_Unwind_Exception *a1)
{
  free(v3);

  _Unwind_Resume(a1);
}

char *vg::ear_detection::EarLandmarksPCAImpl::EarLandmarksPCAImpl(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5) {
    memmove(__dst, *(const void **)a2, 4 * v5);
  }
  uint64_t v6 = *(unsigned int *)(a3 + 16);
  if (v6) {
    memmove(__dst + 588, *(const void **)a3, 4 * v6);
  }
  return __dst;
}

{
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5) {
    memmove(__dst, *(const void **)a2, 4 * v5);
  }
  uint64_t v6 = *(unsigned int *)(a3 + 16);
  if (v6) {
    memmove(__dst + 588, *(const void **)a3, 4 * v6);
  }
  return __dst;
}

void vg::ear_detection::EarLandmarksPCAImpl::computePCA(const float *a1@<X0>, double *a2@<X1>, int a3@<W2>, float *a4@<X8>)
{
  uint64_t v8 = 0;
  int v9 = (float64x2_t *)(a2 + 2);
  memset(__A, 0, 512);
  do
  {
    *((float32x2_t *)__A + v8) = vcvt_f32_f64(v9[-1]);
    int v10 = LODWORD(v9->f64[0]);
    int v9 = (float64x2_t *)((char *)v9 + 24);
    *((_DWORD *)&__A[24] + v8++ + 2) = v10;
  }
  while (v8 != 49);
  float __C = 0.0;
  vDSP_meanv((const float *)__A, 2, &__C, 0x31uLL);
  float __C = -__C;
  float __B = 0.0;
  vDSP_meanv((const float *)__A + 1, 2, &__B, 0x31uLL);
  float __B = -__B;
  vDSP_vsadd((const float *)__A, 2, &__C, (float *)__A, 2, 0x31uLL);
  vDSP_vsadd((const float *)__A + 1, 2, &__B, (float *)__A + 1, 2, 0x31uLL);
  float v11 = sqrt((a2[7] - a2[34]) * (a2[7] - a2[34]) + (a2[6] - a2[33]) * (a2[6] - a2[33]));
  float v15 = 1.0 / (float)(v11 + 0.000001);
  vDSP_vsmul((const float *)__A, 1, &v15, (float *)__A, 1, 0x62uLL);
  float v12 = -1.0;
  if (a3 != 1) {
    float v12 = 1.0;
  }
  float v14 = v12;
  vDSP_vsmul((const float *)__A, 2, &v14, (float *)__A, 2, 0x31uLL);
  vDSP_vsub(a1, 1, (const float *)__A, 1, (float *)__A, 1, 0x93uLL);
  vDSP_mmul(a1 + 147, 1, (const float *)__A, 1, a4, 1, 0x10uLL, 1uLL, 0x93uLL);
}

void *vg::ear_detection::EarLandmarksPCA::create@<X0>(void *a1@<X8>)
{
  vg::ear_detection::EarLandmarksPCAImpl::create(&v5);
  uint64_t v3 = v5;
  if (v5)
  {
    double result = operator new(8uLL, MEMORY[0x263F8C180]);
    if (!result)
    {
      *a1 = 0;
      JUMPOUT(0x2612278D0);
    }
    void *result = v3;
  }
  else
  {
    double result = 0;
  }
  *a1 = result;
  return result;
}

void *vg::ear_detection::EarLandmarksPCA::EarLandmarksPCA(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = v2;
  return result;
}

void vg::ear_detection::EarLandmarksPCA::computePCA(const float **a1@<X0>, double *a2@<X1>, int a3@<W2>, float *a4@<X8>)
{
}

void vg::ear_detection::EarLandmarksPCA::~EarLandmarksPCA(vg::ear_detection::EarLandmarksPCA *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x2612278D0](v2, 0x1000C40DA03932ELL);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x2612278D0](v2, 0x1000C40DA03932ELL);
  }
}

double vg::ear_detection::makeLargeBox(uint32x2_t *a1, int32x4_t a2, double a3)
{
  float v3 = vsubq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), (float32x4_t)a2).f32[0];
  float32x4_t v4 = vsubq_f32((float32x4_t)vdupq_laneq_s32(a2, 3), (float32x4_t)a2);
  *(float *)&a3 = *(float *)&a3 + 1.0;
  if (v3 < v4.f32[1]) {
    float v3 = v4.f32[1];
  }
  *(float *)&a3 = (float)(*(float *)&a3 * v3) * 0.5;
  *(float32x2_t *)v5.f32 = vmul_f32(vadd_f32(*(float32x2_t *)a2.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL)), (float32x2_t)0x3F0000003F000000);
  v5.i64[1] = v5.i64[0];
  _Q1 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v7.i64[0] = vsubq_f32(v5, _Q1).u64[0];
  v7.i64[1] = vaddq_f32(v5, _Q1).i64[1];
  __asm { FMOV            V1.2S, #-1.0 }
  *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_u32(*a1), *(float32x2_t *)_Q1.f32);
  v5.i64[1] = v5.i64[0];
  *(void *)&double result = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v7, v5), (int8x16_t)v5, (int8x16_t)v7), (int8x16_t)vcltzq_f32(v7)).u64[0];
  return result;
}

vg::ear_detection::LandmarkModelPreProcessor *vg::ear_detection::LandmarkModelPreProcessor::create@<X0>(vg::ear_detection::LandmarkModelPreProcessor *this@<X0>, vg::ear_detection::LandmarkModelPreProcessor **a2@<X8>)
{
  double result = (vg::ear_detection::LandmarkModelPreProcessor *)operator new(8uLL, MEMORY[0x263F8C180]);
  float32x4_t v5 = result;
  if (result) {
    double result = vg::ear_detection::LandmarkModelPreProcessor::LandmarkModelPreProcessor(result, (uint64_t)this);
  }
  *a2 = v5;
  return result;
}

void sub_260C9FA68(_Unwind_Exception *a1)
{
  MEMORY[0x2612278C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

id vg::ear_detection::LandmarkModelPreProcessor::preProcessImage(void *a1, void *a2, float32x2_t *a3)
{
  int32x2_t v4 = (int32x2_t)vcvt_u32_f32(*a3);
  HIWORD(v9) = v4.i16[2];
  LOWORD(v9) = v4.i16[0];
  int32x2_t v5 = vadd_s32(vsub_s32((int32x2_t)vcvt_u32_f32(a3[1]), v4), (int32x2_t)0x100000001);
  HIWORD(v8) = v5.i16[2];
  LOWORD(v8) = v5.i16[0];
  objc_msgSend(a2, "vg_cropAndResizeYIntoSurface:origin:size:", *a1, v9, v8);
  uint64_t v6 = (void *)*a1;

  return v6;
}

float64x2_t vg::ear_detection::LandmarkModelPreProcessor::makeScaledPoint@<Q0>(float32x2_t *a1@<X1>, float64x2_t *a2@<X2>, uint64_t a3@<X8>)
{
  __asm { FMOV            V3.2S, #-1.0 }
  float64x2_t result = vmlaq_f64(vcvtq_f64_f32(*a1), vcvtq_f64_f32(vadd_f32(vsub_f32(a1[1], *a1), _D3)), *a2);
  *(float64x2_t *)a3 = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

vg::ear_detection::LandmarkModelPreProcessor *vg::ear_detection::LandmarkModelPreProcessor::LandmarkModelPreProcessor(vg::ear_detection::LandmarkModelPreProcessor *this, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  *(void *)this = 0;
  id v4 = objc_alloc(MEMORY[0x263F0ED00]);
  v13[0] = *MEMORY[0x263F0ECF8];
  int32x2_t v5 = [NSNumber numberWithUnsignedLong:a2];
  v14[0] = v5;
  v13[1] = *MEMORY[0x263F0ECC0];
  uint64_t v6 = [NSNumber numberWithUnsignedLong:a2];
  uint64_t v7 = *MEMORY[0x263F0ECC8];
  v14[1] = v6;
  v14[2] = &unk_270CFDA68;
  uint64_t v8 = *MEMORY[0x263F0ECA0];
  v13[2] = v7;
  v13[3] = v8;
  v14[3] = &unk_270CFDA80;
  unsigned int v9 = [NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:4];
  uint64_t v10 = [v4 initWithProperties:v9];
  float v11 = *(void **)this;
  *(void *)this = v10;

  return this;
}

void sub_260C9FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarBoundingBoxModelImpl::EarBoundingBoxModelImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 16) = 0u;
  id v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 64) = 0u;
  int32x2_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v6 = VGLogEarBoundingBoxModel();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
  }

  vg::shared::VGE5RT::compileModel((uint64_t *)a2, 1, buf);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)buf);
  uint64_t v8 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "input_image");
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, buf);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = *((void *)v10 + 5);
  uint64_t v11 = *((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(buf, "detection");
  float v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, buf);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v17 = *((void *)v15 + 5);
  uint64_t v16 = *((void *)v15 + 6);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v16;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::AllocateMemory();
  std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(v5, (uint64_t *)buf);
  uint64_t v20 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 72);
  float v25 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::BindMemoryObject();
  uint64_t v22 = (E5RT::ExecutionStream *)v25;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)buf, v22);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(v4, (uint64_t *)buf);
  uint64_t v23 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  return a1;
}

void sub_260C9FFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p) {
    vg::ear_detection::EarLandmarksModelImpl::EarLandmarksModelImpl((uint64_t)__p);
  }
  std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100](v17, 0);
  unsigned int v19 = (std::__shared_weak_count *)v16[9];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)v16[7];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)v16[5];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)v16[3];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)v16[1];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

id VGLogEarBoundingBoxModel(void)
{
  if (VGLogEarBoundingBoxModel(void)::onceToken != -1) {
    dispatch_once(&VGLogEarBoundingBoxModel(void)::onceToken, &__block_literal_global_0);
  }
  os_log_t v0 = (void *)VGLogEarBoundingBoxModel(void)::handle;

  return v0;
}

void vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox(vg::ear_detection::EarBoundingBoxModelImpl *this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t v5 = a2;
  uint64_t v7 = (vg::ear_detection::BoxModelPreProcessor **)((char *)this + 80);
  uint64_t v6 = (vg::ear_detection::BoxModelPreProcessor *)*((void *)this + 10);
  if (!v6)
  {
    uint64_t v8 = operator new(4uLL);
    __p = v8;
    *uint64_t v8 = 1056964608;
    uint64_t v38 = v8 + 1;
    unint64_t v39 = v8 + 1;
    unsigned int v9 = [(IOSurface *)v5 width];
    v32.i64[0] = __PAIR64__([(IOSurface *)v5 height], v9);
    vg::ear_detection::BoxModelPreProcessor::create((uint32x2_t *)&v32, (uint64_t *)&__p, 400, v33);
    uint64_t v10 = v33[0];
    v33[0] = 0;
    std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100]((vg::ear_detection::BoxModelPreProcessor **)this + 10, v10);
    uint64_t v11 = v33[0];
    v33[0] = 0;
    if (v11)
    {
      vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(v11);
      MEMORY[0x2612278D0]();
    }
    if (__p)
    {
      uint64_t v38 = __p;
      operator delete(__p);
    }
    uint64_t v6 = *v7;
  }
  vg::ear_detection::BoxModelPreProcessor::preProcessImage(v6, v5, (uint64_t)&__p);
  if (!v40)
  {
    uint64_t v18 = VGLogEarBoundingBoxModel();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();
    }
    goto LABEL_18;
  }
  if (vg::ear_detection::BoxModelPreProcessor::getCropCount(*v7) != 1)
  {
    uint64_t v18 = VGLogEarBoundingBoxModel();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();
    }
LABEL_18:

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    goto LABEL_39;
  }
  if (!v40) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  id v12 = *(id *)__p;
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)this + 4));
  float v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v14);
  uint64_t v16 = *(void *)(*(void *)(TensorStrides + 8) - 16);
  if (v16 != [v12 bytesPerRow])
  {
    uint64_t v17 = objc_msgSend(v12, "vg_convertSurfaceStride:", *(void *)(*(void *)(TensorStrides + 8) - 16));

    id v12 = (id)v17;
  }
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  float v35 = v33[0];
  if (v33[0]) {
    operator new();
  }
  uint64_t v36 = 0;
  v33[0] = 0;
  E5RT::IOPort::BindMemoryObject();
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  unsigned int v19 = v33[0];
  v33[0] = 0;
  if (v19) {
    (*(void (**)(vg::ear_detection::BoxModelPreProcessor *))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 1);
  v33[3] = *(vg::ear_detection::BoxModelPreProcessor **)this;
  __int16 v34 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 2));
  E5RT::ExecutionStream::ResetStream(*((E5RT::ExecutionStream **)this + 2));
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  uint64_t v21 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  if (v21)
  {
    uint64_t v22 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)this + 6));
    uint64_t v23 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v22);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v21, v23, v24, (uint64_t)v33);
    float32x4_t v32 = *(float32x4_t *)v33[0];
    *(double *)&long long v25 = vg::ear_detection::BoxModelPreProcessor::makeScaledBox((uint64_t)*v7, &v32, 0);
    int32x4_t v26 = v33[0];
    float v27 = *((float *)v33[0] + 4);
    float v28 = 0.0;
    float v29 = 0.0;
    if (v27 >= 0.0)
    {
      float v29 = 1.0;
      if (v27 <= 1.0) {
        float v29 = *((float *)v33[0] + 4);
      }
    }
    float v30 = *((float *)v33[0] + 5);
    if (v30 >= 0.0)
    {
      float v28 = 1.0;
      if (v30 <= 1.0) {
        float v28 = *((float *)v33[0] + 5);
      }
    }
    *(_OWORD *)a3 = v25;
    *(void *)(a3 + 16) = 0x3F8000003F800000;
    *(float *)(a3 + 24) = v29;
    *(float *)(a3 + 28) = v28;
    *(unsigned char *)(a3 + 32) = 1;
    free(v26);
  }
  else
  {
    uint64_t v31 = VGLogEarBoundingBoxModel();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox();
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }

LABEL_39:
  if (v40)
  {
    v33[0] = (vg::ear_detection::BoxModelPreProcessor *)&__p;
    std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  }
}

void sub_260CA04BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **p_p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  free(p_p);

  if (a22)
  {
    p_p = &__p;
    std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarBoundingBoxModel::EarBoundingBoxModel()
{
}

void sub_260CA05F8(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C40D3FB9507);
  _Unwind_Resume(a1);
}

void vg::ear_detection::EarBoundingBoxModel::~EarBoundingBoxModel(vg::ear_detection::EarBoundingBoxModel *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::ear_detection::EarBoundingBoxModel::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  v16[3] = *MEMORY[0x263EF8340];
  id v4 = (char *)a1 + 23;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_10:
      id v12 = VGLogEarBoundingBoxModel();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        vg::ear_detection::EarLandmarksModel::create();
      }

      *a2 = 0;
      return;
    }
    int32x2_t v5 = (uint64_t *)*a1;
  }
  else
  {
    int32x2_t v5 = a1;
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = NSString;
  uint64_t v7 = [NSString stringWithUTF8String:v5];
  v16[0] = v7;
  v16[1] = @"ear_bbox_detector_mlmodel";
  v16[2] = @"ear_box_fp16.espresso.net";
  uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v16 count:3];
  unsigned int v9 = [v6 pathWithComponents:v8];

  uint64_t v10 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v11 = v10;
  if (v9)
  {
    if ([v10 fileExistsAtPath:v9])
    {
      if (operator new(8uLL, MEMORY[0x263F8C180]))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v9 UTF8String]);
        vg::ear_detection::EarBoundingBoxModel::EarBoundingBoxModel();
      }
    }
    else
    {
      float v14 = VGLogEarBoundingBoxModel();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        vg::ear_detection::EarLandmarksModel::create((uint64_t)v9, v14);
      }
    }
  }
  else
  {
    uint64_t v13 = VGLogEarBoundingBoxModel();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarBoundingBoxModel::create(v4, a1, v13);
    }
  }
  *a2 = 0;
}

void sub_260CA0890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2612278C0](v17, MEMORY[0x263F8C180]);

  _Unwind_Resume(a1);
}

void vg::ear_detection::EarBoundingBoxModel::predictBoundingBox(vg::ear_detection::EarBoundingBoxModelImpl **this@<X0>, IOSurface *a2@<X1>, uint64_t a3@<X8>)
{
}

float vg::ear_detection::EarBoundingBoxModel::BoundingBox::getMeanVisibility(vg::ear_detection::EarBoundingBoxModel::BoundingBox *this)
{
  return (float)(*((float *)this + 4) + *((float *)this + 5)) * 0.5;
}

void ___ZL24VGLogEarBoundingBoxModelv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "EarBoundingBoxModel");
  uint64_t v1 = (void *)VGLogEarBoundingBoxModel(void)::handle;
  VGLogEarBoundingBoxModel(void)::handle = (uint64_t)v0;
}

void sub_260CA0988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

vg::ear_detection::BoxModelPreProcessor *std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100](vg::ear_detection::BoxModelPreProcessor **a1, vg::ear_detection::BoxModelPreProcessor *a2)
{
  float64x2_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::ear_detection::BoxModelPreProcessor::~BoxModelPreProcessor(vg::ear_detection::BoxModelPreProcessor *this)
{
  uint64_t v6 = (void **)((char *)this + 104);
  std::vector<IOSurface * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v6);
  id v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  id v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  int32x2_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void std::default_delete<vg::ear_detection::EarBoundingBoxModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<vg::ear_detection::BoxModelPreProcessor>::reset[abi:ne180100]((vg::ear_detection::BoxModelPreProcessor **)(a2 + 80), 0);
    float v3 = *(std::__shared_weak_count **)(a2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    id v4 = *(std::__shared_weak_count **)(a2 + 56);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int32x2_t v5 = *(std::__shared_weak_count **)(a2 + 40);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    JUMPOUT(0x2612278D0);
  }
}

void vg::ear_detection::EarBoundingBoxModelImpl::predictBoundingBox()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to prep image.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Invalid box network output.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Single crop expected.", v2, v3, v4, v5, v6);
}

void vg::ear_detection::EarBoundingBoxModel::create(char *a1, void *a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*a1 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (void *)*a2;
  }
  int v4 = 136315650;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = @"ear_bbox_detector_mlmodel";
  __int16 v8 = 2112;
  unsigned int v9 = @"ear_box_fp16.espresso.net";
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath: %s with directory: %@ and model file: %@", (uint8_t *)&v4, 0x20u);
}

double vg::frame_selection::VGExpressionFilter::remap(vg::frame_selection::VGExpressionFilter *this, float a2, float a3, float a4)
{
  if (a4 >= a2) {
    float v4 = a2;
  }
  else {
    float v4 = a4;
  }
  if (a2 >= a3) {
    float v5 = v4;
  }
  else {
    float v5 = a3;
  }
  if (a3 >= a4)
  {
    if (a3 == a4)
    {
      BOOL v7 = v5 < a4;
      LODWORD(result) = 1.0;
      if (v7) {
        *(float *)&double result = 0.0;
      }
    }
    else
    {
      return 0.0;
    }
  }
  else
  {
    *(float *)&double result = (float)(v5 - a3) / (float)(a4 - a3);
  }
  return result;
}

void sub_260CA0ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA0F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VGFaceCapture;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CA1254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  objc_destroyWeak(v26);
  objc_destroyWeak((id *)(v28 - 88));

  _Unwind_Resume(a1);
}

void sub_260CA14F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA1650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA18AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::default_delete<vg::frame_selection::metrics::Data>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = 0; i != -48; i -= 24)
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a2 + i + 464, *(void **)(a2 + i + 472));
    for (uint64_t j = 0; j != -48; j -= 24)
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a2 + j + 376, *(void **)(a2 + j + 384));
    JUMPOUT(0x2612278D0);
  }
}

void std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_260CA1C34(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_260CA1D5C(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_260CA1E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA1FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA20AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA223C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA23E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA24C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA26C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA29FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2AC8(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v2, 0x10A1C4037ACD87BLL);

  _Unwind_Resume(a1);
}

void sub_260CA2C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA2F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA3020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA3314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA3644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA38E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CA3AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CA3D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CA3E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA41B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CA4BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);

  _Unwind_Resume(a1);
}

void sub_260CA50C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);
  a23 = (void **)(v25 - 128);
  std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](&a23);

  _Unwind_Resume(a1);
}

void sub_260CA53F8(_Unwind_Exception *a1)
{
  __74__VGFrameSelector_applyVisionFilters_bestTargetPoseData_frameTimestampMS___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGFrameSelector(void)
{
  if (VGLogVGFrameSelector(void)::onceToken != -1) {
    dispatch_once(&VGLogVGFrameSelector(void)::onceToken, &__block_literal_global_790);
  }
  os_log_t v0 = (void *)VGLogVGFrameSelector(void)::handle;

  return v0;
}

void sub_260CA57CC(_Unwind_Exception *a1)
{
  __86__VGFrameSelector_applyVisionFaceLandmarksFilter_bestTargetPoseData_frameTimestampMS___block_invoke();
  _Unwind_Resume(a1);
}

void sub_260CA5838()
{
}

void sub_260CA5DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(void))
{
  a12[2]();
  _Unwind_Resume(a1);
}

void sub_260CA6428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA6F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(void), uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  a15[2]();
  __93__VGFrameSelector_processHeadPose_captureData_trackingData_validDataBounds_frameTimestampMS___block_invoke();

  _Unwind_Resume(a1);
}

void sub_260CA7254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA776C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_260CA8200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __82__VGFrameSelector_processCaptureData_trackingData_framePose_validDataFrameBounds___block_invoke();
  _Unwind_Resume(a1);
}

void vg::frame_selection::frameRejectionReasonToString(int a1@<W0>, std::string *a2@<X8>)
{
  {
    std::string::basic_string[abi:ne180100]<0>(vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString, "kNone");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[3], "kBadState");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[6], "kNoTrackingData");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[9], "kNoTrackedFace");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[12], "kTrackedFaceIdentifierChanged");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[15], "kLowContrast");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[18], "kMotionBlurDetected");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[21], "kMotionBlurTemporalStateInit");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[24], "kLowTrackingConfidence");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[27], "kFaceLandmarksNotDetected");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[30], "kWarmupFrameFiltering");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[33], "kFaceLeftOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[36], "kFaceRightOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[39], "kFaceTopOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[42], "kFaceBottomOfFOV");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[45], "kOutOfRange");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[48], "kExpressionOtherFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[51], "kExpressionIsEyesNeutralOpenFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[54], "kExpressionIsNeutralFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[57], "kExpressionIsEyesForwardFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[60], "kExpressionIsAlmostNeutralFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[63], "kExpressionIsMouthOpenFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[66], "kExpressionIsSmileClosedMouthFilter");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[69], "kLowerScore");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[72], "kBadAlignment");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[75], "kLowerAlignment");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[78], "kDistanceFilterFaceTooClose");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[81], "kDistanceFilterFaceTooFar");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[84], "kExpressionIsBlink");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[87], "kBodyPoseGuidanceBodyJointsNotVisible");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[90], "kBodyPoseGuidanceHeadNotUpright");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[93], "kBodyPoseGuidanceShouldersNotStraight");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[96], "kBodyPoseGuidanceLeftElbowTooHigh");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[99], "kBodyPoseGuidanceLeftElbowTooLow");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[102], "kBodyPoseGuidanceRightElbowTooHigh");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[105], "kBodyPoseGuidanceRightElbowTooLow");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[108], "kBodyPoseGuidanceShoulderHeightAsymmetric");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[111], "kBodyPoseGuidanceLeftShoulderTooFarBehind");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[114], "kBodyPoseGuidanceLeftShoulderTooFarInFront");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[117], "kBodyPoseGuidanceRightShoulderTooFarBehind");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[120], "kBodyPoseGuidanceRightShoulderTooFarInFront");
    std::string::basic_string[abi:ne180100]<0>(&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[123], "kBodyPoseGuidanceLowerAggregatedScore");
  }
  float v4 = (char *)&vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString[3 * a1];
  if (v4[23] < 0)
  {
    float v5 = *(const std::string::value_type **)v4;
    std::string::size_type v6 = *((void *)v4 + 1);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
  }
}

void sub_260CA87CC(_Unwind_Exception *a1)
{
}

void sub_260CA88D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA8A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA8A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CA8AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<TargetPoseData>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TargetPoseData>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    size_t v5 = 112 * ((((112 * a2 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 112;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_260CA8C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<TargetPoseData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a2);
}

void std::vector<TargetPoseData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string::size_type v6 = v4 - 14;

        uint64_t v4 = v6;
      }
      while (v6 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    __int16 v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::vector<TargetPoseData>::__assign_with_size[abi:ne180100]<TargetPoseData*,TargetPoseData*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v8) >> 4) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v17, a2, a3, v8);
      uint64_t v13 = v12;
      uint64_t v14 = a1[1];
      if (v14 != v12)
      {
        do
        {
          uint64_t v15 = v14 - 112;

          uint64_t v14 = v15;
        }
        while (v15 != v13);
      }
      a1[1] = v13;
    }
    else
    {
      uint64_t v11 = a2 + 16 * ((a1[1] - v8) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v16, a2, v11, v8);
      std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(a1, v11, a3);
    }
  }
  else
  {
    std::vector<TargetPoseData>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
      unint64_t v10 = 0x249249249249249;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<TargetPoseData>::__vallocate[abi:ne180100](a1, v10);
    std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(a1, a2, a3);
  }
}

void *std::vector<TargetPoseData>::__construct_at_end<TargetPoseData*,TargetPoseData*>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      double result = *(id *)(v6 + 16);
      *(void *)(v4 + 16) = result;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 + 32);
      long long v8 = *(_OWORD *)(v6 + 64);
      long long v7 = *(_OWORD *)(v6 + 80);
      long long v9 = *(_OWORD *)(v6 + 48);
      *(_DWORD *)(v4 + 96) = *(_DWORD *)(v6 + 96);
      *(_OWORD *)(v4 + 64) = v8;
      *(_OWORD *)(v4 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v7;
      *(_OWORD *)(v4 + 48) = v9;
      v4 += 112;
      v6 += 112;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

void std::vector<TargetPoseData>::__vdeallocate(void **a1)
{
  uint64_t v1 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        size_t v5 = v3 - 14;

        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    objc_storeStrong((id *)(a4 + 16), *(id *)(v5 + 16));
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    long long v7 = *(_OWORD *)(v5 + 48);
    long long v8 = *(_OWORD *)(v5 + 64);
    long long v9 = *(_OWORD *)(v5 + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    *(_OWORD *)(a4 + 64) = v8;
    *(_OWORD *)(a4 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v9;
    *(_OWORD *)(a4 + 48) = v7;
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<TargetPoseData>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData*>>,std::move_iterator<std::__wrap_iter<TargetPoseData*>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
    if (v14 > 0x249249249249249) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 4);
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 4);
    }
    if (v16 >= 0x124924924924924) {
      unint64_t v18 = 0x249249249249249;
    }
    else {
      unint64_t v18 = v17;
    }
    v35[4] = v9;
    if (v18) {
      unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TargetPoseData>>(v9, v18);
    }
    else {
      unsigned int v19 = 0;
    }
    uint64_t v28 = &v19[112 * v15];
    v35[0] = v19;
    v35[1] = v28;
    v35[3] = &v19[112 * v18];
    float v29 = &v28[112 * a5];
    do
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)a3;
      uint64_t v30 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *((void *)v28 + 2) = v30;
      *((_OWORD *)v28 + 2) = *(_OWORD *)(a3 + 32);
      long long v31 = *(_OWORD *)(a3 + 48);
      long long v32 = *(_OWORD *)(a3 + 64);
      long long v33 = *(_OWORD *)(a3 + 80);
      *((_DWORD *)v28 + 24) = *(_DWORD *)(a3 + 96);
      *((_OWORD *)v28 + 4) = v32;
      *((_OWORD *)v28 + 5) = v33;
      *((_OWORD *)v28 + 3) = v31;
      v28 += 112;
      a3 += 112;
    }
    while (v28 != v29);
    uint8_t v35[2] = v29;
    uint64_t v5 = std::vector<TargetPoseData>::__swap_out_circular_buffer(a1, v35, v5);
    std::__split_buffer<TargetPoseData>::~__split_buffer((uint64_t)v35);
    return v5;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 4) >= a5)
  {
    uint64_t v20 = a3 + 112 * a5;
LABEL_18:
    std::vector<TargetPoseData>::__move_range((uint64_t)a1, a2, v12, a2 + 112 * a5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData *>>,std::move_iterator<std::__wrap_iter<TargetPoseData *>>,TargetPoseData *>((uint64_t)v35, a3, v20, v5);
    return v5;
  }
  uint64_t v20 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
  uint64_t v21 = *(void *)(v9 - 8);
  if (v20 != a4)
  {
    uint64_t v22 = a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
    uint64_t v23 = *(void *)(v9 - 8);
    do
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
      uint64_t v24 = *(void *)(v22 + 16);
      *(void *)(v22 + 16) = 0;
      *(void *)(v23 + 16) = v24;
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v22 + 32);
      long long v25 = *(_OWORD *)(v22 + 48);
      long long v26 = *(_OWORD *)(v22 + 64);
      long long v27 = *(_OWORD *)(v22 + 80);
      *(_DWORD *)(v23 + 96) = *(_DWORD *)(v22 + 96);
      *(_OWORD *)(v23 + 64) = v26;
      *(_OWORD *)(v23 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v27;
      *(_OWORD *)(v23 + 48) = v25;
      v21 += 112;
      v22 += 112;
      v23 += 112;
    }
    while (v22 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v12 - a2) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_260CA9368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TargetPoseData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TargetPoseData>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      uint64_t v10 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = 0;
      *(void *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      long long v11 = *(_OWORD *)(v9 + 48);
      long long v12 = *(_OWORD *)(v9 + 64);
      long long v13 = *(_OWORD *)(v9 + 80);
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(v9 + 96);
      *(_OWORD *)(v8 + 64) = v12;
      *(_OWORD *)(v8 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v13;
      *(_OWORD *)(v8 + 48) = v11;
      v8 += 112;
      v9 += 112;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>((uint64_t)&v15, a2, v7, v6);
}

uint64_t std::vector<TargetPoseData>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      uint64_t v9 = *(void *)(a3 + v7 - 96);
      *(void *)(a3 + v7 - 96) = 0;
      *(void *)(v8 - 96) = v9;
      *(_OWORD *)(v8 - 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a3 + v7 - 80);
      long long v10 = *(_OWORD *)(a3 + v7 - 64);
      long long v11 = *(_OWORD *)(a3 + v7 - 48);
      long long v12 = *(_OWORD *)(a3 + v7 - 32);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v11;
      *(_OWORD *)(v8 - 32) = v12;
      *(_OWORD *)(v8 - 64) = v10;
      v7 -= 112;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v13 = a1[1];
  uint64_t v14 = a2[2];
  if (v13 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      uint64_t v15 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(v14 + 16) = v15;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 48);
      long long v17 = *(_OWORD *)(a3 + 64);
      long long v18 = *(_OWORD *)(a3 + 80);
      *(_DWORD *)(v14 + 96) = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(v14 + 64) = v17;
      *(_OWORD *)(v14 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v18;
      *(_OWORD *)(v14 + 48) = v16;
      v14 += 112;
      a3 += 112;
    }
    while (a3 != v13);
    uint64_t v6 = a2[1];
  }
  a2[2] = v14;
  uint64_t v19 = *a1;
  *a1 = v6;
  a2[1] = v19;
  uint64_t v20 = a1[1];
  a1[1] = a2[2];
  a2[2] = v20;
  uint64_t v21 = a1[2];
  a1[2] = a2[3];
  a2[3] = v21;
  *a2 = a2[1];
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TargetPoseData *,TargetPoseData *,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      uint64_t v9 = *(void *)(a3 + v7 - 96);
      *(void *)(a3 + v7 - 96) = 0;
      long long v10 = *(void **)(a4 + v7 - 96);
      *(void *)(v8 - 96) = v9;

      *(_OWORD *)(v8 - 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a3 + v7 - 80);
      long long v11 = *(_OWORD *)(a3 + v7 - 64);
      long long v12 = *(_OWORD *)(a3 + v7 - 48);
      long long v13 = *(_OWORD *)(a3 + v7 - 32);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v12;
      *(_OWORD *)(v8 - 32) = v13;
      *(_OWORD *)(v8 - 64) = v11;
      v7 -= 112;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<TargetPoseData *>>,std::move_iterator<std::__wrap_iter<TargetPoseData *>>,TargetPoseData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    uint64_t v7 = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = 0;
    uint64_t v8 = *(void **)(a4 + 16);
    *(void *)(a4 + 16) = v7;

    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    long long v9 = *(_OWORD *)(v5 + 48);
    long long v10 = *(_OWORD *)(v5 + 64);
    long long v11 = *(_OWORD *)(v5 + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    *(_OWORD *)(a4 + 64) = v10;
    *(_OWORD *)(a4 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v11;
    *(_OWORD *)(a4 + 48) = v9;
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__split_buffer<TargetPoseData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZL20VGLogVGFrameSelectorv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGFrameSelector");
  uint64_t v1 = (void *)VGLogVGFrameSelector(void)::handle;
  VGLogVGFrameSelector(void)::handle = (uint64_t)v0;
}

void sub_260CA9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void vg::frame_selection::frameRejectionReasonToString(void *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0) {
      operator delete((void *)*(a1 - 3));
    }
    a1 -= 3;
  }
  while (a1 != vg::frame_selection::frameRejectionReasonToString(vg::frame_selection::FrameRejectionReason)::kFrameRejectionReasonToString);
}

void sub_260CAA858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CAAC38(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;

  _Unwind_Resume(a1);
}

void sub_260CAAE9C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_260CAB308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

id VGLogVGEarPCASelectionState(void)
{
  if (VGLogVGEarPCASelectionState(void)::onceToken != -1) {
    dispatch_once(&VGLogVGEarPCASelectionState(void)::onceToken, &__block_literal_global_2);
  }
  os_log_t v0 = (void *)VGLogVGEarPCASelectionState(void)::handle;

  return v0;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_260CAB490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<EarFrame>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EarFrame>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 192 * v6;
    std::vector<EarFrame>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260CAB558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_260CAB784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CABBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_260CAC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a59);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x320]);

  _Unwind_Resume(a1);
}

void anonymous namespace'::EarFrameGroup::addFrame(_anonymous_namespace_::EarFrameGroup *this, const EarFrame *a2)
{
  uint64_t v4 = 0;
  while (*(void *)((char *)this + v4))
  {
    v4 += 192;
    if (v4 == 576)
    {
      float v5 = *((float *)this + 144);
      std::array<EarFrame,3ul>::array((uint64_t)v44, (uint64_t)this);
      for (uint64_t i = 0; i != 3; ++i)
      {
        std::array<EarFrame,3ul>::array((uint64_t)v43, (uint64_t)this);
        uint64_t v7 = &v43[48 * i];
        objc_storeStrong((id *)v7, a2->captureData);
        long long v8 = *(_OWORD *)&a2[2].captureData;
        *((_OWORD *)v7 + 5) = *(_OWORD *)&a2[1].pose.yawAngle;
        *((_OWORD *)v7 + 6) = v8;
        long long v9 = *(_OWORD *)&a2[2].pose.yawAngle;
        *((_OWORD *)v7 + 7) = *(_OWORD *)&a2[2].pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 8) = v9;
        long long v10 = *(_OWORD *)&a2->pose.yawAngle;
        *((_OWORD *)v7 + 1) = *(_OWORD *)&a2->pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 2) = v10;
        long long v11 = *(_OWORD *)&a2[1].pose.lmPCA.__elems_[1];
        *((_OWORD *)v7 + 3) = *(_OWORD *)&a2[1].captureData;
        *((_OWORD *)v7 + 4) = v11;
        if (v7 != (float *)a2)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v43[48 * i + 36], (char *)a2[3].captureData, *(void *)&a2[3].pose.side, (uint64_t)(*(void *)&a2[3].pose.side - (unint64_t)a2[3].captureData) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v43[48 * i + 42], *(char **)&a2[3].pose.faceYawAngle, *(void *)&a2[3].pose.yawAngle, (uint64_t)(*(void *)&a2[3].pose.yawAngle - *(void *)&a2[3].pose.faceYawAngle) >> 2);
        }
        if (v12 > v5)
        {
          float v13 = v12;
          for (uint64_t j = 0; j != 144; j += 48)
          {
            uint64_t v15 = &v44[j * 4];
            objc_storeStrong((id *)&v44[j * 4], *(id *)&v43[j]);
            long long v16 = *(_OWORD *)&v43[j + 24];
            v15[5] = *(_OWORD *)&v43[j + 20];
            v15[6] = v16;
            long long v17 = *(_OWORD *)&v43[j + 32];
            v15[7] = *(_OWORD *)&v43[j + 28];
            v15[8] = v17;
            long long v18 = *(_OWORD *)&v43[j + 8];
            v15[1] = *(_OWORD *)&v43[j + 4];
            v15[2] = v18;
            long long v19 = *(_OWORD *)&v43[j + 16];
            uint64_t v20 = *(char **)&v43[j + 36];
            uint64_t v21 = *(void *)&v43[j + 38];
            v15[3] = *(_OWORD *)&v43[j + 12];
            v15[4] = v19;
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v44[j * 4 + 144], v20, v21, (v21 - (uint64_t)v20) >> 2);
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v44[j * 4 + 168], *(char **)&v43[j + 42], *(void *)&v43[j + 44], (uint64_t)(*(void *)&v43[j + 44] - *(void *)&v43[j + 42]) >> 2);
          }
          float v5 = v13;
        }
        uint64_t v22 = 144;
        do
        {
          uint64_t v23 = &v43[v22];
          uint64_t v24 = *(void **)&v43[v22 - 6];
          if (v24)
          {
            *((void *)v23 - 2) = v24;
            operator delete(v24);
          }
          long long v25 = (void *)*((void *)v23 - 6);
          if (v25)
          {
            *(void *)&v43[v22 - 10] = v25;
            operator delete(v25);
          }

          v22 -= 48;
        }
        while (v22 * 4);
      }
      for (uint64_t k = 0; k != 576; k += 192)
      {
        long long v27 = (char *)this + k;
        objc_storeStrong((id *)((char *)this + k), *(id *)&v44[k]);
        long long v28 = *(_OWORD *)&v44[k + 96];
        *((_OWORD *)v27 + 5) = *(_OWORD *)&v44[k + 80];
        *((_OWORD *)v27 + 6) = v28;
        long long v29 = *(_OWORD *)&v44[k + 128];
        *((_OWORD *)v27 + 7) = *(_OWORD *)&v44[k + 112];
        *((_OWORD *)v27 + 8) = v29;
        long long v30 = *(_OWORD *)&v44[k + 32];
        *((_OWORD *)v27 + 1) = *(_OWORD *)&v44[k + 16];
        *((_OWORD *)v27 + 2) = v30;
        long long v31 = *(_OWORD *)&v44[k + 64];
        *((_OWORD *)v27 + 3) = *(_OWORD *)&v44[k + 48];
        *((_OWORD *)v27 + 4) = v31;
        if (v44 != (unsigned char *)this)
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v27 + 144, *(char **)&v44[k + 144], *(void *)&v44[k + 152], (uint64_t)(*(void *)&v44[k + 152] - *(void *)&v44[k + 144]) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + k + 168, *(char **)&v44[k + 168], *(void *)&v44[k + 176], (uint64_t)(*(void *)&v44[k + 176] - *(void *)&v44[k + 168]) >> 2);
        }
      }
      *((float *)this + 144) = v5;
      uint64_t v32 = 144;
      do
      {
        long long v33 = &v44[v32 * 4];
        __int16 v34 = *(void **)&v43[v32 + 138];
        if (v34)
        {
          *((void *)v33 - 2) = v34;
          operator delete(v34);
        }
        float v35 = (void *)*((void *)v33 - 6);
        if (v35)
        {
          *(void *)&v43[v32 + 134] = v35;
          operator delete(v35);
        }

        v32 -= 48;
      }
      while (v32 * 4);
      return;
    }
  }
  uint64_t v36 = (const EarFrame *)((char *)this + v4);
  objc_storeStrong((id *)((char *)this + v4), a2->captureData);
  long long v37 = *(_OWORD *)&a2->pose.lmPCA.__elems_[1];
  long long v38 = *(_OWORD *)&a2->pose.yawAngle;
  long long v39 = *(_OWORD *)&a2[1].pose.lmPCA.__elems_[1];
  *(_OWORD *)&v36[1].captureData = *(_OWORD *)&a2[1].captureData;
  *(_OWORD *)&v36[1].pose.lmPCA.__elems_[1] = v39;
  *(_OWORD *)&v36->pose.lmPCA.__elems_[1] = v37;
  *(_OWORD *)&v36->pose.yawAngle = v38;
  long long v40 = *(_OWORD *)&a2[1].pose.yawAngle;
  long long v41 = *(_OWORD *)&a2[2].captureData;
  long long v42 = *(_OWORD *)&a2[2].pose.yawAngle;
  *(_OWORD *)&v36[2].pose.lmPCA.__elems_[1] = *(_OWORD *)&a2[2].pose.lmPCA.__elems_[1];
  *(_OWORD *)&v36[2].pose.yawAngle = v42;
  *(_OWORD *)&v36[1].pose.yawAngle = v40;
  *(_OWORD *)&v36[2].captureData = v41;
  if (v36 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v36[3], (char *)a2[3].captureData, *(void *)&a2[3].pose.side, (uint64_t)(*(void *)&a2[3].pose.side - (unint64_t)a2[3].captureData) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v36[3].pose.faceYawAngle, *(char **)&a2[3].pose.faceYawAngle, *(void *)&a2[3].pose.yawAngle, (uint64_t)(*(void *)&a2[3].pose.yawAngle - *(void *)&a2[3].pose.faceYawAngle) >> 2);
  }
  if (v4 == 384) {
}
  }

void sub_260CAC734(_Unwind_Exception *a1)
{
}

void EarFrame::~EarFrame(EarFrame *this)
{
  faceYawAngle = (void *)this[3].pose.faceYawAngle;
  if (faceYawAngle)
  {
    *(void *)&this[3].pose.yawAngle = faceYawAngle;
    operator delete(faceYawAngle);
  }
  captureData = this[3].captureData;
  if (captureData)
  {
    *(void *)&this[3].pose.side = captureData;
    operator delete(captureData);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    float v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

void ___ZL27VGLogVGEarPCASelectionStatev_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGEarPCASelectionState");
  uint64_t v1 = (void *)VGLogVGEarPCASelectionState(void)::handle;
  VGLogVGEarPCASelectionState(void)::handle = (uint64_t)v0;
}

void sub_260CACA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v4, v12);
    }
    else {
      float v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    long long v16 = &v14[8 * a2];
    long long v18 = (char *)*a1;
    size_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      size_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<EarFrame>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EarFrame>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EarFrame>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>,std::reverse_iterator<EarFrame*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = (void *)(a7 - 48);
    do
    {
      uint64_t v9 = *(void *)(a3 - 192);
      a3 -= 192;
      *(void *)a3 = 0;
      *(v8 - 18) = v9;
      long long v10 = *(_OWORD *)(a3 + 16);
      long long v11 = *(_OWORD *)(a3 + 32);
      long long v12 = *(_OWORD *)(a3 + 64);
      *((_OWORD *)v8 - 6) = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v8 - 5) = v12;
      *((_OWORD *)v8 - 8) = v10;
      *((_OWORD *)v8 - 7) = v11;
      long long v13 = *(_OWORD *)(a3 + 80);
      long long v14 = *(_OWORD *)(a3 + 96);
      long long v15 = *(_OWORD *)(a3 + 128);
      *((_OWORD *)v8 - 2) = *(_OWORD *)(a3 + 112);
      *((_OWORD *)v8 - 1) = v15;
      *((_OWORD *)v8 - 4) = v13;
      *((_OWORD *)v8 - 3) = v14;
      v8[1] = 0;
      v8[2] = 0;
      *uint64_t v8 = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 + 144);
      v8[2] = *(void *)(a3 + 160);
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      __n128 result = *(__n128 *)(a3 + 168);
      *(__n128 *)(v8 + 3) = result;
      v8[5] = *(void *)(a3 + 184);
      *(void *)(a3 + 168) = 0;
      *(void *)(a3 + 176) = 0;
      *(void *)(a3 + 184) = 0;
      v8 -= 24;
      v7 -= 192;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<EarFrame>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<EarFrame,0>(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<EarFrame>::__emplace_back_slow_path<EarFrame const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EarFrame>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[192 * v4];
  long long v16 = &v10[192 * v9];
  std::construct_at[abi:ne180100]<EarFrame,EarFrame const&,EarFrame*>((uint64_t)v14, a2);
  long long v15 = v14 + 192;
  std::vector<EarFrame>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_260CACE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<EarFrame>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<EarFrame,EarFrame const&,EarFrame*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  long long v4 = *(_OWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 144), *(const void **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 2);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  return a1;
}

void sub_260CACEF0(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 152) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

float anonymous namespace'::ComputeArea(float *a1)
{
  float v1 = a1[72];
  float v2 = a1[24];
  float v3 = a1[25];
  float v4 = a1[73];
  float v5 = a1[26];
  float v6 = a1[74];
  float v7 = sqrtf((float)((float)((float)(v3 - v4) * (float)(v3 - v4)) + (float)((float)(v2 - v1) * (float)(v2 - v1)))+ (float)((float)(v5 - v6) * (float)(v5 - v6)));
  float v8 = a1[120];
  float v9 = a1[121];
  float v10 = (float)((float)(v4 - v9) * (float)(v4 - v9)) + (float)((float)(v1 - v8) * (float)(v1 - v8));
  float v11 = a1[122];
  float v12 = sqrtf(v10 + (float)((float)(v6 - v11) * (float)(v6 - v11)));
  float v13 = sqrtf((float)((float)((float)(v9 - v3) * (float)(v9 - v3)) + (float)((float)(v8 - v2) * (float)(v8 - v2)))+ (float)((float)(v11 - v5) * (float)(v11 - v5)));
  return sqrtf((float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v13)* (float)((float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v12)* (float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5)* (float)((float)((float)(v13 + (float)(v7 + v12)) * 0.5) - v7))));
}

uint64_t std::array<EarFrame,3ul>::~array(uint64_t a1)
{
  uint64_t v2 = 576;
  do
  {
    uint64_t v3 = a1 + v2;
    float v4 = *(void **)(a1 + v2 - 24);
    if (v4)
    {
      *(void *)(v3 - 16) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v3 - 48);
    if (v5)
    {
      *(void *)(a1 + v2 - 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v5;
      operator delete(v5);
    }

    v2 -= 192;
  }
  while (v2);
  return a1;
}

uint64_t std::array<EarFrame,3ul>::array(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 144;
  do
  {
    uint64_t v5 = a1 + v3;
    uint64_t v6 = v4 + v3;
    *(void *)uint64_t v5 = *(id *)(v4 + v3 - 144);
    long long v7 = *(_OWORD *)(v4 + v3 - 64);
    long long v8 = *(_OWORD *)(v4 + v3 - 48);
    long long v9 = *(_OWORD *)(v4 + v3 - 32);
    long long v10 = *(_OWORD *)(v4 + v3 - 16);
    long long v11 = *(_OWORD *)(v4 + v3 - 128);
    long long v12 = *(_OWORD *)(v4 + v3 - 112);
    long long v13 = *(_OWORD *)(v4 + v3 - 96);
    long long v14 = *(_OWORD *)(v4 + v3 - 80);
    *(void *)(v5 + 144) = 0;
    *(_OWORD *)(v5 + 48) = v13;
    *(_OWORD *)(v5 + 64) = v14;
    *(_OWORD *)(v5 + 16) = v11;
    *(_OWORD *)(v5 + 32) = v12;
    *(_OWORD *)(v5 + 112) = v9;
    *(_OWORD *)(v5 + 128) = v10;
    *(_OWORD *)(v5 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v7;
    *(_OWORD *)(v5 + 96) = v8;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + v3 + 144), *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    *(void *)(v5 + 168) = 0;
    *(void *)(v5 + 176) = 0;
    unint64_t v15 = (void *)(a1 + v3 + 168);
    v15[2] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)(v6 + 24), *(void *)(v6 + 32), (uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2);
    v3 += 192;
  }
  while (v3 != 576);
  return a1;
}

void sub_260CAD1E8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + v2 + 144);
  if (v4)
  {
    *(void *)(v1 + v2 + 152) = v4;
    operator delete(v4);
  }

  if (v2)
  {
    uint64_t v5 = v1 - 192;
    do
    {
      EarFrame::~EarFrame((EarFrame *)(v5 + v2));
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v2 = *(void **)(a1 + 152);
    if (v2)
    {
      *(void *)(a1 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 128);
    if (v3)
    {
      *(void *)(a1 + 136) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

vg::ear_detection::EarBoundingBoxModel ***std::unique_ptr<vg::ear_detection::EarPCADetector>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel ****a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarPCADetector::~EarPCADetector(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void sub_260CAD744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CAD80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGFaceKitTracker;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CAD944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);
  _Unwind_Resume(a1);
}

void sub_260CADA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);
  _Unwind_Resume(a1);
}

void sub_260CADEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_260CAE100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_260CAE200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CAE7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CAE904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_260CAE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CAF2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(a1);
}

void sub_260CAFC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  _Unwind_Resume(a1);
}

BOOL device_space_joint_pos(float32x4_t *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 jointConfidence];
  long long v7 = [v6 objectAtIndexedSubscript:a3];
  [v7 floatValue];
  float v9 = v8;

  if (v9 >= 0.2)
  {
    [v5 rootTransform];
    float32x4_t v18 = v10;
    float32x4_t v19 = v11;
    float32x4_t v20 = v12;
    float32x4_t v21 = v13;
    long long v14 = [v5 modelPoses];
    unint64_t v15 = [v14 objectAtIndexedSubscript:a3];
    [v15 modelPose];
    *a1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v16.f32[0]), v19, *(float32x2_t *)v16.f32, 1), v20, v16, 2), v21, v16, 3);
  }
  return v9 >= 0.2;
}

void sub_260CAFDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void missing_joint(NSString *a1@<X0>, uint64_t a2@<X8>)
{
  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1;
  uint64_t v4 = [NSString stringWithFormat:@"Could not calculate pose values. Joint %@ not visible. Try a different pose.", v3];
  *(_DWORD *)a2 = 29;
  *(void *)(a2 + 8) = [NSString stringWithFormat:@"Body Pose Guidance filter failed with feedback: %@", v4];
  *(void *)(a2 + 16) = 0;
  long long v7 = v4;
  float v8 = @"poseGuidance";
  uint64_t v6 = @"feedback";
  id v5 = [NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  v9[0] = v5;
  *(void *)(a2 + 24) = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];
}

void sub_260CAFF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float angle_deg_in_2d_plane(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3 = vmulq_f32(a1, a3);
  float32x4_t v4 = vmulq_f32(a1, a2);
  return (float)(atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0])* 180.0)/ 3.14159265;
}

float deg_angle_between(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vmulq_f32(a1, a1);
  v2.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).u64[0];
  v2.f32[0] = sqrtf(v2.f32[0]) + 1.0e-16;
  float32x4_t v3 = vdivq_f32(a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 0));
  float32x4_t v4 = vmulq_f32(a2, a2);
  v4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
  v4.f32[0] = sqrtf(v4.f32[0]) + 1.0e-16;
  float32x4_t v5 = vmulq_f32(v3, vdivq_f32(a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0)));
  return (float)(acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])* 180.0)/ 3.14159265;
}

void ___ZL25blendshapesInitializationv_block_invoke()
{
  v8[51] = *MEMORY[0x263EF8340];
  v8[0] = @"eyeBlink_L";
  v8[1] = @"eyeBlink_R";
  v8[2] = @"eyeSquint_L";
  v8[3] = @"eyeSquint_R";
  v8[4] = @"eyeLookDown_L";
  v8[5] = @"eyeLookDown_R";
  v8[6] = @"eyeLookIn_L";
  v8[7] = @"eyeLookIn_R";
  unsigned char v8[8] = @"eyeWide_L";
  v8[9] = @"eyeWide_R";
  v8[10] = @"eyeLookOut_L";
  v8[11] = @"eyeLookOut_R";
  v8[12] = @"eyeLookUp_L";
  v8[13] = @"eyeLookUp_R";
  v8[14] = @"browDown_L";
  v8[15] = @"browDown_R";
  v8[16] = @"browInnerUp";
  v8[17] = @"browOuterUp_L";
  v8[18] = @"browOuterUp_R";
  v8[19] = @"jawOpen";
  v8[20] = @"mouthClose";
  v8[21] = @"jawLeft";
  v8[22] = @"jawRight";
  v8[23] = @"jawForward";
  v8[24] = @"mouthUpperUp_L";
  v8[25] = @"mouthUpperUp_R";
  v8[26] = @"mouthLowerDown_L";
  v8[27] = @"mouthLowerDown_R";
  v8[28] = @"mouthRollUpper";
  v8[29] = @"mouthRollLower";
  v8[30] = @"mouthSmile_L";
  v8[31] = @"mouthSmile_R";
  v8[32] = @"mouthDimple_L";
  v8[33] = @"mouthDimple_R";
  v8[34] = @"mouthStretch_L";
  v8[35] = @"mouthStretch_R";
  v8[36] = @"mouthFrown_L";
  v8[37] = @"mouthFrown_R";
  v8[38] = @"mouthPress_L";
  v8[39] = @"mouthPress_R";
  v8[40] = @"mouthPucker";
  v8[41] = @"mouthFunnel";
  v8[42] = @"mouthLeft";
  v8[43] = @"mouthRight";
  v8[44] = @"mouthShrugLower";
  v8[45] = @"mouthShrugUpper";
  v8[46] = @"noseSneer_L";
  v8[47] = @"noseSneer_R";
  v8[48] = @"cheekPuff";
  v8[49] = @"cheekSquint_L";
  v8[50] = @"cheekSquint_R";
  os_log_t v0 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:51];
  uint64_t v1 = objc_opt_new();
  for (unint64_t i = 0; i < [v0 count]; ++i)
  {
    float32x4_t v3 = [v0 objectAtIndex:i];
    float32x4_t v4 = [NSNumber numberWithUnsignedLong:i];
    [v1 setObject:v4 forKeyedSubscript:v3];
  }
  float32x4_t v5 = (void *)_blendshapeNames;
  _blendshapeNames = (uint64_t)v0;
  id v6 = v0;

  long long v7 = (void *)_blendshapeNameToIdx;
  _blendshapeNameToIddouble x = (uint64_t)v1;
}

void sub_260CB0460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB064C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB06C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CB09B8()
{
}

id vg::frame_selection::VGEarCaptureOptions::toDictionary(vg::frame_selection::VGEarCaptureOptions *this, double a2)
{
  v36[17] = *MEMORY[0x263EF8340];
  v35[0] = @"earPresenceThreshold";
  LODWORD(a2) = *(_DWORD *)this;
  __int16 v34 = [NSNumber numberWithFloat:a2];
  v36[0] = v34;
  v35[1] = @"earOcclusionThreshold";
  LODWORD(v3) = *((_DWORD *)this + 1);
  long long v33 = [NSNumber numberWithFloat:v3];
  v36[1] = v33;
  uint8_t v35[2] = @"bboxVisibilityThreshold";
  LODWORD(v4) = *((_DWORD *)this + 2);
  uint64_t v32 = [NSNumber numberWithFloat:v4];
  v36[2] = v32;
  v35[3] = @"landmarkVisibilityThreshold";
  LODWORD(v5) = *((_DWORD *)this + 3);
  long long v31 = [NSNumber numberWithFloat:v5];
  v36[3] = v31;
  v35[4] = @"percentileDetectionConfidence";
  LODWORD(v6) = *((_DWORD *)this + 4);
  long long v30 = [NSNumber numberWithFloat:v6];
  v36[4] = v30;
  void v35[5] = @"yawCount";
  long long v29 = [NSNumber numberWithUnsignedLong:*((void *)this + 3)];
  v36[5] = v29;
  v35[6] = @"pitchCount";
  long long v28 = [NSNumber numberWithUnsignedLong:*((void *)this + 4)];
  v36[6] = v28;
  v35[7] = @"yawLimit";
  LODWORD(v7) = *((_DWORD *)this + 10);
  float v8 = [NSNumber numberWithFloat:v7];
  v36[7] = v8;
  v35[8] = @"yawSensitivity";
  LODWORD(v9) = *((_DWORD *)this + 11);
  float32x4_t v10 = [NSNumber numberWithFloat:v9];
  v36[8] = v10;
  v35[9] = @"pitchLimit";
  LODWORD(v11) = *((_DWORD *)this + 12);
  float32x4_t v12 = [NSNumber numberWithFloat:v11];
  v36[9] = v12;
  v35[10] = @"pitchSensitivity";
  LODWORD(v13) = *((_DWORD *)this + 13);
  long long v14 = [NSNumber numberWithFloat:v13];
  v36[10] = v14;
  v35[11] = @"writeDebugData";
  unint64_t v15 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 56)];
  v36[11] = v15;
  v35[12] = @"debugDataPath";
  id v16 = [NSString alloc];
  size_t v17 = (void *)((char *)this + 64);
  if (*((char *)this + 87) < 0) {
    size_t v17 = (void *)*v17;
  }
  float32x4_t v18 = (void *)[v16 initWithUTF8String:v17];
  v36[12] = v18;
  v35[13] = @"modelsRootPath";
  id v19 = [NSString alloc];
  float32x4_t v20 = (void *)((char *)this + 88);
  if (*((char *)this + 111) < 0) {
    float32x4_t v20 = (void *)*v20;
  }
  float32x4_t v21 = (void *)[v19 initWithUTF8String:v20];
  v36[13] = v21;
  v35[14] = @"useMotionBlurFilter";
  uint64_t v22 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 112)];
  v36[14] = v22;
  v35[15] = @"motionBlurFilterThreshold";
  LODWORD(v23) = *((_DWORD *)this + 29);
  uint64_t v24 = [NSNumber numberWithFloat:v23];
  v35[16] = @"yawAngles";
  uint64_t v25 = *((void *)this + 15);
  v36[15] = v24;
  uint8_t v36[16] = v25;
  long long v26 = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:17];

  return v26;
}

void sub_260CB0FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::face_tracker::createARKitDictFromFaceKitDict(vg::frame_selection::face_tracker *this, NSDictionary *a2, const CGSize *a3)
{
  v44[1] = *MEMORY[0x263EF8340];
  long long v40 = this;
  double v4 = objc_opt_new();
  double v5 = [(vg::frame_selection::face_tracker *)v40 objectForKeyedSubscript:@"timestamp"];
  [v4 setObject:v5 forKeyedSubscript:@"timestamp"];

  double v6 = [(vg::frame_selection::face_tracker *)v40 objectForKeyedSubscript:@"tracked_faces"];
  if ([v6 count])
  {
    long long v39 = [v6 firstObject];
    double v7 = objc_opt_new();
    [v7 setObject:&unk_270CFD8B0 forKeyedSubscript:@"confidence"];
    long long v38 = (double *)a2;
    float v8 = [v39 objectForKeyedSubscript:@"smooth_data"];
    double v9 = objc_opt_new();
    float32x4_t v10 = [v8 objectForKeyedSubscript:@"pose"];
    [v9 setObject:v10 forKeyedSubscript:@"pose"];

    double v11 = [v8 objectForKeyedSubscript:@"geometry"];
    float32x4_t v12 = objc_opt_new();
    double v13 = [v11 objectForKeyedSubscript:@"vertices"];
    [v12 setObject:v13 forKeyedSubscript:@"vertices"];

    long long v14 = [v11 objectForKeyedSubscript:@"landmarks"];
    [v12 setObject:v14 forKeyedSubscript:@"landmarks"];

    [v9 setObject:v12 forKeyedSubscript:@"geometry"];
    unint64_t v15 = [v8 objectForKeyedSubscript:@"animation"];
    id v16 = objc_opt_new();
    size_t v17 = [v15 objectForKeyedSubscript:@"left_eye_pitch"];
    [v16 setObject:v17 forKeyedSubscript:@"left_eye_pitch"];

    float32x4_t v18 = [v15 objectForKeyedSubscript:@"left_eye_yaw"];
    [v16 setObject:v18 forKeyedSubscript:@"left_eye_yaw"];

    id v19 = [v15 objectForKeyedSubscript:@"right_eye_pitch"];
    [v16 setObject:v19 forKeyedSubscript:@"right_eye_pitch"];

    float32x4_t v20 = [v15 objectForKeyedSubscript:@"right_eye_yaw"];
    [v16 setObject:v20 forKeyedSubscript:@"right_eye_yaw"];

    float32x4_t v21 = [v15 objectForKeyedSubscript:@"gaze"];
    [v16 setObject:v21 forKeyedSubscript:@"gaze"];

    uint64_t v22 = [v15 objectForKeyedSubscript:@"blendshapes"];
    [v16 setObject:v22 forKeyedSubscript:@"blendshapes"];

    [v9 setObject:v16 forKeyedSubscript:@"animation"];
    double v23 = [v8 objectForKeyedSubscript:@"rgb_camera"];
    uint64_t v24 = objc_opt_new();
    uint64_t v25 = [v23 objectForKeyedSubscript:@"intrinsics"];
    [v24 setObject:v25 forKeyedSubscript:@"intrinsics"];

    [v9 setObject:v24 forKeyedSubscript:@"rgb_camera"];
    [v7 setObject:v9 forKeyedSubscript:@"smooth_data"];
    long long v26 = [v9 objectForKeyedSubscript:@"geometry"];
    id v27 = [v26 objectForKeyedSubscript:@"landmarks"];
    long long v28 = v27;
    if (v27)
    {
      unint64_t v29 = [v27 length];
      uint64_t v30 = [v28 bytes];
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(&__p, v29 >> 3);
      if (v29 >= 8)
      {
        uint64_t v31 = 0;
        if (v29 >> 3 <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v29 >> 3;
        }
        do
        {
          *((void *)__p + v31) = *(void *)(v30 + 8 * v31);
          ++v31;
        }
        while (v32 != v31);
      }
    }
    else
    {
      __p = 0;
      long long v42 = 0;
      uint64_t v43 = 0;
    }

    v46.origin.double x = vg::shared::computeBBox((uint64_t **)&__p, v38, 0.1);
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v46);
    [v7 setObject:DictionaryRepresentation forKeyedSubscript:@"Rect"];

    v44[0] = v7;
    float v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:v44 count:1];
    [v4 setObject:v35 forKeyedSubscript:@"tracked_faces"];

    id v36 = v4;
    if (__p)
    {
      long long v42 = __p;
      operator delete(__p);
    }
  }
  else
  {
    [v4 setObject:MEMORY[0x263EFFA68] forKeyedSubscript:@"tracked_faces"];
    id v33 = v4;
  }

  return v4;
}

void sub_260CB160C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

double vg::frame_selection::face_tracker::createFaceBoundsFromARKitLandmarks(uint64_t **a1, double *a2)
{
  return vg::shared::computeBBox(a1, a2, 0.1);
}

void *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_260CB17F4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_260CB1888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CB19EC(_Unwind_Exception *a1)
{
  double v6 = v4;

  _Unwind_Resume(a1);
}

void sub_260CB1C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB1E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB1F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGFaceCaptureData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CB553C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB56BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB5760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CB5838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB5990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB5D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB5D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB63EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CB6D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB6FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CB7270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB7814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_260CB8078(_Unwind_Exception *a1)
{
  v2[2](v2);
  v1[2](v1);

  __39__VGCaptureData__createColorFromYCbCr___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGCaptureData(void)
{
  if (VGLogVGCaptureData(void)::onceToken != -1) {
    dispatch_once(&VGLogVGCaptureData(void)::onceToken, &__block_literal_global_390);
  }
  os_log_t v0 = (void *)VGLogVGCaptureData(void)::handle;

  return v0;
}

void sub_260CB8670(_Unwind_Exception *a1)
{
  double v6 = v4;

  __88__VGCaptureData_computeYuvHighResChromaticAdaptationReverted_chromaticAdaptationMatrix___block_invoke();
  _Unwind_Resume(a1);
}

void sub_260CB888C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB894C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB89FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB8EFC(_Unwind_Exception *a1)
{
  v5[2](v5);
  v4[2](v4);

  v3[2](v3);
  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_260CB91A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB9464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CB95B4(_Unwind_Exception *a1)
{
}

void sub_260CB97F4(_Unwind_Exception *a1)
{
}

void sub_260CB99BC(_Unwind_Exception *a1)
{
  __60__VGCaptureData_mcamLeftColorYuvChromaticAdaptationReverted__block_invoke();
  _Unwind_Resume(a1);
}

void sub_260CB9B0C(_Unwind_Exception *a1)
{
}

void sub_260CB9C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGCaptureData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CBA020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBB228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBB60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBB8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBBB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  if (a10)
  {
    if (!v17) {
      goto LABEL_6;
    }
  }
  else
  {

    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15)
      {
        if (!v19) {
          goto LABEL_11;
        }
      }
      else
      {

        if ((v19 & 1) == 0)
        {
LABEL_11:
          if (!v18) {

          }
          _Unwind_Resume(a1);
        }
      }

      goto LABEL_11;
    }
  }

  goto LABEL_6;
}

void ___ZL18VGLogVGCaptureDatav_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGCaptureData");
  uint64_t v1 = (void *)VGLogVGCaptureData(void)::handle;
  VGLogVGCaptureData(void)::handle = (uint64_t)v0;
}

void sub_260CBBD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGBlendshapeExpressionFilter::processBlendshapeConfigFile(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  id v2 = a1;
  v51[3] = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) < 0) {
    id v2 = (uint64_t *)*a1;
  }
  unint64_t v29 = objc_msgSend(NSString, "stringWithCString:encoding:", v2, objc_msgSend(NSString, "defaultCStringEncoding", a2));
  double v3 = NSString;
  double v4 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
  v44[0] = v4;
  v44[1] = @"VGExpressionFilterConfigs";
  void v44[2] = v29;
  double v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v44 count:3];
  uint64_t v30 = [v3 pathWithComponents:v5];

  double v6 = VGReadJSON(v30);
  long long v28 = v6;
  if (v6)
  {
    uint64_t v31 = +[VGFaceTrackerHelper blendshapeNamesToIdx];
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    obuint64_t j = v6;
    uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v34;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v34 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(id *)(*((void *)&v33 + 1) + 8 * i);
          v51[0] = @"name";
          v51[1] = @"clip_threshold_low";
          v51[2] = @"clip_threshold_high";
          double v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v51 count:3];
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          id v12 = v11;
          uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v47 count:16];
          if (v13)
          {
            uint64_t v14 = *(void *)v40;
            while (2)
            {
              for (uint64_t j = 0; j != v13; ++j)
              {
                if (*(void *)v40 != v14) {
                  objc_enumerationMutation(v12);
                }
                uint64_t v16 = *(void *)(*((void *)&v39 + 1) + 8 * j);
                int v17 = [v10 objectForKey:v16];
                BOOL v18 = v17 == 0;

                if (v18)
                {
                  uint64_t v25 = __VGLogSharedInstance();
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 138412290;
                    uint64_t v46 = v16;
                    _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_ERROR, " Blendshape config is invalid. Missing key: %@ ", buf, 0xCu);
                  }

                  goto LABEL_23;
                }
              }
              uint64_t v13 = [v12 countByEnumeratingWithState:&v39 objects:v47 count:16];
              if (v13) {
                continue;
              }
              break;
            }
          }

          id v19 = [v10 objectForKeyedSubscript:@"name"];
          std::string::basic_string[abi:ne180100]<0>(v47, (char *)[v19 UTF8String]);
          float32x4_t v20 = [v31 objectForKeyedSubscript:v19];
          uint64_t v48 = [v20 unsignedIntValue];
          float32x4_t v21 = [v10 objectForKeyedSubscript:@"clip_threshold_low"];
          [v21 floatValue];
          int v49 = v22;
          double v23 = [v10 objectForKeyedSubscript:@"clip_threshold_high"];
          [v23 floatValue];
          int v50 = v24;
          std::vector<vg::frame_selection::BlendshapeConfig>::push_back[abi:ne180100]((uint64_t *)&v37, (long long *)v47);
          if ((char)v47[23] < 0) {
            operator delete(*(void **)v47);
          }

LABEL_23:
          ;
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
      }
      while (v7);
    }

    *(_OWORD *)uint64_t v27 = v37;
    *(void *)(v27 + 16) = v38;
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    *(unsigned char *)(v27 + 24) = 1;
    *(void *)__n128 v47 = &v37;
    std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
  }
  else
  {
    long long v26 = __VGLogSharedInstance();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 v47 = 138412290;
      *(void *)&v47[4] = v30;
      _os_log_impl(&dword_260C8D000, v26, OS_LOG_TYPE_ERROR, " Unable to parse blendshape config from file: %@ ", v47, 0xCu);
    }

    *(unsigned char *)uint64_t v27 = 0;
    *(unsigned char *)(v27 + 24) = 0;
  }
}

void sub_260CBC208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::frame_selection::BlendshapeConfig>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v15 = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(long long *)((char *)a2 + 24);
    v17[2] = v15 + 40;
    std::vector<vg::frame_selection::BlendshapeConfig>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(long long *)((char *)a2 + 24);
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_260CBC46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGBlendshapeExpressionFilter::getBlendshapesFromTrackingData(vg::frame_selection::VGBlendshapeExpressionFilter *this@<X0>, uint64_t a2@<X8>)
{
  __p[3] = *(void **)MEMORY[0x263EF8340];
  double v4 = [(vg::frame_selection::VGBlendshapeExpressionFilter *)this objectForKeyedSubscript:@"tracked_faces"];
  unint64_t v5 = v4;
  if (v4 && [v4 count])
  {
    unint64_t v6 = [v5 objectAtIndexedSubscript:0];
    unint64_t v7 = v6;
    if (v6)
    {
      long long v8 = [v6 objectForKeyedSubscript:@"smooth_data"];
      uint64_t v9 = [v8 objectForKeyedSubscript:@"animation"];

      unint64_t v10 = [v9 objectForKeyedSubscript:@"blendshapes"];
      unint64_t v11 = v10;
      if (v10)
      {
        unint64_t v12 = [v10 length];
        unint64_t v13 = +[VGFaceTrackerHelper blendshapeNames];
        if (v12 >> 2 == [v13 count])
        {
          id v14 = v11;
          uint64_t v15 = (const void *)[v14 bytes];
          uint64_t v16 = [v14 length];
          memset(__p, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v15, (uint64_t)v15 + (v16 & 0xFFFFFFFFFFFFFFFCLL), v16 >> 2);
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a2, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
          *(unsigned char *)(a2 + 24) = 1;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          BOOL v18 = __VGLogSharedInstance();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 134217984;
            *(void **)((char *)__p + 4) = (void *)[v13 count];
            _os_log_impl(&dword_260C8D000, v18, OS_LOG_TYPE_ERROR, " Blendshape values should consist of %lu floats ", (uint8_t *)__p, 0xCu);
          }

          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 24) = 0;
        }
      }
      else
      {
        int v17 = __VGLogSharedInstance();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, " Blendshape values not found in the tracking dictionary ", (uint8_t *)__p, 2u);
        }

        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 24) = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_260CBC6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

vg::frame_selection::VGExpressionIsNeutralFilter *vg::frame_selection::VGExpressionIsNeutralFilter::VGExpressionIsNeutralFilter(vg::frame_selection::VGExpressionIsNeutralFilter *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((void *)this + 2) = 0;
  id v2 = (std::string *)((char *)this + 16);
  *((_DWORD *)this + 2) = 16;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_270CEED78;
  std::string::basic_string[abi:ne180100]<0>(&v10, "VGExpressionIsNeutralFilter.ExpressionFilterConfig.json");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  vg::frame_selection::VGBlendshapeExpressionFilter::processBlendshapeConfigFile((uint64_t *)&__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&buf, 0, sizeof(buf));
  if (v9) {
    std::vector<vg::frame_selection::BlendshapeConfig>::__init_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(&buf, v7, v8, 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v7) >> 3));
  }
  if (v2 != &buf) {
    std::vector<vg::frame_selection::BlendshapeConfig>::__assign_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>((uint64_t)v2, (std::string *)buf.__r_.__value_.__l.__data_, (long long *)buf.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3));
  }
  p_std::string buf = &buf;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  double v3 = __VGLogSharedInstance();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v4;
    _os_log_impl(&dword_260C8D000, v3, OS_LOG_TYPE_INFO, " Loaded %zu blendshape configurations for VGExpressionIsNeutralFilter_New filter ", (uint8_t *)&buf, 0xCu);
  }

  if (v9)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
    std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_260CBC964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  void *v25 = &unk_270CEEDE0;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

float vg::frame_selection::VGExpressionIsNeutralFilter::filter(vg::frame_selection::VGExpressionIsNeutralFilter *this, NSDictionary *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v3 = a2;
  vg::frame_selection::VGBlendshapeExpressionFilter::getBlendshapesFromTrackingData((vg::frame_selection::VGBlendshapeExpressionFilter *)v3, (uint64_t)&v25);
  if (v27)
  {
    int v22 = 0;
    double v23 = 0;
    uint64_t v24 = 0;
    unint64_t v4 = (std::string *)std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v22, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
    memset(&__p, 0, sizeof(__p));
    uint64_t v20 = 0x80000000000000;
    uint64_t v5 = *((void *)this + 2);
    uint64_t v6 = *((void *)this + 3);
    float v7 = 0.0;
    while (v5 != v6)
    {
      double v8 = vg::frame_selection::VGExpressionFilter::remap((vg::frame_selection::VGExpressionFilter *)v4, *((float *)v22 + *(void *)(v5 + 24)), *(float *)(v5 + 32), *(float *)(v5 + 36));
      float v9 = *(float *)&v8;
      float v10 = *((float *)&v20 + 1);
      if (v9 > *((float *)&v20 + 1))
      {
        if (*((float *)&v20 + 1) <= v9) {
          float v10 = v9;
        }
        *((float *)&v20 + 1) = v10;
        unint64_t v4 = std::string::operator=(&__p, (const std::string *)v5);
        LODWORD(v2std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = *((_DWORD *)v22 + *(void *)(v5 + 24));
      }
      float v7 = v7 + v9;
      v5 += 40;
    }
    unint64_t v11 = __VGLogSharedInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 134218498;
      double v29 = *((float *)&v20 + 1);
      __int16 v30 = 2048;
      double v31 = *(float *)&v20;
      __int16 v32 = 2080;
      long long v33 = p_p;
      _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_DEBUG, " VGExpressionIsNeutralFilter: Max blendshape found: clippedValue: %f, rawValue: %f, name: %s ", buf, 0x20u);
    }

    uint64_t v14 = *((void *)this + 2);
    uint64_t v13 = *((void *)this + 3);
    uint64_t v15 = __VGLogSharedInstance();
    float v16 = v7 / (float)(0xCCCCCCCCCCCCCCCDLL * ((v13 - v14) >> 3));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v29 = v16;
      _os_log_impl(&dword_260C8D000, v15, OS_LOG_TYPE_DEBUG, " VGExpressionIsNeutralFilter: L1Distance = %f ", buf, 0xCu);
    }

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22)
    {
      double v23 = v22;
      operator delete(v22);
    }
    float v17 = 1.0 - v16;
  }
  else
  {
    BOOL v18 = __VGLogSharedInstance();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v2std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
      _os_log_impl(&dword_260C8D000, v18, OS_LOG_TYPE_ERROR, " No blendshapes found in tracking data ", (uint8_t *)&v20, 2u);
    }

    float v17 = 0.0;
  }
  if (v27 && v25)
  {
    long long v26 = v25;
    operator delete(v25);
  }

  return v17;
}

void sub_260CBCCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

void vg::frame_selection::VGExpressionIsNeutralFilter::~VGExpressionIsNeutralFilter(vg::frame_selection::VGExpressionIsNeutralFilter *this)
{
  *(void *)this = &unk_270CEEDE0;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_270CEEDE0;
  id v2 = (void **)((char *)this + 16);
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2612278D0](this, 0x10A1C4037ACD87BLL);
}

uint64_t std::vector<vg::frame_selection::BlendshapeConfig>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,std::reverse_iterator<vg::frame_selection::BlendshapeConfig*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<vg::frame_selection::BlendshapeConfig>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<vg::frame_selection::BlendshapeConfig>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100]((uint64_t *)v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

std::string *std::vector<vg::frame_selection::BlendshapeConfig>::__init_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_260CBD178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<vg::frame_selection::BlendshapeConfig>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  char v12 = this;
  long long v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(long long *)((char *)v6 + 24);
      uint64_t v6 = (long long *)((char *)v6 + 40);
      uint64_t v4 = (std::string *)((char *)v8 + 40);
      long long v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_260CBD2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0) {
      operator delete(*(void **)(v1 - 40));
    }
    v1 -= 40;
  }
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__assign_with_size[abi:ne180100]<vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<vg::frame_selection::BlendshapeConfig>::__vallocate[abi:ne180100]((void *)a1, v11);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(__str, v13, v9);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::frame_selection::BlendshapeConfig>,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*,vg::frame_selection::BlendshapeConfig*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 17) < 0) {
        operator delete(*(void **)(v16 - 40));
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_260CBD4A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_260CBD4A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<vg::frame_selection::BlendshapeConfig>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<vg::frame_selection::BlendshapeConfig>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,vg::frame_selection::BlendshapeConfig *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  uint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 40);
    uint64_t v4 = (std::string *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

void sub_260CBD6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBDA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBDF0C(_Unwind_Exception *a1)
{
  vg::frame_selection::FrameRejectionState::~FrameRejectionState(v1);
  _Unwind_Resume(a1);
}

void vg::frame_selection::FrameRejectionState::~FrameRejectionState(id *this)
{
}

void sub_260CBE154(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_260CBE250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBE33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBE558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBE638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBE720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CBE8D0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_260CBE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CBEA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::frame_selection::VGBlurDetectorImpl::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = *(void *)a2;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 8);
  return 1;
}

uint64_t vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlur(uint64_t a1, unint64_t *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = (uint64_t)(a2 + 1);
  if (v4 == v5)
  {
    char v12 = __VGLogSharedInstance();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      unint64_t v13 = *a2;
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v38 = v13;
      _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no landmarks data for frame#%zu ", buf, 0xCu);
    }

    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v14 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v14;
        operator delete(v14);
      }
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
  else
  {
    unint64_t v7 = *a2;
    unint64_t v8 = *(void *)(a1 + 32);
    if (*a2 >= v8)
    {
      if (*(unsigned char *)(a1 + 24))
      {
        unint64_t v15 = v7 - v8;
        if (v7 != v8)
        {
          std::string __p = 0;
          long long v35 = 0;
          long long v36 = 0;
          std::vector<float>::reserve(&__p, (uint64_t)(v5 - v4) >> 3);
          unint64_t v20 = a2[1];
          if (a2[2] != v20)
          {
            unint64_t v21 = 0;
            int v22 = v35;
            do
            {
              float32x2_t v23 = vsub_f32(*(float32x2_t *)(v20 + 8 * v21), *(float32x2_t *)(*(void *)a1 + 8 * v21));
              float v24 = sqrtf(vaddv_f32(vmul_f32(v23, v23))) / (float)v15;
              if (v22 >= v36)
              {
                long long v26 = (float *)__p;
                uint64_t v27 = ((char *)v22 - (unsigned char *)__p) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v29 = (char *)v36 - (unsigned char *)__p;
                if (((char *)v36 - (unsigned char *)__p) >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v36, v30);
                  long long v26 = (float *)__p;
                  int v22 = v35;
                }
                else
                {
                  double v31 = 0;
                }
                __int16 v32 = (float *)&v31[4 * v27];
                float *v32 = v24;
                uint64_t v25 = v32 + 1;
                while (v22 != v26)
                {
                  int v33 = *((_DWORD *)v22-- - 1);
                  *((_DWORD *)v32-- - 1) = v33;
                }
                std::string __p = v32;
                long long v35 = v25;
                long long v36 = (float *)&v31[4 * v30];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                float *v22 = v24;
                uint64_t v25 = v22 + 1;
              }
              long long v35 = v25;
              ++v21;
              unint64_t v20 = a2[1];
              int v22 = v25;
            }
            while (v21 < (uint64_t)(a2[2] - v20) >> 3);
          }
          vg::shared::computeMedian<float>();
        }
        uint64_t v16 = __VGLogSharedInstance();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta time must be positive ", buf, 2u);
        }
      }
      else
      {
        BOOL v18 = __VGLogSharedInstance();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          unint64_t v19 = *a2;
          *(_DWORD *)std::string buf = 134217984;
          unint64_t v38 = v19;
          _os_log_impl(&dword_260C8D000, v18, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no previous landmarks data recorded, updated with data from frame#%zu ", buf, 0xCu);
        }

        _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, v6);
        *(void *)(a1 + 32) = *a2;
      }
    }
    else
    {
      uint64_t v9 = __VGLogSharedInstance();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unint64_t v10 = *a2;
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 134218496;
        unint64_t v38 = v10;
        __int16 v39 = 2048;
        unint64_t v40 = v10;
        __int16 v41 = 2048;
        uint64_t v42 = v11;
        _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_ERROR, " Frame#%zu has timestamp value lower than the timestamp of the previously processed frame (%zu < %zu) ", buf, 0x20u);
      }
    }
  }
  return 0;
}

void sub_260CBEF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlurHRTF(uint64_t a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 32);
  if (*a2 >= v4)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      unint64_t v8 = *a2 - v4;
      if (v8)
      {
        float v12 = (float)v8;
        float v13 = (float)v8 / *(float *)(a1 + 40);
        if (v13 > 0.0)
        {
          std::string __p = 0;
          unint64_t v30 = 0;
          double v31 = 0;
          std::vector<float>::reserve(&__p, (a2[2] - a2[1]) >> 3);
          uint64_t v14 = a2[1];
          if (a2[2] != v14)
          {
            unint64_t v15 = 0;
            uint64_t v16 = v30;
            do
            {
              float32x2_t v17 = vsub_f32(*(float32x2_t *)(v14 + 8 * v15), *(float32x2_t *)(*(void *)a1 + 8 * v15));
              float v18 = (float)(vaddv_f32(vmul_f32(v17, v17)) / v12) / v13;
              if (v16 >= v31)
              {
                unint64_t v20 = (float *)__p;
                uint64_t v21 = ((char *)v16 - (unsigned char *)__p) >> 2;
                unint64_t v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62) {
                  std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v23 = (char *)v31 - (unsigned char *)__p;
                if (((char *)v31 - (unsigned char *)__p) >> 1 > v22) {
                  unint64_t v22 = v23 >> 1;
                }
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v24 = v22;
                }
                if (v24)
                {
                  uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v31, v24);
                  unint64_t v20 = (float *)__p;
                  uint64_t v16 = v30;
                }
                else
                {
                  uint64_t v25 = 0;
                }
                long long v26 = (float *)&v25[4 * v21];
                float *v26 = v18;
                unint64_t v19 = v26 + 1;
                while (v16 != v20)
                {
                  int v27 = *((_DWORD *)v16-- - 1);
                  *((_DWORD *)v26-- - 1) = v27;
                }
                std::string __p = v26;
                unint64_t v30 = v19;
                double v31 = (float *)&v25[4 * v24];
                if (v20) {
                  operator delete(v20);
                }
              }
              else
              {
                float *v16 = v18;
                unint64_t v19 = v16 + 1;
              }
              unint64_t v30 = v19;
              ++v15;
              uint64_t v14 = a2[1];
              uint64_t v16 = v19;
            }
            while (v15 < (a2[2] - v14) >> 3);
          }
          vg::shared::computeMedian<float>();
        }
        uint64_t v9 = __VGLogSharedInstance();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta frames must be positive ", buf, 2u);
        }
      }
      else
      {
        uint64_t v9 = __VGLogSharedInstance();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_ERROR, " VGBlurDetectorImpl::isMotionBlurPresent: delta time must be positive ", buf, 2u);
        }
      }
    }
    else
    {
      unint64_t v10 = __VGLogSharedInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *a2;
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v33 = v11;
        _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::isMotionBlurPresent: no previous landmarks data recorded, updated with data from frame#%zu ", buf, 0xCu);
      }

      _ZNSt3__18optionalINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100IRKS5_vEERS6_OT_(a1, (uint64_t)(a2 + 1));
      *(void *)(a1 + 32) = *a2;
    }
  }
  else
  {
    unint64_t v5 = __VGLogSharedInstance();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *a2;
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 134218496;
      uint64_t v33 = v6;
      __int16 v34 = 2048;
      uint64_t v35 = v6;
      __int16 v36 = 2048;
      uint64_t v37 = v7;
      _os_log_impl(&dword_260C8D000, v5, OS_LOG_TYPE_ERROR, " Frame#%zu has timestamp value lower than the timestamp of the previously processed frame (%zu < %zu) ", buf, 0x20u);
    }
  }
  return 0;
}

void sub_260CBF4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::frame_selection::VGBlurDetectorImpl::detectMotionBlur(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = VGLogVGBlurDetector();
  if (os_signpost_enabled(v4))
  {
    v8[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DetectMotionBlur", (const char *)&unk_260D385D9, (uint8_t *)v8, 2u);
  }

  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v5 = vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlurHRTF(a1, a2);
  }
  else {
    uint64_t v5 = vg::frame_selection::VGBlurDetectorImpl::_detectMotionBlur(a1, (unint64_t *)a2);
  }
  uint64_t v6 = v5;
  ___ZN2vg15frame_selection18VGBlurDetectorImpl16detectMotionBlurERKNS0_19VGBlurDetectorInputE_block_invoke();
  return v6;
}

void sub_260CBF5A8(_Unwind_Exception *a1)
{
}

id VGLogVGBlurDetector(void)
{
  if (VGLogVGBlurDetector(void)::onceToken != -1) {
    dispatch_once(&VGLogVGBlurDetector(void)::onceToken, &__block_literal_global_4);
  }
  os_log_t v0 = (void *)VGLogVGBlurDetector(void)::handle;

  return v0;
}

void ___ZN2vg15frame_selection18VGBlurDetectorImpl16detectMotionBlurERKNS0_19VGBlurDetectorInputE_block_invoke()
{
  os_log_t v0 = VGLogVGBlurDetector();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DetectMotionBlur", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void vg::frame_selection::VGBlurDetectorImpl::resetPreviousState(vg::frame_selection::VGBlurDetectorImpl *this)
{
  uint64_t v2 = __VGLogSharedInstance();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl(&dword_260C8D000, v2, OS_LOG_TYPE_INFO, " VGBlurDetectorImpl::resetPreviousState: resetting previous state of the detector ", v4, 2u);
  }

  if (*((unsigned char *)this + 24))
  {
    double v3 = *(void **)this;
    if (*(void *)this)
    {
      *((void *)this + 1) = v3;
      operator delete(v3);
    }
    *((unsigned char *)this + 24) = 0;
  }
  *((void *)this + 4) = 0;
}

void vg::frame_selection::VGBlurDetector::create(vg::frame_selection::VGBlurDetector *this)
{
}

void vg::frame_selection::VGBlurDetector::create()
{
}

void sub_260CBF7CC(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGBlurDetector::VGBlurDetector(vg::frame_selection::VGBlurDetector *this)
{
}

{
  operator new();
}

void vg::frame_selection::VGBlurDetector::~VGBlurDetector(vg::frame_selection::VGBlurDetector *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t vg::frame_selection::VGBlurDetector::detectMotionBlur(uint64_t *a1, uint64_t *a2)
{
  return vg::frame_selection::VGBlurDetectorImpl::detectMotionBlur(*a1, a2);
}

void vg::frame_selection::VGBlurDetector::resetPreviousState(vg::frame_selection::VGBlurDetectorImpl **this)
{
}

void *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<IOSurface * {__strong}>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_260CBF988(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL19VGLogVGBlurDetectorv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGBlurDetector");
  uint64_t v1 = (void *)VGLogVGBlurDetector(void)::handle;
  VGLogVGBlurDetector(void)::handle = (uint64_t)v0;
}

void sub_260CBFA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::default_delete<vg::frame_selection::VGBlurDetectorImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      id v2 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v2;
        operator delete(v2);
      }
    }
    JUMPOUT(0x2612278D0);
  }
}

uint64_t vg::frame_selection::metrics::sendStartEvent(vg::frame_selection::metrics *this)
{
  isSupported = (vg::shared::metrics *)vg::shared::metrics::isSupported(this);
  if (!isSupported) {
    return 0;
  }
  vg::shared::metrics::createDictionary(isSupported);
  id v2 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = vg::shared::metrics::sendEvent((vg::shared::metrics *)"com.apple.visage.frameSelectionStart", v2, v3);

  return v4;
}

void sub_260CBFAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::frame_selection::metrics::sendCompleteEvent(vg::frame_selection::metrics *this, const Data *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  isSupported = (vg::shared::metrics *)vg::shared::metrics::isSupported(this);
  if (!isSupported) {
    return 0;
  }
  if (!*((void *)this + 1))
  {
    uint64_t v56 = __VGLogSharedInstance();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v56, OS_LOG_TYPE_ERROR, " Invalid metrics data: no processed frame ", buf, 2u);
    }

    return 0;
  }
  uint64_t v4 = vg::shared::metrics::createDictionary(isSupported);
  uint64_t v5 = [NSNumber numberWithBool:*(unsigned __int8 *)this];
  uint64_t v6 = [NSString stringWithUTF8String:"stateFullyComplete"];
  [v4 setObject:v5 forKeyedSubscript:v6];

  uint64_t v7 = [NSNumber numberWithUnsignedLong:*((void *)this + 1)];
  size_t v8 = [NSString stringWithUTF8String:"counterNumProcessedFrames"];
  [v4 setObject:v7 forKeyedSubscript:v8];

  uint64_t v9 = (uint64_t *)((char *)this + 16);
  for (uint64_t i = -1; i != 41; ++i)
  {
    uint64_t v11 = *v9++;
    if (v11 && i < 0x29)
    {
      float v12 = off_265570380[i];
      float v13 = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
      uint64_t v14 = [NSString stringWithUTF8String:v12];
      [v4 setObject:v13 forKeyedSubscript:v14];
    }
  }
  uint64_t v15 = 0;
  *(void *)std::string buf = 0x100000000;
  do
  {
    int v16 = *(_DWORD *)&buf[4 * v15];
    float32x2_t v17 = (void *)((char *)this + 24 * v16 + 352);
    unint64_t v20 = (void *)*v17;
    unint64_t v19 = v17 + 1;
    float v18 = v20;
    if (v20 != v19)
    {
      do
      {
        unint64_t v21 = v18[4];
        if (v16 == 1)
        {
          if (!v21)
          {
            unint64_t v22 = "counterPosePitch0NumCaptures";
            goto LABEL_18;
          }
          if (v21 == 1)
          {
            unint64_t v22 = "counterPosePitch1NumCaptures";
            goto LABEL_18;
          }
        }
        else if (!v16 && v21 < 3)
        {
          unint64_t v22 = off_2655704C8[v21];
LABEL_18:
          uint64_t v23 = [NSNumber numberWithUnsignedLong:v18[5]];
          unint64_t v24 = [NSString stringWithUTF8String:v22];
          [v4 setObject:v23 forKeyedSubscript:v24];
        }
        uint64_t v25 = (void *)v18[1];
        if (v25)
        {
          do
          {
            long long v26 = v25;
            uint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            long long v26 = (void *)v18[2];
            BOOL v27 = *v26 == (void)v18;
            float v18 = v26;
          }
          while (!v27);
        }
        float v18 = v26;
      }
      while (v26 != v19);
    }
    ++v15;
  }
  while (v15 != 2);
  unint64_t v28 = [NSNumber numberWithUnsignedLong:(unint64_t)(float)((float)(unint64_t)(*((void *)this + 51) - *((void *)this + 50)) * 0.001)];
  uint64_t v29 = [NSString stringWithUTF8String:"timingDurationUS"];
  [v4 setObject:v28 forKeyedSubscript:v29];

  unint64_t v30 = [NSNumber numberWithUnsignedLong:(unint64_t)(float)((float)(unint64_t)(*((void *)this + 52) / *((void *)this + 1)) * 0.001)];
  double v31 = [NSString stringWithUTF8String:"timingAverageProcessDurationUS"];
  [v4 setObject:v30 forKeyedSubscript:v31];

  __int16 v32 = [NSNumber numberWithUnsignedLong:(unint64_t)(float)((float)(unint64_t)(*((void *)this + 53) / *((void *)this + 1)) * 0.001)];
  uint64_t v33 = [NSString stringWithUTF8String:"timingAverageFaceTrackingDurationUS"];
  [v4 setObject:v32 forKeyedSubscript:v33];

  __int16 v34 = [NSNumber numberWithUnsignedLong:(unint64_t)(float)((float)(unint64_t)(*((void *)this + 54) / *((void *)this + 1)) * 0.001)];
  uint64_t v35 = [NSString stringWithUTF8String:"timingAverageFaceSelectorDurationUS"];
  [v4 setObject:v34 forKeyedSubscript:v35];

  uint64_t v37 = 0;
  *(void *)std::string buf = 0x100000000;
  do
  {
    int v38 = *(_DWORD *)&buf[4 * v37];
    __int16 v39 = (void *)((char *)this + 24 * v38 + 440);
    uint64_t v42 = (void *)*v39;
    __int16 v41 = v39 + 1;
    unint64_t v40 = v42;
    if (v42 != v41)
    {
      do
      {
        unint64_t v43 = v40[4];
        if (v38 == 1)
        {
          if (!v43)
          {
            float v44 = "timingPosePitch0FirstCaptureTimeUS";
            goto LABEL_36;
          }
          if (v43 == 1)
          {
            float v44 = "timingPosePitch1FirstCaptureTimeUS";
            goto LABEL_36;
          }
        }
        else if (!v38 && v43 < 3)
        {
          float v44 = off_2655704E0[v43];
LABEL_36:
          int v45 = [NSNumber numberWithUnsignedLong:(unint64_t)(float)((float)(unint64_t)(v40[5] - *((void *)this + 50)) * 0.001)];
          uint64_t v46 = [NSString stringWithUTF8String:v44];
          [v4 setObject:v45 forKeyedSubscript:v46];
        }
        __n128 v47 = (void *)v40[1];
        if (v47)
        {
          do
          {
            uint64_t v48 = v47;
            __n128 v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            uint64_t v48 = (void *)v40[2];
            BOOL v27 = *v48 == (void)v40;
            unint64_t v40 = v48;
          }
          while (!v27);
        }
        unint64_t v40 = v48;
      }
      while (v48 != v41);
    }
    ++v37;
  }
  while (v37 != 2);
  unint64_t v49 = *((void *)this + 61);
  unint64_t v50 = *((void *)this + 62);
  BOOL v51 = v50 >= v49;
  unint64_t v52 = v50 - v49;
  if (v52 != 0 && v51)
  {
    uint64_t v53 = [NSNumber numberWithUnsignedLongLong:v52 >> 10];
    uint64_t v54 = [NSString stringWithUTF8String:"memoryUsageKB"];
    [v4 setObject:v53 forKeyedSubscript:v54];
  }
  uint64_t v55 = vg::shared::metrics::sendEvent((vg::shared::metrics *)"com.apple.visage.frameSelectionComplete", (char *)v4, v36);

  return v55;
}

void sub_260CC00B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC054C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC05C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC0720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC08A0(_Unwind_Exception *a1)
{
  __57__VGFaceFittingFrameSelector_getFaceKitTrackedLandmarks___block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGFaceFittingFrameSelector(void)
{
  if (VGLogVGFaceFittingFrameSelector(void)::onceToken != -1) {
    dispatch_once(&VGLogVGFaceFittingFrameSelector(void)::onceToken, &__block_literal_global_358);
  }
  os_log_t v0 = (void *)VGLogVGFaceFittingFrameSelector(void)::handle;

  return v0;
}

void sub_260CC0B28(_Unwind_Exception *a1)
{
}

void sub_260CC0D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  __69__VGFaceFittingFrameSelector_checkMotionBlurFilter_frameTimestampMS___block_invoke();

  _Unwind_Resume(a1);
}

void sub_260CC0F20(_Unwind_Exception *a1)
{
  __54__VGFaceFittingFrameSelector_getValidDataFrameBounds___block_invoke();

  _Unwind_Resume(a1);
}

void sub_260CC13AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_260CC15B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC1B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_260CC2A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  __91__VGFaceFittingFrameSelector_addPoseWithCaptureData_tracking_externalTracking_metricsData___block_invoke();
  _Unwind_Resume(a1);
}

void sub_260CC2F08(_Unwind_Exception *a1)
{
  vg::frame_selection::FrameRejectionState::~FrameRejectionState(v2);
  _Unwind_Resume(a1);
}

void sub_260CC3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_260CC337C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC3448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC36C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CC3890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL31VGLogVGFaceFittingFrameSelectorv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGFaceFittingFrameSelector");
  uint64_t v1 = (void *)VGLogVGFaceFittingFrameSelector(void)::handle;
  VGLogVGFaceFittingFrameSelector(void)::handle = (uint64_t)v0;
}

void sub_260CC39AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

vg::frame_selection::VGBlurDetector *std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100](vg::frame_selection::VGBlurDetector **a1, vg::frame_selection::VGBlurDetector *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGBlurDetector::~VGBlurDetector(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      id v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      double v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              double v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            double v3 = v9[2];
            id v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            double v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          double v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        id v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

id vg::frame_selection::VGEarSelectionState::leftEarYawAngleCaptured(void **this)
{
  return vg::frame_selection::detail::capturedStatesFromCapturedPoses(this[25]);
}

id vg::frame_selection::detail::capturedStatesFromCapturedPoses(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v1 = a1;
  id v2 = [MEMORY[0x263EFF9A0] dictionary];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        int v8 = NSNumber;
        uint64_t v9 = objc_msgSend(v3, "objectForKey:", v7, (void)v13);
        unint64_t v10 = objc_msgSend(v8, "numberWithBool:", objc_msgSend(v9, "valid"));
        [v2 setObject:v10 forKeyedSubscript:v7];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  uint64_t v11 = (void *)[v2 copy];

  return v11;
}

void sub_260CC3E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarSelectionState::rightEarYawAngleCaptured(void **this)
{
  return vg::frame_selection::detail::capturedStatesFromCapturedPoses(this[26]);
}

void vg::frame_selection::VGEarFrameSelectorImpl::init(vg::frame_selection::VGEarFrameSelectorImpl *this, const vg::frame_selection::VGEarCaptureOptions *a2)
{
  if (*((char *)a2 + 111) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 88);
  }
  vg::ear_detection::EarPoseDetector::create();
}

void sub_260CC41E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::enrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  id v1 = vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors(this);
  id v2 = vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);

  return v2;
}

void sub_260CC4278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v2 = a2;
  id v3 = [MEMORY[0x263EFF980] array];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v4);
        }
        int v8 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "yawResults", (void)v12);
        uint64_t v9 = [v8 allValues];
        [v3 addObjectsFromArray:v9];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  unint64_t v10 = (void *)[v3 copy];

  return v10;
}

void sub_260CC43EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 2);
  v4[0] = *((void *)this + 1);
  v4[1] = v1;
  id v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:2];

  return v2;
}

id vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  v4[1] = *MEMORY[0x263EF8340];
  v4[0] = *((void *)this + 1);
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:1];
  id v2 = vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);

  return v2;
}

void sub_260CC4554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  v4[1] = *MEMORY[0x263EF8340];
  v4[0] = *((void *)this + 2);
  uint64_t v1 = [MEMORY[0x263EFF8C0] arrayWithObjects:v4 count:1];
  id v2 = vg::frame_selection::VGEarFrameSelectorImpl::posesFromSelectors((uint64_t)v1, v1);

  return v2;
}

void sub_260CC4608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelectorImpl::currentState(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = vg::frame_selection::VGEarFrameSelectorImpl::allPoseSelectors((vg::frame_selection::VGEarFrameSelectorImpl *)this);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v5)
  {
    unsigned int v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v4);
        }
        unint64_t v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        v7 += objc_msgSend(v10, "remainingPosesCount", (void)v12);
        v6 += [v10 requiredPosesCount];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v5);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }

  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0u;
  *(unsigned char *)(a2 + 108) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(void *)(a2 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  *(void *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 1) = v6 == 0;
  if (v6)
  {
    *(unsigned char *)a2 = v7 == 0;
    *(float *)(a2 + 4) = (float)(v6 - v7) / (float)v6;
    *(void *)(a2 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = [this[1] results];
    *(void *)(a2 + 208) = [this[2] results];
  }
  uint64_t v11 = __VGLogSharedInstance();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v17 = v7;
    __int16 v18 = 1024;
    unsigned int v19 = v6;
    _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_DEBUG, " %u/%u ", buf, 0xEu);
  }
}

void sub_260CC482C(_Unwind_Exception *a1)
{
  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState(v1);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelectorImpl::addPoseWithCaptureData(vg::frame_selection::VGEarFrameSelectorImpl *this@<X0>, VGCaptureData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  vg::frame_selection::VGEarFrameSelectorImpl::currentState((id *)this, (uint64_t)&v135);
  int v148 = 1;
  if (BYTE1(v135))
  {
    unsigned int v6 = 0;
    *(void *)a3 = v135;
    uint64_t v7 = v147;
    *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
    *(void *)(a3 + 184) = v7;
    long long v8 = v141;
    *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
    *(_OWORD *)(a3 + 96) = v8;
    long long v9 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v9;
    long long v10 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v10;
    long long v11 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    uint64_t v145 = 0;
    long long v146 = 0uLL;
    uint64_t v147 = 0;
    *(_DWORD *)(a3 + 192) = 1;
    long long v12 = v149;
    long long v149 = 0uLL;
    *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v12;
    goto LABEL_79;
  }
  if (v5) {
    [(VGCaptureData *)v5 timestamp];
  }
  else {
    memset(&time, 0, sizeof(time));
  }
  double Seconds = CMTimeGetSeconds(&time);
  CVPixelBufferGetIOSurface([(VGCaptureData *)v5 yuvRectified]);
  long long v14 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    unint64_t v20 = __VGLogSharedInstance();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_ERROR, " color image must be IOSurface backend. ", buf, 2u);
    }

    *(void *)a3 = v135;
    uint64_t v21 = v147;
    *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
    long long v22 = v141;
    *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
    *(_OWORD *)(a3 + 96) = v22;
    long long v23 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v23;
    long long v24 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v24;
    long long v25 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v25;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(void *)(a3 + 184) = v21;
    uint64_t v145 = 0;
    long long v146 = 0uLL;
    uint64_t v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    long long v26 = v149;
    long long v149 = 0uLL;
    *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v26;
    goto LABEL_78;
  }
  CVPixelBufferGetIOSurface([(VGCaptureData *)v5 depth]);
  long long v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    BOOL v27 = __VGLogSharedInstance();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v27, OS_LOG_TYPE_ERROR, " depth image must be IOSurface backend. ", buf, 2u);
    }

    *(void *)a3 = v135;
    uint64_t v28 = v147;
    *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
    long long v29 = v141;
    *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
    *(_OWORD *)(a3 + 96) = v29;
    long long v30 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v30;
    long long v31 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v31;
    long long v32 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v32;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(void *)(a3 + 184) = v28;
    uint64_t v145 = 0;
    long long v146 = 0uLL;
    uint64_t v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    long long v33 = v149;
    long long v149 = 0uLL;
    *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v33;
    goto LABEL_77;
  }
  v98 = v14;
  long long v16 = *(vg::ear_detection::EarPoseDetectorImpl ***)this;
  [(VGCaptureData *)v5 depthIntrinsics];
  vg::ear_detection::EarPoseDetector::detectPose(v16, v98, v15, v151, (uint64_t)buf);
  int v148 = v134;
  if (!v133 || v134)
  {
    __int16 v34 = (vg::frame_selection::VGBlurDetectorImpl **)*((void *)this + 25);
    long long v14 = v98;
    if (v34) {
      vg::frame_selection::VGBlurDetector::resetPreviousState(v34);
    }
    uint64_t v35 = __VGLogSharedInstance();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v107 = 134217984;
      *(void *)&v107[4] = (unint64_t)(Seconds * 1000.0);
      _os_log_impl(&dword_260C8D000, v35, OS_LOG_TYPE_DEBUG, " Frame#%zu rejected because No Ear detected ", v107, 0xCu);
    }

    *(void *)a3 = v135;
    uint64_t v36 = v147;
    *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
    long long v37 = v141;
    *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
    *(_OWORD *)(a3 + 96) = v37;
    long long v38 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v38;
    long long v39 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v39;
    long long v40 = v139;
    *(_OWORD *)(a3 + 48) = v138;
    *(_OWORD *)(a3 + 64) = v40;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(void *)(a3 + 184) = v36;
    uint64_t v145 = 0;
    long long v146 = 0uLL;
    uint64_t v147 = 0;
    *(_DWORD *)(a3 + 192) = v148;
    long long v41 = v149;
    long long v149 = 0uLL;
    *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v41;
    goto LABEL_76;
  }
  long long v111 = v125;
  long long v112 = v126;
  long long v113 = v127;
  long long v114 = v128;
  *(_OWORD *)v107 = *(_OWORD *)buf;
  long long v108 = v122;
  long long v109 = v123;
  long long v110 = v124;
  v116 = 0;
  uint64_t v117 = 0;
  v115 = 0;
  long long v14 = v98;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v115, v129, v130, (v130 - (uint64_t)v129) >> 2);
  v118 = 0;
  v119 = 0;
  uint64_t v120 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v118, v131, v132, (v132 - (uint64_t)v131) >> 2);
  long long v140 = v111;
  long long v141 = v112;
  long long v142 = v113;
  long long v143 = v114;
  long long v136 = *(_OWORD *)v107;
  long long v137 = v108;
  long long v138 = v109;
  long long v139 = v110;
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v144, (char *)v115, (uint64_t)v116, (v116 - (unsigned char *)v115) >> 2);
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v146, (char *)v118, (uint64_t)v119, (v119 - (unsigned char *)v118) >> 2);
  if (*((void *)this + 25))
  {
    v97 = v15;
    unint64_t v17 = v116 - (unsigned char *)v115;
    unint64_t v18 = (unint64_t)((v116 - (unsigned char *)v115) >> 2) >> 1;
    v99 = 0;
    v100 = 0;
    char v101 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&v99, v18);
    unint64_t v96 = (unint64_t)(Seconds * 1000.0);
    if (v17 > 7)
    {
      uint64_t v42 = 0;
      if (v18 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v18;
      }
      unsigned int v19 = v100;
      do
      {
        uint64_t v44 = *((void *)v115 + v42);
        if (v19 >= v101)
        {
          uint64_t v45 = (v19 - (unsigned char *)v99) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v46 = (v101 - (unsigned char *)v99) >> 2;
          if (v46 <= v45 + 1) {
            unint64_t v46 = v45 + 1;
          }
          if ((unint64_t)(v101 - (unsigned char *)v99) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47) {
            uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v101, v47);
          }
          else {
            uint64_t v48 = 0;
          }
          unint64_t v49 = &v48[8 * v45];
          *(void *)unint64_t v49 = v44;
          unsigned int v19 = v49 + 8;
          BOOL v51 = (char *)v99;
          unint64_t v50 = v100;
          if (v100 != v99)
          {
            do
            {
              uint64_t v52 = *((void *)v50 - 1);
              v50 -= 8;
              *((void *)v49 - 1) = v52;
              v49 -= 8;
            }
            while (v50 != v51);
            unint64_t v50 = (char *)v99;
          }
          v99 = v49;
          v100 = v19;
          char v101 = &v48[8 * v47];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *(void *)unsigned int v19 = v44;
          v19 += 8;
        }
        v100 = v19;
        ++v42;
      }
      while (v42 != v43);
    }
    else
    {
      unsigned int v19 = v100;
    }
    *(void *)v103 = v96;
    memset(&v103[8], 0, 24);
    long long v14 = v98;
    long long v15 = v97;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v103[8], v99, (uint64_t)v19, (v19 - (unsigned char *)v99) >> 3);
    char v53 = vg::frame_selection::VGBlurDetector::detectMotionBlur(*((uint64_t **)this + 25), (uint64_t *)v103);
    if (!v54 || v53)
    {
      long long v71 = __VGLogSharedInstance();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v105 = 134217984;
        unint64_t v106 = v96;
        _os_log_impl(&dword_260C8D000, v71, OS_LOG_TYPE_DEBUG, " Frame#%zu rejected because of motion blur ", v105, 0xCu);
      }

      int v148 = 5;
      *(void *)a3 = v135;
      long long v72 = v141;
      *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
      *(_OWORD *)(a3 + 96) = v72;
      long long v73 = v143;
      *(_OWORD *)(a3 + 112) = v142;
      *(_OWORD *)(a3 + 128) = v73;
      long long v74 = v137;
      *(_OWORD *)(a3 + 16) = v136;
      *(_OWORD *)(a3 + 32) = v74;
      long long v75 = v139;
      *(_OWORD *)(a3 + 48) = v138;
      *(_OWORD *)(a3 + 64) = v75;
      *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
      uint64_t v76 = v147;
      *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
      v144[1] = 0;
      uint64_t v145 = 0;
      v144[0] = 0;
      *(_OWORD *)(a3 + 168) = v146;
      *(void *)(a3 + 184) = v76;
      uint64_t v147 = 0;
      long long v146 = 0uLL;
      *(_DWORD *)(a3 + 192) = 5;
      long long v77 = v149;
      long long v149 = 0uLL;
      *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v77;
      if (*(void *)&v103[8])
      {
        *(void *)&v103[16] = *(void *)&v103[8];
        operator delete(*(void **)&v103[8]);
      }
      if (v99)
      {
        v100 = (char *)v99;
        operator delete(v99);
      }
      goto LABEL_72;
    }
    if (*(void *)&v103[8])
    {
      *(void *)&v103[16] = *(void *)&v103[8];
      operator delete(*(void **)&v103[8]);
    }
    if (v99)
    {
      v100 = (char *)v99;
      operator delete(v99);
    }
  }
  unint64_t v55 = *((void *)this + 4) + 1;
  *((void *)this + 4) = v55;
  if (v55 > 1)
  {
    id v62 = objc_alloc_init(NSDictionary);
    if (*(_DWORD *)v107 == 1)
    {
      unint64_t v78 = *((void *)this + 5) + 1;
      *((void *)this + 5) = v78;
      if (v78 >= 2)
      {
        if (([*((id *)this + 2) completed] & 1) == 0)
        {
          char v87 = (void *)*((void *)this + 2);
          *(void *)v103 = 0;
          *(void *)&v103[8] = 0;
          __asm { FMOV            V4.2D, #1.0 }
          *(_OWORD *)&v103[16] = _Q4;
          char v104 = 1;
          float64x2_t v70 = objc_msgSend(v87, "processCaptureData:trackingData:framePose:validDataFrameBounds:", v5, v62, v103, *(double *)&v108, *(double *)&v109, *(double *)&v110, *(double *)&v111);
          goto LABEL_85;
        }
LABEL_67:
        uint64_t v79 = 0;
LABEL_68:
        vg::frame_selection::VGEarFrameSelectorImpl::currentState((id *)this, a3);
        *(_DWORD *)(a3 + 192) = v148;
        vg::ear_detection::EarPose::operator=(a3 + 16, &v136);
        if (*(unsigned char *)a3)
        {
          *((unsigned char *)this + 24) = 1;
          if (*((unsigned char *)this + 112)) {
            vg::frame_selection::VGEarFrameSelectorImpl::writeToPath(this, (uint64_t *)this + 15);
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      if (*(_DWORD *)v107) {
        goto LABEL_67;
      }
      unint64_t v63 = *((void *)this + 6) + 1;
      *((void *)this + 6) = v63;
      if (v63 >= 2)
      {
        if (([*((id *)this + 1) completed] & 1) == 0)
        {
          uint64_t v64 = (void *)*((void *)this + 1);
          *(void *)v103 = 0;
          *(void *)&v103[8] = 0;
          __asm { FMOV            V4.2D, #1.0 }
          *(_OWORD *)&v103[16] = _Q4;
          char v104 = 1;
          float64x2_t v70 = objc_msgSend(v64, "processCaptureData:trackingData:framePose:validDataFrameBounds:", v5, v62, v103, *(double *)&v108, *(double *)&v109, *(double *)&v110, *(double *)&v111);
LABEL_85:
          uint64_t v79 = v70;
          if (v70)
          {
            [v70 rejectionState];
            BOOL v89 = *(_DWORD *)v103 == 0;

            if (v89)
            {
              float32x4_t v90 = __VGLogSharedInstance();
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
              {
                v91 = @"RIGHT";
                if (!*(_DWORD *)v107) {
                  v91 = @"LEFT";
                }
                *(_DWORD *)v103 = 138412802;
                *(void *)&v103[4] = v91;
                *(_WORD *)&v103[12] = 2048;
                *(double *)&v103[14] = *((float *)&v113 + 1);
                *(_WORD *)&v103[22] = 2048;
                *(double *)&v103[24] = *((float *)&v113 + 2);
                _os_log_impl(&dword_260C8D000, v90, OS_LOG_TYPE_DEBUG, " Captured Ear side %@, yaw %f , pitch %f ", v103, 0x20u);
              }

              v152.origin.double x = *(float *)&v114;
              v152.origin.double y = *((float *)&v114 + 1);
              v152.size.width = (float)(*((float *)&v114 + 2) - *(float *)&v114);
              v152.size.height = (float)(*((float *)&v114 + 3) - *((float *)&v114 + 1));
              CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v152);
              float32x4_t v93 = NSNumber;
              if (*(_DWORD *)v107) {
                float32x4_t v94 = (void *)*((void *)this + 24);
              }
              else {
                float32x4_t v94 = (void *)*((void *)this + 23);
              }
              [v79 angleInDegrees];
              float32x4_t v95 = objc_msgSend(v93, "numberWithFloat:");
              [v94 setObject:DictionaryRepresentation forKeyedSubscript:v95];
            }
          }
          goto LABEL_68;
        }
        goto LABEL_67;
      }
    }
    uint64_t v79 = 0;
    *(void *)a3 = v135;
    long long v80 = v141;
    *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
    *(_OWORD *)(a3 + 96) = v80;
    long long v81 = v143;
    *(_OWORD *)(a3 + 112) = v142;
    *(_OWORD *)(a3 + 128) = v81;
    long long v82 = v137;
    *(_OWORD *)(a3 + 16) = v136;
    *(_OWORD *)(a3 + 32) = v82;
    long long v83 = v138;
    long long v84 = v139;
    uint64_t v85 = v147;
    *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
    *(_OWORD *)(a3 + 48) = v83;
    *(_OWORD *)(a3 + 64) = v84;
    *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
    v144[1] = 0;
    uint64_t v145 = 0;
    v144[0] = 0;
    *(_OWORD *)(a3 + 168) = v146;
    *(void *)(a3 + 184) = v85;
    uint64_t v147 = 0;
    long long v146 = 0uLL;
    *(_DWORD *)(a3 + 192) = v148;
    long long v86 = v149;
    long long v149 = 0uLL;
    *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v86;
LABEL_71:

    goto LABEL_72;
  }
  *(void *)a3 = v135;
  long long v56 = v141;
  *(_OWORD *)(a3 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v140;
  *(_OWORD *)(a3 + 96) = v56;
  long long v57 = v143;
  *(_OWORD *)(a3 + 112) = v142;
  *(_OWORD *)(a3 + 128) = v57;
  long long v58 = v137;
  *(_OWORD *)(a3 + 16) = v136;
  *(_OWORD *)(a3 + 32) = v58;
  long long v59 = v139;
  *(_OWORD *)(a3 + 48) = v138;
  *(_OWORD *)(a3 + 64) = v59;
  *(_OWORD *)(a3 + 144) = *(_OWORD *)v144;
  uint64_t v60 = v147;
  *(void *)(a3 + 16std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v145;
  v144[1] = 0;
  uint64_t v145 = 0;
  v144[0] = 0;
  *(_OWORD *)(a3 + 168) = v146;
  *(void *)(a3 + 184) = v60;
  uint64_t v147 = 0;
  long long v146 = 0uLL;
  *(_DWORD *)(a3 + 192) = v148;
  long long v61 = v149;
  long long v149 = 0uLL;
  *(_OWORD *)(a3 + 20std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v61;
LABEL_72:
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
LABEL_76:
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
LABEL_77:

LABEL_78:
  unsigned int v6 = (void *)*((void *)&v149 + 1);
LABEL_79:

  if ((void)v146)
  {
    *((void *)&v146 + 1) = v146;
    operator delete((void *)v146);
  }
  if (v144[0])
  {
    v144[1] = v144[0];
    operator delete(v144[0]);
  }
}

void sub_260CC53C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  vg::ear_detection::EarPose::~EarPose((vg::ear_detection::EarPose *)&a29);
  std::__optional_destruct_base<vg::ear_detection::EarPose,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a51);

  vg::frame_selection::VGEarSelectionState::~VGEarSelectionState((id *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t vg::ear_detection::EarPose::operator=(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  long long v6 = a2[4];
  long long v7 = a2[5];
  long long v8 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 8std::unique_ptr<vg::ear_detection::EarSideSmoothPredictorImpl>::reset[abi:ne180100]((void **)this, 0) = v7;
  if ((long long *)a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 128), *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 152), *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  }
  return a1;
}

void vg::frame_selection::VGEarFrameSelectorImpl::writeToPath(vg::frame_selection::VGEarFrameSelectorImpl *a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (uint64_t *)*a2;
  }
  long long v9 = [NSString stringWithUTF8String:v3];
  long long v4 = [MEMORY[0x263F08850] defaultManager];
  long long v5 = [(objc_object *)v9 stringByAppendingPathComponent:@"capturedata"];
  [v4 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:0];

  long long v6 = objc_opt_new();
  long long v7 = vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(a1);
  [v6 setLeftEarEnrolledPoses:v7];

  long long v8 = vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(a1);
  [v6 setRightEarEnrolledPoses:v8];

  [v6 setLeftEarEnrolledYawToBoundingBox:*((void *)a1 + 23)];
  [v6 setRightEarEnrolledYawToBoundingBox:*((void *)a1 + 24)];
  vg::common::dumpDebugObject((vg::common *)v6, v9, (NSString *)1);
}

void sub_260CC56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledYawToBoundingBox(id *this)
{
  return this[23];
}

id vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledYawToBoundingBox(id *this)
{
  return this[24];
}

void vg::frame_selection::VGEarFrameSelector::create(vg::frame_selection::VGEarFrameSelector *this)
{
  long long v2 = xmmword_260D21650;
  int v3 = 1061997773;
  long long v4 = xmmword_260D21660;
  long long v5 = xmmword_260D21670;
  char v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  char v9 = 1;
  int v10 = 1083808154;
  long long v11 = &unk_270CFD948;
  vg::frame_selection::VGEarFrameSelector::create((vg::frame_selection::VGEarFrameSelector *)&v2, v1);
}

void sub_260CC5804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void vg::frame_selection::VGEarFrameSelector::create(vg::frame_selection::VGEarFrameSelector *this, const vg::frame_selection::VGEarCaptureOptions *a2)
{
}

void sub_260CC58B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<vg::frame_selection::VGEarFrameSelector>::reset[abi:ne180100]((vg::frame_selection::VGEarFrameSelectorImpl ***)va, 0);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelector::~VGEarFrameSelector(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
}

{
  std::unique_ptr<vg::frame_selection::VGEarFrameSelectorImpl>::reset[abi:ne180100](this, 0);
}

void vg::frame_selection::VGEarFrameSelector::VGEarFrameSelector(vg::frame_selection::VGEarFrameSelector *this)
{
}

void sub_260CC59B4(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x10B2C40C4E6D2A4);
  _Unwind_Resume(a1);
}

void vg::frame_selection::VGEarFrameSelector::addPoseWithCaptureData(vg::frame_selection::VGEarFrameSelectorImpl **this@<X0>, VGCaptureData *a2@<X1>, uint64_t a3@<X8>)
{
}

id vg::frame_selection::VGEarFrameSelector::enrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::enrolledPoses(*this);
}

id vg::frame_selection::VGEarFrameSelector::leftEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::leftEarEnrolledPoses(*this);
}

id vg::frame_selection::VGEarFrameSelector::rightEarEnrolledPoses(vg::frame_selection::VGEarFrameSelectorImpl **this)
{
  return vg::frame_selection::VGEarFrameSelectorImpl::rightEarEnrolledPoses(*this);
}

void vg::frame_selection::VGEarFrameSelector::currentState(id **this@<X0>, uint64_t a2@<X8>)
{
}

void vg::frame_selection::VGEarFrameSelector::writeToPath(vg::frame_selection::VGEarFrameSelectorImpl **a1, uint64_t *a2)
{
}

id vg::frame_selection::VGEarFrameSelector::leftEarEnrolledYawToBoundingBox(vg::frame_selection::VGEarFrameSelector *this)
{
  return *(id *)(*(void *)this + 184);
}

id vg::frame_selection::VGEarFrameSelector::rightEarEnrolledYawToBoundingBox(vg::frame_selection::VGEarFrameSelector *this)
{
  return *(id *)(*(void *)this + 192);
}

vg::frame_selection::VGEarFrameSelectorImpl *vg::frame_selection::VGEarFrameSelectorImpl::VGEarFrameSelectorImpl(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_260D21650;
  *((_DWORD *)this + 18) = 1061997773;
  *((_OWORD *)this + 5) = xmmword_260D21660;
  *((_OWORD *)this + 6) = xmmword_260D21670;
  *((unsigned char *)this + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 15, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 18, "");
  *((unsigned char *)this + 168) = 1;
  *((_DWORD *)this + 43) = 1083808154;
  *((void *)this + 22) = &unk_270CFD948;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  return this;
}

void sub_260CC5ACC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v2);
  }

  std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100]((vg::ear_detection::EarBoundingBoxModel ****)v1, 0);
  _Unwind_Resume(a1);
}

vg::ear_detection::EarBoundingBoxModel ***std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100](vg::ear_detection::EarBoundingBoxModel ****a1, vg::ear_detection::EarBoundingBoxModel ***a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::ear_detection::EarPoseDetector::~EarPoseDetector(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::frame_selection::VGEarFrameSelectorImpl *std::unique_ptr<vg::frame_selection::VGEarFrameSelectorImpl>::reset[abi:ne180100](vg::frame_selection::VGEarFrameSelectorImpl **a1, vg::frame_selection::VGEarFrameSelectorImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::frame_selection::VGEarFrameSelectorImpl::~VGEarFrameSelectorImpl(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::frame_selection::VGEarFrameSelectorImpl::~VGEarFrameSelectorImpl(vg::frame_selection::VGEarFrameSelectorImpl *this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }

  std::unique_ptr<vg::ear_detection::EarPoseDetector>::reset[abi:ne180100]((vg::ear_detection::EarBoundingBoxModel ****)this, 0);
}

void vg::hrtf::unwrapPhaseAngles(float **a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = a1[1];
  uint64_t v4 = (char *)v3 - (char *)*a1;
  if (v3 == *a1) {
    vg::hrtf::unwrapPhaseAngles();
  }
  unint64_t v6 = v4 >> 2;
  int v47 = 0;
  std::vector<float>::vector(__p, v4 >> 2, &v47);
  long long v7 = *a1;
  long long v8 = a1[1];
  if (*a1 != v8)
  {
    char v9 = (char *)__p[0];
    float v11 = *v7;
    int v10 = v7 + 1;
    float v12 = v11;
    *(float *)__p[0] = v11;
    if (v10 != v8)
    {
      long long v13 = (float *)(v9 + 4);
      do
      {
        float v14 = *v10++;
        *v13++ = v14 - v12;
        float v12 = v14;
      }
      while (v10 != v8);
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<float>::reserve((void **)a2, v4 >> 2);
  long long v15 = *a1;
  unint64_t v17 = (void *)(a2 + 16);
  unint64_t v16 = *(void *)(a2 + 16);
  unint64_t v18 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v18 >= v16)
  {
    unint64_t v20 = *(_DWORD **)a2;
    uint64_t v21 = ((uint64_t)v18 - *(void *)a2) >> 2;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v16 - (void)v20;
    if (v23 >> 1 > v22) {
      unint64_t v22 = v23 >> 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v24);
      unint64_t v20 = *(_DWORD **)a2;
      unint64_t v18 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      long long v25 = 0;
    }
    long long v26 = &v25[4 * v21];
    BOOL v27 = &v25[4 * v24];
    *(float *)long long v26 = *v15;
    unsigned int v19 = (float *)(v26 + 4);
    while (v18 != v20)
    {
      int v28 = *--v18;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v19;
    *(void *)(a2 + 16) = v27;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    _DWORD *v18 = *(_DWORD *)v15;
    unsigned int v19 = (float *)(v18 + 1);
  }
  *(void *)(a2 + 8) = v19;
  if ((unint64_t)v4 >= 5)
  {
    if (v6 <= 2) {
      unint64_t v6 = 2;
    }
    uint64_t v29 = 1;
    float v30 = 0.0;
    do
    {
      float v31 = *((float *)__p[0] + v29);
      float v32 = (float)(v31 + 3.1416) - (float)(floorf((float)(v31 + 3.1416) / 6.2832) * 6.2832);
      BOOL v33 = v31 > 0.0 && v32 == 0.0;
      float v34 = v32 + -3.1416;
      if (v33) {
        float v34 = 3.1416;
      }
      float v35 = fabsf(v31);
      float v36 = v34 - v31;
      if (v35 < 3.1416) {
        float v36 = 0.0;
      }
      float v30 = v30 + v36;
      float v37 = (*a1)[v29] + v30;
      if ((unint64_t)v19 >= *v17)
      {
        long long v39 = *(float **)a2;
        uint64_t v40 = ((uint64_t)v19 - *(void *)a2) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = *v17 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v43);
          long long v39 = *(float **)a2;
          unsigned int v19 = *(float **)(a2 + 8);
        }
        else
        {
          uint64_t v44 = 0;
        }
        uint64_t v45 = (float *)&v44[4 * v40];
        float *v45 = v37;
        long long v38 = v45 + 1;
        while (v19 != v39)
        {
          int v46 = *((_DWORD *)v19-- - 1);
          *((_DWORD *)v45-- - 1) = v46;
        }
        *(void *)a2 = v45;
        *(void *)(a2 + 8) = v38;
        *(void *)(a2 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *unsigned int v19 = v37;
        long long v38 = v19 + 1;
      }
      *(void *)(a2 + 8) = v38;
      ++v29;
      unsigned int v19 = v38;
    }
    while (v29 != v6);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_260CC8754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::tukeyWindow(unint64_t this@<X0>, int32x2_t a2@<D0>, void *a3@<X8>)
{
  if (this <= 1) {
    vg::hrtf::tukeyWindow();
  }
  float v4 = *(float *)a2.i32;
  if (*(float *)a2.i32 <= 0.0) {
    vg::hrtf::tukeyWindow();
  }
  if (*(float *)a2.i32 >= 1.0) {
    vg::hrtf::tukeyWindow();
  }
  *(float *)a2.i32 = (float)(this - 1) * *(float *)a2.i32;
  unint64_t v5 = vcvtms_u32_f32(*(float *)a2.i32 * 0.5);
  unint64_t v6 = (char *)(this - v5);
  if (this <= v5) {
    vg::hrtf::tukeyWindow();
  }
  int v42 = 1065353216;
  *(float *)a2.i32 = 2.0 / *(float *)a2.i32;
  int32x2_t v32 = a2;
  unint64_t v7 = 0;
  uint64_t v8 = *std::vector<float>::vector(a3, this, &v42);
  uint64x2_t v34 = (uint64x2_t)vdupq_n_s64(v5);
  float32x2_t v9 = (float32x2_t)vdup_lane_s32(v32, 0);
  uint64x2_t v10 = (uint64x2_t)xmmword_260D21D40;
  __asm { FMOV            V11.2S, #-1.0 }
  float32x2_t v16 = (float32x2_t)vdup_n_s32(0x40490FDBu);
  int64x2_t v33 = vdupq_n_s64(2uLL);
  do
  {
    int32x2_t v38 = vmovn_s64((int64x2_t)vcgeq_u64(v34, v10));
    int64x2_t v40 = (int64x2_t)v10;
    v17.f32[0] = (float)v7;
    unint64_t v18 = v7 + 1;
    v17.f32[1] = (float)(v7 + 1);
    float32x2_t v19 = vmul_f32(vmla_f32(_D11, v9, v17), v16);
    float v35 = v19.f32[0];
    float v36 = cosf(v19.f32[1]);
    float v20 = cosf(v35);
    if (v38.i8[0]) {
      *(float *)(v8 + 4 * v7) = (float)(v20 + 1.0) * 0.5;
    }
    if (v38.i8[4]) {
      *(float *)(v8 + 4 * v7 + 4) = (float)(v36 + 1.0) * 0.5;
    }
    v21.i32[1] = v33.i32[1];
    uint64x2_t v10 = (uint64x2_t)vaddq_s64(v40, v33);
    v7 += 2;
  }
  while (v18 - 1 != (v5 & 0xFFFFFFFFFFFFFFFELL));
  if (__CFADD__(~v5, this))
  {
    unint64_t v22 = 0;
    *(float *)v21.i32 = (float)(-2.0 / v4) + 1.0;
    uint64_t v23 = v8 - 4 * v5;
    float32x2_t v24 = (float32x2_t)vdup_lane_s32(v32, 0);
    float32x2_t v25 = (float32x2_t)vdup_lane_s32(v21, 0);
    unint64_t v26 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    BOOL v27 = (float *)(v23 + 4 * this);
    float32x2_t v28 = (float32x2_t)vdup_n_s32(0x40490FDBu);
    do
    {
      *(int32x2_t *)v41.i8 = vmovn_s64((int64x2_t)vcgeq_u64(v34, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v22), (int8x16_t)xmmword_260D21D40)));
      v29.f32[0] = (float)(unint64_t)&v6[v22 - 1];
      v29.f32[1] = (float)(unint64_t)&v6[v22];
      float32x2_t v30 = vmul_f32(vmla_f32(v25, v24, v29), v28);
      float v37 = v30.f32[0];
      float v39 = cosf(v30.f32[1]);
      float v31 = cosf(v37);
      if (v41.i8[0]) {
        *(v27 - 1) = (float)(v31 + 1.0) * 0.5;
      }
      if (v41.i8[4]) {
        float *v27 = (float)(v39 + 1.0) * 0.5;
      }
      v22 += 2;
      v27 += 2;
    }
    while (v26 != v22);
  }
}

void vg::hrtf::getPhaseShiftParameters(float **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  __float2 v8 = __sincosf_stret(6283.2 / a4);
  v119 = 0;
  uint64_t v120 = 0;
  unint64_t v121 = 0;
  v116 = 0;
  uint64_t v117 = 0;
  unint64_t v118 = 0;
  std::vector<float>::reserve((void **)&v119, a2);
  std::vector<float>::reserve((void **)&v116, a2);
  if (a2)
  {
    unint64_t v9 = 0;
    float v10 = a4 / (float)a2;
    float v11 = 6.2832 / a4;
    do
    {
      float v12 = v10 * (float)v9;
      long long v13 = v120;
      if ((unint64_t)v120 >= v121)
      {
        long long v15 = v119;
        uint64_t v16 = v120 - v119;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v121 - (void)v119;
        if ((uint64_t)(v121 - (void)v119) >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          float v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v121, v19);
          long long v15 = v119;
          long long v13 = v120;
        }
        else
        {
          float v20 = 0;
        }
        int32x2_t v21 = (float *)&v20[4 * v16];
        *int32x2_t v21 = v12;
        float v14 = v21 + 1;
        while (v13 != v15)
        {
          int v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        v119 = v21;
        uint64_t v120 = v14;
        unint64_t v121 = (unint64_t)&v20[4 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v120 = v12;
        float v14 = v13 + 1;
      }
      uint64_t v120 = v14;
      float v23 = v11 * v119[v9];
      float32x2_t v24 = v117;
      if ((unint64_t)v117 >= v118)
      {
        unint64_t v26 = v116;
        uint64_t v27 = v117 - v116;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v118 - (void)v116;
        if ((uint64_t)(v118 - (void)v116) >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          float v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v118, v30);
          unint64_t v26 = v116;
          float32x2_t v24 = v117;
        }
        else
        {
          float v31 = 0;
        }
        int32x2_t v32 = (float *)&v31[4 * v27];
        float *v32 = v23;
        float32x2_t v25 = v32 + 1;
        while (v24 != v26)
        {
          int v33 = *((_DWORD *)v24-- - 1);
          *((_DWORD *)v32-- - 1) = v33;
        }
        v116 = v32;
        uint64_t v117 = v25;
        unint64_t v118 = (unint64_t)&v31[4 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v117 = v23;
        float32x2_t v25 = v24 + 1;
      }
      uint64_t v117 = v25;
      ++v9;
    }
    while (v9 != a2);
  }
  long long v113 = 0;
  long long v114 = 0;
  unint64_t v115 = 0;
  long long v110 = 0;
  long long v111 = 0;
  unint64_t v112 = 0;
  v107 = 0;
  long long v108 = 0;
  unint64_t v109 = 0;
  unint64_t v34 = ((char *)a1[1] - (char *)*a1) >> 3;
  std::vector<float>::reserve((void **)&v113, v34);
  std::vector<std::array<float,3ul>>::reserve((char **)&v110, v34);
  std::vector<std::array<float,3ul>>::reserve((char **)&v107, v34);
  float v35 = *a1;
  float v36 = a1[1];
  if (*a1 != v36)
  {
    float v37 = v8.__cosval * -2.0;
    float v38 = v8.__sinval * 0.5;
    do
    {
      float v39 = 90.0 - fabsf(fmodf(v35[1], 180.0) + -90.0);
      float v40 = *v35 * 3.14159265 / 180.0;
      float v41 = cosf(v40);
      if (v41 < 0.0) {
        float v41 = 0.0;
      }
      float v42 = v39 + -36.0;
      float v43 = sqrtf(v41);
      if ((float)(v39 + -36.0) <= 0.0)
      {
        float v44 = v39 * 0.0;
        float v45 = (float)(v39 * 0.041667) * v43;
      }
      else
      {
        float v44 = (float)(v42 * 0.029089) + 0.0;
        float v45 = (float)((float)(v42 * -0.027778) * v43) + 1.5;
      }
      float v46 = v43 * v44;
      int v47 = v114;
      if ((unint64_t)v114 >= v115)
      {
        unint64_t v49 = v113;
        uint64_t v50 = v114 - v113;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = v115 - (void)v113;
        if ((uint64_t)(v115 - (void)v113) >> 1 > v51) {
          unint64_t v51 = v52 >> 1;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          char v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v115, v53);
          unint64_t v49 = v113;
          int v47 = v114;
        }
        else
        {
          char v54 = 0;
        }
        unint64_t v55 = (float *)&v54[4 * v50];
        float *v55 = v46;
        uint64_t v48 = v55 + 1;
        while (v47 != v49)
        {
          int v56 = *((_DWORD *)v47-- - 1);
          *((_DWORD *)v55-- - 1) = v56;
        }
        long long v113 = v55;
        long long v114 = v48;
        unint64_t v115 = (unint64_t)&v54[4 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *long long v114 = v46;
        uint64_t v48 = v47 + 1;
      }
      long long v114 = v48;
      float v57 = v45 / 20.0;
      float v58 = sqrtf(__exp10f(v57));
      float v59 = (float)(v38 * v58) + 1.0;
      float v60 = (float)((float)-(float)(v8.__sinval * 0.5) * v58) + 1.0;
      long long v61 = v108;
      if ((unint64_t)v108 >= v109)
      {
        unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (unsigned char *)v107) >> 2);
        unint64_t v64 = v63 + 1;
        if (v63 + 1 > 0x1555555555555555) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v109 - (void)v107) >> 2) > v64) {
          unint64_t v64 = 0x5555555555555556 * ((uint64_t)(v109 - (void)v107) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - (void)v107) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v65 = 0x1555555555555555;
        }
        else {
          unint64_t v65 = v64;
        }
        if (v65) {
          int v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v109, v65);
        }
        else {
          int v66 = 0;
        }
        char v67 = (float *)&v66[12 * v63];
        *char v67 = v59;
        v67[1] = v37;
        v67[2] = v60;
        float32x2_t v69 = (float *)v107;
        float32x4_t v68 = v108;
        float64x2_t v70 = v67;
        if (v108 != v107)
        {
          do
          {
            uint64_t v71 = *(void *)(v68 - 3);
            v68 -= 3;
            int v72 = *((_DWORD *)v68 + 2);
            *(void *)(v70 - 3) = v71;
            v70 -= 3;
            *((_DWORD *)v70 + 2) = v72;
          }
          while (v68 != v69);
          float32x4_t v68 = (float *)v107;
        }
        id v62 = v67 + 3;
        v107 = v70;
        long long v108 = v67 + 3;
        unint64_t v109 = (unint64_t)&v66[12 * v65];
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        *long long v108 = v59;
        v61[1] = v37;
        id v62 = v61 + 3;
        v61[2] = v60;
      }
      long long v108 = v62;
      float v73 = v38 / sqrtf(__exp10f(v57));
      float v74 = v73 + 1.0;
      float v75 = 1.0 - v73;
      uint64_t v76 = v111;
      if ((unint64_t)v111 >= v112)
      {
        unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)v110) >> 2);
        unint64_t v79 = v78 + 1;
        if (v78 + 1 > 0x1555555555555555) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v112 - (void)v110) >> 2) > v79) {
          unint64_t v79 = 0x5555555555555556 * ((uint64_t)(v112 - (void)v110) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (void)v110) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v80 = 0x1555555555555555;
        }
        else {
          unint64_t v80 = v79;
        }
        if (v80) {
          long long v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v112, v80);
        }
        else {
          long long v81 = 0;
        }
        long long v82 = (float *)&v81[12 * v78];
        *long long v82 = v74;
        v82[1] = v37;
        v82[2] = v75;
        long long v84 = (char *)v110;
        long long v83 = v111;
        uint64_t v85 = v82;
        if (v111 != (char *)v110)
        {
          do
          {
            uint64_t v86 = *(void *)(v83 - 12);
            v83 -= 12;
            int v87 = *((_DWORD *)v83 + 2);
            *(void *)(v85 - 3) = v86;
            v85 -= 3;
            *((_DWORD *)v85 + 2) = v87;
          }
          while (v83 != v84);
          long long v83 = (char *)v110;
        }
        long long v77 = (char *)(v82 + 3);
        long long v110 = v85;
        long long v111 = (char *)(v82 + 3);
        unint64_t v112 = (unint64_t)&v81[12 * v80];
        if (v83) {
          operator delete(v83);
        }
      }
      else
      {
        *(float *)long long v111 = v74;
        *((float *)v76 + 1) = v37;
        long long v77 = v76 + 12;
        *((float *)v76 + 2) = v75;
      }
      long long v111 = v77;
      v35 += 2;
    }
    while (v35 != v36);
  }
  float v88 = 0;
  BOOL v89 = 0;
  uint64_t v90 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v88, v113, (uint64_t)v114, v114 - v113);
  v91 = 0;
  float32x4_t v92 = 0;
  uint64_t v93 = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(&v91, v110, (uint64_t)v111, 0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)v110) >> 2));
  float32x4_t v94 = 0;
  float32x4_t v95 = 0;
  uint64_t v96 = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(&v94, v107, (uint64_t)v108, 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (unsigned char *)v107) >> 2));
  v97 = 0;
  v98 = 0;
  uint64_t v99 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v97, v119, (uint64_t)v120, v120 - v119);
  v100 = 0;
  char v101 = 0;
  uint64_t v102 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v100, v116, (uint64_t)v117, v117 - v116);
  long long v103 = xmmword_260D21D68;
  long long v104 = xmmword_260D21D50;
  uint64_t v105 = 0x3F8000003FC00000;
  vg::hrtf::tukeyWindow(a2, (int32x2_t)0x3F8000003DCCCCCDLL, __p);
  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::PhaseShiftParameters>(a3, (uint64_t)&v88);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v100)
  {
    char v101 = v100;
    operator delete(v100);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v94)
  {
    float32x4_t v95 = v94;
    operator delete(v94);
  }
  if (v91)
  {
    float32x4_t v92 = v91;
    operator delete(v91);
  }
  if (v88)
  {
    BOOL v89 = v88;
    operator delete(v88);
  }
  if (v107)
  {
    long long v108 = (float *)v107;
    operator delete(v107);
  }
  if (v110)
  {
    long long v111 = (char *)v110;
    operator delete(v110);
  }
  if (v113)
  {
    long long v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    uint64_t v117 = v116;
    operator delete(v116);
  }
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
}

void sub_260CC9234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a39) {
    operator delete(a39);
  }
  float v42 = *(void **)(v40 - 248);
  if (v42)
  {
    *(void *)(v40 - 24std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v42;
    operator delete(v42);
  }
  float v43 = *(void **)(v40 - 224);
  if (v43)
  {
    *(void *)(v40 - 216) = v43;
    operator delete(v43);
  }
  float v44 = *(void **)(v40 - 200);
  if (v44)
  {
    *(void *)(v40 - 192) = v44;
    operator delete(v44);
  }
  float v45 = *(void **)(v40 - 176);
  if (v45)
  {
    *(void *)(v40 - 168) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::array<float,3ul>>::reserve(char **a1, unint64_t a2)
{
  float v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>(v3, a2);
    unint64_t v7 = &v6[12 * v5];
    unint64_t v9 = &v6[12 * v8];
    float v11 = *a1;
    float v10 = a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      float v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void vg::hrtf::PhaseShiftParameters::~PhaseShiftParameters(vg::hrtf::PhaseShiftParameters *this)
{
  long long v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 1std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void vg::hrtf::addDelayFractions(uint64_t a1, uint64_t a2, const vDSP_DFT_SetupStruct *a3, const DSPSplitComplex *a4, float a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = v5 - *(void *)a1;
  if (v5 == *(void *)a1) {
    vg::hrtf::addDelayFractions();
  }
  if ((v6 & 4) != 0) {
    vg::hrtf::addDelayFractions();
  }
  unint64_t v12 = v6 >> 2;
  LODWORD(__Or[0]) = 0;
  std::vector<float>::vector(v33, v6 >> 2, __Or);
  LODWORD(__Oi[0]) = 0;
  std::vector<float>::vector(__Or, v6 >> 2, __Oi);
  LODWORD(v30[0]) = 0;
  std::vector<float>::vector(__Oi, v6 >> 2, v30);
  vDSP_DFT_Execute(a3, *(const float **)a1, (const float *)v33[0], __Or[0], __Oi[0]);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v30, v6 >> 2, __p);
  LODWORD(__B.realp) = 0;
  std::vector<float>::vector(__p, v6 >> 2, &__B);
  unint64_t v13 = (unint64_t)(v6 >> 2) >> 1;
  if ((unint64_t)v6 > 7)
  {
    uint64_t v16 = 0;
    if (v13 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v12 >> 1;
    }
    do
    {
      float v18 = *(float *)(*(void *)(a2 + 96) + 4 * v16);
      *(float *)&__B.realp = (float)(v18 * a5) * -0.0;
      *((float *)&__B.realp + 1) = -(float)(v18 * a5);
      std::exp[abi:ne180100]<float>((float *)&__B);
      int v14 = (float *)v30[0];
      *((_DWORD *)v30[0] + v16) = v19;
      long long v15 = (float *)__p[0];
      *((_DWORD *)__p[0] + v16++) = v20;
    }
    while (v17 != v16);
    v14[v13] = 0.0;
    v15[v13] = 0.0;
    if ((unint64_t)v6 >= 0xD)
    {
      uint64_t v21 = 2;
      if (v13 > 2) {
        uint64_t v21 = v12 >> 1;
      }
      uint64_t v22 = v21 - 1;
      float v23 = v15 - 1;
      float32x2_t v24 = v14 - 1;
      float32x2_t v25 = v15 + 1;
      unint64_t v26 = v14 + 1;
      do
      {
        v26[v13] = v24[v13];
        v25[v13] = -v23[v13];
        --v23;
        --v24;
        ++v25;
        ++v26;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    int v14 = (float *)v30[0];
    long long v15 = (float *)__p[0];
    *((_DWORD *)v30[0] + v13) = 0;
    v15[v13] = 0.0;
  }
  __B.realp = v14;
  __B.imagp = v15;
  __A.realp = __Or[0];
  __A.imagp = __Oi[0];
  vDSP_zvmul(&__A, 1, &__B, 1, a4, 1, v6 >> 2, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (__Oi[0])
  {
    __Oi[1] = __Oi[0];
    operator delete(__Oi[0]);
  }
  if (__Or[0])
  {
    __Or[1] = __Or[0];
    operator delete(__Or[0]);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_260CC96E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  unint64_t v26 = *(void **)(v24 - 104);
  if (v26)
  {
    *(void *)(v24 - 96) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void std::exp[abi:ne180100]<float>(float *a1)
{
  float v1 = *a1;
  float v2 = a1[1];
  if (v2 == 0.0)
  {
    expf(v1);
    return;
  }
  if (fabsf(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((LODWORD(v2) & 0x7FFFFFFFu) >= 0x7F800000) {
        return;
      }
    }
    else if ((LODWORD(v2) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      float v2 = 1.0;
    }
  }
  float v3 = v2;
  expf(v1);
  __sincosf_stret(v3);
}

void vg::hrtf::phaseShift(uint64_t a1@<X0>, float *a2@<X1>, const float **a3@<X2>, const vDSP_DFT_SetupStruct *a4@<X3>, uint64_t a5@<X4>, const vDSP_biquad_SetupStruct *a6@<X5>, uint64_t a7@<X8>, float a8@<S0>)
{
  __B[0] = a8;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v11 = v9 - *(void *)a1;
  BOOL v10 = v9 == *(void *)a1;
  unint64_t v12 = v11 >> 2;
  unint64_t v74 = v11 >> 2;
  uint64_t v75 = a5;
  if (v10) {
    vg::hrtf::addDelayFractions();
  }
  uint64_t v14 = a1 + 32;
  if (v12 != (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2) {
    vg::hrtf::phaseShift();
  }
  if ((v11 & 4) != 0) {
    vg::hrtf::addDelayFractions();
  }
  LODWORD(v70.realp) = 0;
  std::vector<float>::vector(v72, v11 >> 2, &v70);
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(v73, v74, &__C);
  v70.realp = (float *)v72[0];
  v70.imagp = (float *)v73[0];
  vg::hrtf::addDelayFractions(a1, (uint64_t)a2, a4, &v70, *(float *)(a1 + 24));
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(&v70, v74, &__C);
  LODWORD(v69[0]) = 0;
  std::vector<float>::vector(v71, v74, v69);
  __C.realp = v70.realp;
  __C.imagp = (float *)v71[0];
  vg::hrtf::addDelayFractions(v14, (uint64_t)a2, a4, &__C, *(float *)(a1 + 56));
  unint64_t v18 = v12 >> 1;
  LODWORD(__A.realp) = 0;
  std::vector<float>::vector(&__C, v12 >> 1, &__A);
  __A.realp = (float *)v72[0];
  __A.imagp = (float *)v73[0];
  vDSP_zvphas(&__A, 1, __C.realp, 1, v12 >> 1);
  vg::hrtf::unwrapPhaseAngles(&__C.realp, (uint64_t)v69);
  if (__C.realp)
  {
    __C.imagp = __C.realp;
    operator delete(__C.realp);
  }
  LODWORD(v67.realp) = 0;
  std::vector<float>::vector(&__C, v12 >> 1, &v67);
  v67.realp = v70.realp;
  v67.imagp = (float *)v71[0];
  vDSP_zvphas(&v67, 1, __C.realp, 1, v12 >> 1);
  vg::hrtf::unwrapPhaseAngles(&__C.realp, (uint64_t)&__A);
  if (__C.realp)
  {
    __C.imagp = __C.realp;
    operator delete(__C.realp);
  }
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(&v67, v12 >> 1, &__C);
  vDSP_vsub((const float *)v69[0], 1, __A.realp, 1, v67.realp, 1, v12 >> 1);
  LODWORD(__C.realp) = 0;
  std::vector<float>::vector(v66, v12 >> 1, &__C);
  if (*(float *)(a1 + 24) >= *(float *)(a1 + 56))
  {
    *(float *)float v60 = -__B[0];
    vDSP_vsadd(v67.realp, 1, (const float *)v60, v66[0], 1, v12 >> 1);
    vDSP_vmul(v66[0], 1, *a3, 1, v66[0], 1, v12 >> 1);
    if ((unint64_t)v11 <= 7)
    {
      realp = (float *)v72[0];
      int v20 = (_DWORD *)v73[0];
      goto LABEL_13;
    }
    uint64_t v41 = 0;
    unint64_t v42 = v18 - 1;
    if (v18 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v18;
    }
    do
    {
      float v44 = v66[0][v41];
      *(float *)__X = v44 * 0.0;
      *((float *)__X + 1) = v44;
      std::exp[abi:ne180100]<float>((float *)__X);
      __C.realp = (float *)__PAIR64__(v46, v45);
      int v47 = *(_DWORD *)(v73[0] + 4 * v41);
      *(float *)__X = v72[0][v41];
      HIDWORD(__X[0]) = v47;
      float v48 = std::operator*[abi:ne180100]<float>((float *)__X, (float *)&__C);
      unint64_t v49 = v72[0];
      v72[0][v41] = v48;
      uint64_t v50 = v73[0];
      *(_DWORD *)(v73[0] + 4 * v41++) = v51;
    }
    while (v43 != v41);
    v49[v18] = 0.0;
    *(_DWORD *)(v50 + 4 * v18) = 0;
    if ((unint64_t)v11 >= 0xD)
    {
      uint64_t v52 = v50 - 4;
      unint64_t v53 = v49 - 1;
      uint64_t v54 = v50 + 4;
      unint64_t v55 = v49 + 1;
      do
      {
        v55[v18] = v53[v18];
        *(float *)(v54 + 4 * v18) = -*(float *)(v52 + 4 * v18);
        v52 -= 4;
        --v53;
        v54 += 4;
        ++v55;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    vDSP_vsadd(v67.realp, 1, __B, v66[0], 1, v12 >> 1);
    vDSP_vmul(v66[0], 1, *a3, 1, v66[0], 1, v12 >> 1);
    if ((unint64_t)v11 <= 7)
    {
      realp = v70.realp;
      int v20 = (_DWORD *)v71[0];
LABEL_13:
      float *realp = 0.0;
      *int v20 = 0;
      goto LABEL_14;
    }
    uint64_t v26 = 0;
    unint64_t v27 = v18 - 1;
    if (v18 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v18;
    }
    do
    {
      float v29 = v66[0][v26];
      *(float *)__X = v29 * -0.0;
      *((float *)__X + 1) = -v29;
      std::exp[abi:ne180100]<float>((float *)__X);
      __C.realp = (float *)__PAIR64__(v31, v30);
      int v32 = *(_DWORD *)(v71[0] + 4 * v26);
      *(float *)__X = v70.realp[v26];
      HIDWORD(__X[0]) = v32;
      float v33 = std::operator*[abi:ne180100]<float>((float *)__X, (float *)&__C);
      unint64_t v34 = v70.realp;
      v70.realp[v26] = v33;
      uint64_t v35 = v71[0];
      *(_DWORD *)(v71[0] + 4 * v26++) = v36;
    }
    while (v28 != v26);
    v34[v18] = 0.0;
    *(_DWORD *)(v35 + 4 * v18) = 0;
    if ((unint64_t)v11 >= 0xD)
    {
      uint64_t v37 = v35 - 4;
      float v38 = v34 - 1;
      uint64_t v39 = v35 + 4;
      uint64_t v40 = v34 + 1;
      do
      {
        v40[v18] = v38[v18];
        *(float *)(v39 + 4 * v18) = -*(float *)(v37 + 4 * v18);
        v37 -= 4;
        --v38;
        v39 += 4;
        ++v40;
        --v27;
      }
      while (v27);
    }
  }
LABEL_14:
  float v65 = 1.0 / (float)v74;
  __C.realp = a2;
  __C.imagp = (float *)&v75;
  unint64_t v63 = &v74;
  unint64_t v64 = &v65;
  vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()((uint64_t)&__C, v72, __X);
  vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()((uint64_t)&__C, (const float **)&v70.realp, v60);
  float v59 = 0.0;
  uint64_t v21 = __X;
  if (*(float *)(a1 + 24) >= *(float *)(a1 + 56)) {
    uint64_t v21 = v60;
  }
  vDSP_vfill(&v59, *v21, 1, (int)a2[32]);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 32) = 0;
  *(void *)(a7 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a7 + 48) = 0;
  LODWORD(__Delay[0]) = 0;
  std::vector<float>::resize(a7, v74, __Delay);
  *(_DWORD *)(a7 + 24) = 0;
  LODWORD(__Delay[0]) = 0;
  std::vector<float>::resize(a7 + 32, v74, __Delay);
  *(_DWORD *)(a7 + 56) = 0;
  int v57 = 0;
  std::vector<float>::vector(__Delay, 4uLL, &v57);
  vDSP_biquad(a6, __Delay[0], __X[0], 1, *(float **)a7, 1, v74);
  vDSP_biquad(a6, __Delay[0], v60[0], 1, *(float **)(a7 + 32), 1, v74);
  if (__Delay[0])
  {
    __Delay[1] = __Delay[0];
    operator delete(__Delay[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (__X[0])
  {
    __X[1] = __X[0];
    operator delete(__X[0]);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v67.realp)
  {
    v67.imagp = v67.realp;
    operator delete(v67.realp);
  }
  if (__A.realp)
  {
    __A.imagp = __A.realp;
    operator delete(__A.realp);
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    float v23 = (void *)v71[i];
    if (v23)
    {
      v71[i + 1] = v23;
      operator delete(v23);
    }
  }
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    float32x2_t v25 = (float *)v72[j + 3];
    if (v25)
    {
      v73[j + 1] = v25;
      operator delete(v25);
    }
  }
}

void vg::hrtf::phaseShift(vg::hrtf::IRFilters const&,vg::hrtf::PhaseShiftParameters const&,float,std::vector<float> const&,vDSP_DFT_SetupStruct *,vDSP_DFT_SetupStruct *,vDSP_biquad_SetupStruct *)::$_3::operator()(uint64_t a1@<X0>, const float **a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = **(void **)(a1 + 16);
  LODWORD(v15[0]) = 0;
  std::vector<float>::vector(&__Or, v6, v15);
  unint64_t v7 = **(void **)(a1 + 16);
  int v11 = 0;
  std::vector<float>::vector(__Oi, v7, &v11);
  vDSP_DFT_Execute(**(const vDSP_DFT_SetupStruct ***)(a1 + 8), *a2, a2[3], __Or, __Oi[0]);
  vDSP_vsmul(__Or, 1, *(const float **)(a1 + 24), __Or, 1, **(void **)(a1 + 16));
  uint64_t v8 = &v13[-(int)*(float *)(*(void *)a1 + 128)];
  std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>,std::reverse_iterator<std::__wrap_iter<float *>>>((int *)__Or, v13, (char *)v13, v8, v8, (int *)__Or, v15);
  vDSP_vmul(__Or, 1, *(const float **)(*(void *)a1 + 160), 1, __Or, 1, **(void **)(a1 + 16));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, __Or, (uint64_t)v13, ((char *)v13 - (char *)__Or) >> 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    BOOL v10 = __Oi[i];
    if (v10)
    {
      __Oi[i + 1] = v10;
      operator delete(v10);
    }
  }
}

void sub_260CCA1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(void **)((char *)&a14 + v16);
    if (v17)
    {
      *(uint64_t *)((char *)&a15 + v16) = (uint64_t)v17;
      operator delete(v17);
    }
    v16 -= 24;
    if (v16 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void vg::hrtf::IRFilters::~IRFilters(vg::hrtf::IRFilters *this)
{
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void vg::hrtf::ITDWindow(vg::hrtf *this@<X0>, float a2@<S0>, float a3@<S1>, uint64_t a4@<X1>, float **a5@<X8>)
{
  float v10 = fmodf(a3, 180.0);
  float v11 = a2 * 3.14159265 / 180.0;
  float v12 = cosf(v11);
  int v18 = 0;
  std::vector<float>::vector(a5, (unint64_t)this, &v18);
  if (this)
  {
    float v13 = 90.0 - fabsf(v10 + -90.0);
    float v14 = (float)(*(float *)(a4 + 132) - *(float *)(a4 + 120)) / (float)(fabsf(*(float *)(a4 + 136) + -45.0) + 45.0);
    long long v15 = *(float **)(a4 + 72);
    uint64_t v16 = *a5;
    do
    {
      float v17 = *v15++;
      *v16++ = (float)(1.0
                     - tanhf((float)((float)(*(float *)(a4 + 120)+ (float)((float)(v14 * vabds_f32(v13, *(float *)(a4 + 136))) * v12))- v17)/ *(float *)(a4 + 124)))* 0.5;
      this = (vg::hrtf *)((char *)this - 1);
    }
    while (this);
  }
}

float64x2_t vg::hrtf::biquadParameters@<Q0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(float *)a1 <= 0.00000011921) {
    vg::hrtf::biquadParameters();
  }
  float v3 = 1.0 / *(float *)a1;
  *(float64x2_t *)a3 = vcvtq_f64_f32(vmul_n_f32(*a2, v3));
  *(double *)(a3 + 16) = (float)(v3 * a2[1].f32[0]);
  float64x2_t result = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 4), v3));
  *(float64x2_t *)(a3 + 24) = result;
  return result;
}

uint64_t vg::hrtf::modifyIRDataWithITD@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float v4 = *(std::__shared_weak_count **)(a1 + 8);
  unint64_t v80 = *(IR::IRData **)a1;
  long long v81 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vg::hrtf::getIRValues(&v80, (uint64_t)&v82);
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (!v86)
  {
    unsigned int v30 = __VGLogSharedInstance();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v72 = 0;
      _os_log_impl(&dword_260C8D000, v30, OS_LOG_TYPE_ERROR, " Failed to read coefficients and delay values from IRData. ", v72, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    return std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
  }
  memset(v79, 0, sizeof(v79));
  std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(v79, v84, v85, (v85 - v84) >> 6);
  if (!v86) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v76 = 0;
  long long v77 = 0;
  uint64_t v78 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v76, v82, v83, (v83 - (uint64_t)v82) >> 3);
  unsigned int FilterLength = IR::IRData::getFilterLength(*(IR::IRData **)a1);
  if (FilterLength)
  {
    unsigned int v31 = __VGLogSharedInstance();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v72 = 0;
      int v32 = " Number of IR taps must be multiple of 2. ";
LABEL_38:
      _os_log_impl(&dword_260C8D000, v31, OS_LOG_TYPE_ERROR, v32, v72, 2u);
    }
LABEL_39:

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_73;
  }
  vDSP_Length v6 = FilterLength;
  vDSP_DFT_Setup Setup = vDSP_DFT_zop_CreateSetup(0, FilterLength, vDSP_DFT_FORWARD);
  uint64_t v8 = Setup;
  if (!Setup)
  {
    unsigned int v31 = __VGLogSharedInstance();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v72 = 0;
      int v32 = " Failed to setup fft. ";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  v75[0] = MEMORY[0x263EF8330];
  v75[1] = 3221225472;
  uint64_t v9 = &__block_descriptor_40_e5_v8__0l;
  v75[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke;
  v75[3] = &__block_descriptor_40_e5_v8__0l;
  v75[4] = Setup;
  float v10 = (void (**)(void))MEMORY[0x261227FC0](v75);
  vDSP_DFT_Setup v11 = vDSP_DFT_zop_CreateSetup(0, v6, vDSP_DFT_INVERSE);
  vDSP_DFT_Setup v12 = v11;
  if (!v11)
  {
    float v33 = __VGLogSharedInstance();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v72 = 0;
      _os_log_impl(&dword_260C8D000, v33, OS_LOG_TYPE_ERROR, " Failed to setup inverse fft. ", v72, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_72;
  }
  v74[0] = MEMORY[0x263EF8330];
  v74[1] = 3221225472;
  float32x2_t v74[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_10;
  v74[3] = &__block_descriptor_40_e5_v8__0l;
  v74[4] = v11;
  float v13 = (void (**)(void))MEMORY[0x261227FC0](v74);
  IR::IRData::getSampleRate(*(IR::IRData **)a1);
  vg::hrtf::getPhaseShiftParameters(&v76, v6, (uint64_t)v72, v14);
  if (!v73)
  {
    unint64_t v34 = __VGLogSharedInstance();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float v60 = 0;
      _os_log_impl(&dword_260C8D000, v34, OS_LOG_TYPE_ERROR, " Failed to compute phaseShift params. ", v60, 2u);
    }

    *a2 = 0;
    a2[1] = 0;
    goto LABEL_71;
  }
  uint64_t v39 = v10;
  uint64_t v40 = v13;
  vg::hrtf::PhaseShiftParameters::PhaseShiftParameters((vg::hrtf::PhaseShiftParameters *)v60, (const vg::hrtf::PhaseShiftParameters *)v72);
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  std::vector<vg::hrtf::IRFilters>::reserve(&v57, ((char *)v77 - (char *)v76) >> 3);
  long long v15 = v76;
  uint64_t v16 = (uint64_t)v77;
  if (v77 == v76)
  {
    unint64_t v29 = 0;
    long long v15 = v77;
    goto LABEL_47;
  }
  uint64_t v41 = (uint64_t)v12;
  unint64_t v42 = v8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  do
  {
    vg::hrtf::ITDWindow((vg::hrtf *)v6, v15[v19], v15[v19 + 1], (uint64_t)v60, (float **)&v54);
    if (fabsf(*(float *)((char *)v62 + v18)) < 0.00000001)
    {
      uint64_t v21 = __VGLogSharedInstance();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        uint64_t v22 = v21;
        float v23 = " IIR biquad a0 filter too small. ";
LABEL_24:
        _os_log_impl(&dword_260C8D000, v22, OS_LOG_TYPE_ERROR, v23, buf, 2u);
        goto LABEL_25;
      }
      goto LABEL_25;
    }
    uint64_t v53 = 0;
    long long __Coefficients = 0u;
    long long v52 = 0u;
    vg::hrtf::biquadParameters((uint64_t)v62 + v18, (float32x2_t *)((char *)v64 + v18), (uint64_t)&__Coefficients);
    vDSP_biquad_Setup v24 = vDSP_biquad_CreateSetup((const double *)&__Coefficients, 1uLL);
    float32x2_t v25 = v24;
    if (!v24)
    {
      uint64_t v21 = __VGLogSharedInstance();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        uint64_t v22 = v21;
        float v23 = " Failed to setup biquadratic filter. ";
        goto LABEL_24;
      }
LABEL_25:

      *a2 = 0;
      a2[1] = 0;
      int v28 = 1;
      goto LABEL_26;
    }
    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 3221225472;
    v50[2] = ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_11;
    v50[3] = v9;
    uint64_t v26 = v9;
    v50[4] = v24;
    unint64_t v27 = (void (**)(void))MEMORY[0x261227FC0](v50);
    vg::hrtf::phaseShift(v79[0] + v17, (float *)v60, (const float **)&v54, v42, v41, v25, (uint64_t)buf, *(float *)(*(void *)v60 + 4 * v20));
    std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>(&v57, (uint64_t)buf);
    if (__p)
    {
      unint64_t v49 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      unsigned int v45 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    v27[2](v27);

    int v28 = 0;
    uint64_t v9 = v26;
LABEL_26:
    if (v54)
    {
      unint64_t v55 = v54;
      operator delete(v54);
    }
    if (v28) {
      goto LABEL_59;
    }
    ++v20;
    long long v15 = v76;
    uint64_t v16 = (uint64_t)v77;
    v19 += 2;
    v18 += 12;
    v17 += 64;
  }
  while (v20 < ((char *)v77 - (char *)v76) >> 3);
  unint64_t v29 = ((char *)v77 - (char *)v76) >> 3;
LABEL_47:
  *(void *)std::string buf = 0;
  unsigned int v45 = 0;
  uint64_t v46 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(buf, v15, v16, v29);
  uint64_t v47 = 0;
  std::string __p = 0;
  unint64_t v49 = 0;
  std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(&v47, v57, v58, (v58 - v57) >> 6);
  uint64_t PeriodForCyclicalDimensions = IR::IRData::getPeriodForCyclicalDimensions(*(IR::IRData **)a1);
  long long __Coefficients = 0uLL;
  *(void *)&long long v52 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__Coefficients, *(const void **)PeriodForCyclicalDimensions, *(void *)(PeriodForCyclicalDimensions + 8), (uint64_t)(*(void *)(PeriodForCyclicalDimensions + 8) - *(void *)PeriodForCyclicalDimensions) >> 2);
  uint64_t InterpolationMethod = IR::IRData::getInterpolationMethod(*(IR::IRData **)a1);
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v54, *(const void **)InterpolationMethod, *(void *)(InterpolationMethod + 8), (uint64_t)(*(void *)(InterpolationMethod + 8) - *(void *)InterpolationMethod) >> 2);
  IR::IRData::getUserData((uint64_t *)&cf, *(IR::IRData **)a1);
  CFTypeRef v37 = cf;
  if (cf) {
    CFRetain(cf);
  }
  vg::hrtf::getIRData((uint64_t *)buf, a2);
  if (v37) {
    CFRelease(v37);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if ((void)__Coefficients)
  {
    *((void *)&__Coefficients + 1) = __Coefficients;
    operator delete((void *)__Coefficients);
  }
  *(void *)&long long __Coefficients = &v47;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&__Coefficients);
  if (*(void *)buf)
  {
    unsigned int v45 = *(void **)buf;
    operator delete(*(void **)buf);
  }
LABEL_59:
  *(void *)std::string buf = &v57;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  float v10 = v39;
  float v13 = v40;
  if (v68)
  {
    float32x2_t v69 = v68;
    operator delete(v68);
  }
  if (v66)
  {
    DSPSplitComplex v67 = v66;
    operator delete(v66);
  }
  if (v64)
  {
    float v65 = v64;
    operator delete(v64);
  }
  if (v62)
  {
    unint64_t v63 = v62;
    operator delete(v62);
  }
  if (*(void *)v60)
  {
    long long v61 = *(void **)v60;
    operator delete(*(void **)v60);
  }
LABEL_71:
  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v72);
  v13[2](v13);

LABEL_72:
  v10[2](v10);

LABEL_73:
  if (v76)
  {
    long long v77 = v76;
    operator delete(v76);
  }
  *(void *)int v72 = v79;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  return std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
}

void sub_260CCAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a67);
  v68[2]();

  v67[2]();
  uint64_t v71 = *(void **)(v69 - 240);
  if (v71)
  {
    *(void *)(v69 - 232) = v71;
    operator delete(v71);
  }
  a67 = v69 - 216;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](v69 - 176);
  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke(uint64_t a1)
{
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_10(uint64_t a1)
{
}

uint64_t std::vector<vg::hrtf::IRFilters>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260CCADD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf19modifyIRDataWithITDENSt3__110shared_ptrIN2IR6IRDataEEE_block_invoke_11(uint64_t a1)
{
}

uint64_t std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(v4, v12);
    }
    else {
      float v13 = 0;
    }
    long long v15 = v13;
    uint64_t v16 = &v13[64 * v9];
    uint64_t v18 = &v13[64 * v12];
    std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>((uint64_t)v16, a2);
    uint64_t v17 = v16 + 64;
    std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v8;
  return v8 - 64;
}

void sub_260CCAEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  float v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void vg::hrtf::IRGrid::~IRGrid(vg::hrtf::IRGrid *this)
{
  float v3 = (void **)((char *)this + 24);
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&v3);
  float v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void *std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::array<float,3ul>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_260CCB02C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::array<float,3ul>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

__n128 std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::PhaseShiftParameters>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v2 = *(_OWORD *)(a2 + 120);
  uint64_t v3 = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v2;
  *(void *)(a1 + 152) = v3;
  *(void *)(a1 + 16std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  __n128 result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 16std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = result;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 16std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 1;
  return result;
}

float std::operator*[abi:ne180100]<float>(float *a1, float *a2)
{
  return (float)(*a1 * *a2) - (float)(a1[1] * a2[1]);
}

int *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>,std::reverse_iterator<std::__wrap_iter<float *>>>@<X0>(int *__dst@<X5>, int *result@<X0>, char *a3@<X1>, int *a4@<X2>, int *a5@<X3>, int *a6@<X4>, int **a7@<X8>)
{
  if (a3 == (char *)a5)
  {
    *a7 = a6;
    a7[1] = __dst;
  }
  else
  {
    if (a5 != __dst)
    {
      uint64_t v10 = (int *)(a3 - 4);
      if (a3 - 4 == (char *)a5)
      {
        int v11 = *a5;
        do
        {
          int v12 = *--a5;
          *v10-- = v12;
          a3 -= 4;
        }
        while (a5 != __dst);
        *uint64_t v10 = v11;
      }
      else
      {
        if (a5 - 1 == __dst)
        {
          int v14 = *__dst;
          float v13 = (char *)__dst;
          if (__dst + 1 != (int *)a3)
          {
            size_t v15 = ((a3 - (char *)__dst - 8) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            memmove(__dst, __dst + 1, v15);
            float v13 = (char *)__dst + v15;
          }
          *uint64_t v10 = v14;
          __n128 result = a6;
          goto LABEL_15;
        }
        __n128 result = std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>>((uint64_t)result, (int *)a3, a4, a5, (uint64_t)a6, __dst);
      }
      float v13 = a3;
LABEL_15:
      *a7 = result;
      a7[1] = (int *)v13;
      goto LABEL_16;
    }
    *a7 = result;
    a7[1] = (int *)a3;
  }
LABEL_16:
  a7[2] = a6;
  a7[3] = __dst;
  return result;
}

int *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<float *>>>(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, int *a6)
{
  uint64_t v6 = a2 - a4;
  if (v6 == a4 - a6)
  {
    __n128 result = a3;
    if (a2 != a4 && a4 != a6)
    {
      size_t v8 = a2 - 1;
      uint64_t v9 = a4 - 1;
      uint64_t v10 = a4 - 1;
      do
      {
        int v11 = *v8;
        BOOL v12 = v8 == a4;
        *v8-- = *v9;
        *v10-- = v11;
        if (v12) {
          break;
        }
        BOOL v12 = v9 == a6;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
  }
  else
  {
    uint64_t v13 = a4 - a6;
    uint64_t v14 = a2 - a4;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = v13;
      uint64_t v13 = v15 % v13;
    }
    while (v13);
    if (v14)
    {
      uint64_t v16 = &a2[-v14];
      do
      {
        int v17 = *v16++;
        int v18 = v17;
        uint64_t v19 = &v16[-v6];
        unint64_t v20 = v16;
        do
        {
          uint64_t v21 = v19;
          *(v20 - 1) = *(v19 - 1);
          uint64_t v22 = v19 - a6;
          BOOL v23 = v22 <= v6;
          uint64_t v19 = &a2[v22 - v6];
          if (!v23) {
            uint64_t v19 = &v21[-v6];
          }
          unint64_t v20 = v21;
        }
        while (v19 != v16);
        *(v21 - 1) = v18;
      }
      while (v16 != a2);
    }
    return &a2[-(a4 - a6)];
  }
  return result;
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  size_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    BOOL v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<vg::hrtf::IRFilters>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_260CCB69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::hrtf::IRFilters>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(a4 + v7, a2 + v7);
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_260CCB798(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 64;
    do
    {
      std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::IRFilters,vg::hrtf::IRFilters&,vg::hrtf::IRFilters*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  int v4 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_260CCB82C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

vg::hrtf::PhaseShiftParameters *vg::hrtf::PhaseShiftParameters::PhaseShiftParameters(vg::hrtf::PhaseShiftParameters *this, const vg::hrtf::PhaseShiftParameters *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::array<float,3ul>>::__init_with_size[abi:ne180100]<std::array<float,3ul>*,std::array<float,3ul>*>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2));
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *((void *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 12, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 2);
  long long v4 = *(_OWORD *)((char *)a2 + 120);
  long long v5 = *(_OWORD *)((char *)a2 + 136);
  uint64_t v6 = *((void *)a2 + 19);
  *((void *)this + 2std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = 0;
  *((void *)this + 19) = v6;
  *(_OWORD *)((char *)this + 136) = v5;
  *(_OWORD *)((char *)this + 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v4;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 20, *((const void **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 2);
  return this;
}

void sub_260CCBA3C(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 104) = v7;
    operator delete(v7);
  }
  size_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 8std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<vg::hrtf::IRFilters>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::IRFilters>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>,std::reverse_iterator<vg::hrtf::IRFilters*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 64) = 0;
      *(_DWORD *)(v8 - 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = *(_DWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      float result = *(float *)(a3 + v7 - 8);
      *(float *)(v8 - 8) = result;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<vg::hrtf::IRFilters>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<vg::hrtf::IRFilters,0>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::PhaseShiftParameters,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(void **)(a1 + 160);
    if (v2)
    {
      *(void *)(a1 + 168) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(void *)(a1 + 104) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(void *)(a1 + 8std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a1 + 48);
    if (v5)
    {
      *(void *)(a1 + 56) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a1 + 24);
    if (v6)
    {
      *(void *)(a1 + 32) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = (void **)(a1 + 24);
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void vg::hrtf::unwrapPhaseAngles()
{
}

void vg::hrtf::tukeyWindow()
{
}

{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void vg::hrtf::addDelayFractions()
{
}

{
  _os_crash();
  __break(1u);
}

void vg::hrtf::phaseShift()
{
}

void vg::hrtf::biquadParameters()
{
}

BOOL vg::hrtf::HRTFDecoderModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = __VGLogSharedInstance();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v25.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_DEBUG, " Initializing HRTFDecoderModel (EspressoV1)... ", (uint8_t *)&v25, 2u);
  }

  id v7 = [NSString alloc];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  uint64_t v9 = (void *)[v7 initWithCString:v8];
  id v27 = 0;
  uint64_t v10 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v9 options:0 error:&v27];
  id v11 = v27;
  if (v11)
  {
    id v12 = v11;
    BOOL v13 = 0;
  }
  else
  {
    id v26 = 0;
    unint64_t v14 = [MEMORY[0x263F08900] JSONObjectWithData:v10 options:0 error:&v26];
    id v12 = v26;
    uint64_t v15 = [v14 objectForKeyedSubscript:@"properties"];
    uint64_t v16 = v15;
    BOOL v13 = 0;
    if (!v12 && v15)
    {
      v31[0] = v9;
      v30[0] = @"model_path";
      v30[1] = @"config";
      v28[0] = @"version";
      int v17 = objc_msgSend(v15, "objectForKeyedSubscript:");
      v29[0] = v17;
      v29[1] = @"CPU";
      v28[1] = @"engine";
      uint8_t v28[2] = @"input_name";
      v28[3] = @"output_name";
      v29[2] = &unk_270CFD960;
      v29[3] = &unk_270CFD978;
      int v18 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:4];
      v31[1] = v18;
      uint64_t v19 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];

      uint64_t v20 = [[VGMLEspressoModel alloc] initWithModelInfo:v19];
      uint64_t v21 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v20;

      uint64_t v22 = *(void *)(a1 + 24);
      BOOL v13 = v22 != 0;
      if (v22)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v25);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(std::string *)a1 = v25;
        BOOL v23 = __VGLogSharedInstance();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v25.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_DEBUG, " Successfully initialized HRTFDecoderModel (EspressoV1) ", (uint8_t *)&v25, 2u);
        }
      }
    }
  }
  return v13;
}

void sub_260CCC0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

void vg::hrtf::HRTFDecoderModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __VGLogSharedInstance();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_DEBUG, " Running predict for HRTFDecoderModel (EspressoV1)... ", buf, 2u);
  }

  if (*(_DWORD *)(a2 + 16) != 32)
  {
    int v17 = __VGLogSharedInstance();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      int v18 = " Face encoding input dimension mismatch. ";
LABEL_16:
      _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    }
LABEL_17:

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 40) != 64)
  {
    int v17 = __VGLogSharedInstance();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      int v18 = " Ear encoding input dimension mismatch. ";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v19 = [[VGMLFloatIOData alloc] initWithSize:32 withData:*(void *)a2];
  id v7 = [[VGMLFloatIOData alloc] initWithSize:64 withData:*(void *)(a2 + 24)];
  unsigned int v8 = [*(id *)(a1 + 24) getOutputSize];
  size_t v9 = (4 * v8 + 31) & 0x7FFFFFFE0;
  *(void *)std::string buf = 0;
  malloc_type_posix_memalign((void **)buf, 0x20uLL, v9, 0x49090899uLL);
  uint64_t v10 = *(void *)buf;
  id v11 = [[VGMLFloatIOData alloc] initWithSize:v8 withData:*(void *)buf];
  id v12 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v19, v7, 0);
  BOOL v13 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v11, 0);
  unint64_t v14 = __VGLogSharedInstance();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_260C8D000, v14, OS_LOG_TYPE_DEBUG, " Running infer for HRTFDecoderModel (EspressoV1)... ", buf, 2u);
  }

  [*(id *)(a1 + 24) inferInputs:v12 toOutputs:v13];
  uint64_t v15 = __VGLogSharedInstance();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_260C8D000, v15, OS_LOG_TYPE_DEBUG, " Successfully completed infer for HRTFDecoderModel (EspressoV1) ", buf, 2u);
  }

  uint64_t v16 = __VGLogSharedInstance();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_DEBUG, " Successfully completed predict for HRTFDecoderModel (EspressoV1) ", buf, 2u);
  }

  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v9 >> 2;
  *(_DWORD *)(a3 + 16) = v8;
  *(unsigned char *)(a3 + 24) = 1;
}

void sub_260CCC470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(v13);
  _Unwind_Resume(a1);
}

void sub_260CCC4C0()
{
}

void sub_260CCC4C8()
{
}

void vg::hrtf::HRTFDecoderModelEspresso::create()
{
}

void sub_260CCC580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  id v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFDecoderModelEspresso::HRTFDecoderModelEspresso(vg::hrtf::HRTFDecoderModelEspresso *this)
{
}

{
  operator new();
}

void vg::hrtf::HRTFDecoderModelEspresso::~HRTFDecoderModelEspresso(vg::hrtf::HRTFDecoderModelEspresso *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::HRTFDecoderModelEspresso::predictHRTFDecoderModel(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL vg::hrtf::DTFModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v29[2] = *MEMORY[0x263EF8340];
  id v6 = [NSString alloc];
  if (*((char *)a2 + 23) >= 0) {
    id v7 = a2;
  }
  else {
    id v7 = (uint64_t *)*a2;
  }
  unsigned int v8 = (void *)[v6 initWithCString:v7];
  id v25 = 0;
  size_t v9 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v8 options:0 error:&v25];
  id v10 = v25;
  if (v10)
  {
    id v11 = v10;
    BOOL v12 = 0;
  }
  else
  {
    id v24 = 0;
    BOOL v13 = [MEMORY[0x263F08900] JSONObjectWithData:v9 options:0 error:&v24];
    id v11 = v24;
    unint64_t v14 = [v13 objectForKeyedSubscript:@"properties"];
    uint64_t v15 = v14;
    BOOL v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = @"model_path";
      v28[1] = @"config";
      v26[0] = @"version";
      uint64_t v16 = objc_msgSend(v14, "objectForKeyedSubscript:");
      v27[0] = v16;
      v27[1] = @"CPU";
      v26[1] = @"engine";
      v26[2] = @"input_name";
      v26[3] = @"output_name";
      v27[2] = &unk_270CFD990;
      v27[3] = &unk_270CFD9A8;
      int v17 = [NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:4];
      v29[1] = v17;
      int v18 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];

      uint64_t v19 = [[VGMLEspressoModel alloc] initWithModelInfo:v18];
      uint64_t v20 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v19;

      uint64_t v21 = *(void *)(a1 + 24);
      BOOL v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(std::string *)a1 = v23;
      }
    }
  }

  return v12;
}

void sub_260CCC938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::DTFModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 284160)
  {
    std::vector<float>::vector(&v37, 0x45600uLL);
    uint64_t v6 = *(unsigned int *)(a2 + 16);
    if (v6)
    {
      id v7 = *(int **)a2;
      unsigned int v8 = v37;
      do
      {
        int v9 = *v7++;
        *v8++ = v9;
        --v6;
      }
      while (v6);
    }
    id v10 = [VGMLFloatIOData alloc];
    id v11 = -[VGMLFloatIOData initWithSize:withData:](v10, "initWithSize:withData:", (v38 - (unsigned char *)v37) >> 2);
    std::vector<float>::vector(v36, 0x2C680uLL);
    BOOL v12 = [VGMLFloatIOData alloc];
    BOOL v13 = [(VGMLFloatIOData *)v12 initWithSize:181888 withData:v36[0]];
    std::vector<float>::vector(__p, 0x40uLL);
    unint64_t v14 = [VGMLFloatIOData alloc];
    uint64_t v15 = [(VGMLFloatIOData *)v14 initWithSize:64 withData:__p[0]];
    uint64_t v16 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v11, 0);
    int v17 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v13, v15, 0);
    [*(id *)(a1 + 24) inferInputs:v16 toOutputs:v17];
    v33[1] = (void *)181888;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0xB1A00uLL, 0x49090899uLL);
    int v18 = memptr;
    v33[0] = memptr;
    uint64_t v34 = 0xB1A00000040;
    v31[1] = (void *)64;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0x100uLL, 0x49090899uLL);
    uint64_t v19 = 0;
    uint64_t v20 = memptr;
    v31[0] = memptr;
    int v32 = 64;
    uint64_t v21 = v36[0];
    uint64_t v22 = __p[0];
    do
    {
      uint64_t v23 = 0;
      id v24 = v18;
      do
      {
        _DWORD *v24 = v21[v23++];
        v24 += 64;
      }
      while (v23 != 2842);
      v20[v19] = v22[v19];
      ++v19;
      ++v18;
      v21 += 2842;
    }
    while (v19 != 64);
    cva::MatrixData<float,0ul,0ul,false>::MatrixData(&memptr, (const void **)v33, 181888);
    *((void *)&v29 + 1) = v34;
    cva::MatrixData<float,0ul,0ul,false>::MatrixData(v30, (const void **)v31, 64);
    int v25 = v32;
    *(void *)a3 = memptr;
    *(_OWORD *)(a3 + 8) = v29;
    id v26 = v30[1];
    *(void **)(a3 + 24) = v30[0];
    *(void *)(a3 + 32) = v26;
    *(_DWORD *)(a3 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v25;
    *(unsigned char *)(a3 + 48) = 1;
    free(v31[0]);
    free(v33[0]);

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }

    if (v37)
    {
      float v38 = v37;
      operator delete(v37);
    }
  }
  else
  {
    id v27 = __VGLogSharedInstance();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(memptr) = 0;
      _os_log_impl(&dword_260C8D000, v27, OS_LOG_TYPE_ERROR, " HRTF input dimension mismatch. ", (uint8_t *)&memptr, 2u);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

void sub_260CCCCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  free(a11);
  free(a18);
  free(a21);

  if (__p) {
    operator delete(__p);
  }

  int v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(void *)(v30 - 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v32;
    operator delete(v32);
  }

  float v33 = *(void **)(v30 - 104);
  if (v33)
  {
    *(void *)(v30 - 96) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_260CCCD4C()
{
}

void sub_260CCCD54()
{
}

void sub_260CCCD5C()
{
}

void vg::hrtf::DTFModelEspresso::create()
{
}

void sub_260CCCE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  id v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFModelEspresso::DTFModelEspresso(vg::hrtf::DTFModelEspresso *this)
{
}

{
  operator new();
}

void vg::hrtf::DTFModelEspresso::~DTFModelEspresso(vg::hrtf::DTFModelEspresso *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::DTFModelEspresso::predictDTFFromHRTF(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL vg::hrtf::DTFBiasModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v29[2] = *MEMORY[0x263EF8340];
  id v6 = [NSString alloc];
  if (*((char *)a2 + 23) >= 0) {
    id v7 = a2;
  }
  else {
    id v7 = (uint64_t *)*a2;
  }
  unsigned int v8 = (void *)[v6 initWithCString:v7];
  id v25 = 0;
  int v9 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v8 options:0 error:&v25];
  id v10 = v25;
  if (v10)
  {
    id v11 = v10;
    BOOL v12 = 0;
  }
  else
  {
    id v24 = 0;
    BOOL v13 = [MEMORY[0x263F08900] JSONObjectWithData:v9 options:0 error:&v24];
    id v11 = v24;
    unint64_t v14 = [v13 objectForKeyedSubscript:@"properties"];
    uint64_t v15 = v14;
    BOOL v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = @"model_path";
      v28[1] = @"config";
      v26[0] = @"version";
      uint64_t v16 = objc_msgSend(v14, "objectForKeyedSubscript:");
      v27[0] = v16;
      v27[1] = @"CPU";
      v26[1] = @"engine";
      v26[2] = @"input_name";
      v26[3] = @"output_name";
      v27[2] = &unk_270CFD9C0;
      v27[3] = &unk_270CFD9D8;
      int v17 = [NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:4];
      v29[1] = v17;
      int v18 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];

      uint64_t v19 = [[VGMLEspressoModel alloc] initWithModelInfo:v18];
      uint64_t v20 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v19;

      uint64_t v21 = *(void *)(a1 + 24);
      BOOL v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(std::string *)a1 = v23;
      }
    }
  }

  return v12;
}

void sub_260CCD1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::DTFBiasModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)a2 + 4) == 64 && *((_DWORD *)a2 + 5) == 2842)
  {
    std::vector<float>::vector(buf, 0x2C680uLL);
    uint64_t v6 = 0;
    int v7 = *((_DWORD *)a2 + 4);
    uint64_t v8 = *a2;
    uint64_t v9 = *(void *)buf;
    do
    {
      uint64_t v10 = 0;
      unsigned int v11 = v6;
      do
      {
        *(_DWORD *)(v9 + 4 * v10++) = *(_DWORD *)(v8 + 4 * v11);
        v11 += v7;
      }
      while (v10 != 2842);
      ++v6;
      v9 += 11368;
    }
    while (v6 != 64);
    BOOL v12 = [VGMLFloatIOData alloc];
    BOOL v13 = [(VGMLFloatIOData *)v12 initWithSize:181888 withData:*(void *)buf];
    std::vector<float>::vector(__p, 0x2C680uLL);
    unint64_t v14 = [VGMLFloatIOData alloc];
    uint64_t v15 = [(VGMLFloatIOData *)v14 initWithSize:181888 withData:__p[0]];
    uint64_t v16 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v13, 0);
    int v17 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", v15, 0);
    [*(id *)(a1 + 24) inferInputs:v16 toOutputs:v17];
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, 0xB1A00uLL, 0x49090899uLL);
    uint64_t v18 = 0;
    uint64_t v19 = memptr;
    uint64_t v20 = __p[0];
    uint64_t v21 = memptr;
    do
    {
      uint64_t v22 = 0;
      std::string v23 = v21;
      do
      {
        _DWORD *v23 = v20[v22++];
        v23 += 64;
      }
      while (v22 != 2842);
      ++v18;
      ++v21;
      v20 += 2842;
    }
    while (v18 != 64);
    *(void *)a3 = v19;
    *(_OWORD *)(a3 + 8) = xmmword_260D21DA0;
    *(unsigned char *)(a3 + 24) = 1;

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (*(void *)buf)
    {
      uint64_t v27 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    id v24 = __VGLogSharedInstance();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v24, OS_LOG_TYPE_ERROR, " DTF input dimension mismatch. ", buf, 2u);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
}

void sub_260CCD474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void sub_260CCD4D4()
{
}

void vg::hrtf::DTFBiasModelEspresso::create()
{
}

void sub_260CCD58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  unsigned int v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFBiasModelEspresso::DTFBiasModelEspresso(vg::hrtf::DTFBiasModelEspresso *this)
{
}

{
  operator new();
}

void vg::hrtf::DTFBiasModelEspresso::~DTFBiasModelEspresso(vg::hrtf::DTFBiasModelEspresso *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::DTFBiasModelEspresso::predictBiasDTF(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_260CCD730(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    }
    JUMPOUT(0x2612278D0);
  }
}

void std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x2612278D0);
  }
}

void **cva::MatrixData<float,0ul,0ul,false>::MatrixData(void **a1, const void **a2, uint64_t a3)
{
  size_t v6 = 4 * a3;
  size_t v7 = (4 * a3 + 31) & 0xFFFFFFFFFFFFFFE0;
  *a1 = 0;
  a1[1] = (void *)(v7 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  uint64_t v8 = memptr;
  *a1 = memptr;
  if (a3) {
    memcpy(v8, *a2, v6);
  }
  return a1;
}

uint64_t vg::hrtf::RectifyImpl::rectifyColor(vg::hrtf::RectifyImpl *this, IOSurface *a2, IOSurface *a3)
{
  uint64_t v5 = a2;
  size_t v6 = a3;
  if (vg::hrtf::detail::map<unsigned char>((uint64_t)this, 0, v5, v6)) {
    uint64_t v7 = vg::hrtf::detail::map<unsigned short>((uint64_t *)this + 3, 1, v5, v6);
  }
  else {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_260CCD910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::map<unsigned char>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v31 = a4;
  unint64_t v8 = [v7 heightOfPlaneAtIndex:a2];
  unint64_t v9 = [v7 widthOfPlaneAtIndex:a2];
  uint64_t v10 = [v7 bytesPerRowOfPlaneAtIndex:a2];
  uint64_t v11 = [v31 bytesPerRowOfPlaneAtIndex:a2];
  id v12 = v7;
  uint64_t v13 = [v12 baseAddressOfPlaneAtIndex:a2];
  id v14 = v31;
  uint64_t v15 = [v14 baseAddressOfPlaneAtIndex:a2];
  BOOL v16 = *(_DWORD *)(a1 + 16) == 2 * v9 && v8 == *(_DWORD *)(a1 + 20);
  int v17 = v16;
  unsigned int v32 = v17;
  if (v16)
  {
    uint64_t v18 = v15;
    [v14 lockWithOptions:0 seed:0];
    [v12 lockWithOptions:1 seed:0];
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 3221225472;
    uint8_t v35[2] = ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke;
    v35[3] = &unk_265570218;
    int v36 = v14;
    uint64_t v30 = (void (**)(void))MEMORY[0x261227FC0](v35);
    v33[0] = MEMORY[0x263EF8330];
    v33[1] = 3221225472;
    v33[2] = ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2;
    v33[3] = &unk_265570218;
    id v34 = v12;
    uint64_t v19 = MEMORY[0x261227FC0](v33);
    uint64_t v20 = (void *)v19;
    if (v8)
    {
      for (unsigned int i = 0; i < v8; ++i)
      {
        if (v9)
        {
          uint64_t v22 = 0;
          int v23 = 1;
          do
          {
            unsigned int v24 = v23 + i * *(_DWORD *)(a1 + 16);
            uint64_t v25 = *(unsigned int *)(*(void *)a1 + 4 * (v24 - 1));
            if ((v25 & 0x80000000) != 0) {
              char v26 = 0;
            }
            else {
              char v26 = *(unsigned char *)(v13 + v10 * *(int *)(*(void *)a1 + 4 * v24) + v25);
            }
            *(unsigned char *)(v18 + v22++) = v26;
            v23 += 2;
          }
          while (v9 > v22);
        }
        v18 += v11;
      }
    }
    (*(void (**)(uint64_t))(v19 + 16))(v19);

    v30[2](v30);
    uint64_t v27 = v36;
  }
  else
  {
    uint64_t v27 = __VGLogSharedInstance();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v27, OS_LOG_TYPE_ERROR, " Lookup table dimension mismatch. ", buf, 2u);
    }
  }

  return v32;
}

void sub_260CCDBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::map<unsigned short>(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v33 = a4;
  unint64_t v8 = [v7 heightOfPlaneAtIndex:a2];
  unint64_t v9 = [v7 widthOfPlaneAtIndex:a2];
  uint64_t v10 = [v7 bytesPerRowOfPlaneAtIndex:a2];
  uint64_t v11 = [v33 bytesPerRowOfPlaneAtIndex:a2];
  id v12 = v7;
  uint64_t v13 = [v12 baseAddressOfPlaneAtIndex:a2];
  id v14 = v33;
  uint64_t v15 = [v14 baseAddressOfPlaneAtIndex:a2];
  BOOL v16 = *((_DWORD *)a1 + 4) == 2 * v9 && v8 == *((_DWORD *)a1 + 5);
  int v17 = v16;
  unsigned int v34 = v17;
  if (v16)
  {
    uint64_t v18 = v15;
    [v14 lockWithOptions:0 seed:0];
    [v12 lockWithOptions:1 seed:0];
    v37[0] = MEMORY[0x263EF8330];
    v37[1] = 3221225472;
    v37[2] = ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke;
    v37[3] = &unk_265570218;
    float v38 = v14;
    unsigned int v32 = (void (**)(void))MEMORY[0x261227FC0](v37);
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 3221225472;
    uint8_t v35[2] = ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2;
    v35[3] = &unk_265570218;
    id v36 = v12;
    uint64_t v19 = MEMORY[0x261227FC0](v35);
    uint64_t v20 = (void *)v19;
    if (v8)
    {
      uint64_t v21 = 0;
      int v22 = *((_DWORD *)a1 + 4);
      uint64_t v23 = *a1;
      int v24 = 1;
      do
      {
        if (v9)
        {
          uint64_t v25 = 0;
          unsigned int v26 = v24;
          do
          {
            uint64_t v27 = *(unsigned int *)(v23 + 4 * (v26 - 1));
            if ((v27 & 0x80000000) != 0) {
              __int16 v28 = 0;
            }
            else {
              __int16 v28 = *(_WORD *)(v13 + v10 * *(int *)(v23 + 4 * v26) + 2 * v27);
            }
            *(_WORD *)(v18 + 2 * v25++) = v28;
            v26 += 2;
          }
          while (v9 > v25);
        }
        ++v21;
        v18 += v11;
        v24 += v22;
      }
      while (v8 > v21);
    }
    (*(void (**)(uint64_t))(v19 + 16))(v19);

    v32[2](v32);
    long long v29 = v38;
  }
  else
  {
    long long v29 = __VGLogSharedInstance();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_260C8D000, v29, OS_LOG_TYPE_ERROR, " Lookup table dimension mismatch. ", buf, 2u);
    }
  }

  return v34;
}

void sub_260CCDEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::RectifyImpl::rectifyDepth(vg::hrtf::RectifyImpl *this, IOSurface *a2, IOSurface *a3)
{
  uint64_t v5 = a2;
  size_t v6 = a3;
  if ([(IOSurface *)v5 pixelFormat] != 1278226534
    && [(IOSurface *)v5 pixelFormat] != 1717855600)
  {
    uint64_t v23 = __VGLogSharedInstance();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      int v24 = " Invalid depth image format. ";
      goto LABEL_19;
    }
LABEL_20:

    uint64_t v22 = 0;
    goto LABEL_21;
  }
  uint64_t v7 = *((unsigned int *)this + 16);
  if (v7 != 2 * [(IOSurface *)v5 width]
    || (uint64_t v8 = *((unsigned int *)this + 17), [(IOSurface *)v5 height] != v8))
  {
    uint64_t v23 = __VGLogSharedInstance();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      int v24 = " Depth lookup table dimension mismatch. ";
LABEL_19:
      _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)buf, 2u);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v5, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v26, v6, 0);
  unint64_t v9 = [(IOSurface *)v5 height];
  unint64_t v10 = [(IOSurface *)v5 width];
  if (v9)
  {
    unsigned int v11 = 0;
    id v12 = (char *)v26[2];
    uint64_t v13 = (char *)v26[3];
    do
    {
      if (v10)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *((void *)this + 6);
        uint64_t v16 = v28;
        uint64_t v17 = v29;
        uint64_t v18 = v30;
        unsigned int v19 = *((_DWORD *)this + 16) * v11;
        do
        {
          uint64_t v20 = *(unsigned int *)(v15 + 4 * v19);
          if ((v20 & 0x80000000) != 0) {
            int v21 = 0;
          }
          else {
            int v21 = *(_DWORD *)(v16 + v17 * *(int *)(v15 + 4 * (v19 + 1)) + v18 * v20);
          }
          *(_DWORD *)&v12[4 * v14++] = v21;
          v19 += 2;
        }
        while (v10 > v14);
      }
      ++v11;
      id v12 = &v13[(void)v12];
    }
    while (v9 > v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v26);
  vg::IOSurfaceData::~IOSurfaceData(buf);
  uint64_t v22 = 1;
LABEL_21:

  return v22;
}

void sub_260CCE140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  id v5 = va_arg(va1, id);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void vg::hrtf::RectifyImpl::process(float32x2_t *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, IOSurface *a4@<X3>, IOSurface *a5@<X4>, simd_float3x3 a6@<0:Q0, 16:Q1, 32:Q2>, VGHRTFDepthCalibrationData *a7@<X5>, uint64_t a8@<X8>)
{
  simd_float3x3 v68 = a6;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v74 = a5;
  uint64_t v17 = a7;
  id v18 = [(VGHRTFDepthCalibrationData *)v17 lensDistortionLut];
  unint64_t v19 = [v18 length];
  id v20 = v18;
  int v21 = (_DWORD *)[v20 bytes];
  v19 >>= 2;
  uint64_t v78 = 0;
  unint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<float>::reserve((void **)&v78, v19);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(v21, &v21[v19], (uint64_t)&v78);

  if (!this[20].i8[0]) {
    goto LABEL_14;
  }
  unint64_t v22 = v79 - v78;
  uint64_t v23 = (float *)this[17];
  if (v22 != (uint64_t)(*(void *)&this[18] - (void)v23) >> 2) {
    goto LABEL_14;
  }
  if (v79 != v78)
  {
    uint64_t v24 = v22 <= 1 ? 1 : v79 - v78;
    if (vabds_f32(*v78, *v23) > 0.000001) {
      goto LABEL_14;
    }
    uint64_t v25 = 1;
    do
    {
      unint64_t v26 = v25;
      if (v24 == v25) {
        break;
      }
      float v27 = vabds_f32(v78[v25], v23[v25]);
      ++v25;
    }
    while (v27 <= 0.000001);
    if (v26 < v22) {
      goto LABEL_14;
    }
  }
  [(VGHRTFDepthCalibrationData *)v17 lensDistortionCenter];
  float32x2_t v29 = vsub_f32(v28, this[16]);
  if (fabsf(v29.f32[0]) > 0.000001 || fabsf(v29.f32[1]) > 0.000001)
  {
LABEL_14:
    uint64_t v30 = [(IOSurface *)v16 width];
    [(VGHRTFDepthCalibrationData *)v17 intrinsicMatrixReferenceDimension];
    float v72 = v31;
    [(VGHRTFDepthCalibrationData *)v17 lensDistortionCenter];
    float v70 = v32;
    [(VGHRTFDepthCalibrationData *)v17 lensDistortionCenter];
    float32x2_t v69 = v33;
    uint64_t v34 = [(IOSurface *)v14 width];
    uint64_t v35 = [(IOSurface *)v16 width];
    uint64_t v36 = [(IOSurface *)v14 width];
    uint64_t v37 = [(IOSurface *)v14 height];
    float v38 = (float)v30 / v72;
    v39.f32[0] = v38 * v70;
    float v71 = v38;
    v39.i32[1] = vmuls_lane_f32(v38, v69, 1);
    double v73 = *(double *)&v39;
    float32x2_t v40 = vmul_n_f32(v39, (float)v34 / (float)v35);
    *(float *)&double v41 = (float)v36;
    *((float *)&v41 + 1) = (float)v37;
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v41, *(double *)&v40);
    unint64_t v42 = (void *)*this;
    float32x2_t v43 = v76;
    *this = *(float32x2_t *)buf;
    this[1] = v43;
    this[2] = v77;
    free(v42);
    uint64_t v44 = [(IOSurface *)v14 width];
    uint64_t v45 = [(IOSurface *)v14 height];
    if (v44 >= 0) {
      uint64_t v46 = v44;
    }
    else {
      uint64_t v46 = v44 + 1;
    }
    *(float *)&double v47 = (float)(v46 >> 1);
    if (v45 >= 0) {
      uint64_t v48 = v45;
    }
    else {
      uint64_t v48 = v45 + 1;
    }
    *((float *)&v47 + 1) = (float)(v48 >> 1);
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v47, COERCE_DOUBLE(vmul_f32(v40, (float32x2_t)0x3F0000003F000000)));
    unint64_t v49 = (void *)this[3];
    float32x2_t v50 = v76;
    this[3] = *(float32x2_t *)buf;
    this[4] = v50;
    this[5] = v77;
    free(v49);
    uint64_t v51 = [(IOSurface *)v16 width];
    uint64_t v52 = [(IOSurface *)v16 height];
    *(float *)&double v53 = (float)v51;
    *((float *)&v53 + 1) = (float)v52;
    vg::hrtf::detail::buildLUT((uint64_t *)&v78, (uint64_t)buf, v53, v73);
    uint64_t v54 = (void *)this[6];
    float32x2_t v55 = v76;
    this[6] = *(float32x2_t *)buf;
    this[7] = v55;
    this[8] = v77;
    free(v54);
    [(VGHRTFDepthCalibrationData *)v17 intrinsicMatrix];
    float32x4_t v57 = vmulq_n_f32(v56, v71);
    float32x4_t v59 = vmulq_n_f32(v58, v71);
    this[11].i32[0] = v57.i32[2];
    this[10] = *(float32x2_t *)v57.f32;
    this[13].i32[0] = v59.i32[2];
    this[12] = *(float32x2_t *)v59.f32;
    this[15].i32[0] = 1065353216;
    this[14] = (float32x2_t)vmulq_n_f32(v60, v71).u64[0];
    [(VGHRTFDepthCalibrationData *)v17 lensDistortionCenter];
    this[16] = v61;
    if (&this[17] != (float32x2_t *)&v78) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&this[17], (char *)v78, (uint64_t)v79, v79 - v78);
    }
    this[20].i8[0] = 1;
  }
  if (vg::hrtf::RectifyImpl::rectifyColor((vg::hrtf::RectifyImpl *)this, v14, v15))
  {
    if (vg::hrtf::RectifyImpl::rectifyDepth((vg::hrtf::RectifyImpl *)this, v16, v74))
    {
      id v62 = v15;
      unint64_t v63 = v74;
      *(void *)a8 = v62;
      *(simd_float3x3 *)(a8 + 16) = v68;
      *(void *)(a8 + 64) = v63;
      long long v64 = *(_OWORD *)this[12].f32;
      *(_OWORD *)(a8 + 8std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = *(_OWORD *)this[10].f32;
      *(_OWORD *)(a8 + 96) = v64;
      char v65 = 1;
      *(_OWORD *)(a8 + 112) = *(_OWORD *)this[14].f32;
      goto LABEL_32;
    }
    int v66 = __VGLogSharedInstance();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      DSPSplitComplex v67 = " Failed to rectify depth image. ";
      goto LABEL_30;
    }
  }
  else
  {
    int v66 = __VGLogSharedInstance();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      DSPSplitComplex v67 = " Failed to rectify YUV image. ";
LABEL_30:
      _os_log_impl(&dword_260C8D000, v66, OS_LOG_TYPE_ERROR, v67, buf, 2u);
    }
  }

  char v65 = 0;
  *(unsigned char *)a8 = 0;
LABEL_32:
  *(unsigned char *)(a8 + 128) = v65;
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
}

void sub_260CCE61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  float32x2_t v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v28;
    operator delete(v28);
  }

  _Unwind_Resume(a1);
}

uint64_t vg::hrtf::detail::buildLUT@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v6 = *((float *)&a3 + 1);
  int v7 = (int)*(float *)&a3;
  int v8 = (int)*((float *)&a3 + 1);
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  int v11 = 2 * (int)*(float *)&a3;
  size_t v12 = (4 * (v11 * (int)*((float *)&a3 + 1)) + 31) & 0x7FFFFFFE0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v12 >> 2;
  memptr = 0;
  uint64_t result = malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  uint64_t v14 = memptr;
  *(void *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 2std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v8;
  if (*(float *)&a3 > 0.0)
  {
    int v15 = 0;
    unsigned int v16 = 0;
    float32x2_t v17 = vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a4);
    float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, *(float32x2_t *)&a4), (int8x8_t)v17, *(int8x8_t *)&a4);
    float v19 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
    uint64_t v20 = ((v9 - v10) >> 2) - 1;
    float v21 = 0.0;
    do
    {
      if (v6 > 0.0)
      {
        float v22 = v21 - *(float *)&a4;
        uint64_t v23 = *a1;
        float v24 = 0.0;
        unsigned int v25 = 1;
        int v26 = v15;
        do
        {
          float v27 = v24 - *((float *)&a4 + 1);
          float v28 = sqrtf(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v27), LODWORD(v22)), (float32x2_t)__PAIR64__(LODWORD(v27), LODWORD(v22)))));
          if (v28 >= v19)
          {
            float v30 = *(float *)(v23 + 4 * v20);
          }
          else
          {
            float v29 = (float)(v28 * (float)(unint64_t)v20) / v19;
            float v30 = (float)((float)(v29 - (float)(int)v29) * *(float *)(v23 + 4 * (int)v29 + 4))
                + (float)((float)(1.0 - (float)(v29 - (float)(int)v29)) * *(float *)(v23 + 4 * (int)v29));
          }
          float v31 = v30 + 1.0;
          int v32 = (int)(float)(*(float *)&a4 + (float)(v22 * v31));
          if (v32 < 0)
          {
            int v32 = -1;
            int v33 = -1;
          }
          else
          {
            int v33 = (int)(float)(*((float *)&a4 + 1) + (float)(v27 * v31));
            BOOL v35 = v32 < v7 && v33 >= 0;
            uint64_t result = v33 < v8;
            if ((v35 & result) == 0)
            {
              int v32 = -1;
              int v33 = -1;
            }
          }
          v14[v26] = v32;
          v14[v26 + 1] = v33;
          float v24 = (float)v25;
          v26 += v11;
          ++v25;
        }
        while (v6 > v24);
      }
      float v21 = (float)++v16;
      v15 += 2;
    }
    while (*(float *)&a3 > (float)v16);
  }
  return result;
}

void vg::hrtf::Rectify::create(vg::hrtf::Rectify *this)
{
}

void sub_260CCE90C(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void vg::hrtf::Rectify::Rectify(vg::hrtf::Rectify *this)
{
}

{
  operator new();
}

void vg::hrtf::Rectify::~Rectify(vg::hrtf::Rectify *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::Rectify::process(vg::hrtf::Rectify *this@<X0>, IOSurface *a2@<X1>, IOSurface *a3@<X2>, simd_float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, VGHRTFDepthCalibrationData *a5@<X3>, uint64_t a6@<X8>)
{
  v55[4] = *MEMORY[0x263EF8340];
  int v8 = a2;
  uint64_t v46 = a3;
  uint64_t v45 = a5;
  id v9 = objc_alloc(MEMORY[0x263F0ED00]);
  v54[0] = *MEMORY[0x263F0ECF8];
  uint64_t v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v46, "width"));
  v55[0] = v10;
  v54[1] = *MEMORY[0x263F0ECC0];
  int v11 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v46, "height"));
  uint64_t v12 = *MEMORY[0x263F0ECC8];
  v55[1] = v11;
  v55[2] = &unk_270CFDBA0;
  uint64_t v13 = *MEMORY[0x263F0ECA0];
  v54[2] = v12;
  v54[3] = v13;
  v55[3] = &unk_270CFDBB8;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:4];
  uint64_t v44 = (IOSurface *)[v9 initWithProperties:v14];

  int v15 = (void *)MEMORY[0x263F0ECF0];
  v51[0] = *MEMORY[0x263F0ECF0];
  unsigned int v16 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v8, "width"));
  v52[0] = v16;
  float32x2_t v17 = (void *)MEMORY[0x263F0ECE0];
  v51[1] = *MEMORY[0x263F0ECE0];
  float32x2_t v18 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v8, "height"));
  float v19 = (void *)MEMORY[0x263F0ECD0];
  v51[2] = *MEMORY[0x263F0ECD0];
  v52[1] = v18;
  v52[2] = &unk_270CFDBD0;
  uint64_t v20 = [NSDictionary dictionaryWithObjects:v52 forKeys:v51 count:3];
  v53[0] = v20;
  v49[0] = *v15;
  float v21 = NSNumber;
  uint64_t v22 = [(IOSurface *)v8 width];
  if (v22 >= 0) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  float v24 = objc_msgSend(v21, "numberWithInteger:", v23 >> 1, this, a6, *(_OWORD *)a4.columns, *(_OWORD *)&a4.columns[1], *(_OWORD *)&a4.columns[2]);
  v50[0] = v24;
  v49[1] = *v17;
  unsigned int v25 = NSNumber;
  uint64_t v26 = [(IOSurface *)v8 height];
  if (v26 >= 0) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = v26 + 1;
  }
  float v28 = [v25 numberWithInteger:v27 >> 1];
  v49[2] = *v19;
  v50[1] = v28;
  v50[2] = &unk_270CFDBE8;
  float v29 = [NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:3];
  v53[1] = v29;
  float v30 = [MEMORY[0x263EFF8C0] arrayWithObjects:v53 count:2];

  id v31 = objc_alloc(MEMORY[0x263F0ED00]);
  v47[0] = *MEMORY[0x263F0ECF8];
  int v32 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v8, "width"));
  v48[0] = v32;
  v47[1] = *MEMORY[0x263F0ECC0];
  int v33 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v8, "height"));
  uint64_t v34 = *MEMORY[0x263F0ECC8];
  v48[1] = v33;
  v48[2] = &unk_270CFDC00;
  uint64_t v35 = *MEMORY[0x263F0ECE8];
  v47[2] = v34;
  v47[3] = v35;
  v48[3] = v30;
  uint64_t v36 = [NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:4];
  uint64_t v37 = (IOSurface *)[v31 initWithProperties:v36];

  vg::hrtf::RectifyImpl::process(*v39, v8, v37, v46, v44, v43, v45, v41);
}

void sub_260CCEE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  id v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      int v8 = *(_DWORD **)v4;
      id v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    int v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    int v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___ZN2vg4hrtf6detail3mapIhEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:1 seed:0];
}

uint64_t ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___ZN2vg4hrtf6detail3mapItEEbRKN3cva6MatrixIiLj0ELj0ELb0EEEmP9IOSurfaceS9__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:1 seed:0];
}

void std::default_delete<vg::hrtf::RectifyImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 136);
    if (v3)
    {
      *(void *)(a2 + 144) = v3;
      operator delete(v3);
    }
    free(*(void **)(a2 + 48));
    free(*(void **)(a2 + 24));
    free(*(void **)a2);
    JUMPOUT(0x2612278D0);
  }
}

id vg::hrtf::createUserData(uint64_t a1, uint64_t a2)
{
  v17[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (!v2)
  {
    id v5 = __VGLogSharedInstance();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v15 = 0;
      uint64_t v13 = " No CTF values found for user data field in IRData. ";
LABEL_12:
      _os_log_impl(&dword_260C8D000, v5, OS_LOG_TYPE_ERROR, v13, v15, 2u);
    }
LABEL_13:
    unint64_t v12 = 0;
    goto LABEL_14;
  }
  if (*(_DWORD *)(a2 + 16) != v2)
  {
    id v5 = __VGLogSharedInstance();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v15 = 0;
      uint64_t v13 = " Left and right CTF values must be of same length. ";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v7 = 0;
  uint64_t v8 = 4 * v2;
  do
  {
    LODWORD(v6) = *(_DWORD *)(*(void *)a1 + v7);
    uint64_t v9 = [NSNumber numberWithFloat:v6];
    [v5 addObject:v9];

    v7 += 4;
  }
  while (v8 != v7);
  uint64_t v10 = 0;
  do
  {
    LODWORD(v6) = *(_DWORD *)(*(void *)a2 + v10);
    uint64_t v11 = [NSNumber numberWithFloat:v6];
    [v5 addObject:v11];

    v10 += 4;
  }
  while (v8 != v10);
  v16[0] = @"DiffuseFieldPowerRMS";
  v16[1] = @"CTF";
  v17[0] = &unk_270CFD8F0;
  v17[1] = v5;
  unint64_t v12 = [NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
LABEL_14:

  return v12;
}

void sub_260CCF358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::hrtfToIRData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6 == *(_DWORD *)(a2 + 16)
    && (unint64_t v9 = *(unsigned int *)(a1 + 20), v9 == *(_DWORD *)(a2 + 20))
    && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a4 + 16))
  {
    LODWORD(v57) = 0;
    std::vector<float>::vector(v60, 4 * v6, &v57);
    std::vector<std::vector<float>>::vector(v56, v9, (uint64_t)v60);
    if (*(void *)v60)
    {
      float32x2_t v61 = *(void **)v60;
      operator delete(*(void **)v60);
    }
    if (v9)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 2 * v6;
      do
      {
        vg::hrtf::getTaps(a1, v13, (uint64_t)v60);
        vg::hrtf::getTaps(a2, v13, (uint64_t)&v57);
        *(_DWORD *)std::string buf = 0;
        std::vector<float>::vector(&__p, v14, buf);
        if (vg::hrtf::makeMinimumPhase((float **)v60, (float **)&__p))
        {
          LODWORD(v50[0]) = 0;
          std::vector<float>::vector(buf, v14, v50);
          if (!vg::hrtf::makeMinimumPhase(&v57, (float **)buf))
          {
            float32x2_t v18 = __VGLogSharedInstance();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v50[0]) = 0;
              _os_log_impl(&dword_260C8D000, v18, OS_LOG_TYPE_ERROR, " Failed to transform right HRTF coefficients from the frequency domain to the time domain. ", (uint8_t *)v50, 2u);
            }

            *a5 = 0;
            a5[1] = 0;
            int v16 = 1;
LABEL_20:
            int v15 = *(void **)buf;
            if (!*(void *)buf) {
              goto LABEL_22;
            }
LABEL_21:
            uint64_t v52 = v15;
            operator delete(v15);
            goto LABEL_22;
          }
          if (v55 != __p) {
            memmove(*(void **)(v56[0] + v12), __p, v55 - (unsigned char *)__p);
          }
          int v15 = *(void **)buf;
          if (v52 != *(const void **)buf)
          {
            memmove((void *)(*(void *)(v56[0] + v12) + v55 - (unsigned char *)__p), *(const void **)buf, (size_t)v52 - *(void *)buf);
            int v16 = 0;
            goto LABEL_20;
          }
          int v16 = 0;
          if (*(void *)buf) {
            goto LABEL_21;
          }
        }
        else
        {
          float32x2_t v17 = __VGLogSharedInstance();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, " Failed to transform left HRTF coefficients from the frequency domain to the time domain. ", buf, 2u);
          }

          *a5 = 0;
          a5[1] = 0;
          int v16 = 1;
        }
LABEL_22:
        if (__p)
        {
          float32x2_t v55 = __p;
          operator delete(__p);
        }
        if (v57)
        {
          float32x4_t v58 = v57;
          operator delete(v57);
        }
        if (*(void *)v60)
        {
          float32x2_t v61 = *(void **)v60;
          operator delete(*(void **)v60);
        }
        if (v16) {
          goto LABEL_61;
        }
        ++v13;
        v12 += 24;
      }
      while (v9 != v13);
    }
    LODWORD(v57) = 0;
    std::vector<float>::vector(v60, 2uLL, &v57);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v60);
    if (*(void *)v60)
    {
      float32x2_t v61 = *(void **)v60;
      operator delete(*(void **)v60);
    }
    if (v9)
    {
      uint64_t v20 = *(int **)a3;
      float v21 = (_DWORD **)__p;
      unint64_t v22 = v9;
      uint64_t v23 = *(_DWORD **)a4;
      do
      {
        int v24 = *v20++;
        int v25 = v24;
        uint64_t v27 = *v21;
        v21 += 3;
        uint64_t v26 = v27;
        _DWORD *v27 = v25;
        LODWORD(v27) = *v23++;
        v26[1] = v27;
        --v22;
      }
      while (v22);
      float v28 = (float **)__p;
      do
      {
        float v30 = *v28;
        v28 += 3;
        float v29 = v30;
        float v32 = *v30;
        float v31 = v30[1];
        if (v31 >= *v30) {
          float v33 = v32;
        }
        else {
          float v33 = v31;
        }
        float *v29 = v32 - v33;
        v29[1] = v31 - v33;
        --v9;
      }
      while (v9);
    }
    uint64_t v34 = operator new(8uLL);
    *(void *)std::string buf = v34;
    void *v34 = 1;
    uint64_t v52 = v34 + 1;
    double v53 = v34 + 1;
    uint64_t v35 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
    uint64_t v36 = [v35 stringByAppendingPathComponent:@"ir_coordinates/ir_dimensions.bin"];

    id v37 = v36;
    float v38 = std::string::basic_string[abi:ne180100]<0>(v60, (char *)[v37 UTF8String]);
    vg::load2DVectorData<float>(v38, 0xB1AuLL, 2uLL, (uint64_t)&v57);
    if (v62 < 0) {
      operator delete(*(void **)v60);
    }

    vg::toStdVector<float>((uint64_t *)&v57, v50);
    free(v57);
    float32x2_t v39 = operator new(8uLL);
    double v47 = v39;
    void *v39 = 0x43B4000000000000;
    uint64_t v48 = v39 + 1;
    unint64_t v49 = v39 + 1;
    float32x2_t v40 = operator new(8uLL);
    uint64_t v44 = v40;
    *float32x2_t v40 = 0x100000001;
    uint64_t v45 = v40 + 1;
    uint64_t v46 = v40 + 1;
    v42[0] = 0;
    v42[1] = 0;
    CFTypeRef cf = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v42);
    uint64_t v41 = operator new(0x20uLL);
    v41[1] = 0;
    v41[2] = 0;
    void *v41 = &unk_270CEEE88;
    std::string::basic_string[abi:ne180100]<0>(v60, "");
    float32x4_t v57 = 0;
    float32x4_t v58 = 0;
    uint64_t v59 = 0;
    IR::IRData::IRData();
    if (v57)
    {
      float32x4_t v58 = v57;
      operator delete(v57);
    }
    if (v62 < 0) {
      operator delete(*(void **)v60);
    }
    *a5 = v41 + 3;
    a5[1] = v41;
    if (cf) {
      CFRelease(cf);
    }
    if (v44)
    {
      uint64_t v45 = v44;
      operator delete(v44);
    }
    if (v47)
    {
      uint64_t v48 = v47;
      operator delete(v47);
    }
    *(void *)float32x4_t v60 = v50;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
    if (*(void *)buf)
    {
      uint64_t v52 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
    *(void *)float32x4_t v60 = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
LABEL_61:
    *(void *)float32x4_t v60 = v56;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  }
  else
  {
    float v19 = __VGLogSharedInstance();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float32x4_t v60 = 0;
      _os_log_impl(&dword_260C8D000, v19, OS_LOG_TYPE_ERROR, " Invalid inputs for HRTF to IRData conversion. ", v60, 2u);
    }

    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_260CCF8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(void *)(v32 - 128) = v34;
    operator delete(v34);
  }
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a16);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  *(void *)(v32 - 136) = &a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  *(void *)(v32 - 136) = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  *(void *)(v32 - 136) = v32 - 160;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 136));
  _Unwind_Resume(a1);
}

void vg::hrtf::getTaps(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(unsigned int *)(a1 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::vector<float>::reserve((void **)a3, v6);
  if (v6)
  {
    int v7 = 0;
    do
    {
      float v8 = __exp10f(*(float *)(*(void *)a1 + 4 * (v7 + *(_DWORD *)(a1 + 16) * a2)) / 20.0);
      float v9 = v8;
      uint64_t v11 = *(float **)(a3 + 8);
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(float **)a3;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a3) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          float32x2_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v17);
          uint64_t v13 = *(float **)a3;
          uint64_t v11 = *(float **)(a3 + 8);
        }
        else
        {
          float32x2_t v18 = 0;
        }
        float v19 = (float *)&v18[4 * v14];
        *float v19 = v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v12;
        *(void *)(a3 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        float *v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a3 + 8) = v12;
      ++v7;
    }
    while (v7 != v6);
  }
}

void sub_260CCFBE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL vg::hrtf::makeMinimumPhase(float **a1, float **a2)
{
  id v5 = *a1;
  uint64_t v4 = a1[1];
  int v7 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v8 = (char *)v6 - (char *)*a2;
  unint64_t v9 = v8 >> 2;
  LODWORD(__Ii[0]) = 0;
  std::vector<float>::vector(v57, v8 >> 2, __Ii);
  BOOL v10 = v4 == v5;
  unint64_t v11 = v4 - v5;
  if (!v10)
  {
    uint64_t v12 = *a1;
    if (v11 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v11;
    }
    uint64_t v14 = (float *)((char *)v57[0] + 4);
    do
    {
      float v15 = *v12++;
      float v16 = logf(v15);
      if (v15 <= 0.000001) {
        float v16 = 0.0;
      }
      *v14++ = v16;
      --v13;
    }
    while (v13);
  }
  if (v11 + 1 < v9)
  {
    unint64_t v17 = v9 + ~v11;
    float32x2_t v18 = (char *)v57[0] + 4 * v11;
    float v19 = v18 + 4;
    int v20 = v18 - 4;
    do
    {
      int v21 = *(_DWORD *)v20;
      v20 -= 4;
      *v19++ = v21;
      --v17;
    }
    while (v17);
  }
  LODWORD(__Or[0]) = 0;
  std::vector<float>::vector(__Ii, v8 >> 2, __Or);
  LODWORD(__Oi[0]) = 0;
  std::vector<float>::vector(__Or, v8 >> 2, __Oi);
  LODWORD(__Ir[0]) = 0;
  std::vector<float>::vector(__Oi, v8 >> 2, __Ir);
  vDSP_DFT_Setup Setup = vDSP_DFT_zop_CreateSetup(0, v8 >> 2, vDSP_DFT_INVERSE);
  BOOL v23 = (BOOL)Setup;
  if (Setup)
  {
    vDSP_DFT_Execute(Setup, (const float *)v57[0], __Ii[0], __Or[0], __Oi[0]);
    vDSP_DFT_DestroySetup((vDSP_DFT_Setup)v23);
    float v24 = 1.0 / (float)v9;
    if (v6 != v7)
    {
      int v25 = __Or[0];
      if (v9 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v8 >> 2;
      }
      do
      {
        float *v25 = v24 * *v25;
        ++v25;
        --v26;
      }
      while (v26);
    }
    LODWORD(v52[0]) = 0;
    std::vector<float>::vector(__Ir, v8 >> 2, v52);
    uint64_t v27 = __Or[0];
    float v28 = __Ir[0];
    *__Ir[0] = *__Or[0];
    uint64_t v29 = ((unint64_t)v8 >> 2) & 1;
    unint64_t v30 = (v29 + v9) >> 1;
    if (v29 + v9 >= 4)
    {
      uint64_t v31 = 2;
      if (v30 > 2) {
        uint64_t v31 = (v29 + v9) >> 1;
      }
      uint64_t v32 = v31 - 1;
      float v33 = v27 + 1;
      uint64_t v34 = v28 + 1;
      do
      {
        float v35 = *v33++;
        *v34++ = v35 + v35;
        --v32;
      }
      while (v32);
    }
    if (!v29) {
      v28[v30] = v27[v30];
    }
    uint64_t v36 = vDSP_DFT_zop_CreateSetup(0, v8 >> 2, vDSP_DFT_FORWARD);
    id v37 = v36;
    BOOL v23 = v36 != 0;
    if (v36)
    {
      vDSP_DFT_Execute(v36, __Ir[0], __Ii[0], __Or[0], __Oi[0]);
      vDSP_DFT_DestroySetup(v37);
      LODWORD(v51[0]) = 0;
      std::vector<float>::vector(v52, v9, v51);
      int v50 = 0;
      std::vector<float>::vector(v51, v9, &v50);
      if (v6 != v7)
      {
        float v38 = __Or[0];
        float32x2_t v39 = __Oi[0];
        float32x2_t v40 = v52[0];
        uint64_t v41 = v51[0];
        if (v9 <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v9;
        }
        do
        {
          float v43 = *v38++;
          float v44 = expf(v43);
          *v40++ = v44 * cosf(*v39);
          float v45 = *v39++;
          *v41++ = v44 * sinf(v45);
          --v42;
        }
        while (v42);
      }
      uint64_t v46 = vDSP_DFT_zop_CreateSetup(0, v9, vDSP_DFT_INVERSE);
      vDSP_DFT_Execute(v46, v52[0], v51[0], *a2, __Oi[0]);
      vDSP_DFT_DestroySetup(v46);
      if (v6 != v7)
      {
        double v47 = *a2;
        if (v9 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v9;
        }
        do
        {
          float *v47 = v24 * *v47;
          ++v47;
          --v48;
        }
        while (v48);
      }
      if (v51[0])
      {
        v51[1] = v51[0];
        operator delete(v51[0]);
      }
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
    }
    if (__Ir[0])
    {
      __Ir[1] = __Ir[0];
      operator delete(__Ir[0]);
    }
  }
  if (__Oi[0])
  {
    __Oi[1] = __Oi[0];
    operator delete(__Oi[0]);
  }
  if (__Or[0])
  {
    __Or[1] = __Or[0];
    operator delete(__Or[0]);
  }
  if (__Ii[0])
  {
    __Ii[1] = __Ii[0];
    operator delete(__Ii[0]);
  }
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  return v23;
}

void sub_260CCFFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void vg::toStdVector<float>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((unsigned int *)a1 + 4);
  std::vector<float>::vector(__p, *((unsigned int *)a1 + 5));
  std::vector<std::vector<float>>::vector(a2, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v5 = *((unsigned int *)a1 + 4);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((unsigned int *)a1 + 5);
    uint64_t v8 = *a1;
    uint64_t v9 = *a2;
    do
    {
      if (v7)
      {
        BOOL v10 = *(_DWORD **)(v9 + 24 * v6);
        uint64_t v11 = v7;
        unsigned int v12 = v6;
        do
        {
          *v10++ = *(_DWORD *)(v8 + 4 * v12);
          v12 += v5;
          --v11;
        }
        while (v11);
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_260CD0124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::getIRValues(IR::IRData **a1@<X0>, uint64_t a2@<X8>)
{
  if (IR::IRData::getNumFiltersPerSpatialPoint(*a1) == 2)
  {
    IR::IRData::getCoordinateTree(&buf, *a1);
    if (buf == 1)
    {
      unint64_t v4 = v58;
      uint64_t v3 = v59;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v60[1] - v60[0]) >> 3) == (v59 - (unsigned char *)v58) >> 2)
      {
        std::string __p = 0;
        float32x2_t v55 = 0;
        float32x4_t v56 = 0;
        if (v59 == (unsigned char *)v58)
        {
          uint64_t v7 = 0;
LABEL_43:
          unint64_t FilterLength = IR::IRData::getFilterLength(*a1);
          vg::hrtf::IRGrid::GetIRGrid(v7, FilterLength, (uint64_t)v50);
          if (v7)
          {
            for (unsigned int i = 0; i != v7; unsigned int i = (vg::hrtf::IRGrid *)((char *)i + 1))
            {
              std::vector<float>::vector(v47, FilterLength);
              std::vector<std::vector<float>>::vector(v49, 2uLL, (uint64_t)v47);
              if (v47[0])
              {
                v47[1] = v47[0];
                operator delete(v47[0]);
              }
              std::vector<float>::vector(v48, 2uLL);
              IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)v47);
              IR::IRCoordinates::set();
              IR::IRCoordinates::set();
              IR::IRData::getInterpolatedTimeDomainCoeffs();
              uint64_t v27 = __p;
              uint64_t v28 = *(void *)&v50[8];
              if (*(void *)&v50[8] >= (unint64_t)v51)
              {
                uint64_t v30 = (uint64_t)(*(void *)&v50[8] - *(void *)v50) >> 3;
                if ((unint64_t)(v30 + 1) >> 61) {
                  std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v31 = (uint64_t)&v51[-*(void *)v50] >> 2;
                if (v31 <= v30 + 1) {
                  unint64_t v31 = v30 + 1;
                }
                if ((unint64_t)&v51[-*(void *)v50] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v31;
                }
                if (v32) {
                  float v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v51, v32);
                }
                else {
                  float v33 = 0;
                }
                uint64_t v34 = &v33[8 * v30];
                *(void *)uint64_t v34 = v27[(void)i];
                uint64_t v29 = v34 + 8;
                uint64_t v36 = *(char **)v50;
                float v35 = *(char **)&v50[8];
                if (*(void *)&v50[8] != *(void *)v50)
                {
                  do
                  {
                    uint64_t v37 = *((void *)v35 - 1);
                    v35 -= 8;
                    *((void *)v34 - 1) = v37;
                    v34 -= 8;
                  }
                  while (v35 != v36);
                  float v35 = *(char **)v50;
                }
                *(void *)int v50 = v34;
                *(void *)&v50[8] = v29;
                uint64_t v51 = &v33[8 * v32];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                **(void **)&v50[8] = *((void *)__p + i);
                uint64_t v29 = (void *)(v28 + 8);
              }
              *(void *)&v50[8] = v29;
              uint64_t v38 = v49[0];
              uint64_t v39 = v52;
              float32x2_t v40 = (char *)(v52 + ((void)i << 6));
              if (v40 != (char *)v49[0])
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v40, *(char **)v49[0], *(void *)(v49[0] + 8), (uint64_t)(*(void *)(v49[0] + 8) - *(void *)v49[0]) >> 2);
                uint64_t v38 = v49[0];
                uint64_t v39 = v52;
              }
              uint64_t v41 = (char *)(v39 + ((void)i << 6) + 32);
              if (v41 != (char *)(v38 + 24))
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v41, *(char **)(v38 + 24), *(void *)(v38 + 32), (uint64_t)(*(void *)(v38 + 32) - *(void *)(v38 + 24)) >> 2);
                uint64_t v39 = v52;
              }
              uint64_t v42 = v48[0];
              uint64_t v43 = v39 + ((void)i << 6);
              *(_DWORD *)(v43 + 24) = *(_DWORD *)v48[0];
              *(_DWORD *)(v43 + 56) = v42[1];
              v48[1] = v42;
              operator delete(v42);
              v47[0] = v49;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
            }
          }
          *(_OWORD *)a2 = *(_OWORD *)v50;
          *(void *)(a2 + 16) = v51;
          memset(v50, 0, sizeof(v50));
          *(_OWORD *)(a2 + 24) = v52;
          *(void *)(a2 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v53;
          uint64_t v51 = 0;
          long long v52 = 0uLL;
          uint64_t v53 = 0;
          *(unsigned char *)(a2 + 48) = 1;
          v47[0] = &v52;
          std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
          if (*(void *)v50)
          {
            *(void *)&v50[8] = *(void *)v50;
            operator delete(*(void **)v50);
          }
        }
        else
        {
          uint64_t v5 = 0;
          uint64_t v6 = 0;
          uint64_t v7 = 0;
          while (1)
          {
            if (*(_DWORD *)(v60[0] + 56 * v6))
            {
              float v44 = __VGLogSharedInstance();
              if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                goto LABEL_75;
              }
              *(_WORD *)int v50 = 0;
              float v45 = " Subnode dimension must be of Azimuth type. ";
              goto LABEL_74;
            }
            if (*(void *)(v60[0] + 56 * v6 + 32) != *(void *)(v60[0] + 56 * v6 + 40)) {
              break;
            }
            uint64_t v8 = v60[0] + 56 * v6;
            BOOL v10 = *(int **)(v8 + 8);
            uint64_t v9 = *(int **)(v8 + 16);
            if (v10 != v9)
            {
              int v11 = v4[v6];
              do
              {
                int v12 = *v10;
                if (v5 >= v56)
                {
                  uint64_t v13 = (char *)__p;
                  uint64_t v14 = (v5 - (unsigned char *)__p) >> 3;
                  unint64_t v15 = v14 + 1;
                  if ((unint64_t)(v14 + 1) >> 61) {
                    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v16 = v56 - (unsigned char *)__p;
                  if ((v56 - (unsigned char *)__p) >> 2 > v15) {
                    unint64_t v15 = v16 >> 2;
                  }
                  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v17 = v15;
                  }
                  if (v17)
                  {
                    float32x2_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v56, v17);
                    uint64_t v13 = (char *)__p;
                    uint64_t v5 = v55;
                  }
                  else
                  {
                    float32x2_t v18 = 0;
                  }
                  float v19 = &v18[8 * v14];
                  *(_DWORD *)float v19 = v11;
                  *((_DWORD *)v19 + 1) = v12;
                  int v20 = v19;
                  if (v5 != v13)
                  {
                    do
                    {
                      uint64_t v21 = *((void *)v5 - 1);
                      v5 -= 8;
                      *((void *)v20 - 1) = v21;
                      v20 -= 8;
                    }
                    while (v5 != v13);
                    uint64_t v13 = (char *)__p;
                  }
                  uint64_t v5 = v19 + 8;
                  std::string __p = v20;
                  float32x2_t v55 = v19 + 8;
                  float32x4_t v56 = &v18[8 * v17];
                  if (v13) {
                    operator delete(v13);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v5 = v11;
                  *((_DWORD *)v5 + 1) = v12;
                  v5 += 8;
                }
                float32x2_t v55 = v5;
                uint64_t v7 = (vg::hrtf::IRGrid *)((char *)v7 + 1);
                ++v10;
              }
              while (v10 != v9);
              unint64_t v4 = v58;
              uint64_t v3 = v59;
            }
            if (++v6 >= (unint64_t)((v3 - (unsigned char *)v4) >> 2)) {
              goto LABEL_43;
            }
          }
          float v44 = __VGLogSharedInstance();
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            goto LABEL_75;
          }
          *(_WORD *)int v50 = 0;
          float v45 = " Unexpected dimension in subnode. ";
LABEL_74:
          _os_log_impl(&dword_260C8D000, v44, OS_LOG_TYPE_ERROR, v45, v50, 2u);
LABEL_75:

          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 48) = 0;
        }
        if (__p)
        {
          float32x2_t v55 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_39;
      }
      BOOL v23 = __VGLogSharedInstance();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v50 = 0;
        float v24 = " Wrong subnode count in coordinate tree. ";
        goto LABEL_37;
      }
    }
    else
    {
      BOOL v23 = __VGLogSharedInstance();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v50 = 0;
        float v24 = " Elevation must be the first level of coordinates in coordinate tree. ";
LABEL_37:
        _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_ERROR, v24, v50, 2u);
      }
    }

    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
LABEL_39:
    *(void *)int v50 = v60;
    std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    return;
  }
  unint64_t v22 = __VGLogSharedInstance();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_260C8D000, v22, OS_LOG_TYPE_ERROR, " Incorrect number of filters in IRData. Expected two filters, left and right ears. ", (uint8_t *)&buf, 2u);
  }

  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
}

void sub_260CD0724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  IR::IRCoordinateTree::~IRCoordinateTree((IR::IRCoordinateTree *)(v29 - 160));
  _Unwind_Resume(a1);
}

void vg::hrtf::IRGrid::GetIRGrid(vg::hrtf::IRGrid *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = this;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  std::vector<void const*>::reserve((void **)a3, (unint64_t)this);
  std::vector<vg::hrtf::IRFilters>::reserve((uint64_t *)(a3 + 24), (unint64_t)v4);
  for (; v4; unint64_t v4 = (vg::hrtf::IRGrid *)((char *)v4 - 1))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    std::string __p = 0;
    std::vector<float>::reserve(&v6, a2);
    std::vector<float>::reserve(&__p, a2);
    std::vector<vg::hrtf::IRFilters>::emplace_back<vg::hrtf::IRFilters&>((uint64_t *)(a3 + 24), (uint64_t)&v6);
    if (__p)
    {
      BOOL v10 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      uint64_t v7 = v6;
      operator delete(v6);
    }
  }
}

void sub_260CD0894(_Unwind_Exception *a1)
{
  vg::hrtf::IRGrid::~IRGrid(v1);
  _Unwind_Resume(a1);
}

void IR::IRCoordinateTree::~IRCoordinateTree(IR::IRCoordinateTree *this)
{
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void vg::hrtf::getIRData(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (v4 - *a1) >> 3;
  uint64_t v7 = (uint64_t *)a1[3];
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, 2uLL, &__p);
  std::vector<std::vector<float>>::vector(v29, v6, (uint64_t)&v33);
  uint64_t v10 = v8 - v9;
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, v10 >> 1, &__p);
  std::vector<std::vector<float>>::vector(v28, v6, (uint64_t)&v33);
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v33, 2uLL, &__p);
  std::vector<std::vector<float>>::vector(v27, v6, (uint64_t)&v33);
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  uint64_t v11 = operator new(8uLL);
  void *v11 = 1;
  uint64_t v26 = v11;
  if (v4 != v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v10 >> 2;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    uint64_t v15 = 4;
    do
    {
      uint64_t v16 = (_DWORD *)(*a1 + v15);
      unint64_t v17 = *(_DWORD **)(v29[0] + v12);
      *unint64_t v17 = *(v16 - 1);
      v17[1] = *v16;
      uint64_t v18 = a1[3];
      float v19 = *(_DWORD **)(v27[0] + v12);
      *float v19 = *(_DWORD *)(v18 + v13 + 24);
      v19[1] = *(_DWORD *)(v18 + v13 + 56);
      int v20 = *(unsigned char **)(v18 + v13);
      uint64_t v21 = *(unsigned char **)(v18 + v13 + 8);
      if (v21 != v20)
      {
        memmove(*(void **)(v28[0] + v12), v20, v21 - v20);
        uint64_t v18 = a1[3];
      }
      uint64_t v22 = v18 + v13;
      BOOL v23 = *(unsigned char **)(v22 + 32);
      float v24 = *(unsigned char **)(v22 + 40);
      if (v24 != v23) {
        memmove((void *)(*(void *)(v28[0] + v12) + 4 * v14), v23, v24 - v23);
      }
      v13 += 64;
      v12 += 24;
      v15 += 8;
      --v6;
    }
    while (v6);
  }
  int v25 = operator new(0x20uLL);
  v25[1] = 0;
  v25[2] = 0;
  void *v25 = &unk_270CEEE88;
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  std::string __p = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  IR::IRData::IRData();
  if (__p)
  {
    unint64_t v31 = __p;
    operator delete(__p);
  }
  if (v35 < 0) {
    operator delete(v33);
  }
  *a2 = v25 + 3;
  a2[1] = v25;
  if (v26) {
    operator delete(v26);
  }
  float v33 = (void **)v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
  float v33 = (void **)v28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
  float v33 = (void **)v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_260CD0BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *__p,char *a29)
{
  if (__p)
  {
    a29 = __p;
    operator delete(__p);
  }
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v32);
  if (a16) {
    operator delete(a16);
  }
  std::string __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_260CD0C9C()
{
  uint64_t v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(void *)(v0 - 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x260CD0C84);
}

void sub_260CD0CB4()
{
}

void sub_260CD0CBC()
{
  uint64_t v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(void *)(v0 - 12std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x260CD0C94);
}

void vg::hrtf::createIRDataWithUserData(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = a2;
  unint64_t v6 = *(atomic_ullong **)(a1 + 8);
  v28[0] = *(IR::IRData **)a1;
  v28[1] = (IR::IRData *)v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  vg::hrtf::getIRValues(v28, (uint64_t)&v29);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  if (v33)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(&v25, v31, v32, (v32 - v31) >> 6);
    if (!v33) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v22 = 0;
    BOOL v23 = 0;
    uint64_t v24 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v22, v29, v30, (v30 - (uint64_t)v29) >> 3);
    IR::IRData::getSampleRate(*(IR::IRData **)a1);
    *(void *)uint64_t buf = 0;
    float v19 = 0;
    uint64_t v20 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(buf, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 3);
    memset(v21, 0, 24);
    std::vector<vg::hrtf::IRFilters>::__init_with_size[abi:ne180100]<vg::hrtf::IRFilters*,vg::hrtf::IRFilters*>(v21, v25, v26, (v26 - v25) >> 6);
    uint64_t PeriodForCyclicalDimensions = IR::IRData::getPeriodForCyclicalDimensions(*(IR::IRData **)a1);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v15, *(const void **)PeriodForCyclicalDimensions, *(void *)(PeriodForCyclicalDimensions + 8), (uint64_t)(*(void *)(PeriodForCyclicalDimensions + 8) - *(void *)PeriodForCyclicalDimensions) >> 2);
    uint64_t InterpolationMethod = IR::IRData::getInterpolationMethod(*(IR::IRData **)a1);
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)InterpolationMethod, *(void *)(InterpolationMethod + 8), (uint64_t)(*(void *)(InterpolationMethod + 8) - *(void *)InterpolationMethod) >> 2);
    if (v5) {
      CFRetain(v5);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    vg::hrtf::getIRData((uint64_t *)buf, a3);
    if (v9) {
      CFRelease(v9);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    if (v15)
    {
      uint64_t v16 = v15;
      operator delete(v15);
    }
    uint64_t v15 = v21;
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    if (*(void *)buf)
    {
      float v19 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (v22)
    {
      BOOL v23 = v22;
      operator delete(v22);
    }
    *(void *)uint64_t buf = &v25;
    std::vector<vg::hrtf::IRFilters>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    uint64_t v10 = __VGLogSharedInstance();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Failed to create IR values from IRData. ", buf, 2u);
    }

    *a3 = 0;
    a3[1] = 0;
  }
  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
}

void sub_260CD0F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<vg::hrtf::IRGrid,false>::~__optional_destruct_base[abi:ne180100](v28 - 120);

  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_260CD10C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void vg::load2DVectorData<float>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = (uint64_t *)*a1;
  }
  uint64_t v8 = objc_msgSend(NSString, "stringWithCString:encoding:", v7, objc_msgSend(NSString, "defaultCStringEncoding"));
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithContentsOfFile:v8];
  std::vector<float>::vector(__p, a3 * a2);
  [v9 getBytes:__p[0] length:4 * a3 * a2];
  size_t v10 = (((4 * a3 * a2) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  uint64_t v11 = memptr;
  *(void *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 2std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = a3;
  uint64_t v12 = (char *)__p[0];
  if (a2)
  {
    LODWORD(v13) = 0;
    do
    {
      if (a3)
      {
        uint64_t v14 = 0;
        int v15 = v13;
        do
        {
          v11[v15] = *(_DWORD *)&v12[4 * v14++];
          v15 += a2;
        }
        while (a3 > v14);
      }
      unint64_t v13 = (v13 + 1);
      v12 += 4 * a3;
    }
    while (v13 < a2);
    uint64_t v12 = (char *)__p[0];
  }
  if (v12)
  {
    __p[1] = v12;
    operator delete(v12);
  }
}

void sub_260CD12CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      unint64_t v6 = *v4;
      uint64_t v7 = v35;
      if (v35 >= v36)
      {
        uint64_t v9 = v35 - keys;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v10 = ((char *)v36 - (char *)keys) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v36, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = (void **)&v12[8 * v9];
        *unint64_t v13 = v6;
        uint64_t v8 = v13 + 1;
        int v15 = keys;
        uint64_t v14 = v35;
        if (v35 != keys)
        {
          do
          {
            uint64_t v16 = *--v14;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = keys;
        }
        keys = v13;
        char v35 = v8;
        uint64_t v36 = (void **)&v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *char v35 = v6;
        uint64_t v8 = v7 + 1;
      }
      char v35 = v8;
      uint64_t v17 = v4[1];
      uint64_t v18 = v32;
      if (v32 >= v33)
      {
        uint64_t v20 = v32 - values;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = ((char *)v33 - (char *)values) >> 2;
        if (v21 <= v20 + 1) {
          unint64_t v21 = v20 + 1;
        }
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          BOOL v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v33, v22);
        }
        else {
          BOOL v23 = 0;
        }
        uint64_t v24 = (void **)&v23[8 * v20];
        unsigned char *v24 = v17;
        float v19 = v24 + 1;
        uint64_t v26 = values;
        uint64_t v25 = v32;
        if (v32 != values)
        {
          do
          {
            uint64_t v27 = *--v25;
            *--uint64_t v24 = v27;
          }
          while (v25 != v26);
          uint64_t v25 = values;
        }
        values = v24;
        uint64_t v32 = v19;
        char v33 = (void **)&v23[8 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        void *v32 = v17;
        float v19 = v18 + 1;
      }
      uint64_t v32 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  CFDictionaryRef v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (values)
  {
    uint64_t v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    char v35 = keys;
    operator delete(keys);
  }
  return v28;
}

void sub_260CD1594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IR::IRCoordinateTree,0>(v4);
      }
      while ((void *)v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<IR::IRCoordinateTree,0>(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return this;
}

void sub_260CD17E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270CEEE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270CEEE88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2612278D0);
}

uint64_t std::__shared_ptr_emplace<IR::IRData>::__on_zero_shared(uint64_t a1)
{
  return MEMORY[0x270F910D8](a1 + 24);
}

uint64_t vg::hrtf::HRTFDecoderModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int isANESupported = vg::shared::VGE5RT::isANESupported((vg::shared::VGE5RT *)a1);
  vg::shared::VGE5RT::compileModel(a2, isANESupported, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&__p);
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v7) {
    (*(void (**)(std::string::size_type))(*(void *)v7 + 8))(v7);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "face_encodings");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v11 = *((void *)v9 + 5);
  uint64_t v10 = *((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ear_encodings");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v13, (unsigned __int8 *)&__p);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v16 = *((void *)v14 + 5);
  uint64_t v15 = *((void *)v14 + 6);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hrtf");
  float v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v19) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v21 = *((void *)v19 + 5);
  uint64_t v20 = *((void *)v19 + 6);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v21;
  *(void *)(a1 + 72) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  uint64_t result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 80), (uint64_t *)&__p);
    std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v25) {
      (*(void (**)(std::string::size_type))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    uint64_t v27 = (E5RT::ExecutionStream *)v30;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&__p, v27);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)(a1 + 16), (uint64_t *)&__p);
    std::string::size_type v28 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v28) {
      (*(void (**)(std::string::size_type))(*(void *)v28 + 8))(v28);
    }
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    uint64_t v29 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*v29);
    }
    *(_OWORD *)uint64_t v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 112) = *((void *)&__p.__r_.__value_.__l + 2);
    return *(void *)(a1 + 16) && *(void *)a1 != 0;
  }
  return result;
}

void vg::hrtf::HRTFDecoderModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) != 32)
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18[0]) = 0;
      uint64_t v9 = " Face encoding input dimension mismatch. ";
LABEL_9:
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)v18, 2u);
    }
LABEL_10:

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 40) != 64)
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18[0]) = 0;
      uint64_t v9 = " Ear encoding input dimension mismatch. ";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
  std::string::size_type v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  uint64_t v24 = v18[0];
  if (v18[0]) {
    operator new();
  }
  uint64_t v25 = 0;
  E5RT::IOPort::BindMemoryObject();
  v18[0] = 0;
  uint64_t v10 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
  uint64_t v11 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v10);
  vg::shared::VGE5RT::convert1DVectorToSurface(a2 + 24, v11);
  E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  E5RT::IOPort::BindMemoryObject();
  v18[0] = 0;
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  uint64_t v20 = *a1;
  uint64_t v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
  E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  uint64_t v13 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
  uint64_t v15 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v14);
  vg::shared::VGE5RT::convertSurfaceTo1DVector(v13, v15, v16, (uint64_t)v18);
  uint64_t v17 = v18[1];
  *(void *)a3 = v18[0];
  *(void *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v19;
  *(unsigned char *)(a3 + 24) = 1;
}

void sub_260CD1F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFDecoderModel::create()
{
}

void sub_260CD2054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::HRTFDecoderModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFDecoderModel::HRTFDecoderModel(vg::hrtf::HRTFDecoderModel *this)
{
}

{
  operator new();
}

void vg::hrtf::HRTFDecoderModel::~HRTFDecoderModel(vg::hrtf::HRTFDecoderModel *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::HRTFDecoderModel::predictHRTFDecoderModel(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL vg::hrtf::DTFModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  vg::shared::VGE5RT::compileModel(a2, 1, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&__p);
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v5) {
    (*(void (**)(std::string::size_type))(*(void *)v5 + 8))(v5);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hrtf");
  std::string::size_type v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = *((void *)v7 + 5);
  uint64_t v8 = *((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v14 = *((void *)v12 + 5);
  uint64_t v13 = *((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ctf");
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (unsigned __int8 *)&__p);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v19 = *((void *)v17 + 5);
  uint64_t v18 = *((void *)v17 + 6);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v18;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  uint64_t v22 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  uint64_t v23 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  uint64_t v24 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v23);
  BOOL result = 0;
  if (v22 && v24)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 80), (uint64_t *)&__p);
    std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      (*(void (**)(std::string::size_type))(*(void *)v26 + 8))(v26);
    }
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 96), (uint64_t *)&__p);
    std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
    std::string::size_type v28 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v34 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 104);
    char v33 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    uint64_t v30 = (E5RT::ExecutionStream *)v33;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&__p, v30);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)(a1 + 16), (uint64_t *)&__p);
    std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v31) {
      (*(void (**)(std::string::size_type))(*(void *)v31 + 8))(v31);
    }
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    uint64_t v32 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v32);
    }
    *(_OWORD *)uint64_t v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 128) = *((void *)&__p.__r_.__value_.__l + 2);
    return *(void *)(a1 + 16) && *(void *)a1 != 0;
  }
  return result;
}

void sub_260CD2554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    vg::hrtf::HRTFDecoderModelImpl::init();
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 284160)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    std::string::size_type v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    uint64_t v25 = v19;
    if (v19) {
      operator new();
    }
    uint64_t v26 = 0;
    E5RT::IOPort::BindMemoryObject();
    uint64_t v19 = 0;
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v23 = *a1;
    uint64_t v24 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    uint64_t v10 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    uint64_t v11 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    uint64_t v13 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v12);
    uint64_t v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
    uint64_t v15 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v14);
    vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v10, v13, v16, (uint64_t)&v19);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v11, v15, v17, (uint64_t)v21);
    *(void *)a3 = v19;
    *(_OWORD *)(a3 + 8) = v20;
    uint64_t v18 = v21[1];
    *(void *)(a3 + 24) = v21[0];
    *(void *)(a3 + 32) = v18;
    *(_DWORD *)(a3 + 4std::unique_ptr<vg::frame_selection::VGBlurDetector>::reset[abi:ne180100]((vg::frame_selection::VGBlurDetector **)this + 25, 0) = v22;
    *(unsigned char *)(a3 + 48) = 1;
  }
  else
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " HRTF input dimension mismatch. ", (uint8_t *)&v19, 2u);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

void sub_260CD2834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a9) {
    (*(void (**)(void *))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFModel::create()
{
}

void sub_260CD2984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<vg::hrtf::DTFModel>::reset[abi:ne180100]((void ****)va, 0);
  _Unwind_Resume(a1);
}

void vg::hrtf::DTFModel::DTFModel(vg::hrtf::DTFModel *this)
{
}

{
  operator new();
}

void vg::hrtf::DTFModel::~DTFModel(void ***this)
{
}

{
  std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0);
}

void vg::hrtf::DTFModel::predictDTFFromHRTF(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t vg::hrtf::DTFBiasModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int isANESupported = vg::shared::VGE5RT::isANESupported((vg::shared::VGE5RT *)a1);
  vg::shared::VGE5RT::compileModel(a2, isANESupported, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&__p);
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v7) {
    (*(void (**)(std::string::size_type))(*(void *)v7 + 8))(v7);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v11 = *((void *)v9 + 5);
  uint64_t v10 = *((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtf_bias");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v16 = *((void *)v14 + 5);
  uint64_t v15 = *((void *)v14 + 6);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  uint64_t result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 64), (uint64_t *)&__p);
    std::string::size_type v20 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v20) {
      (*(void (**)(std::string::size_type))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v25 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    int v22 = (E5RT::ExecutionStream *)v25;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&__p, v22);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)(a1 + 16), (uint64_t *)&__p);
    std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v23) {
      (*(void (**)(std::string::size_type))(*(void *)v23 + 8))(v23);
    }
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    uint64_t v24 = (void **)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*v24);
    }
    *(_OWORD *)uint64_t v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 96) = *((void *)&__p.__r_.__value_.__l + 2);
    return *(void *)(a1 + 16) && *(void *)a1 != 0;
  }
  return result;
}

void sub_260CD2E9C(_Unwind_Exception *a1)
{
}

void sub_260CD2EA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void vg::hrtf::DTFBiasModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 64 && *(_DWORD *)(a2 + 20) == 2842)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    std::string::size_type v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert2DMatrixToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    uint64_t v18 = v14;
    if (v14) {
      operator new();
    }
    uint64_t v19 = 0;
    E5RT::IOPort::BindMemoryObject();
    uint64_t v14 = 0;
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v16 = *a1;
    uint64_t v17 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    uint64_t v10 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    uint64_t v12 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v11);
    vg::shared::VGE5RT::convertSurfaceTo2DMatrix(v10, v12, v13, (uint64_t)&v14);
    *(void *)a3 = v14;
    *(_OWORD *)(a3 + 8) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  else
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " DTF input dimension mismatch. ", (uint8_t *)&v14, 2u);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
}

void sub_260CD30B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFBiasModel::create()
{
}

void sub_260CD31E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::DTFBiasModel>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DTFBiasModel::DTFBiasModel(vg::hrtf::DTFBiasModel *this)
{
}

{
  operator new();
}

void vg::hrtf::DTFBiasModel::~DTFBiasModel(vg::hrtf::DTFBiasModel *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::DTFBiasModel::predictBiasDTF(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void std::default_delete<vg::hrtf::HRTFDecoderModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    }
    JUMPOUT(0x2612278D0);
  }
}

void std::default_delete<vg::hrtf::HRTFDecoderModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 119) < 0) {
      operator delete(*(void **)(a2 + 96));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 88);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::string::size_type v5 = *(std::__shared_weak_count **)(a2 + 56);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unint64_t v6 = *(std::__shared_weak_count **)(a2 + 40);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    std::string::size_type v7 = *(std::__shared_weak_count **)(a2 + 24);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    JUMPOUT(0x2612278D0);
  }
}

void ****std::unique_ptr<vg::hrtf::DTFModel>::reset[abi:ne180100](void ****result, void ***a2)
{
  unint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void **std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFModelImpl::~DTFModelImpl(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::hrtf::DTFModelImpl::~DTFModelImpl(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[11];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[9];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::size_type v5 = (std::__shared_weak_count *)this[7];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)this[5];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::size_type v7 = (std::__shared_weak_count *)this[3];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)this[1];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::default_delete<vg::hrtf::DTFBiasModel>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100]((uint64_t)a2, v3);
    }
    JUMPOUT(0x2612278D0);
  }
}

void std::default_delete<vg::hrtf::DTFBiasModelImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 103) < 0) {
      operator delete(*(void **)(a2 + 80));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::string::size_type v5 = *(std::__shared_weak_count **)(a2 + 40);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unint64_t v6 = *(std::__shared_weak_count **)(a2 + 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    std::string::size_type v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    JUMPOUT(0x2612278D0);
  }
}

uint64_t vg::hrtf::HRTFDecoderModelImpl::init()
{
  OUTLINED_FUNCTION_0_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

std::string *vg::hrtf::HRTFModelImpl::HRTFModelImpl(std::string *this, const vg::hrtf::HRTFModelImplInput *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  }
  this[7].__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(__p[0]) = 0;
  vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(__p, @"com.apple.visage");
  this[7].__r_.__value_.__s.__data_[0] = (std::string::value_type)__p[0];
  uint64_t v11 = __VGLogSharedInstance();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    vg::hrtf::HRTFModelImpl::HRTFModelOptions::description((vg::hrtf::HRTFModelImpl::HRTFModelOptions *)&this[7], __p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v17 = v12;
    _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_INFO, " HRTFModel initialized with options:\n%s ", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  return this;
}

void sub_260CD3988(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::hrtf::HRTFModelImpl::initOptions(vg::hrtf::HRTFModelImpl *this)
{
  unsigned __int8 v2 = 0;
  vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(&v2, @"com.apple.visage");
  return v2;
}

void *vg::hrtf::HRTFModelImpl::HRTFModelOptions::description@<X0>(vg::hrtf::HRTFModelImpl::HRTFModelOptions *this@<X0>, void *a2@<X8>)
{
  v6[5] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this) {
    uint64_t v3 = "true";
  }
  else {
    uint64_t v3 = "false";
  }
  v6[2] = 12;
  v5[2] = 12;
  v6[0] = v3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5[0] = 1;
  v5[1] = (uint64_t)v6;
  uint64_t result = a2;
  std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)a2, "Skip DtfBias model: {}", 22, v5);
  return result;
}

void sub_260CD3B2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::HRTFModelImpl::setDefaultsWithSuiteName(unsigned char *a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:v5];
  long long v4 = [v3 objectForKey:@"skipDtfBiasModel"];

  if (v4) {
    *a1 = [v3 BOOLForKey:@"skipDtfBiasModel"];
  }
}

void sub_260CD3BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL vg::hrtf::HRTFModelImpl::checkInputs(uint64_t a1, void *a2)
{
  return a2[4] - a2[3] == a2[7] - a2[6];
}

void vg::hrtf::HRTFModelImpl::preprocessData(const vg::hrtf::HRTFModelInputs *a1@<X1>, uint64_t a2@<X8>)
{
  id v5 = VGLogHRTFModel();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    vg::hrtf::HRTFModelImpl::preprocessData();
  }

  uint64_t v6 = *(void *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 5) > 2)
  {
    memset(v26, 0, sizeof(v26));
    std::vector<vg::hrtf::FaceFrameData>::__init_with_size[abi:ne180100]<std::__wrap_iter<vg::hrtf::FaceFrameData const*>,std::__wrap_iter<vg::hrtf::FaceFrameData const*>>(v26, v6, v6 + 288, 3uLL);
    vg::hrtf::preprocessFaceCaptureData(v26, 320, 240, (uint64_t)&v23);
    if (v25)
    {
      vg::hrtf::preprocessEarCaptureData((uint64_t *)a1 + 3, 320, 240, 0, (uint64_t)&v20);
      if (v22)
      {
        vg::hrtf::preprocessEarCaptureData((uint64_t *)a1 + 6, 320, 240, 1, (uint64_t)&v17);
        if (v19)
        {
          if (!v25) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          long long v11 = 0uLL;
          uint64_t v12 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v11, v23, v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - v23) >> 4));
          if (!v22) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          long long v13 = 0uLL;
          uint64_t v14 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v13, v20, v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 4));
          if (!v19) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          long long v15 = 0uLL;
          uint64_t v16 = 0;
          std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v15, v17, v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - v17) >> 4));
          *(_OWORD *)a2 = v11;
          *(void *)(a2 + 16) = v12;
          uint64_t v12 = 0;
          long long v11 = 0uLL;
          *(_OWORD *)(a2 + 24) = v13;
          *(void *)(a2 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v14;
          uint64_t v14 = 0;
          long long v13 = 0uLL;
          *(_OWORD *)(a2 + 48) = v15;
          *(void *)(a2 + 64) = v16;
          uint64_t v16 = 0;
          long long v15 = 0uLL;
          *(unsigned char *)(a2 + 72) = 1;
          uint64_t v27 = (void **)&v15;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
          uint64_t v27 = (void **)&v13;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
          uint64_t v27 = (void **)&v11;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v27);
        }
        else
        {
          long long v10 = VGLogHRTFModel();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            vg::hrtf::HRTFModelImpl::preprocessData();
          }

          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 72) = 0;
        }
        if (v19)
        {
          *(void *)&long long v11 = &v17;
          std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
        }
      }
      else
      {
        long long v9 = VGLogHRTFModel();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          vg::hrtf::HRTFModelImpl::preprocessData();
        }

        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 72) = 0;
      }
      if (v22)
      {
        *(void *)&long long v11 = &v20;
        std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
      }
    }
    else
    {
      long long v8 = VGLogHRTFModel();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        vg::hrtf::HRTFModelImpl::preprocessData();
      }

      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 72) = 0;
    }
    if (v25)
    {
      *(void *)&long long v11 = &v23;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
    *(void *)&long long v11 = v26;
    std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  }
  else
  {
    long long v7 = VGLogHRTFModel();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      vg::hrtf::HRTFModelImpl::preprocessData();
    }

    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 72) = 0;
  }
}

void sub_260CD3F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a26)
  {
    a9 = (void **)&a23;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a9);
  }
  if (*(unsigned char *)(v26 - 88))
  {
    a9 = (void **)(v26 - 112);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a9);
  }
  a9 = (void **)(v26 - 80);
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

id VGLogHRTFModel(void)
{
  if (VGLogHRTFModel(void)::onceToken != -1) {
    dispatch_once(&VGLogHRTFModel(void)::onceToken, &__block_literal_global_4);
  }
  uint64_t v0 = (void *)VGLogHRTFModel(void)::handle;

  return v0;
}

void vg::hrtf::HRTFModelImpl::predictHRTFData()
{
  uint64_t v0 = VGLogHRTFModel();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    vg::hrtf::HRTFModelImpl::predictHRTFData();
  }

  LOBYTE(v7) = 0;
  char v8 = 0;
  uint64_t v1 = (vg::shared::VGE5RT *)MEMORY[0x261227DD0]();
  uint64_t v6 = 0;
  if (vg::shared::VGE5RT::isANESupported(v1))
  {
    unsigned __int8 v2 = VGLogHRTFModel();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      vg::hrtf::HRTFModelImpl::predictHRTFData();
    }

    LOBYTE(__p) = 0;
    LOBYTE(v5) = 0;
    vg::hrtf::HRTFDecoderModel::create();
  }
  uint64_t v3 = VGLogHRTFModel();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    vg::hrtf::HRTFModelImpl::predictHRTFData();
  }

  LOBYTE(__p) = 0;
  LOBYTE(v5) = 0;
  vg::hrtf::HRTFDecoderModelEspresso::create();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict HRTF decoder model.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict dtf values.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to create DTFBiasModel.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict bias dtf values.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for DTFBiasModel (EspressoV1)...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "DTFBiasModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for DTFBiasModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Creating DTFBiasModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for DTFModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to create DTFModel.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "DTFModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Creating DTFModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for HRTFDecoderModel (EspressoV1)...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to create HRTFDecoderModel.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "HRTFDecoderModel falling back to EspressoV1.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for HRTFDecoderModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Initializing HRTFDecoderModel for ANE.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Creating HRTFDecoderModel...", v2, v3, v4, v5, v6);
}

void sub_260CD4B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,char a35)
{
  if ((_BYTE)a15 && a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100]((vg::hrtf::DTFBiasModel **)(v35 - 120), 0);
  std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](v35 - 176);
  if (*(unsigned char *)(v35 - 88)) {
    free(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFData::~HRTFData(void **this)
{
  if (*((unsigned char *)this + 144)) {
    free(this[15]);
  }
  free(this[12]);
  free(this[9]);
  free(this[6]);
  free(this[3]);
  free(*this);
}

id vg::hrtf::HRTFModelImpl::predict(uint64_t a1, const vg::hrtf::HRTFModelInputs *a2, uint64_t a3)
{
  if (*((void *)a2 + 4) - *((void *)a2 + 3) == *((void *)a2 + 7) - *((void *)a2 + 6))
  {
    LOBYTE(v19) = 0;
    char v20 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    LOBYTE(v15) = 0;
    char v16 = 0;
    uint64_t v6 = (void *)MEMORY[0x261227DD0]();
    vg::hrtf::HRTFModelImpl::preprocessData(a2, (uint64_t)v10);
    if (v11)
    {
      if (*(unsigned char *)(a3 + 24)) {
        vg::hrtf::writeDebugPreprocessedData((uint64_t *)v10, (uint64_t *)a3);
      }
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v12 = *(std::string *)a1;
      }
      char v13 = 1;
      std::string::basic_string[abi:ne180100]<0>(&v14, "faceEncoderModel");
      if (v11) {
        vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()((uint64_t)&v12);
      }
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    char v8 = VGLogHRTFModel();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      vg::hrtf::HRTFModelImpl::predict();
    }

    std::__optional_destruct_base<vg::hrtf::HRTFPrepData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
    if (v16) {
      free(v15);
    }
    if (v18) {
      free(v17);
    }
    if (v20) {
      free(v19);
    }
  }
  else
  {
    uint64_t v7 = VGLogHRTFModel();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      vg::hrtf::HRTFModelImpl::predict();
    }
  }

  return 0;
}

void sub_260CD5668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  vg::hrtf::AudioProfileInputs::~AudioProfileInputs(&a10);
  std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x228]);
  std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](v57 - 216);
  if (*(unsigned char *)(v57 - 136)) {
    free(*(void **)(v57 - 160));
  }
  if (*(unsigned char *)(v57 - 104)) {
    free(*(void **)(v57 - 128));
  }
  if (*(unsigned char *)(v57 - 72)) {
    free(*(void **)(v57 - 96));
  }
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()(uint64_t a1)
{
  unsigned __int8 v2 = VGLogHRTFModel();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();
  }

  uint64_t v7 = 0;
  if (*(unsigned char *)(a1 + 24) && vg::shared::VGE5RT::isANESupported(v3))
  {
    LOBYTE(__p) = 0;
    char v6 = 0;
    vg::hrtf::EncoderModel::create();
  }
  long long v4 = VGLogHRTFModel();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()();
  }

  LOBYTE(__p) = 0;
  char v6 = 0;
  vg::hrtf::EncoderModelEspresso::create();
}

void sub_260CD5A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,void ***a21)
{
}

uint64_t vg::hrtf::DelayData::DelayData(uint64_t a1, uint64_t a2)
{
  long long v4 = cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)a1, (const void **)a2, *(unsigned int *)(a2 + 16));
  *((_DWORD *)v4 + 4) = *(_DWORD *)(a2 + 16);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v4 + 3, (const void **)(a2 + 24), *(unsigned int *)(a2 + 40));
  *(_DWORD *)(a1 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
  return a1;
}

void sub_260CD5AE0(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFModel::HRTFModel(vg::hrtf::HRTFModel *this, const vg::hrtf::HRTFModelImplInput *a2)
{
}

void sub_260CD5B4C(_Unwind_Exception *a1)
{
  MEMORY[0x2612278D0](v1, 0x1012C407C048CB5);
  _Unwind_Resume(a1);
}

void vg::hrtf::HRTFModel::~HRTFModel(void ***this)
{
}

{
  std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0);
}

void vg::hrtf::HRTFModel::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v4 = a1[1];
  }
  id v5 = VGLogHRTFModel();
  char v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Using model root path %s", buf, 0xCu);
    }

    if (*((char *)a1 + 23) >= 0) {
      char v8 = a1;
    }
    else {
      char v8 = (uint64_t *)*a1;
    }
    long long v9 = [NSString stringWithUTF8String:v8];
    long long v23 = 0u;
    memset(&v24, 0, sizeof(v24));
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)char v22 = 0u;
    *(_OWORD *)char v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    *(_OWORD *)char v18 = 0u;
    *(_OWORD *)uint64_t buf = 0u;
    *(_OWORD *)char v16 = 0u;
    __str.__r_.__value_.__s.__data_[0] = 0;
    char v14 = 0;
    detail::getModelPath(v9, &cfstr_FaceEncoderMlm.isa, &cfstr_FaceEncoderMod.isa, (uint64_t)&__p);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
    if (v12 && v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v14)
    {
      std::string::operator=((std::string *)buf, &__str);
      detail::getModelPath(v9, &cfstr_EarEncoderMlmo.isa, &cfstr_EarEncoderMode.isa, (uint64_t)&__p);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
      if (v12 && v11 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v14)
      {
        std::string::operator=((std::string *)&v16[1], &__str);
        detail::getModelPath(v9, &cfstr_LeftDtfMlmodel.isa, &cfstr_LeftDtfModelEs.isa, (uint64_t)&__p);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
        if (v12 && v11 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
        if (v14)
        {
          std::string::operator=((std::string *)v18, &__str);
          detail::getModelPath(v9, &cfstr_RightDtfMlmode.isa, &cfstr_RightDtfModelE.isa, (uint64_t)&__p);
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
          if (v12 && v11 < 0) {
            operator delete((void *)__p.n128_u64[0]);
          }
          if (v14)
          {
            std::string::operator=((std::string *)&v19[1], &__str);
            detail::getModelPath(v9, &cfstr_HrtfDecoderMlm.isa, &cfstr_HrtfDecoderMod.isa, (uint64_t)&__p);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
            if (v12 && v11 < 0) {
              operator delete((void *)__p.n128_u64[0]);
            }
            if (v14)
            {
              std::string::operator=((std::string *)v21, &__str);
              detail::getModelPath(v9, &cfstr_DtfBiasMlmodel.isa, &cfstr_DtfBiasModelEs.isa, (uint64_t)&__p);
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
              if (v12 && v11 < 0) {
                operator delete((void *)__p.n128_u64[0]);
              }
              if (v14)
              {
                std::string::operator=((std::string *)&v22[1], &__str);
                detail::getModelPath(v9, &cfstr_DelayMlmodel.isa, &cfstr_DelayModelEspr.isa, (uint64_t)&__p);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&__str, &__p);
                if (v12 && v11 < 0) {
                  operator delete((void *)__p.n128_u64[0]);
                }
                if (v14)
                {
                  std::string::operator=(&v24, &__str);
                  operator new();
                }
              }
            }
          }
        }
      }
    }
    *a2 = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[1]);
    }
    if (SHIBYTE(v22[0]) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[1]);
    }
    if (SHIBYTE(v19[0]) < 0) {
      operator delete(v18[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[1]);
    }
    if (SHIBYTE(v16[0]) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      vg::hrtf::HRTFModel::create();
    }

    *a2 = 0;
  }
}

void sub_260CD601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,void *a21)
{
  MEMORY[0x2612278D0](v22, 0x20C4093837F09);
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(&a21);

  _Unwind_Resume(a1);
}

void detail::getModelPath(detail *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, uint64_t a4@<X8>)
{
  v24[3] = *MEMORY[0x263EF8340];
  char v8 = this;
  long long v9 = a2;
  long long v10 = a3;
  char v11 = NSString;
  v24[0] = v8;
  v24[1] = v9;
  v24[2] = v10;
  char v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:v24 count:3];
  char v13 = [v11 pathWithComponents:v12];

  char v14 = [MEMORY[0x263F08850] defaultManager];
  long long v15 = v14;
  if (!v13)
  {
    long long v17 = VGLogHRTFModel();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = 138412802;
      char v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      long long v23 = v10;
      _os_log_error_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, "Failed to create model path from modelRootPath %@ with directory %@ and model file %@", (uint8_t *)&v18, 0x20u);
    }
    goto LABEL_8;
  }
  if (([v14 fileExistsAtPath:v13] & 1) == 0)
  {
    long long v17 = VGLogHRTFModel();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      vg::ear_detection::EarLandmarksModel::create((uint64_t)v13, v17);
    }
LABEL_8:

    char v16 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)a4, (char *)[v13 UTF8String]);
  char v16 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 24) = v16;
}

void sub_260CD627C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::hrtf::HRTFModel::predict(uint64_t *a1, const vg::hrtf::HRTFModelInputs *a2, uint64_t a3)
{
  return vg::hrtf::HRTFModelImpl::predict(*a1, a2, a3);
}

void ___ZL14VGLogHRTFModelv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "HRTFModel");
  uint64_t v1 = (void *)VGLogHRTFModel(void)::handle;
  VGLogHRTFModel(void)::handle = (uint64_t)v0;
}

void sub_260CD633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<vg::hrtf::FaceFrameData>::__init_with_size[abi:ne180100]<std::__wrap_iter<vg::hrtf::FaceFrameData const*>,std::__wrap_iter<vg::hrtf::FaceFrameData const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<vg::hrtf::FaceFrameData>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_260CD63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<vg::hrtf::FaceFrameData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<vg::hrtf::FaceFrameData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<vg::hrtf::FaceFrameData>,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData const*,vg::hrtf::FaceFrameData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<vg::hrtf::FaceFrameData,vg::hrtf::FaceFrameData const&,vg::hrtf::FaceFrameData*>(a4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_260CD648C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 96;
    do
    {
      std::__destroy_at[abi:ne180100]<vg::hrtf::FaceFrameData,0>((void **)(v4 + v2));
      v2 -= 96;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::FaceFrameData,vg::hrtf::FaceFrameData const&,vg::hrtf::FaceFrameData*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v5;
  cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)(a1 + 64), (const void **)(a2 + 64), (2 * *(_DWORD *)(a2 + 80)));
  *(_DWORD *)(a1 + 8std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_260CD651C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<vg::hrtf::ProcessedROIData>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      uint64_t result = (void *)std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(v7, a2);
      a2 += 80;
      v7 += 80;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_260CD65AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<vg::hrtf::ProcessedROIData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = *(id *)(a2 + 24);
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

void std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>(void **a1)
{
  uint64_t v2 = *a1;
}

void std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>(v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__optional_storage_base<vg::hrtf::DTFOutputs,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DTFOutputs,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v2 = *(void *)a1;
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v7;
      *(void *)(a2 + 24) = v5;
      *(void *)(a2 + 32) = v6;
      *(_DWORD *)(a1 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v8;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v9;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
}

void std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
    *(unsigned char *)(a1 + 48) = 0;
  }
}

uint64_t std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFData,false>::__optional_destruct_base[abi:ne180100]<vg::hrtf::HRTFData>(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = v2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(result + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 8std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 8std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = v5;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(result + 104) = v6;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(result + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(unsigned char *)(result + 12std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(result + 144) = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    *(void *)(result + 12std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(result + 128) = 0;
    uint64_t v7 = *(void *)(a2 + 128);
    *(void *)(result + 12std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 120);
    *(void *)(result + 128) = v7;
    *(void *)(a2 + 12std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    *(void *)(a2 + 128) = 0;
    *(_DWORD *)(result + 136) = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    *(unsigned char *)(result + 144) = 1;
  }
  *(unsigned char *)(result + 152) = 1;
  return result;
}

void ***std::unique_ptr<vg::hrtf::EncoderModel>::reset[abi:ne180100](void ****a1, void ***a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::EncoderModel::~EncoderModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::hrtf::EncoderModelEspresso *std::unique_ptr<vg::hrtf::EncoderModelEspresso>::reset[abi:ne180100](vg::hrtf::EncoderModelEspresso **a1, vg::hrtf::EncoderModelEspresso *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::EncoderModelEspresso::~EncoderModelEspresso(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFPrepData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = (void **)(a1 + 48);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 24);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)a1;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::__optional_storage_base<vg::hrtf::DelayData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<vg::hrtf::DelayData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v2 = *(void *)a1;
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v7;
      *(void *)(a2 + 24) = v5;
      *(void *)(a2 + 32) = v6;
      *(_DWORD *)(a1 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<vg::hrtf::DTFOutputs,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v8;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v9;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
}

void **vg::hrtf::HRTFData::HRTFData(void **this, const void **a2)
{
  uint64_t v4 = cva::MatrixData<float,0ul,0ul,false>::MatrixData(this, a2, *((unsigned int *)a2 + 4));
  *((_DWORD *)v4 + 4) = *((_DWORD *)a2 + 4);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(v4 + 3, a2 + 3, *((unsigned int *)a2 + 10));
  *((_DWORD *)this + 1std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = *((_DWORD *)a2 + 10);
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 6, a2 + 6, (*((_DWORD *)a2 + 17) * *((_DWORD *)a2 + 16)));
  this[8] = (void *)a2[8];
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 9, a2 + 9, (*((_DWORD *)a2 + 23) * *((_DWORD *)a2 + 22)));
  this[11] = (void *)a2[11];
  cva::MatrixData<float,0ul,0ul,false>::MatrixData(this + 12, a2 + 12, *((unsigned int *)a2 + 28));
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  std::__optional_copy_base<cva::Matrix<float,0u,1u,false>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(this + 15), (uint64_t)(a2 + 15));
  return this;
}

void sub_260CD6BEC(_Unwind_Exception *a1)
{
  free(*v5);
  free(*v4);
  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<cva::Matrix<float,0u,1u,false>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    cva::MatrixData<float,0ul,0ul,false>::MatrixData((void **)a1, (const void **)a2, *(unsigned int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_260CD6C94(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    free(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::AudioProfileInputs::~AudioProfileInputs(void **this)
{
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((unsigned char *)this + 344)) {
    free(this[40]);
  }
  free(this[37]);
  free(this[34]);
  free(this[31]);
  free(this[28]);
  free(this[25]);
  if (*((unsigned char *)this + 192)) {
    free(this[21]);
  }
  free(this[18]);
  free(this[15]);
  free(this[12]);
  free(this[9]);
  free(this[6]);
  free(this[3]);
  free(*this);
}

uint64_t std::__optional_destruct_base<vg::hrtf::HRTFData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    if (*(unsigned char *)(a1 + 144)) {
      free(*(void **)(a1 + 120));
    }
    free(*(void **)(a1 + 96));
    free(*(void **)(a1 + 72));
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 24));
    free(*(void **)a1);
  }
  return a1;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v17 = v16;
  long long v18 = xmmword_260D21E00;
  char v19 = std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke;
  __int16 v20 = v16;
  uint64_t v4 = *a4;
  v12[0] = a2;
  v12[1] = &a2[a3];
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v4;
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = a4[2];
  char v5 = 0;
  char v6 = 0;
  uint64_t v7 = (uint64_t *)&v17;
  LOBYTE(v10.__locale_) = 0;
  char v11 = 0;
  std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v12, &v7);
  if (v11) {
    std::locale::~locale(&v10);
  }
  ((void (*)(unsigned char *, void, unsigned char *))v19)(v17, *((void *)&v18 + 1), v20);
}

void sub_260CD7000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t *std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char **a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *a2;
  if (*a1 != v4)
  {
    while (1)
    {
      int v7 = *v3;
      if (v7 == 125) {
        break;
      }
      if (v7 != 123) {
        goto LABEL_10;
      }
      if (++v3 == v4) {
        std::__throw_format_error[abi:ne180100]("The format string terminates at a '{'");
      }
      if (*v3 == 123)
      {
LABEL_10:
        long long v8 = v3 + 1;
        std::locale v10 = v5;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v10, v3);
        uint64_t v3 = v8;
        if (v8 == v4) {
          return v5;
        }
      }
      else
      {
        *a2 = v5;
        uint64_t v3 = std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3, v4, a1, a2);
        char v5 = *a2;
        if (v3 == v4) {
          return v5;
        }
      }
    }
    if (++v3 == v4 || *v3 != 125) {
      std::__throw_format_error[abi:ne180100]("The format string contains an invalid escape sequence");
    }
    goto LABEL_10;
  }
  return v5;
}

uint64_t std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke(std::string::value_type *a1, std::string::size_type __n_add, uint64_t a3)
{
  uint64_t v4 = *(std::string **)(a3 + 296);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v6 = v4->__r_.__value_.__r.__words[0];
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = *(void *)(a3 + 296);
  }
  return std::string::__insert_with_size<char *,char *>(v4, v6 + size, a1, &a1[__n_add], __n_add);
}

uint64_t std::string::__insert_with_size<char *,char *>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::size_type v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    std::string::size_type v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }

  return std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(this, __n_add, v7, a3, a4);
}

void sub_260CD7270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_260CD7400(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_260CD741C(_Unwind_Exception *a1)
{
}

void std::__throw_format_error[abi:ne180100](const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::format_error::format_error[abi:ne180100](exception, a1);
}

void sub_260CD7478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, char **a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::string::size_type v7 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, (uint64_t)a3);
  if (v7 == a2) {
    goto LABEL_14;
  }
  int v9 = *v7;
  BOOL v20 = v9 == 58;
  if (v9 == 125) {
    goto LABEL_5;
  }
  if (v9 != 58) {
LABEL_14:
  }
    std::__throw_format_error[abi:ne180100]("The argument index should end with a ':' or a '}'");
  ++v7;
LABEL_5:
  *a3 = v7;
  v19[0] = (uint64_t)a3;
  v19[1] = (uint64_t)a4;
  v19[2] = (uint64_t)&v20;
  unint64_t v10 = a4[1];
  if (v10 <= v8)
  {
    LOBYTE(v22) = 0;
  }
  else if (v10 > 0xC)
  {
    uint64_t v15 = (long long *)(a4[2] + 32 * v8);
    long long v16 = v15[1];
    long long v21 = *v15;
    long long v22 = v16;
  }
  else
  {
    std::string::size_type v11 = (uint64_t *)(a4[2] + 16 * v8);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    uint64_t v14 = (a4[3] >> (5 * v8)) & 0x1FLL;
    *(void *)&long long v21 = v13;
    *((void *)&v21 + 1) = v12;
    LOBYTE(v22) = v14;
  }
  std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v19, (uint64_t)&v21);
  long long v17 = *a3;
  if (*a3 == a2 || *v17 != 125) {
    std::__throw_format_error[abi:ne180100]("The replacement field misses a terminating '}'");
  }
  return v17 + 1;
}

uint64_t **std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](uint64_t **a1, char *a2)
{
  uint64_t v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[2];
  v3[2] = v6 + 1;
  *(unsigned char *)(v5 + v6) = v4;
  if (v3[2] == v3[1])
  {
    ((void (*)(uint64_t))v3[3])(*v3);
    v3[2] = 0;
  }
  return a1;
}

std::runtime_error *std::format_error::format_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  __n128 result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_270CEEF10;
  return result;
}

void std::format_error::~format_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x2612278D0);
}

char *std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *a1;
  if (v4 == 125 || v4 == 58)
  {
    std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](a3);
    return v3;
  }
  if (v4 == 48)
  {
    int v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
      if (v5 == 2) {
        std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
      }
    }
    else
    {
      *(_DWORD *)(a3 + 16) = 1;
    }
    return a1 + 1;
  }
  if ((v4 - 58) <= 0xF5u) {
    std::__throw_format_error[abi:ne180100]("The argument index starts with an invalid character");
  }

  return std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((unint64_t)a1, a2, a3);
}

void *std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t *a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>((uint64_t)a1, (unsigned __int8 *)a2);
      break;
    case 2:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>((uint64_t)a1, (unsigned __int8 *)a2);
      break;
    case 3:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>((uint64_t)a1, (int *)a2);
      break;
    case 4:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>((uint64_t)a1, (uint64_t *)a2);
      break;
    case 5:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 6:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>((uint64_t)a1, (unsigned int *)a2);
      break;
    case 7:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 8:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 9:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>((uint64_t)a1, (float *)a2);
      break;
    case 0xA:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>((uint64_t)a1, (double *)a2);
      break;
    case 0xB:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>((uint64_t)a1, (double *)a2);
      break;
    case 0xC:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>((uint64_t)a1, (char **)a2);
      break;
    case 0xD:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>((uint64_t)a1, a2);
      break;
    case 0xE:
      __n128 result = std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>((uint64_t)a1, (unint64_t *)a2);
      break;
    case 0xF:
      uint64_t v3 = a1[1];
      uint64_t v4 = *(void *)a2;
      int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 8);
      uint64_t v6 = *a1;
      __n128 result = (void *)v5(v6, v3, v4);
      break;
    default:
      std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
  }
  return result;
}

char *std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(unint64_t a1, char *a2, uint64_t a3)
{
  __n128 result = std::__format::__parse_number[abi:ne180100]<char const*>(a1, a2);
  int v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    if (v5 == 2) {
      std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
    }
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1) {
      std::__throw_format_error[abi:ne180100]("Using automatic argument numbering in manual argument numbering mode");
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 2;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 + 1;
  return v2;
}

char *std::__format::__parse_number[abi:ne180100]<char const*>(unint64_t a1, char *a2)
{
  if ((uint64_t)&a2[-a1] <= 9) {
    uint64_t v2 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v2 = (unsigned __int8 *)(a1 + 9);
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 1);
  unsigned int v4 = *(char *)a1 - 48;
  if ((unsigned __int8 *)(a1 + 1) == v2)
  {
LABEL_8:
    if (v2 == (unsigned __int8 *)a2)
    {
      return a2;
    }
    else
    {
      uint64_t v6 = *v2;
      if ((v6 - 48) > 9)
      {
        return (char *)v2;
      }
      else if ((v6 + 10 * (unint64_t)v4 - 48) >> 31 {
             || (uint64_t v3 = (unsigned __int8 *)(a1 + 2), (char *)(a1 + 2) != a2) && *v3 - 48 <= 9)
      }
      {
        std::__throw_format_error[abi:ne180100]("The numeric value of the format specifier is too large");
      }
    }
  }
  else
  {
    a1 += (unint64_t)&v2[~a1];
    while (1)
    {
      int v5 = *v3;
      if ((v5 - 58) < 0xFFFFFFF6) {
        break;
      }
      unsigned int v4 = v5 + 10 * v4 - 48;
      if (++v3 == v2) {
        goto LABEL_8;
      }
    }
  }
  return (char *)v3;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>((uint64_t)&v8, "a BOOL");
    *unsigned int v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3 != 0, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_char[abi:ne180100]<char>((uint64_t)&v8, "a character");
    *unsigned int v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *unsigned int v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unsigned int v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *unsigned int v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v9 = 0;
  int v10 = -1;
  char v11 = 32;
  __int16 v12 = 0;
  char v13 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    unsigned __int8 *v5 = v6;
  }
  std::string::size_type v7 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *std::string::size_type v7 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *unint64_t v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v8 = 0;
  int v9 = -1;
  char v10 = 32;
  __int16 v11 = 0;
  char v12 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *unint64_t v4 = v5;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v9 = 0;
  int v10 = -1;
  char v11 = 32;
  __int16 v12 = 0;
  char v13 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    unsigned __int8 *v5 = v6;
  }
  std::string::size_type v7 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(uint64_t a1, float *a2)
{
  float v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    *unint64_t v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  __n128 result = std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(uint64_t a1, double *a2)
{
  double v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    *unint64_t v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  __n128 result = std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(uint64_t a1, double *a2)
{
  double v3 = *a2;
  uint64_t v11 = 0;
  int v12 = -1;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    int v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0) {
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
      }
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      int v12 = 6;
    }
    *unint64_t v4 = v5;
  }
  std::string::size_type v7 = *(uint64_t ***)(a1 + 8);
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  __n128 result = std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *std::string::size_type v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(uint64_t a1, char **a2)
{
  double v3 = *a2;
  int v7 = 1;
  unint64_t v8 = 0xFFFFFFFF00000000;
  char v9 = 32;
  __int16 v10 = 0;
  char v11 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    unint64_t v4 = *(unsigned __int8 ***)a1;
    *unint64_t v4 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  int v5 = *(uint64_t ***)(a1 + 8);
  __n128 result = std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  unsigned __int8 *v5 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(uint64_t a1, uint64_t a2)
{
  double v3 = *(char **)a2;
  size_t v4 = *(void *)(a2 + 8);
  int v11 = 1;
  unint64_t v12 = 0xFFFFFFFF00000000;
  char v13 = 32;
  __int16 v14 = 0;
  char v15 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    int v5 = *(unsigned __int8 ***)a1;
    unsigned __int8 *v5 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = (void *)*v6;
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v6);
  __n128 result = std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v3, v4, v7, v8, v9);
  void *v6 = result;
  return result;
}

void *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v7 = 0;
  int v8 = -1;
  char v9 = 32;
  __int16 v10 = 0;
  char v11 = 0;
  if (**(unsigned char **)(a1 + 16))
  {
    size_t v4 = *(unsigned __int8 ***)a1;
    *size_t v4 = std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  int v5 = *(void **)(a1 + 8);
  __n128 result = std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  void *v5 = result;
  return result;
}

void *std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned int a2, void *a3)
{
  if (*(unsigned __int8 *)(a1 + 1) > 1u)
  {
    unint64_t v9 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v9, v8, 0);
  }
  else
  {
    unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5);
  }
}

unsigned __int8 *std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2, unsigned __int16 a3)
{
  unint64_t v3 = *a2;
  size_t v4 = a2[1];
  long long v17 = (char *)v3;
  if (v3 == v4) {
    return v3;
  }
  int v8 = std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(a1, (unsigned __int8 **)&v17, v4, (a3 >> 6) & 1);
  unint64_t v9 = (unsigned __int8 *)v17;
  if (v8) {
    BOOL v10 = v17 == (char *)v4;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_14;
    }
    int v11 = *v17;
    switch(v11)
    {
      case ' ':
        char v12 = *a1 | 0x18;
        break;
      case '+':
        char v12 = *a1 & 0xE7 | 0x10;
        break;
      case '-':
        char v12 = *a1 & 0xE7 | 8;
        break;
      default:
LABEL_14:
        if ((a3 & 2) == 0 || *v9 != 35 || (*a1 |= 0x20u, ++v9, long long v17 = (char *)v9, v9 != v4))
        {
          if ((a3 & 4) == 0 || *v9 != 48) {
            goto LABEL_22;
          }
          if ((*a1 & 7) == 0) {
            *a1 = *a1 & 0xF8 | 4;
          }
          long long v17 = (char *)(v9 + 1);
          if (v9 + 1 != v4)
          {
LABEL_22:
            int v13 = std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, (unint64_t *)&v17, (char *)v4, (uint64_t)a2);
            __int16 v14 = (unsigned __int8 *)v17;
            if (!v13 || v17 != (char *)v4)
            {
              if ((a3 & 8) == 0
                || (v16 = std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, &v17, (char *)v4, (uint64_t)a2), __int16 v14 = (unsigned __int8 *)v17, !v16)|| v17 != (char *)v4)
              {
                if ((a3 & 0x10) == 0 || *v14 != 76 || (*a1 |= 0x40u, ++v14, long long v17 = (char *)v14, v14 != v4))
                {
                  if ((a3 & 0x80) == 0 || *v14 != 110 || (*a1 |= 0x80u, long long v17 = (char *)(v14 + 1), v14 + 1 != v4))
                  {
                    if ((a3 & 0x20) != 0) {
                      std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>((uint64_t)a1, &v17);
                    }
                    unint64_t v3 = (unsigned __int8 *)v17;
                    if ((a3 & 0x100) == 0) {
                      return v3;
                    }
                    if (v17 != (char *)v4)
                    {
                      size_t v4 = (unsigned __int8 *)v17;
                      if (*v17 != 125) {
                        std::__throw_format_error[abi:ne180100]("The format specifier should consume the input or end with a '}'");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v4;
    }
    *a1 = v12;
    long long v17 = (char *)++v9;
    if (v9 == v4) {
      return v4;
    }
    goto LABEL_14;
  }
  return v4;
}

uint64_t std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    if (v2 > 1) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    unint64_t v3 = (unsigned char *)result;
    __n128 result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v3 & 7) == 0) {
      unsigned char *v3 = *v3 & 0xF8 | 1;
    }
  }
  return result;
}

uint64_t std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(unsigned char *a1, unsigned __int8 **a2, unsigned __int8 *a3, int a4)
{
  v17[0] = *a2;
  v17[1] = a3;
  if ((std::__unicode::__code_point_view<char>::__consume[abi:ne180100](v17) & 0x80000000) != 0) {
    std::__throw_format_error[abi:ne180100]("The format specifier contains malformed Unicode characters");
  }
  int v8 = v17[0];
  if (v17[0] >= a3) {
    goto LABEL_7;
  }
  int v9 = (char)*v17[0];
  switch(v9)
  {
    case '<':
      char v10 = 1;
      goto LABEL_17;
    case '>':
      char v10 = 3;
LABEL_17:
      *a1 = *a1 & 0xF8 | v10;
      char v15 = *a2;
      size_t v16 = v8 - *a2;
      if (v16 == 1)
      {
        std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100]((uint64_t)a1, (char)*v15, a4);
        char v15 = *a2;
      }
      else if (v8 == v15)
      {
LABEL_21:
        int v13 = &v8[v16];
        goto LABEL_22;
      }
      memmove(a1 + 12, v15, v16);
      int v8 = *a2;
      goto LABEL_21;
    case '^':
      char v10 = 2;
      goto LABEL_17;
  }
LABEL_7:
  int v11 = (char)**a2;
  switch(v11)
  {
    case '<':
      char v12 = 1;
      break;
    case '>':
      char v12 = 3;
      break;
    case '^':
      char v12 = 2;
      break;
    default:
      return 0;
  }
  *a1 = *a1 & 0xF8 | v12;
  int v13 = *a2;
LABEL_22:
  *a2 = v13 + 1;
  return 1;
}

uint64_t std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4)
{
  unint64_t v6 = *a2;
  int v7 = *(unsigned __int8 *)*a2;
  if (v7 == 123)
  {
    int v9 = (char *)(v6 + 1);
    *a2 = (unint64_t)v9;
    char v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v9, a3, a4);
    *(_WORD *)(a1 + 2) |= 0x4000u;
  }
  else
  {
    if (v7 == 48) {
      std::__throw_format_error[abi:ne180100]("The width option should not have a leading zero");
    }
    if ((v7 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    char v10 = std::__format::__parse_number[abi:ne180100]<char const*>(v6, a3);
  }
  *(_DWORD *)(a1 + 4) = v11;
  *a2 = (unint64_t)v10;
  return 1;
}

BOOL std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, char **a2, char *a3, uint64_t a4)
{
  size_t v4 = *a2;
  int v5 = **a2;
  if (v5 == 46)
  {
    int v8 = (unsigned __int8 *)(v4 + 1);
    *a2 = v4 + 1;
    if (v4 + 1 == a3) {
      std::__throw_format_error[abi:ne180100]("End of input while parsing format specifier precision");
    }
    int v9 = *v8;
    if (v9 == 123)
    {
      *a2 = v4 + 2;
      char v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v4 + 2, a3, a4);
      *(_WORD *)(a1 + 2) |= 0x8000u;
      *(_DWORD *)(a1 + 8) = v11;
    }
    else
    {
      if ((v9 - 58) <= 0xFFFFFFF5) {
        std::__throw_format_error[abi:ne180100]("The precision option does not contain a value or an argument index");
      }
      char v10 = std::__format::__parse_number[abi:ne180100]<char const*>((unint64_t)v8, a3);
      *(_DWORD *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 2) &= ~0x8000u;
    }
    *a2 = v10;
  }
  return v5 == 46;
}

uint64_t std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>(uint64_t result, char **a2)
{
  unsigned int v2 = *a2;
  int v3 = **a2;
  if (v3 <= 96)
  {
    int v5 = v3 - 65;
    char v4 = 12;
    switch(v5)
    {
      case 0:
        goto LABEL_19;
      case 1:
        char v4 = 3;
        goto LABEL_19;
      case 4:
        char v4 = 14;
        goto LABEL_19;
      case 5:
        char v4 = 16;
        goto LABEL_19;
      case 6:
        char v4 = 18;
LABEL_19:
        *(unsigned char *)(result + 1) = v4;
        *a2 = v2 + 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(**a2)
    {
      case 'a':
        char v4 = 11;
        goto LABEL_19;
      case 'b':
        char v4 = 2;
        goto LABEL_19;
      case 'c':
        char v4 = 10;
        goto LABEL_19;
      case 'd':
        char v4 = 5;
        goto LABEL_19;
      case 'e':
        char v4 = 13;
        goto LABEL_19;
      case 'f':
        char v4 = 15;
        goto LABEL_19;
      case 'g':
        char v4 = 17;
        goto LABEL_19;
      case 'o':
        char v4 = 4;
        goto LABEL_19;
      case 'p':
        char v4 = 8;
        goto LABEL_19;
      case 's':
        char v4 = 1;
        goto LABEL_19;
      case 'x':
        char v4 = 6;
        goto LABEL_19;
      default:
        return result;
    }
  }
  return result;
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:ne180100](unsigned __int8 **a1)
{
  int v1 = *a1;
  int v2 = **a1;
  unsigned int v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255) {
    int v4 = 8;
  }
  else {
    int v4 = v3;
  }
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      uint64_t v5 = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80) {
        goto LABEL_35;
      }
      *a1 = v1 + 1;
      char v6 = *v1;
      *a1 = v1 + 2;
      unsigned int v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = 2147549181;
      }
      break;
    case 3:
      if (a1[1] - v1 < 3) {
        goto LABEL_35;
      }
      uint64_t v8 = 1;
      do
        int v9 = v1[v8] & 0xC0;
      while (v9 == 128 && v8++ != 2);
      if (v9 != 128) {
        goto LABEL_35;
      }
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      int v11 = *v1 & 0xF;
      *a1 = v1 + 2;
      int v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v13 >= 0x800)
      {
        if ((v12 & 0xF800) == 0xD800) {
          uint64_t v5 = 2147549181;
        }
        else {
          uint64_t v5 = v13;
        }
      }
      break;
    case 4:
      if (a1[1] - v1 < 4) {
        goto LABEL_35;
      }
      uint64_t v14 = 1;
      do
        int v15 = v1[v14] & 0xC0;
      while (v15 == 128 && v14++ != 3);
      if (v15 != 128) {
        goto LABEL_35;
      }
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      int v17 = *v1 & 7;
      *a1 = v1 + 2;
      int v18 = (v17 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      unsigned int v19 = v18 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      unsigned int v20 = v1[3] & 0x3F | (v19 << 6);
      if (v20 >= 0x10000)
      {
        if (v20 >= 0x110000) {
          uint64_t v5 = 2147549181;
        }
        else {
          uint64_t v5 = v20;
        }
      }
      break;
    default:
LABEL_35:
      uint64_t v5 = 2147549181;
      *a1 = v1 + 1;
      break;
  }
  return v5;
}

void std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100](uint64_t a1, int a2, int a3)
{
  if (a3 && a2 == 58 || a2 == 125 || a2 == 123) {
    std::__throw_format_error[abi:ne180100]("The fill option contains an invalid value");
  }
}

char *std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  if (a1 == a2) {
    std::__throw_format_error[abi:ne180100]("End of input while parsing an argument index");
  }
  int v4 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, a3);
  if (v4 == a2 || *v4 != 125) {
    std::__throw_format_error[abi:ne180100]("The argument index is invalid");
  }
  return v4 + 1;
}

void std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](const char *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "The type option contains an invalid value for ");
  std::string::size_type v2 = strlen(a1);
  unsigned int v3 = std::string::append(&v8, a1, v2);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v9, " formatting argument", 0x14uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v11 = v5->__r_.__value_.__r.__words[2];
  long long v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    unsigned int v7 = (const char *)&v10;
  }
  else {
    unsigned int v7 = (const char *)v10;
  }
  std::__throw_format_error[abi:ne180100](v7);
}

void sub_260CD8EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:ne180100](uint64_t result, char a2, const char *a3, int a4)
{
  if ((a2 & 1) == 0 && (*(unsigned char *)result & 0x18) != 0)
  {
    long long v6 = "sign";
    goto LABEL_23;
  }
  if ((a2 & 2) == 0 && (*(unsigned char *)result & 0x20) != 0)
  {
    long long v6 = "alternate form";
    goto LABEL_23;
  }
  if ((a2 & 4) == 0 && (*(unsigned char *)result & 7) == 4)
  {
    long long v6 = "zero-padding";
    goto LABEL_23;
  }
  if ((a2 & 8) == 0 && *(_DWORD *)(result + 8) != -1)
  {
    long long v6 = "precision";
    goto LABEL_23;
  }
  if ((a2 & 0x10) == 0 && (*(unsigned char *)result & 0x40) != 0)
  {
    long long v6 = "locale-specific form";
LABEL_23:
    std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](a3, v6);
  }
  unsigned int v4 = *(unsigned __int8 *)(result + 1);
  if (*(unsigned char *)(result + 1))
  {
    if (v4 >= 0x20) {
      std::__throw_format_error[abi:ne180100]("The type does not fit in the mask");
    }
    int v5 = 1 << v4;
  }
  else
  {
    int v5 = 1;
  }
  if ((v5 & a4) == 0) {
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a3);
  }
  return result;
}

void std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](const char *a1, const char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v15, "The format specifier for ");
  std::string::size_type v4 = strlen(a1);
  int v5 = std::string::append(&v15, a1, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned int v7 = std::string::append(&v16, " does not allow the ", 0x14uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v9 = strlen(a2);
  long long v10 = std::string::append(&v17, a2, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v18, " option", 7uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v20 = v12->__r_.__value_.__r.__words[2];
  long long v19 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    uint64_t v14 = (const char *)&v19;
  }
  else {
    uint64_t v14 = (const char *)v19;
  }
  std::__throw_format_error[abi:ne180100](v14);
}

void sub_260CD9118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(int a1, void **a2, uint64_t a3, unint64_t a4)
{
  if ((a3 & 0x40) != 0)
  {
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v17);
    int v12 = std::locale::use_facet(&v17, MEMORY[0x263F8C150]);
    std::locale::~locale(&v17);
    long long v13 = v12->__vftable;
    if (a1) {
      ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v13[2].~facet)(&v17, v12);
    }
    else {
      ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v13[2].~facet_0)(&v17, v12);
    }
    if ((v19 & 0x80u) == 0) {
      locale = (char *)&v17;
    }
    else {
      locale = (char *)v17.__locale_;
    }
    if ((v19 & 0x80u) == 0) {
      size_t v15 = v19;
    }
    else {
      size_t v15 = v18;
    }
    std::string v16 = std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(locale, v15, *a2, a3, a4);
    if ((char)v19 < 0) {
      operator delete(v17.__locale_);
    }
    return v16;
  }
  else
  {
    if (a1) {
      size_t v8 = 4;
    }
    else {
      size_t v8 = 5;
    }
    std::string::size_type v9 = *a2;
    if (a1) {
      long long v10 = "true";
    }
    else {
      long long v10 = "false";
    }
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v8, v9, a3, a4, v8);
  }
}

void sub_260CD9300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, void *a2)
{
  char v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  return (v5 << 8) | (v6 << 32) | v4 & 0x7F;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x260CD94E4);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      size_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unsigned int v7 = &v13;
      unsigned int v9 = 2;
      size_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unsigned int v7 = (uint64_t *)v12;
      if (a1) {
        size_t v8 = "0";
      }
      else {
        size_t v8 = 0;
      }
      unsigned int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      size_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unsigned int v7 = (uint64_t *)v11;
      unsigned int v9 = 16;
      size_t v8 = "0X";
LABEL_11:
      __n128 result = std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      __n128 result = std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v11, 0, 0xAu);
      break;
  }
  return result;
}

std::locale *std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  unsigned int v3 = (std::locale *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 40))
  {
    MEMORY[0x261227760](&v5);
    std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(v3, &v5);
    std::locale::~locale(&v5);
  }
  return std::locale::locale(a2, v3);
}

void sub_260CD9560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5)
{
  if (a4 <= 0)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    uint64_t v10 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, __len, HIDWORD(a4), 1);
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, __len, a3, a4, a5, v10);
  }
}

std::locale *std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(std::locale *this, const std::locale *a2)
{
  if (LOBYTE(this[1].__locale_))
  {
    std::locale::operator=(this, a2);
  }
  else
  {
    std::locale::locale(this, a2);
    LOBYTE(this[1].__locale_) = 1;
  }
  return this;
}

uint64_t std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>(unsigned __int8 *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    if ((char)*a1 < 0)
    {
      size_t v8 = a1;
    }
    else
    {
      uint64_t v7 = 0;
      size_t v8 = &a1[a3 - 1];
      while (1)
      {
        if (a2 - 1 == v7) {
          return a2;
        }
        if (a3 - 1 == v7) {
          break;
        }
        int v9 = (char)a1[++v7];
        if (v9 < 0)
        {
          a3 = a3 - v7 + 1;
          size_t v8 = &a1[v7 - 1];
          return v8
               - a1
               + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
        }
      }
      if (((char)a1[a3] & 0x80000000) == 0) {
        return a3;
      }
      a3 = 1;
    }
    return v8
         - a1
         + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
  }
  return result;
}

void *std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  size_t v9 = (a4 >> 32) - a6;
  if (a4 >> 32 <= a6)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    unint64_t v10 = HIDWORD(a5);
    size_t v11 = 0;
    switch(a4 & 7)
    {
      case 1:
        break;
      case 2:
        size_t v11 = v9 >> 1;
        v9 -= v9 >> 1;
        break;
      default:
        size_t v11 = (a4 >> 32) - a6;
        size_t v9 = 0;
        break;
    }
    uint64_t v13 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v11, SHIDWORD(a5));
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, __src, __len);
    return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13, v9, v10);
  }
}

void *std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(void *result, char *__src, size_t __len)
{
  size_t v3 = __len;
  std::locale v5 = result;
  size_t v7 = result[1];
  uint64_t v6 = result[2];
  if (v6 + __len >= v7)
  {
    uint64_t result = (void *)((uint64_t (*)(void))result[3])(*result);
    uint64_t v6 = 0;
    v5[2] = 0;
    size_t v7 = v5[1];
  }
  if (v3 >= v7)
  {
    do
    {
      if (v5[1] >= v3) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = v5[1];
      }
      if (v8) {
        memmove((void *)(*v5 + v6), __src, v8);
      }
      v5[2] = v8;
      __src += v8;
      v3 -= v8;
      uint64_t result = (void *)((uint64_t (*)(void, size_t, void))v5[3])(*v5, v8, v5[4]);
      uint64_t v6 = 0;
      v5[2] = 0;
    }
    while (v3);
  }
  else
  {
    if (v3)
    {
      uint64_t result = memmove((void *)(*v5 + v6), __src, v3);
      uint64_t v6 = v5[2];
    }
    v5[2] = v6 + v3;
  }
  return result;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint64_t v14 = a1;
  size_t v15 = a2;
  unsigned int v16 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100](&v14) & 0x7FFFFFFF;
  char v17 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v16);
  if (a1 == a2) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    unsigned int v9 = v16;
    unint64_t v10 = v14;
    if (v14 == v15) {
      char v17 = 15;
    }
    else {
      unint64_t v10 = std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100]((uint64_t)&v14);
    }
    int v11 = std::__width_estimation_table::__estimated_width[abi:ne180100](v9);
    unint64_t v12 = v8 + v11;
    if (!a4 && v12 > a3) {
      break;
    }
    if (v10 == a2)
    {
      v8 += v11;
      return v8;
    }
    v8 += v11;
  }
  while (v12 <= a3);
  return v8;
}

uint64_t std::__width_estimation_table::__estimated_width[abi:ne180100](unsigned int a1)
{
  if (a1 - 262142 < 0xFFFC1102) {
    return 1;
  }
  unint64_t v2 = 108;
  size_t v3 = (unsigned int *)&std::__width_estimation_table::__entries;
  do
  {
    unint64_t v4 = v2 >> 1;
    std::locale v5 = &v3[v2 >> 1];
    unsigned int v7 = *v5;
    uint64_t v6 = v5 + 1;
    v2 += ~(v2 >> 1);
    if (((a1 << 14) | 0x3FFF) < v7) {
      unint64_t v2 = v4;
    }
    else {
      size_t v3 = v6;
    }
  }
  while (v2);
  uint64_t v1 = 1;
  if (v3 != (unsigned int *)&std::__width_estimation_table::__entries)
  {
    if ((*(v3 - 1) & 0x3FFF) + (*(v3 - 1) >> 14) < a1) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return v1;
}

uint64_t std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](unsigned int a1)
{
  unint64_t v1 = 1496;
  unint64_t v2 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    unint64_t v3 = v1 >> 1;
    unint64_t v4 = &v2[v1 >> 1];
    unsigned int v6 = *v4;
    std::locale v5 = v4 + 1;
    v1 += ~(v1 >> 1);
    if (((a1 << 11) | 0x7FF) < v6) {
      unint64_t v1 = v3;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v1);
  uint64_t v7 = 16;
  if (v2 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    unsigned int v8 = *(v2 - 1);
    unsigned int v9 = ((v8 >> 4) & 0x7F) + (v8 >> 11);
    unsigned int v10 = v8 & 0xF;
    if (v9 >= a1) {
      return v10;
    }
    else {
      return 16;
    }
  }
  return v7;
}

unsigned __int8 *std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100](uint64_t a1)
{
  int v2 = 0;
  char v8 = 1;
  while (1)
  {
    unint64_t v3 = *(unsigned __int8 **)a1;
    if (*(void *)a1 == *(void *)(a1 + 8)) {
      break;
    }
    unsigned int v4 = *(unsigned __int8 *)(a1 + 20);
    unsigned int v5 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100]((unsigned __int8 **)a1) & 0x7FFFFFFF;
    *(_DWORD *)(a1 + 16) = v5;
    unsigned int v6 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v5);
    *(unsigned char *)(a1 + 2std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = v6;
    v2 |= v4 == 3;
    if (std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](&v8, v2 & 1, v4, v6)) {
      return v3;
    }
  }
  *(unsigned char *)(a1 + 2std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = 15;
  return v3;
}

BOOL std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](unsigned char *a1, int a2, unsigned int a3, unsigned int a4)
{
  if (!a3 && a4 == 5) {
    return 0;
  }
  if (a3 > 5 || (BOOL v4 = 1, ((1 << a3) & 0x23) == 0))
  {
    if (a4 > 5 || (BOOL v4 = 1, ((1 << a4) & 0x23) == 0))
    {
      if (a3 == 12 || a3 == 6)
      {
        if ((a4 - 11) >= 2u) {
          goto LABEL_16;
        }
      }
      else if (a3 != 4 || a4 - 4 >= 9 || ((0x10Du >> (a4 - 4)) & 1) == 0)
      {
LABEL_16:
        BOOL v6 = a3 == 11 || a3 == 7;
        if (v6 && a4 == 11 || a4 <= 0xD && ((1 << a4) & 0x2404) != 0 || a3 == 8 || a3 == 13 && a2 && a4 == 3) {
          return 0;
        }
        BOOL v4 = 1;
        if (a3 == 9 && a4 == 9)
        {
          BOOL v4 = *a1 == 0;
          *a1 ^= 1u;
        }
        return v4;
      }
      return 0;
    }
  }
  return v4;
}

void *std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(void *a1, size_t __len, int a3)
{
  size_t v3 = __len;
  unsigned int v5 = __clz(~(_BYTE)a3) - 24;
  int __src = a3;
  if ((_BYTE)a3 == 0xFF) {
    size_t v6 = 8;
  }
  else {
    size_t v6 = v5;
  }
  if (v6)
  {
    if (__len)
    {
      do
      {
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, (char *)&__src, v6);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, __len, (char)a3);
  }
  return a1;
}

void *std::__format::__output_buffer<char>::__fill[abi:ne180100](void *result, size_t __len, int __c)
{
  uint64_t v5 = (uint64_t)result;
  size_t v7 = result[1];
  uint64_t v6 = result[2];
  if (v6 + __len >= v7)
  {
    uint64_t result = (void *)((uint64_t (*)(void))result[3])(*result);
    uint64_t v6 = 0;
    *(void *)(v5 + 16) = 0;
    size_t v7 = *(void *)(v5 + 8);
  }
  if (v7 <= __len)
  {
    do
    {
      uint64_t v8 = *(void *)v5;
      if (*(void *)(v5 + 8) >= __len) {
        size_t v9 = __len;
      }
      else {
        size_t v9 = *(void *)(v5 + 8);
      }
      if (v9)
      {
        memset((void *)(v8 + v6), __c, v9);
        uint64_t v8 = *(void *)v5;
      }
      *(void *)(v5 + 16) = v9;
      __len -= v9;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, size_t, void))(v5 + 24))(v8, v9, *(void *)(v5 + 32));
      uint64_t v6 = 0;
      *(void *)(v5 + 16) = 0;
    }
    while (__len);
  }
  else
  {
    if (__len)
    {
      uint64_t result = memset((void *)(*(void *)v5 + v6), __c, __len);
      uint64_t v6 = *(void *)(v5 + 16);
    }
    *(void *)(v5 + 16) = v6 + __len;
  }
  return result;
}

unint64_t std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, void *a2)
{
  *(void *)&v14[23] = *MEMORY[0x263EF8340];
  __int16 v3 = *(_WORD *)(a1 + 2);
  unint64_t result = *(unsigned int *)(a1 + 4);
  if ((v3 & 0x4000) != 0)
  {
    unint64_t v5 = (int)result;
    unint64_t v6 = a2[1];
    if (v6 <= (int)result)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      uint64_t v9 = a2[2] + 32 * (int)result;
      unint64_t v2 = *(void *)v9;
      unint64_t v5 = *(void *)(v9 + 8);
      LOBYTE(v8) = *(unsigned char *)(v9 + 16);
      v11[0] = *(void *)(v9 + 17);
      *(void *)((char *)v11 + 7) = *(void *)(v9 + 24);
    }
    else
    {
      uint64_t v7 = a2[2];
      uint64_t v8 = (a2[3] >> (5 * result)) & 0x1FLL;
      unint64_t v2 = *(void *)(v7 + 16 * (int)result);
      unint64_t v5 = *(void *)(v7 + 16 * (int)result + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    char v13 = v8;
    *(void *)uint64_t v14 = v11[0];
    *(void *)&v14[7] = *(void *)((char *)v11 + 7);
    return std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, v12);
  }
  return result;
}

unint64_t std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, void *a2)
{
  *(void *)&v14[23] = *MEMORY[0x263EF8340];
  int v3 = *(__int16 *)(a1 + 2);
  unint64_t result = *(unsigned int *)(a1 + 8);
  if (v3 < 0)
  {
    unint64_t v5 = (int)result;
    unint64_t v6 = a2[1];
    if (v6 <= (int)result)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      uint64_t v9 = a2[2] + 32 * (int)result;
      unint64_t v2 = *(void *)v9;
      unint64_t v5 = *(void *)(v9 + 8);
      LOBYTE(v8) = *(unsigned char *)(v9 + 16);
      v11[0] = *(void *)(v9 + 17);
      *(void *)((char *)v11 + 7) = *(void *)(v9 + 24);
    }
    else
    {
      uint64_t v7 = a2[2];
      uint64_t v8 = (a2[3] >> (5 * result)) & 0x1FLL;
      unint64_t v2 = *(void *)(v7 + 16 * (int)result);
      unint64_t v5 = *(void *)(v7 + 16 * (int)result + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    char v13 = v8;
    *(void *)uint64_t v14 = v11[0];
    *(void *)&v14[7] = *(void *)((char *)v11 + 7);
    return std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, v12);
  }
  return result;
}

unint64_t std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unint64_t *a2)
{
  switch(*((unsigned char *)a2 + 16))
  {
    case 1:
    case 2:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      std::__throw_format_error[abi:ne180100]("Replacement argument isn't a standard signed or unsigned integer type");
    case 3:
      unint64_t result = *(unsigned int *)a2;
      if ((result & 0x80000000) != 0) {
        std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
      }
      return result;
    case 4:
      return std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(a1, a2);
    case 6:
      unint64_t result = *(unsigned int *)a2;
      if ((result & 0x80000000) != 0) {
        goto LABEL_8;
      }
      return result;
    case 7:
      unint64_t result = *a2;
      if (*a2 >> 31) {
LABEL_8:
      }
        std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
      return result;
    default:
      std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
  }
}

unint64_t std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t result = *a2;
  if ((*a2 & 0x8000000000000000) != 0) {
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  }
  if (result >> 31) {
    std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, unsigned int a9)
{
  uint64_t v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    unsigned int v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  unsigned int v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        size_t v18 = a8 + 1;
        do
        {
          *(unsigned char *)unsigned int v16 = v17;
          unsigned int v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  int64_t v20 = std::__to_chars_integral[abi:ne180100]<unsigned int>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      uint64_t v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    uint64_t v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  uint64_t v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    std::string v24 = (std::string::value_type *)&v45;
  }
  else {
    std::string v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v25 = (char *)&v45 + v47;
  }
  else {
    uint64_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    uint64_t v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        std::string v24 = v28;
      }
      else
      {
        uint64_t v29 = v24 + 1;
        uint64_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          uint64_t v29 = v30;
        }
        while (!v32);
        std::string v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  uint64_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_260CDA3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(void *a1, char *__src, char *a3, int a4, uint64_t *a5, char a6, uint64_t a7, unint64_t a8)
{
  unsigned __int16 v8 = a7;
  int v11 = a3;
  char v13 = a1;
  unint64_t v14 = HIDWORD(a7);
  unint64_t v15 = HIDWORD(a8);
  size_t v16 = a3 - __src;
  LODWORD(v17) = *((unsigned __int8 *)a5 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = a5[1];
  }
  int v18 = a4 - __src - 1 + v17;
  if ((a7 & 7) == 4)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
    if ((int)v14 > v18) {
      std::__format::__output_buffer<char>::__fill[abi:ne180100](v13, (int)v14 - v18, 48);
    }
    size_t v19 = 0;
  }
  else
  {
    if (SHIDWORD(a7) <= v18)
    {
      size_t v19 = 0;
    }
    else
    {
      size_t v19 = (a7 >> 32) - v18;
      size_t v20 = 0;
      switch(a7 & 7)
      {
        case 1:
          break;
        case 2:
          size_t v20 = v19 >> 1;
          v19 -= v19 >> 1;
          break;
        default:
          size_t v20 = (a7 >> 32) - v18;
          size_t v19 = 0;
          break;
      }
      char v13 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v20, SHIDWORD(a8));
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, __src, v16);
  }
  uint64_t v21 = *((unsigned __int8 *)a5 + 23);
  int v22 = (char)v21;
  uint64_t v23 = (char *)a5 + v21;
  if (v22 >= 0) {
    std::string v24 = v23;
  }
  else {
    std::string v24 = (char *)(*a5 + a5[1]);
  }
  if (v22 >= 0) {
    uint64_t v25 = a5;
  }
  else {
    uint64_t v25 = (uint64_t *)*a5;
  }
  std::string::value_type v26 = (char *)v25 + 1;
  uint64_t v27 = v8 & 0xFF00;
  while (1)
  {
    uint64_t v29 = v24 - 1;
    size_t v28 = *(v24 - 1);
    if (v27 == 1792)
    {
      uint64_t v30 = &v11[v28];
      std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)v13, v11, &v11[v28], (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
      int v11 = v30;
    }
    else
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v13, v11, v28);
      v11 += *v29;
    }
    if (v24 == v26) {
      break;
    }
    uint64_t v31 = *v13;
    uint64_t v32 = v13[2];
    v13[2] = v32 + 1;
    *(unsigned char *)(v31 + v32) = a6;
    --v24;
    if (v13[2] == v13[1])
    {
      ((void (*)(void))v13[3])(*v13);
      v13[2] = 0;
      std::string v24 = v29;
    }
  }

  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v13, v19, v15);
}

void *std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, char *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void))
{
  size_t v10 = (a4 >> 32) - (a2 - a1);
  if (a4 >> 32 <= a2 - a1)
  {
    std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)a3, a1, a2, a6);
    return a3;
  }
  else
  {
    unint64_t v11 = HIDWORD(a5);
    size_t v12 = 0;
    switch(a4 & 7)
    {
      case 1:
        break;
      case 2:
        size_t v12 = v10 >> 1;
        v10 -= v10 >> 1;
        break;
      default:
        size_t v12 = v10;
        size_t v10 = 0;
        break;
    }
    unint64_t v14 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v12, SHIDWORD(a5));
    std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)v14, a1, a2, a6);
    return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v14, v10, v11);
  }
}

uint64_t std::__formatter::__hex_to_upper[abi:ne180100](int a1)
{
  if ((a1 - 97) >= 6) {
    return (char)a1;
  }
  else {
    return (char)(a1 - 32);
  }
}

char *std::__to_chars_integral[abi:ne180100]<unsigned int>(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  BOOL v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  int v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5) {
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    }
    if (v5 == 3) {
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    }
    if (v5 != 7)
    {
      uint64_t v10 = a2 - (void)a1;
      int v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned int>(a3, a4);
      if (v10 < v11) {
        return (char *)a2;
      }
      BOOL v4 = (char *)a1 + v11;
      size_t v12 = v4 - 1;
      unsigned int v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[v13 % a4];
        BOOL v14 = v13 >= a4;
        v13 /= a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 9) {
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  }
  unsigned int v7 = (1233 * (32 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= (((__PAIR64__(v7, a3) - std::__itoa::__pow10_32[v7]) >> 32) + 1)) {
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  }
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  if (a1 < a2) {
    return 1;
  }
  unsigned int v3 = a1;
  unsigned int v4 = a2 * a2;
  unsigned int v5 = v4 * v4;
  uint64_t result = 4;
  while (1)
  {
    if (v3 < v4) {
      return (result - 2);
    }
    if (v3 < a2 * a2 * a2) {
      break;
    }
    if (v3 < v5) {
      return result;
    }
    v3 /= v5;
    uint64_t result = (result + 4);
    if (v3 < a2) {
      return (result - 3);
    }
  }
  return (result - 1);
}

_WORD *std::__itoa::__base_10_u32[abi:ne180100](_WORD *a1, unsigned int a2)
{
  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      if (a2 > 0x3B9AC9FF)
      {
        return std::__itoa::__append10[abi:ne180100]<unsigned int>(a1, a2);
      }
      else
      {
        *(unsigned char *)a1 = a2 / 0x5F5E100 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        unsigned int v7 = a2 % 0x5F5E100 % 0xF4240;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v7 / 0x2710uLL];
        v7 %= 0x2710u;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v7 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v7 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      unsigned int v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        unsigned int v9 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(unsigned char *)a1 = v3 + 48;
        unint64_t v4 = (429497 * (unint64_t)(a2 % 0xF4240)) >> 32;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v4];
        unsigned __int16 v5 = a2 % 0xF4240 - 10000 * v4;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v5 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v5 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    unsigned int v6 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v6];
      unsigned __int16 v10 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v10 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v10 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(unsigned char *)a1 = v6 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(5243 * (a2 % 0x2710)) >> 19];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(a2 % 0x2710
                                                                                  - 100
                                                                                  * ((unsigned __int16)((5243 * (a2 % 0x2710)) >> 16) >> 3))];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    unsigned int v8 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v8];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(unsigned char *)a1 = v8 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(unsigned char *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned int>(_WORD *a1, unsigned int a2)
{
  *a1 = std::__itoa::__digits_base_10[a2 / 0x5F5E100uLL];
  a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240uLL];
  unsigned int v2 = a2 % 0x5F5E100 % 0xF4240;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x11)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      BOOL v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  unsigned int v8 = (unsigned char *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    BOOL v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x41)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    BOOL v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x101)
  {
    unsigned int v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unsigned int v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_16_lut[a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    BOOL v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

uint64_t std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(uint64_t result, char *a2, char *a3, uint64_t (*a4)(void))
{
  unsigned int v6 = a2;
  uint64_t v7 = result;
  unint64_t v8 = a3 - a2;
  unint64_t v10 = *(void *)(result + 8);
  uint64_t v9 = *(void *)(result + 16);
  if (v9 + v8 >= v10)
  {
    uint64_t result = (*(uint64_t (**)(void))(result + 24))(*(void *)result);
    uint64_t v9 = 0;
    *(void *)(v7 + 16) = 0;
    unint64_t v10 = *(void *)(v7 + 8);
  }
  if (v8 >= v10)
  {
    do
    {
      uint64_t v13 = *(void *)v7;
      if (*(void *)(v7 + 8) >= v8) {
        unint64_t v14 = v8;
      }
      else {
        unint64_t v14 = *(void *)(v7 + 8);
      }
      if (v14)
      {
        unint64_t v15 = (unsigned char *)(v13 + v9);
        unint64_t v16 = v14;
        uint64_t v17 = v6;
        do
        {
          unsigned int v18 = *v17++;
          *v15++ = a4(v18);
          --v16;
        }
        while (v16);
        uint64_t v13 = *(void *)v7;
      }
      v6 += v14;
      *(void *)(v7 + 16) = v14;
      v8 -= v14;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, void))(v7 + 24))(v13, v14, *(void *)(v7 + 32));
      uint64_t v9 = 0;
      *(void *)(v7 + 16) = 0;
    }
    while (v8);
  }
  else
  {
    if (v6 != a3)
    {
      int v11 = (unsigned char *)(*(void *)v7 + v9);
      do
      {
        unsigned int v12 = *v6++;
        uint64_t result = a4(v12);
        *v11++ = result;
      }
      while (v6 != a3);
      uint64_t v9 = *(void *)(v7 + 16);
    }
    *(void *)(v7 + 16) = v9 + v8;
  }
  return result;
}

void *std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned __int8 a2, void *a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 10 || v5 == 0)
  {
    uint64_t v7 = (void *)*a3;
    unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    unsigned __int8 __src = a2;
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)&__src, 1uLL, v7, v8, v9, 1);
  }
  else
  {
    unint64_t v11 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v11, v12, 0);
  }
}

uint64_t std::__format_spec::__process_parsed_char[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    BOOL v3 = v2 > 0x13;
    int v4 = (1 << v2) & 0x80401;
    if (v3 || v4 == 0) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    unsigned int v6 = (unsigned char *)result;
    uint64_t result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v6 & 7) == 0) {
      unsigned char *v6 = *v6 & 0xF8 | 1;
    }
  }
  return result;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, int a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    unint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    if (a2 >= 0) {
      unsigned int v10 = a2;
    }
    else {
      unsigned int v10 = -a2;
    }
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v10, (void **)a3, v6, v5, a2 < 0);
  }
}

uint64_t std::__format_spec::__process_parsed_integer[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  int v2 = *(unsigned __int8 *)(result + 1);
  if ((v2 - 2) >= 6 && v2 != 0)
  {
    if (v2 != 10) {
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    }
    int v4 = (unsigned char *)result;
    uint64_t result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v4 & 7) == 0) {
      *int v4 = *v4 & 0xF8 | 1;
    }
  }
  return result;
}

void *std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(int a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 != (char)a1) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    unint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    if (a2 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = -a2;
    }
    return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v10, (void **)a3, v6, v5, a2 < 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 != (char)a1) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x260CDB41CLL);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unint64_t v7 = &v13;
      signed int v9 = 2;
      unint64_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unint64_t v7 = &v13;
      signed int v9 = 2;
      unint64_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unint64_t v7 = (uint64_t *)&v12[3];
      if (a1) {
        unint64_t v8 = "0";
      }
      else {
        unint64_t v8 = 0;
      }
      signed int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      unint64_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      unint64_t v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v12, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, signed int a9)
{
  signed int v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    unint64_t v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  unint64_t v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        unsigned int v18 = a8 + 1;
        do
        {
          *(unsigned char *)unint64_t v16 = v17;
          unint64_t v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  size_t v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      signed int v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    uint64_t v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  uint64_t v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    std::string v24 = (std::string::value_type *)&v45;
  }
  else {
    std::string v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v25 = (char *)&v45 + v47;
  }
  else {
    uint64_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    size_t v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        std::string v24 = v28;
      }
      else
      {
        uint64_t v29 = v24 + 1;
        uint64_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          uint64_t v29 = v30;
        }
        while (!v32);
        std::string v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  uint64_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_260CDB75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, signed int a4)
{
  int v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  int v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5) {
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    }
    if (v5 == 3) {
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    }
    if (v5 != 7)
    {
      uint64_t v10 = a2 - (void)a1;
      int v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(a3, a4);
      if (v10 < v11) {
        return (char *)a2;
      }
      int v4 = (char *)a1 + v11;
      unint64_t v12 = v4 - 1;
      unint64_t v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[(v13 % a4)];
        BOOL v14 = v13 >= a4;
        v13 /= (unint64_t)a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 19) {
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  unsigned int v7 = (1233 * (64 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1) {
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  if (a2 > a1) {
    return 1;
  }
  unint64_t v3 = a1;
  unint64_t v4 = a2 * a2;
  unint64_t v5 = (v4 * v4);
  uint64_t result = 4;
  while (1)
  {
    if (v3 < v4) {
      return (result - 2);
    }
    if (v3 < v4 * a2) {
      break;
    }
    if (v3 < v5) {
      return result;
    }
    v3 /= v5;
    uint64_t result = (result + 4);
    if (v3 < a2) {
      return (result - 3);
    }
  }
  return (result - 1);
}

_WORD *std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](_WORD *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (HIDWORD(a2))
  {
    if (a2 > 0x2540BE3FFLL)
    {
      a1 = std::__itoa::__base_10_u32[abi:ne180100](a1, a2 / 0x2540BE400);
      v2 %= 0x2540BE400uLL;
    }
    return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a1, v2);
  }
  else
  {
    return std::__itoa::__base_10_u32[abi:ne180100](a1, a2);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned long long>(_WORD *a1, unint64_t a2)
{
  *a1 = std::__itoa::__digits_base_10[(a2 / 0x5F5E100)];
  unsigned int v2 = a2 % 0x5F5E100;
  a1[1] = std::__itoa::__digits_base_10[v2 / 0xF4240uLL];
  v2 %= 0xF4240u;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x11)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unint64_t v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      BOOL v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  unint64_t v8 = (unsigned char *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    BOOL v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3) {
    return a2;
  }
  uint64_t v4 = a1 + v3;
  if (a3 < 0x41)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + v3;
    do
    {
      unint64_t v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    BOOL v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = 67 - __clz(a3 | 1);
  if (a2 - a1 < (uint64_t)(v3 >> 2)) {
    return a2;
  }
  uint64_t v4 = a1 + (v3 >> 2);
  if (a3 < 0x101)
  {
    unint64_t v6 = a3;
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = a1 + (v3 >> 2);
    do
    {
      unint64_t v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_16_lut[a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  BOOL v7 = (unsigned char *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    BOOL v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    signed int v9 = (void *)*a4;
    return std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, v9, v8, v7);
  }
  else
  {
    unsigned long long v11 = __PAIR128__(a3 ^ (unint64_t)(a3 >> 63), a2 ^ (a3 >> 63)) - __PAIR128__(a3 >> 63, a3 >> 63);
    return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v11, *((unint64_t *)&v11 + 1), (void **)a4, v8, v7, a3 < 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (__PAIR128__(-1, -257) >= __PAIR128__((unint64_t)(a1 >= 0x80) + a2 - 1, a1 - 128)) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, void **a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  switch(BYTE1(a4))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x260CDBEE0);
    case 2:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      unint64_t v8 = &v15;
      signed int v10 = 2;
      signed int v9 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      unint64_t v8 = &v15;
      signed int v10 = 2;
      signed int v9 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      unint64_t v8 = (uint64_t *)v14;
      if (a1 | a2) {
        signed int v9 = "0";
      }
      else {
        signed int v9 = 0;
      }
      signed int v10 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      unint64_t v8 = (uint64_t *)v12;
      signed int v10 = 16;
      signed int v9 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v7 = a4 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      unint64_t v8 = (uint64_t *)v12;
      signed int v10 = 16;
      signed int v9 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, v7, a5, a6, v11, (uint64_t)v8, v9, v10);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, v11, (uint64_t)v13, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, void **a3, unint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, unsigned char *a9, signed int a10)
{
  signed int v10 = a7;
  char v14 = a4;
  if (a6)
  {
    char v15 = 45;
LABEL_7:
    *a7 = v15;
    char v17 = a7 + 1;
    goto LABEL_8;
  }
  int v16 = (a4 >> 3) & 3;
  if (v16 == 2)
  {
    char v15 = 43;
    goto LABEL_7;
  }
  char v17 = a7;
  if (v16 == 3)
  {
    char v15 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      char v18 = *a9;
      if (*a9)
      {
        int v19 = a9 + 1;
        do
        {
          *v17++ = v18;
          int v20 = *v19++;
          char v18 = v20;
        }
        while (v20);
      }
    }
  }
  uint64_t v21 = (char *)std::__to_chars_integral[abi:ne180100]<unsigned __int128>(v17, a8, a1, a2, a10);
  if ((v14 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a3, &v46);
  int v22 = std::locale::use_facet(&v46, MEMORY[0x263F8C150]);
  std::locale::~locale(&v46);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v22->__vftable[1].__on_zero_shared)(&v46, v22);
  if ((char)v48 < 0)
  {
    locale = (char *)v46.__locale_;
    if (!v47)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v48) {
      goto LABEL_44;
    }
    locale = (char *)&v46;
  }
  if (v21 - v17 <= *locale)
  {
    if ((v48 & 0x80) != 0)
    {
      locale = (char *)v46.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v36 = HIDWORD(a4);
    if ((v14 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a3, v10, v17 - v10);
      unsigned __int8 v37 = a4 & 0xF8 | 3;
      if (SHIDWORD(a4) >= (int)v17 - (int)v10) {
        int v38 = v17 - v10;
      }
      else {
        int v38 = HIDWORD(a4);
      }
      unint64_t v36 = (HIDWORD(a4) - v38);
      unsigned __int8 v39 = 48;
      signed int v10 = v17;
    }
    else
    {
      unsigned __int8 v39 = BYTE4(a5);
      unsigned __int8 v37 = a4;
    }
    uint64_t v40 = *a3;
    uint64_t v41 = a4 & 0xFFFFFF00 | (v36 << 32) | v37;
    unint64_t v42 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v39 << 32);
    if ((a4 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21, v40, v41, v42, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21 - v10, v40, v41, v42, v21 - v10);
    }
  }
  std::string v24 = *a3;
  memset(&__p, 0, sizeof(__p));
  if ((v48 & 0x80u) == 0) {
    uint64_t v25 = (std::string::value_type *)&v46;
  }
  else {
    uint64_t v25 = (std::string::value_type *)v46.__locale_;
  }
  if ((v48 & 0x80u) == 0) {
    std::string::value_type v26 = (char *)&v46 + v48;
  }
  else {
    std::string::value_type v26 = (char *)v46.__locale_ + v47;
  }
  std::string::value_type v27 = *v25;
  uint64_t v28 = v21 - v17 - *v25;
  if (v28 >= 1)
  {
    uint64_t v29 = v26 - 1;
    do
    {
      std::string::push_back(&__p, v27);
      if (v25 == v29)
      {
        std::string::value_type v27 = *v29;
        uint64_t v25 = v29;
      }
      else
      {
        uint64_t v30 = v25 + 1;
        int v31 = v25 + 1;
        do
        {
          int v32 = *v31++;
          std::string::value_type v27 = v32;
          if (v32) {
            BOOL v33 = 1;
          }
          else {
            BOOL v33 = v30 == v29;
          }
          uint64_t v30 = v31;
        }
        while (!v33);
        uint64_t v25 = v31 - 1;
      }
      v28 -= v27;
    }
    while (v28 > 0);
  }
  std::string::push_back(&__p, v27 + v28);
  char v34 = ((uint64_t (*)(const std::locale::facet *))v22->__vftable[1].~facet_0)(v22);
  unint64_t v35 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v24, v10, v17, (int)v21, (uint64_t *)&__p, v34, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v46.__locale_);
  }
  return v35;
}

void sub_260CDC228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

_WORD *std::__to_chars_integral[abi:ne180100]<unsigned __int128>(unsigned char *a1, uint64_t a2, unint64_t a3, unint64_t a4, signed int a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = a3;
  unint64_t v7 = (unsigned char *)a2;
  HIDWORD(v9) = a5;
  LODWORD(v9) = a5 - 2;
  int v8 = v9 >> 1;
  if (v8 != 4)
  {
    if (!v8) {
      return (_WORD *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    }
    if (v8 == 3) {
      return (_WORD *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    }
    if (v8 != 7)
    {
      uint64_t v18 = a2 - (void)a1;
      int v19 = std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(a3, a4, a5);
      if (v18 >= v19)
      {
        unint64_t v7 = &a1[v19];
        int v20 = v7 - 1;
        do
        {
          uint64_t v21 = __udivti3();
          BOOL v22 = __PAIR128__(v5, v6) >= a5;
          *v20-- = a0123456789abcd[(v6 - v21 * a5)];
          unint64_t v6 = v21;
          unint64_t v5 = v23;
        }
        while (v22);
      }
      return v7;
    }
    return (_WORD *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
  }
  uint64_t v10 = a2 - (void)a1;
  if (a4)
  {
    if (v10 > 38) {
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    }
    unsigned int v11 = (1233 * (128 - __clz(a4))) >> 12;
    if (v10 >= v11 - (__PAIR128__(a4, a3) < std::__itoa::__pow10_128[v11]) + 1) {
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    }
  }
  else
  {
    if (v10 > 19) {
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    }
    unsigned int v13 = (1233 * (64 - __clz(a3 | 1))) >> 12;
    if (v10 >= v13 - (std::__itoa::__pow10_64[v13] > a3) + 1) {
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    }
  }
  return v7;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (__PAIR128__(a2, a1) < a3) {
    return 1;
  }
  unsigned int v5 = a3 * a3;
  unsigned int v6 = a3 * a3 * a3;
  uint64_t v3 = 4;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v5) {
      return (v3 - 2);
    }
    if (__PAIR128__(a2, a1) < v6) {
      break;
    }
    if (__PAIR128__(a2, a1) < v5 * v5) {
      return v3;
    }
    a1 = __udivti3();
    uint64_t v3 = (v3 + 4);
    if (__PAIR128__(a2, a1) < a3) {
      return (v3 - 3);
    }
  }
  return (v3 - 1);
}

_WORD *std::__itoa::__base_10_u128[abi:ne180100](unsigned char *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (__PAIR128__(a3, a2) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
  {
    *a1 = __udivti3() | 0x30;
    unsigned int v7 = __udivti3();
    *((unsigned char *)v3 + 1) = v7 / 0x5F5E100 + 48;
    v3[1] = std::__itoa::__digits_base_10[v7 % 0x5F5E100 / 0xF4240];
    unsigned int v8 = v7 % 0x5F5E100 % 0xF4240;
    v3[2] = std::__itoa::__digits_base_10[v8 / 0x2710uLL];
    v8 %= 0x2710u;
    v3[3] = std::__itoa::__digits_base_10[(unsigned __int16)v8 / 0x64u];
    v3[4] = std::__itoa::__digits_base_10[(unsigned __int16)v8 % 0x64u];
    unint64_t v9 = __udivti3();
    uint64_t v10 = v3 + 5;
  }
  else
  {
    unint64_t v4 = __udivti3();
    unint64_t v5 = v4;
    if (!HIDWORD(v4))
    {
      unsigned int v6 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4);
      goto LABEL_9;
    }
    if (v4 > 0x2540BE3FFLL)
    {
      uint64_t v3 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4 / 0x2540BE400);
      v5 %= 0x2540BE400uLL;
    }
    uint64_t v10 = v3;
    unint64_t v9 = v5;
  }
  unsigned int v6 = std::__itoa::__append10[abi:ne180100]<unsigned long long>(v10, v9);
LABEL_9:
  unsigned int v11 = v6;
  unint64_t v12 = __umodti3();
  *(unsigned char *)unsigned int v11 = v12 / 0x2540BE400 / 0x5F5E100 + 48;
  unsigned int v13 = v12 / 0x2540BE400 % 0x5F5E100;
  *(_WORD *)((char *)v11 + 1) = std::__itoa::__digits_base_10[v13 / 0xF4240];
  v13 %= 0xF4240u;
  *(_WORD *)((char *)v11 + 3) = std::__itoa::__digits_base_10[v13 / 0x2710uLL];
  v13 %= 0x2710u;
  *(_WORD *)((char *)v11 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v13 / 0x64u];
  *(_WORD *)((char *)v11 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v13 % 0x64u];

  return std::__itoa::__append10[abi:ne180100]<unsigned long long>((_WORD *)((char *)v11 + 9), v12 % 0x2540BE400);
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  int64_t v6 = 128 - v4;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    unint64_t v9 = a3;
    unint64_t v12 = a4;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + v6;
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 4;
      BOOL v11 = a3 <= 0x10F;
      unint64_t v12 = a4 >> 4;
      *(_DWORD *)(v8 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v8 -= 4;
      a3 = v9;
      a4 >>= 4;
    }
    while (!v11);
  }
  unsigned int v13 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v14 = v9 & 1;
    BOOL v11 = v9 <= 1;
    *((void *)&v15 + 1) = v12;
    *(void *)&long long v15 = v9;
    unint64_t v9 = v15 >> 1;
    v12 >>= 1;
    *v13-- = a01[v14];
  }
  while (!v11);
  return v7;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4 = __clz(a3 | 1) | 0x40;
  char v5 = __clz(a4);
  if (a4) {
    char v4 = v5;
  }
  uint64_t v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6) {
    return a2;
  }
  uint64_t v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    unint64_t v9 = a3;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + v6;
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 6;
      a4 >>= 6;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x40);
  }
  BOOL v11 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v12 = v9 & 7;
    BOOL v13 = v9 <= 7;
    *((void *)&v14 + 1) = a4;
    *(void *)&long long v14 = v9;
    unint64_t v9 = v14 >> 3;
    a4 >>= 3;
    *v11-- = a01234567[v12];
  }
  while (!v13);
  return v7;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = __clz(a3 | 1) | 0x40;
  unint64_t v5 = __clz(a4);
  if (a4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = 131 - v4;
  if (a2 - a1 < (uint64_t)(v6 >> 2)) {
    return a2;
  }
  uint64_t v7 = a1 + (v6 >> 2);
  if (__PAIR128__(a4, a3) < 0x101)
  {
    unint64_t v9 = a3;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = a1 + (v6 >> 2);
    do
    {
      *((void *)&v10 + 1) = a4;
      *(void *)&long long v10 = a3;
      unint64_t v9 = v10 >> 8;
      a4 >>= 8;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_16_lut[a3];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x100);
  }
  BOOL v11 = (unsigned char *)(v8 - 1);
  do
  {
    unint64_t v12 = v9 & 0xF;
    BOOL v13 = v9 <= 0xF;
    *((void *)&v14 + 1) = a4;
    *(void *)&long long v14 = v9;
    unint64_t v9 = v14 >> 4;
    a4 >>= 4;
    *v11-- = a0123456789abcd_0[v12];
  }
  while (!v13);
  return v7;
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unsigned int a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    uint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned int a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  unint64_t v7 = v5;
  if ((v6 & 0xFF00) == 0xA00)
  {
    uint64_t v8 = (void *)*a3;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v8, v6, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v6, v5, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a1 >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void *std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    unint64_t v9 = (void *)*a4;
    return std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, v9, v8, v7);
  }
  else
  {
    return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, a3, (void **)a4, v8, v7, 0);
  }
}

void *std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (__PAIR128__(a2, a1) >= 0x80) {
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  }
  char __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void *std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, float a4)
{
  v46[32] = *MEMORY[0x263EF8340];
  int v7 = LODWORD(a4) >> 31;
  if ((LODWORD(a4) & 0x7FFFFFFFu) < 0x7F800000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      float v9 = a4;
    }
    else {
      float v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 149;
    }
    else {
      int v10 = a3;
    }
    int v42 = v10;
    int v43 = 0;
    if (v10 < 150)
    {
      unint64_t v44 = v10 + 45;
      if ((v10 + 45) >= 0x101)
      {
        BOOL v11 = operator new(v10 + 45);
LABEL_13:
        std::string __p = v11;
        std::__formatter::__format_buffer[abi:ne180100]<float,float>((unsigned int *)&v42, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v38, v9);
        if ((a2 & 0x20) != 0)
        {
          unint64_t v12 = v39;
          if (v39 == *(char **)v41)
          {
            *(void *)uint64_t v41 = v39 + 1;
            char *v39 = 46;
            BOOL v13 = v40;
            long long v14 = (char *)(*(void *)v41 - 1);
            if (v40 != (char *)(*(void *)v41 - 1))
            {
              if (v40 + 1 == v14)
              {
                char v16 = *v40;
                *uint64_t v40 = *v14;
                *long long v14 = v16;
              }
              else
              {
                char v15 = *(unsigned char *)(*(void *)v41 - 1);
                memmove(v40 + 1, v40, *(void *)v41 - 1 - (void)v40);
                *BOOL v13 = v15;
              }
            }
            unint64_t v12 = v40;
            unsigned __int8 v39 = v40++;
          }
          if ((BYTE1(a2) - 17) <= 1u)
          {
            if (a3 <= 1) {
              int v17 = 1;
            }
            else {
              int v17 = a3;
            }
            if ((a3 & 0x80000000) != 0) {
              int v17 = 6;
            }
            if (v40 == *(char **)v41) {
              int v18 = v38 - v12;
            }
            else {
              int v18 = -1;
            }
            int v19 = v18 + v17;
            int v20 = &v40[~(unint64_t)v12];
            if ((uint64_t)v20 < v19) {
              v43 += v19 - v20;
            }
          }
        }
        if ((a2 & 0x40) != 0)
        {
          uint64_t v28 = *a1;
          std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v37);
          uint64_t v29 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(v28, (uint64_t)&v42, &v38, &v37, a2, a3);
          std::locale::~locale(&v37);
        }
        else
        {
          uint64_t v21 = *(void *)v41;
          BOOL v22 = (char *)__p;
          uint64_t v23 = *(void *)v41 - (void)__p;
          size_t v24 = v43;
          if (*(void *)v41 - (void)__p + v43 >= a2 >> 32)
          {
            if (!v43 || (uint64_t v30 = v40, v40 == *(char **)v41))
            {
              uint64_t v29 = *a1;
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v41 - (void)__p);
              std::__format::__output_buffer<char>::__fill[abi:ne180100](v29, v24, 48);
            }
            else
            {
              uint64_t v29 = *a1;
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v40 - (unsigned char *)__p);
              std::__format::__output_buffer<char>::__fill[abi:ne180100](v29, v24, 48);
              std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v29, v30, v21 - (void)v30);
            }
          }
          else
          {
            uint64_t v25 = *a1;
            if ((a2 & 7) == 4)
            {
              if (__p != v38)
              {
                unint64_t v36 = v25;
                std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v36, (char *)__p);
                ++v22;
              }
              unsigned __int8 v26 = a2 & 0xF8 | 3;
              unsigned __int8 v27 = 48;
            }
            else
            {
              unsigned __int8 v27 = BYTE4(a3);
              unsigned __int8 v26 = a2;
            }
            unint64_t v31 = a2 & 0xFFFFFFFFFFFFFF00 | v26;
            unint64_t v32 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v27 << 32);
            if (v24) {
              BOOL v33 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v22, *(uint64_t *)v41, v25, v31, v32, v23, v40, v24);
            }
            else {
              BOOL v33 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v22, *(void *)v41 - (void)v22, v25, v31, v32, v23);
            }
            uint64_t v29 = v33;
          }
        }
        if (v44 >= 0x101) {
          operator delete(__p);
        }
        return v29;
      }
    }
    else
    {
      int v42 = 149;
      int v43 = v10 - 149;
      unint64_t v44 = 194;
    }
    BOOL v11 = v46;
    goto LABEL_13;
  }
  unint64_t v35 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v35, a2, a3, a4 < 0.0, 0);
}

void sub_260CDD09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x101) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(void *a1, uint64_t a2, unint64_t a3, char a4, int a5)
{
  if (a4)
  {
    char v5 = 45;
  }
  else
  {
    int v6 = (a2 >> 3) & 3;
    if (v6 == 2)
    {
      char v5 = 43;
    }
    else
    {
      if (v6 != 3)
      {
        p_src = &__src;
        goto LABEL_8;
      }
      char v5 = 32;
    }
  }
  p_src = v14;
  char __src = v5;
LABEL_8:
  if (BYTE1(a2) <= 0x10u && ((1 << SBYTE1(a2)) & 0x15000) != 0)
  {
    uint64_t v8 = 6;
  }
  else
  {
    uint64_t v8 = 6;
    if (BYTE1(a2) != 18) {
      uint64_t v8 = 0;
    }
  }
  uint64_t v9 = 3;
  if (!a5) {
    uint64_t v9 = 0;
  }
  int v10 = &aInfnaninfnan[v8 + v9];
  *(_WORD *)p_src = *(_WORD *)v10;
  p_src[2] = v10[2];
  if ((a2 & 7) == 4) {
    unsigned __int8 v11 = a2 & 0xF8 | 3;
  }
  else {
    unsigned __int8 v11 = a2;
  }
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, p_src - &__src + 3, a1, a2 & 0xFFFFFFFFFFFFFF00 | v11, a3, p_src - &__src + 3);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<float,float>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, float a7@<S0>)
{
  uint64_t v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)uint64_t v9 = v10;
  uint64_t v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x260CDD390);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x261227840](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<float,float>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

void *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(void *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = std::locale::use_facet(this, MEMORY[0x263F8C150]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  unint64_t v12 = a3[2];
  int v13 = *a3;
  if (v12 >= a3[1]) {
    unint64_t v12 = a3[1];
  }
  int64_t __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_29;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_29;
    }
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v56, 0, sizeof(v56));
  int v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  std::string::value_type v18 = p_p->__r_.__value_.__s.__data_[0];
  uint64_t v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    int v20 = v17 - 1;
    do
    {
      std::string::push_back(&v56, v18);
      if (p_p == (std::string *)v20)
      {
        std::string::value_type v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        uint64_t v21 = &p_p->__r_.__value_.__s.__data_[1];
        BOOL v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          int v23 = *v22++;
          std::string::value_type v18 = v23;
          if (v23) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = v21 == v20;
          }
          uint64_t v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v56, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v56;
LABEL_29:
  unint64_t v25 = HIDWORD(a6);
  unsigned __int8 v26 = *(char **)(a2 + 16);
  std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  int64_t v28 = a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0);
  int v29 = a5 & 7;
  size_t v30 = (a5 >> 32) - v28;
  if (a5 >> 32 <= v28)
  {
    size_t v34 = 0;
    size_t v33 = 0;
    unsigned __int8 v31 = v25;
  }
  else
  {
    if (v29 == 4) {
      unsigned __int8 v31 = 48;
    }
    else {
      unsigned __int8 v31 = v25;
    }
    if (v29 == 4) {
      uint64_t v32 = 3;
    }
    else {
      uint64_t v32 = a5 & 7;
    }
    size_t v33 = 0;
    size_t v34 = (a5 >> 32) - v28;
    switch(v32)
    {
      case 1:
        break;
      case 2:
        size_t v33 = v30 >> 1;
        size_t v34 = v30 - (v30 >> 1);
        break;
      default:
        size_t v34 = 0;
        size_t v33 = v30;
        break;
    }
  }
  size_t v54 = v34;
  if (v29 == 4 && v13 != v26)
  {
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v26);
  }
  int v35 = v25 & 0xFFFFFF00 | v31;
  unint64_t v36 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v33, v35);
  std::locale v37 = v36;
  if (v29 != 4)
  {
    int v38 = *(char **)(a2 + 16);
    if (v13 != v38)
    {
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v38);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v40 = &__p.__r_.__value_.__s.__data_[1];
      uint64_t v41 = &__p;
      goto LABEL_52;
    }
LABEL_56:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, __len);
    goto LABEL_57;
  }
  std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_56;
  }
  uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  uint64_t v40 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_52:
  int v42 = (char *)v41 + v39;
  char v43 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    unint64_t v44 = v42 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, *(v42 - 1));
    if (v42 == v40) {
      break;
    }
    v13 += *(v42 - 1);
    uint64_t v45 = *v37;
    uint64_t v46 = v37[2];
    v37[2] = v46 + 1;
    *(unsigned char *)(v45 + v46) = v43;
    --v42;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      v37[2] = 0;
      int v42 = v44;
    }
  }
LABEL_57:
  uint64_t v47 = a3[1];
  if (v47 != a3[3])
  {
    char v48 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    uint64_t v49 = *v37;
    uint64_t v50 = v37[2];
    v37[2] = v50 + 1;
    *(unsigned char *)(v49 + v5std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = v48;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      v37[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v37, *(int *)(a2 + 4), 48);
    uint64_t v47 = a3[3];
  }
  uint64_t v51 = a3[2];
  if (v51 != v47) {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v51, v47 - v51);
  }
  long long v52 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v37, v54, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v52;
}

void sub_260CDD850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, char *a7, size_t a8)
{
  size_t v8 = (a4 >> 32) - (a6 + a8);
  size_t v13 = 0;
  switch(a4 & 7)
  {
    case 1:
      break;
    case 2:
      size_t v13 = v8 >> 1;
      v8 -= v8 >> 1;
      break;
    default:
      size_t v13 = (a4 >> 32) - (a6 + a8);
      size_t v8 = 0;
      break;
  }
  unint64_t v14 = HIDWORD(a5);
  uint64_t v15 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v13, SHIDWORD(a5));
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v15, a1, a7 - a1);
  std::__format::__output_buffer<char>::__fill[abi:ne180100](v15, a8, 48);
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v15, a7, a2 - (void)a7);

  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v15, v8, v14);
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x261227840](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<float,float>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    size_t v13 = result;
  }
  else {
    size_t v13 = v10;
  }
  if (v13 == v10) {
    size_t v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x261227840](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 5), 112, 3uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x261227840](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

void *std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  v47[128] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)&a4 >> 63;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      double v9 = a4;
    }
    else {
      double v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 1074;
    }
    else {
      int v10 = a3;
    }
    int v43 = v10;
    int v44 = 0;
    if (v10 < 1075)
    {
      size_t v11 = v10 + 316;
      unint64_t v45 = v11;
      if ((v10 + 316) < 0x401)
      {
        unint64_t v12 = v47;
        goto LABEL_13;
      }
    }
    else
    {
      int v43 = 1074;
      int v44 = v10 - 1074;
      size_t v11 = 1390;
      unint64_t v45 = 1390;
    }
    unint64_t v12 = operator new(v11);
LABEL_13:
    std::string __p = v12;
    std::__formatter::__format_buffer[abi:ne180100]<double,double>((unsigned int *)&v43, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v39, v9);
    if ((a2 & 0x20) != 0)
    {
      size_t v13 = v40;
      if (v40 == *(char **)v42)
      {
        *(void *)int v42 = v40 + 1;
        *uint64_t v40 = 46;
        unint64_t v14 = v41;
        uint64_t v15 = (char *)(*(void *)v42 - 1);
        if (v41 != (char *)(*(void *)v42 - 1))
        {
          if (v41 + 1 == v15)
          {
            char v17 = *v41;
            char *v41 = *v15;
            char *v15 = v17;
          }
          else
          {
            char v16 = *(unsigned char *)(*(void *)v42 - 1);
            memmove(v41 + 1, v41, *(void *)v42 - 1 - (void)v41);
            *unint64_t v14 = v16;
          }
        }
        size_t v13 = v41;
        uint64_t v40 = v41++;
      }
      if ((BYTE1(a2) - 17) <= 1u)
      {
        if (a3 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a3;
        }
        if ((a3 & 0x80000000) != 0) {
          int v18 = 6;
        }
        if (v41 == *(char **)v42) {
          int v19 = v39 - v13;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 + v18;
        uint64_t v21 = &v41[~(unint64_t)v13];
        if ((uint64_t)v21 < v20) {
          v44 += v20 - v21;
        }
      }
    }
    if ((a2 & 0x40) != 0)
    {
      int v29 = *a1;
      std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v38);
      size_t v30 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v29, (uint64_t)&v43, &v39, &v38, a2, a3);
      std::locale::~locale(&v38);
    }
    else
    {
      uint64_t v22 = *(void *)v42;
      int v23 = (char *)__p;
      uint64_t v24 = *(void *)v42 - (void)__p;
      size_t v25 = v44;
      if (*(void *)v42 - (void)__p + v44 >= a2 >> 32)
      {
        if (!v44 || (unsigned __int8 v31 = v41, v41 == *(char **)v42))
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v42 - (void)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
        }
        else
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v41 - (unsigned char *)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v30, v31, v22 - (void)v31);
        }
      }
      else
      {
        unsigned __int8 v26 = *a1;
        if ((a2 & 7) == 4)
        {
          if (__p != v39)
          {
            std::locale v37 = v26;
            std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v37, (char *)__p);
            ++v23;
          }
          unsigned __int8 v27 = a2 & 0xF8 | 3;
          unsigned __int8 v28 = 48;
        }
        else
        {
          unsigned __int8 v28 = BYTE4(a3);
          unsigned __int8 v27 = a2;
        }
        unint64_t v32 = a2 & 0xFFFFFFFFFFFFFF00 | v27;
        unint64_t v33 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v28 << 32);
        if (v25) {
          size_t v34 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(uint64_t *)v42, v26, v32, v33, v24, v41, v25);
        }
        else {
          size_t v34 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(void *)v42 - (void)v23, v26, v32, v33, v24);
        }
        size_t v30 = v34;
      }
    }
    if (v45 >= 0x401) {
      operator delete(__p);
    }
    return v30;
  }
  unint64_t v36 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v36, a2, a3, a4 < 0.0, 0);
}

void sub_260CDE0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<double,double>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, double a7@<D0>)
{
  double v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)double v9 = v10;
  double v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x260CDE2A4);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x2612277E0](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<double,double>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

void *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(void *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = std::locale::use_facet(this, MEMORY[0x263F8C150]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  unint64_t v12 = a3[2];
  int v13 = *a3;
  if (v12 >= a3[1]) {
    unint64_t v12 = a3[1];
  }
  int64_t __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_29;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_29;
    }
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v56, 0, sizeof(v56));
  int v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  std::string::value_type v18 = p_p->__r_.__value_.__s.__data_[0];
  uint64_t v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    int v20 = v17 - 1;
    do
    {
      std::string::push_back(&v56, v18);
      if (p_p == (std::string *)v20)
      {
        std::string::value_type v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        uint64_t v21 = &p_p->__r_.__value_.__s.__data_[1];
        uint64_t v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          int v23 = *v22++;
          std::string::value_type v18 = v23;
          if (v23) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = v21 == v20;
          }
          uint64_t v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v56, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v56;
LABEL_29:
  unint64_t v25 = HIDWORD(a6);
  unsigned __int8 v26 = *(char **)(a2 + 16);
  std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
  }
  int64_t v28 = a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0);
  int v29 = a5 & 7;
  size_t v30 = (a5 >> 32) - v28;
  if (a5 >> 32 <= v28)
  {
    size_t v34 = 0;
    size_t v33 = 0;
    unsigned __int8 v31 = v25;
  }
  else
  {
    if (v29 == 4) {
      unsigned __int8 v31 = 48;
    }
    else {
      unsigned __int8 v31 = v25;
    }
    if (v29 == 4) {
      uint64_t v32 = 3;
    }
    else {
      uint64_t v32 = a5 & 7;
    }
    size_t v33 = 0;
    size_t v34 = (a5 >> 32) - v28;
    switch(v32)
    {
      case 1:
        break;
      case 2:
        size_t v33 = v30 >> 1;
        size_t v34 = v30 - (v30 >> 1);
        break;
      default:
        size_t v34 = 0;
        size_t v33 = v30;
        break;
    }
  }
  size_t v54 = v34;
  if (v29 == 4 && v13 != v26)
  {
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v26);
  }
  int v35 = v25 & 0xFFFFFF00 | v31;
  unint64_t v36 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v33, v35);
  std::locale v37 = v36;
  if (v29 != 4)
  {
    std::locale v38 = *(char **)(a2 + 16);
    if (v13 != v38)
    {
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v56, v38);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v40 = &__p.__r_.__value_.__s.__data_[1];
      uint64_t v41 = &__p;
      goto LABEL_52;
    }
LABEL_56:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, __len);
    goto LABEL_57;
  }
  std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_) {
    goto LABEL_56;
  }
  uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  uint64_t v40 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_52:
  int v42 = (char *)v41 + v39;
  char v43 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    int v44 = v42 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v13, *(v42 - 1));
    if (v42 == v40) {
      break;
    }
    v13 += *(v42 - 1);
    uint64_t v45 = *v37;
    uint64_t v46 = v37[2];
    v37[2] = v46 + 1;
    *(unsigned char *)(v45 + v46) = v43;
    --v42;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      v37[2] = 0;
      int v42 = v44;
    }
  }
LABEL_57:
  uint64_t v47 = a3[1];
  if (v47 != a3[3])
  {
    char v48 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    uint64_t v49 = *v37;
    uint64_t v50 = v37[2];
    v37[2] = v50 + 1;
    *(unsigned char *)(v49 + v5std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](this, 0) = v48;
    if (v37[2] == v37[1])
    {
      ((void (*)(void))v37[3])(*v37);
      v37[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v37, *(int *)(a2 + 4), 48);
    uint64_t v47 = a3[3];
  }
  uint64_t v51 = a3[2];
  if (v51 != v47) {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v37, v51, v47 - v51);
  }
  long long v52 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v37, v54, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v52;
}

void sub_260CDE764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x2612277E0](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<double,double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    int v13 = result;
  }
  else {
    int v13 = v10;
  }
  if (v13 == v10) {
    int v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x2612277E0](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 6), 112, 4uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x2612277E0](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

void *std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  v47[128] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)&a4 >> 63;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    unint64_t v8 = (unint64_t)a2 >> 8;
    if (a4 >= 0.0) {
      double v9 = a4;
    }
    else {
      double v9 = -a4;
    }
    if (a3 == -1) {
      int v10 = 1074;
    }
    else {
      int v10 = a3;
    }
    int v43 = v10;
    int v44 = 0;
    if (v10 < 1075)
    {
      size_t v11 = v10 + 316;
      unint64_t v45 = v11;
      if ((v10 + 316) < 0x401)
      {
        unint64_t v12 = v47;
        goto LABEL_13;
      }
    }
    else
    {
      int v43 = 1074;
      int v44 = v10 - 1074;
      size_t v11 = 1390;
      unint64_t v45 = 1390;
    }
    unint64_t v12 = operator new(v11);
LABEL_13:
    std::string __p = v12;
    std::__formatter::__format_buffer[abi:ne180100]<double,long double>((unsigned int *)&v43, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8, (std::__1 **)&v39, v9);
    if ((a2 & 0x20) != 0)
    {
      int v13 = v40;
      if (v40 == *(char **)v42)
      {
        *(void *)int v42 = v40 + 1;
        *uint64_t v40 = 46;
        int v14 = v41;
        uint64_t v15 = (char *)(*(void *)v42 - 1);
        if (v41 != (char *)(*(void *)v42 - 1))
        {
          if (v41 + 1 == v15)
          {
            char v17 = *v41;
            char *v41 = *v15;
            char *v15 = v17;
          }
          else
          {
            char v16 = *(unsigned char *)(*(void *)v42 - 1);
            memmove(v41 + 1, v41, *(void *)v42 - 1 - (void)v41);
            *int v14 = v16;
          }
        }
        int v13 = v41;
        uint64_t v40 = v41++;
      }
      if ((BYTE1(a2) - 17) <= 1u)
      {
        if (a3 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a3;
        }
        if ((a3 & 0x80000000) != 0) {
          int v18 = 6;
        }
        if (v41 == *(char **)v42) {
          int v19 = v39 - v13;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 + v18;
        uint64_t v21 = &v41[~(unint64_t)v13];
        if ((uint64_t)v21 < v20) {
          v44 += v20 - v21;
        }
      }
    }
    if ((a2 & 0x40) != 0)
    {
      int v29 = *a1;
      std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v38);
      size_t v30 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v29, (uint64_t)&v43, &v39, &v38, a2, a3);
      std::locale::~locale(&v38);
    }
    else
    {
      uint64_t v22 = *(void *)v42;
      int v23 = (char *)__p;
      uint64_t v24 = *(void *)v42 - (void)__p;
      size_t v25 = v44;
      if (*(void *)v42 - (void)__p + v44 >= a2 >> 32)
      {
        if (!v44 || (unsigned __int8 v31 = v41, v41 == *(char **)v42))
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, *(void *)v42 - (void)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
        }
        else
        {
          size_t v30 = *a1;
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v41 - (unsigned char *)__p);
          std::__format::__output_buffer<char>::__fill[abi:ne180100](v30, v25, 48);
          std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v30, v31, v22 - (void)v31);
        }
      }
      else
      {
        unsigned __int8 v26 = *a1;
        if ((a2 & 7) == 4)
        {
          if (__p != v39)
          {
            std::locale v37 = v26;
            std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v37, (char *)__p);
            ++v23;
          }
          unsigned __int8 v27 = a2 & 0xF8 | 3;
          unsigned __int8 v28 = 48;
        }
        else
        {
          unsigned __int8 v28 = BYTE4(a3);
          unsigned __int8 v27 = a2;
        }
        unint64_t v32 = a2 & 0xFFFFFFFFFFFFFF00 | v27;
        unint64_t v33 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v28 << 32);
        if (v25) {
          size_t v34 = std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(uint64_t *)v42, v26, v32, v33, v24, v41, v25);
        }
        else {
          size_t v34 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v23, *(void *)v42 - (void)v23, v26, v32, v33, v24);
        }
        size_t v30 = v34;
      }
    }
    if (v45 >= 0x401) {
      operator delete(__p);
    }
    return v30;
  }
  unint64_t v36 = *a1;

  return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(v36, a2, a3, a4 < 0.0, 0);
}

void sub_260CDEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__formatter::__format_buffer[abi:ne180100]<double,long double>@<X0>(unsigned int *a1@<X0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, std::__1 **a6@<X8>, double a7@<D0>)
{
  double v9 = (std::__1 *)*((void *)a1 + 2);
  if (a2)
  {
    char v10 = 45;
  }
  else if (a4 == 2)
  {
    char v10 = 43;
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_8;
    }
    char v10 = 32;
  }
  *(unsigned char *)double v9 = v10;
  double v9 = (std::__1 *)((char *)v9 + 1);
LABEL_8:
  switch(a5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      __break(1u);
      JUMPOUT(0x260CDF0C0);
    case 11:
      if (a3) {
        int v14 = *a1;
      }
      else {
        int v14 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v14, (uint64_t)v9, a6);
    case 12:
      if (a3) {
        int v17 = *a1;
      }
      else {
        int v17 = -1;
      }
      return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>((uint64_t)a1, v17, (uint64_t)v9, a6);
    case 13:
      uint64_t v18 = *a1;
      return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v18, (uint64_t)v9, a6);
    case 14:
      uint64_t result = std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      goto LABEL_25;
    case 15:
    case 16:
      uint64_t v11 = *a1;
      *a6 = v9;
      uint64_t result = MEMORY[0x261227810](v9, *((void *)a1 + 2) + *((void *)a1 + 1), 2, v11);
      a6[2] = (std::__1 *)result;
      a6[3] = (std::__1 *)result;
      if (v11) {
        int v13 = v11 + 1;
      }
      else {
        int v13 = 0;
      }
      a6[1] = (std::__1 *)(result - v13);
      return result;
    case 17:
      goto LABEL_20;
    case 18:
      uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, (uint64_t)v9, a6);
      char v16 = a6[2];
      if (v16 != a6[3]) {
LABEL_25:
      }
        *(unsigned char *)char v16 = 69;
      break;
    default:
      if (a3)
      {
LABEL_20:
        uint64_t v15 = *a1;
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, v15, (uint64_t)v9, a6);
      }
      else
      {
        uint64_t result = (uint64_t)std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>(v9, (uint64_t)a1, (char *)v9, a6, a7);
      }
      break;
  }
  return result;
}

unsigned char *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  uint64_t v6 = MEMORY[0x261227810](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 3, a2);
  a4[3] = v6;
  uint64_t result = (unsigned char *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    size_t v8 = v6 - (void)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      uint64_t v9 = 6;
      if (v8 < 6) {
        uint64_t v9 = v6 - (void)result;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(v6 + v10) != 101)
      {
        if (++v10 == -3) {
          goto LABEL_8;
        }
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46) {
          uint64_t v11 = (unsigned char *)(a3 + 1);
        }
        else {
          uint64_t v11 = (unsigned char *)v6;
        }
        goto LABEL_12;
      }
    }
    uint64_t result = memchr(result, 46, v8);
    if (result) {
      uint64_t v11 = result;
    }
    else {
      uint64_t v11 = (unsigned char *)v6;
    }
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

unsigned char *std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  *a4 = this;
  uint64_t v7 = std::to_chars(this, (char *)(*(void *)(a2 + 16) + *(void *)(a2 + 8)), a3, a5);
  size_t v8 = (unsigned char *)v7;
  a4[3] = v7;
  unint64_t v9 = v7 - (void)this;
  uint64_t v10 = (unsigned char *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6) {
      unint64_t v9 = 6;
    }
    uint64_t v11 = -(uint64_t)v9;
    while (*(unsigned char *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        uint64_t v10 = (unsigned char *)v7;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (unsigned char *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  uint64_t result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result) {
    int v13 = result;
  }
  else {
    int v13 = v10;
  }
  if (v13 == v10) {
    int v13 = v8;
  }
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  if (a2 == -1) {
    uint64_t result = std::to_chars();
  }
  else {
    uint64_t result = MEMORY[0x261227810](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 4);
  }
  a4[3] = result;
  int v8 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v7 = a3 + 1;
  if (v8 == 46)
  {
    uint64_t v9 = result - 2;
    uint64_t v10 = memchr((void *)(result - 6), 112, 4uLL);
    uint64_t result = v7;
    if (v10) {
      uint64_t v7 = (uint64_t)v10;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>(a1, a2, a3, a4);
  uint64_t v6 = (unsigned char *)*a4;
  uint64_t v7 = (unsigned char *)a4[2];
  if ((unsigned char *)*a4 != v7)
  {
    do
    {
      int v8 = (char)*v6;
      if ((v8 - 97) < 6) {
        LOBYTE(v8) = v8 - 32;
      }
      *v6++ = v8;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned char *)a4[2];
  }
  unsigned char *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  uint64_t result = MEMORY[0x261227810](a3, *(void *)(a1 + 16) + *(void *)(a1 + 8), 1, a2);
  a4[3] = result;
  uint64_t v7 = a3 + 1;
  if (*(unsigned char *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    uint64_t v8 = result - a3 - 2;
    uint64_t v7 = result;
    if (v8 >= 4)
    {
      uint64_t v9 = 6;
      if ((unint64_t)v8 < 6) {
        uint64_t v9 = result - a3 - 2;
      }
      uint64_t v10 = -v9;
      while (*(unsigned char *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          uint64_t v7 = result;
          goto LABEL_11;
        }
      }
      uint64_t v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

unsigned __int8 *std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2)
{
  uint64_t result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x128u);
  unsigned int v4 = a1[1];
  if (v4 >= 2 && v4 != 19) {
    std::__throw_format_error[abi:ne180100]("The type option contains an invalid value for a string formatting argument");
  }
  return result;
}

uint64_t *std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, uint64_t **a3)
{
  unint64_t v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if (SHIDWORD(v5) > 0 || (v6 & 0x80000000) == 0)
  {
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    size_t v10 = strlen(a2);
    return std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v10, *a3, v8, v9);
  }
  else
  {
    uint64_t v11 = *a3;
    if (*a2)
    {
      do
      {
        int v14 = v11;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v14, a2);
      }
      while (*++a2);
    }
  }
  return v11;
}

void *std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x80000000) != 0)
  {
    return std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
  }
  else
  {
    int v9 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, a2, a5, 0);
    size_t v11 = v10 - (void)__src;
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, v11, a3, a4, a5, v9);
  }
}

unsigned __int8 *std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(unsigned char *a1, unsigned __int8 **a2)
{
  uint64_t result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x124u);
  int v4 = a1[1];
  if ((v4 - 8) >= 2 && v4 != 0) {
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a pointer");
  }
  return result;
}

void *std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  uint64_t v7 = 1536;
  if ((v5 & 0xFF00) == 0x900) {
    uint64_t v7 = 1792;
  }

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (void **)a3, v5 & 0xFFFFFFFFFFFF00FFLL | v7 | 0x20, v6, 0);
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(BYTE1(a3))
  {
    case 1:
      __break(1u);
      JUMPOUT(0x260CDF7B8);
    case 2:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x200;
      uint64_t v7 = &v13;
      signed int v9 = 2;
      uint64_t v8 = "0b";
      goto LABEL_11;
    case 3:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x300;
      uint64_t v7 = &v13;
      signed int v9 = 2;
      uint64_t v8 = "0B";
      goto LABEL_11;
    case 4:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x400;
      uint64_t v7 = (uint64_t *)&v12[3];
      if (a1) {
        uint64_t v8 = "0";
      }
      else {
        uint64_t v8 = 0;
      }
      signed int v9 = 8;
      goto LABEL_11;
    case 6:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x600;
      uint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      uint64_t v8 = "0x";
      goto LABEL_11;
    case 7:
      unint64_t v6 = a3 & 0xFFFFFFFFFFFF00FFLL | 0x700;
      uint64_t v7 = (uint64_t *)v11;
      signed int v9 = 16;
      uint64_t v8 = "0X";
LABEL_11:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, v6, a4, a5, v10, (uint64_t)v7, v8, v9);
      break;
    default:
      uint64_t result = std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, v10, (uint64_t)v12, 0, 10);
      break;
  }
  return result;
}

void *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, void **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, unsigned char *a8, signed int a9)
{
  signed int v9 = a6;
  char v13 = a3;
  if (a5)
  {
    char v14 = 45;
LABEL_7:
    *a6 = v14;
    char v16 = a6 + 1;
    goto LABEL_8;
  }
  int v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    char v14 = 43;
    goto LABEL_7;
  }
  char v16 = a6;
  if (v15 == 3)
  {
    char v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      char v17 = *a8;
      if (*a8)
      {
        uint64_t v18 = a8 + 1;
        do
        {
          *(unsigned char *)char v16 = v17;
          char v16 = (_WORD *)((char *)v16 + 1);
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
    }
  }
  int v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0) {
    goto LABEL_44;
  }
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  uint64_t v21 = std::locale::use_facet(&v45, MEMORY[0x263F8C150]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47) {
      goto LABEL_44;
    }
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    unint64_t v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      unsigned __int8 v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9) {
        int v37 = v16 - v9;
      }
      else {
        int v37 = HIDWORD(a3);
      }
      unint64_t v35 = (HIDWORD(a3) - v37);
      unsigned __int8 v38 = 48;
      signed int v9 = (char *)v16;
    }
    else
    {
      unsigned __int8 v38 = BYTE4(a4);
      unsigned __int8 v36 = a3;
    }
    std::string::size_type v39 = *a2;
    uint64_t v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    unint64_t v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700) {
      return std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, v39, v40, v41, (uint64_t (*)(void))std::__formatter::__hex_to_upper[abi:ne180100]);
    }
    else {
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
    }
  }
  int v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0) {
    uint64_t v24 = (std::string::value_type *)&v45;
  }
  else {
    uint64_t v24 = (std::string::value_type *)v45.__locale_;
  }
  if ((v47 & 0x80u) == 0) {
    size_t v25 = (char *)&v45 + v47;
  }
  else {
    size_t v25 = (char *)v45.__locale_ + v46;
  }
  std::string::value_type v26 = *v24;
  uint64_t v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    unsigned __int8 v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        std::string::value_type v26 = *v28;
        uint64_t v24 = v28;
      }
      else
      {
        int v29 = v24 + 1;
        size_t v30 = v24 + 1;
        do
        {
          int v31 = *v30++;
          std::string::value_type v26 = v31;
          if (v31) {
            BOOL v32 = 1;
          }
          else {
            BOOL v32 = v29 == v28;
          }
          int v29 = v30;
        }
        while (!v32);
        uint64_t v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  char v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  size_t v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(v45.__locale_);
  }
  return v34;
}

void sub_260CDFAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  _Unwind_Resume(exception_object);
}

vg::hrtf::HRTFDecoderModel *std::unique_ptr<vg::hrtf::HRTFDecoderModel>::reset[abi:ne180100](vg::hrtf::HRTFDecoderModel **a1, vg::hrtf::HRTFDecoderModel *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFDecoderModel::~HRTFDecoderModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::hrtf::HRTFDecoderModelEspresso *std::unique_ptr<vg::hrtf::HRTFDecoderModelEspresso>::reset[abi:ne180100](vg::hrtf::HRTFDecoderModelEspresso **a1, vg::hrtf::HRTFDecoderModelEspresso *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFDecoderModelEspresso::~HRTFDecoderModelEspresso(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::hrtf::DTFModelEspresso *std::unique_ptr<vg::hrtf::DTFModelEspresso>::reset[abi:ne180100](vg::hrtf::DTFModelEspresso **a1, vg::hrtf::DTFModelEspresso *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFModelEspresso::~DTFModelEspresso(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::hrtf::DTFBiasModel *std::unique_ptr<vg::hrtf::DTFBiasModel>::reset[abi:ne180100](vg::hrtf::DTFBiasModel **a1, vg::hrtf::DTFBiasModel *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFBiasModel::~DTFBiasModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

vg::hrtf::DTFBiasModelEspresso *std::unique_ptr<vg::hrtf::DTFBiasModelEspresso>::reset[abi:ne180100](vg::hrtf::DTFBiasModelEspresso **a1, vg::hrtf::DTFBiasModelEspresso *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DTFBiasModelEspresso::~DTFBiasModelEspresso(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void ***std::unique_ptr<vg::hrtf::DelayCoefficientsModel>::reset[abi:ne180100](void ****a1, void ***a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::DelayCoefficientsModel::~DelayCoefficientsModel(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void **std::unique_ptr<vg::hrtf::HRTFModelImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::HRTFModelImplInput::~HRTFModelImplInput(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void vg::hrtf::HRTFModelImpl::preprocessData()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Minimum 3 face frames required.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to preprocess face capture data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to preprocess left ear capture data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to preprocess right ear capture data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Preprocessing data for models...", v2, v3, v4, v5, v6);
}

void vg::hrtf::HRTFModelImpl::predict()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict delay coefficients.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict left HRTF data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict right HRTF data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to create audio profile data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Predicting HRTFData for right ear...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Predicting HRTFData for left ear...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to create DelayCoefficientsModel.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Running prediction for DelayCoefficientsModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_260C8D000, v0, v1, "Creating DelayCoefficientsModel...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to preprocess HRTFModelInputs data.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict face encodings.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict left ear encodings.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Failed to predict right ear encodings.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Invalid model inputs.", v2, v3, v4, v5, v6);
}

void vg::hrtf::HRTFModelImpl::predict(vg::hrtf::HRTFModelInputs const&,std::optional<std::string> const&)const::$_0::operator()()
{
  OUTLINED_FUNCTION_3(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  _os_log_error_impl(&dword_260C8D000, v0, OS_LOG_TYPE_ERROR, "Failed to create %s.", v1, 0xCu);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_260C8D000, v0, v1, "Running prediction for %s (EspressoV1)...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_260C8D000, v0, v1, "%s falling back to EspressoV1.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_260C8D000, v0, v1, "Running prediction for %s...", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_260C8D000, v0, v1, "Creating %s...", v2, v3, v4, v5, v6);
}

void vg::hrtf::HRTFModel::create()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_260C8D000, v0, v1, "Unable to create model with empty modelsRootPath", v2, v3, v4, v5, v6);
}

uint64_t vg::hrtf::EncoderModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  vg::shared::VGE5RT::compileModel(a2, 1, &v28);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&v28);
  std::string::size_type v5 = v28.__r_.__value_.__r.__words[0];
  v28.__r_.__value_.__r.__words[0] = 0;
  if (v5) {
    (*(void (**)(std::string::size_type))(*(void *)v5 + 8))(v5);
  }
  for (unint64_t i = 1; i != 4; ++i)
  {
    std::to_string(&v28, i);
    InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
    if (!v8) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((uint64_t *)(a1 + 32), (long long *)(v8 + 40));
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v9, (unsigned __int8 *)__p);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((uint64_t *)(a1 + 56), (long long *)(v10 + 40));
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    size_t v11 = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
    std::operator+<char>();
    unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v11, (unsigned __int8 *)__p);
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100]((uint64_t *)(a1 + 80), (long long *)(v12 + 40));
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&v28, "encodings");
  char v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&v28);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v16 = *((void *)v14 + 5);
  uint64_t v15 = *((void *)v14 + 6);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  char v17 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v16;
  *(void *)(a1 + 112) = v15;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 104));
  uint64_t result = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  if (result)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 120), (uint64_t *)&v28);
    std::string::size_type v20 = v28.__r_.__value_.__r.__words[0];
    v28.__r_.__value_.__r.__words[0] = 0;
    if (v20) {
      (*(void (**)(std::string::size_type))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 128);
    size_t v25 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    uint64_t v22 = (E5RT::ExecutionStream *)v25;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&v28, v22);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)(a1 + 16), (uint64_t *)&v28);
    std::string::size_type v23 = v28.__r_.__value_.__r.__words[0];
    v28.__r_.__value_.__r.__words[0] = 0;
    if (v23) {
      (*(void (**)(std::string::size_type))(*(void *)v23 + 8))(v23);
    }
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v28);
    uint64_t v24 = (void **)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      operator delete(*v24);
    }
    *(_OWORD *)uint64_t v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *(void *)(a1 + 152) = *((void *)&v28.__r_.__value_.__l + 2);
    return *(void *)(a1 + 16) && *(void *)a1 != 0;
  }
  return result;
}

void sub_260CE0B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<E5RT::IOPort>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    char v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<E5RT::IOPort>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_260CE0CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModelImpl::predict(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 1;
  do
  {
    std::to_string(&v29, v8);
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(void *)(a1 + 32) + v7));
    uint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v10);
    id v12 = *(id *)(*a2 + v6);
    uint64_t v13 = *(void *)(*(void *)(TensorStrides + 8) - 16);
    if (v13 != [*(id *)(*a2 + v6) bytesPerRow])
    {
      uint64_t v14 = objc_msgSend(*(id *)(*a2 + v6), "vg_convertSurfaceStride:", *(void *)(*(void *)(TensorStrides + 8) - 16));

      id v12 = (id)v14;
    }
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    if (v28) {
      operator new();
    }
    E5RT::IOPort::BindMemoryObject();
    uint64_t v15 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(void *)(a1 + 56) + v7));
    uint64_t v16 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v15);
    long long v17 = vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(*(void **)(*a2 + v6 + 8), v16);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    E5RT::IOPort::BindMemoryObject();
    uint64_t v18 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(*(void *)(a1 + 80) + v7));
    int v19 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v18);
    std::string::size_type v20 = vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(*(void **)(*a2 + v6 + 16), v19);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    E5RT::IOPort::BindMemoryObject();
    uint64_t v28 = 0;

    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    v7 += 16;
    ++v8;
    v6 += 80;
  }
  while (v7 != 48);
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 8);
  char v27 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 16));
  E5RT::ExecutionStream::ResetStream(*(E5RT::ExecutionStream **)(a1 + 16));
  E5RT::BufferObject::GetHandle<__IOSurface *>();
  uint64_t v22 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
  std::string::size_type v23 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 104));
  uint64_t v24 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v23);
  vg::shared::VGE5RT::convertSurfaceTo1DVector(v22, v24, v25, (uint64_t)&v29);
  std::string::size_type size = v29.__r_.__value_.__l.__size_;
  *(void *)a3 = v29.__r_.__value_.__r.__words[0];
  *(void *)(a3 + 8) = size;
  *(_DWORD *)(a3 + 16) = v29.__r_.__value_.__r.__words[2];
  *(unsigned char *)(a3 + 24) = 1;
}

void sub_260CE10EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_260CE1240()
{
}

id vg::hrtf::EncoderModelImpl::predict(std::vector<vg::hrtf::ProcessedROIData> const&)::$_0::operator()(void *a1, vg::shared::VGE5RT *a2)
{
  id v3 = a1;
  unint64_t v5 = v3;
  if (vg::shared::VGE5RT::isTensorComponentFloat16(a2, v4))
  {
    unint64_t v5 = objc_msgSend(v3, "vg_toFloat16Surface");
  }
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(a2);
  std::string __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)TensorStrides, *(void *)(TensorStrides + 8), (uint64_t)(*(void *)(TensorStrides + 8) - *(void *)TensorStrides) >> 3);
  uint64_t v7 = *(v11 - 2);
  if (v7 != [v5 bytesPerRow])
  {
    uint64_t v8 = objc_msgSend(v5, "vg_convertSurfaceStride:", *(v11 - 2));

    unint64_t v5 = (void *)v8;
  }
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }

  return v5;
}

void sub_260CE132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModel::create()
{
}

void sub_260CE1420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<vg::hrtf::EncoderModel>::reset[abi:ne180100]((void ****)va, 0);
  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModel::EncoderModel(vg::hrtf::EncoderModel *this)
{
}

{
  operator new();
}

void vg::hrtf::EncoderModel::~EncoderModel(void ***this)
{
}

{
  std::unique_ptr<vg::hrtf::EncoderModelImpl>::reset[abi:ne180100](this, 0);
}

void vg::hrtf::EncoderModel::predictEncodings(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::vector<std::shared_ptr<E5RT::IOPort>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  unint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<E5RT::IOPort>>,std::reverse_iterator<std::shared_ptr<E5RT::IOPort>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    id v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<E5RT::IOPort>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void **std::unique_ptr<vg::hrtf::EncoderModelImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vg::hrtf::EncoderModelImpl::~EncoderModelImpl(result);
    JUMPOUT(0x2612278D0);
  }
  return result;
}

void vg::hrtf::EncoderModelImpl::~EncoderModelImpl(void **this)
{
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = (std::__shared_weak_count *)this[14];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v6 = this + 10;
  std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = this + 7;
  std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = this + 4;
  std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (std::__shared_weak_count *)this[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::vector<std::shared_ptr<E5RT::IOPort>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<E5RT::IOPort>>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<E5RT::IOPort>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

NSObject *vg::hrtf::createAudioProfile(uint64_t a1, char *a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v4 = __VGLogSharedInstance();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_260C8D000, v4, OS_LOG_TYPE_DEBUG, " Creating Audio Profile... ", (uint8_t *)&buf, 2u);
  }

  vg::hrtf::hrtfToIRData(a1 + 96, a1 + 248, a1, a1 + 24, &v64);
  if (v64)
  {
    vg::hrtf::hrtfToIRData(a1 + 120, a1 + 272, a1, a1 + 24, &v62);
    if (!v62)
    {
      unint64_t v35 = __VGLogSharedInstance();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_260C8D000, v35, OS_LOG_TYPE_ERROR, " Failed to create bias dtf ir data. ", (uint8_t *)&buf, 2u);
      }

      char v33 = 0;
      goto LABEL_122;
    }
    uint64_t v58 = v62;
    uint64_t v59 = v63;
    if (v63) {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vg::hrtf::modifyIRDataWithITD((uint64_t)&v58, &v60);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v60)
    {
      uint64_t v5 = vg::hrtf::createUserData(a1 + 144, a1 + 296);
      if (v5)
      {
        uint64_t v54 = v64;
        float32x2_t v55 = v65;
        if (v65) {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        vg::hrtf::createIRDataWithUserData((uint64_t)&v54, v5, &v56);
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        if (v56)
        {
          uint64_t v50 = v62;
          uint64_t v51 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          vg::hrtf::createIRDataWithUserData((uint64_t)&v50, v5, &v52);
          if (v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          }
          if (v52)
          {
            uint64_t v46 = v60;
            unsigned __int8 v47 = v61;
            if (v61) {
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            vg::hrtf::createIRDataWithUserData((uint64_t)&v46, v5, &v48);
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            if (v48)
            {
              uint64_t v6 = vg::hrtf::createEqualizerList(a1 + 168, a1 + 320);
              if (v6)
              {
                if (*(char *)(a1 + 375) >= 0) {
                  uint64_t v7 = (const char *)(a1 + 352);
                }
                else {
                  uint64_t v7 = *(const char **)(a1 + 352);
                }
                CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
                MEMORY[0x261227160](v48, v52, v6, v8);
                CFDataRef v9 = (const __CFData *)objc_claimAutoreleasedReturnValue();
                if (a2[24])
                {
                  std::operator+<char>();
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/dtf.ir", (const void **)v44, (void **)&buf);
                  if ((v67 & 0x80u) == 0) {
                    p_long long buf = (const UInt8 *)&buf;
                  }
                  else {
                    p_long long buf = (const UInt8 *)buf;
                  }
                  if ((v67 & 0x80u) == 0) {
                    CFIndex v11 = v67;
                  }
                  else {
                    CFIndex v11 = *((void *)&buf + 1);
                  }
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, p_buf, v11, 0);
                  int v12 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if ((char)v67 < 0) {
                    operator delete((void *)buf);
                  }
                  if (v12)
                  {
                    char v13 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl(&dword_260C8D000, v13, OS_LOG_TYPE_ERROR, " Failed to write DTF debug data ", (uint8_t *)&buf, 2u);
                    }
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/biasDtf.ir", (const void **)v44, (void **)&buf);
                  if ((v67 & 0x80u) == 0) {
                    long long v14 = (const UInt8 *)&buf;
                  }
                  else {
                    long long v14 = (const UInt8 *)buf;
                  }
                  if ((v67 & 0x80u) == 0) {
                    CFIndex v15 = v67;
                  }
                  else {
                    CFIndex v15 = *((void *)&buf + 1);
                  }
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, v14, v15, 0);
                  int v16 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if ((char)v67 < 0) {
                    operator delete((void *)buf);
                  }
                  if (v16)
                  {
                    long long v17 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, " Failed to write bias DTF debug data ", (uint8_t *)&buf, 2u);
                    }
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/itdmod.ir", (const void **)v44, (void **)&buf);
                  if ((v67 & 0x80u) == 0) {
                    uint64_t v18 = (const UInt8 *)&buf;
                  }
                  else {
                    uint64_t v18 = (const UInt8 *)buf;
                  }
                  if ((v67 & 0x80u) == 0) {
                    CFIndex v19 = v67;
                  }
                  else {
                    CFIndex v19 = *((void *)&buf + 1);
                  }
                  applesauce::CF::URLRef::URLRef((CFURLRef *)__p, v18, v19, 0);
                  int v20 = IR::IRDataLoader::writeIRFile();
                  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
                  if ((char)v67 < 0) {
                    operator delete((void *)buf);
                  }
                  if (v20)
                  {
                    uint64_t v21 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl(&dword_260C8D000, v21, OS_LOG_TYPE_ERROR, " Failed to write ITDMod debug data ", (uint8_t *)&buf, 2u);
                    }
                  }
                  id v43 = 0;
                  uint64_t v22 = [MEMORY[0x263F08900] dataWithJSONObject:v6 options:1 error:&v43];
                  id v23 = v43;
                  if (v23)
                  {
                    uint64_t v24 = __VGLogSharedInstance();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(buf) = 138412290;
                      *(void *)((char *)&buf + 4) = v23;
                      _os_log_impl(&dword_260C8D000, v24, OS_LOG_TYPE_ERROR, " Failed to write serialize EQ to json: %@ ", (uint8_t *)&buf, 0xCu);
                    }
                  }
                  if (v22)
                  {
                    if (!a2[24]) {
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                    if (a2[23] >= 0) {
                      size_t v25 = a2;
                    }
                    else {
                      size_t v25 = *(char **)a2;
                    }
                    std::string::value_type v26 = objc_msgSend(NSString, "stringWithFormat:", @"%s/eq_data.json", v25);
                    id v42 = v23;
                    char v27 = [v22 writeToFile:v26 options:0 error:&v42];
                    id v28 = v42;

                    if ((v27 & 1) == 0)
                    {
                      std::string v29 = __VGLogSharedInstance();
                      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(buf) = 138412290;
                        *(void *)((char *)&buf + 4) = v28;
                        _os_log_impl(&dword_260C8D000, v29, OS_LOG_TYPE_ERROR, " Failed to write EQ debug data: %@ ", (uint8_t *)&buf, 0xCu);
                      }
                    }
                    id v23 = v28;
                  }
                  if (!a2[24]) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("/audio_profile.data", (const void **)a2, __p);
                  std::ofstream::basic_ofstream((uint64_t *)&buf);
                  size_t v30 = (std::ios_base *)((char *)&buf + *(void *)(buf - 24));
                  v30->__exceptions_ = 5;
                  std::ios_base::clear(v30, v30->__rdstate_);
                  CFDataGetBytePtr(v9);
                  CFDataGetLength(v9);
                  std::ostream::write();
                  std::ofstream::close(&buf);
                  std::ofstream::~ofstream(&buf);
                  if (v41 < 0) {
                    operator delete(__p[0]);
                  }

                  if (v45 < 0) {
                    operator delete(v44[0]);
                  }
                }
                int v31 = __VGLogSharedInstance();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_260C8D000, v31, OS_LOG_TYPE_DEBUG, " Succesfully created Audio Profile ", (uint8_t *)&buf, 2u);
                }

                BOOL v32 = v9;
                char v33 = v32;
              }
              else
              {
                BOOL v32 = __VGLogSharedInstance();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_260C8D000, v32, OS_LOG_TYPE_ERROR, " Failed to create eq dictionary. ", (uint8_t *)&buf, 2u);
                }
                char v33 = 0;
              }
            }
            else
            {
              uint64_t v6 = __VGLogSharedInstance();
              if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_ERROR, " Failed to add user data to itdmod ir data. ", (uint8_t *)&buf, 2u);
              }
              char v33 = 0;
            }

            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
          }
          else
          {
            unsigned __int8 v38 = __VGLogSharedInstance();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_impl(&dword_260C8D000, v38, OS_LOG_TYPE_ERROR, " Failed to add user data to bias_dtf ir data. ", (uint8_t *)&buf, 2u);
            }

            char v33 = 0;
          }
          if (v53) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          }
        }
        else
        {
          int v37 = __VGLogSharedInstance();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_260C8D000, v37, OS_LOG_TYPE_ERROR, " Failed to add user data to dtf ir data. ", (uint8_t *)&buf, 2u);
          }

          char v33 = 0;
        }
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        goto LABEL_120;
      }
      unsigned __int8 v36 = __VGLogSharedInstance();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_260C8D000, v36, OS_LOG_TYPE_ERROR, " Failed to create user data dictionary for IRData. ", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      uint64_t v5 = __VGLogSharedInstance();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_260C8D000, v5, OS_LOG_TYPE_ERROR, " Failed to create ITDMod ir data. ", (uint8_t *)&buf, 2u);
      }
    }
    char v33 = 0;
LABEL_120:

    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
LABEL_122:
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    goto LABEL_124;
  }
  size_t v34 = __VGLogSharedInstance();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_260C8D000, v34, OS_LOG_TYPE_ERROR, " Failed to create dtf ir data. ", (uint8_t *)&buf, 2u);
  }

  char v33 = 0;
LABEL_124:
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }

  return v33;
}

void sub_260CE22B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,std::__shared_weak_count *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a26 < 0) {
    operator delete(__p);
  }

  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }

  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      CFDataRef v9 = a2;
    }
    else {
      CFDataRef v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  uint64_t v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

CFURLRef *applesauce::CF::URLRef::URLRef(CFURLRef *a1, const UInt8 *a2, CFIndex a3, CFURLRef baseURL)
{
  CFURLRef v5 = CFURLCreateWithBytes(0, a2, a3, 0, baseURL);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_260CE262C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  id v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x261227650](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  id v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x261227650](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_260CE27EC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x261227850](v1);
  _Unwind_Resume(a1);
}

void std::ofstream::close(void *a1)
{
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x261227660](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x261227850](a1 + 52);
  return a1;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_260CE2FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL vg::hrtf::EncoderModelEspressoImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v29[2] = *MEMORY[0x263EF8340];
  id v6 = [NSString alloc];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  CFStringRef v8 = (void *)[v6 initWithCString:v7];
  id v25 = 0;
  CFDataRef v9 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v8 options:0 error:&v25];
  id v10 = v25;
  if (v10)
  {
    id v11 = v10;
    BOOL v12 = 0;
  }
  else
  {
    id v24 = 0;
    char v13 = [MEMORY[0x263F08900] JSONObjectWithData:v9 options:0 error:&v24];
    id v11 = v24;
    long long v14 = [v13 objectForKeyedSubscript:@"properties"];
    CFIndex v15 = v14;
    BOOL v12 = 0;
    if (!v11 && v14)
    {
      v29[0] = v8;
      v28[0] = @"model_path";
      v28[1] = @"config";
      v26[0] = @"version";
      int v16 = objc_msgSend(v14, "objectForKeyedSubscript:");
      v27[0] = v16;
      v27[1] = @"CPU";
      v26[1] = @"engine";
      v26[2] = @"input_name";
      uint64_t v26[3] = @"output_name";
      v27[2] = &unk_270CFD9F0;
      void v27[3] = &unk_270CFDA08;
      long long v17 = [NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:4];
      v29[1] = v17;
      uint64_t v18 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];

      CFIndex v19 = [(VGMLEspressoModel *)[VGMLHRTFEncoderModel alloc] initWithModelInfo:v18];
      int v20 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v19;

      uint64_t v21 = *(void *)(a1 + 24);
      BOOL v12 = v21 != 0;
      if (v21)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &v23);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(std::string *)a1 = v23;
      }
    }
  }

  return v12;
}

void sub_260CE349C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModelEspressoImpl::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = [*(id *)(a1 + 24) getOutputSize];
  size_t v7 = (4 * v6 + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x49090899uLL);
  CFStringRef v8 = memptr;
  CFDataRef v9 = [[VGMLFloatIOData alloc] initWithSize:v6 withData:memptr];
  [*(id *)(a1 + 24) inferCaptureData:a2 toOutput:v9];
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7 >> 2;
  *(_DWORD *)(a3 + 16) = v6;
  *(unsigned char *)(a3 + 24) = 1;
}

void sub_260CE35D0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void vg::hrtf::EncoderModelEspresso::create()
{
}

void sub_260CE36A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  id v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspresso>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::EncoderModelEspresso::EncoderModelEspresso(vg::hrtf::EncoderModelEspresso *this)
{
}

{
  operator new();
}

void vg::hrtf::EncoderModelEspresso::~EncoderModelEspresso(vg::hrtf::EncoderModelEspresso *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<vg::hrtf::HRTFDecoderModelEspressoImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void vg::hrtf::EncoderModelEspresso::predictEncodings(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

id vg::hrtf::getAssetWithError(void **a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogHRTFMobileAssetUtils();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetAssetWithError", (const char *)&unk_260D385D9, buf, 2u);
  }

  uint64_t v3 = vg::shared::getAssetsForType((void *)vg::hrtf::detail::kAssetType, a1);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
    unsigned int v6 = VGLogHRTFMobileAssetUtils();
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_260C8D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "FilterAssets", (const char *)&unk_260D385D9, buf, 2u);
    }

    uint64_t v7 = [v5 count];
    CFStringRef v8 = VGLogHRTFMobileAssetUtils();
    CFDataRef v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_INFO, "Filtering assets...", buf, 2u);
      }

      id v10 = [MEMORY[0x263F08A98] predicateWithBlock:&__block_literal_global_278];
      CFDataRef v9 = [v5 filteredArrayUsingPredicate:v10];

      if ([v9 count])
      {
        int v31 = [v9 sortedArrayUsingComparator:&__block_literal_global_282];
        id v11 = [v31 lastObject];
        BOOL v12 = [v11 attributes];
        id v30 = v5;
        char v13 = [v12 objectForKeyedSubscript:*MEMORY[0x263F55898]];
        uint64_t v14 = [v13 integerValue];

        CFIndex v15 = [v12 objectForKeyedSubscript:*MEMORY[0x263F55880]];
        uint64_t v16 = [v15 integerValue];

        long long v17 = [v12 objectForKeyedSubscript:*MEMORY[0x263F55868]];
        uint64_t v18 = [v17 integerValue];

        uint64_t v19 = v14;
        int v20 = VGLogHRTFMobileAssetUtils();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64_t v21 = [v11 assetType];
          uint64_t v22 = [v11 assetId];
          *(_DWORD *)long long buf = 138413314;
          char v33 = v21;
          __int16 v34 = 2112;
          unint64_t v35 = v22;
          __int16 v36 = 2048;
          uint64_t v37 = v19;
          __int16 v38 = 2048;
          uint64_t v39 = v16;
          __int16 v40 = 2048;
          uint64_t v41 = v18;
          _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_INFO, "Selected asset {%@, %@} (mastered version: %zu, content version: %zu, compatibility version: %zu)", buf, 0x34u);
        }
        id v5 = v30;
        if ([v11 refreshState])
        {
          id v23 = v11;
        }
        else
        {
          id v25 = VGLogHRTFMobileAssetUtils();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            std::string::value_type v26 = [v11 assetType];
            char v27 = [v11 assetId];
            vg::hrtf::getAssetWithError(v26, v27, buf, v25);
          }

          id v23 = 0;
        }
      }
      else
      {
        id v24 = VGLogHRTFMobileAssetUtils();
        int v31 = v24;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          vg::hrtf::getAssetWithError(v24);
        }
        id v23 = 0;
      }
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        vg::hrtf::getAssetWithError(v9);
      }
      id v23 = 0;
    }

    ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke();
    if (v23) {
      id v28 = v23;
    }
  }
  else
  {
    id v23 = 0;
  }

  ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke();

  return v23;
}

void sub_260CE3C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke();
  ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogHRTFMobileAssetUtils(void)
{
  if (VGLogHRTFMobileAssetUtils(void)::onceToken != -1) {
    dispatch_once(&VGLogHRTFMobileAssetUtils(void)::onceToken, &__block_literal_global_270);
  }
  os_log_t v0 = (void *)VGLogHRTFMobileAssetUtils(void)::handle;

  return v0;
}

void ___ZN2vg4hrtf17getAssetWithErrorERNS_6shared15NSErrorCWrapperE_block_invoke()
{
  os_log_t v0 = VGLogHRTFMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetAssetWithError", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZL25VGLogHRTFMobileAssetUtilsv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "HRTFMobileAssetUtils");
  uint64_t v1 = (void *)VGLogHRTFMobileAssetUtils(void)::handle;
  VGLogHRTFMobileAssetUtils(void)::handle = (uint64_t)v0;
}

void sub_260CE3E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke()
{
  os_log_t v0 = VGLogHRTFMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "FilterAssets", (const char *)&unk_260D385D9, v1, 2u);
  }
}

BOOL ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke_275(uint64_t a1, void *a2)
{
  id v2 = [a2 attributes];
  uint64_t v3 = [v2 objectForKeyedSubscript:*MEMORY[0x263F55868]];
  uint64_t v4 = [v3 integerValue];

  return v4 == 1;
}

void sub_260CE3F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg4hrtf6detailL12filterAssetsEP7NSArrayIP7MAAssetE_block_invoke_279(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = [a2 attributes];
  unsigned int v6 = [v4 attributes];
  uint64_t v7 = *MEMORY[0x263F55880];
  CFStringRef v8 = [v5 objectForKeyedSubscript:*MEMORY[0x263F55880]];
  uint64_t v9 = [v8 integerValue];

  id v10 = [v6 objectForKeyedSubscript:v7];
  uint64_t v11 = [v10 integerValue];

  if (v9 == v11)
  {
    uint64_t v12 = *MEMORY[0x263F55898];
    char v13 = [v5 objectForKeyedSubscript:*MEMORY[0x263F55898]];
    uint64_t v14 = [v13 integerValue];

    CFIndex v15 = [v6 objectForKeyedSubscript:v12];
    uint64_t v16 = [v15 integerValue];

    uint64_t v17 = 1;
    if (v14 <= v16) {
      uint64_t v17 = -1;
    }
    if (v14 == v16) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17;
    }
  }
  else if (v9 > v11)
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = -1;
  }

  return v18;
}

void sub_260CE4050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CE4094()
{
}

void sub_260CE409C()
{
}

void vg::hrtf::getAssetWithError(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "No assets found for filtering!", v1, 2u);
}

{
  int v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  id v5 = *MEMORY[0x263EF8340];
  uint64_t v1 = 138412546;
  id v2 = vg::hrtf::detail::kAssetType;
  uint64_t v3 = 2048;
  id v4 = 1;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "Unable to find any compatible assets for asset type %@ with compatibility version %zu", (uint8_t *)&v1, 0x16u);
}

void vg::hrtf::getAssetWithError(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "Failed to refresh state for asset {%@, %@}", buf, 0x16u);
}

uint64_t vg::hrtf::getDelaySlopeAtFront(_DWORD *a1)
{
  if (a1[4] > 0x562u) {
    return COERCE_UNSIGNED_INT((float)(*(float *)(*(void *)a1 + 5512) - *(float *)(*(void *)a1 + 5452)) / 45.0) | 0x100000000;
  }
  uint64_t v1 = __VGLogSharedInstance();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_260C8D000, v1, OS_LOG_TYPE_ERROR, " Invalid delay size. ", v3, 2u);
  }

  return 0;
}

uint64_t vg::hrtf::computeHRTFSD(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 284160)
  {
    uint64_t v1 = *(float32x4_t **)a1;
    float v2 = 0.0;
    uint64_t v3 = 284160;
    do
    {
      float32x4_t v4 = *v1++;
      float32x4_t v5 = vabsq_f32(v4);
      float v2 = (float)((float)((float)(v2 + v5.f32[0]) + v5.f32[1]) + v5.f32[2]) + v5.f32[3];
      v3 -= 4;
    }
    while (v3);
    return COERCE_UNSIGNED_INT((float)(v2 * 50.38) / 284160.0) | 0x100000000;
  }
  else
  {
    uint64_t v7 = __VGLogSharedInstance();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFStringRef v8 = 0;
      _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_ERROR, " Invalid hrtf size. ", v8, 2u);
    }

    return 0;
  }
}

id vg::hrtf::createAnalyticsData(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  v26[6] = *MEMORY[0x263EF8340];
  uint64_t DelaySlopeAtFront = vg::hrtf::getDelaySlopeAtFront(a4);
  if ((DelaySlopeAtFront & 0xFF00000000) != 0) {
    uint64_t v9 = (uint64_t)(float)(*(float *)&DelaySlopeAtFront * 1000.0);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = vg::hrtf::computeHRTFSD(a2 + 24);
  if ((v10 & 0xFF00000000) != 0) {
    uint64_t v11 = (uint64_t)(float)(*(float *)&v10 * 1000.0);
  }
  else {
    uint64_t v11 = 0;
  }
  v25[0] = @"DTheta";
  uint64_t v12 = [NSNumber numberWithLongLong:v9];
  v26[0] = v12;
  v25[1] = @"SpatialDistance";
  char v13 = [NSNumber numberWithLongLong:v11];
  v26[1] = v13;
  v25[2] = @"AutoEncoderLatent1";
  uint64_t v14 = [NSNumber numberWithLongLong:(uint64_t)(float)(**(float **)a1 * 1000.0)];
  v26[2] = v14;
  v25[3] = @"AutoEncoderLatent2";
  CFIndex v15 = [NSNumber numberWithLongLong:(uint64_t)(float)(*(float *)(*(void *)a1 + 4) * 1000.0)];
  uint64_t v26[3] = v15;
  v25[4] = @"AutoEncoderLatent3";
  uint64_t v16 = [NSNumber numberWithLongLong:(uint64_t)(float)(*(float *)(*(void *)a1 + 8) * 1000.0)];
  void v26[4] = v16;
  v25[5] = @"AutoEncoderLatent4";
  uint64_t v17 = [NSNumber numberWithLongLong:(uint64_t)(float)(*(float *)(*(void *)a1 + 12) * 1000.0)];
  id v26[5] = v17;
  uint64_t v18 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:6];

  if (*((unsigned char *)a5 + 24))
  {
    id v24 = 0;
    uint64_t v19 = [MEMORY[0x263F08900] dataWithJSONObject:v18 options:1 error:&v24];
    id v20 = v24;
    if (!v20)
    {
      if (!*((unsigned char *)a5 + 24)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (*((char *)a5 + 23) >= 0) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = (uint64_t *)*a5;
      }
      uint64_t v22 = [NSString stringWithUTF8String:v21];
      [v19 writeToFile:v22 atomically:1];
    }
  }

  return v18;
}

void sub_260CE4628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::reportCoreAnalytics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = ___ZN2vg4hrtf19reportCoreAnalyticsERKN3cva6MatrixIfLj0ELj1ELb0EEERKNS0_8HRTFDataES8_RKNS0_9DelayDataERKNSt3__18optionalINSC_12basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEE_block_invoke;
  v6[3] = &__block_descriptor_72_e19___NSDictionary_8__0l;
  v6[4] = a1;
  v6[5] = a2;
  void v6[6] = a3;
  v6[7] = a4;
  v6[8] = a5;
  float32x4_t v5 = (void *)MEMORY[0x261227FC0](v6);
  AnalyticsSendEventLazy();
}

void sub_260CE4734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZN2vg4hrtf19reportCoreAnalyticsERKN3cva6MatrixIfLj0ELj1ELb0EEERKNS0_8HRTFDataES8_RKNS0_9DelayDataERKNSt3__18optionalINSC_12basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vg::hrtf::createAnalyticsData(*(void *)(a1 + 32), *(void *)(a1 + 40), a3, *(_DWORD **)(a1 + 56), *(uint64_t **)(a1 + 64));
}

BOOL vg::hrtf::DelayCoefficientsModelImpl::init(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  vg::shared::VGE5RT::compileModel(a2, 0, &__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((void *)a1, (uint64_t *)&__p);
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v5) {
    (*(void (**)(std::string::size_type))(*(void *)v5 + 8))(v5);
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "face_encodings");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = *((void *)v7 + 5);
  uint64_t v8 = *((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 4std::unique_ptr<vg::hrtf::EncoderModelImpl>::reset[abi:ne180100](this, 0) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "left_delay");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v14 = *((void *)v12 + 5);
  uint64_t v13 = *((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  CFIndex v15 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "right_delay");
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v16, (unsigned __int8 *)&__p);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v19 = *((void *)v17 + 5);
  uint64_t v18 = *((void *)v17 + 6);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  id v20 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v18;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 48));
  uint64_t v22 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
  id v23 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPort **)(a1 + 64));
  uint64_t v24 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v23);
  BOOL result = 0;
  if (v22 && v24)
  {
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 80), (uint64_t *)&__p);
    std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      (*(void (**)(std::string::size_type))(*(void *)v26 + 8))(v26);
    }
    E5RT::TensorDescriptor::AllocateMemory();
    std::shared_ptr<E5RT::BufferObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((void *)(a1 + 96), (uint64_t *)&__p);
    std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
    id v28 = *(std::__shared_weak_count **)(a1 + 88);
    __int16 v34 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    std::string v29 = *(std::__shared_weak_count **)(a1 + 104);
    char v33 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPort::BindMemoryObject();
    id v30 = (E5RT::ExecutionStream *)v33;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&__p, v30);
    std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((void *)(a1 + 16), (uint64_t *)&__p);
    std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v31) {
      (*(void (**)(std::string::size_type))(*(void *)v31 + 8))(v31);
    }
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(a3, "", &__p);
    BOOL v32 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v32);
    }
    *(_OWORD *)BOOL v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 128) = *((void *)&__p.__r_.__value_.__l + 2);
    return *(void *)(a1 + 16) && *(void *)a1 != 0;
  }
  return result;
}

void sub_260CE4AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    vg::hrtf::HRTFDecoderModelImpl::init();
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DelayCoefficientsModelImpl::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 32)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[4]);
    uint64_t v7 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    vg::shared::VGE5RT::convert1DVectorToSurface(a2, v7);
    E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>();
    uint64_t v26 = v20[0];
    if (v20[0]) {
      operator new();
    }
    uint64_t v27 = 0;
    E5RT::IOPort::BindMemoryObject();
    v20[0] = 0;
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v24 = *a1;
    id v25 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)a1[2]);
    E5RT::ExecutionStream::ResetStream((E5RT::ExecutionStream *)a1[2]);
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    uint64_t v10 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    E5RT::BufferObject::GetHandle<__IOSurface *>();
    uint64_t v11 = (vg::shared::VGE5RT *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[6]);
    uint64_t v13 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v12);
    uint64_t v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)a1[8]);
    CFIndex v15 = (IOSurface *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v14);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v11, v15, v16, (uint64_t)v20);
    vg::shared::VGE5RT::convertSurfaceTo1DVector(v10, v13, v17, (uint64_t)v22);
    uint64_t v18 = v20[1];
    *(void *)a3 = v20[0];
    *(void *)(a3 + 8) = v18;
    *(_DWORD *)(a3 + 16) = v21;
    uint64_t v19 = v22[1];
    *(void *)(a3 + 24) = v22[0];
    *(void *)(a3 + 32) = v19;
    *(_DWORD *)(a3 + 4std::unique_ptr<vg::hrtf::EncoderModelImpl>::reset[abi:ne180100](this, 0) = v23;
    *(unsigned char *)(a3 + 48) = 1;
  }
  else
  {
    uint64_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20[0]) = 0;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " Face encoding input dimension mismatch. ", (uint8_t *)v20, 2u);
    }

    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

void sub_260CE4DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a9) {
    (*(void (**)(void *))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::DelayCoefficientsModel::create()
{
}

void sub_260CE4F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<vg::hrtf::DelayCoefficientsModel>::reset[abi:ne180100]((void ****)va, 0);
  _Unwind_Resume(a1);
}

void vg::hrtf::DelayCoefficientsModel::DelayCoefficientsModel(vg::hrtf::DelayCoefficientsModel *this)
{
}

{
  operator new();
}

void vg::hrtf::DelayCoefficientsModel::~DelayCoefficientsModel(void ***this)
{
}

{
  std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0);
}

void vg::hrtf::DelayCoefficientsModel::predictDelayCoefficients(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL vg::hrtf::checkAspectRatio(vg::hrtf *this, const IOSurface *a2, float a3)
{
  float32x4_t v4 = this;
  uint64_t v5 = [(vg::hrtf *)v4 height];
  uint64_t v6 = [(vg::hrtf *)v4 width];
  if (v5 <= 0)
  {
    uint64_t v9 = (vg::frame_selection::VGBlendshapeExpressionFilter *)_os_crash();
    vg::frame_selection::VGBlendshapeExpressionFilter::~VGBlendshapeExpressionFilter(v9);
  }
  if (v6 <= 0)
  {
    uint64_t v10 = (vg::frame_selection::VGBlendshapeExpressionFilter *)_os_crash();
    vg::frame_selection::VGBlendshapeExpressionFilter::~VGBlendshapeExpressionFilter(v10);
  }
  BOOL v7 = vabds_f32((float)v6 / (float)v5, a3) <= 0.00000001;

  return v7;
}

void sub_260CE50F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL vg::hrtf::isBoxValid(_OWORD *a1, uint64_t *a2)
{
  long long v2 = *a1;
  if (COERCE_FLOAT(*a1) < 0.0) {
    return 0;
  }
  uint64_t v3 = *a2;
  float v4 = (float)*a2;
  if (*(float *)&v2 > v4 || *((float *)&v2 + 1) < 0.0 || *((float *)&v2 + 1) > (float)HIDWORD(v3)) {
    return 0;
  }
  if (*((float *)&v2 + 2) < 0.0 || *((float *)&v2 + 2) > v4) {
    return 0;
  }
  BOOL v7 = *((float *)&v2 + 3) >= 0.0;
  if (*((float *)&v2 + 3) > (float)HIDWORD(v3)) {
    BOOL v7 = 0;
  }
  if (*((float *)&v2 + 2) < *(float *)&v2) {
    BOOL v7 = 0;
  }
  return *((float *)&v2 + 3) >= *((float *)&v2 + 1) && v7;
}

double vg::hrtf::padBox(int8x16_t *a1, float a2)
{
  *(float32x2_t *)v2.f32 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), *(float32x2_t *)a1->i8), a2);
  v2.i64[1] = v2.i64[0];
  *(void *)&double result = vsubq_f32(*(float32x4_t *)a1, v2).u64[0];
  return result;
}

double vg::hrtf::makeBoxWithAspectRatio(float *a1, uint32x2_t *a2, void *a3)
{
  *(uint32x2_t *)v3.i8 = *a2;
  *(float32x2_t *)v4.f32 = vcvt_f32_u32(*a2);
  unsigned int v5 = vcvtps_s32_f32(a1[2] * v4.f32[0]);
  unsigned int v6 = vcvtms_s32_f32(*a1 * v4.f32[0]);
  unsigned int v7 = vcvtps_s32_f32(vmuls_lane_f32(a1[3], *(float32x2_t *)v4.f32, 1));
  unsigned int v8 = vcvtms_s32_f32(vmuls_lane_f32(a1[1], *(float32x2_t *)v4.f32, 1));
  unsigned int v9 = v5 - v6;
  int v10 = HIDWORD(*a3);
  int v11 = *a3;
  int v12 = v11 * v10;
  float v13 = (float)v11 / (float)v10;
  int v14 = (int)(v5 - v6) % (v11 * v10);
  if (v14) {
    int v15 = v12 - v14;
  }
  else {
    int v15 = 0;
  }
  int v16 = v9 + v15;
  int v17 = (int)(float)((float)v16 / v13);
  int v18 = v7 - v8;
  int v19 = (int)(v7 - v8) % v12;
  int v20 = v7 - v8 + v12 - v19;
  if (!v19) {
    int v20 = v7 - v8;
  }
  if (v18 > v17)
  {
    int v16 = (int)(float)(v13 * (float)v20);
    int v17 = v20;
  }
  int v21 = v17 - v18;
  int v22 = v16 - v9;
  int v23 = v6 - (v22 >> 1);
  int v24 = v22 - (v22 >> 1) + v5;
  int v25 = v8 - (v21 >> 1);
  int v26 = v21 - (v21 >> 1) + v7;
  int v27 = v24 - (v23 & (v23 >> 31));
  int v28 = v23 & ~(v23 >> 31);
  int v29 = v23 + v3.i32[0] - v24;
  BOOL v30 = v24 < v3.i32[0];
  if (v24 >= v3.i32[0]) {
    unsigned int v31 = *a2;
  }
  else {
    unsigned int v31 = v27;
  }
  if (v30) {
    int v29 = v28;
  }
  int v32 = v26 - (v25 & (v25 >> 31));
  int v33 = v25 & ~(v25 >> 31);
  int v34 = v25 + v3.i32[1] - v26;
  BOOL v35 = v26 < v3.i32[1];
  if (v26 >= v3.i32[1]) {
    unsigned int v36 = HIDWORD(*(unint64_t *)a2);
  }
  else {
    unsigned int v36 = v32;
  }
  if (v35) {
    int v34 = v33;
  }
  v4.i64[1] = v4.i64[0];
  v3.u64[1] = (unint64_t)*a2;
  v37.i64[0] = __PAIR64__(v34, v29);
  v37.i64[1] = __PAIR64__(v36, v31);
  v3.i64[0] = vdivq_f32(vcvtq_f32_s32(vminq_s32(vmaxq_s32(v37, (int32x4_t)0), v3)), v4).u64[0];
  return *(double *)v3.i64;
}

id vg::hrtf::createEqualizerList(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v31[0] = &unk_270CFDC18;
  v30[0] = @"QVersion";
  v30[1] = @"ExportDate";
  float32x4_t v4 = NSString;
  v42[0] = time(0);
  unsigned int v5 = localtime(v42);
  long long v6 = *(_OWORD *)&v5->tm_sec;
  long long v7 = *(_OWORD *)&v5->tm_mon;
  long long v8 = *(_OWORD *)&v5->tm_isdst;
  tm_zone = v5->tm_zone;
  long long v37 = v7;
  long long v38 = v8;
  long long v36 = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  id v43 = &v36;
  int v44 = "%d-%m-%Y %H-%M-%S";
  std::operator<<[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)&v43);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v33, v28);
  *(void *)long long buf = *MEMORY[0x263F8C2C8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v33[0] = MEMORY[0x263F8C318] + 16;
  if (v34 < 0) {
    operator delete((void *)v33[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x261227850](&v35);
  if (v29 >= 0) {
    unsigned int v9 = v28;
  }
  else {
    unsigned int v9 = (void **)v28[0];
  }
  int v10 = [v4 stringWithUTF8String:v9];
  v31[1] = v10;
  void v30[2] = @"Global";
  *(void *)&long long v36 = @"Filter";
  *((void *)&v36 + 1) = @"PhaseCompensate";
  *(void *)long long buf = &unk_270CFDC18;
  v33[0] = &unk_270CFDC30;
  *(void *)&long long v37 = @"PhaseFlip";
  *((void *)&v37 + 1) = @"Mute";
  v33[1] = &unk_270CFDC30;
  v33[2] = &unk_270CFDC30;
  int v11 = [NSDictionary dictionaryWithObjects:buf forKeys:&v36 count:4];
  v42[0] = (time_t)@"ch1";
  int v12 = (long long *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v11 copyItems:1];
  v42[1] = (time_t)@"ch2";
  id v43 = v12;
  float v13 = (char *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v11 copyItems:1];
  int v44 = v13;
  int v14 = [NSDictionary dictionaryWithObjects:&v43 forKeys:v42 count:2];

  v40[0] = @"Channels";
  v40[1] = @"InputGain";
  v41[0] = v14;
  v41[1] = &unk_270CFDC30;
  int v15 = [NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:2];

  v31[2] = v15;
  v30[3] = @"Filters";
  id v16 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (*(unsigned char *)(a1 + 24))
  {
    for (uint64_t i = 0; i != 6; ++i)
      int v19 = v18 = {;
      [v16 addObject:v19];
    }
    if (!*(unsigned char *)(a2 + 24)) {
      goto LABEL_14;
    }
LABEL_12:
    for (uint64_t j = 0; j != 6; ++j)
      v22 = int v21 = {;
      [v16 addObject:v22];
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(a2 + 24)) {
    goto LABEL_12;
  }
  int v25 = __VGLogSharedInstance();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_INFO, " No coefficients found - generating bypass EQ filter ", buf, 2u);
  }
  v27 = int v26 = ;
  [v16 addObject:v27];

LABEL_14:
  void v31[3] = v16;
  int v23 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:4];

  if (v29 < 0) {
    operator delete(v28[0]);
  }

  return v23;
}

void sub_260CE57B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unsigned int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_260CE5A0C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x261227850](v1);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2)
{
  MEMORY[0x2612276A0](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x263F8C160]);
    std::locale::~locale(&v9);
    uint64_t v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      unsigned int v5 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put()) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 1);
    }
  }
  MEMORY[0x2612276B0](v8);
  return a1;
}

void sub_260CE5BA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x2612276B0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x260CE5B84);
}

void sub_260CE5C00(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x261227850](a1 + 112);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned int v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::locale v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

id vg::hrtf::anonymous namespace'::createSideChannels(int a1)
{
  v7[2] = *MEMORY[0x263EF8340];
  id v2 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  v6[0] = @"Filter";
  v6[1] = @"PhaseCompensate";
  v7[0] = &unk_270CFDC18;
  v7[1] = &unk_270CFDC30;
  unint64_t v3 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  if (a1)
  {
    [v2 setValue:v3 forKey:@"ch2"];
    unint64_t v4 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v3 copyItems:1];
    [v4 setValue:&unk_270CFDC30 forKey:@"Filter"];
    [v2 setValue:v4 forKey:@"ch1"];
  }
  else
  {
    [v2 setValue:v3 forKey:@"ch1"];
    unint64_t v4 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v3 copyItems:1];
    [v4 setValue:&unk_270CFDC30 forKey:@"Filter"];
    [v2 setValue:v4 forKey:@"ch2"];
  }

  return v2;
}

void sub_260CE5F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::hrtf::anonymous namespace'::createFilterDictionary(uint64_t a1, uint64_t a2, void *a3)
{
  v23[6] = *MEMORY[0x263EF8340];
  id v5 = a3;
  if (!*(unsigned char *)(a1 + 24))
  {
    v20[0] = @"Gain";
    v20[1] = @"Type";
    v21[0] = &unk_270CFDC30;
    v21[1] = @"Gain";
    void v20[2] = @"Channels";
    int v10 = [objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v5 copyItems:1];
    v20[3] = @"Active";
    void v21[2] = v10;
    v21[3] = &unk_270CFDC30;
    id v16 = [NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:4];
    goto LABEL_12;
  }
  unsigned int v7 = a2 + 6;
  unint64_t v8 = *(unsigned int *)(a1 + 16);
  if (a2 + 6 < v8)
  {
    unsigned int v9 = a2 + 12;
    if (a2 + 12 < v8)
    {
      v22[0] = @"Frequency";
      LODWORD(v6) = *(_DWORD *)(*(void *)a1 + 4 * a2);
      int v10 = [NSNumber numberWithFloat:v6];
      v23[0] = v10;
      v22[1] = @"Gain";
      LODWORD(v11) = *(_DWORD *)(*(void *)a1 + 4 * v7);
      int v12 = [NSNumber numberWithFloat:v11];
      v23[1] = v12;
      void v22[2] = @"Quality";
      LODWORD(v13) = *(_DWORD *)(*(void *)a1 + 4 * v9);
      int v14 = [NSNumber numberWithFloat:v13];
      v23[2] = v14;
      v23[3] = @"Bell";
      v22[3] = @"Type";
      v22[4] = @"Channels";
      int v15 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithDictionary:v5 copyItems:1];
      v22[5] = @"Active";
      v23[4] = v15;
      v23[5] = &unk_270CFDC18;
      id v16 = [NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:6];

      goto LABEL_12;
    }
    int v10 = __VGLogSharedInstance();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    *(_WORD *)int v19 = 0;
    int v17 = " Quality value missing in EQ Coefficients data. ";
    goto LABEL_10;
  }
  int v10 = __VGLogSharedInstance();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v19 = 0;
    int v17 = " Gain value missing in EQ Coefficients data. ";
LABEL_10:
    _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, v17, v19, 2u);
  }
LABEL_11:
  id v16 = 0;
LABEL_12:

  return v16;
}

void sub_260CE6264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IOSurface *vg::hrtf::createNormalizedDepth(vg::hrtf *this, const IOSurface *a2)
{
  void v29[4] = *MEMORY[0x263EF8340];
  id v2 = this;
  if ([(vg::hrtf *)v2 pixelFormat] == 1278226534
    || [(vg::hrtf *)v2 pixelFormat] == 1717855600)
  {
    uint64_t v3 = [(vg::hrtf *)v2 width];
    uint64_t v4 = [(vg::hrtf *)v2 height];
    id v5 = objc_alloc(MEMORY[0x263F0ED00]);
    v28[0] = *MEMORY[0x263F0ECF8];
    double v6 = [NSNumber numberWithUnsignedLong:v3];
    v29[0] = v6;
    v28[1] = *MEMORY[0x263F0ECC0];
    unsigned int v7 = [NSNumber numberWithUnsignedLong:v4];
    uint64_t v8 = *MEMORY[0x263F0ECC8];
    v29[1] = v7;
    v29[2] = &unk_270CFDC48;
    uint64_t v9 = *MEMORY[0x263F0ECA0];
    void v28[2] = v8;
    void v28[3] = v9;
    void v29[3] = &unk_270CFDC60;
    int v10 = [NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:4];
    double v11 = (IOSurface *)[v5 initWithProperties:v10];

    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v27, v11, 0);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v26, (IOSurface *)v2, 1);
    if (v4)
    {
      uint64_t v12 = 0;
      double v13 = (float *)v26[2];
      int v14 = (char *)v26[3];
      int v15 = (char *)v26[4];
      id v16 = (float *)v27[2];
      int v17 = (char *)v27[3];
      int v18 = (char *)v27[4];
      do
      {
        int v19 = v16;
        int v20 = v13;
        for (uint64_t i = v3; i; --i)
        {
          float v22 = (float)(*v20 + -0.2) / 0.4;
          if (v22 <= 1.0) {
            float v23 = (float)(*v20 + -0.2) / 0.4;
          }
          else {
            float v23 = 1.0;
          }
          if (v22 >= 0.0) {
            float v24 = v23;
          }
          else {
            float v24 = 0.0;
          }
          *int v19 = v24;
          int v20 = (float *)&v15[(void)v20];
          int v19 = (float *)&v18[(void)v19];
        }
        ++v12;
        double v13 = (float *)&v14[(void)v13];
        id v16 = (float *)&v17[(void)v16];
      }
      while (v12 != v4);
    }
    vg::IOSurfaceData::~IOSurfaceData(v26);
    vg::IOSurfaceData::~IOSurfaceData(v27);
  }
  else
  {
    double v11 = 0;
  }

  return v11;
}

void sub_260CE651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

void vg::hrtf::preprocessCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  context = (void *)MEMORY[0x261227DD0]();
  long long v64 = 0uLL;
  uint64_t v65 = 0;
  std::vector<vg::hrtf::ProcessedROIData>::reserve((uint64_t *)&v64, (a1[1] - *a1) >> 5);
  uint64_t v7 = *a1;
  uint64_t v47 = a1[1];
  if (*a1 == v47)
  {
LABEL_32:
    *(_OWORD *)a4 = v64;
    *(void *)(a4 + 16) = v65;
    uint64_t v65 = 0;
    long long v64 = 0uLL;
    *(unsigned char *)(a4 + 24) = 1;
  }
  else
  {
    v8.i64[0] = a3;
    v8.i64[1] = a2;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    float64x2_t v10 = vcvtq_f64_u64((uint64x2_t)vaddq_s64(v8, v9));
    float32x4_t v44 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v10);
    while (1)
    {
      uint64_t v63 = 0x400000003;
      unsigned int v11 = objc_msgSend(*(id *)(v7 + 8), "width", *(_OWORD *)&v44, context);
      *(void *)long long buf = __PAIR64__([*(id *)(v7 + 8) height], v11);
      *(double *)v12.i64 = vg::hrtf::makeBoxWithAspectRatio((float *)(v7 + 16), (uint32x2_t *)buf, &v63);
      float32x4_t v51 = v12;
      uint64_t v13 = [*(id *)v7 height];
      v14.i64[0] = [*(id *)v7 width];
      v14.i64[1] = v13;
      v15.i64[0] = -1;
      v15.i64[1] = -1;
      float64x2_t v16 = vcvtq_f64_s64(vaddq_s64(v14, v15));
      uint32x4_t v62 = vcvtq_u32_f32(vmulq_f32(v51, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v16)));
      createCropAndScaledSurface(*(void **)v7, (int8x16_t *)&v62, a2, a3);
      int v17 = (IOSurface *)objc_claimAutoreleasedReturnValue();
      if (!v17) {
        break;
      }
      int v18 = vg::shared::getPersonSegmentationMapFromVision(*(void **)v7, 0);
      int v19 = v18;
      if (!v18)
      {
        id v43 = __VGLogSharedInstance();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_260C8D000, v43, OS_LOG_TYPE_ERROR, " Failed to get person segmentation mask. ", buf, 2u);
        }

        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 24) = 0;

        goto LABEL_39;
      }
      createCropAndScaledSurface(v18, (int8x16_t *)&v62, a2, a3);
      int v20 = (IOSurface *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        createMaskedImageARGB32(v17, v20, 0.5, 255);
        uint64_t v48 = (IOSurface *)objc_claimAutoreleasedReturnValue();
        uint64_t v50 = create32BGRASurfaceFrom32ARGBSurface(v48);
        uint64_t v21 = [*(id *)(v7 + 8) height];
        v22.i64[0] = [*(id *)(v7 + 8) width];
        v22.i64[1] = v21;
        v23.i64[0] = -1;
        v23.i64[1] = -1;
        float64x2_t v24 = vcvtq_f64_s64(vaddq_s64(v22, v23));
        uint32x4_t v61 = vcvtq_u32_f32(vmulq_f32(v51, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24), v24)));
        uint64_t v25 = a2;
        uint64_t v26 = a2;
        uint64_t v27 = a3;
        createCropAndScaledSurface(*(void **)(v7 + 8), (int8x16_t *)&v61, v26, a3);
        int v28 = (vg::hrtf *)objc_claimAutoreleasedReturnValue();
        BOOL v30 = v28;
        if (v28)
        {
          vg::hrtf::createNormalizedDepth(v28, v29);
          unsigned int v31 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          int v32 = v31;
          if (v31)
          {
            int v33 = createMaskedImage1CF32(v31, v20, 0.5, 1.0);
            uint32x4_t v60 = vcvtq_u32_f32(vmulq_f32(v51, v44));
            uint64_t v52 = v33;
            uint64_t v46 = createFloat32SurfaceWithROI(v33, (int8x16_t *)&v60);
            if (v46)
            {
              uint64_t v35 = vg::hrtf::createNormalizedDepth(*(vg::hrtf **)(v7 + 8), v34);
              if (v35)
              {
                *(void *)long long buf = v50;
                id v54 = v52;
                id v55 = v46;
                id v56 = *(id *)v7;
                id v57 = v35;
                int8x16_t v58 = (int8x16_t)v62;
                int8x16_t v59 = (int8x16_t)v61;
                std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>((uint64_t *)&v64, (uint64_t)buf);

                int v36 = 0;
              }
              else
              {
                uint64_t v41 = __VGLogSharedInstance();
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_260C8D000, v41, OS_LOG_TYPE_ERROR, " Failed normalize depth image. ", buf, 2u);
                }

                *(unsigned char *)a4 = 0;
                *(unsigned char *)(a4 + 24) = 0;
                int v36 = 1;
              }
            }
            else
            {
              __int16 v40 = __VGLogSharedInstance();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_260C8D000, v40, OS_LOG_TYPE_ERROR, " Failed to crop and rescale global depth image. ", buf, 2u);
              }

              *(unsigned char *)a4 = 0;
              *(unsigned char *)(a4 + 24) = 0;
              int v36 = 1;
            }
          }
          else
          {
            uint64_t v39 = __VGLogSharedInstance();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_260C8D000, v39, OS_LOG_TYPE_ERROR, " Failed normalize depth image. ", buf, 2u);
            }

            *(unsigned char *)a4 = 0;
            *(unsigned char *)(a4 + 24) = 0;
            int v36 = 1;
          }
        }
        else
        {
          long long v38 = __VGLogSharedInstance();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_260C8D000, v38, OS_LOG_TYPE_ERROR, " Failed to crop and rescale local depth image. ", buf, 2u);
          }

          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 24) = 0;
          int v36 = 1;
        }

        a3 = v27;
        a2 = v25;
      }
      else
      {
        long long v37 = __VGLogSharedInstance();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_260C8D000, v37, OS_LOG_TYPE_ERROR, " Failed to crop and rescale mask. ", buf, 2u);
        }

        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 24) = 0;
        int v36 = 1;
      }

      if (v36) {
        goto LABEL_39;
      }
      v7 += 32;
      if (v7 == v47) {
        goto LABEL_32;
      }
    }
    uint64_t v42 = __VGLogSharedInstance();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v42, OS_LOG_TYPE_ERROR, " Failed to crop and rescale capture rgb image. ", buf, 2u);
    }

    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
  }
LABEL_39:
  *(void *)long long buf = &v64;
  std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_260CE6B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)(v21 - 128);
  std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 80 * v6;
    std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260CE6D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x333333333333333) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v12 = 0x333333333333333;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int64x2_t v15 = v13;
    float64x2_t v16 = &v13[80 * v9];
    int v18 = &v13[80 * v12];
    std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>((uint64_t)v16, a2);
    int v17 = v16 + 80;
    std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<vg::hrtf::ProcessedROIData,vg::hrtf::ProcessedROIData&,vg::hrtf::ProcessedROIData*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v8;
  return v8 - 80;
}

void sub_260CE6E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::hrtf::ProcessedROIData::~ProcessedROIData(id *this)
{
}

void vg::hrtf::preprocessFaceCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  unint64_t v57 = 0;
  std::vector<vg::hrtf::FrameROIData>::reserve(&v55, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5));
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*a1 != v9)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v50 = _Q0;
    do
    {
      unsigned int v15 = objc_msgSend(*(id *)v8, "width", *(_OWORD *)&v50);
      unsigned int v16 = [*(id *)v8 height];
      int v17 = *(_DWORD *)(v8 + 80);
      uint64_t v18 = *(void *)(v8 + 64);
      if (v17) {
        uint64_t v19 = *(float **)(v8 + 64);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (2 * v17);
      uint64_t v21 = (float *)(v18 + 4 * v20);
      int64x2_t v22 = v19 + 2;
      float v23 = *v19;
      if (v17 && v21 == v22)
      {
        v24.f32[0] = *v19;
      }
      else
      {
        uint64_t v25 = v19 + 4;
        v24.f32[0] = v23;
        do
        {
          uint64_t v26 = v25;
          if (*(v25 - 2) < v24.f32[0]) {
            v24.f32[0] = *(v25 - 2);
          }
          v25 += 2;
        }
        while (!v17 || v26 != v21);
        do
        {
          float v27 = *v22;
          v22 += 2;
          float v28 = v27;
          if (v23 < v27) {
            float v23 = v28;
          }
        }
        while (v22 != v21);
      }
      char v29 = (float *)(v18 + 4);
      uint64_t v30 = v18 + 4 + 4 * v20;
      unsigned int v31 = (float *)(v18 + 12);
      float v32 = *v29;
      if ((float *)v30 == v31)
      {
        float v33 = *v29;
      }
      else
      {
        char v34 = v29 + 4;
        float v33 = v32;
        do
        {
          uint64_t v35 = v34;
          if (*(v34 - 2) < v33) {
            float v33 = *(v34 - 2);
          }
          v34 += 2;
        }
        while (v35 != (float *)v30);
        do
        {
          float v36 = *v31;
          v31 += 2;
          float v37 = v36;
          if (v32 < v36) {
            float v32 = v37;
          }
        }
        while (v31 != (float *)v30);
      }
      v38.i64[0] = __PAIR64__(v16, v15);
      v24.f32[1] = v33;
      v24.i64[1] = __PAIR64__(LODWORD(v32), LODWORD(v23));
      int32x4_t v39 = vcvtq_s32_f32(v24);
      uint32x2_t v40 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v16, v15), (int32x2_t)-1);
      *(uint32x2_t *)v41.i8 = v40;
      v41.u64[1] = (unint64_t)v40;
      int32x4_t v42 = (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v39), (int8x16_t)vminq_s32(v41, v39));
      int32x4_t v43 = (int32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
      *(float32x2_t *)v43.i8 = vcvt_f32_s32(vsub_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v42.i8));
      int v44 = (int)vmuls_lane_f32(0.2, *(float32x2_t *)v43.i8, 1);
      *(int32x2_t *)v43.i8 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)v43.i8, (float32x2_t)0x3F19999A3ECCCCCDLL));
      v45.i64[0] = vsubq_s32(v42, v43).u64[0];
      v43.i64[1] = __PAIR64__(v44, v43.u32[0]);
      *(float32x2_t *)v46.f32 = vcvt_f32_u32(v40);
      v45.i64[1] = vaddq_s32(v42, v43).i64[1];
      v38.i64[1] = __PAIR64__(v16, v15);
      v46.i64[1] = v46.i64[0];
      float32x4_t v47 = vdivq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v45), (int8x16_t)vminq_s32(v38, v45))), v46);
      int8x16_t v51 = vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v47, v50), (int8x16_t)v50, (int8x16_t)v47), (int8x16_t)vcltzq_f32(v47));
      uint64_t v52 = (void **)*(id *)v8;
      id v53 = *(id *)(v8 + 8);
      int8x16_t v54 = v51;
      uint64_t v48 = (int8x16_t *)v56;
      if (v56 >= v57)
      {
        uint64_t i64 = std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(&v55, (uint64_t)&v52);
      }
      else
      {
        v48->i64[0] = (uint64_t)v52;
        v48->i64[1] = (uint64_t)v53;
        v48[1] = v54;
        uint64_t i64 = (uint64_t)v48[2].i64;
      }
      unint64_t v56 = i64;

      v8 += 96;
    }
    while (v8 != v9);
  }
  vg::hrtf::preprocessCaptureData(&v55, a2, a3, a4);
  uint64_t v52 = (void **)&v55;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&v52);
}

void sub_260CE714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a13 = (void **)&a18;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::FrameROIData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260CE7204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void vg::hrtf::preprocessEarCaptureData(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  unint64_t v54 = 0;
  std::vector<vg::hrtf::FrameROIData>::reserve(&v52, (a1[1] - *a1) >> 5);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  while (v10 != v11)
  {
    *(void *)int32x4_t v38 = *(id *)v10;
    int32x4_t v39 = (IOSurface *)*(id *)(v10 + 8);
    long long v40 = *(_OWORD *)(v10 + 16);
    unint64_t v12 = v53;
    if (v53 >= v54)
    {
      uint64_t v13 = std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(&v52, (uint64_t)v38);
    }
    else
    {
      *(void *)unint64_t v12 = *(id *)v38;
      *(void *)(v12 + 8) = v39;
      *(_OWORD *)(v12 + 16) = v40;
      uint64_t v13 = v12 + 32;
    }
    unint64_t v53 = v13;

    v10 += 32;
  }
  vg::hrtf::preprocessCaptureData(&v52, a2, a3, (uint64_t)&v49);
  if (v51)
  {
    if (a4)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>(&v46, v49, v50, 0xCCCCCCCCCCCCCCCDLL * ((v50 - v49) >> 4));
      uint64_t v29 = a5;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      std::vector<vg::hrtf::ProcessedROIData>::reserve((uint64_t *)&v44, (a1[1] - *a1) >> 5);
      uint64_t v14 = v46;
      uint64_t v30 = v47;
      if (v46 == v47)
      {
LABEL_27:
        *(_OWORD *)uint64_t v29 = v44;
        *(void *)(v29 + 16) = v45;
        uint64_t v45 = 0;
        long long v44 = 0uLL;
        *(unsigned char *)(v29 + 24) = 1;
      }
      else
      {
        while (1)
        {
          unsigned int v15 = (IOSurface *)*(id *)v14;
          *(void *)int32x4_t v38 = v15;
          unsigned int v16 = (IOSurface *)*(id *)(v14 + 8);
          int32x4_t v39 = v16;
          int v17 = (IOSurface *)*(id *)(v14 + 16);
          *(void *)&long long v40 = v17;
          id v18 = *(id *)(v14 + 24);
          *((void *)&v40 + 1) = v18;
          id v19 = *(id *)(v14 + 32);
          id v41 = v19;
          long long v20 = *(_OWORD *)(v14 + 64);
          long long v42 = *(_OWORD *)(v14 + 48);
          long long v43 = v20;
          uint64_t v21 = createHorizontallyReflectedSurface(v15);
          if (v21)
          {
            int64x2_t v22 = createHorizontallyReflectedSurface(v16);
            if (v22)
            {
              float v23 = createHorizontallyReflectedSurface(v17);
              if (v23)
              {
                *(void *)long long buf = v21;
                id v32 = v22;
                id v33 = v23;
                id v34 = v18;
                id v35 = v19;
                long long v36 = v42;
                long long v37 = v43;
                std::vector<vg::hrtf::ProcessedROIData>::emplace_back<vg::hrtf::ProcessedROIData&>((uint64_t *)&v44, (uint64_t)buf);

                int v24 = 0;
              }
              else
              {
                float v27 = __VGLogSharedInstance();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_260C8D000, v27, OS_LOG_TYPE_ERROR, " Failed to refect depth global surface. ", buf, 2u);
                }

                *(unsigned char *)uint64_t v29 = 0;
                *(unsigned char *)(v29 + 24) = 0;
                int v24 = 1;
              }
            }
            else
            {
              uint64_t v26 = __VGLogSharedInstance();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_260C8D000, v26, OS_LOG_TYPE_ERROR, " Failed to refect depth local surface. ", buf, 2u);
              }

              *(unsigned char *)uint64_t v29 = 0;
              *(unsigned char *)(v29 + 24) = 0;
              int v24 = 1;
            }
          }
          else
          {
            uint64_t v25 = __VGLogSharedInstance();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_ERROR, " Failed to refect color surface. ", buf, 2u);
            }

            *(unsigned char *)uint64_t v29 = 0;
            *(unsigned char *)(v29 + 24) = 0;
            int v24 = 1;
          }

          if (v24) {
            break;
          }
          v14 += 80;
          if (v14 == v30) {
            goto LABEL_27;
          }
        }
      }
      *(void *)int32x4_t v38 = &v44;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
      *(void *)int32x4_t v38 = &v46;
      std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
    }
    else
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      std::vector<vg::hrtf::ProcessedROIData>::__init_with_size[abi:ne180100]<vg::hrtf::ProcessedROIData*,vg::hrtf::ProcessedROIData*>((void *)a5, v49, v50, 0xCCCCCCCCCCCCCCCDLL * ((v50 - v49) >> 4));
      *(unsigned char *)(a5 + 24) = 1;
    }
  }
  else
  {
    float v28 = __VGLogSharedInstance();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int32x4_t v38 = 0;
      _os_log_impl(&dword_260C8D000, v28, OS_LOG_TYPE_ERROR, " Failed to preprocess capture data. ", v38, 2u);
    }

    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 24) = 0;
  }
  if (v51)
  {
    *(void *)int32x4_t v38 = &v49;
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  }
  *(void *)int32x4_t v38 = &v52;
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
}

void sub_260CE76C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  if (*(unsigned char *)(v23 - 120))
  {
    a23 = (void **)(v23 - 144);
    std::vector<vg::hrtf::ProcessedROIData>::__destroy_vector::operator()[abi:ne180100](&a23);
  }
  a23 = (void **)(v23 - 112);
  std::vector<vg::hrtf::EarFrameData>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t std::vector<vg::hrtf::ProcessedROIData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::ProcessedROIData>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>,std::reverse_iterator<vg::hrtf::ProcessedROIData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v9 = (_OWORD *)(a7 - 32);
    do
    {
      long long v10 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)a3 = 0uLL;
      *(v9 - 3) = v10;
      long long v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a3 + 16) = 0uLL;
      *(v9 - 2) = v11;
      uint64_t v12 = *(void *)(a3 + 32);
      *(void *)(a3 + 32) = 0;
      *((void *)v9 - 2) = v12;
      long long v13 = *(_OWORD *)(a3 + 64);
      *uint64_t v9 = *(_OWORD *)(a3 + 48);
      v9[1] = v13;
      v9 -= 5;
      v7 -= 80;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<vg::hrtf::ProcessedROIData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<vg::hrtf::ProcessedROIData,0>((void **)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>,std::reverse_iterator<vg::hrtf::FrameROIData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  unsigned char v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 32) = v8;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 16);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::FrameROIData>,std::reverse_iterator<vg::hrtf::FrameROIData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<vg::hrtf::EarFrameData>,std::reverse_iterator<vg::hrtf::EarFrameData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::vector<vg::hrtf::FrameROIData>::__emplace_back_slow_path<vg::hrtf::FrameROIData&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vg::hrtf::EarFrameData>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unsigned char v14[3] = &v10[32 * v9];
  *(void *)long long v11 = *(id *)a2;
  *((void *)v11 + 1) = *(id *)(a2 + 8);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  v14[2] = v11 + 32;
  std::vector<vg::hrtf::FrameROIData>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_260CE7AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<vg::hrtf::EarFrameData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_260CE7BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::hrtf::writeHRTFModelDebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  v46[1] = *MEMORY[0x263EF8340];
  if (*((char *)a5 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v10 = (size_t)a5[1];
  }
  long long v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 36);
  if (v44 < 0) {
    long long v11 = (void **)__p[0];
  }
  if (v10)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v12 = a5;
    }
    else {
      uint64_t v12 = *a5;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/hrtf_model_debug_data_left_ear.json");
  long long v13 = vg::hrtf::detail::createEarDebugData(a3, a2);
  id v42 = 0;
  long long v14 = [MEMORY[0x263F08900] dataWithJSONObject:v13 options:1 error:&v42];
  id v15 = v42;
  if (v15)
  {
    unsigned int v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, " Failed to write left ear debug data. ", buf, 2u);
    }
  }
  else
  {
    if (v44 >= 0) {
      int v17 = __p;
    }
    else {
      int v17 = (void **)__p[0];
    }
    unsigned int v16 = [NSString stringWithUTF8String:v17];
    [v14 writeToFile:v16 atomically:1];
  }

  if (*((char *)a5 + 23) >= 0) {
    size_t v18 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v18 = (size_t)a5[1];
  }
  id v19 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v18 + 37);
  if (v41 < 0) {
    id v19 = *(uint8_t **)buf;
  }
  if (v18)
  {
    if (*((char *)a5 + 23) >= 0) {
      long long v20 = a5;
    }
    else {
      long long v20 = *a5;
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)&v19[v18], "/hrtf_model_debug_data_right_ear.json");
  uint64_t v21 = vg::hrtf::detail::createEarDebugData(a4, a2 + 24);
  id v39 = v15;
  int64x2_t v22 = [MEMORY[0x263F08900] dataWithJSONObject:v21 options:1 error:&v39];
  id v23 = v39;

  if (v23)
  {
    int v24 = __VGLogSharedInstance();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v37 = 0;
      _os_log_impl(&dword_260C8D000, v24, OS_LOG_TYPE_ERROR, " Failed to write right ear debug data. ", v37, 2u);
    }
  }
  else
  {
    if (v41 >= 0) {
      uint64_t v25 = buf;
    }
    else {
      uint64_t v25 = *(uint8_t **)buf;
    }
    int v24 = [NSString stringWithUTF8String:v25];
    [v22 writeToFile:v24 atomically:1];
  }

  uint64_t v45 = @"face_encodings";
  uint64_t v26 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a1);
  v46[0] = v26;
  float v27 = [NSDictionary dictionaryWithObjects:v46 forKeys:&v45 count:1];

  if (*((char *)a5 + 23) >= 0) {
    size_t v28 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v28 = (size_t)a5[1];
  }
  uint64_t v29 = v37;
  std::string::basic_string[abi:ne180100]((uint64_t)v37, v28 + 42);
  if (v38 < 0) {
    uint64_t v29 = *(uint8_t **)v37;
  }
  if (v28)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v30 = a5;
    }
    else {
      uint64_t v30 = *a5;
    }
    memmove(v29, v30, v28);
  }
  strcpy((char *)&v29[v28], "/hrtf_model_debug_data_face_encodings.json");
  id v36 = v23;
  unsigned int v31 = [MEMORY[0x263F08900] dataWithJSONObject:v27 options:1 error:&v36];
  id v32 = v36;

  if (v32)
  {
    id v33 = __VGLogSharedInstance();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v35 = 0;
      _os_log_impl(&dword_260C8D000, v33, OS_LOG_TYPE_ERROR, " Failed to write encoding debug data. ", v35, 2u);
    }
  }
  else
  {
    if (v38 >= 0) {
      id v34 = v37;
    }
    else {
      id v34 = *(uint8_t **)v37;
    }
    id v33 = [NSString stringWithUTF8String:v34];
    [v31 writeToFile:v33 atomically:1];
  }

  if (v38 < 0) {
    operator delete(*(void **)v37);
  }

  if (v41 < 0) {
    operator delete(*(void **)buf);
  }

  if (v44 < 0) {
    operator delete(__p[0]);
  }
}

void sub_260CE809C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  if (a23 < 0) {
    operator delete(a18);
  }

  if (a30 < 0) {
    operator delete(a25);
  }

  _Unwind_Resume(a1);
}

id vg::hrtf::detail::createEarDebugData(uint64_t a1, uint64_t a2)
{
  v44[7] = *MEMORY[0x263EF8340];
  v43[0] = @"ear_encodings";
  uint64_t v4 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a1);
  v44[0] = v4;
  v43[1] = @"hrtf_coefficients";
  unint64_t v5 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a1 + 24);
  v44[1] = v5;
  v43[2] = @"dtf_coefficients";
  uint64_t v6 = (void *)MEMORY[0x263EFF8C0];
  uint64_t v7 = (*(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 68));
  size_t v8 = (4 * v7 + 31) & 0x7FFFFFFE0;
  v40[1] = (void *)(v8 >> 2);
  v38[0] = 0;
  malloc_type_posix_memalign(v38, 0x20uLL, v8, 0x49090899uLL);
  unint64_t v9 = v38[0];
  v40[0] = v38[0];
  int v41 = v7;
  int v10 = *(_DWORD *)(a1 + 64);
  if (v10)
  {
    int v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 68);
    uint64_t v14 = *(void *)(a1 + 48);
    do
    {
      unsigned int v15 = v12;
      int v16 = v11;
      uint64_t v17 = v13;
      if (v13)
      {
        do
        {
          v9[v16++] = *(_DWORD *)(v14 + 4 * v15);
          v15 += v10;
          --v17;
        }
        while (v17);
      }
      ++v12;
      v11 += v13;
    }
    while (v12 != v10);
  }
  size_t v18 = objc_msgSend(v6, "vg_arrayWithNumbersFromVectorf:", v40);
  void v44[2] = v18;
  v43[3] = @"bias_dtf_coefficients";
  id v19 = (void *)MEMORY[0x263EFF8C0];
  uint64_t v20 = (*(_DWORD *)(a1 + 88) * *(_DWORD *)(a1 + 92));
  size_t v21 = (4 * v20 + 31) & 0x7FFFFFFE0;
  v38[1] = (void *)(v21 >> 2);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v21, 0x49090899uLL);
  int64x2_t v22 = memptr;
  v38[0] = memptr;
  int v39 = v20;
  int v23 = *(_DWORD *)(a1 + 88);
  if (v23)
  {
    int v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = *(unsigned int *)(a1 + 92);
    uint64_t v27 = *(void *)(a1 + 72);
    do
    {
      unsigned int v28 = v25;
      int v29 = v24;
      uint64_t v30 = v26;
      if (v26)
      {
        do
        {
          v22[v29++] = *(_DWORD *)(v27 + 4 * v28);
          v28 += v23;
          --v30;
        }
        while (v30);
      }
      ++v25;
      v24 += v26;
    }
    while (v25 != v23);
  }
  unsigned int v31 = objc_msgSend(v19, "vg_arrayWithNumbersFromVectorf:", v38);
  void v44[3] = v31;
  v43[4] = @"ctf_coefficients";
  id v32 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a1 + 96);
  v44[4] = v32;
  v43[5] = @"delay_coefficients";
  id v33 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a2);
  v44[5] = v33;
  v43[6] = @"eq_coefficients";
  int v34 = *(unsigned __int8 *)(a1 + 144);
  if (*(unsigned char *)(a1 + 144))
  {
    id v35 = objc_msgSend(MEMORY[0x263EFF8C0], "vg_arrayWithNumbersFromVectorf:", a1 + 120, v38[0]);
  }
  else
  {
    id v35 = (void *)MEMORY[0x263EFFA68];
  }
  v44[6] = v35;
  id v36 = objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, v43, 7, v38[0]);
  if (v34) {

  }
  free(v38[0]);
  free(v40[0]);

  return v36;
}

void sub_260CE84C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a9);
  free(a12);

  _Unwind_Resume(a1);
}

void vg::hrtf::writeDebugPreprocessedData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v5 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "face");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "left_ear");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1 + 3, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "right_ear");
  vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(&v5, a1 + 6, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_260CE860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vg::hrtf::writeDebugPreprocessedData(vg::hrtf::HRTFPrepData const&,std::string const&)::$_0::operator()(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  v197[20] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v142 = a2[1];
  if (*a2 != v142)
  {
    uint64_t v150 = 0;
    unint64_t v5 = v186;
    long long v140 = *(void **)(MEMORY[0x263F8C2B0] + 24);
    long long v141 = (void *)*MEMORY[0x263F8C2B0];
    std::string::size_type v139 = *MEMORY[0x263F8C2B8];
    std::string::size_type v137 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    std::string::size_type v138 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    long long v136 = v186;
    do
    {
      int v148 = (IOSurface *)*(id *)v3;
      v188[19] = v148;
      uint64_t v147 = (IOSurface *)*(id *)(v3 + 8);
      v188[20] = v147;
      long long v146 = (IOSurface *)*(id *)(v3 + 16);
      v188[21] = v146;
      uint64_t v145 = (IOSurface *)*(id *)(v3 + 24);
      v188[22] = v145;
      v144 = (IOSurface *)*(id *)(v3 + 32);
      v188[23] = v144;
      long long v6 = *(_OWORD *)(v3 + 64);
      long long __val = *(_OWORD *)(v3 + 48);
      long long v190 = v6;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v184);
      int v7 = *((char *)*a1 + 23);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t)*a1;
      }
      else {
        uint64_t v8 = **a1;
      }
      if (v7 >= 0) {
        uint64_t v9 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v9 = (*a1)[1];
      }
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v185, v8, v9);
      int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/", 1);
      int v12 = *(char *)(a3 + 23);
      if (v12 >= 0) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = *(void *)a3;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v14 = *(void *)(a3 + 8);
      }
      unsigned int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"_RGB_", 5);
      int v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".png", 4);
      uint64_t v17 = NSString;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, &__p);
      if (v195 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      objc_msgSend(v17, "stringWithUTF8String:", p_p, v136);
      id v19 = (NSString *)objc_claimAutoreleasedReturnValue();
      char v20 = VGDumpIOSurface(v148, v19, 1.0);

      if (v195 < 0)
      {
        operator delete(__p);
        if (v20) {
          goto LABEL_25;
        }
      }
      else if (v20)
      {
        goto LABEL_25;
      }
      size_t v21 = __VGLogSharedInstance();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_260C8D000, v21, OS_LOG_TYPE_ERROR, " Unable to write image. ", (uint8_t *)&__p, 2u);
      }

LABEL_25:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v179);
      int v22 = *((char *)*a1 + 23);
      if (v22 >= 0) {
        int v23 = *a1;
      }
      else {
        int v23 = (void *)**a1;
      }
      if (v22 >= 0) {
        uint64_t v24 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v24 = (*a1)[1];
      }
      unsigned int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)v23, v24);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/", 1);
      int v27 = *(char *)(a3 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a3;
      }
      else {
        uint64_t v28 = *(void *)a3;
      }
      if (v27 >= 0) {
        uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v29 = *(void *)(a3 + 8);
      }
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"_local_depth_", 13);
      unsigned int v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".tiff", 5);
      id v32 = NSString;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v181, &__p);
      if (v195 >= 0) {
        id v33 = &__p;
      }
      else {
        id v33 = __p;
      }
      int v34 = [v32 stringWithUTF8String:v33];
      char v35 = VGDumpIOSurface(v147, v34, 1.0);

      if (v195 < 0)
      {
        operator delete(__p);
        if (v35) {
          goto LABEL_47;
        }
      }
      else if (v35)
      {
        goto LABEL_47;
      }
      id v36 = __VGLogSharedInstance();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_260C8D000, v36, OS_LOG_TYPE_ERROR, " Unable to write local depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_47:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v174);
      int v37 = *((char *)*a1 + 23);
      if (v37 >= 0) {
        char v38 = *a1;
      }
      else {
        char v38 = (void *)**a1;
      }
      if (v37 >= 0) {
        uint64_t v39 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v39 = (*a1)[1];
      }
      long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v175, (uint64_t)v38, v39);
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/", 1);
      int v42 = *(char *)(a3 + 23);
      if (v42 >= 0) {
        uint64_t v43 = a3;
      }
      else {
        uint64_t v43 = *(void *)a3;
      }
      if (v42 >= 0) {
        uint64_t v44 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v44 = *(void *)(a3 + 8);
      }
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"_global_depth_", 14);
      uint64_t v46 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)".tiff", 5);
      uint64_t v47 = NSString;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v176, &__p);
      if (v195 >= 0) {
        uint64_t v48 = &__p;
      }
      else {
        uint64_t v48 = __p;
      }
      uint64_t v49 = [v47 stringWithUTF8String:v48];
      char v50 = VGDumpIOSurface(v146, v49, 1.0);

      if (v195 < 0)
      {
        operator delete(__p);
        if (v50) {
          goto LABEL_69;
        }
      }
      else if (v50)
      {
        goto LABEL_69;
      }
      char v51 = __VGLogSharedInstance();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_260C8D000, v51, OS_LOG_TYPE_ERROR, " Unable to write global depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_69:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v169);
      int v52 = *((char *)*a1 + 23);
      if (v52 >= 0) {
        unint64_t v53 = *a1;
      }
      else {
        unint64_t v53 = (void *)**a1;
      }
      if (v52 >= 0) {
        uint64_t v54 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v54 = (*a1)[1];
      }
      uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)v53, v54);
      unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"/", 1);
      int v57 = *(char *)(a3 + 23);
      if (v57 >= 0) {
        uint64_t v58 = a3;
      }
      else {
        uint64_t v58 = *(void *)a3;
      }
      if (v57 >= 0) {
        uint64_t v59 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v59 = *(void *)(a3 + 8);
      }
      uint32x4_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"_base_RGB_", 10);
      uint32x4_t v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)".png", 4);
      uint32x4_t v62 = NSString;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v171, &__p);
      if (v195 >= 0) {
        uint64_t v63 = &__p;
      }
      else {
        uint64_t v63 = __p;
      }
      long long v64 = [v62 stringWithUTF8String:v63];
      char v65 = VGDumpIOSurface(v145, v64, 1.0);

      if (v195 < 0)
      {
        operator delete(__p);
        if (v65) {
          goto LABEL_91;
        }
      }
      else if (v65)
      {
        goto LABEL_91;
      }
      int v66 = __VGLogSharedInstance();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_260C8D000, v66, OS_LOG_TYPE_ERROR, " Unable to write base color depth. ", (uint8_t *)&__p, 2u);
      }

LABEL_91:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v164);
      int v67 = *((char *)*a1 + 23);
      if (v67 >= 0) {
        uint64_t v68 = *a1;
      }
      else {
        uint64_t v68 = (void *)**a1;
      }
      if (v67 >= 0) {
        uint64_t v69 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v69 = (*a1)[1];
      }
      float v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)v68, v69);
      float v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"/", 1);
      int v72 = *(char *)(a3 + 23);
      if (v72 >= 0) {
        uint64_t v73 = a3;
      }
      else {
        uint64_t v73 = *(void *)a3;
      }
      if (v72 >= 0) {
        uint64_t v74 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v74 = *(void *)(a3 + 8);
      }
      uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"_normalized_depth_", 18);
      float32x2_t v76 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)".tiff", 5);
      float32x2_t v77 = NSString;
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v166, &__p);
      if (v195 >= 0) {
        uint64_t v78 = &__p;
      }
      else {
        uint64_t v78 = __p;
      }
      unint64_t v79 = [v77 stringWithUTF8String:v78];
      char v80 = VGDumpIOSurface(v144, v79, 1.0);

      if (v195 < 0)
      {
        operator delete(__p);
        if ((v80 & 1) == 0)
        {
LABEL_110:
          long long v81 = __VGLogSharedInstance();
          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_260C8D000, v81, OS_LOG_TYPE_ERROR, " Unable to write normalized depth. ", (uint8_t *)&__p, 2u);
          }
        }
      }
      else if ((v80 & 1) == 0)
      {
        goto LABEL_110;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v159);
      int v82 = *((char *)*a1 + 23);
      if (v82 >= 0) {
        uint64_t v83 = *a1;
      }
      else {
        uint64_t v83 = (void *)**a1;
      }
      if (v82 >= 0) {
        uint64_t v84 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v84 = (*a1)[1];
      }
      uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v160, (uint64_t)v83, v84);
      char v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"/", 1);
      int v87 = *(char *)(a3 + 23);
      if (v87 >= 0) {
        uint64_t v88 = a3;
      }
      else {
        uint64_t v88 = *(void *)a3;
      }
      if (v87 >= 0) {
        uint64_t v89 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v89 = *(void *)(a3 + 8);
      }
      uint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v88, v89);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"_RGB_bbox_", 10);
      v91 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)".json", 5);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v161, &v191);
      std::ofstream::basic_ofstream((uint64_t *)&__p);
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      unsigned int v92 = DWORD1(__val);
      unsigned int v93 = DWORD2(__val);
      unsigned int v94 = HIDWORD(__val);
      std::to_string(&v191, __val);
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float32x4_t v95 = &v191;
      }
      else {
        float32x4_t v95 = (std::string *)v191.__r_.__value_.__r.__words[0];
      }
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v191.__r_.__value_.__l.__size_;
      }
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v95, size);
      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)",", 1);
      std::to_string(&v153, v92);
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v99 = &v153;
      }
      else {
        uint64_t v99 = (std::string *)v153.__r_.__value_.__r.__words[0];
      }
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v100 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v100 = v153.__r_.__value_.__l.__size_;
      }
      char v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
      uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)",", 1);
      std::to_string(&v158, v93);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v103 = &v158;
      }
      else {
        long long v103 = (std::string *)v158.__r_.__value_.__r.__words[0];
      }
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v104 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v104 = v158.__r_.__value_.__l.__size_;
      }
      uint64_t v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
      unint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)",", 1);
      std::to_string(&v157, v94);
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v107 = &v157;
      }
      else {
        v107 = (std::string *)v157.__r_.__value_.__r.__words[0];
      }
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v108 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v108 = v157.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v191.__r_.__value_.__l.__data_);
      }
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p - 3)), *(_DWORD *)&v196[*((void *)__p - 3)] | 4);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v153);
      int v109 = *((char *)*a1 + 23);
      if (v109 >= 0) {
        long long v110 = *a1;
      }
      else {
        long long v110 = (void *)**a1;
      }
      if (v109 >= 0) {
        uint64_t v111 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v111 = (*a1)[1];
      }
      unint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v153.__r_.__value_.__r.__words[2], (uint64_t)v110, v111);
      long long v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"/", 1);
      int v114 = *(char *)(a3 + 23);
      if (v114 >= 0) {
        uint64_t v115 = a3;
      }
      else {
        uint64_t v115 = *(void *)a3;
      }
      if (v114 >= 0) {
        uint64_t v116 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v116 = *(void *)(a3 + 8);
      }
      uint64_t v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, v115, v116);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"_depth_bbox_", 12);
      unint64_t v118 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)".json", 5);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v154, &v158);
      std::ofstream::basic_ofstream((uint64_t *)&v191);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      unsigned int v119 = DWORD1(v190);
      unsigned int v120 = DWORD2(v190);
      unsigned int v121 = HIDWORD(v190);
      std::to_string(&v158, v190);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v122 = &v158;
      }
      else {
        long long v122 = (std::string *)v158.__r_.__value_.__r.__words[0];
      }
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v123 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v123 = v158.__r_.__value_.__l.__size_;
      }
      long long v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v191, (uint64_t)v122, v123);
      long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)",", 1);
      std::to_string(&v157, v119);
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v126 = &v157;
      }
      else {
        long long v126 = (std::string *)v157.__r_.__value_.__r.__words[0];
      }
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v127 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v127 = v157.__r_.__value_.__l.__size_;
      }
      long long v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)v126, v127);
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)",", 1);
      std::to_string(&v152, v120);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v130 = &v152;
      }
      else {
        uint64_t v130 = (std::string *)v152.__r_.__value_.__r.__words[0];
      }
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v131 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v131 = v152.__r_.__value_.__l.__size_;
      }
      uint64_t v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
      char v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)",", 1);
      std::to_string(&v151, v121);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v134 = &v151;
      }
      else {
        int v134 = (std::string *)v151.__r_.__value_.__r.__words[0];
      }
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v135 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v135 = v151.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v134, v135);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)&v191 + *(void *)(v191.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v191 + *(void *)(v191.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
      }
      uint64_t v143 = v3;
      v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
      *(std::string::size_type *)((char *)v191.__r_.__value_.__r.__words + *(v141 - 3)) = (std::string::size_type)v140;
      MEMORY[0x261227660](&v191.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x261227850](&v192);
      v153.__r_.__value_.__r.__words[0] = v139;
      *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + *(void *)(v139 - 24)) = v138;
      v153.__r_.__value_.__r.__words[2] = v137;
      v154[0] = MEMORY[0x263F8C318] + 16;
      if (v155 < 0) {
        operator delete((void *)v154[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v156);
      std::string __p = v141;
      *(void **)((char *)&__p + *(v141 - 3)) = v140;
      MEMORY[0x261227660](&v194);
      std::ostream::~ostream();
      MEMORY[0x261227850](v197);
      v159[0] = v139;
      *(void *)((char *)v159 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v160 = v137;
      v161[0] = MEMORY[0x263F8C318] + 16;
      if (v162 < 0) {
        operator delete((void *)v161[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v163);
      v164[0] = v139;
      *(void *)((char *)v164 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v165 = v137;
      v166[0] = MEMORY[0x263F8C318] + 16;
      if (v167 < 0) {
        operator delete((void *)v166[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v168);
      v169[0] = v139;
      *(void *)((char *)v169 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v170 = v137;
      v171[0] = MEMORY[0x263F8C318] + 16;
      if (v172 < 0) {
        operator delete((void *)v171[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v173);
      v174[0] = v139;
      *(void *)((char *)v174 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v175 = v137;
      v176[0] = MEMORY[0x263F8C318] + 16;
      if (v177 < 0) {
        operator delete((void *)v176[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v178);
      v179[0] = v139;
      *(void *)((char *)v179 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v180 = v137;
      v181[0] = MEMORY[0x263F8C318] + 16;
      if (v182 < 0) {
        operator delete((void *)v181[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](&v183);
      v184[0] = v139;
      *(void *)((char *)v184 + *(void *)(v139 - 24)) = v138;
      std::string::size_type v185 = v137;
      unint64_t v5 = v136;
      v186[0] = MEMORY[0x263F8C318] + 16;
      if (v187 < 0) {
        operator delete((void *)v186[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x261227850](v188);

      v3 += 80;
      ++v150;
    }
    while (v143 + 80 != v142);
  }
}

void sub_260CE9934(_Unwind_Exception *a1)
{
}

void sub_260CE9BE4()
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  unint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 24;
  return a1;
}

void sub_260CE9E9C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x261227850](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x261227850](a1 + 128);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2612276A0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x2612276B0](v13);
  return a1;
}

void sub_260CEA138(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x2612276B0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x260CEA118);
}

void sub_260CEA18C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_260CEA30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_260CEA5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CEA900(_Unwind_Exception *a1)
{
  size_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_260CEAA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEAAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CEAB70(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_260CEAC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEAC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEAD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEAF90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEB9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  v23[2](v23);

  v22[2](v22);
  _Unwind_Resume(a1);
}

void sub_260CEBC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEBE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEC238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_260CEC68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_260CEC8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CECBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  v29[2](v29);

  v28[2](v28);
  _Unwind_Resume(a1);
}

void sub_260CECFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  v29[2](v29);

  v28[2](v28);
  _Unwind_Resume(a1);
}

void sub_260CED448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_260CED6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  id v10 = va_arg(va1, id);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void sub_260CED884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  id v10 = va_arg(va1, id);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

void sub_260CEDCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  v32[2](v32);

  v30[2](v30);
  _Unwind_Resume(a1);
}

void sub_260CEE04C(_Unwind_Exception *a1)
{
  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_260CEE4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  v34[2](v34);

  v32[2](v32);
  _Unwind_Resume(a1);
}

void sub_260CEE868(_Unwind_Exception *a1)
{
  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

void sub_260CEEA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEF120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_260CEF47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)(v10 - 72));

  _Unwind_Resume(a1);
}

uint64_t vg::shared::metrics::isSupported(vg::shared::metrics *this)
{
  return 1;
}

id vg::shared::metrics::createDictionary(vg::shared::metrics *this)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x263F086E0], "vg_bundle");
  uint64_t v2 = [v1 infoDictionary];
  uint64_t v3 = [v2 valueForKey:@"CFBundleVersion"];

  uint64_t v4 = objc_opt_new();
  unint64_t v5 = objc_msgSend(MEMORY[0x263F086E0], "vg_bundle");
  uint64_t v6 = [v5 bundleIdentifier];
  size_t v7 = [NSString stringWithUTF8String:"bundleIdentifier"];
  [v4 setObject:v6 forKeyedSubscript:v7];

  size_t v8 = [NSString stringWithUTF8String:"bundleVersion"];
  if (v3) {
    int v9 = v3;
  }
  else {
    int v9 = &unk_270CFDD08;
  }
  [v4 setObject:v9 forKeyedSubscript:v8];

  return v4;
}

void sub_260CEF5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::shared::metrics::sendEvent(vg::shared::metrics *this, char *a2, NSDictionary *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  unint64_t v5 = [NSString stringWithUTF8String:this];
  AnalyticsSendEvent();

  uint64_t v6 = __VGLogSharedInstance();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    int v9 = this;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, " Sent analytics event:%s dictionary:%@ ", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

void sub_260CEF72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEF7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEF84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEF928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEF9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEFA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  __int16 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VGMLImageIOData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CEFB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CEFBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t vg::shared::computeMedian<unsigned long>(uint64_t a1)
{
  std::string __p = 0;
  size_t v7 = 0;
  uint64_t v8 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  uint64_t v1 = (unint64_t *)__p;
  unint64_t v2 = (unint64_t)((v7 - (unsigned char *)__p) >> 3) >> 1;
  uint64_t v3 = (unint64_t *)((char *)__p + 8 * v2);
  if (v3 != (unint64_t *)v7)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, v3, (unint64_t *)v7);
    uint64_t v1 = (unint64_t *)__p;
  }
  unint64_t v4 = v1[v2];
  size_t v7 = (char *)v1;
  operator delete(v1);
  return v4;
}

void sub_260CEFCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float vg::shared::computeMedian<float>(uint64_t a1)
{
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  unint64_t v2 = (float *)__p;
  unint64_t v3 = (unint64_t)(((char *)v8 - (unsigned char *)__p) >> 2) >> 1;
  unint64_t v4 = (float *)((char *)__p + 4 * v3);
  if (v4 != v8)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p, v4, v8, v1);
    unint64_t v2 = (float *)__p;
  }
  float v5 = v2[v3];
  uint64_t v8 = v2;
  operator delete(v2);
  return v5;
}

void sub_260CEFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL vg::shared::isPointInTriangle(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  LODWORD(v4) = HIDWORD(*(unint64_t *)a2);
  LODWORD(v5) = HIDWORD(*(unint64_t *)a3);
  LODWORD(v6) = HIDWORD(*(unint64_t *)a1);
  float v7 = vmlas_n_f32(-(float)(vsub_f32(*a2, *a3).f32[0] * (float)(v6 - v5)), v4 - v5, vsub_f32(*a1, *a3).f32[0]);
  LODWORD(v8) = HIDWORD(*(unint64_t *)a4);
  float v9 = vmlas_n_f32(-(float)(vsub_f32(*a3, *a4).f32[0] * (float)(v6 - v8)), v5 - v8, vsub_f32(*a1, *a4).f32[0]);
  float v10 = vmlas_n_f32(-(float)(vsub_f32(*a4, *a2).f32[0] * (float)(v6 - v4)), v8 - v4, vsub_f32(*a1, *a2).f32[0]);
  BOOL v11 = v7 < 0.0;
  BOOL v12 = v7 > 0.0;
  if (v9 < 0.0) {
    BOOL v11 = 1;
  }
  if (v9 > 0.0) {
    BOOL v12 = 1;
  }
  if (v10 < 0.0) {
    BOOL v11 = 1;
  }
  if (v10 > 0.0) {
    BOOL v12 = 1;
  }
  return !v11 || !v12;
}

BOOL vg::shared::arePointsCollinear(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4 = vsubq_f32(*a2, *a1);
  int32x4_t v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  float32x2_t v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v5.i32[0] = vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).u32[0];
  float32x4_t v8 = vsubq_f32(*a3, *a1);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
  float32x4_t v10 = vmulq_n_f32(v4, *(float *)v5.i32);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v9.i8 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)));
  float32x4_t v11 = vmulq_f32(v10, vmulq_n_f32(v8, vmul_f32(*(float32x2_t *)v9.i8, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8))).f32[0]));
  return fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) > a4;
}

BOOL vg::shared::intersectPlane(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, _DWORD *a5)
{
  float32x4_t v5 = vmulq_f32(*a1, *a4);
  float32x4_t v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)));
  if (v6.f32[0] <= 0.000001) {
    return 0;
  }
  float32x4_t v7 = vmulq_f32(*a1, vsubq_f32(*a2, *a3));
  v7.f32[0] = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))), v6).f32[0];
  *a5 = v7.i32[0];
  return v7.f32[0] >= 0.0;
}

double vg::shared::eulerRotationFromTheta(float *a1)
{
  float v1 = *a1;
  float v2 = a1[2];
  __float2 v3 = __sincosf_stret(a1[1]);
  __float2 v4 = __sincosf_stret(v2);
  __float2 v5 = __sincosf_stret(v1);
  *(float *)&unint64_t v6 = v3.__cosval * v4.__cosval;
  *((float *)&v6 + 1) = (float)((float)(v4.__cosval * v5.__sinval) * v3.__sinval) - (float)(v5.__cosval * v4.__sinval);
  *(float *)&unint64_t v7 = v3.__cosval * v4.__sinval;
  *((float *)&v7 + 1) = (float)(v4.__sinval * (float)(v5.__sinval * v3.__sinval)) + (float)(v5.__cosval * v4.__cosval);
  *(float *)&unint64_t v8 = -v3.__sinval;
  *((float *)&v8 + 1) = v5.__sinval * v3.__cosval;
  *(void *)&double result = vzip1q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)v8), vzip1q_s32((int32x4_t)v7, (int32x4_t)0)).u64[0];
  return result;
}

void vg::shared::generateGaussianKernel(vg::shared *this@<X0>, double a2@<D0>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::vector<double>>::reserve(a3, (unint64_t)this);
  if (this)
  {
    unint64_t v6 = 0;
    double v7 = a2 + a2;
    double v8 = 1.0 / ((a2 + a2) * 3.14159265);
    double v9 = 0.0;
    do
    {
      std::string __p = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<double>::reserve(&__p, (unint64_t)this);
      float32x4_t v10 = 0;
      float32x4_t v11 = v29;
      do
      {
        double v12 = v8
            * exp(-(((double)(unint64_t)v10 - (float)((float)((unint64_t)this - 1) * 0.5))* ((double)(unint64_t)v10 - (float)((float)((unint64_t)this - 1) * 0.5))+ ((double)(unint64_t)v6 - (float)((float)((unint64_t)this - 1) * 0.5))* ((double)(unint64_t)v6 - (float)((float)((unint64_t)this - 1) * 0.5)))/ v7);
        if (v11 >= v30)
        {
          uint64_t v14 = (double *)__p;
          uint64_t v15 = ((char *)v11 - (unsigned char *)__p) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = (char *)v30 - (unsigned char *)__p;
          if (((char *)v30 - (unsigned char *)__p) >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            id v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v30, v18);
            uint64_t v14 = (double *)__p;
            float32x4_t v11 = v29;
          }
          else
          {
            id v19 = 0;
          }
          char v20 = (double *)&v19[8 * v15];
          *char v20 = v12;
          uint64_t v13 = v20 + 1;
          while (v11 != v14)
          {
            uint64_t v21 = *((void *)v11-- - 1);
            *((void *)v20-- - 1) = v21;
          }
          std::string __p = v20;
          uint64_t v29 = v13;
          uint64_t v30 = (double *)&v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          double *v11 = v12;
          uint64_t v13 = v11 + 1;
        }
        uint64_t v29 = v13;
        double v9 = v9 + *(v13 - 1);
        float32x4_t v10 = (vg::shared *)((char *)v10 + 1);
        float32x4_t v11 = v13;
      }
      while (v10 != this);
      unint64_t v22 = a3[1];
      if (v22 >= a3[2])
      {
        uint64_t v23 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>((uint64_t)a3, (uint64_t)&__p);
        uint64_t v23 = v22 + 24;
      }
      a3[1] = v23;
      if (__p)
      {
        uint64_t v29 = (double *)__p;
        operator delete(__p);
      }
      unint64_t v6 = (vg::shared *)((char *)v6 + 1);
    }
    while (v6 != this);
    uint64_t v24 = 0;
    uint64_t v25 = *a3;
    do
    {
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(v25 + 24 * (void)v24);
      do
      {
        *(double *)(v27 + 8 * (void)v26) = *(double *)(v27 + 8 * (void)v26) / v9;
        uint64_t v26 = (vg::shared *)((char *)v26 + 1);
      }
      while (this != v26);
      uint64_t v24 = (vg::shared *)((char *)v24 + 1);
    }
    while (v24 != this);
  }
}

void sub_260CF02A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t std::vector<std::vector<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260CF0378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    double v9 = &v6[8 * v8];
    float32x4_t v10 = (char *)*a1;
    float32x4_t v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void vg::shared::generateBoxKernel(vg::shared *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<double>>::reserve(a2, (unint64_t)this);
  if (this)
  {
    uint64_t v4 = 0;
    double v5 = 1.0 / (double)(unint64_t)((void)this * (void)this);
    do
    {
      std::string __p = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      std::vector<double>::reserve(&__p, (unint64_t)this);
      uint64_t v6 = 0;
      double v7 = v20;
      do
      {
        if (v7 >= v21)
        {
          double v9 = (double *)__p;
          uint64_t v10 = ((char *)v7 - (unsigned char *)__p) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = (char *)v21 - (unsigned char *)__p;
          if (((char *)v21 - (unsigned char *)__p) >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)&v21, v13);
            double v9 = (double *)__p;
            double v7 = v20;
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v15 = (double *)&v14[8 * v10];
          double *v15 = v5;
          uint64_t v8 = v15 + 1;
          while (v7 != v9)
          {
            uint64_t v16 = *((void *)v7-- - 1);
            *((void *)v15-- - 1) = v16;
          }
          std::string __p = v15;
          char v20 = v8;
          uint64_t v21 = (double *)&v14[8 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *double v7 = v5;
          uint64_t v8 = v7 + 1;
        }
        char v20 = v8;
        uint64_t v6 = (vg::shared *)((char *)v6 + 1);
        double v7 = v8;
      }
      while (v6 != this);
      unint64_t v17 = a2[1];
      if (v17 >= a2[2])
      {
        uint64_t v18 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(a2, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>((uint64_t)a2, (uint64_t)&__p);
        uint64_t v18 = v17 + 24;
      }
      a2[1] = v18;
      if (__p)
      {
        char v20 = (double *)__p;
        operator delete(__p);
      }
      uint64_t v4 = (vg::shared *)((char *)v4 + 1);
    }
    while (v4 != this);
  }
}

void sub_260CF05DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

double vg::shared::computeBBox(uint64_t **a1, double *a2, float a3)
{
  double v3 = *a2;
  uint64_t v4 = *a1;
  double v5 = a1[1];
  if (*a1 == v5)
  {
    int v15 = (int)v3 - 1;
    int v16 = v15 & (v15 >> 31);
    int v13 = v15;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 0x7FFFFFFF;
    int v9 = 0x7FFFFFFF;
    do
    {
      uint64_t v10 = *v4++;
      int v11 = (int)*(float *)&v10;
      int v12 = (int)*((float *)&v10 + 1);
      if (v8 >= (int)*(float *)&v10) {
        int v8 = v11;
      }
      if (v6 <= v11) {
        int v6 = v11;
      }
      if (v9 >= v12) {
        int v9 = v12;
      }
      if (v7 <= v12) {
        int v7 = v12;
      }
    }
    while (v4 != v5);
    int v13 = (int)v3 - 1;
    if (v13 >= v8) {
      int v14 = v8;
    }
    else {
      int v14 = (int)v3 - 1;
    }
    if (v8 >= 0) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v13 >= v6) {
      int v16 = v6;
    }
    else {
      int v16 = (int)v3 - 1;
    }
  }
  float v17 = (float)(v16 - v15);
  int v18 = v15 - (int)(float)(v17 * a3);
  if (v13 >= v18) {
    int v19 = v18;
  }
  else {
    int v19 = v13;
  }
  if (v18 >= 0) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  float v21 = (float)v20 / (float)v13;
  if (v21 <= 1.0) {
    float v22 = (float)v20 / (float)v13;
  }
  else {
    float v22 = 1.0;
  }
  if (v21 < 0.0) {
    float v22 = 0.0;
  }
  __asm { FMOV            V3.2S, #1.0 }
  return v22;
}

int32x2_t vg::shared::expandBBoxToMatchAspectRatio(int32x2_t *a1, int a2, void *a3, float a4)
{
  if (a4 >= 0.0001)
  {
    uint64_t v5 = a3[1];
    int32x2_t v6 = *a1;
    int v7 = (int)*a1;
    if (v7 - a2 <= (int)*a3)
    {
      int v10 = v7 - 1;
      int32x2_t v8 = a1[1];
      __int32 v9 = v8.i32[0];
    }
    else
    {
      int32x2_t v8 = a1[1];
      __int32 v9 = v8.i32[0];
      int v10 = v5 + ~a1[1].i32[0];
      if (v8.i32[0] + a2 < (int)v5) {
        int v10 = a2;
      }
    }
    int v11 = (int)(float)((float)(v9 - v7 + 2 * v10) / a4);
    int32x2_t v12 = vsub_s32(v8, v6);
    BOOL v13 = __OFSUB__(v11, v12.i32[1]);
    int v14 = v11 - v12.i32[1];
    if (v14 < 0 != v13) {
      ++v14;
    }
    if (v6.i32[1] - (v14 >> 1) <= (int)HIDWORD(*a3))
    {
      int v15 = v6.i32[1] - 1;
    }
    else
    {
      int v15 = v14 >> 1;
      if ((v14 >> 1) + v8.i32[1] >= SHIDWORD(v5)) {
        int v15 = HIDWORD(v5) + ~v8.i32[1];
      }
    }
    float v16 = (float)(v12.i32[1] + 2 * v15) * a4;
    int v17 = (int)v16 - v12.i32[0];
    if ((int)v16 < v12.i32[0]) {
      ++v17;
    }
    v18.i32[0] = v17 >> 1;
    v18.i32[1] = v15;
    return vsub_s32(v6, v18);
  }
  else
  {
    return *a1;
  }
}

unsigned int vg::shared::clipFToUInt8(vg::shared *this, float a2, float a3, float a4)
{
  if (a2 < a4) {
    return 0;
  }
  if (a2 <= a3) {
    return llroundf((float)((float)(a2 - a4) * 255.0) / (float)(a3 - a4));
  }
  return 255;
}

__n64 vg::shared::scaleFromMatrix(float32x4_t *this, const simd_float4x4 *a2)
{
  float32x4_t v2 = vmulq_f32(*this, *this);
  result.n64_f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0]);
  float32x4_t v3 = vmulq_f32(this[1], this[1]);
  result.n64_u32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  return result;
}

__n128 vg::shared::translationFromMatrix(__n128 *this, const simd_float4x4 *a2)
{
  return this[3];
}

double vg::shared::rotationFromMatrix(int32x4_t *this, const simd_float4x4 *a2)
{
  int32x4_t v2 = this[1];
  int32x4_t v3 = vzip1q_s32(*this, v2);
  int32x4_t v4 = vzip2q_s32(*this, v2);
  v3.i32[2] = (__int32)this[2];
  v4.i32[2] = this[2].i64[1];
  float32x4_t v5 = vmulq_f32(*(float32x4_t *)this, *(float32x4_t *)this);
  v5.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).u64[0];
  v5.f32[0] = sqrtf(v5.f32[0]);
  *(void *)&double result = vdivq_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v3, v4), vdupq_lane_s32(*(int32x2_t *)this->i8, 1)), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0)).u64[0];
  return result;
}

__n128 vg::shared::matrixFromRotationAndTranslation(uint64_t a1)
{
  return *(__n128 *)a1;
}

double vg::shared::rotation4x4ForAngle(float32x4_t *a1, float a2)
{
  float32x4_t v22 = *a1;
  __float2 v2 = __sincosf_stret(a2 * 0.5);
  _Q3 = vmulq_n_f32(v22, v2.__sinval);
  _S5 = _Q3.i32[1];
  _S6 = _Q3.i32[2];
  __asm { FMLS            S0, S6, V3.S[2] }
  *(float *)&unsigned int v11 = _S0 + (float)(v2.__cosval * v2.__cosval);
  float v12 = vmlas_n_f32(vmuls_lane_f32(v2.__cosval, _Q3, 2), _Q3.f32[1], _Q3.f32[0]);
  double result = COERCE_DOUBLE(__PAIR64__(v12 + v12, v11));
  __asm
  {
    FMLA            S4, S5, V3.S[1]
    FMLS            S16, S3, V3.S[0]
    FMLA            S18, S6, V3.S[1]
    FMLA            S17, S3, V3.S[2]
    FMLA            S16, S6, V3.S[1]
    FMLA            S1, S6, V3.S[2]
    FMLS            S1, S3, V3.S[0]
    FMLS            S1, S5, V3.S[1]
  }
  return result;
}

double vg::shared::matrixFromEulerAngles(long long *a1)
{
  long long v25 = *a1;
  LODWORD(v1) = HIDWORD(*(void *)a1);
  long long v28 = xmmword_260D23F10;
  *(double *)v2.uint64_t i64 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v28, v1);
  float32x4_t v23 = v3;
  float32x4_t v24 = v2;
  float32x4_t v21 = v5;
  float32x4_t v22 = v4;
  long long v27 = xmmword_260D21CB0;
  *(double *)v6.uint64_t i64 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v27, *(float *)&v25);
  float32x4_t v19 = v6;
  float32x4_t v20 = v7;
  float32x4_t v17 = v9;
  float32x4_t v18 = v8;
  long long v26 = xmmword_260D23F20;
  *(double *)&long long v10 = vg::shared::rotation4x4ForAngle((float32x4_t *)&v26, *((float *)&v25 + 2));
  unint64_t v11 = 0;
  long long v29 = v10;
  long long v30 = v12;
  long long v31 = v13;
  long long v32 = v14;
  do
  {
    v33[v11 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(long long *)((char *)&v29 + v11))), v20, *(float32x2_t *)((char *)&v29 + v11), 1), v18, *(float32x4_t *)((char *)&v29 + v11), 2), v17, *(float32x4_t *)((char *)&v29 + v11), 3);
    v11 += 16;
  }
  while (v11 != 64);
  unint64_t v15 = 0;
  long long v29 = v33[0];
  long long v30 = v33[1];
  long long v31 = v33[2];
  long long v32 = v33[3];
  do
  {
    v33[v15 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(long long *)((char *)&v29 + v15))), v23, *(float32x2_t *)((char *)&v29 + v15), 1), v22, *(float32x4_t *)((char *)&v29 + v15), 2), v21, *(float32x4_t *)((char *)&v29 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  return *(double *)v33;
}

double vg::shared::eulerAnglesFromMatrix(vg::shared *this, simd_float4x4 a2)
{
  if (a2.columns[2].f32[1] >= 1.0)
  {
    atan2f(-a2.columns[0].f32[2], -a2.columns[1].f32[2]);
    LODWORD(v2) = -1077342245;
LABEL_6:
    HIDWORD(v2) = 0;
    return v2;
  }
  if (a2.columns[2].f32[1] <= -1.0)
  {
    atan2f(a2.columns[0].f32[2], a2.columns[1].f32[2]);
    LODWORD(v2) = 1070141403;
    goto LABEL_6;
  }
  simd_float4 v5 = a2.columns[2];
  float v6 = a2.columns[1].f32[1];
  float v4 = a2.columns[0].f32[1];
  float v7 = asinf(-a2.columns[2].f32[1]);
  v5.i32[0] = atan2f(v5.f32[0], v5.f32[2]);
  atan2f(v4, v6);
  return COERCE_DOUBLE(__PAIR64__(v5.u32[0], LODWORD(v7)));
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if (a3 != a2)
  {
    float32x4_t v3 = a3;
    simd_float4 v5 = (unint64_t *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        unint64_t v33 = *(v3 - 1);
        unint64_t v34 = *v5;
        if (v33 < *v5)
        {
          unint64_t *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        return (uint64_t)std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v3);
      }
      float v7 = &v5[v6 >> 1];
      float32x4_t v8 = v3 - 1;
      double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v7, v3 - 1);
      unint64_t v9 = *v5;
      if (*v5 >= *v7)
      {
        long long v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            unint64_t *v5 = *v10;
            *long long v10 = v9;
            double result = (result + 1);
            goto LABEL_13;
          }
        }
        float32x4_t v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            unint64_t v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *float32x4_t v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          unint64_t v27 = *v5;
          do
          {
            unint64_t v29 = *v22++;
            unint64_t v28 = v29;
          }
          while (v27 >= v29);
          long long v30 = v22 - 1;
          do
          {
            unint64_t v32 = *--v8;
            unint64_t v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8) {
            break;
          }
          unint64_t *v30 = v31;
          *float32x4_t v8 = v28;
        }
        simd_float4 v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        long long v10 = v3 - 1;
LABEL_13:
        unint64_t v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          float v16 = v5 + 1;
        }
        else
        {
          long long v12 = v5 + 1;
          while (1)
          {
            unint64_t v13 = *v7;
            do
            {
              unint64_t v15 = *v12++;
              unint64_t v14 = v15;
            }
            while (v15 < v13);
            float v16 = v12 - 1;
            do
            {
              unint64_t v18 = *--v10;
              unint64_t v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10) {
              break;
            }
            unint64_t *v16 = v17;
            *long long v10 = v14;
            double result = (result + 1);
            if (v16 == v7) {
              float v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          unint64_t v19 = *v16;
          if (*v7 < *v16)
          {
            unint64_t *v16 = *v7;
            *float v7 = v19;
            double result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            float32x4_t v24 = v16 + 1;
            while (v24 != v3)
            {
              unint64_t v26 = *(v24 - 1);
              unint64_t v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              unint64_t v21 = *(v11 - 1);
              unint64_t v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          simd_float4 v5 = v16 + 1;
        }
        else {
          float32x4_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2)
{
  while (result != a2 - 1)
  {
    double v2 = result++;
    if (v2 != a2 && result != a2)
    {
      unint64_t v3 = *v2;
      unint64_t v4 = result;
      unint64_t v5 = v2;
      unint64_t v6 = result;
      do
      {
        unint64_t v8 = *v6++;
        unint64_t v7 = v8;
        if (v8 < v3)
        {
          unint64_t v3 = v7;
          unint64_t v5 = v4;
        }
        unint64_t v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        unint64_t v9 = *v2;
        unint64_t *v2 = *v5;
        unint64_t *v5 = v9;
      }
    }
  }
  return result;
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  if (a3 != a2)
  {
    unint64_t v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        double result = *(v4 - 1);
        float v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      }
      unint64_t v8 = &a1[v7 >> 1];
      unint64_t v9 = v4 - 1;
      int v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      double result = *a1;
      if (*a1 >= *v8)
      {
        unint64_t v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            float *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        unint64_t v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            float v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *unint64_t v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          float v25 = *a1;
          do
          {
            float v26 = *v21++;
            double result = v26;
          }
          while (v25 >= v26);
          unint64_t v27 = v21 - 1;
          do
          {
            float v28 = *--v9;
            float v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          float *v27 = v29;
          *unint64_t v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        unint64_t v11 = v4 - 1;
LABEL_13:
        long long v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          float v16 = a1 + 1;
        }
        else
        {
          unint64_t v13 = a1 + 1;
          while (1)
          {
            float v14 = *v8;
            do
            {
              float v15 = *v13++;
              double result = v15;
            }
            while (v15 < v14);
            float v16 = v13 - 1;
            do
            {
              float v17 = *--v11;
              float v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            float *v16 = v18;
            float *v11 = result;
            ++v10;
            if (v16 == v8) {
              unint64_t v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          double result = *v8;
          float v19 = *v16;
          if (*v8 < *v16)
          {
            float *v16 = result;
            *unint64_t v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            unint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              float v24 = *(v23 - 1);
              double result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              float v20 = *(v12 - 1);
              double result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          unint64_t v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  while (a1 != a2 - 1)
  {
    float v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      double result = *v3;
      float v4 = a1;
      float v5 = v3;
      float v6 = a1;
      do
      {
        float v7 = *v6++;
        float v8 = v7;
        if (v7 < result)
        {
          double result = v8;
          float v5 = v4;
        }
        float v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        double result = *v3;
        float *v3 = *v5;
        float *v5 = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  unsigned char v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    float v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<double>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::vector<std::vector<double>>::__construct_one_at_end[abi:ne180100]<std::vector<double> const&>(uint64_t a1, uint64_t a2)
{
  float v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_260CF16E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_260CF17F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

id vg::shared::VNGetFaceObservations(vg::shared *this, IOSurface *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  if ([(vg::shared *)v2 pixelFormat] != 32
    && [(vg::shared *)v2 pixelFormat] != 1111970369)
  {
    uint64_t v5 = __VGLogSharedInstance();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      int v10 = vg::OSTypeToString((vg *)[(vg::shared *)v2 pixelFormat]);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_260C8D000, (os_log_t)v5, OS_LOG_TYPE_ERROR, " Unsupported format for the input image: %@ ", buf, 0xCu);
    }
    goto LABEL_12;
  }
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface((IOSurface *)v2);
  CVPixelBufferRef v4 = CVPixelBufferFromIOSurface;
  if (!CVPixelBufferFromIOSurface)
  {
    uint64_t v5 = __VGLogSharedInstance();
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, (os_log_t)v5, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
    }
LABEL_12:
    unint64_t v9 = 0;
    goto LABEL_17;
  }
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = ___ZN2vg6shared21VNGetFaceObservationsEP9IOSurface_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = CVPixelBufferFromIOSurface;
  uint64_t v5 = MEMORY[0x261227FC0](v15);
  id v6 = objc_alloc(MEMORY[0x263F1EF40]);
  uint64_t v7 = (void *)[v6 initWithCVPixelBuffer:v4 options:MEMORY[0x263EFFA78]];
  unint64_t v8 = v7;
  if (v7)
  {
    LOBYTE(v13) = 0;
    char v14 = 0;
    vg::shared::getVNFaceObservations(v7, &v13, (uint64_t)buf);
    if (buf[8]) {
      unint64_t v9 = *(void **)buf;
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v11 = __VGLogSharedInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
    }

    unint64_t v9 = 0;
  }

  (*(void (**)(uint64_t))(v5 + 16))(v5);
LABEL_17:

  return v9;
}

void sub_260CF1A68(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared21VNGetFaceObservationsEP9IOSurface_block_invoke(uint64_t a1)
{
}

void vg::shared::getVNFaceObservations(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = VGLogVGSharedVision();
  if (os_signpost_enabled(v6))
  {
    if (*((unsigned char *)a2 + 32)) {
      uint64_t v7 = @"true";
    }
    else {
      uint64_t v7 = @"false";
    }
    *(_DWORD *)long long buf = 138543362;
    char v35 = v7;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetVNFaceObservations", "withFaceBounds: %{public}@", buf, 0xCu);
  }

  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 3221225472;
  v27[2] = ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke;
  void v27[3] = &__block_descriptor_72_e5_v8__0l;
  long long v8 = a2[1];
  long long v28 = *a2;
  long long v29 = v8;
  uint64_t v30 = *((void *)a2 + 4);
  unint64_t v9 = (void (**)(void))MEMORY[0x261227FC0](v27);
  if (*((unsigned char *)a2 + 32))
  {
    int v10 = objc_msgSend(MEMORY[0x263F1EED0], "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 3737841669, 0, 0, 0, *(double *)a2, *((double *)a2 + 1), *((double *)a2 + 2), *((double *)a2 + 3));
    unint64_t v33 = v10;
    unint64_t v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v33 count:1];
    *(void *)a3 = [v11 mutableCopy];
    *(unsigned char *)(a3 + 8) = 1;

    goto LABEL_30;
  }
  uint64_t v12 = objc_opt_new();
  id v31 = 0;
  char v13 = [v12 setRevision:3737841669 error:&v31];
  char v14 = (__CFString *)v31;
  if (v14) {
    char v15 = 0;
  }
  else {
    char v15 = v13;
  }
  if (v15)
  {
    float v16 = VGLogVGSharedVision();
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_260C8D000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceRectangles_PerformRequest", (const char *)&unk_260D385D9, buf, 2u);
    }

    unint64_t v32 = v12;
    uint64_t v17 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v32 count:1];
    id v26 = 0;
    char v18 = [v5 performRequests:v17 error:&v26];
    float v19 = (__CFString *)v26;

    if (v18)
    {
      ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_59();
    }
    else
    {
      unint64_t v23 = __VGLogSharedInstance();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        char v35 = v19;
        _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_ERROR, " Vision failed face detection request with error: %@ ", buf, 0xCu);
      }

      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
      ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_59();
      if ((v18 & 1) == 0) {
        goto LABEL_29;
      }
    }
    float v24 = [v12 results];
    if ([v24 count])
    {
      *(void *)a3 = v24;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      float v25 = __VGLogSharedInstance();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_ERROR, " Vision did not detect any faces ", buf, 2u);
      }

      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
    }
LABEL_29:

    goto LABEL_30;
  }
  float v20 = v14;
  unint64_t v21 = __VGLogSharedInstance();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    char v35 = v20;
    _os_log_impl(&dword_260C8D000, v21, OS_LOG_TYPE_ERROR, " Vision VNDetectFaceRectanglesRequest failed to set revision with error: %@ ", buf, 0xCu);
  }

  float v22 = __VGLogSharedInstance();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_260C8D000, v22, OS_LOG_TYPE_ERROR, " Unable to create Vision face detection request ", buf, 2u);
  }

  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
LABEL_30:
  v9[2](v9);
}

void sub_260CF1F34(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

id vg::shared::VNGetLargestFaceObservation(vg::shared *this, IOSurface *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  CVPixelBufferRef v4 = vg::shared::VNGetFaceObservations(v2, v3);
  id v5 = v4;
  if (v4 && [v4 count])
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v20;
      double v10 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v20 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          objc_msgSend(v12, "boundingBox", (void)v19);
          if (!CGRectIsEmpty(v26))
          {
            [v12 boundingBox];
            double v14 = v13;
            [v12 boundingBox];
            double v16 = v14 * v15;
            if (v16 > v10)
            {
              id v17 = v12;

              double v10 = v16;
              uint64_t v7 = v17;
            }
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_260CF2184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VNDetectFaceMetadata(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  CVPixelBufferRef v4 = VGLogVGSharedVision();
  if (os_signpost_enabled(v4))
  {
    id v5 = @"true";
    if (*(unsigned char *)(a1 + 50)) {
      id v6 = @"true";
    }
    else {
      id v6 = @"false";
    }
    int v7 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)(a1 + 49)) {
      uint64_t v8 = @"true";
    }
    else {
      uint64_t v8 = @"false";
    }
    *(_DWORD *)long long buf = 138543874;
    if (!v7) {
      id v5 = @"false";
    }
    *(void *)&uint8_t buf[4] = v6;
    __int16 v82 = 2114;
    uint64_t v83 = v8;
    __int16 v84 = 2114;
    uint64_t v85 = v5;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", buf, 0x20u);
  }

  v77[0] = MEMORY[0x263EF8330];
  v77[1] = 3221225472;
  int32x4_t v77[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke;
  v77[3] = &__block_descriptor_40_e5_v8__0l;
  v77[4] = a1;
  uint64_t v9 = (void (**)(void))MEMORY[0x261227FC0](v77);
  if (*(unsigned __int8 *)(a1 + 49) | *(unsigned __int8 *)(a1 + 48))
  {
    if ([*(id *)a1 pixelFormat] != 32
      && [*(id *)a1 pixelFormat] != 1111970369)
    {
      double v10 = __VGLogSharedInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = vg::OSTypeToString((vg *)[*(id *)a1 pixelFormat]);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v43;
        _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Unsupported format for the input image: %@ ", buf, 0xCu);
      }
      goto LABEL_62;
    }
    CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(*(IOSurface **)a1);
    CVPixelBufferRef v12 = CVPixelBufferFromIOSurface;
    if (!CVPixelBufferFromIOSurface)
    {
      double v10 = __VGLogSharedInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
      }
      goto LABEL_62;
    }
    v76[0] = MEMORY[0x263EF8330];
    v76[1] = 3221225472;
    v76[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_41;
    v76[3] = &__block_descriptor_40_e5_v8__0l;
    v76[4] = CVPixelBufferFromIOSurface;
    int v67 = (void (**)(void))MEMORY[0x261227FC0](v76);
    id v13 = objc_alloc(MEMORY[0x263F1EF40]);
    double v14 = (void *)[v13 initWithCVPixelBuffer:v12 options:MEMORY[0x263EFFA78]];
    double v15 = v14;
    if (!v14)
    {
      uint64_t v45 = __VGLogSharedInstance();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_260C8D000, v45, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
      }

      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      goto LABEL_110;
    }
    long long v16 = *(_OWORD *)(a1 + 24);
    v72[0] = *(_OWORD *)(a1 + 8);
    v72[1] = v16;
    uint64_t v73 = *(void *)(a1 + 40);
    vg::shared::getVNFaceObservations(v14, v72, (uint64_t)&v74);
    int v17 = v75;
    if (!v75 || (id v18 = v74, ![v74 count]))
    {
      uint64_t v44 = __VGLogSharedInstance();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_260C8D000, v44, OS_LOG_TYPE_ERROR, " Unable to get VNFaceObservations ", buf, 2u);
      }

      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      if (!v17) {
        goto LABEL_110;
      }
LABEL_109:

LABEL_110:
      v67[2](v67);

      goto LABEL_111;
    }
    char v65 = [v18 firstObject];
    int v66 = objc_opt_new();
    LOBYTE(v7std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
    char v71 = 0;
    if (*(unsigned char *)(a1 + 48))
    {
      id v19 = v65;
      long long v20 = VGLogVGSharedVision();
      if (os_signpost_enabled(v20))
      {
        *(_WORD *)unint64_t v79 = 0;
        _os_signpost_emit_with_name_impl(&dword_260C8D000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateFaceLandmarksRequest", (const char *)&unk_260D385D9, v79, 2u);
      }

      long long v21 = objc_opt_new();
      *(void *)unint64_t v79 = v19;
      long long v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:v79 count:1];
      [v21 setInputFaceObservations:v22];

      *(void *)long long buf = v21;
      uint8_t buf[8] = 1;
      ___ZN2vg6sharedL26createFaceLandmarksRequestEP17VNFaceObservation_block_invoke();

      std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>((uint64_t)&v70, (uint64_t *)buf);
      if (buf[8]) {

      }
      if (v71) {
        [v66 addObject:v70];
      }
    }
    v79[0] = 0;
    char v80 = 0;
    if (*(unsigned char *)(a1 + 49))
    {
      id v64 = v65;
      unint64_t v23 = VGLogVGSharedVision();
      if (os_signpost_enabled(v23))
      {
        *(_WORD *)char v86 = 0;
        _os_signpost_emit_with_name_impl(&dword_260C8D000, v23, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateFaceAttributesRequest", (const char *)&unk_260D385D9, v86, 2u);
      }

      uint64_t v24 = objc_opt_new();
      id v78 = 0;
      char v25 = [v24 setRevision:3737841666 error:&v78];
      id v26 = v78;
      if (v26) {
        char v27 = 0;
      }
      else {
        char v27 = v25;
      }
      if (v27)
      {
        uint64_t v28 = [MEMORY[0x263F1EF88] defaultANEDevice];
        if (!v28)
        {
          uint64_t v28 = [MEMORY[0x263F1EF88] defaultDevice];
        }
        objc_msgSend(v64, "boundingBox", v64);
        double v30 = v29;
        double v32 = v31;
        double v34 = v33;
        double v36 = v35;
        [v24 setProcessingDevice:v28];
        double v37 = 1.0;
        if (v30 <= 1.0) {
          double v38 = v30;
        }
        else {
          double v38 = 1.0;
        }
        if (v30 < 0.0) {
          double v38 = 0.0;
        }
        if (v32 <= 1.0) {
          double v39 = v32;
        }
        else {
          double v39 = 1.0;
        }
        if (v32 < 0.0) {
          double v39 = 0.0;
        }
        if (v34 <= 1.0) {
          double v40 = v34;
        }
        else {
          double v40 = 1.0;
        }
        if (v34 < 0.0) {
          double v40 = 0.0;
        }
        if (v36 <= 1.0) {
          double v37 = v36;
        }
        if (v36 < 0.0) {
          double v37 = 0.0;
        }
        objc_msgSend(v24, "setRegionOfInterest:", v38, v39, v40, v37);
        *(void *)char v86 = v64;
        int v41 = [MEMORY[0x263EFF8C0] arrayWithObjects:v86 count:1];
        [v24 setInputFaceObservations:v41];

        *(void *)long long buf = v24;
        char v42 = 1;
        uint64_t v24 = (void *)v28;
      }
      else
      {
        uint64_t v46 = __VGLogSharedInstance();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v86 = 138412290;
          *(void *)&v86[4] = v26;
          _os_log_impl(&dword_260C8D000, v46, OS_LOG_TYPE_ERROR, " Vision VNClassifyFaceAttributesRequest failed to set revision with error: %@ ", v86, 0xCu);
        }

        char v42 = 0;
        buf[0] = 0;
      }
      uint8_t buf[8] = v42;

      ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke();
      std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>((uint64_t)v79, (uint64_t *)buf);
      if (buf[8]) {

      }
      if (v80) {
        [v66 addObject:*(void *)v79];
      }
    }
    uint64_t v47 = VGLogVGSharedVision();
    if (os_signpost_enabled(v47))
    {
      uint64_t v48 = @"true";
      if (*(unsigned char *)(a1 + 50)) {
        uint64_t v49 = @"true";
      }
      else {
        uint64_t v49 = @"false";
      }
      int v50 = *(unsigned __int8 *)(a1 + 48);
      if (*(unsigned char *)(a1 + 49)) {
        char v51 = @"true";
      }
      else {
        char v51 = @"false";
      }
      *(_DWORD *)long long buf = 138543874;
      if (!v50) {
        uint64_t v48 = @"false";
      }
      *(void *)&uint8_t buf[4] = v49;
      __int16 v82 = 2114;
      uint64_t v83 = v51;
      __int16 v84 = 2114;
      uint64_t v85 = v48;
      _os_signpost_emit_with_name_impl(&dword_260C8D000, v47, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata_PerformRequests", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", buf, 0x20u);
    }

    v69[0] = MEMORY[0x263EF8330];
    v69[1] = 3221225472;
    v69[2] = ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_43;
    v69[3] = &__block_descriptor_40_e5_v8__0l;
    v69[4] = a1;
    int v52 = (void (**)(void))MEMORY[0x261227FC0](v69);
    id v68 = 0;
    char v53 = [v15 performRequests:v66 error:&v68];
    id v54 = v68;
    if ((v53 & 1) == 0)
    {
      uint64_t v55 = __VGLogSharedInstance();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v54;
        _os_log_impl(&dword_260C8D000, v55, OS_LOG_TYPE_ERROR, " Vision failed to perform requests with error: %@ ", buf, 0xCu);
      }
    }
    v52[2](v52);

    if (v71)
    {
      unint64_t v56 = [v70 results];
      if (![v56 count])
      {
        uint32x4_t v62 = __VGLogSharedInstance();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_260C8D000, v62, OS_LOG_TYPE_ERROR, " Vision did not detect any face landmarks ", buf, 2u);
        }

        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 16) = 0;

        goto LABEL_103;
      }
      int v57 = [v56 firstObject];
      uint64_t v58 = [v57 landmarks];
    }
    else
    {
      uint64_t v58 = 0;
    }
    if (v80)
    {
      uint64_t v59 = [*(id *)v79 results];
      if (![v59 count])
      {
        uint64_t v63 = __VGLogSharedInstance();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_260C8D000, v63, OS_LOG_TYPE_ERROR, " Vision did not detect any face attributes ", buf, 2u);
        }

        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 16) = 0;

LABEL_104:
        if (v80) {

        }
        if (v71) {
        if (!v75)
        }
          goto LABEL_110;
        goto LABEL_109;
      }
      uint32x4_t v60 = [v59 firstObject];
      uint64_t v61 = [v60 faceAttributes];
    }
    else
    {
      uint64_t v61 = 0;
    }
    *(void *)a2 = v58;
    *(void *)(a2 + 8) = v61;
    *(unsigned char *)(a2 + 16) = 1;
LABEL_103:
    uint64_t v58 = 0;
    goto LABEL_104;
  }
  double v10 = __VGLogSharedInstance();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Invalid input for Vision Face Metadata ", buf, 2u);
  }
LABEL_62:

  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_111:
  v9[2](v9);
}

void sub_260CF2C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void (**a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke();
  if (*(unsigned char *)(v30 - 216)) {

  }
  if (a20) {
  if (a27)
  }

  a12[2]();
  v27[2](v27);

  _Unwind_Resume(a1);
}

id VGLogVGSharedVision(void)
{
  if (VGLogVGSharedVision(void)::onceToken != -1) {
    dispatch_once(&VGLogVGSharedVision(void)::onceToken, &__block_literal_global_66);
  }
  os_log_t v0 = (void *)VGLogVGSharedVision(void)::handle;

  return v0;
}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    uint64_t v3 = *(unsigned char **)(a1 + 32);
    if (v3[50]) {
      CVPixelBufferRef v4 = @"true";
    }
    else {
      CVPixelBufferRef v4 = @"false";
    }
    if (v3[49]) {
      id v5 = @"true";
    }
    else {
      id v5 = @"false";
    }
    if (v3[48]) {
      id v6 = @"true";
    }
    else {
      id v6 = @"false";
    }
    int v7 = 138543874;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    double v10 = v5;
    __int16 v11 = 2114;
    CVPixelBufferRef v12 = v6;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", (uint8_t *)&v7, 0x20u);
  }
}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_41(uint64_t a1)
{
}

void ___ZN2vg6shared20VNDetectFaceMetadataERKNS0_11VNFaceInputE_block_invoke_43(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    uint64_t v3 = *(unsigned char **)(a1 + 32);
    if (v3[50]) {
      CVPixelBufferRef v4 = @"true";
    }
    else {
      CVPixelBufferRef v4 = @"false";
    }
    if (v3[49]) {
      id v5 = @"true";
    }
    else {
      id v5 = @"false";
    }
    if (v3[48]) {
      id v6 = @"true";
    }
    else {
      id v6 = @"false";
    }
    int v7 = 138543874;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    double v10 = v5;
    __int16 v11 = 2114;
    CVPixelBufferRef v12 = v6;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceMetadata_PerformRequests", "isWarmupRun: %{public}@, generateFaceAttributes: %{public}@, generateFaceLandmarks2D: %{public}@", (uint8_t *)&v7, 0x20u);
  }
}

id vg::shared::VNDetectFaceLandmarks2D(void *a1, long long *a2)
{
  id v3 = a1;
  CVPixelBufferRef v4 = VGLogVGSharedVision();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceLandmarks2D", (const char *)&unk_260D385D9, buf, 2u);
  }

  id v5 = v3;
  *(void *)long long buf = v5;
  long long v6 = a2[1];
  long long v13 = *a2;
  long long v14 = v6;
  char v15 = *((unsigned char *)a2 + 32);
  __int16 v16 = 1;
  char v17 = 0;
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v10);
  if (v11)
  {
    id v7 = v10[1];
    id v8 = v10[0];
  }
  else
  {
    id v8 = 0;
  }

  ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke();

  return v8;
}

void sub_260CF31F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared23VNDetectFaceLandmarks2DEP9IOSurfaceRKNSt3__18optionalI6CGRectEE_block_invoke()
{
  os_log_t v0 = VGLogVGSharedVision();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceLandmarks2D", (const char *)&unk_260D385D9, v1, 2u);
  }
}

BOOL vg::shared::VNWarmupDetector(unsigned char *a1)
{
  void v29[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    id v3 = @"true";
    if (a1[1]) {
      CVPixelBufferRef v4 = @"true";
    }
    else {
      CVPixelBufferRef v4 = @"false";
    }
    if (!*a1) {
      id v3 = @"false";
    }
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v24 = 2114;
    char v25 = v3;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNWarmupDetector", "warmupFaceAttributesRequest: %{public}@, warmupLandmarks2DRequest: %{public}@", buf, 0x16u);
  }

  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  void v22[2] = ___ZN2vg6shared16VNWarmupDetectorERKNS0_13VNWarmupInputE_block_invoke;
  v22[3] = &__block_descriptor_40_e5_v8__0l;
  v22[4] = a1;
  id v5 = (void (**)(void))MEMORY[0x261227FC0](v22);
  id v6 = objc_alloc(MEMORY[0x263EFF8F8]);
  id v7 = NSString;
  id v8 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
  v29[0] = v8;
  v29[1] = @"SharedData";
  v29[2] = @"vision_warmup_data.bin";
  __int16 v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v29 count:3];
  double v10 = [v7 pathWithComponents:v9];
  char v11 = (vg *)[v6 initWithContentsOfFile:v10];

  if (!v11)
  {
    long long v13 = __VGLogSharedInstance();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v13, OS_LOG_TYPE_DEBUG, " Unable to load warmup data for Vision filter ", buf, 2u);
    }
    goto LABEL_17;
  }
  CVPixelBufferRef v12 = vg::createColorIOSurfaceFromData(v11, (NSData *)0x42475241);
  long long v13 = v12;
  if (!v12)
  {
    char v17 = __VGLogSharedInstance();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_DEBUG, " Unable to construct BGRA IOSurface from warmup data for Vision filter ", buf, 2u);
    }

LABEL_17:
    BOOL v15 = 0;
    goto LABEL_21;
  }
  long long v14 = v12;
  *(void *)long long buf = v14;
  uint8_t buf[8] = 0;
  char v26 = 0;
  __int16 v27 = *(_WORD *)a1;
  char v28 = 1;
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v20);
  BOOL v15 = v21 != 0;
  if (v21)
  {

    __int16 v16 = v20[0];
  }
  else
  {
    __int16 v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v19 = 0;
      _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_DEBUG, " Failed to warmup Vision filter ", v19, 2u);
    }
  }

  long long v13 = v14;
LABEL_21:

  v5[2](v5);
  return v15;
}

void sub_260CF35D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  std::__optional_destruct_base<vg::shared::VNFaceOutput,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);

  v19[2](v19);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared16VNWarmupDetectorERKNS0_13VNWarmupInputE_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    id v3 = *(unsigned char **)(a1 + 32);
    if (v3[1]) {
      CVPixelBufferRef v4 = @"true";
    }
    else {
      CVPixelBufferRef v4 = @"false";
    }
    if (*v3) {
      id v5 = @"true";
    }
    else {
      id v5 = @"false";
    }
    int v6 = 138543618;
    id v7 = v4;
    __int16 v8 = 2114;
    __int16 v9 = v5;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNWarmupDetector", "warmupFaceAttributesRequest: %{public}@, warmupLandmarks2DRequest: %{public}@", (uint8_t *)&v6, 0x16u);
  }
}

id vg::shared::VNGetFaceAttributes(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    if (*(unsigned char *)(a1 + 48)) {
      id v3 = @"true";
    }
    else {
      id v3 = @"false";
    }
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v3;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNGetFaceAttributes", "isWarmupRun: %{public}@", buf, 0xCu);
  }

  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = ___ZN2vg6shared19VNGetFaceAttributesERKNS0_21VNFaceAttributesInputE_block_invoke;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = a1;
  CVPixelBufferRef v4 = (void (**)(void))MEMORY[0x261227FC0](v9);
  *(void *)long long buf = *(id *)a1;
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a1 + 8);
  long long v11 = *(_OWORD *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 40);
  __int16 v13 = 256;
  char v14 = *(unsigned char *)(a1 + 48);
  vg::shared::VNDetectFaceMetadata((uint64_t)buf, (uint64_t)v7);
  if (v8)
  {
    id v5 = v7[1];
  }
  else
  {
    id v5 = 0;
  }

  v4[2](v4);

  return v5;
}

void sub_260CF390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared19VNGetFaceAttributesERKNS0_21VNFaceAttributesInputE_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 48)) {
      id v3 = @"true";
    }
    else {
      id v3 = @"false";
    }
    int v4 = 138543362;
    id v5 = v3;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNGetFaceAttributes", "isWarmupRun: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t vg::shared::VNGetIsBlinking(void *a1, float a2)
{
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    id v5 = [v3 eyesCategory];
    uint64_t v6 = [v5 label];
    id v7 = [v6 identifier];
    unsigned int v8 = [v7 isEqual:*MEMORY[0x263F1F0F0]];

    __int16 v9 = [v4 eyesCategory];
    uint64_t v10 = [v9 label];
    [v10 confidence];
    float v12 = v11;

    if (v12 >= a2) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    char v14 = __VGLogSharedInstance();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v16 = 0;
      _os_log_impl(&dword_260C8D000, v14, OS_LOG_TYPE_ERROR, " Vision face attributes are nil ", v16, 2u);
    }

    uint64_t v13 = 0;
  }

  return v13;
}

void sub_260CF3B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::shared::VNGetLeftPupilPoint(void *a1, unsigned int a2)
{
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __int16 v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v21 = 0;
      char v17 = " Vision face landmarks are nil ";
      id v18 = (uint8_t *)&v21;
LABEL_8:
      _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    }
LABEL_9:

    uint64_t v15 = 0;
    goto LABEL_10;
  }
  id v5 = [v3 leftPupil];
  uint64_t v6 = [v5 pointCount];

  if (v6 != 1)
  {
    __int16 v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = 0;
      char v17 = " Vision did not find the left pupil ";
      id v18 = (uint8_t *)&v20;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  id v7 = [v4 leftPupil];
  double v8 = (double)(unsigned __int16)a2;
  int v9 = HIWORD(a2);
  uint64_t v10 = (double *)objc_msgSend(v7, "pointsInImageOfSize:", v8, (double)v9);
  double v11 = *v10;
  double v12 = v10[1];

  *(float *)&uint64_t v13 = v11;
  float v14 = v12;
  *((float *)&v13 + 1) = (float)v9 - v14;
  uint64_t v15 = v13;
LABEL_10:

  return v15;
}

void sub_260CF3CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::shared::VNGetRightPupilPoint(void *a1, unsigned int a2)
{
  id v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __int16 v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v21 = 0;
      char v17 = " Vision face landmarks are nil ";
      id v18 = (uint8_t *)&v21;
LABEL_8:
      _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    }
LABEL_9:

    uint64_t v15 = 0;
    goto LABEL_10;
  }
  id v5 = [v3 rightPupil];
  uint64_t v6 = [v5 pointCount];

  if (v6 != 1)
  {
    __int16 v16 = __VGLogSharedInstance();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = 0;
      char v17 = " Vision did not find the right pupil ";
      id v18 = (uint8_t *)&v20;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  id v7 = [v4 rightPupil];
  double v8 = (double)(unsigned __int16)a2;
  int v9 = HIWORD(a2);
  uint64_t v10 = (double *)objc_msgSend(v7, "pointsInImageOfSize:", v8, (double)v9);
  double v11 = *v10;
  double v12 = v10[1];

  *(float *)&uint64_t v13 = v11;
  float v14 = v12;
  *((float *)&v13 + 1) = (float)v9 - v14;
  uint64_t v15 = v13;
LABEL_10:

  return v15;
}

void sub_260CF3E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VNGetHumanBBoxes(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v4 = VGLogVGSharedVision();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "VNGetHumanBBox", (const char *)&unk_260D385D9, buf, 2u);
  }

  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(*(IOSurface **)a1);
  CVPixelBufferRef v6 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v48[0] = MEMORY[0x263EF8330];
    v48[1] = 3221225472;
    v48[2] = ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke_56;
    v48[3] = &__block_descriptor_40_e5_v8__0l;
    void v48[4] = CVPixelBufferFromIOSurface;
    double v40 = (void (**)(void))MEMORY[0x261227FC0](v48);
    id v7 = objc_alloc(MEMORY[0x263F1EF40]);
    int v41 = (void *)[v7 initWithCVPixelBuffer:v6 options:MEMORY[0x263EFFA78]];
    double v8 = objc_opt_new();
    [v8 setUpperBodyOnly:*(unsigned __int8 *)(a1 + 8)];
    id v47 = 0;
    char v9 = [v8 setRevision:2 error:&v47];
    id v10 = v47;
    if (v9)
    {
      int v50 = v8;
      double v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v50 count:1];
      id v46 = v10;
      char v12 = [v41 performRequests:v11 error:&v46];
      id v39 = v46;

      if (v12)
      {
        uint64_t v13 = [v8 results];
        float v14 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v13, "count", v13));
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v15 = v13;
        uint64_t v16 = [v15 countByEnumeratingWithState:&v42 objects:v49 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v43;
          do
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v43 != v17) {
                objc_enumerationMutation(v15);
              }
              id v19 = *(id *)(*((void *)&v42 + 1) + 8 * i);
              [v19 boundingBox];
              if (v20 <= 1.0) {
                double v24 = v20;
              }
              else {
                double v24 = 1.0;
              }
              if (v20 >= 0.0) {
                double v25 = v24;
              }
              else {
                double v25 = 0.0;
              }
              double v26 = 1.0 - (v21 + v23);
              if (v26 <= 1.0) {
                double v27 = 1.0 - (v21 + v23);
              }
              else {
                double v27 = 1.0;
              }
              if (v26 >= 0.0) {
                double v28 = v27;
              }
              else {
                double v28 = 0.0;
              }
              double v29 = 1.0 - v25;
              if (1.0 - v25 >= v22) {
                double v29 = v22;
              }
              if (v22 >= 0.0) {
                double v30 = v29;
              }
              else {
                double v30 = 0.0;
              }
              double v31 = 1.0 - v28;
              if (1.0 - v28 >= v23) {
                double v31 = v23;
              }
              if (v23 >= 0.0) {
                double v32 = v31;
              }
              else {
                double v32 = 0.0;
              }
              double v33 = [VGHumanBBox alloc];
              [v19 confidence];
              double v35 = -[VGHumanBBox initWithBBox:confidence:](v33, "initWithBBox:confidence:", v25, v28, v30, v32, v34);
              [v14 addObject:v35];
            }
            uint64_t v16 = [v15 countByEnumeratingWithState:&v42 objects:v49 count:16];
          }
          while (v16);
        }

        *(void *)a2 = v14;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        double v38 = __VGLogSharedInstance();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v52 = v39;
          _os_log_impl(&dword_260C8D000, v38, OS_LOG_TYPE_ERROR, " Failed to process human bbox request %@ ", buf, 0xCu);
        }

        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 8) = 0;
      }
      id v10 = v39;
    }
    else
    {
      double v37 = __VGLogSharedInstance();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v52 = v10;
        _os_log_impl(&dword_260C8D000, v37, OS_LOG_TYPE_ERROR, " Error setting revision for detect human rectangles model %@ ", buf, 0xCu);
      }

      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
    }

    v40[2](v40);
  }
  else
  {
    double v36 = __VGLogSharedInstance();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v36, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
    }

    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke();
}

void sub_260CF4320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void (**a11)(void), void *a12)
{
  a11[2]();
  ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke()
{
  os_log_t v0 = VGLogVGSharedVision();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNGetHumanBBox", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZN2vg6shared16VNGetHumanBBoxesERKNS0_16VNHumanBBoxInputE_block_invoke_56(uint64_t a1)
{
}

void ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = VGLogVGSharedVision();
  if (os_signpost_enabled(v2))
  {
    if (*(unsigned char *)(a1 + 64)) {
      id v3 = @"true";
    }
    else {
      id v3 = @"false";
    }
    int v4 = 138543362;
    id v5 = v3;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetVNFaceObservations", "withFaceBounds: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void ___ZN2vg6sharedL21getVNFaceObservationsEP21VNImageRequestHandlerNSt3__18optionalI6CGRectEE_block_invoke_59()
{
  os_log_t v0 = VGLogVGSharedVision();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "VNDetectFaceRectangles_PerformRequest", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZL19VGLogVGSharedVisionv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGSharedVision");
  uint64_t v1 = (void *)VGLogVGSharedVision(void)::handle;
  VGLogVGSharedVision(void)::handle = (uint64_t)v0;
}

void sub_260CF4640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2vg6sharedL26createFaceLandmarksRequestEP17VNFaceObservation_block_invoke()
{
  os_log_t v0 = VGLogVGSharedVision();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateFaceLandmarksRequest", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void std::__optional_storage_base<VNDetectFaceLandmarksRequest * {__strong},false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<VNDetectFaceLandmarksRequest * {__strong},false>>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0;
      id v4 = *(id *)a1;
      *(void *)a1 = v3;
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {

    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

void ___ZN2vg6sharedL27createFaceAttributesRequestEP17VNFaceObservation_block_invoke()
{
  os_log_t v0 = VGLogVGSharedVision();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateFaceAttributesRequest", (const char *)&unk_260D385D9, v1, 2u);
  }
}

uint64_t std::__optional_destruct_base<vg::shared::VNFaceOutput,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
  }
  return a1;
}

void sub_260CF4A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id humanAttributesMap(void)
{
  v5[4] = *MEMORY[0x263EF8340];
  {
    uint64_t v2 = *MEMORY[0x263F1F260];
    v4[0] = *MEMORY[0x263F1F268];
    v4[1] = v2;
    v5[0] = @"hair";
    v5[1] = @"facial_hair";
    uint64_t v3 = *MEMORY[0x263F1F270];
    void v4[2] = *MEMORY[0x263F1F278];
    void v4[3] = v3;
    v5[2] = @"teeth";
    uint64_t v5[3] = @"skin";
    humanAttributesMap(void)::kHumanAttributesMap = [NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:4];
  }
  os_log_t v0 = (void *)humanAttributesMap(void)::kHumanAttributesMap;

  return v0;
}

void sub_260CF4BE4(_Unwind_Exception *a1)
{
}

id personInstancesMapNames(void)
{
  {
    personInstancesMapNames(void)::kPersonInstancesMapNames = objc_msgSend(objc_alloc(MEMORY[0x263EFF8C0]), "initWithObjects:", @"person_instances_1", @"person_instances_2", @"person_instances_3", @"person_instances_4", 0);
  }
  os_log_t v0 = (void *)personInstancesMapNames(void)::kPersonInstancesMapNames;

  return v0;
}

void sub_260CF4CA4(_Unwind_Exception *a1)
{
}

void sub_260CF4FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CF50C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CF56C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_260CF5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id vg::VertexAttributeBuffer::makeIOSurfaceProperties(vg::VertexAttributeBuffer *this, MTLVertexFormat a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 1278226534;
    uint64_t v4 = 1;
    uint64_t v5 = 4;
    switch((unint64_t)this)
    {
      case 3uLL:
      case 6uLL:
        uint64_t v3 = 1278226488;
        uint64_t v4 = 4;
        uint64_t v5 = 1;
        goto LABEL_18;
      case 4uLL:
      case 5uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x20uLL:
      case 0x21uLL:
      case 0x22uLL:
      case 0x23uLL:
        goto LABEL_20;
      case 0x10uLL:
      case 0x19uLL:
        uint64_t v3 = 1278226742;
        uint64_t v5 = 2;
        uint64_t v4 = 2;
        goto LABEL_18;
      case 0x11uLL:
      case 0x1AuLL:
        uint64_t v3 = 1278226742;
        uint64_t v4 = 3;
        goto LABEL_13;
      case 0x12uLL:
      case 0x1BuLL:
        uint64_t v3 = 1278226742;
        uint64_t v4 = 4;
        goto LABEL_13;
      case 0x1CuLL:
      case 0x24uLL:
        goto LABEL_18;
      case 0x1DuLL:
      case 0x25uLL:
        uint64_t v4 = 2;
        goto LABEL_16;
      case 0x1EuLL:
      case 0x26uLL:
        uint64_t v4 = 3;
LABEL_16:
        uint64_t v5 = 4;
        goto LABEL_18;
      case 0x1FuLL:
      case 0x27uLL:
        uint64_t v5 = 4;
        uint64_t v4 = 4;
        goto LABEL_18;
      default:
        if (this != (vg::VertexAttributeBuffer *)50 && this != (vg::VertexAttributeBuffer *)53) {
          goto LABEL_20;
        }
        uint64_t v3 = 1278226742;
        uint64_t v4 = 1;
LABEL_13:
        uint64_t v5 = 2;
LABEL_18:
        v13[0] = *MEMORY[0x263F0ECF8];
        uint64_t v6 = [NSNumber numberWithUnsignedLong:v4 * a2];
        uint64_t v7 = *MEMORY[0x263F0ECC0];
        v14[0] = v6;
        v14[1] = &unk_270CFDD20;
        uint64_t v8 = *MEMORY[0x263F0ECC8];
        v13[1] = v7;
        v13[2] = v8;
        char v9 = [NSNumber numberWithUnsignedInt:v3];
        void v14[2] = v9;
        unsigned char v13[3] = *MEMORY[0x263F0ECA0];
        id v10 = [NSNumber numberWithUnsignedLong:v5];
        unsigned char v14[3] = v10;
        uint64_t v2 = [NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:4];

        break;
    }
  }
  else
  {
    uint64_t v6 = __VGLogSharedInstance();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v12 = 0;
      _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_ERROR, " Num elements must be > 0 ", v12, 2u);
    }
    uint64_t v2 = 0;
  }

LABEL_20:

  return v2;
}

void sub_260CF5D08(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t vg::VertexAttributeBuffer::checkCreateInfo(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 4;
    switch(*a1)
    {
      case 0:
        uint64_t v5 = __VGLogSharedInstance();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          goto LABEL_18;
        }
        LOWORD(v14) = 0;
        uint64_t v6 = " Vertex format must be valid ";
        goto LABEL_6;
      case 1:
      case 2:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 32:
      case 33:
      case 34:
      case 35:
        goto LABEL_20;
      case 3:
      case 6:
      case 16:
      case 25:
      case 28:
      case 36:
        goto LABEL_13;
      case 17:
      case 26:
        uint64_t v4 = 6;
        goto LABEL_13;
      case 18:
      case 27:
      case 29:
      case 37:
        uint64_t v4 = 8;
        goto LABEL_13;
      case 30:
      case 38:
        uint64_t v4 = 12;
        goto LABEL_13;
      case 31:
      case 39:
        uint64_t v4 = 16;
        goto LABEL_13;
      default:
        if (v3 == 50 || v3 == 53)
        {
          uint64_t v4 = 2;
LABEL_13:
          char v9 = (void *)a1[2];
          if (!v9) {
            return 1;
          }
          uint64_t v10 = v4 * v1;
          if ([v9 allocationSize] >= (unint64_t)(v4 * v1)) {
            return 1;
          }
          uint64_t v5 = __VGLogSharedInstance();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          uint64_t v11 = [(id)a1[2] allocationSize];
          int v14 = 134218240;
          uint64_t v15 = v10;
          __int16 v16 = 2048;
          uint64_t v17 = v11;
          uint64_t v6 = " IOSurface allocation size must be >= %zu bytes [%zu] ";
          uint64_t v7 = v5;
          uint32_t v8 = 22;
        }
        else
        {
LABEL_20:
          uint64_t v5 = __VGLogSharedInstance();
          if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            goto LABEL_18;
          }
          uint64_t v13 = *a1;
          int v14 = 67109120;
          LODWORD(v15) = v13;
          uint64_t v6 = " Unsupported vertex format %d ";
          uint64_t v7 = v5;
          uint32_t v8 = 8;
        }
        break;
    }
    goto LABEL_17;
  }
  uint64_t v5 = __VGLogSharedInstance();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v14) = 0;
    uint64_t v6 = " Num elements must be > 0 ";
LABEL_6:
    uint64_t v7 = v5;
    uint32_t v8 = 2;
LABEL_17:
    _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v14, v8);
  }
LABEL_18:

  return 0;
}

void sub_260CF5FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::VertexAttributeBuffer::create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((vg::VertexAttributeBuffer::checkCreateInfo((uint64_t *)a1) & 1) == 0)
  {
LABEL_10:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  uint64_t v4 = (IOSurface *)*(id *)(a1 + 16);
  if (!v4)
  {
    id v5 = objc_alloc(MEMORY[0x263F0ED00]);
    uint64_t v6 = vg::VertexAttributeBuffer::makeIOSurfaceProperties(*(vg::VertexAttributeBuffer **)a1, *(MTLVertexFormat *)(a1 + 8));
    uint64_t v4 = (IOSurface *)[v5 initWithProperties:v6];

    if (!v4)
    {
      uint64_t v10 = __VGLogSharedInstance();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Failed to create IOSurface ", (uint8_t *)v12, 2u);
      }

      goto LABEL_10;
    }
  }
  if (*(void *)(a1 + 24))
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = 4;
    switch(*(void *)a1)
    {
      case 3:
      case 6:
      case 0x10:
      case 0x19:
      case 0x1CLL:
      case 0x24:
        break;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xALL:
      case 0xBLL:
      case 0xCLL:
      case 0xDLL:
      case 0xELL:
      case 0xFLL:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_17;
      case 0x11:
      case 0x1ALL:
        uint64_t v9 = 6;
        break;
      case 0x12:
      case 0x1BLL:
      case 0x1DLL:
      case 0x25:
        uint64_t v9 = 8;
        break;
      case 0x1ELL:
      case 0x26:
        uint64_t v9 = 12;
        break;
      case 0x1FLL:
      case 0x27:
        uint64_t v9 = 16;
        break;
      default:
        if (v7 == 50 || v7 == 53) {
          uint64_t v9 = 2;
        }
        else {
LABEL_17:
        }
          uint64_t v9 = 0;
        break;
    }
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v12, v4, 0);
    memcpy(v12[2], *(const void **)(a1 + 24), v9 * v8);
    vg::IOSurfaceData::~IOSurfaceData(v12);
  }
  uint64_t v11 = v4;
  *(void *)a2 = v11;
  *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  *(unsigned char *)(a2 + 24) = 1;
}

void sub_260CF6234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::VertexAttributeBuffer::iosurfaceProperties(id *this)
{
  v9[4] = *MEMORY[0x263EF8340];
  v8[0] = *MEMORY[0x263F0ECF8];
  uint64_t v2 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*this, "width"));
  v9[0] = v2;
  v8[1] = *MEMORY[0x263F0ECC0];
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*this, "height"));
  v9[1] = v3;
  v8[2] = *MEMORY[0x263F0ECC8];
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(*this, "pixelFormat"));
  void v9[2] = v4;
  v8[3] = *MEMORY[0x263F0ECA0];
  id v5 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*this, "bytesPerElement"));
  v9[3] = v5;
  uint64_t v6 = [NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:4];

  return v6;
}

void sub_260CF6460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::VertexAttributeBuffer::bytesPerElement(vg::VertexAttributeBuffer *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t result = 4;
  switch(v1)
  {
    case 3:
    case 6:
    case 16:
    case 25:
    case 28:
    case 36:
      return result;
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 32:
    case 33:
    case 34:
    case 35:
      goto LABEL_9;
    case 17:
    case 26:
      uint64_t result = 6;
      break;
    case 18:
    case 27:
    case 29:
    case 37:
      uint64_t result = 8;
      break;
    case 30:
    case 38:
      uint64_t result = 12;
      break;
    case 31:
    case 39:
      uint64_t result = 16;
      break;
    default:
      if (v1 == 50 || v1 == 53) {
        uint64_t result = 2;
      }
      else {
LABEL_9:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t vg::VertexAttributeBuffer::numBytes(vg::VertexAttributeBuffer *this)
{
  uint64_t v1 = 4;
  switch(*((void *)this + 2))
  {
    case 3:
    case 6:
    case 0x10:
    case 0x19:
    case 0x1CLL:
    case 0x24:
      return v1 * *((void *)this + 1);
    case 0x11:
    case 0x1ALL:
      uint64_t v1 = 6;
      break;
    case 0x12:
    case 0x1BLL:
    case 0x1DLL:
    case 0x25:
      uint64_t v1 = 8;
      break;
    case 0x1ELL:
    case 0x26:
      uint64_t v1 = 12;
      break;
    case 0x1FLL:
    case 0x27:
      uint64_t v1 = 16;
      break;
    default:
      uint64_t v1 = 0;
      break;
  }
  return v1 * *((void *)this + 1);
}

id vg::VertexAttributeBuffer::makeDumpObject(vg::VertexAttributeBuffer *this)
{
  uint64_t v2 = objc_opt_new();
  [v2 setVertexFormat:*((void *)this + 2)];
  [v2 setElementCount:*((void *)this + 1)];
  [v2 setIosurface:*(void *)this];

  return v2;
}

void sub_260CF6718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CF68A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CF69E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CF6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_260CF6C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createARGBFromYCbCr(vg *this, __CVBuffer *a2)
{
  return createColorFromYCbCr(this, 1);
}

CVPixelBufferRef createColorFromYCbCr(__CVBuffer *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  v32[0] = MEMORY[0x263EF8330];
  v32[1] = 3221225472;
  v32[2] = ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke;
  v32[3] = &__block_descriptor_40_e5_v8__0l;
  v32[4] = a1;
  uint64_t v4 = (void (**)(void))MEMORY[0x261227FC0](v32);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  vImagePixelCount WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  srcYp.data = BaseAddressOfPlane;
  srcYp.height = CVPixelBufferGetHeightOfPlane(a1, 0);
  srcYp.width = WidthOfPlane;
  srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v7 = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  vImagePixelCount v8 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  srcCbCr.data = v7;
  srcCbCr.height = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  srcCbCr.width = v8;
  srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  uint64_t v9 = malloc_type_malloc(4 * WidthOfPlane * srcYp.height, 0x84D09452uLL);
  dest.data = v9;
  dest.height = srcYp.height;
  dest.width = WidthOfPlane;
  dest.rowBytes = 4 * WidthOfPlane;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v11.i32[0] = 875704422;
  v12.i32[0] = PixelFormatType;
  int8x8_t v13 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v12, v11), 0), (int8x8_t)0x1000000FFLL, (int8x8_t)0x10000000EBLL);
  if (PixelFormatType == 875704422) {
    int32_t v14 = 255;
  }
  else {
    int32_t v14 = 240;
  }
  pixelRange.Yp_bias = 16 * (PixelFormatType != 875704422);
  pixelRange.CbCr_bias = 128;
  pixelRange.YpRangeMadouble x = v13.i32[0];
  pixelRange.CbCrRangeMadouble x = v14;
  *(int8x8_t *)&pixelRange.YpMadouble x = v13;
  pixelRange.CbCrMadouble x = v14;
  pixelRange.CbCrMin = pixelRange.Yp_bias;
  if (vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x263EFAA38], &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
  {
    data = v9;
LABEL_11:
    free(data);
    IOSurfaceBackedPixelBufferCopdouble y = 0;
    goto LABEL_12;
  }
  int v27 = 50462976;
  int v26 = 66051;
  if (a2) {
    __int16 v16 = &v27;
  }
  else {
    __int16 v16 = &v26;
  }
  if (vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, &outInfo, (const uint8_t *)v16, 0xFFu, 0x100u))
  {
    data = dest.data;
    goto LABEL_11;
  }
  double v25 = 0;
  uint64_t v19 = *MEMORY[0x263F04158];
  v33[0] = *MEMORY[0x263F040A0];
  v33[1] = v19;
  v34[0] = MEMORY[0x263EFFA88];
  v34[1] = MEMORY[0x263EFFA88];
  v33[2] = *MEMORY[0x263F04090];
  v34[2] = MEMORY[0x263EFFA88];
  CFDictionaryRef pixelBufferAttributes = [NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:3];
  if (a2) {
    OSType v21 = 32;
  }
  else {
    OSType v21 = 1111970369;
  }
  if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], dest.width, dest.height, v21, dest.data, dest.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, dest.data, pixelBufferAttributes, &v25))
  {
    IOSurfaceBackedPixelBufferCopdouble y = 0;
  }
  else
  {
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 3221225472;
    v24[2] = ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke_2;
    v24[3] = &__block_descriptor_40_e5_v8__0l;
    void v24[4] = v25;
    double v22 = (void (**)(void))MEMORY[0x261227FC0](v24);
    IOSurfaceBackedPixelBufferCopdouble y = vg::createIOSurfaceBackedPixelBufferCopy(v25, v23);
    v22[2](v22);
  }
LABEL_12:
  v4[2](v4);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_260CF7094(_Unwind_Exception *a1)
{
  v1[2](v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createBGRAFromYCbCr(vg *this, __CVBuffer *a2)
{
  return createColorFromYCbCr(this, 0);
}

BOOL vg::fillBGRAFromYCbCr(vg *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  void v22[2] = ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke;
  v22[3] = &__block_descriptor_40_e5_v8__0l;
  v22[4] = this;
  id v5 = (void (**)(void))MEMORY[0x261227FC0](v22);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, 0);
  vImagePixelCount WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, 0);
  srcYp.data = BaseAddressOfPlane;
  srcYp.height = CVPixelBufferGetHeightOfPlane(this, 0);
  srcYp.width = WidthOfPlane;
  srcYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(this, 0);
  vImagePixelCount v8 = CVPixelBufferGetBaseAddressOfPlane(this, 1uLL);
  vImagePixelCount v9 = CVPixelBufferGetWidthOfPlane(this, 1uLL);
  srcCbCr.data = v8;
  srcCbCr.height = CVPixelBufferGetHeightOfPlane(this, 1uLL);
  srcCbCr.width = v9;
  srcCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(this, 1uLL);
  vImage_YpCbCrPixelRange pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_260D23F48;
  if (vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x263EFAA38], &pixelRange, &outInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0))
  {
    BOOL v10 = 0;
  }
  else
  {
    CVPixelBufferLockBaseAddress(a2, 0);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke_2;
    v18[3] = &__block_descriptor_40_e5_v8__0l;
    v18[4] = a2;
    int32x2_t v11 = (void (**)(void))MEMORY[0x261227FC0](v18);
    memset(&dest, 0, sizeof(dest));
    MakeVImageBuffer(a2, (uint64_t)&dest);
    *(_DWORD *)permuteMap = 66051;
    if (vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, &outInfo, permuteMap, 0xFFu, 0x100u))
    {
      BOOL v10 = 0;
    }
    else
    {
      CVPixelBufferRef v15 = 0;
      uint64_t v12 = *MEMORY[0x263F04158];
      v23[0] = *MEMORY[0x263F040A0];
      v23[1] = v12;
      v24[0] = MEMORY[0x263EFFA88];
      v24[1] = MEMORY[0x263EFFA88];
      v23[2] = *MEMORY[0x263F04090];
      v24[2] = MEMORY[0x263EFFA88];
      CFDictionaryRef pixelBufferAttributes = [NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:3];
      BOOL v10 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], dest.width, dest.height, 0x42475241u, dest.data, dest.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, dest.data, pixelBufferAttributes, &v15) == 0;
    }
    v11[2](v11);
  }
  v5[2](v5);

  return v10;
}

void sub_260CF744C(_Unwind_Exception *a1)
{
  v2[2](v2);
  v1[2](v1);

  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___ZN2vg17fillBGRAFromYCbCrEP10__CVBufferS1__block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

void MakeVImageBuffer(__CVBuffer *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  *(void *)a2 = BaseAddress;
  *(void *)(a2 + 8) = CVPixelBufferGetHeight(a1);
  *(void *)(a2 + 16) = CVPixelBufferGetWidth(a1);
  *(void *)(a2 + 24) = CVPixelBufferGetBytesPerRow(a1);
  if (!BaseAddress)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    id v5 = __VGLogSharedInstance();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_260C8D000, v5, OS_LOG_TYPE_DEBUG, " vImageBuffer returned null data pointer - make sure you lock the CVPixelBuffer before use ", v6, 2u);
    }
  }
}

void PixelBufferReleaseBytesCallback(void *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

CVPixelBufferRef vg::createYCbCrFromARGB(vg *this, __CVBuffer *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  void v18[2] = ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke;
  v18[3] = &__block_descriptor_40_e5_v8__0l;
  v18[4] = this;
  uint64_t v3 = (void (**)(void))MEMORY[0x261227FC0](v18);
  memset(&src, 0, sizeof(src));
  MakeVImageBuffer(this, (uint64_t)&src);
  vImagePixelCount height = src.height;
  vImagePixelCount width = src.width;
  destYp.vImagePixelCount height = src.height;
  destYp.vImagePixelCount width = src.width;
  destYp.rowBytes = src.width;
  destCbCr.vImagePixelCount height = src.height >> 1;
  destCbCr.vImagePixelCount width = src.width >> 1;
  destCbCr.rowBytes = src.width;
  size_t v6 = src.width * (src.height + (src.height >> 1));
  uint64_t v7 = (char *)malloc_type_malloc(v6, 0xE06E199AuLL);
  destYp.data = v7;
  destCbCr.data = &v7[height * width];
  vImage_YpCbCrPixelRange pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_260D23F68;
  vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x263EFAA20], &pixelRange, &outInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, &outInfo, 0, 0);
  planeBaseAddress[0] = destYp.data;
  planeBaseAddress[1] = destCbCr.data;
  planeWidth[0] = destYp.width;
  planeWidth[1] = destCbCr.width;
  v20[0] = destYp.height;
  v20[1] = destCbCr.height;
  planeBytesPerRow[0] = destYp.rowBytes;
  planeBytesPerRow[1] = destCbCr.rowBytes;
  int8x8_t v13 = 0;
  if (CVPixelBufferCreateWithPlanarBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], src.width, src.height, 0x34323066u, 0, v6, 2uLL, planeBaseAddress, planeWidth, v20, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)PixelBufferReleasePlanarBytesCallback, v7, 0, &v13))
  {
    free(v7);
    IOSurfaceBackedPixelBufferCopdouble y = 0;
  }
  else
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    unint64_t v12[2] = ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke_2;
    void v12[3] = &__block_descriptor_40_e5_v8__0l;
    v12[4] = v13;
    vImagePixelCount v9 = (void (**)(void))MEMORY[0x261227FC0](v12);
    IOSurfaceBackedPixelBufferCopdouble y = vg::createIOSurfaceBackedPixelBufferCopy(v13, v10);
    v9[2](v9);
  }
  v3[2](v3);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_260CF7850(_Unwind_Exception *a1)
{
  v1[2](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZN2vg19createYCbCrFromARGBEP10__CVBuffer_block_invoke_2(uint64_t a1)
{
}

CVPixelBufferRef vg::createIOSurfaceBackedPixelBufferCopy(vg *this, __CVBuffer *a2)
{
  v20[1] = *MEMORY[0x263EF8340];
  uint64_t v19 = *MEMORY[0x263F04130];
  v20[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v3 = [NSDictionary dictionaryWithObjects:v20 forKeys:&v19 count:1];
  CVPixelBufferRef pixelBuffer = 0;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], Width, Height, PixelFormatType, v3, &pixelBuffer))
  {
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    if (CVPixelBufferGetPlaneCount(this))
    {
      size_t PlaneCount = CVPixelBufferGetPlaneCount(this);
      if (!PlaneCount)
      {
LABEL_14:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVBufferPropagateAttachments(this, pixelBuffer);
        CVPixelBufferRef v7 = pixelBuffer;
        goto LABEL_15;
      }
    }
    else
    {
      size_t PlaneCount = 1;
    }
    for (size_t i = 0; i != PlaneCount; ++i)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(this, i);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, i);
      uint64_t v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
      size_t v13 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
      size_t v14 = v13;
      if (BytesPerRowOfPlane >= v13) {
        size_t v15 = v13;
      }
      else {
        size_t v15 = BytesPerRowOfPlane;
      }
      int64_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, i);
      if (HeightOfPlane >= 1)
      {
        do
        {
          memcpy(v12, BaseAddressOfPlane, v15);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v12 += v14;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
    }
    goto LABEL_14;
  }
  CVPixelBufferRef v7 = 0;
LABEL_15:

  return v7;
}

void sub_260CF7AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createARGBFromBGRA(vg *this, __CVBuffer *a2)
{
  void v17[3] = *MEMORY[0x263EF8340];
  CVPixelBufferLockBaseAddress(this, 1uLL);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = this;
  CFDictionaryRef v3 = (void (**)(void))MEMORY[0x261227FC0](v15);
  memset(&src, 0, sizeof(src));
  MakeVImageBuffer(this, (uint64_t)&src);
  if (MEMORY[0x2612282C0](&dest, src.height, src.width, 32, 0)
    || (*(_DWORD *)permuteMap = 66051, vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0)))
  {
    IOSurfaceBackedPixelBufferCopdouble y = 0;
  }
  else
  {
    int32x2_t v11 = 0;
    uint64_t v6 = *MEMORY[0x263F04158];
    v16[0] = *MEMORY[0x263F040A0];
    v16[1] = v6;
    v17[0] = MEMORY[0x263EFFA88];
    v17[1] = MEMORY[0x263EFFA88];
    void v16[2] = *MEMORY[0x263F04090];
    v17[2] = MEMORY[0x263EFFA88];
    CFDictionaryRef pixelBufferAttributes = [NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:3];
    if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], dest.width, dest.height, 0x20u, dest.data, dest.rowBytes, (CVPixelBufferReleaseBytesCallback)PixelBufferReleaseBytesCallback, 0, pixelBufferAttributes, &v11))
    {
      IOSurfaceBackedPixelBufferCopdouble y = 0;
    }
    else
    {
      v10[0] = MEMORY[0x263EF8330];
      v10[1] = 3221225472;
      id v10[2] = ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke_2;
      void v10[3] = &__block_descriptor_40_e5_v8__0l;
      v10[4] = v11;
      vImagePixelCount v8 = (void (**)(void))MEMORY[0x261227FC0](v10);
      IOSurfaceBackedPixelBufferCopdouble y = vg::createIOSurfaceBackedPixelBufferCopy(v11, v9);
      v8[2](v8);
    }
  }
  v3[2](v3);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_260CF7D50(_Unwind_Exception *a1)
{
  v1[2](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZN2vg18createARGBFromBGRAEP10__CVBuffer_block_invoke_2(uint64_t a1)
{
}

CVPixelBufferPoolRef vg::createPixelBufferPool(vg *this, uint64_t a2)
{
  uint64_t v4 = VGLogImageUtilities();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferPool", (const char *)&unk_260D385D9, buf, 2u);
  }

  vg::createAttributeDictionary(this, a2);
  CFDictionaryRef v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferPoolRef poolOut = 0;
  CVReturn v6 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v5, &poolOut);
  CVPixelBufferPoolRef v7 = poolOut;
  if (v6)
  {
    CVPixelBufferPoolRelease(poolOut);
    CVPixelBufferPoolRef v7 = 0;
  }

  ___ZN2vg21createPixelBufferPoolEmmj_block_invoke();
  return v7;
}

void sub_260CF7EC4(_Unwind_Exception *a1)
{
}

id VGLogImageUtilities(void)
{
  if (VGLogImageUtilities(void)::onceToken != -1) {
    dispatch_once(&VGLogImageUtilities(void)::onceToken, &__block_literal_global_30);
  }
  os_log_t v0 = (void *)VGLogImageUtilities(void)::handle;

  return v0;
}

void ___ZN2vg21createPixelBufferPoolEmmj_block_invoke()
{
  os_log_t v0 = VGLogImageUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferPool", (const char *)&unk_260D385D9, v1, 2u);
  }
}

id vg::createAttributeDictionary(vg *this, uint64_t a2)
{
  unsigned char v14[6] = *MEMORY[0x263EF8340];
  v13[0] = *MEMORY[0x263F04180];
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithUnsignedInt:");
  uint64_t v5 = *MEMORY[0x263F04130];
  v14[0] = v4;
  v14[1] = MEMORY[0x263EFFA78];
  uint64_t v6 = *MEMORY[0x263F04240];
  v13[1] = v5;
  v13[2] = v6;
  CVPixelBufferPoolRef v7 = [NSNumber numberWithUnsignedLong:this];
  void v14[2] = v7;
  unsigned char v13[3] = *MEMORY[0x263F04118];
  vImagePixelCount v8 = [NSNumber numberWithUnsignedLong:a2];
  uint64_t v9 = *MEMORY[0x263F04198];
  unsigned char v14[3] = v8;
  v14[4] = &unk_270CFDD38;
  uint64_t v10 = *MEMORY[0x263F04078];
  void v13[4] = v9;
  v13[5] = v10;
  void v14[5] = &unk_270CFDD50;
  int32x2_t v11 = [NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:6];

  return v11;
}

void sub_260CF8108(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

CVPixelBufferRef vg::createPixelBufferFromPool(vg *this, uint64_t a2, unint64_t a3, __CVPixelBufferPool **a4, __CVPixelBufferPool **a5)
{
  vImagePixelCount v8 = VGLogImageUtilities();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferFromPool", (const char *)&unk_260D385D9, buf, 2u);
  }

  PixelBufferPool = *a4;
  if (!*a4)
  {
    PixelBufferPool = vg::createPixelBufferPool(this, a2);
    *a4 = PixelBufferPool;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CVReturn v10 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x263EFFB08], PixelBufferPool, &pixelBufferOut);
  CVPixelBufferRef v11 = pixelBufferOut;
  if (v10)
  {
    CVPixelBufferRelease(pixelBufferOut);
    CVPixelBufferRef v11 = 0;
  }
  ___ZN2vg25createPixelBufferFromPoolEmmjPP19__CVPixelBufferPool_block_invoke();
  return v11;
}

void sub_260CF8228(_Unwind_Exception *a1)
{
}

void ___ZN2vg25createPixelBufferFromPoolEmmjPP19__CVPixelBufferPool_block_invoke()
{
  os_log_t v0 = VGLogImageUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreatePixelBufferFromPool", (const char *)&unk_260D385D9, v1, 2u);
  }
}

id vg::IOSurfaceARGB8888FromPlanarF(vg *this, const vImage_Buffer *a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  v21[0] = *MEMORY[0x263F0ECF8];
  uint64_t v4 = [NSNumber numberWithUnsignedLong:*((void *)this + 2)];
  v22[0] = v4;
  v21[1] = *MEMORY[0x263F0ECC0];
  uint64_t v5 = [NSNumber numberWithUnsignedLong:*((void *)this + 1)];
  uint64_t v6 = *MEMORY[0x263F0ECA0];
  v22[1] = v5;
  void v22[2] = &unk_270CFDD68;
  uint64_t v7 = *MEMORY[0x263F0ECC8];
  void v21[2] = v6;
  v21[3] = v7;
  vImagePixelCount v8 = [NSNumber numberWithUnsignedInt:a2];
  v22[3] = v8;
  uint64_t v9 = [NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:4];

  CVReturn v10 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v9];
  [v10 lockWithOptions:0 seed:0];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = ___ZN2vg28IOSurfaceARGB8888FromPlanarFEPK13vImage_Bufferj_block_invoke;
  uint64_t v19[3] = &unk_265570218;
  id v11 = v10;
  id v20 = v11;
  uint64_t v12 = (void (**)(void))MEMORY[0x261227FC0](v19);
  memset(&dest, 0, sizeof(dest));
  if (v11)
  {
    objc_msgSend(v11, "vg_vImageBuffer");
    vImagePixelCount v13 = 4 * dest.width;
  }
  else
  {
    vImagePixelCount v13 = 0;
  }
  dest.vImagePixelCount width = v13;
  long long v14 = *((_OWORD *)this + 1);
  *(_OWORD *)&v17.data = *(_OWORD *)this;
  v17.rowBytes = *((void *)&v14 + 1);
  v17.vImagePixelCount width = 4 * v14;
  if (vImageConvert_PlanarFtoPlanar8(&v17, &dest, 255.0, 0.0, 0x100u)) {
    id v15 = 0;
  }
  else {
    id v15 = v11;
  }
  v12[2](v12);

  return v15;
}

void sub_260CF8500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  v23[2](v23);

  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg28IOSurfaceARGB8888FromPlanarFEPK13vImage_Bufferj_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

BOOL vg::rotatePixelBufferVImage(vg *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint8_t v3 = a3;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = VGLogImageUtilities();
  if (os_signpost_enabled(v6))
  {
    LOWORD(buf.data) = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "RotatePixelBufferVImage", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
  }

  OSType PixelFormatType = (vg *)CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  memset(&buf, 0, sizeof(buf));
  MakeVImageBuffer(this, (uint64_t)&buf);
  memset(&v18, 0, sizeof(v18));
  MakeVImageBuffer(a2, (uint64_t)&v18);
  if ((v3 & 0xFD) == 1)
  {
    if (buf.width != v18.height) {
      goto LABEL_14;
    }
    vImagePixelCount height = buf.height;
    vImagePixelCount width = v18.width;
  }
  else
  {
    if (buf.width != v18.width) {
      goto LABEL_14;
    }
    vImagePixelCount height = buf.height;
    vImagePixelCount width = v18.height;
  }
  if (height == width)
  {
    *(void *)backColor = 0;
    uint64_t v22 = 0;
    if ((int)PixelFormatType <= 1380410944)
    {
      if ((int)PixelFormatType <= 1094862673)
      {
        if (PixelFormatType == 32) {
          goto LABEL_30;
        }
        if (PixelFormatType != 875704422 && PixelFormatType != 875704438) {
          goto LABEL_40;
        }
        MakeVImageBuffer(this, 0, (uint64_t)&v20);
        vImage_Buffer buf = v20;
        MakeVImageBuffer(a2, 0, (uint64_t)&v20);
        vImage_Buffer v18 = v20;
        vImageRotate90_Planar8(&buf, &v18, v3, 0, 0);
        MakeVImageBuffer(this, 1uLL, (uint64_t)&v20);
        vImage_Buffer buf = v20;
        MakeVImageBuffer(a2, 1uLL, (uint64_t)&v20);
        vImage_Buffer v18 = v20;
      }
      else
      {
        if ((int)PixelFormatType <= 1278226535)
        {
          if (PixelFormatType != 1094862674)
          {
            int v10 = 1111970369;
            goto LABEL_29;
          }
LABEL_30:
          vImage_Error v12 = vImageRotate90_ARGB8888(&buf, &v18, v3, backColor, 0);
          goto LABEL_35;
        }
        if (PixelFormatType != 1278226536)
        {
          int v10 = 1380401729;
LABEL_29:
          if (PixelFormatType == v10) {
            goto LABEL_30;
          }
LABEL_40:
          __int16 v16 = __VGLogSharedInstance();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            vImage_Buffer v17 = vg::OSTypeToString(PixelFormatType);
            LODWORD(v20.data) = 138412290;
            *(void **)((char *)&v20.data + 4) = v17;
            _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", (uint8_t *)&v20, 0xCu);
          }
          uint64_t v14 = -21773;
          goto LABEL_36;
        }
      }
LABEL_34:
      vImage_Error v12 = vImageRotate90_Planar16U(&buf, &v18, v3, 0, 0);
      goto LABEL_35;
    }
    if ((int)PixelFormatType <= 1717855599)
    {
      if (PixelFormatType == 1380410945)
      {
        vImage_Error v12 = vImageRotate90_ARGBFFFF(&buf, &v18, v3, (const float *)backColor, 0);
        goto LABEL_35;
      }
      if (PixelFormatType == 1380411457)
      {
        vImage_Error v12 = vImageRotate90_ARGB16U(&buf, &v18, v3, (const uint16_t *)backColor, 0);
        goto LABEL_35;
      }
      int v13 = 1647392359;
    }
    else
    {
      if ((int)PixelFormatType <= 1751410031)
      {
        if (PixelFormatType == 1717855600 || PixelFormatType == 1717856627)
        {
          vImage_Error v12 = vImageRotate90_PlanarF(&buf, &v18, v3, 0.0, 0);
LABEL_35:
          uint64_t v14 = v12;
LABEL_36:
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 0);
          BOOL v11 = v14 == 0;
          goto LABEL_37;
        }
        goto LABEL_40;
      }
      if (PixelFormatType == 1751410032) {
        goto LABEL_34;
      }
      int v13 = 1751411059;
    }
    if (PixelFormatType != v13) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
LABEL_14:
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferUnlockBaseAddress(this, 1uLL);
  BOOL v11 = 0;
LABEL_37:
  ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke();
  return v11;
}

void sub_260CF89C4(_Unwind_Exception *a1)
{
  ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg23rotatePixelBufferVImageEP10__CVBufferS1_h_block_invoke()
{
  os_log_t v0 = VGLogImageUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "RotatePixelBufferVImage", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void MakeVImageBuffer(__CVBuffer *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  *(void *)a3 = BaseAddressOfPlane;
  *(void *)(a3 + 8) = CVPixelBufferGetHeightOfPlane(a1, a2);
  *(void *)(a3 + 16) = CVPixelBufferGetWidthOfPlane(a1, a2);
  *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  if (!BaseAddressOfPlane)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v7 = __VGLogSharedInstance();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImagePixelCount v8 = 0;
      _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_DEBUG, " vImageBuffer returned null data pointer - make sure you lock the CVPixelBuffer before use ", v8, 2u);
    }
  }
}

id vg::OSTypeToString(vg *this)
{
  uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"%c%c%c%c", ((int)this >> 24), ((int)(this << 8) >> 24), ((__int16)this >> 8), (char)this);
  if ([v2 length] == 4)
  {
    id v3 = v2;
  }
  else
  {
    objc_msgSend(NSString, "stringWithFormat:", @"0x%08x", this);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_260CF8BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::createDataFromColorIOSurface(vg *this, IOSurface *a2)
{
  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = [MEMORY[0x263F00650] imageWithIOSurface:this];
  id v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  uint64_t v8 = *MEMORY[0x263F00840];
  v9[0] = MEMORY[0x263EFFA80];
  uint64_t v4 = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F00628]) initWithOptions:v4];
  uint64_t v6 = [v5 PNGRepresentationOfImage:v2 format:*MEMORY[0x263F008B0] colorSpace:v3 options:MEMORY[0x263EFFA78]];
  CGColorSpaceRelease(v3);

  return v6;
}

void sub_260CF8D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::createColorIOSurfaceFromData(vg *this, NSData *a2)
{
  void v28[4] = *MEMORY[0x263EF8340];
  id v3 = this;
  uint64_t v4 = [MEMORY[0x263F00650] imageWithData:v3];
  v27[0] = *MEMORY[0x263F0EF50];
  uint64_t v5 = NSNumber;
  [v4 extent];
  uint64_t v7 = [v5 numberWithDouble:v6];
  v28[0] = v7;
  v27[1] = *MEMORY[0x263F0EDF8];
  uint64_t v8 = NSNumber;
  [v4 extent];
  int v10 = [v8 numberWithDouble:v9];
  uint64_t v11 = *MEMORY[0x263F0ED48];
  v28[1] = v10;
  void v28[2] = &unk_270CFDD68;
  uint64_t v12 = *MEMORY[0x263F0EE48];
  v27[2] = v11;
  void v27[3] = v12;
  int v13 = [NSNumber numberWithUnsignedInt:a2];
  void v28[3] = v13;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:4];

  id v15 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v14];
  CGColorSpaceRef v16 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = ___ZN2vg28createColorIOSurfaceFromDataEP6NSDataj_block_invoke;
  void v24[3] = &__block_descriptor_40_e5_v8__0l;
  void v24[4] = v16;
  vImage_Buffer v17 = (void (**)(void))MEMORY[0x261227FC0](v24);
  uint64_t v25 = *MEMORY[0x263F00840];
  uint64_t v26 = MEMORY[0x263EFFA80];
  vImage_Buffer v18 = [NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  uint64_t v19 = (void *)[objc_alloc(MEMORY[0x263F00628]) initWithOptions:v18];
  [v15 lockWithOptions:0 seed:0];
  [v4 extent];
  double v21 = v20;
  [v4 extent];
  objc_msgSend(v19, "render:toIOSurface:bounds:colorSpace:", v4, v15, v16, 0.0, 0.0, v21);
  [v15 unlockWithOptions:0 seed:0];
  id v22 = v15;

  v17[2](v17);

  return v22;
}

void sub_260CF904C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2vg28createColorIOSurfaceFromDataEP6NSDataj_block_invoke(uint64_t a1)
{
}

id vg::createSurfaceFromSurfaceWithTransform(vg *this, IOSurface *a2, const simd_float3x3 *a3)
{
  v44[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = VGLogImageUtilities();
  if (os_signpost_enabled(v5))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateSurfaceFromSurfaceWithTransform", (const char *)&unk_260D385D9, buf, 2u);
  }

  id v6 = MTLCreateSystemDefaultDevice();
  uint64_t v7 = (void *)MEMORY[0x263F12A50];
  size_t Width = IOSurfaceGetWidth(v4);
  double v9 = [v7 texture2DDescriptorWithPixelFormat:70 width:Width height:IOSurfaceGetHeight(v4) mipmapped:0];
  [v9 setUsage:1];
  uint64_t v36 = (void *)[v6 newTextureWithDescriptor:v9 iosurface:v4 plane:0];
  id v10 = objc_alloc(MEMORY[0x263F0ED00]);
  v43[0] = *MEMORY[0x263F0ECF8];
  uint64_t v11 = objc_msgSend(NSNumber, "numberWithInteger:", -[vg width](v4, "width"));
  v44[0] = v11;
  v43[1] = *MEMORY[0x263F0ECC0];
  uint64_t v12 = objc_msgSend(NSNumber, "numberWithInteger:", -[vg height](v4, "height"));
  uint64_t v13 = *MEMORY[0x263F0ECA0];
  v44[1] = v12;
  void v44[2] = &unk_270CFDD68;
  uint64_t v14 = *MEMORY[0x263F0ECC8];
  v43[2] = v13;
  v43[3] = v14;
  void v44[3] = &unk_270CFDD80;
  id v15 = [NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:4];
  double v37 = (void *)[v10 initWithProperties:v15];

  [v9 setUsage:2];
  CGColorSpaceRef v16 = (vg::shared *)[v6 newTextureWithDescriptor:v9 iosurface:v37 plane:0];
  vImage_Buffer v17 = vg::shared::sharedShaderLibrary(v16);
  vImage_Buffer v18 = v17;
  if (v17)
  {
    uint64_t v19 = [v17 newFunctionWithName:@"transformColor"];
    if (!v19)
    {
      double v20 = __VGLogSharedInstance();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = [@"transformColor" cStringUsingEncoding:1];
        *(_DWORD *)vImage_Buffer buf = 136315138;
        uint64_t v42 = v27;
        _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_ERROR, " Failed to create function '%s'\n ", buf, 0xCu);
      }
      id v26 = 0;
      goto LABEL_28;
    }
    double v20 = objc_opt_new();
    [v20 setComputeFunction:v19];
    id v40 = 0;
    double v35 = (void *)[v6 newComputePipelineStateWithDescriptor:v20 options:0 reflection:0 error:&v40];
    id v33 = v40;
    if (v33 || !v35)
    {
      log = __VGLogSharedInstance();
      if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = [@"transformColor" cStringUsingEncoding:1];
        *(_DWORD *)vImage_Buffer buf = 136315138;
        uint64_t v42 = v28;
        _os_log_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, " Failed to create pipeline state for function '%s'\n ", buf, 0xCu);
      }
      id v26 = 0;
      goto LABEL_27;
    }
    log = [v6 newCommandQueue];
    double v32 = [log commandBuffer];
    double v21 = [v32 computeCommandEncoder];
    id v22 = v21;
    if (v21)
    {
      [v21 setComputePipelineState:v35];
      [v22 setTexture:v36 atIndex:0];
      [v22 setTexture:v16 atIndex:1];
      [v22 setBytes:a2 length:48 atIndex:0];
      unint64_t v23 = [v35 threadExecutionWidth];
      unint64_t v24 = [v35 maxTotalThreadsPerThreadgroup];
      v39[0] = [(vg::shared *)v16 width];
      v39[1] = [(vg::shared *)v16 height];
      v39[2] = 1;
      v38[0] = v23;
      v38[1] = v24 / v23;
      v38[2] = 1;
      [v22 dispatchThreads:v39 threadsPerThreadgroup:v38];
      [v22 endEncoding];
      [v32 commit];
      [v32 waitUntilCompleted];
      if (v37 == (void *)[(vg::shared *)v16 iosurface])
      {
        id v26 = v37;
        goto LABEL_26;
      }
      uint64_t v25 = __VGLogSharedInstance();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_ERROR, " Inverse texture has mismatched iosurface ", buf, 2u);
      }
    }
    else
    {
      double v29 = __VGLogSharedInstance();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = [@"transformColor" cStringUsingEncoding:1];
        *(_DWORD *)vImage_Buffer buf = 136315138;
        uint64_t v42 = v30;
        _os_log_impl(&dword_260C8D000, v29, OS_LOG_TYPE_ERROR, " Failed to create compute command encoder for function '%s'\n ", buf, 0xCu);
      }
    }
    id v26 = 0;
LABEL_26:

LABEL_27:
LABEL_28:

    goto LABEL_29;
  }
  uint64_t v19 = __VGLogSharedInstance();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)vImage_Buffer buf = 138412290;
    uint64_t v42 = 0;
    _os_log_impl(&dword_260C8D000, v19, OS_LOG_TYPE_ERROR, " Failed to create metal library: %@ ", buf, 0xCu);
  }
  id v26 = 0;
LABEL_29:

  ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke();

  return v26;
}

void sub_260CF96F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg37createSurfaceFromSurfaceWithTransformEP9IOSurfaceRK13simd_float3x3_block_invoke()
{
  os_log_t v0 = VGLogImageUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateSurfaceFromSurfaceWithTransform", (const char *)&unk_260D385D9, v1, 2u);
  }
}

BOOL vg::validateAlphaChannelForSurface(vg *this, IOSurface *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  uint64_t v3 = [(vg *)v2 pixelFormat];
  uint64_t v4 = (vg *)v3;
  if ((int)v3 > 1111970368)
  {
    uint64_t v5 = 3;
    if (v3 == 1111970369 || v3 == 1380401729) {
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v13 = __VGLogSharedInstance();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = vg::OSTypeToString(v4);
      *(_DWORD *)vImage_Buffer buf = 138412290;
      vImage_Buffer v18 = v14;
      _os_log_impl(&dword_260C8D000, v13, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", buf, 0xCu);
    }
    BOOL v10 = 0;
    goto LABEL_18;
  }
  if (v3 != 32 && v3 != 1094862674) {
    goto LABEL_15;
  }
  uint64_t v5 = 0;
LABEL_7:
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, (IOSurface *)v2, 1);
  uint64_t v6 = [(vg *)v2 width];
  unint64_t v7 = [(vg *)v2 height];
  if (v7)
  {
    unint64_t v8 = 0;
    double v9 = v19;
    BOOL v10 = 1;
    while (1)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v6;
      if (v6) {
        break;
      }
LABEL_12:
      ++v8;
      double v9 = (int *)((char *)v9 + v20);
      BOOL v10 = v8 < v7;
      if (v8 == v7) {
        goto LABEL_13;
      }
    }
    while (1)
    {
      int v16 = *v11;
      if (*(unsigned char *)((unint64_t)&v16 | v5)) {
        break;
      }
      uint64_t v11 = (int *)((char *)v11 + v21);
      if (!--v12) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_13:
    BOOL v10 = 0;
  }
  vg::IOSurfaceData::~IOSurfaceData((id *)buf);
LABEL_18:

  return v10;
}

void sub_260CF9A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IOSurface *vg::undistortMcamS8Image(vg *this, IOSurface *a2, IOSurface *a3)
{
  v44[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  uint64_t v5 = a2;
  uint64_t v6 = [(IOSurface *)v5 height];
  uint64_t v7 = v6;
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  id v9 = objc_alloc(MEMORY[0x263F0ED00]);
  v43[0] = *MEMORY[0x263F0ECF8];
  BOOL v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v5, "width"));
  unint64_t v11 = v8 >> 1;
  v44[0] = v10;
  v43[1] = *MEMORY[0x263F0ECC0];
  uint64_t v12 = [NSNumber numberWithUnsignedLong:v8 >> 1];
  v44[1] = v12;
  v43[2] = *MEMORY[0x263F0ECC8];
  uint64_t v13 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[vg pixelFormat](v4, "pixelFormat"));
  v43[3] = *MEMORY[0x263F0ECA0];
  void v44[2] = v13;
  void v44[3] = &unk_270CFDD68;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:4];
  id v15 = (IOSurface *)[v9 initWithProperties:v14];

  if ([(IOSurface *)v5 pixelFormat] == 1278226536)
  {
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v39, (IOSurface *)v4, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v35, v5, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v31, v15, 0);
    if ((unint64_t)(v7 + 1) >= 3)
    {
      uint64_t v16 = 0;
      if (v11 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v11;
      }
      do
      {
        for (unint64_t i = 0; i < [(IOSurface *)v5 width]; ++i)
        {
          _H0 = *(_WORD *)(v36 + v37 * v16 + v38 * i);
          __asm { FCVT            S0, H0 }
          int v25 = (int)(float)(_S0 + 0.5);
          LOWORD(_Sstd::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = *(_WORD *)(v36 + v37 * (v16 + v11) + v38 * i);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)(v32 + v33 * v16 + v34 * i) = *(_DWORD *)(v40 + v41 * (int)(float)(_S0 + 0.5) + v42 * v25);
        }
        ++v16;
      }
      while (v16 != v17);
    }
  }
  else
  {
    if ([(IOSurface *)v5 pixelFormat] != 1278226534) {
      goto LABEL_24;
    }
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v39, (IOSurface *)v4, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v35, v5, 1);
    vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v31, v15, 0);
    if ((unint64_t)(v7 + 1) >= 3)
    {
      uint64_t v27 = 0;
      if (v11 <= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v11;
      }
      do
      {
        for (unint64_t j = 0; j < [(IOSurface *)v5 width]; ++j)
          *(_DWORD *)(v32 + v33 * v27 + v34 * j) = *(_DWORD *)(v40
                                                             + v41
                                                             * (int)(float)(*(float *)(v36 + v37 * (v27 + v11) + v38 * j)
                                                                          + 0.5)
                                                             + v42
                                                             * (int)(float)(*(float *)(v36 + v37 * v27 + v38 * j) + 0.5));
        ++v27;
      }
      while (v27 != v28);
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v31);
  vg::IOSurfaceData::~IOSurfaceData(v35);
  vg::IOSurfaceData::~IOSurfaceData(v39);
LABEL_24:

  return v15;
}

void sub_260CF9E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  id v10 = va_arg(va1, id);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

uint64_t ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___ZL20createColorFromYCbCrP10__CVBufferb_block_invoke_2(uint64_t a1)
{
}

void ___ZL19VGLogImageUtilitiesv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "ImageUtilities");
  uint64_t v1 = (void *)VGLogImageUtilities(void)::handle;
  VGLogImageUtilities(void)::handle = (uint64_t)v0;
}

void sub_260CF9F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFA10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFA2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFA3CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFA4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFA6A0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_260CFA8BC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv4_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5];
    id v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    id v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      id v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_260CFAA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFAB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFAD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_260CFADD0()
{
}

void sub_260CFADD8()
{
}

void sub_260CFADE0()
{
}

void sub_260CFADE8()
{
}

void sub_260CFADF0()
{
}

void sub_260CFADF8()
{
}

void sub_260CFAE00()
{
}

void sub_260CFB11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_260CFB1CC()
{
}

void sub_260CFB1D4()
{
}

void sub_260CFB1DC()
{
}

void sub_260CFB1E4()
{
}

void sub_260CFB1EC()
{
}

void sub_260CFB1F4()
{
}

void sub_260CFB1FC()
{
}

void sub_260CFB204()
{
}

void sub_260CFB20C()
{
}

void sub_260CFB214()
{
}

void sub_260CFB21C()
{
}

void sub_260CFB224()
{
}

void sub_260CFB22C()
{
}

void sub_260CFB234()
{
}

void sub_260CFB23C()
{
}

void sub_260CFB37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFB444(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_260CFB534(_Unwind_Exception *a1)
{
  int64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_260CFB7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_260CFB8A8()
{
}

void sub_260CFB8B0()
{
}

void sub_260CFB8B8()
{
}

void sub_260CFB8C0()
{
}

void sub_260CFB8C8()
{
}

void sub_260CFBA68(_Unwind_Exception *a1)
{
  id v10 = v6;

  _Unwind_Resume(a1);
}

void sub_260CFBABC()
{
}

void sub_260CFBAC4()
{
}

void sub_260CFBACC()
{
}

void sub_260CFBAD4()
{
}

void sub_260CFBB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<float,3u,0u>(uint64_t a1)
{
  size_t v2 = (4 * (3 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  uint64_t v3 = memptr;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (3 * v4);
    uint64_t v6 = *(int **)a1;
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *v6++;
      *v3++ = v8;
      v7 -= 4;
    }
    while (v7);
  }
  cva::ItemHandler::createMatrix<float>();
}

void sub_260CFBC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260CFBD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  free(a12);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a15);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<int,3u,0u>(uint64_t a1)
{
  size_t v2 = (4 * (3 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  uint64_t v3 = memptr;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (3 * v4);
    uint64_t v6 = *(int **)a1;
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *v6++;
      *v3++ = v8;
      v7 -= 4;
    }
    while (v7);
  }
  cva::ItemHandler::createMatrix<int>();
}

void sub_260CFBE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260CFBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::createMatrix<float,4u,4u>(uint64_t a1)
{
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x49090899uLL);
  uint64_t v2 = 0;
  uint64_t v3 = (char *)memptr;
  do
  {
    *(_DWORD *)&v3[v2] = *(_DWORD *)(a1 + v2);
    v2 += 4;
  }
  while (v2 != 64);
  cva::ItemHandler::createMatrix<float>();
}

void sub_260CFBFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260CFC088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)va);

  _Unwind_Resume(a1);
}

void sub_260CFC16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void cva::ItemHandler::getMatrix<float,3u,0u>()
{
}

void sub_260CFC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260CFC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  free(a9);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a12);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a14);

  _Unwind_Resume(a1);
}

void cva::ItemHandler::getMatrix<int,3u,0u>()
{
}

void sub_260CFC5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260CFC684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void cva::ItemHandler::getMatrix<float,4u,4u>()
{
}

void sub_260CFC7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a11);

  _Unwind_Resume(a1);
}

void cva::MatrixData<float,0ul,0ul,false>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      size_t v4 = (4 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
      *(void *)a1 = memptr;
    }
  }
  else
  {
    free(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_260CFC954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFC9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFCF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFD138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFD624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_260CFD768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VGMLEspressoModel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_260CFD88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFD8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFD928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFD978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFD9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFDAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFDCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFDE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFDEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFDFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFE0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFE208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260CFE390(_Unwind_Exception *a1)
{
  size_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_260CFE4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFE60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFE90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void vg::common::transformPoints(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  size_t v7 = (16 * v6 + 31) & 0x7FFFFFFE0;
  v36[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x49090899uLL);
  int v8 = memptr[0];
  v36[0] = memptr[0];
  unsigned int v37 = v6;
  if (4 * v6) {
    memset_pattern16(memptr[0], &unk_260D23F90, 16 * v6);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  BOOL v10 = v9 == 0;
  if (v9) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = &v8[4 * v9];
  if (v10) {
    uint64_t v12 = 0;
  }
  if (v11 != v12)
  {
    int v13 = 0;
    uint64_t v14 = *(int **)a2;
    do
    {
      int v15 = *v14++;
      _DWORD *v11 = v15;
      v11 += (v13 > 1) + 1;
      if (v13 <= 1) {
        ++v13;
      }
      else {
        int v13 = 0;
      }
    }
    while (v11 != v12);
  }
  memptr[1] = a1;
  memptr[2] = v36;
  int v39 = 1065353216;
  cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>((uint64_t)v36, (uint64_t)memptr);
  if (v37)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (char *)v36[0];
    uint64_t v18 = 4 * v37;
    do
    {
      uint64_t v19 = (float32x4_t *)&v17[4 * (v16 & 0xFFFFFFFC)];
      uint64_t v20 = &v19->f32[3];
      float32x4_t v21 = vld1q_dup_f32(v20);
      *uint64_t v19 = vdivq_f32(*v19, v21);
      v16 += 4;
    }
    while (v18 != v16);
  }
  int v22 = *(_DWORD *)(a2 + 16);
  unint64_t v23 = v36[0];
  uint64_t v24 = (3 * v22);
  size_t v25 = (4 * v24 + 31) & 0x7FFFFFFE0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v25 >> 2;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v25, 0x49090899uLL);
  id v26 = memptr[0];
  *(void **)a3 = memptr[0];
  *(_DWORD *)(a3 + 16) = v22;
  if (v23 == v26)
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, v25, 0x49090899uLL);
    uint64_t v30 = memptr[0];
    if (v22)
    {
      int v31 = 0;
      uint64_t v32 = 4 * v24;
      uint64_t v33 = memptr[0];
      uint64_t v34 = v23;
      do
      {
        *v33++ = *v34;
        double v35 = &v34[v31 > 1];
        if (v31 <= 1) {
          ++v31;
        }
        else {
          int v31 = 0;
        }
        uint64_t v34 = v35 + 1;
        v32 -= 4;
      }
      while (v32);
    }
    *(void *)a3 = v30;
    *(void *)(a3 + 8) = v25 >> 2;
    *(_DWORD *)(a3 + 16) = v22;
    free(v23);
  }
  else if (v22)
  {
    int v27 = 0;
    uint64_t v28 = 4 * v24;
    do
    {
      *v26++ = *v23;
      double v29 = &v23[v27 > 1];
      if (v27 <= 1) {
        ++v27;
      }
      else {
        int v27 = 0;
      }
      unint64_t v23 = v29 + 1;
      v28 -= 4;
    }
    while (v28);
  }
  free(v36[0]);
}

void sub_260CFF040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(v9);
  free(a9);
  _Unwind_Resume(a1);
}

void vg::common::transformPoints(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  memset(v8, 0, sizeof(v8));
  size_t v4 = v8;
  do
  {
    uint64_t v5 = 0;
    long long v6 = *(_OWORD *)(a1 + 16 * v3);
    do
    {
      long long v7 = v6;
      *((_DWORD *)v4 + v5) = *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      ++v5;
    }
    while (v5 != 4);
    ++v3;
    ++v4;
  }
  while (v3 != 4);
  vg::common::transformPoints(v8, a2, a3);
}

void cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void **)(a2 + 8) == v4 || *(void **)v5 == v4)
  {
    size_t v6 = (4 * (4 * *(_DWORD *)(v5 + 16)) + 31) & 0x7FFFFFFE0;
    size_t v12 = v6 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
    unint64_t v11 = memptr;
    int v13 = *(_DWORD *)(*(void *)(a2 + 16) + 16);
    cva::assign<false,false,cva::Matrix<float,4u,0u,false>,cva::Matrix<float,4u,4u,false>,cva::Matrix<float,4u,0u,false>>(&v11, a2);
    long long v7 = *(void **)a1;
    size_t v8 = *(void *)(a1 + 8);
    size_t v9 = v12;
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v9;
    unint64_t v11 = v7;
    size_t v12 = v8;
    *(_DWORD *)(a1 + 16) = v13;
    int v13 = 0;
    free(v7);
  }
  else
  {
    if ((*(_DWORD *)(v5 + 16) & 0x3FFFFFFF) != 0) {
      cva::VecLib<float>::gemm();
    }
    unsigned int v10 = 4 * *(_DWORD *)(a1 + 16);
    if (v10)
    {
      bzero(v4, 4 * v10);
    }
  }
}

void sub_260CFF20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

id vg::shared::sharedShaderLibrary(vg::shared *this)
{
  if (vg::shared::sharedShaderLibrary(void)::onceToken != -1) {
    dispatch_once(&vg::shared::sharedShaderLibrary(void)::onceToken, &__block_literal_global_6);
  }
  uint64_t v1 = (void *)vg::shared::sharedShaderLibrary(void)::sDefaultLibrary;

  return v1;
}

void ___ZN2vg6shared19sharedShaderLibraryEv_block_invoke()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v0 = MTLCreateSystemDefaultDevice();
  uint64_t v1 = NSURL;
  uint64_t v2 = objc_msgSend(MEMORY[0x263F086E0], "vg_resourcePath");
  uint64_t v3 = [v2 stringByAppendingPathComponent:@"VGSharedShaders.metallib"];
  size_t v4 = [v1 URLWithString:v3];

  id v9 = 0;
  uint64_t v5 = [v0 newLibraryWithURL:v4 error:&v9];
  id v6 = v9;
  long long v7 = (void *)vg::shared::sharedShaderLibrary(void)::sDefaultLibrary;
  vg::shared::sharedShaderLibrary(void)::sDefaultLibrardouble y = v5;

  if (!vg::shared::sharedShaderLibrary(void)::sDefaultLibrary)
  {
    size_t v8 = __VGLogSharedInstance();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 138412290;
      id v11 = v6;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " Failed to create mtl library for shared shaders %@ ", buf, 0xCu);
    }
  }
}

void sub_260CFF3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::shared::createMetalTextureFromSurface(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  int v10 = [v8 pixelFormat];
  if (v10 > 1278226535)
  {
    switch(v10)
    {
      case 1278226536:
        uint64_t v11 = 25;
        goto LABEL_14;
      case 1380401729:
        uint64_t v11 = 71;
        goto LABEL_14;
      case 1380410945:
        uint64_t v11 = 125;
        goto LABEL_14;
    }
  }
  else
  {
    switch(v10)
    {
      case 1111970369:
        uint64_t v11 = 81;
        goto LABEL_14;
      case 1278226488:
        uint64_t v11 = 10;
        goto LABEL_14;
      case 1278226534:
        uint64_t v11 = 55;
LABEL_14:
        uint64_t v12 = objc_msgSend(MEMORY[0x263F12A50], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v11, objc_msgSend(v8, "width"), objc_msgSend(v8, "height"), 0);
        [v12 setUsage:a3];
        int v13 = (void *)[v7 newTextureWithDescriptor:v12 iosurface:v8 plane:0];
        uint64_t v14 = v13;
        if (v13)
        {
          [v13 setLabel:v9];
          id v15 = v14;
        }
        else
        {
          uint64_t v16 = __VGLogSharedInstance();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v18[0]) = 0;
            _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, " Failed to create metal texture ", (uint8_t *)v18, 2u);
          }
        }
        goto LABEL_20;
    }
  }
  uint64_t v12 = __VGLogSharedInstance();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v18[0] = 67109888;
    v18[1] = (int)[v8 pixelFormat] >> 24;
    __int16 v19 = 1024;
    int v20 = (int)([v8 pixelFormat] << 8) >> 24;
    __int16 v21 = 1024;
    int v22 = (__int16)[v8 pixelFormat] >> 8;
    __int16 v23 = 1024;
    int v24 = (char)[v8 pixelFormat];
    _os_log_impl(&dword_260C8D000, v12, OS_LOG_TYPE_ERROR, " Unsupported IOSurface pixel format %c%c%c%c ", (uint8_t *)v18, 0x1Au);
  }
  uint64_t v14 = 0;
LABEL_20:

  return v14;
}

void sub_260CFF6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::shared::VisualLoggerImpl::startLoggingToFile(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::stopAndDisableLogging(vg::shared::VisualLoggerImpl *this)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::startLoggingToHost(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::isLoggerEnabled(vg::shared::VisualLoggerImpl *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logDictionary(vg::shared::VisualLoggerImpl *this, NSDictionary *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logFloat(vg::shared::VisualLoggerImpl *this, float a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLoggerImpl::logPixelBuffer(vg::shared::VisualLoggerImpl *this, __CVBuffer *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

void *vg::shared::VisualLogger::internalSubloggerPrefixes(vg::shared::VisualLogger *this)
{
  return &unk_270CFDA20;
}

uint64_t *vg::shared::VisualLogger::sharedLogger(vg::shared::VisualLogger *this)
{
  {
    operator new();
  }
  return &vg::shared::VisualLogger::sharedLogger(void)::sharedLogger;
}

void sub_260CFF7E0(_Unwind_Exception *a1)
{
}

void vg::shared::VisualLogger::VisualLogger(vg::shared::VisualLogger *this)
{
}

{
  operator new();
}

uint64_t vg::shared::VisualLogger::startLoggingToFile(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

{
  return 0;
}

uint64_t vg::shared::VisualLogger::stopAndDisableLogging(vg::shared::VisualLogger *this)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::startLoggingToHost(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::isLoggerEnabled(vg::shared::VisualLogger *this, NSString *a2)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logDictionary(vg::shared::VisualLogger *this, NSDictionary *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logFloat(vg::shared::VisualLogger *this, float a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

uint64_t vg::shared::VisualLogger::logPixelBuffer(vg::shared::VisualLogger *this, __CVBuffer *a2, double a3, NSString *a4, NSString *a5)
{
  return 0;
}

void sub_260CFFAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260CFFF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a12);
  free(a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a14);

  _Unwind_Resume(a1);
}

void sub_260CFFFF8()
{
}

void sub_260D00000()
{
}

void cva::ItemHandler::createMatrix<float,2u,0u>(uint64_t a1)
{
  size_t v2 = (4 * (2 * *(_DWORD *)(a1 + 16)) + 31) & 0x7FFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v2, 0x49090899uLL);
  uint64_t v3 = memptr;
  uint64_t v4 = (2 * *(_DWORD *)(a1 + 16));
  if (v4)
  {
    uint64_t v5 = *(int **)a1;
    uint64_t v6 = 4 * v4;
    do
    {
      int v7 = *v5++;
      *v3++ = v7;
      v6 -= 4;
    }
    while (v6);
  }
  cva::ItemHandler::createMatrix<float>();
}

void sub_260D000B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void sub_260D00698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  free(a13);
  cva::ItemHandler::~ItemHandler((cva::ItemHandler *)&a9);
  cva::DictionaryHandler::~DictionaryHandler((cva::DictionaryHandler *)&a17);

  _Unwind_Resume(a1);
}

uint64_t std::optional<cva::Matrix<unsigned int,3u,0u,false>>::operator=[abi:ne180100]<cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,void>(uint64_t a1, int ***a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    std::construct_at[abi:ne180100]<cva::Matrix<unsigned int,3u,0u,false>,cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,cva::Matrix<unsigned int,3u,0u,false>*>(a1, a2);
    *(unsigned char *)(a1 + 24) = 1;
    return a1;
  }
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)*a2 + 4);
  if (v5 == 3)
  {
    int v6 = *((_DWORD *)v4 + 5);
    if (v6 == *(_DWORD *)(a1 + 16)) {
      goto LABEL_6;
    }
  }
  int v7 = *v4;
  int v8 = *((_DWORD *)v4 + 5);
  if (v7 != *(int **)a1)
  {
    *(_DWORD *)(a1 + 16) = v8;
    cva::MatrixData<float,0ul,0ul,false>::reserve(a1, (v8 * v5));
    int v6 = *(_DWORD *)(a1 + 16);
LABEL_6:
    if (v6)
    {
      id v9 = *(_DWORD **)a1;
      int v10 = **a2;
      uint64_t v11 = 4 * (3 * v6);
      do
      {
        int v12 = *v10++;
        *v9++ = v12;
        v11 -= 4;
      }
      while (v11);
    }
    return a1;
  }
  size_t v13 = (4 * (v8 * v5) + 31) & 0x7FFFFFFE0;
  size_t v14 = v13 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x49090899uLL);
  id v15 = memptr;
  int v16 = *((_DWORD *)*a2 + 5);
  if (v16)
  {
    uint64_t v17 = **a2;
    uint64_t v18 = 4 * (3 * v16);
    __int16 v19 = memptr;
    do
    {
      int v20 = *v17++;
      *v19++ = v20;
      v18 -= 4;
    }
    while (v18);
  }
  __int16 v21 = *(_DWORD **)a1;
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 16) = v16;
  free(v21);
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<cva::Matrix<unsigned int,3u,0u,false>,cva::MatrixUnaryExpr<cva::Matrix<int,0u,0u,false>,cva::detail::CastOp<unsigned int>>,cva::Matrix<unsigned int,3u,0u,false>*>(uint64_t a1, int ***a2)
{
  size_t v4 = (4 * (*((_DWORD *)*a2 + 5) * *((_DWORD *)*a2 + 4)) + 31) & 0x7FFFFFFE0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v4 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x49090899uLL);
  int v5 = memptr;
  *(void *)a1 = memptr;
  int v6 = *a2;
  int v7 = *((_DWORD *)*a2 + 5);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7)
  {
    int v8 = *v6;
    uint64_t v9 = 4 * (3 * v7);
    do
    {
      int v10 = *v8++;
      *v5++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  return a1;
}

id vg::shared::getAssetsForType(void *a1, void **a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  id v3 = a1;
  size_t v4 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v4))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetAssetsForType", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
  }

  int v5 = *a2;
  id v6 = v3;
  int v7 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v7))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DownloadAssetCatalog", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
  }

  int v8 = objc_opt_new();
  [v8 setDiscretionary:0];
  [v8 setRequiresPowerPluggedIn:0];
  [v8 setAllowsCellularAccess:1];
  [v8 setCanUseLocalCacheServer:1];
  [v8 setTimeoutIntervalForResource:10];
  uint64_t v43 = 0;
  long long v44 = &v43;
  uint64_t v45 = 0x2020000000;
  uint64_t v46 = 3;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  uint64_t v40 = __Block_byref_object_copy__0;
  uint64_t v41 = __Block_byref_object_dispose__0;
  id v42 = 0;
  uint64_t v9 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_INFO, "Downloading MobileAsset catalog for asset type: %@ ...", (uint8_t *)&buf, 0xCu);
  }

  dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
  uint64_t v11 = (void *)MEMORY[0x263F55938];
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 3221225472;
  id v54 = ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke_276;
  uint64_t v55 = &unk_2655705C0;
  id v12 = v6;
  uint64_t v58 = &v43;
  uint64_t v59 = &v37;
  id v56 = v12;
  dispatch_semaphore_t v57 = v10;
  size_t v13 = v10;
  [v11 startCatalogDownload:v12 options:v8 completionWithError:&buf];
  dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);

  uint64_t v14 = v44[3];
  if (v14)
  {
    if (v5)
    {
      id v15 = (void *)v38[5];
      if (v15) {
        void *v5 = v15;
      }
    }
    int v16 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = v38[5];
      uint64_t v18 = v44[3];
      *(_DWORD *)id v47 = 138412802;
      id v48 = v12;
      __int16 v49 = 2112;
      uint64_t v50 = v17;
      __int16 v51 = 2048;
      uint64_t v52 = v18;
      _os_log_error_impl(&dword_260C8D000, v16, OS_LOG_TYPE_ERROR, "Failed to download MobileAsset catalog for asset type %@ with error: %@ (result: %zu)", v47, 0x20u);
    }
  }
  else
  {
    int v16 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)id v47 = 138412290;
      id v48 = v12;
      _os_log_impl(&dword_260C8D000, v16, OS_LOG_TYPE_INFO, "Successfully downloaded MobileAsset catalog for asset type: %@", v47, 0xCu);
    }
  }

  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v43, 8);

  ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  if (v14)
  {
    __int16 v19 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_260C8D000, v19, OS_LOG_TYPE_INFO, "Failed to download the latest asset catalog, using local asset catalog (if present)...", (uint8_t *)&buf, 2u);
    }
  }
  int v20 = *a2;
  id v21 = v12;
  int v22 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v22))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "QueryAssets", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
  }

  __int16 v23 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_INFO, "Initializing query for asset type: %@", (uint8_t *)&buf, 0xCu);
  }

  int v24 = (void *)[objc_alloc(MEMORY[0x263F55950]) initWithType:v21];
  [v24 returnTypes:2];
  uint64_t v43 = 0;
  long long v44 = &v43;
  uint64_t v45 = 0x2020000000;
  uint64_t v46 = 3;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  uint64_t v40 = __Block_byref_object_copy__0;
  uint64_t v41 = __Block_byref_object_dispose__0;
  id v42 = 0;
  uint64_t v25 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_260C8D000, v25, OS_LOG_TYPE_INFO, "Querying asset catalog...", (uint8_t *)&buf, 2u);
  }

  dispatch_semaphore_t v26 = dispatch_semaphore_create(0);
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 3221225472;
  id v54 = ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke_281;
  uint64_t v55 = &unk_2655705C0;
  id v27 = v21;
  uint64_t v58 = &v43;
  uint64_t v59 = &v37;
  id v56 = v27;
  dispatch_semaphore_t v57 = v26;
  uint64_t v28 = v26;
  [v24 queryMetaDataWithError:&buf];
  dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL);

  if (v44[3])
  {
    if (v20)
    {
      double v29 = (void *)v38[5];
      if (v29) {
        *int v20 = v29;
      }
    }
    uint64_t v30 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = v38[5];
      uint64_t v36 = v44[3];
      *(_DWORD *)id v47 = 138412802;
      id v48 = v27;
      __int16 v49 = 2112;
      uint64_t v50 = v35;
      __int16 v51 = 2048;
      uint64_t v52 = v36;
      _os_log_error_impl(&dword_260C8D000, v30, OS_LOG_TYPE_ERROR, "Failed to query for asset type %@ with error: %@ (result: %zu)", v47, 0x20u);
    }
    int v31 = 0;
  }
  else
  {
    int v31 = [v24 results];
    uint64_t v30 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = [v31 count];
      *(_DWORD *)id v47 = 138412546;
      id v48 = v27;
      __int16 v49 = 2048;
      uint64_t v50 = v32;
      _os_log_impl(&dword_260C8D000, v30, OS_LOG_TYPE_INFO, "Query successful for asset type: %@. Number of assets found: %zu", v47, 0x16u);
    }
  }

  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v43, 8);

  ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  if (v31) {
    id v33 = v31;
  }

  ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke();

  return v31;
}

void sub_260D010CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15)
{
  __int16 v19 = v17;

  _Block_object_dispose(&a9, 8);
  _Block_object_dispose(&a15, 8);

  ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke();
  ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke();

  _Unwind_Resume(a1);
}

id VGLogSharedMobileAssetUtils(void)
{
  if (VGLogSharedMobileAssetUtils(void)::onceToken != -1) {
    dispatch_once(&VGLogSharedMobileAssetUtils(void)::onceToken, &__block_literal_global_271);
  }
  id v0 = (void *)VGLogSharedMobileAssetUtils(void)::handle;

  return v0;
}

void ___ZN2vg6shared16getAssetsForTypeEP8NSStringRNS0_15NSErrorCWrapperE_block_invoke()
{
  id v0 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetAssetsForType", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void vg::shared::downloadAsset(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "DownloadAsset", (const char *)&unk_260D385D9, buf, 2u);
  }

  if (v5)
  {
    int v7 = objc_opt_new();
    [v7 setDiscretionary:0];
    [v7 setRequiresPowerPluggedIn:0];
    [v7 setAllowsCellularAccess:1];
    [v7 setCanUseLocalCacheServer:1];
    int v8 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = [v5 assetType];
      dispatch_semaphore_t v10 = [v5 assetId];
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v10;
      _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_INFO, "Downloading MobileAsset with type and id: {%@, %@}", buf, 0x16u);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v52 = __Block_byref_object_copy__0;
    uint64_t v53 = __Block_byref_object_dispose__0;
    id v54 = 0;
    uint64_t v41 = 0;
    id v42 = &v41;
    uint64_t v43 = 0x2020000000;
    uint64_t v44 = 3;
    dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    v36[2] = ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke_268;
    v36[3] = &unk_2655705C0;
    id v12 = v5;
    id v37 = v12;
    uint64_t v39 = &v41;
    uint64_t v40 = buf;
    size_t v13 = v11;
    uint64_t v38 = v13;
    [v12 startDownload:v7 completionWithError:v36];
    dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v14 = v42[3];
    if (v14)
    {
      if (v14 != 10)
      {
        dispatch_semaphore_t v26 = VGLogSharedMobileAssetUtils();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v31 = [v12 assetType];
          uint64_t v32 = [v12 assetId];
          id v33 = (long long *)v42[3];
          *(_DWORD *)uint64_t v45 = 138412802;
          uint64_t v46 = v31;
          __int16 v47 = 2112;
          uint64_t v48 = (uint64_t)v32;
          __int16 v49 = 2048;
          uint64_t v50 = v33;
          _os_log_error_impl(&dword_260C8D000, v26, OS_LOG_TYPE_ERROR, "Downloading of MobileAsset failed for asset {%@, %@} with result: %zu", v45, 0x20u);
        }
        id v27 = *(void **)(*(void *)&buf[8] + 40);
        if (v27 && *a2) {
          **a2 = v27;
        }
        goto LABEL_28;
      }
      id v15 = VGLogSharedMobileAssetUtils();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = [v12 assetType];
        uint64_t v17 = [v12 assetId];
        *(_DWORD *)uint64_t v45 = 138412546;
        uint64_t v46 = v16;
        __int16 v47 = 2112;
        uint64_t v48 = (uint64_t)v17;
        _os_log_impl(&dword_260C8D000, v15, OS_LOG_TYPE_INFO, "MobileAsset {%@, %@} already installed", v45, 0x16u);
      }
    }
    if ([v12 refreshState])
    {
      uint64_t v18 = [v12 getLocalFileUrl];
      id v19 = [v18 path];
      std::string::basic_string[abi:ne180100]<0>(&v34, (char *)[v19 UTF8String]);

      int v20 = VGLogSharedMobileAssetUtils();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = [v12 assetType];
        uint64_t v22 = [v12 assetId];
        __int16 v23 = (void *)v22;
        int v24 = &v34;
        if (v35 < 0) {
          int v24 = (long long *)v34;
        }
        *(_DWORD *)uint64_t v45 = 138412802;
        uint64_t v46 = v21;
        __int16 v47 = 2112;
        uint64_t v48 = v22;
        __int16 v49 = 2080;
        uint64_t v50 = v24;
        _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_INFO, "Download of MobileAsset asset {%@, %@} was successful, at download path: %s", v45, 0x20u);
      }
      *(_OWORD *)a3 = v34;
      *(void *)(a3 + 16) = v35;
      *(unsigned char *)(a3 + 24) = 1;
      goto LABEL_29;
    }
    uint64_t v28 = VGLogSharedMobileAssetUtils();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      double v29 = [v12 assetType];
      uint64_t v30 = [v12 assetId];
      vg::hrtf::getAssetWithError(v29, v30, v45, v28);
    }

LABEL_28:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
LABEL_29:

    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_30;
  }
  uint64_t v25 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
    vg::shared::downloadAsset(v25);
  }

  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_30:
  ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke();
}

void sub_260D01814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);

  ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke();
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke()
{
  id v0 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DownloadAsset", (const char *)&unk_260D385D9, v1, 2u);
  }
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void ___ZN2vg6shared13downloadAssetEP7MAAssetRNS0_15NSErrorCWrapperE_block_invoke_268(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = [*(id *)(a1 + 32) assetType];
    int v8 = [*(id *)(a1 + 32) assetId];
    int v12 = 138412802;
    size_t v13 = v7;
    __int16 v14 = 2112;
    id v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Download completed for MobileAsset {%@, %@} with status: %zu", (uint8_t *)&v12, 0x20u);
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  dispatch_semaphore_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v5;
  id v11 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_260D01AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27VGLogSharedMobileAssetUtilsv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "SharedMobileAssetUtils");
  uint64_t v1 = (void *)VGLogSharedMobileAssetUtils(void)::handle;
  VGLogSharedMobileAssetUtils(void)::handle = (uint64_t)v0;
}

void sub_260D01B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke()
{
  os_log_t v0 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "DownloadAssetCatalog", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZN2vg6shared6detailL20downloadAssetCatalogEP8NSStringPU15__autoreleasingP7NSError_block_invoke_276(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v11 = 138412546;
    uint64_t v12 = v7;
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Download completed for MobileAsset catalog (%@) with status: %zu", (uint8_t *)&v11, 0x16u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v5;
  id v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke()
{
  os_log_t v0 = VGLogSharedMobileAssetUtils();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "QueryAssets", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZN2vg6shared6detailL11queryAssetsEP8NSStringPU15__autoreleasingP7NSError_block_invoke_281(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = VGLogSharedMobileAssetUtils();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v11 = 138412546;
    uint64_t v12 = v7;
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_INFO, "Query completed on MobileAsset catalog (%@) with status: %zu", (uint8_t *)&v11, 0x16u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v5;
  id v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void vg::shared::downloadAsset(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "No asset provided for downloading", v1, 2u);
}

id __VGLogSharedInstance()
{
  if (__VGLogSharedInstance_onceToken != -1) {
    dispatch_once(&__VGLogSharedInstance_onceToken, &__block_literal_global_7);
  }
  os_log_t v0 = (void *)sharedInstance;

  return v0;
}

uint64_t logVerboseSignposts()
{
  if (logVerboseSignposts_onceToken != -1) {
    dispatch_once(&logVerboseSignposts_onceToken, &__block_literal_global_3);
  }
  return logVerboseSignposts_flag;
}

uint64_t __logVerboseSignposts_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:@"Apple Global Domain"];
  uint64_t v1 = (void *)logVerboseSignposts_sDefaults;
  logVerboseSignposts_sDefaults = v0;

  uint64_t result = [(id)logVerboseSignposts_sDefaults BOOLForKey:@"vg.logVerboseSignposts"];
  logVerboseSignposts_flag = result;
  return result;
}

uint64_t VGGetChannelsFromPixelFormat(int a1)
{
  uint64_t v2 = 0;
  uint64_t v6 = *MEMORY[0x263EF8340];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1) {
      return FormatList[v2];
    }
    v2 += 4;
  }
  while (v2 != 52);
  id v3 = __VGLogSharedInstance();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_260C8D000, v3, OS_LOG_TYPE_ERROR, " CVPixelFormatType %d not supported ", (uint8_t *)v5, 8u);
  }

  return 0;
}

uint64_t VGGetBytesPerElementFromPixelFormat(int a1)
{
  uint64_t v2 = 0;
  uint64_t v6 = *MEMORY[0x263EF8340];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1) {
      return FormatList[v2 + 2];
    }
    v2 += 4;
  }
  while (v2 != 52);
  id v3 = __VGLogSharedInstance();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_260C8D000, v3, OS_LOG_TYPE_ERROR, " CVPixelFormatType %d not supported ", (uint8_t *)v5, 8u);
  }

  return 0;
}

uint64_t VGGetResizeFunctionFromPixelFormat(int a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  do
  {
    if (LODWORD(FormatList[v2 + 1]) == a1) {
      uint64_t v3 = FormatList[v2 + 3];
    }
    v2 += 4;
  }
  while (v2 != 52);
  if (!v3)
  {
    size_t v4 = __VGLogSharedInstance();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_impl(&dword_260C8D000, v4, OS_LOG_TYPE_ERROR, " Resize function for CVPixelFormatType %d not supported ", (uint8_t *)v6, 8u);
    }
  }
  return v3;
}

id VGReshapeLinearArray(_DWORD *a1, unint64_t a2, void *a3)
{
  std::vector<int>::vector(&v14, (uint64_t)(a3[1] - *a3) >> 2);
  uint64_t v6 = (a3[1] - *a3) >> 2;
  unsigned int v7 = v6 - 1;
  if ((int)v6 - 1 >= 0)
  {
    uint64_t v8 = (int *)(*a3 + 4 * v7);
    uint64_t v9 = &v14.__begin_[v7];
    int v10 = 1;
    do
    {
      *v9-- = v10;
      int v11 = *v8--;
      v10 *= v11;
      LODWORD(v6) = v6 - 1;
    }
    while (v6);
  }
  uint64_t v12 = VGReshapeLinearSubArray(a1, a2, a3, &v14, 0);
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }

  return v12;
}

void sub_260D0237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id VGReshapeLinearSubArray(_DWORD *a1, unint64_t a2, void *a3, void *a4, int a5)
{
  int v10 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:*(int *)(*a3 + 4 * a5)];
  if (((a3[1] - *a3) >> 2) - 1 == a5)
  {
    for (; a2; --a2)
    {
      LODWORD(v11) = *a1;
      uint64_t v12 = [NSNumber numberWithFloat:v11];
      [v10 addObject:v12];

      ++a1;
    }
  }
  else if (a2)
  {
    unint64_t v13 = 0;
    uint64_t v14 = a5;
    uint64_t v15 = (a5 + 1);
    LODWORD(v16) = *(_DWORD *)(*a4 + 4 * v14);
    do
    {
      uint64_t v17 = VGReshapeLinearSubArray(&a1[v13], (int)v16, a3, a4, v15);
      [v10 addObject:v17];

      uint64_t v16 = *(int *)(*a4 + 4 * v14);
      v13 += v16;
    }
    while (v13 < a2);
  }

  return v10;
}

void sub_260D024C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VGReshapeLinearArray(void *a1, void *a2)
{
  id v3 = a1;
  size_t v4 = VGReshapeLinearArray((_DWORD *)[v3 getData], objc_msgSend(v3, "getSize"), a2);

  return v4;
}

void sub_260D02568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VGSetAlphaIOSurface(IOSurface *a1, Pixel_8 a2)
{
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v7, a1, 1);
  vImagePixelCount v3 = [v7[0] width];
  vImagePixelCount v4 = [v7[0] height];
  id v5 = (void *)[v7[0] baseAddress];
  [v7[0] bytesPerRow];
  [v7[0] bytesPerElement];
  dest.data = v5;
  dest.vImagePixelCount height = v4;
  dest.vImagePixelCount width = v3;
  dest.rowBytes = [v7[0] bytesPerRow];
  vImageOverwriteChannelsWithScalar_ARGB8888(a2, &dest, &dest, 1u, 0);
  vg::IOSurfaceData::~IOSurfaceData(v7);
}

void sub_260D02620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  _Unwind_Resume(a1);
}

uint64_t VGDumpIOSurface(IOSurface *a1, NSString *a2, float a3)
{
  id v5 = a1;
  uint64_t v6 = a2;
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v5);
  uint64_t v8 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    unint64_t v12[2] = ___Z15VGDumpIOSurfaceP9IOSurfaceP8NSStringf_block_invoke;
    void v12[3] = &__block_descriptor_40_e5_v8__0l;
    v12[4] = CVPixelBufferFromIOSurface;
    uint64_t v9 = MEMORY[0x261227FC0](v12);
    uint64_t v10 = VGDumpCVPixelBuffer(v8, v6, a3);
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    uint64_t v9 = __VGLogSharedInstance();
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, (os_log_t)v9, OS_LOG_TYPE_ERROR, " Failed to create CVPixelBuffer ", buf, 2u);
    }
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_260D02760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferFromIOSurface(IOSurface *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (__IOSurface *)v1;
  if ([(IOSurface *)v1 pixelFormat] == 1380401729)
  {
    create32ARGBSurfaceFrom32RGBASurface(v1);
    uint64_t v2 = (__IOSurface *)objc_claimAutoreleasedReturnValue();
  }
  vImagePixelCount v3 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBufferFromIOSurface", (const char *)&unk_260D385D9, buf, 2u);
  }

  CVPixelBufferRef pixelBufferOut = 0;
  CVReturn v4 = CVPixelBufferCreateWithIOSurface(0, v2, 0, &pixelBufferOut);
  CVPixelBufferRef v5 = pixelBufferOut;
  ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke();
  if (v4) {
    CVPixelBufferRef v6 = 0;
  }
  else {
    CVPixelBufferRef v6 = v5;
  }

  return v6;
}

void sub_260D02890(_Unwind_Exception *a1)
{
  ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke();

  _Unwind_Resume(a1);
}

void ___Z15VGDumpIOSurfaceP9IOSurfaceP8NSStringf_block_invoke(uint64_t a1)
{
}

uint64_t VGDumpCVPixelBuffer(__CVBuffer *a1, NSString *a2, float a3)
{
  CVPixelBufferRef v5 = a2;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1278226533)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717855600)
      {
        int v8 = 1751410032;
LABEL_11:
        if (PixelFormatType == v8)
        {
          CVPixelBufferRef v10 = CVPixelBufferRetain(a1);
LABEL_14:
          CVPixelBufferRef v11 = v10;
          uint64_t v12 = (unsigned int *)MEMORY[0x263F00870];
          goto LABEL_19;
        }
        goto LABEL_16;
      }
    }
    else if (PixelFormatType != 1278226534)
    {
      int v8 = 1278226742;
      goto LABEL_11;
    }
    CVPixelBufferRef v10 = create16UPixelBufferFrom32FPixelBuffer(a1, 0.0, 65535.0 / a3);
    goto LABEL_14;
  }
  switch(PixelFormatType)
  {
    case 32:
      CVPixelBufferRef v11 = CVPixelBufferRetain(a1);
      uint64_t v12 = (unsigned int *)MEMORY[0x263F00860];
      goto LABEL_19;
    case 875704422:
      CVPixelBufferRef BGRAFromYCbCr = vg::createBGRAFromYCbCr(a1, v7);
      break;
    case 1111970369:
      CVPixelBufferRef BGRAFromYCbCr = CVPixelBufferRetain(a1);
      break;
    default:
LABEL_16:
      CVPixelBufferRef v11 = CVPixelBufferRetain(a1);
      uint64_t v12 = (unsigned int *)MEMORY[0x263F008B0];
      goto LABEL_19;
  }
  CVPixelBufferRef v11 = BGRAFromYCbCr;
  uint64_t v12 = (unsigned int *)MEMORY[0x263F00868];
LABEL_19:
  unint64_t v13 = (_DWORD *)MEMORY[0x263F008B0];
  uint64_t v14 = *v12;
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  v26[2] = ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke;
  uint64_t v26[3] = &__block_descriptor_40_e5_v8__0l;
  void v26[4] = v11;
  uint64_t v15 = (void (**)(void))MEMORY[0x261227FC0](v26);
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 3221225472;
  v25[2] = ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke_2;
  v25[3] = &__block_descriptor_40_e5_v8__0l;
  v25[4] = 0;
  uint64_t v16 = (void (**)(void))MEMORY[0x261227FC0](v25);
  if (v14 == *MEMORY[0x263F00868] || v14 == *v13 || v14 == *MEMORY[0x263F00860])
  {
    id v19 = (CFStringRef *)MEMORY[0x263F002D8];
LABEL_34:
    int v20 = CGColorSpaceCreateWithName(*v19);
    id v21 = (CIImage *)[objc_alloc(MEMORY[0x263F00650]) initWithCVPixelBuffer:v11];
    uint64_t v22 = writeCIImageToFile(v5, v21, v14, v20);
    goto LABEL_35;
  }
  if (v14 == *MEMORY[0x263F008A8])
  {
    id v19 = (CFStringRef *)MEMORY[0x263F002C8];
    goto LABEL_34;
  }
  id v19 = (CFStringRef *)MEMORY[0x263F00250];
  if (v14 == *MEMORY[0x263F00878] || v14 == *MEMORY[0x263F00870]) {
    goto LABEL_34;
  }
  if (v14 == *MEMORY[0x263F00880])
  {
    id v19 = (CFStringRef *)MEMORY[0x263F002B8];
    goto LABEL_34;
  }
  __VGLogSharedInstance();
  id v21 = (CIImage *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(&v21->super, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v24 = 0;
    _os_log_impl(&dword_260C8D000, &v21->super, OS_LOG_TYPE_ERROR, " Unsupported format type ", v24, 2u);
  }
  uint64_t v22 = 0;
LABEL_35:

  v16[2](v16);
  v15[2](v15);

  return v22;
}

void sub_260D02C18(_Unwind_Exception *a1)
{
  v3[2](v3);

  v2[2](v2);
  _Unwind_Resume(a1);
}

BOOL VGDumpJSON(objc_object *a1, NSString *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  vImagePixelCount v3 = a1;
  CVReturn v4 = a2;
  if ([MEMORY[0x263F08900] isValidJSONObject:v3])
  {
    id v10 = 0;
    CVPixelBufferRef v5 = [MEMORY[0x263F08900] dataWithJSONObject:v3 options:9 error:&v10];
    CVPixelBufferRef v6 = v10;
    if (v5)
    {
      BOOL v7 = VGDumpData(v5, v4, 1);
    }
    else
    {
      int v8 = __VGLogSharedInstance();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v12 = (objc_object *)v4;
        __int16 v13 = 2112;
        uint64_t v14 = v6;
        _os_log_impl(&dword_260C8D000, v8, OS_LOG_TYPE_ERROR, " Failed to serialize %@, %@ ", buf, 0x16u);
      }

      BOOL v7 = 0;
    }
  }
  else
  {
    CVPixelBufferRef v6 = __VGLogSharedInstance();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = v3;
      _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_ERROR, " Not valid json object %@ ", buf, 0xCu);
    }
    BOOL v7 = 0;
  }

  return v7;
}

void sub_260D02E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL VGDumpData(NSData *a1, NSString *a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CVPixelBufferRef v5 = a2;
  BOOL v6 = [(NSData *)a1 writeToFile:v5 atomically:0];
  if (!v6)
  {
    BOOL v7 = __VGLogSharedInstance();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v12 = 138412290;
      __int16 v13 = v5;
      int v8 = " Failed to dump %@ ";
      uint64_t v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (a3)
  {
    BOOL v7 = __VGLogSharedInstance();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      __int16 v13 = v5;
      int v8 = " Wrote %@ ";
      uint64_t v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_INFO;
LABEL_7:
      _os_log_impl(&dword_260C8D000, v9, v10, v8, (uint8_t *)&v12, 0xCu);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

  return v6;
}

void sub_260D02F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VGReadJSON(NSString *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  uint64_t v2 = [MEMORY[0x263F08850] defaultManager];
  char v3 = [v2 fileExistsAtPath:v1];

  if (v3)
  {
    CVReturn v4 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v1];
    id v10 = 0;
    CVPixelBufferRef v5 = [MEMORY[0x263F08900] JSONObjectWithData:v4 options:1 error:&v10];
    id v6 = v10;
    if (v6)
    {
      BOOL v7 = __VGLogSharedInstance();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        int v12 = v1;
        __int16 v13 = 2112;
        id v14 = v6;
        _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_ERROR, " Unable to load contents of json file at path: %@ with error: %@ ", buf, 0x16u);
      }

      id v8 = 0;
    }
    else
    {
      id v8 = v5;
    }
  }
  else
  {
    CVReturn v4 = __VGLogSharedInstance();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      int v12 = v1;
      _os_log_impl(&dword_260C8D000, v4, OS_LOG_TYPE_ERROR, " Path does not exist: %@ ", buf, 0xCu);
    }
    id v8 = 0;
  }

  return v8;
}

void sub_260D0315C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void resizeCVPixelBufferTovImageBuffer(CVPixelBufferRef pixelBuffer@<X0>, char *a2@<X3>, unint64_t a3@<X1>, unint64_t a4@<X2>, int a5@<W4>, void *a6@<X8>)
{
  v55[1] = *MEMORY[0x263EF8340];
  if (a5)
  {
    CVPixelBufferRef v11 = [MEMORY[0x263F00650] imageWithCVPixelBuffer:pixelBuffer];
    memset(&v53, 0, sizeof(v53));
    long long v12 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
    *(_OWORD *)&v52.a = *MEMORY[0x263F000D0];
    *(_OWORD *)&v52.c = v12;
    *(_OWORD *)&v52.tdouble x = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    CGAffineTransformScale(&v53, &v52, (float)((float)a4 / (float)Width), (float)((float)a3 / (float)Height));
    uint64_t v15 = [v11 imageBySamplingNearest];
    CGAffineTransform v51 = v53;
    uint64_t v44 = v15;
    uint64_t v16 = [v15 imageByApplyingTransform:&v51];
    id v17 = objc_alloc_init(MEMORY[0x263F00628]);
    CVPixelBufferRef pixelBufferOut = 0;
    uint64_t v54 = *MEMORY[0x263F04130];
    v55[0] = MEMORY[0x263EFFA78];
    uint64_t v45 = v17;
    CFDictionaryRef v18 = [NSDictionary dictionaryWithObjects:v55 forKeys:&v54 count:1];
    uint64_t v46 = v16;
    __int16 v47 = v11;
    [v16 extent];
    double v20 = v19;
    [v16 extent];
    double v22 = v21;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    CVPixelBufferCreate(0, (unint64_t)v20, (unint64_t)v22, PixelFormatType, v18, &pixelBufferOut);
    v49[0] = MEMORY[0x263EF8330];
    v49[1] = 3221225472;
    v49[2] = ___ZL64_resizeCVPixelBufferTovImageBufferUsingNearestNeighborResamplingP10__CVBuffermmPv_block_invoke;
    void v49[3] = &__block_descriptor_40_e5_v8__0l;
    v49[4] = pixelBufferOut;
    int v24 = (void (**)(void))MEMORY[0x261227FC0](v49);
    CFDictionaryRef v43 = v18;
    [v17 render:v16 toCVPixelBuffer:pixelBufferOut];
    CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
    unint64_t v25 = a4;
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
    id v27 = a2;
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    uint64_t v29 = 4 * a4;
    unint64_t v30 = a3;
    if (a3)
    {
      size_t v31 = BytesPerRow;
      uint64_t v32 = a2;
      unint64_t v33 = v30;
      do
      {
        memcpy(v32, BaseAddress, 4 * v25);
        v32 += v29;
        BaseAddress += v31;
        --v33;
      }
      while (v33);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
    *a6 = v27;
    a6[1] = v30;
    a6[2] = v25;
    a6[3] = v29;
    v24[2](v24);
  }
  else
  {
    OSType v34 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    uint64_t v35 = a2;
    unint64_t v48 = a3;
    size_t v36 = CVPixelBufferGetHeight(pixelBuffer);
    size_t v37 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v38 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    uint64_t v39 = VGGetBytesPerElementFromPixelFormat(v34);
    uint64_t v40 = (void (*)(CGAffineTransform *, void *, void, void))VGGetResizeFunctionFromPixelFormat(v34);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    v56.origin.double x = 0.0;
    v56.origin.double y = 0.0;
    v56.size.vImagePixelCount width = (double)v37;
    v56.size.vImagePixelCount height = (double)v36;
    double MinY = CGRectGetMinY(v56);
    v57.origin.double x = 0.0;
    v57.origin.double y = 0.0;
    v57.size.vImagePixelCount width = (double)v37;
    v57.size.vImagePixelCount height = (double)v36;
    unint64_t v42 = (unint64_t)(CGRectGetMinX(v57) * (double)(unint64_t)v39 + MinY * (double)v38);
    *(void *)&v53.a = (char *)CVPixelBufferGetBaseAddress(pixelBuffer) + v42;
    v58.origin.double x = 0.0;
    v58.origin.double y = 0.0;
    v58.size.vImagePixelCount width = (double)v37;
    v58.size.vImagePixelCount height = (double)v36;
    *(void *)&v53.b = (unint64_t)CGRectGetHeight(v58);
    v59.origin.double x = 0.0;
    v59.origin.double y = 0.0;
    v59.size.vImagePixelCount width = (double)v37;
    v59.size.vImagePixelCount height = (double)v36;
    *(void *)&v53.c = (unint64_t)CGRectGetWidth(v59);
    *(void *)&v53.d = v38;
    *a6 = v35;
    a6[1] = v48;
    a6[2] = a4;
    a6[3] = v39 * a4;
    if (v40) {
      v40(&v53, a6, 0, 0);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
}

void sub_260D035BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef resizeCVPixelBuffer(__CVBuffer *a1, unint64_t a2, unint64_t a3)
{
  v16[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t v7 = VGGetBytesPerElementFromPixelFormat(PixelFormatType) * a3;
  id v8 = (char *)malloc_type_malloc(v7 * a2, 0xDAEE7E17uLL);
  resizeCVPixelBufferTovImageBuffer(a1, v8, a2, a3, 0, v14);
  v14[0] = 0;
  uint64_t v15 = *MEMORY[0x263F04130];
  v16[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef pixelBufferAttributes = [NSDictionary dictionaryWithObjects:v16 forKeys:&v15 count:1];
  if (CVPixelBufferCreateWithBytes(0, a3, a2, PixelFormatType, v8, v7, (CVPixelBufferReleaseBytesCallback)pixelBufferReleaseCallBack, 0, pixelBufferAttributes, v14))
  {
    id v10 = __VGLogSharedInstance();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_260C8D000, v10, OS_LOG_TYPE_ERROR, " Error: could not create new pixel buffer ", buf, 2u);
    }

    free(v8);
    CVPixelBufferRef v11 = 0;
  }
  else
  {
    CVPixelBufferRef v11 = v14[0];
  }

  return v11;
}

void sub_260D037E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void pixelBufferReleaseCallBack(void *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t resizeSurface(IOSurface *a1, IOSurface *a2)
{
  char v3 = a1;
  CVReturn v4 = a2;
  uint64_t v5 = VGGetResizeFunctionFromPixelFormat([(IOSurface *)v4 pixelFormat]);
  if (v5)
  {
    memset(v11, 0, sizeof(v11));
    if (v3) {
      [(IOSurface *)v3 vg_vImageBuffer];
    }
    memset(v10, 0, sizeof(v10));
    if (v4) {
      [(IOSurface *)v4 vg_vImageBuffer];
    }
    uint64_t v6 = ((uint64_t (*)(_OWORD *, _OWORD *, void, uint64_t))v5)(v11, v10, 0, 16);
    uint64_t v5 = v6 == 0;
    if (v6)
    {
      size_t v7 = __VGLogSharedInstance();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_260C8D000, v7, OS_LOG_TYPE_ERROR, " resizeSurface function error ", v9, 2u);
      }
    }
  }

  return v5;
}

void sub_260D038FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

IOSurface *resizeSurface(IOSurface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ([(IOSurface *)v5 width] == a2 && [(IOSurface *)v5 height] == a3)
  {
    uint64_t v6 = [(IOSurface *)v5 vg_copy];
  }
  else
  {
    size_t v7 = [(IOSurface *)v5 vg_basicProperties];
    id v8 = (void *)[v7 mutableCopy];

    uint64_t v9 = [NSNumber numberWithUnsignedLong:a2];
    [v8 setObject:v9 forKeyedSubscript:*MEMORY[0x263F0ECF8]];

    id v10 = [NSNumber numberWithUnsignedLong:a3];
    [v8 setObject:v10 forKeyedSubscript:*MEMORY[0x263F0ECC0]];

    CVPixelBufferRef v11 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", -[IOSurface bytesPerElement](v5, "bytesPerElement") * a2);
    [v8 setObject:v11 forKeyedSubscript:*MEMORY[0x263F0ECA8]];

    long long v12 = (IOSurface *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v8];
    if (resizeSurface(v5, v12)) {
      uint64_t v6 = v12;
    }
    else {
      uint64_t v6 = 0;
    }
  }

  return v6;
}

void sub_260D03AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createResizeToSquareWithPad(__CVBuffer *a1, int a2, int32x2_t *a3)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t v8 = Height - Width;
  if (Height == Width)
  {
    CVPixelBufferRef result = CVPixelBufferRetain(a1);
    *a3 = 0;
    a3[1] = vdup_n_s32(Height);
  }
  else
  {
    __int32 v10 = Width;
    if (Height > Width)
    {
      size_t v11 = v8 >> 1;
      uint64_t v12 = (v8 & 1) + (v8 >> 1);
      CVPixelBufferRef result = createCVPixelBufferWithPadInWidth<unsigned char>(a1, v8 >> 1, v12, a2);
      int32x2_t v16 = (int32x2_t)-(int)v11;
      v17.i32[0] = v12 + v10;
      v17.i32[1] = Height;
    }
    else
    {
      size_t v13 = (Width - Height) >> 1;
      uint64_t v14 = (Width - Height) & 1;
      int v15 = v14 + v13;
      CVPixelBufferRef result = createCVPixelBufferWithPadInHeight<unsigned char>(a1, v13, v14 + v13, a2);
      v16.i32[0] = 0;
      v16.i32[1] = -(int)v13;
      v17.i32[0] = v10;
      v17.i32[1] = v15 + Height;
    }
    *a3 = v16;
    a3[1] = v17;
  }
  return result;
}

CVPixelBufferRef createCVPixelBufferWithPadInWidth<unsigned char>(__CVBuffer *a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7 = a1;
  v28[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Height = CVPixelBufferGetHeight(v7);
  size_t Width = CVPixelBufferGetWidth(v7);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v7);
  uint64_t v25 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v27 = *MEMORY[0x263F04130];
  v28[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v24 = [NSDictionary dictionaryWithObjects:v28 forKeys:&v27 count:1];
  CVPixelBufferCreate(0, a3 + a2 + Width, Height, PixelFormatType, v24, &pixelBufferOut);
  size_t v12 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  CVPixelBufferLockBaseAddress(v7, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  uint64_t v23 = a3;
  uint64_t v14 = (char *)CVPixelBufferGetBaseAddress(v7);
  if (Height)
  {
    int v15 = v14;
    double v22 = v7;
    size_t v16 = v25 * a2;
    size_t v17 = v25 * Width;
    CFDictionaryRef v18 = &BaseAddress[v16];
    size_t v19 = Height;
    do
    {
      memcpy(v18, v15, v17);
      v18 += v12;
      v15 += BytesPerRow;
      --v19;
    }
    while (v19);
    size_t v7 = v22;
    do
    {
      memset(BaseAddress, a4, v16);
      memset(&BaseAddress[v16 + v17], a4, v25 * v23);
      BaseAddress += v12;
      --Height;
    }
    while (Height);
  }
  CVPixelBufferUnlockBaseAddress(v7, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v20 = pixelBufferOut;

  return v20;
}

void sub_260D03DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadInHeight<unsigned char>(__CVBuffer *a1, size_t a2, uint64_t a3, int a4)
{
  v26[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  uint64_t v19 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v25 = *MEMORY[0x263F04130];
  v26[0] = MEMORY[0x263EFFA78];
  [NSDictionary dictionaryWithObjects:v26 forKeys:&v25 count:1];
  size_t v12 = Height + a2;
  size_t v20 = Height + a2 + a3;
  uint64_t v21 = a3;
  CFDictionaryRef v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, v20, PixelFormatType, v22, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  __b = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height + a2 > a2)
  {
    uint64_t v14 = BaseAddress;
    uint64_t v15 = 0;
    size_t v16 = v19 * Width;
    do
    {
      memcpy(&__b[BytesPerRow * a2 + v15], &v14[v15], v16);
      v15 += BytesPerRow;
      --Height;
    }
    while (Height);
  }
  if (a4)
  {
    if (a2) {
      memset(__b, a4, BytesPerRow * a2);
    }
    if (v12 < v20) {
      memset(&__b[BytesPerRow * v12], a4, BytesPerRow * v21);
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v17 = pixelBufferOut;

  return v17;
}

void sub_260D04004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

IOSurface *createSurfaceWithBBox(IOSurface *a1, float a2, CGRect a3)
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  size_t v8 = a1;
  int v9 = [(IOSurface *)v8 pixelFormat];
  uint64_t v10 = [(IOSurface *)v8 width];
  uint64_t v11 = [(IOSurface *)v8 height];
  int v12 = -16777216;
  int v13 = 16711680;
  int v14 = 0xFFFF;
  if (v9 > 1111970368)
  {
    if (v9 != 1111970369)
    {
      int v15 = 1380401729;
LABEL_6:
      if (v9 != v15) {
        goto LABEL_8;
      }
    }
  }
  else if (v9 != 32)
  {
    int v15 = 1094862674;
    goto LABEL_6;
  }
  int v12 = 0;
  int v13 = (int)(float)(a2 * 255.0) << 16;
  int v14 = ((int)(float)((float)(1.0 - a2) * 255.0) << 8) | 0xFF;
LABEL_8:
  size_t v16 = [(IOSurface *)v8 vg_basicProperties];
  CVPixelBufferRef v17 = (void *)[v16 mutableCopy];

  CFDictionaryRef v18 = (IOSurface *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v17];
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v44, v8, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v40, v18, 0);
  double v19 = (double)(unint64_t)(v10 - 1);
  int v20 = (int)(x * v19);
  if (v20 <= 2) {
    int v21 = 2;
  }
  else {
    int v21 = (int)(x * v19);
  }
  int v22 = v20 + 2;
  if ((int)v10 - 1 >= v22) {
    int v23 = v22;
  }
  else {
    int v23 = v10 - 1;
  }
  double v24 = (double)(unint64_t)(v11 - 1);
  int v25 = (int)(y * v24);
  if (v25 <= 2) {
    int v26 = 2;
  }
  else {
    int v26 = (int)(y * v24);
  }
  int v27 = v25 + 2;
  if ((int)v11 - 1 >= v27) {
    int v28 = v27;
  }
  else {
    int v28 = v11 - 1;
  }
  if ((int)v10 - 1 >= (int)((x + width) * v19 + 2.0)) {
    int v29 = (int)((x + width) * v19 + 2.0);
  }
  else {
    int v29 = v10 - 1;
  }
  if ((int)v11 - 1 >= (int)((y + height) * v24 + 2.0)) {
    int v30 = (int)((y + height) * v24 + 2.0);
  }
  else {
    int v30 = v11 - 1;
  }
  if (v11)
  {
    unint64_t v31 = 0;
    unint64_t v32 = (v21 - 2);
    unint64_t v33 = (v26 - 2);
    do
    {
      if (v10)
      {
        for (unint64_t i = 0; i != v10; ++i)
        {
          BOOL v38 = i >= v23
             && i <= ((int)((x + width) * v19 + -2.0) & ~((int)((x + width) * v19 + -2.0) >> 31))
             && v31 >= v28
             && v31 <= ((int)((y + height) * v24 + -2.0) & ~((int)((y + height) * v24 + -2.0) >> 31));
          if (i < v32 || i > v29 || v31 < v33 || v31 > v30 || v38) {
            *(_DWORD *)(v41 + v42 * v31 + v43 * i) = *(_DWORD *)((char *)v44[2]
          }
                                                               + (unint64_t)v44[3] * v31
                                                               + (unint64_t)v44[4] * i);
          else {
            *(_DWORD *)(v41 + v42 * v31 + v43 * i) = v14 | v13 | v12;
          }
        }
      }
      ++v31;
    }
    while (v31 != v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v40);
  vg::IOSurfaceData::~IOSurfaceData(v44);

  return v18;
}

void sub_260D04318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

id createSurfaceWithOffsetAndPad(void *a1, unsigned int a2, double a3, __n128 a4)
{
  void v37[4] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v6 = [v5 pixelFormat];
  id v7 = objc_alloc(MEMORY[0x263F0ED00]);
  v36[0] = *MEMORY[0x263F0ECF8];
  size_t v8 = [NSNumber numberWithInt:LODWORD(a3)];
  v37[0] = v8;
  v36[1] = *MEMORY[0x263F0ECC0];
  int v9 = [NSNumber numberWithInt:HIDWORD(a3)];
  v37[1] = v9;
  v36[2] = *MEMORY[0x263F0ECA0];
  uint64_t v10 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v5, "bytesPerElement"));
  v37[2] = v10;
  v36[3] = *MEMORY[0x263F0ECC8];
  uint64_t v11 = [NSNumber numberWithUnsignedInt:v6];
  v37[3] = v11;
  int v12 = [NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:4];
  int v13 = (void *)[v7 initWithProperties:v12];

  [v13 lockWithOptions:0 seed:0];
  [v5 lockWithOptions:0 seed:0];
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 3221225472;
  v34[2] = ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke;
  void v34[3] = &unk_265570218;
  id v14 = v13;
  id v35 = v14;
  int v15 = (void (**)(void))MEMORY[0x261227FC0](v34);
  v32[0] = MEMORY[0x263EF8330];
  v32[1] = 3221225472;
  v32[2] = ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke_2;
  v32[3] = &unk_265570218;
  id v16 = v5;
  id v33 = v16;
  CVPixelBufferRef v17 = (void (**)(void))MEMORY[0x261227FC0](v32);
  memset(&src, 0, sizeof(src));
  if (v16) {
    objc_msgSend(v16, "vg_vImageBuffer");
  }
  memset(&dest, 0, sizeof(dest));
  if (v14) {
    objc_msgSend(v14, "vg_vImageBuffer");
  }
  int v18 = objc_msgSend(v14, "height", *(_OWORD *)&a4);
  int v19 = [v16 height];
  v20.i32[0] = v25;
  *(_OWORD *)&transform.a = xmmword_260D23FE0;
  v20.i32[1] = v18 - v19 - v26;
  *(float32x2_t *)&transform.tdouble x = vcvt_f32_s32(v20);
  if ((int)v6 <= 1278226533)
  {
    if (v6 == 32 || v6 == 1094862674)
    {
LABEL_13:
      *(_DWORD *)backColor = 16843009 * a2;
      vImageAffineWarp_ARGB8888(&src, &dest, 0, &transform, backColor, 4u);
      goto LABEL_15;
    }
    int v21 = 1111970369;
LABEL_12:
    if (v6 != v21) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v6 != 1278226534 && v6 != 1717855600)
  {
    int v21 = 1380401729;
    goto LABEL_12;
  }
  vImageAffineWarp_PlanarF(&src, &dest, 0, &transform, (float)a2 / 255.0, 4u);
LABEL_15:
  id v22 = v14;
  v17[2](v17);

  v15[2](v15);

  return v22;
}

void sub_260D04760(_Unwind_Exception *a1)
{
  v4[2](v4);

  v3[2](v3);
  _Unwind_Resume(a1);
}

uint64_t ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z29createSurfaceWithOffsetAndPadP9IOSurfacehDv2_iS1__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

IOSurface *create32FloatSurfaceResizedToSquareWithPad(void *a1, int32x2_t *a2, float a3)
{
  v61[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1;
  unint64_t v6 = [(IOSurface *)v5 height];
  unint64_t v7 = [(IOSurface *)v5 width];
  if (v6 == v7)
  {
    size_t v8 = v5;
    *a2 = 0;
    a2[1] = vdup_n_s32(v6);
  }
  else
  {
    unint64_t v9 = v6 - v7;
    if (v6 <= v7)
    {
      id v29 = objc_alloc(MEMORY[0x263F0ED00]);
      v58[0] = *MEMORY[0x263F0ECF8];
      int v30 = [NSNumber numberWithUnsignedLong:v7];
      v59[0] = v30;
      v58[1] = *MEMORY[0x263F0ECC0];
      unint64_t v31 = [NSNumber numberWithUnsignedLong:v7];
      uint64_t v32 = *MEMORY[0x263F0ECA0];
      v59[1] = v31;
      v59[2] = &unk_270CFDD98;
      uint64_t v33 = *MEMORY[0x263F0ECC8];
      v58[2] = v32;
      v58[3] = v33;
      v59[3] = &unk_270CFDDB0;
      OSType v34 = [NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:4];
      size_t v8 = (IOSurface *)[v29 initWithProperties:v34];

      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v54, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v50, v8, 0);
      unint64_t v35 = (v7 - v6) >> 1;
      unint64_t v36 = v35 + v6;
      if (v7)
      {
        unint64_t v37 = 0;
        BOOL v38 = v51;
        uint64_t v39 = v52;
        uint64_t v40 = -(uint64_t)v35;
        uint64_t v41 = v53;
        do
        {
          BOOL v43 = v37 >= v35 && v37 < v36;
          uint64_t v44 = v57;
          uint64_t v45 = (float *)(v55 + v56 * v40);
          uint64_t v46 = v38;
          unint64_t v47 = v7;
          do
          {
            float v48 = a3;
            if (v43) {
              float v48 = *v45;
            }
            float *v46 = v48;
            uint64_t v45 = (float *)((char *)v45 + v44);
            uint64_t v46 = (float *)((char *)v46 + v41);
            --v47;
          }
          while (v47);
          ++v37;
          ++v40;
          BOOL v38 = (float *)((char *)v38 + v39);
        }
        while (v37 != v7);
      }
      v27.i32[0] = 0;
      v27.i32[1] = -(int)v35;
      v28.i32[0] = v7;
      v28.i32[1] = v36 + ((v7 - v6) & 1);
    }
    else
    {
      id v10 = objc_alloc(MEMORY[0x263F0ED00]);
      v60[0] = *MEMORY[0x263F0ECF8];
      uint64_t v11 = [NSNumber numberWithUnsignedLong:v6];
      v61[0] = v11;
      v60[1] = *MEMORY[0x263F0ECC0];
      int v12 = [NSNumber numberWithUnsignedLong:v6];
      uint64_t v13 = *MEMORY[0x263F0ECA0];
      v61[1] = v12;
      v61[2] = &unk_270CFDD98;
      uint64_t v14 = *MEMORY[0x263F0ECC8];
      v60[2] = v13;
      v60[3] = v14;
      v61[3] = &unk_270CFDDB0;
      int v15 = [NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:4];
      size_t v8 = (IOSurface *)[v10 initWithProperties:v15];

      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v54, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v50, v8, 0);
      uint64_t v16 = 0;
      unint64_t v17 = v9 >> 1;
      unint64_t v18 = (v9 >> 1) + v7;
      int v19 = v51;
      uint64_t v20 = v52;
      uint64_t v21 = v53;
      do
      {
        unint64_t v22 = 0;
        uint64_t v23 = v57;
        double v24 = (float *)(v55 + v56 * v16 - v17 * v57);
        __int32 v25 = v19;
        do
        {
          float v26 = a3;
          if (v22 >= v17)
          {
            float v26 = a3;
            if (v22 < v18) {
              float v26 = *v24;
            }
          }
          float *v25 = v26;
          ++v22;
          double v24 = (float *)((char *)v24 + v23);
          __int32 v25 = (float *)((char *)v25 + v21);
        }
        while (v6 != v22);
        ++v16;
        int v19 = (float *)((char *)v19 + v20);
      }
      while (v16 != v6);
      int32x2_t v27 = (int32x2_t)-(uint64_t)(v9 >> 1);
      v28.i32[0] = v18 + (v9 & 1);
      v28.i32[1] = v6;
    }
    *a2 = v27;
    a2[1] = v28;
    vg::IOSurfaceData::~IOSurfaceData(v50);
    vg::IOSurfaceData::~IOSurfaceData(v54);
  }

  return v8;
}

void sub_260D04C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadToMatchAspectRatio<unsigned char>(__CVBuffer *a1, int a2, float a3)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  float v8 = (float)Height;
  float v9 = (float)Width / (float)Height;
  if (vabds_f32(v9, a3) >= 0.01)
  {
    if (v9 >= a3)
    {
      return createCVPixelBufferWithPadInHeight<unsigned char>(a1, (unint64_t)(float)((float)((unint64_t)(float)(v8 / a3) - Height) * 0.5), (unint64_t)(float)((float)((unint64_t)(float)(v8 / a3) - Height) * 0.5), a2);
    }
    else
    {
      uint64_t v11 = (unint64_t)(float)((float)((unint64_t)(float)(v8 * a3) - Width) * 0.5);
      return createCVPixelBufferWithPadInWidth<unsigned char>(a1, v11, v11, a2);
    }
  }
  else
  {
    CVPixelBufferRetain(a1);
    return a1;
  }
}

CVPixelBufferRef createCVPixelBufferWithPadToMatchAspectRatio<float>(__CVBuffer *a1, float a2, float a3)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  float v8 = (float)Height;
  float v9 = (float)Width / (float)Height;
  if (vabds_f32(v9, a2) >= 0.01)
  {
    if (v9 >= a2)
    {
      return createCVPixelBufferWithPadInHeight<float>(a1, (unint64_t)(float)((float)((unint64_t)(float)(v8 / a2) - Height) * 0.5), (unint64_t)(float)((float)((unint64_t)(float)(v8 / a2) - Height) * 0.5), a3);
    }
    else
    {
      uint64_t v11 = (unint64_t)(float)((float)((unint64_t)(float)(v8 * a2) - Width) * 0.5);
      return createCVPixelBufferWithPadInWidth<float>(a1, v11, v11, a3);
    }
  }
  else
  {
    CVPixelBufferRetain(a1);
    return a1;
  }
}

CVPixelBufferRef createCVPixelBufferWithPadInWidth<float>(__CVBuffer *a1, uint64_t a2, uint64_t a3, float a4)
{
  v36[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  uint64_t v12 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v35 = *MEMORY[0x263F04130];
  v36[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v13 = [NSDictionary dictionaryWithObjects:v36 forKeys:&v35 count:1];
  CVPixelBufferCreate(0, a3 + a2 + Width, Height, PixelFormatType, v13, &pixelBufferOut);
  size_t v31 = Width;
  size_t v14 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  CVPixelBufferRef pixelBuffer = a1;
  uint64_t v16 = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height)
  {
    unint64_t v17 = v16;
    size_t v18 = Height;
    uint64_t v19 = v12 * a2;
    size_t v20 = v12 * v31;
    CFDictionaryRef v30 = v13;
    uint64_t v32 = v19;
    uint64_t v21 = &BaseAddress[v19];
    size_t v22 = v18;
    do
    {
      memcpy(v21, v17, v20);
      v21 += v14;
      v17 += BytesPerRow;
      --v22;
    }
    while (v22);
    CFDictionaryRef v13 = v30;
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (a2 >= 1)
      {
        unint64_t v24 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        __int32 v25 = (float *)&BaseAddress[i * v14];
        do
        {
          *v25++ = a4;
          --v24;
        }
        while (v24 > 1);
      }
      if (a3 >= 1)
      {
        float v26 = (float *)&BaseAddress[i * v14 + v32 + v20];
        unint64_t v27 = (a3 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v26++ = a4;
          --v27;
        }
        while (v27 > 1);
      }
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v28 = pixelBufferOut;

  return v28;
}

void sub_260D0513C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBufferWithPadInHeight<float>(__CVBuffer *a1, size_t a2, uint64_t a3, float a4)
{
  v31[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  uint64_t Width = CVPixelBufferGetWidth(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  uint64_t v12 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v30 = *MEMORY[0x263F04130];
  v31[0] = MEMORY[0x263EFFA78];
  [NSDictionary dictionaryWithObjects:v31 forKeys:&v30 count:1];
  size_t v13 = Height + a2;
  size_t v14 = Height + a2 + a3;
  CFDictionaryRef v28 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate(0, Width, v14, PixelFormatType, v28, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  unint64_t v27 = a1;
  uint64_t v16 = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height + a2 > a2)
  {
    unint64_t v17 = v16;
    uint64_t v18 = 0;
    size_t v19 = v12 * Width;
    do
    {
      memcpy(&BaseAddress[BytesPerRow * a2 + v18], &v17[v18], v19);
      v18 += BytesPerRow;
      --Height;
    }
    while (Height);
  }
  if (a2)
  {
    uint64_t v20 = 0;
    do
    {
      if (Width >= 1)
      {
        uint64_t v21 = (float *)&BaseAddress[v20 * BytesPerRow];
        unint64_t v22 = (Width & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v21++ = a4;
          --v22;
        }
        while (v22 > 1);
      }
      ++v20;
    }
    while (v20 != a2);
  }
  if (v13 < v14)
  {
    do
    {
      if (Width >= 1)
      {
        uint64_t v23 = (float *)&BaseAddress[v13 * BytesPerRow];
        unint64_t v24 = (Width & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v23++ = a4;
          --v24;
        }
        while (v24 > 1);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  CVPixelBufferUnlockBaseAddress(v27, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v25 = pixelBufferOut;

  return v25;
}

void sub_260D0538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createCVPixelBuffer32BGRAFrom32ARGB(__CVBuffer *a1)
{
  v13[1] = *MEMORY[0x263EF8340];
  CVPixelBufferRef pixelBufferOut = 0;
  if (CVPixelBufferGetPixelFormatType(a1) == 1111970369)
  {
    return CVPixelBufferRetain(a1);
  }
  else
  {
    char v3 = VGLogVGMLUtilities();
    if (os_signpost_enabled(v3))
    {
      LOWORD(buf.data) = 0;
      _os_signpost_emit_with_name_impl(&dword_260C8D000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBuffer32BGRAFrom32ARGB", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
    }

    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    uint64_t v12 = *MEMORY[0x263F04130];
    v13[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v6 = [NSDictionary dictionaryWithObjects:v13 forKeys:&v12 count:1];
    CVPixelBufferCreate(0, Width, Height, 0x42475241u, v6, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    buf.data = CVPixelBufferGetBaseAddress(a1);
    buf.double height = Height;
    buf.double width = Width;
    buf.rowBytes = CVPixelBufferGetBytesPerRow(a1);
    dest.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
    dest.double height = Height;
    dest.double width = Width;
    dest.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    *(_DWORD *)permuteMap = 66051;
    vImagePermuteChannels_ARGB8888(&buf, &dest, permuteMap, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CVPixelBufferRef v7 = pixelBufferOut;

    ___Z35createCVPixelBuffer32BGRAFrom32ARGBP10__CVBuffer_block_invoke();
    return v7;
  }
}

void sub_260D055C8(_Unwind_Exception *a1)
{
}

id VGLogVGMLUtilities(void)
{
  if (VGLogVGMLUtilities(void)::onceToken != -1) {
    dispatch_once(&VGLogVGMLUtilities(void)::onceToken, &__block_literal_global_43);
  }
  uint64_t v0 = (void *)VGLogVGMLUtilities(void)::handle;

  return v0;
}

void ___Z35createCVPixelBuffer32BGRAFrom32ARGBP10__CVBuffer_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBuffer32BGRAFrom32ARGB", (const char *)&unk_260D385D9, v1, 2u);
  }
}

CVPixelBufferRef createCVPixelBuffer32ARGBFrom32BGRA(__CVBuffer *a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  CVPixelBufferRef pixelBufferOut = 0;
  if (CVPixelBufferGetPixelFormatType(a1) == 32)
  {
    return CVPixelBufferRetain(a1);
  }
  else
  {
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    uint64_t v11 = *MEMORY[0x263F04130];
    v12[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v5 = [NSDictionary dictionaryWithObjects:v12 forKeys:&v11 count:1];
    CVPixelBufferCreate(0, Width, Height, 0x20u, v5, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    src.data = CVPixelBufferGetBaseAddress(a1);
    src.double height = Height;
    src.double width = Width;
    src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
    dest.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
    dest.double height = Height;
    dest.double width = Width;
    dest.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    *(_DWORD *)permuteMap = 66051;
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CVPixelBufferRef v6 = pixelBufferOut;

    return v6;
  }
}

void sub_260D0587C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id create32BGRASurfaceFrom32RGBASurface(IOSurface *a1)
{
  uint64_t v1 = _permuteChannelsInARGB8888Surface(a1, 0x52474241u, 1111970369);

  return v1;
}

IOSurface *_permuteChannelsInARGB8888Surface(IOSurface *a1, unsigned int a2, uint64_t a3)
{
  v39[4] = *MEMORY[0x263EF8340];
  CFDictionaryRef v5 = a1;
  if ([(IOSurface *)v5 pixelFormat] == a3)
  {
    CVPixelBufferRef v6 = v5;
  }
  else
  {
    id v7 = objc_alloc(MEMORY[0x263F0ED00]);
    v38[0] = *MEMORY[0x263F0ECF8];
    float v8 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v5, "width"));
    v39[0] = v8;
    v38[1] = *MEMORY[0x263F0ECC0];
    float v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v5, "height"));
    v39[1] = v9;
    v38[2] = *MEMORY[0x263F0ECA0];
    id v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
    id v39[2] = v10;
    void v38[3] = *MEMORY[0x263F0ECC8];
    uint64_t v11 = [NSNumber numberWithUnsignedInt:a3];
    void v39[3] = v11;
    uint64_t v12 = [NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:4];
    size_t v13 = (void *)[v7 initWithProperties:v12];

    src.data = (void *)0x5247424100000020;
    *(vImagePixelCount *)((char *)&src.height + 4) = 0x4247524100000020;
    LODWORD(src.height) = 197121;
    HIDWORD(src.width) = 66051;
    src.rowBytes = 0x5247424142475241;
    uint64_t v32 = 0x2042475241;
    int v31 = 50331906;
    int v33 = 66051;
    uint64_t v34 = 0x2052474241;
    uint64_t v36 = 0x4247524152474241;
    int v35 = 33619971;
    int v37 = 50331906;
    std::unordered_map<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>>>>::unordered_map((uint64_t)v29, &src, 6);
    [v13 lockWithOptions:0 seed:0];
    [(IOSurface *)v5 lockWithOptions:0 seed:0];
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 3221225472;
    v27[2] = ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke;
    void v27[3] = &unk_265570218;
    id v14 = v13;
    id v28 = v14;
    int v15 = (void (**)(void))MEMORY[0x261227FC0](v27);
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke_2;
    v25[3] = &unk_265570218;
    uint64_t v16 = v5;
    float v26 = v16;
    unint64_t v17 = (void (**)(void))MEMORY[0x261227FC0](v25);
    uint64_t v18 = v16;
    src.data = [(IOSurface *)v18 baseAddress];
    src.double height = [(IOSurface *)v18 height];
    src.double width = [(IOSurface *)v18 width];
    src.rowBytes = [(IOSurface *)v18 bytesPerRow];
    id v19 = v14;
    dest.data = (void *)[v19 baseAddress];
    dest.double height = [v19 height];
    dest.double width = [v19 width];
    dest.rowBytes = [v19 bytesPerRow];
    unint64_t v22 = a2 | (unint64_t)(a3 << 32);
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::find<std::pair<unsigned int,unsigned int>>(v29, &v22);
    if (!v20) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    *(_DWORD *)permuteMap = *((_DWORD *)v20 + 6);
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
    CVPixelBufferRef v6 = (IOSurface *)v19;
    v17[2](v17);

    v15[2](v15);
    std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)v29);
  }

  return v6;
}

void sub_260D05D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,char a26)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

id create32ARGBSurfaceFrom32BGRASurface(IOSurface *a1)
{
  uint64_t v1 = _permuteChannelsInARGB8888Surface(a1, 0x42475241u, 32);

  return v1;
}

id create32RGBASurfaceFrom32ARGBSurface(IOSurface *a1)
{
  uint64_t v1 = _permuteChannelsInARGB8888Surface(a1, 0x20u, 1380401729);

  return v1;
}

id create32BGRASurfaceFrom32ARGBSurface(IOSurface *a1)
{
  uint64_t v1 = _permuteChannelsInARGB8888Surface(a1, 0x20u, 1111970369);

  return v1;
}

id create32ARGBSurfaceFrom32RGBASurface(IOSurface *a1)
{
  uint64_t v1 = _permuteChannelsInARGB8888Surface(a1, 0x52474241u, 32);

  return v1;
}

IOSurface *createARGBSurfaceWithColorSpace(IOSurface *a1, NSString *a2, NSString *a3)
{
  v46[4] = *MEMORY[0x263EF8340];
  CFDictionaryRef v5 = a1;
  CVPixelBufferRef v6 = a2;
  id v7 = a3;
  if ([(__CFString *)v6 isEqualToString:v7])
  {
    float v8 = v5;
  }
  else
  {
    id v9 = objc_alloc(MEMORY[0x263F0ED00]);
    v45[0] = *MEMORY[0x263F0ECF8];
    id v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v5, "width"));
    v46[0] = v10;
    v45[1] = *MEMORY[0x263F0ECC0];
    uint64_t v11 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v5, "height"));
    v46[1] = v11;
    v45[2] = *MEMORY[0x263F0ECA0];
    uint64_t v12 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
    void v46[2] = v12;
    v45[3] = *MEMORY[0x263F0ECC8];
    size_t v13 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[IOSurface pixelFormat](v5, "pixelFormat"));
    v46[3] = v13;
    id v14 = [NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:4];
    uint64_t v30 = (IOSurface *)[v9 initWithProperties:v14];

    *(void *)&srcFormat.bitsPerComponent = 0x2000000008;
    srcFormat.colorSpace = CGColorSpaceCreateWithName(v6);
    srcFormat.bitmapInfo = 4;
    memset(&srcFormat.version, 0, 20);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    id v39[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke;
    void v39[3] = &__block_descriptor_72_e5_v8__0l;
    vImage_CGImageFormat v40 = srcFormat;
    int v15 = (void (**)(void))MEMORY[0x261227FC0](v39);
    *(void *)&destFormat.bitsPerComponent = 0x2000000008;
    destFormat.colorSpace = CGColorSpaceCreateWithName(v7);
    destFormat.bitmapInfo = 4;
    memset(&destFormat.version, 0, 20);
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    void v36[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_2;
    v36[3] = &__block_descriptor_72_e5_v8__0l;
    vImage_CGImageFormat v37 = destFormat;
    uint64_t v16 = (void (**)(void))MEMORY[0x261227FC0](v36);
    vImage_Error error = 0;
    vImageConverterRef v17 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, &error);
    uint64_t v18 = v17;
    if (v17)
    {
      v34[0] = MEMORY[0x263EF8330];
      v34[1] = 3221225472;
      v34[2] = ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_11;
      void v34[3] = &__block_descriptor_40_e5_v8__0l;
      void v34[4] = v17;
      uint64_t v19 = MEMORY[0x261227FC0](v34);
      id v29 = v15;
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v44, v5, 1);
      vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v33, v30, 0);
      vImagePixelCount v20 = [*(id *)v44 width];
      vImagePixelCount v21 = [*(id *)v44 height];
      unint64_t v22 = (void *)[*(id *)v44 baseAddress];
      [*(id *)v44 bytesPerRow];
      [*(id *)v44 bytesPerElement];
      srcs.data = v22;
      srcs.double height = v21;
      srcs.double width = v20;
      srcs.rowBytes = [*(id *)v44 bytesPerRow];
      vImagePixelCount v23 = [v33[0] width];
      vImagePixelCount v24 = [v33[0] height];
      CVPixelBufferRef v25 = (void *)[v33[0] baseAddress];
      [v33[0] bytesPerRow];
      [v33[0] bytesPerElement];
      dests.data = v25;
      dests.double height = v24;
      dests.double width = v23;
      dests.rowBytes = [v33[0] bytesPerRow];
      int v15 = v29;
      vImage_Error v26 = vImageConvert_AnyToAny(v18, &srcs, &dests, 0, 0x100u);
      if (v26)
      {
        unint64_t v27 = __VGLogSharedInstance();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)vImage_Buffer buf = 134217984;
          vImage_Error v43 = v26;
          _os_log_impl(&dword_260C8D000, v27, OS_LOG_TYPE_ERROR, " Failed to convert image buffer (%zd) ", buf, 0xCu);
        }

        float v8 = 0;
      }
      else
      {
        float v8 = v30;
      }
      vg::IOSurfaceData::~IOSurfaceData(v33);
      vg::IOSurfaceData::~IOSurfaceData((id *)v44);
      (*(void (**)(uint64_t))(v19 + 16))(v19);
    }
    else
    {
      uint64_t v19 = __VGLogSharedInstance();
      if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v44 = 134217984;
        *(void *)&v44[4] = error;
        _os_log_impl(&dword_260C8D000, (os_log_t)v19, OS_LOG_TYPE_ERROR, " Failed to create image converter (error: %zd) ", v44, 0xCu);
      }
      float v8 = 0;
    }

    v16[2](v16);
    v15[2](v15);
  }

  return v8;
}

void sub_260D06464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  v14[2](v14);

  v15[2](v15);
  _Unwind_Resume(a1);
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke(uint64_t a1)
{
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_2(uint64_t a1)
{
}

void ___Z31createARGBSurfaceWithColorSpaceP9IOSurfaceP8NSStringS2__block_invoke_11(uint64_t a1)
{
}

IOSurface *createMaskedImageARGB32(IOSurface *a1, IOSurface *a2, float a3, char a4)
{
  void v32[4] = *MEMORY[0x263EF8340];
  id v7 = a1;
  float v8 = a2;
  uint64_t v9 = [(IOSurface *)v7 pixelFormat];
  uint64_t v10 = [(IOSurface *)v7 width];
  uint64_t v11 = [(IOSurface *)v7 height];
  id v12 = objc_alloc(MEMORY[0x263F0ED00]);
  v31[0] = *MEMORY[0x263F0ECF8];
  size_t v13 = [NSNumber numberWithInteger:v10];
  v32[0] = v13;
  v31[1] = *MEMORY[0x263F0ECC0];
  id v14 = [NSNumber numberWithInteger:v11];
  v32[1] = v14;
  void v31[2] = *MEMORY[0x263F0ECC8];
  int v15 = [NSNumber numberWithUnsignedInt:v9];
  void v31[3] = *MEMORY[0x263F0ECA0];
  v32[2] = v15;
  v32[3] = &unk_270CFDD98;
  uint64_t v16 = [NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:4];
  vImageConverterRef v17 = (IOSurface *)[v12 initWithProperties:v16];

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v27, v17, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v23, v7, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v22, v8, 1);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (v10)
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          if (*(float *)((char *)v22[2] + (uint64_t)v22[3] * i + (uint64_t)v22[4] * j) >= a3)
          {
            *(unsigned char *)(v28 + v29 * i + v30 * j) = *(unsigned char *)(v24 + v25 * i + v26 * j);
            *(unsigned char *)(v28 + v29 * i + v30 * j + 1) = *(unsigned char *)(v24 + v25 * i + v26 * j + 1);
            *(unsigned char *)(v28 + v29 * i + v30 * j + 2) = *(unsigned char *)(v24 + v25 * i + v26 * j + 2);
            char v20 = *(unsigned char *)(v24 + v25 * i + v26 * j + 3);
          }
          else
          {
            *(unsigned char *)(v28 + v29 * i + v30 * j) = 0;
            *(unsigned char *)(v28 + v29 * i + v30 * j + 1) = a4;
            *(unsigned char *)(v28 + v29 * i + v30 * j + 2) = a4;
            char v20 = a4;
          }
          *(unsigned char *)(v28 + v29 * i + v30 * j + 3) = v20;
        }
      }
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v22);
  vg::IOSurfaceData::~IOSurfaceData(v23);
  vg::IOSurfaceData::~IOSurfaceData(v27);

  return v17;
}

void sub_260D068C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  id v11 = va_arg(va1, id);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

IOSurface *createMaskedImage1CF32(IOSurface *a1, IOSurface *a2, float a3, float a4)
{
  void v36[4] = *MEMORY[0x263EF8340];
  id v7 = a1;
  float v8 = a2;
  uint64_t v9 = [(IOSurface *)v7 pixelFormat];
  uint64_t v10 = [(IOSurface *)v7 width];
  uint64_t v11 = [(IOSurface *)v7 height];
  id v12 = objc_alloc(MEMORY[0x263F0ED00]);
  v35[0] = *MEMORY[0x263F0ECF8];
  uint64_t v13 = [NSNumber numberWithInteger:v10];
  v36[0] = v13;
  v35[1] = *MEMORY[0x263F0ECC0];
  uint64_t v14 = [NSNumber numberWithInteger:v11];
  v36[1] = v14;
  id v35[2] = *MEMORY[0x263F0ECC8];
  uint64_t v15 = [NSNumber numberWithUnsignedInt:v9];
  v35[3] = *MEMORY[0x263F0ECA0];
  void v36[2] = v15;
  v36[3] = &unk_270CFDD98;
  uint64_t v16 = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:4];
  vImageConverterRef v17 = (IOSurface *)[v12 initWithProperties:v16];

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v34, v17, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v33, v7, 1);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v32, v8, 1);
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (float *)v32[2];
    char v20 = (char *)v32[3];
    vImagePixelCount v21 = (char *)v32[4];
    unint64_t v22 = (float *)v34[2];
    vImagePixelCount v23 = (char *)v34[3];
    uint64_t v24 = (char *)v34[4];
    do
    {
      if (v10)
      {
        uint64_t v25 = (float *)((char *)v33[2] + (uint64_t)v33[3] * v18);
        uint64_t v26 = (char *)v33[4];
        unint64_t v27 = v22;
        uint64_t v28 = v19;
        uint64_t v29 = v10;
        do
        {
          float v30 = a4;
          if (*v28 > a3) {
            float v30 = *v25;
          }
          float *v27 = v30;
          uint64_t v28 = (float *)&v21[(void)v28];
          uint64_t v25 = (float *)&v26[(void)v25];
          unint64_t v27 = (float *)&v24[(void)v27];
          --v29;
        }
        while (v29);
      }
      ++v18;
      uint64_t v19 = (float *)&v20[(void)v19];
      unint64_t v22 = (float *)&v23[(void)v22];
    }
    while (v18 != v11);
  }
  vg::IOSurfaceData::~IOSurfaceData(v32);
  vg::IOSurfaceData::~IOSurfaceData(v33);
  vg::IOSurfaceData::~IOSurfaceData(v34);

  return v17;
}

void sub_260D06BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  id v10 = va_arg(va1, id);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);
  vg::IOSurfaceData::~IOSurfaceData((id *)va1);

  _Unwind_Resume(a1);
}

id createFloat32SurfaceWithROI(void *a1, int8x16_t *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v3 = a1;
  unsigned int v4 = [v3 width];
  src.data = (void *)__PAIR64__([v3 height], v4);
  createROIRectWithEdge(a2, &src, &v29);
  if (v30)
  {
    id v5 = objc_alloc(MEMORY[0x263F0ED00]);
    v27[0] = *MEMORY[0x263F0ECF8];
    CVPixelBufferRef v6 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "width"));
    v28[0] = v6;
    v27[1] = *MEMORY[0x263F0ECC0];
    id v7 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "height"));
    v28[1] = v7;
    id v27[2] = *MEMORY[0x263F0ECC8];
    float v8 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v3, "pixelFormat"));
    void v28[2] = v8;
    void v27[3] = *MEMORY[0x263F0ECA0];
    uint64_t v9 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "bytesPerElement"));
    void v28[3] = v9;
    id v10 = [NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:4];
    uint64_t v11 = (void *)[v5 initWithProperties:v10];

    int8x16_t v18 = v29;
    [v11 lockWithOptions:0 seed:0];
    [v3 lockWithOptions:0 seed:0];
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke;
    v25[3] = &unk_265570218;
    id v12 = v11;
    id v26 = v12;
    uint64_t v13 = (void (**)(void))MEMORY[0x261227FC0](v25);
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    id v23[2] = ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke_2;
    void v23[3] = &unk_265570218;
    id v14 = v3;
    id v24 = v14;
    uint64_t v15 = (void (**)(void))MEMORY[0x261227FC0](v23);
    memset(&src, 0, sizeof(src));
    if (v14) {
      objc_msgSend(v14, "vg_vImageBuffer");
    }
    memset(&dest, 0, sizeof(dest));
    if (v12)
    {
      HIWORD(v2std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v18.i16[2];
      LOWORD(v2std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v18.i16[0];
      HIWORD(v19) = v18.i16[6];
      LOWORD(v19) = v18.i16[4];
      objc_msgSend(v12, "vg_vImageBufferWithCropOrigin:cropSize:", v20, v19);
    }
    if (vImageScale_PlanarF(&src, &dest, 0, 0)) {
      id v16 = 0;
    }
    else {
      id v16 = v12;
    }
    v15[2](v15);

    v13[2](v13);
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

void sub_260D06FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  v33[2](v33);

  v32[2](v32);
  _Unwind_Resume(a1);
}

int8x16_t *createROIRectWithEdge@<X0>(int8x16_t *result@<X0>, void *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t v3 = *result;
  float v4 = (float)result->u32[0];
  float v5 = (float)((unint64_t)result->i64[0] >> 32);
  float v6 = (float)result->i64[1];
  float v7 = (float)(*(unsigned long long *)result >> 96);
  float v8 = (float)*a2;
  float v9 = (float)HIDWORD(*a2);
  if (v4 <= v8)
  {
    BOOL v11 = v5 == v9;
    BOOL v10 = v5 >= v9;
  }
  else
  {
    BOOL v10 = 1;
    BOOL v11 = 0;
  }
  if (!v11 && v10)
  {
    BOOL v12 = 1;
    BOOL v13 = 0;
  }
  else
  {
    BOOL v13 = v6 == v8;
    BOOL v12 = v6 >= v8;
  }
  if (!v13 && v12 || v6 < v4)
  {
    BOOL v15 = 1;
    BOOL v16 = 0;
  }
  else
  {
    BOOL v16 = v7 == v9;
    BOOL v15 = v7 >= v9;
  }
  if (!v16 && v15 || v7 < v5)
  {
    char v18 = 0;
    a3->i8[0] = 0;
  }
  else
  {
    v3.u64[1] = (unint64_t)vadd_s32(vsub_s32((int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), *(int32x2_t *)v3.i8), (int32x2_t)0x100000001);
    *a3 = v3;
    char v18 = 1;
  }
  a3[1].i8[0] = v18;
  return result;
}

uint64_t ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z27createFloat32SurfaceWithROIP9IOSurfaceRKDv4_j_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

id createHorizontallyReflectedSurface(IOSurface *a1)
{
  uint8_t v47[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  uint64_t v2 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v2))
  {
    LOWORD(buf.data) = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedSurface", (const char *)&unk_260D385D9, (uint8_t *)&buf, 2u);
  }

  if (![(IOSurface *)v1 planeCount])
  {
    v46[0] = *MEMORY[0x263F0ECF8];
    id v14 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v1, "width"));
    v47[0] = v14;
    v46[1] = *MEMORY[0x263F0ECC0];
    BOOL v15 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v1, "height"));
    v47[1] = v15;
    void v46[2] = *MEMORY[0x263F0ECC8];
    BOOL v16 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[IOSurface pixelFormat](v1, "pixelFormat"));
    v47[2] = v16;
    v46[3] = *MEMORY[0x263F0ECA0];
    vImageConverterRef v17 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElement](v1, "bytesPerElement"));
    v47[3] = v17;
    unsigned int v19 = [NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:4];
    goto LABEL_7;
  }
  if ([(IOSurface *)v1 planeCount] == 2)
  {
    int8x16_t v3 = (void *)MEMORY[0x263F0ECF0];
    v43[0] = *MEMORY[0x263F0ECF0];
    float v4 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface widthOfPlaneAtIndex:](v1, "widthOfPlaneAtIndex:", 0));
    v44[0] = v4;
    float v5 = (void *)MEMORY[0x263F0ECE0];
    v43[1] = *MEMORY[0x263F0ECE0];
    float v6 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface heightOfPlaneAtIndex:](v1, "heightOfPlaneAtIndex:", 0));
    v44[1] = v6;
    float v7 = (void *)MEMORY[0x263F0ECD0];
    v43[2] = *MEMORY[0x263F0ECD0];
    float v8 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElementOfPlaneAtIndex:](v1, "bytesPerElementOfPlaneAtIndex:", 0));
    void v44[2] = v8;
    float v9 = [NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:3];
    v45[0] = v9;
    v41[0] = *v3;
    BOOL v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface widthOfPlaneAtIndex:](v1, "widthOfPlaneAtIndex:", 1));
    v42[0] = v10;
    v41[1] = *v5;
    BOOL v11 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface heightOfPlaneAtIndex:](v1, "heightOfPlaneAtIndex:", 1));
    v42[1] = v11;
    void v41[2] = *v7;
    BOOL v12 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElementOfPlaneAtIndex:](v1, "bytesPerElementOfPlaneAtIndex:", 1));
    time_t v42[2] = v12;
    BOOL v13 = [NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:3];
    v45[1] = v13;
    id v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v45 count:2];

    v39[0] = *MEMORY[0x263F0ECF8];
    BOOL v15 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface width](v1, "width"));
    v40[0] = v15;
    v39[1] = *MEMORY[0x263F0ECC0];
    BOOL v16 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface height](v1, "height"));
    v40[1] = v16;
    id v39[2] = *MEMORY[0x263F0ECC8];
    vImageConverterRef v17 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[IOSurface pixelFormat](v1, "pixelFormat"));
    id v40[2] = v17;
    void v39[3] = *MEMORY[0x263F0ECA0];
    char v18 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElement](v1, "bytesPerElement"));
    void v39[4] = *MEMORY[0x263F0ECE8];
    v40[3] = v18;
    v40[4] = v14;
    unsigned int v19 = [NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:5];

LABEL_7:
    goto LABEL_9;
  }
  unsigned int v19 = (void *)MEMORY[0x263EFFA78];
LABEL_9:
  unsigned int v20 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v19];
  [(IOSurface *)v1 lockWithOptions:0 seed:0];
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 3221225472;
  void v36[2] = ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_15;
  v36[3] = &unk_265570218;
  vImagePixelCount v21 = v1;
  vImage_CGImageFormat v37 = v21;
  unint64_t v22 = (void (**)(void))MEMORY[0x261227FC0](v36);
  [v20 lockWithOptions:0 seed:0];
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 3221225472;
  v34[2] = ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_2;
  void v34[3] = &unk_265570218;
  id v23 = v20;
  id v35 = v23;
  id v24 = (void (**)(void))MEMORY[0x261227FC0](v34);
  int v25 = [(IOSurface *)v21 pixelFormat];
  if (v25 <= 1111970368)
  {
    if (v25 > 875704437)
    {
      if (v25 == 875704438)
      {
LABEL_27:
        if (v21) {
          [(IOSurface *)v21 vg_vImageBufferOfPlaneAtIndex:0];
        }
        else {
          memset(&v38, 0, sizeof(v38));
        }
        vImage_Buffer buf = v38;
        if (v23) {
          objc_msgSend(v23, "vg_vImageBufferOfPlaneAtIndex:", 0);
        }
        else {
          memset(&v38, 0, sizeof(v38));
        }
        vImage_Buffer dest = v38;
        vImageHorizontalReflect_Planar8(&buf, &dest, 0x100u);
        if (v21) {
          [(IOSurface *)v21 vg_vImageBufferOfPlaneAtIndex:1];
        }
        else {
          memset(&v38, 0, sizeof(v38));
        }
        vImage_Buffer buf = v38;
        if (v23) {
          objc_msgSend(v23, "vg_vImageBufferOfPlaneAtIndex:", 1);
        }
        else {
          memset(&v38, 0, sizeof(v38));
        }
        vImage_Buffer dest = v38;
        vImage_Error v27 = vImageHorizontalReflect_Planar16U(&buf, &dest, 0x100u);
        goto LABEL_53;
      }
      if (v25 != 1094862674) {
        goto LABEL_34;
      }
    }
    else if (v25 != 32)
    {
      if (v25 != 875704422) {
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v25 > 1380401728)
  {
    if (v25 != 1380401729)
    {
      int v26 = 1717855600;
      goto LABEL_22;
    }
LABEL_25:
    if (v21) {
      [(IOSurface *)v21 vg_vImageBuffer];
    }
    else {
      memset(&v38, 0, sizeof(v38));
    }
    vImage_Buffer buf = v38;
    if (v23) {
      objc_msgSend(v23, "vg_vImageBuffer");
    }
    else {
      memset(&v38, 0, sizeof(v38));
    }
    vImage_Buffer dest = v38;
    vImage_Error v27 = vImageHorizontalReflect_ARGB8888(&buf, &dest, 0);
    goto LABEL_53;
  }
  if (v25 == 1111970369) {
    goto LABEL_25;
  }
  int v26 = 1278226534;
LABEL_22:
  if (v25 != v26)
  {
LABEL_34:
    uint64_t v28 = __VGLogSharedInstance();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int8x16_t v29 = vg::OSTypeToString((vg *)[(IOSurface *)v21 pixelFormat]);
      LODWORD(v38.data) = 138412290;
      *(void **)((char *)&v38.data + 4) = v29;
      _os_log_impl(&dword_260C8D000, v28, OS_LOG_TYPE_ERROR, " Format not supported: %@ ", (uint8_t *)&v38, 0xCu);
    }
    goto LABEL_54;
  }
  if (v21) {
    [(IOSurface *)v21 vg_vImageBuffer];
  }
  else {
    memset(&v38, 0, sizeof(v38));
  }
  vImage_Buffer buf = v38;
  if (v23) {
    objc_msgSend(v23, "vg_vImageBuffer");
  }
  else {
    memset(&v38, 0, sizeof(v38));
  }
  vImage_Buffer dest = v38;
  vImage_Error v27 = vImageHorizontalReflect_PlanarF(&buf, &dest, 0);
LABEL_53:
  if (v27)
  {
LABEL_54:
    id v30 = 0;
    goto LABEL_56;
  }
  id v30 = v23;
LABEL_56:
  v24[2](v24);

  v22[2](v22);
  ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke();

  return v30;
}

void sub_260D07A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  v32[2](v32);
  v31[2](v31);

  ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedSurface", (const char *)&unk_260D385D9, v1, 2u);
  }
}

uint64_t ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_15(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z34createHorizontallyReflectedSurfacePK9IOSurface_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

id createScaledSurfaceWithAspectRatio(IOSurface *a1, unint64_t a2, unint64_t a3)
{
  v49[4] = *MEMORY[0x263EF8340];
  float v5 = a1;
  id v6 = objc_alloc(MEMORY[0x263F0ED00]);
  v48[0] = *MEMORY[0x263F0ECF8];
  float v7 = [NSNumber numberWithUnsignedLong:a3];
  v49[0] = v7;
  v48[1] = *MEMORY[0x263F0ECC0];
  float v8 = [NSNumber numberWithUnsignedLong:a2];
  v49[1] = v8;
  v48[2] = *MEMORY[0x263F0ECC8];
  float v9 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[IOSurface pixelFormat](v5, "pixelFormat"));
  v49[2] = v9;
  v48[3] = *MEMORY[0x263F0ECA0];
  BOOL v10 = objc_msgSend(NSNumber, "numberWithInteger:", -[IOSurface bytesPerElement](v5, "bytesPerElement"));
  void v49[3] = v10;
  BOOL v11 = [NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:4];
  BOOL v12 = (void *)[v6 initWithProperties:v11];

  uint64_t v13 = [(IOSurface *)v5 width];
  uint64_t v14 = [(IOSurface *)v5 height];
  uint64_t v15 = [v12 width];
  uint64_t v16 = [v12 height];
  float v17 = (float)v13 / (float)v14;
  float v18 = (float)v15 / (float)v16;
  LODWORD(v19) = a3;
  if (vabds_f32(v17, v18) <= 0.01)
  {
    HIDWORD(v19) = a2;
    unint64_t v39 = v19;
    objc_msgSend(v12, "lockWithOptions:seed:", 0, 0, 0, 0);
  }
  else
  {
    float v20 = (float)a3;
    float v21 = (float)a2;
    if (v17 >= v18)
    {
      float v24 = v20 / v17;
      LODWORD(v25) = 0;
      HIDWORD(v25) = (int)(float)((float)(v21 - v24) * 0.5);
      long long v36 = v25;
      unint64_t v23 = __PAIR64__((int)v24, a3);
    }
    else
    {
      float v22 = v17 * v21;
      long long v36 = (int)(float)((float)(v20 - v22) * 0.5);
      LODWORD(v23) = (int)v22;
      HIDWORD(v23) = a2;
    }
    unint64_t v39 = v23;
    objc_msgSend(v12, "lockWithOptions:seed:", 0, 0, v36);
  }
  [(IOSurface *)v5 lockWithOptions:0 seed:0];
  v46[0] = MEMORY[0x263EF8330];
  v46[1] = 3221225472;
  void v46[2] = ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke;
  v46[3] = &unk_265570218;
  id v26 = v12;
  id v47 = v26;
  vImage_Error v27 = (void (**)(void))MEMORY[0x261227FC0](v46);
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 3221225472;
  void v44[2] = ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke_2;
  void v44[3] = &unk_265570218;
  uint64_t v28 = v5;
  uint64_t v45 = v28;
  int8x16_t v29 = (void (**)(void))MEMORY[0x261227FC0](v44);
  id v30 = v26;
  bzero((void *)[v30 baseAddress], objc_msgSend(v30, "allocationSize"));
  long long v31 = 0uLL;
  memset(&dest, 0, sizeof(dest));
  if (v30)
  {
    HIWORD(v41) = v38;
    LOWORD(v41) = v37;
    HIWORD(v4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = WORD2(v39);
    LOWORD(v4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v39;
    objc_msgSend(v30, "vg_vImageBufferWithCropOrigin:cropSize:", v41, v40);
    long long v31 = 0uLL;
  }
  *(_OWORD *)&src.data = v31;
  *(_OWORD *)&src.double width = v31;
  if (v28) {
    [(IOSurface *)v28 vg_vImageBuffer];
  }
  int v32 = [(IOSurface *)v28 pixelFormat];
  id v33 = 0;
  if (v32 <= 1278226533)
  {
    if (v32 != 32 && v32 != 1111970369)
    {
      if (v32 != 1278226488) {
        goto LABEL_24;
      }
      vImage_Error v34 = vImageScale_Planar8(&src, &dest, 0, 0);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v32 == 1278226534)
  {
LABEL_19:
    vImage_Error v34 = vImageScale_PlanarF(&src, &dest, 0, 0);
    goto LABEL_21;
  }
  if (v32 != 1380401729)
  {
    if (v32 != 1717855600) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }
LABEL_20:
  vImage_Error v34 = vImageScale_ARGB8888(&src, &dest, 0, 0);
LABEL_21:
  if (v34) {
    id v33 = 0;
  }
  else {
    id v33 = v30;
  }
LABEL_24:
  v29[2](v29);

  v27[2](v27);

  return v33;
}

void sub_260D08150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  v36[2](v36);

  v35[2](v35);
  _Unwind_Resume(a1);
}

uint64_t ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z34createScaledSurfaceWithAspectRatioPK9IOSurfacemm_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

id createCropAndScaledSurface(void *a1, int8x16_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v7 = a1;
  unsigned int v8 = [v7 width];
  dest.data = (void *)__PAIR64__([v7 height], v8);
  createROIRectWithEdge(a2, &dest, &v35);
  if (!v36)
  {
    id v21 = 0;
    goto LABEL_20;
  }
  id v9 = objc_alloc(MEMORY[0x263F0ED00]);
  v33[0] = *MEMORY[0x263F0ECF8];
  BOOL v10 = [NSNumber numberWithUnsignedLong:a4];
  v34[0] = v10;
  v33[1] = *MEMORY[0x263F0ECC0];
  BOOL v11 = [NSNumber numberWithUnsignedLong:a3];
  v34[1] = v11;
  id v33[2] = *MEMORY[0x263F0ECC8];
  BOOL v12 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "pixelFormat"));
  v34[2] = v12;
  void v33[3] = *MEMORY[0x263F0ECA0];
  uint64_t v13 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v7, "bytesPerElement"));
  void v34[3] = v13;
  uint64_t v14 = [NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:4];
  uint64_t v15 = (void *)[v9 initWithProperties:v14];

  int8x16_t v24 = v35;
  [v15 lockWithOptions:0 seed:0];
  [v7 lockWithOptions:0 seed:0];
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  void v31[2] = ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke;
  void v31[3] = &unk_265570218;
  id v16 = v15;
  id v32 = v16;
  float v17 = (void (**)(void))MEMORY[0x261227FC0](v31);
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke_2;
  void v29[3] = &unk_265570218;
  id v18 = v7;
  id v30 = v18;
  unint64_t v19 = (void (**)(void))MEMORY[0x261227FC0](v29);
  memset(&dest, 0, sizeof(dest));
  if (v16) {
    objc_msgSend(v16, "vg_vImageBuffer");
  }
  memset(&src, 0, sizeof(src));
  if (v18)
  {
    HIWORD(v26) = v24.i16[2];
    LOWORD(v26) = v24.i16[0];
    HIWORD(v25) = v24.i16[6];
    LOWORD(v25) = v24.i16[4];
    objc_msgSend(v18, "vg_vImageBufferWithCropOrigin:cropSize:", v26, v25);
  }
  int v20 = [v18 pixelFormat];
  id v21 = 0;
  if (v20 <= 1278226487)
  {
    if (v20 != 32 && v20 != 1094862674) {
      goto LABEL_19;
    }
    vImage_Error v22 = vImageScale_ARGB8888(&src, &dest, 0, 0);
  }
  else if (v20 == 1278226488)
  {
    vImage_Error v22 = vImageScale_Planar8(&src, &dest, 0, 0);
  }
  else
  {
    if (v20 != 1278226534 && v20 != 1717855600) {
      goto LABEL_19;
    }
    vImage_Error v22 = vImageScale_PlanarF(&src, &dest, 0, 0);
  }
  if (v22) {
    id v21 = 0;
  }
  else {
    id v21 = v16;
  }
LABEL_19:
  v19[2](v19);

  v17[2](v17);
LABEL_20:

  return v21;
}

void sub_260D0866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  v33[2](v33);

  v32[2](v32);
  _Unwind_Resume(a1);
}

uint64_t ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z26createCropAndScaledSurfacePK9IOSurfaceRKDv4_jmm_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

CVPixelBufferRef createMaskedImageARGB32(__CVBuffer *a1, __CVBuffer *a2, float a3)
{
  v29[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v28 = *MEMORY[0x263F04130];
  v29[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v9 = [NSDictionary dictionaryWithObjects:v29 forKeys:&v28 count:1];
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  BOOL v11 = (float *)CVPixelBufferGetBaseAddress(a2);
  BOOL v12 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v14 = CVPixelBufferGetBytesPerRow(a2);
  size_t v15 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (Height)
  {
    uint64_t v16 = 0;
    float v17 = v12 + 1;
    id v18 = BaseAddress + 1;
    do
    {
      unint64_t v19 = v18;
      int v20 = v17;
      id v21 = v11;
      for (size_t i = Width; i; --i)
      {
        float v23 = 0.0;
        if (*v21 >= 0.0)
        {
          float v23 = 1.0;
          if (*v21 <= 1.0) {
            float v23 = *v21;
          }
        }
        if (v23 <= a3)
        {
          *(_WORD *)(v20 - 1) = 32512;
          char v24 = 127;
          v20[1] = 127;
        }
        else
        {
          *(v20 - 1) = *(v19 - 1);
          *int v20 = *v19;
          v20[1] = v19[1];
          char v24 = v19[2];
        }
        void v20[2] = v24;
        ++v21;
        v20 += 4;
        v19 += 4;
      }
      ++v16;
      BOOL v11 = (float *)((char *)v11 + v14);
      v17 += v15;
      v18 += BytesPerRow;
    }
    while (v16 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v25 = pixelBuffer;

  return v25;
}

void sub_260D089A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImageARGB32WithoutThreshold(__CVBuffer *a1, __CVBuffer *a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v29 = *MEMORY[0x263F04130];
  v30[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v7 = [NSDictionary dictionaryWithObjects:v30 forKeys:&v29 count:1];
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v7, &pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  CFDictionaryRef v9 = (float *)CVPixelBufferGetBaseAddress(a2);
  BOOL v10 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v12 = CVPixelBufferGetBytesPerRow(a2);
  size_t v13 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (Height)
  {
    uint64_t v14 = 0;
    size_t v15 = v10 + 3;
    uint64_t v16 = BaseAddress + 3;
    do
    {
      float v17 = v16;
      id v18 = v15;
      unint64_t v19 = v9;
      for (size_t i = Width; i; --i)
      {
        float v21 = *v19++;
        float v22 = v21;
        if (v21 <= 1.0) {
          float v23 = v22;
        }
        else {
          float v23 = 1.0;
        }
        if (v22 >= 0.0) {
          float v24 = v23;
        }
        else {
          float v24 = 0.0;
        }
        LOBYTE(v23) = *(v17 - 3);
        *(v18 - 3) = (int)(float)(v24 * (float)LODWORD(v23));
        *(v18 - 2) = *(v17 - 2);
        *(v18 - 1) = *(v17 - 1);
        char v25 = *v17;
        v17 += 4;
        unsigned char *v18 = v25;
        v18 += 4;
      }
      ++v14;
      CFDictionaryRef v9 = (float *)((char *)v9 + v12);
      v15 += v13;
      v16 += BytesPerRow;
    }
    while (v14 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v26 = pixelBuffer;

  return v26;
}

void sub_260D08BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImageU32WithThreshold(__CVBuffer *a1, __CVBuffer *a2, float a3, char a4)
{
  v30[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v29 = *MEMORY[0x263F04130];
  v30[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v27 = [NSDictionary dictionaryWithObjects:v30 forKeys:&v29 count:1];
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v27, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v12 = (float *)CVPixelBufferGetBaseAddress(a2);
  size_t v13 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v15 = CVPixelBufferGetBytesPerRow(a2);
  size_t v16 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  if (Height)
  {
    uint64_t v17 = 0;
    id v18 = v13 + 1;
    unint64_t v19 = BaseAddress + 3;
    do
    {
      int v20 = v19;
      float v21 = v18;
      float v22 = v12;
      for (size_t i = Width; i; --i)
      {
        if (*v22 >= a3)
        {
          *(v21 - 1) = *(v20 - 3);
          *float v21 = *(v20 - 2);
          v21[1] = *(v20 - 1);
          char v24 = *v20;
        }
        else
        {
          *(v21 - 1) = a4;
          *float v21 = a4;
          char v24 = a4;
          v21[1] = a4;
        }
        void v21[2] = v24;
        ++v22;
        v21 += 4;
        v20 += 4;
      }
      ++v17;
      size_t v12 = (float *)((char *)v12 + v15);
      v18 += v16;
      v19 += BytesPerRow;
    }
    while (v17 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v25 = pixelBufferOut;

  return v25;
}

void sub_260D08E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createMaskedImage1CF32(__CVBuffer *a1, __CVBuffer *a2, float a3)
{
  v25[1] = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v24 = *MEMORY[0x263F04130];
  v25[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v22 = [NSDictionary dictionaryWithObjects:v25 forKeys:&v24 count:1];
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, v22, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  BOOL v10 = (float *)CVPixelBufferGetBaseAddress(a2);
  BOOL v11 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v13 = CVPixelBufferGetBytesPerRow(a2);
  size_t v14 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  size_t v15 = 0;
  while (v15 < CVPixelBufferGetHeight(a2))
  {
    for (size_t i = 0; i < CVPixelBufferGetWidth(a2); ++i)
    {
      float v17 = v10[i];
      int v18 = 0;
      float v19 = 0.0;
      if (v17 >= 0.0)
      {
        float v19 = 1.0;
        if (v17 <= 1.0) {
          float v19 = v10[i];
        }
      }
      if (v19 > a3) {
        int v18 = *(_DWORD *)&BaseAddress[4 * i];
      }
      *(_DWORD *)&v11[4 * i] = v18;
    }
    ++v15;
    BOOL v10 = (float *)((char *)v10 + v13);
    BaseAddress += BytesPerRow;
    v11 += v14;
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v20 = pixelBufferOut;

  return v20;
}

void sub_260D09090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

IOSurface *createThresholdedDepth1CF32(IOSurface *a1, float a2, float a3, float a4)
{
  CFDictionaryRef v7 = a1;
  id v8 = objc_alloc(MEMORY[0x263F0ED00]);
  CFDictionaryRef v9 = [(IOSurface *)v7 vg_basicProperties];
  BOOL v10 = (IOSurface *)[v8 initWithProperties:v9];

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v18, v10, 0);
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v17, v7, 1);
  for (unint64_t i = 0; i < [(IOSurface *)v7 height]; ++i)
  {
    for (unint64_t j = 0; j < [(IOSurface *)v7 width]; ++j)
    {
      float v13 = *(float *)((char *)v17[2] + (unint64_t)v17[3] * i + (unint64_t)v17[4] * j);
      if (v13 < a2 && v13 > 0.0 || v13 > a3) {
        float v13 = a4;
      }
      *(float *)((char *)v18[2] + (unint64_t)v18[3] * i + (unint64_t)v18[4] * j) = v13;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v17);
  vg::IOSurfaceData::~IOSurfaceData(v18);

  return v10;
}

void sub_260D0920C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vg::IOSurfaceData::~IOSurfaceData((id *)va);

  _Unwind_Resume(a1);
}

uint64_t vg_pixelCountAboveThreshold(IOSurface *a1, float a2)
{
  int8x16_t v3 = a1;
  uint64_t v4 = [(IOSurface *)v3 width];
  uint64_t v5 = [(IOSurface *)v3 height];
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v12, v3, 1);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    id v8 = (float *)v12[2];
    do
    {
      CFDictionaryRef v9 = v8;
      for (uint64_t i = v4; i; --i)
      {
        if (*v9 > a2) {
          ++v7;
        }
        CFDictionaryRef v9 = (float *)((char *)v9 + (unint64_t)v12[4]);
      }
      ++v6;
      id v8 = (float *)((char *)v8 + (unint64_t)v12[3]);
    }
    while (v6 != v5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  vg::IOSurfaceData::~IOSurfaceData(v12);

  return v7;
}

void sub_260D09320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CVBuffer *create16UPixelBufferFrom32FPixelBuffer(__CVBuffer *a1, float a2, float a3)
{
  uint64_t v5 = a1;
  v18[1] = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetPixelFormatType(a1) == 1278226742 || CVPixelBufferGetPixelFormatType(v5) == 1751410032)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    CVPixelBufferRef pixelBufferOut = 0;
    size_t Width = CVPixelBufferGetWidth(v5);
    size_t Height = CVPixelBufferGetHeight(v5);
    uint64_t v17 = *MEMORY[0x263F04130];
    v18[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v8 = [NSDictionary dictionaryWithObjects:v18 forKeys:&v17 count:1];
    CVPixelBufferCreate(0, Width, Height, 0x4C303136u, v8, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = v5;
    CFDictionaryRef v9 = (void (**)(void))MEMORY[0x261227FC0](v15);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke_2;
    unsigned char v14[3] = &__block_descriptor_40_e5_v8__0l;
    CVPixelBufferRef v14[4] = pixelBufferOut;
    BOOL v10 = (void (**)(void))MEMORY[0x261227FC0](v14);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&v12, 0, sizeof(v12));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &v12.data);
    vImageConvert_FTo16U(&src, &v12, a2, 1.0 / a3, 0);
    uint64_t v5 = pixelBufferOut;
    v10[2](v10);

    v9[2](v9);
  }
  return v5;
}

void sub_260D09590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke(uint64_t a1)
{
}

void ___Z19VGDumpCVPixelBufferP10__CVBufferP8NSStringf_block_invoke_2(uint64_t a1)
{
}

uint64_t writeCIImageToFile(NSString *a1, CIImage *a2, uint64_t a3, CGColorSpace *a4)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = a1;
  CFDictionaryRef v8 = a2;
  uint64_t v14 = *MEMORY[0x263F00840];
  v15[0] = MEMORY[0x263EFFA80];
  CFDictionaryRef v9 = [NSDictionary dictionaryWithObjects:v15 forKeys:&v14 count:1];
  BOOL v10 = (void *)[objc_alloc(MEMORY[0x263F00628]) initWithOptions:v9];
  BOOL v11 = [v10 PNGRepresentationOfImage:v8 format:a3 colorSpace:a4 options:MEMORY[0x263EFFA78]];
  uint64_t v12 = [v11 writeToFile:v7 atomically:0];

  return v12;
}

void sub_260D0972C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef convertRGBToGrayScale(__CVBuffer *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CVPixelBufferGetPixelFormatType(a1);
  *(void *)pre_bias = 0;
  *(void *)matridouble x = 0x1D2096404C80000;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v10 = *MEMORY[0x263F04130];
  uint64_t v11 = MEMORY[0x263EFFA78];
  CFDictionaryRef v4 = [NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  CVPixelBufferCreate(0, Width, Height, 0x4C303038u, v4, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.double height = Height;
  src.double width = Width;
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  v7.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v7.double height = Height;
  v7.double width = Width;
  v7.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  vImageMatrixMultiply_ARGB8888ToPlanar8(&src, &v7, matrix, 4096, pre_bias, 0, 0x100u);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v5 = pixelBufferOut;

  return v5;
}

void sub_260D098E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef convertPlanar8ToPlanarF(__CVBuffer *a1)
{
  v11[1] = *MEMORY[0x263EF8340];
  CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v10 = *MEMORY[0x263F04130];
  v11[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v4 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
  CVPixelBufferCreate(0, Width, Height, 0x4C303066u, v4, &pixelBufferOut);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.double height = Height;
  src.double width = Width;
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  v7.data = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v7.double height = Height;
  v7.double width = Width;
  v7.rowBytes = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  vImageConvert_Planar8toPlanarF(&src, &v7, 255.0, 0.0, 0x100u);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v5 = pixelBufferOut;

  return v5;
}

void sub_260D09A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createCroppedCVPixelBuffer(__CVBuffer *a1, size_t a2, size_t a3, size_t a4, size_t a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  size_t v9 = a4 - a2;
  if (a4 < a2 || (size_t v10 = a5 - a3, a5 < a3))
  {
    float v23 = __VGLogSharedInstance();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 134218752;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2048;
      size_t v30 = a4;
      __int16 v31 = 2048;
      size_t v32 = a5;
      _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_ERROR, " Invalid cropping window (x1 = %zu, y1 = %zu) > (x2 = %zu, y2 = %zu) ", buf, 0x2Au);
    }
    goto LABEL_17;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t v14 = Height;
  if (Width < a2 || Width < a4 || Height < a3 || Height < a5)
  {
    float v23 = __VGLogSharedInstance();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 134219264;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2048;
      size_t v30 = v9;
      __int16 v31 = 2048;
      size_t v32 = a5 - a3;
      __int16 v33 = 2048;
      size_t v34 = Width;
      __int16 v35 = 2048;
      size_t v36 = v14;
      _os_log_impl(&dword_260C8D000, v23, OS_LOG_TYPE_ERROR, " Cropping window (x1,y1) = (%zu, %zu) (width, height) = (%zu, %zu) is extending beyond input image size (width, height) = (%zu, %zu) ", buf, 0x3Eu);
    }
LABEL_17:

    return 0;
  }
  size_t v15 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v15))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v15, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateCroppedCVPixelBuffer", (const char *)&unk_260D385D9, buf, 2u);
  }

  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v27 = *MEMORY[0x263F04130];
  uint64_t v28 = MEMORY[0x263EFFA78];
  CFDictionaryRef v18 = [NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  CVPixelBufferCreate(0, v9, v10, PixelFormatType, v18, &pixelBufferOut);
  size_t v19 = CVPixelBufferGetBytesPerRow(pixelBufferOut);
  uint64_t v20 = VGGetBytesPerElementFromPixelFormat(PixelFormatType);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  *(void *)vImage_Buffer buf = (char *)CVPixelBufferGetBaseAddress(a1) + BytesPerRow * a3 + v20 * a2;
  *(void *)&uint8_t buf[8] = v10;
  *(void *)&uint8_t buf[16] = v9;
  size_t v30 = BytesPerRow;
  v25[0] = CVPixelBufferGetBaseAddress(pixelBufferOut);
  v25[1] = v10;
  void v25[2] = v9;
  v25[3] = v19;
  float v21 = (void (*)(unsigned char *, void *, void, void))VGGetResizeFunctionFromPixelFormat(PixelFormatType);
  if (v21) {
    v21(buf, v25, 0, 0);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  CVPixelBufferRef v22 = pixelBufferOut;

  ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke();
  return v22;
}

void sub_260D09DC4(_Unwind_Exception *a1)
{
  ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z26createCroppedCVPixelBufferP10__CVBuffermmmm_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCroppedCVPixelBuffer", (const char *)&unk_260D385D9, v1, 2u);
  }
}

CVPixelBufferRef createHorizontallyReflectedCVPixelBuffer(__CVBuffer *a1)
{
  uint64_t v2 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedCVPixelBuffer", (const char *)&unk_260D385D9, buf, 2u);
  }

  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke_21;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = 0;
  int8x16_t v3 = (void (**)(void))MEMORY[0x261227FC0](v9);
  CVPixelBufferGetIOSurface(a1);
  CFDictionaryRef v4 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    CVPixelBufferRef v5 = copyToIOSurfaceBackedCVPixelBuffer(a1);
    CVPixelBufferGetIOSurface(v5);
    CFDictionaryRef v4 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  }
  createHorizontallyReflectedSurface(v4);
  uint64_t v6 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v6);

  v3[2](v3);
  ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke();
  return CVPixelBufferFromIOSurface;
}

void sub_260D09FC0(_Unwind_Exception *a1)
{
  v1[2](v1);

  ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateHorizontallyReflectedCVPixelBuffer", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___Z40createHorizontallyReflectedCVPixelBufferP10__CVBuffer_block_invoke_21(uint64_t a1)
{
  uint64_t v1 = *(__CVBuffer **)(a1 + 32);
  if (v1) {
    CVPixelBufferRelease(v1);
  }
}

CVPixelBufferRef copyToIOSurfaceBackedCVPixelBuffer(__CVBuffer *a1)
{
  IOSurfaceFromCVPixelBuffer(a1);
  uint64_t v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v1);

  return CVPixelBufferFromIOSurface;
}

void sub_260D0A0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CVBuffer *create32BGRAPixelBufferFromFloatPixelBuffer(__CVBuffer *a1, Pixel_F a2, Pixel_F a3)
{
  CVPixelBufferRef v5 = a1;
  v24[1] = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetPixelFormatType(a1) == 1111970369)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    CVPixelBufferRef v21 = 0;
    CVPixelBufferRef pixelBufferOut = 0;
    size_t Width = CVPixelBufferGetWidth(v5);
    size_t Height = CVPixelBufferGetHeight(v5);
    uint64_t v23 = *MEMORY[0x263F04130];
    v24[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v8 = [NSDictionary dictionaryWithObjects:v24 forKeys:&v23 count:1];
    CVPixelBufferCreate(0, Width, Height, 0x4C303038u, v8, &pixelBufferOut);
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    void v20[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke;
    v20[3] = &__block_descriptor_40_e5_v8__0l;
    void v20[4] = pixelBufferOut;
    size_t v9 = (void (**)(void))MEMORY[0x261227FC0](v20);
    CVPixelBufferCreate(0, Width, Height, 0x42475241u, v8, &v21);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_2;
    uint64_t v19[3] = &__block_descriptor_40_e5_v8__0l;
    void v19[4] = v5;
    size_t v10 = (void (**)(void))MEMORY[0x261227FC0](v19);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    void v18[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_3;
    v18[3] = &__block_descriptor_40_e5_v8__0l;
    v18[4] = pixelBufferOut;
    uint64_t v11 = (void (**)(void))MEMORY[0x261227FC0](v18);
    CVPixelBufferLockBaseAddress(v21, 0);
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    v17[2] = ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_4;
    void v17[3] = &__block_descriptor_40_e5_v8__0l;
    void v17[4] = v21;
    uint64_t v12 = (void (**)(void))MEMORY[0x261227FC0](v17);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&dest, 0, sizeof(dest));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &dest.data);
    memset(&v14, 0, sizeof(v14));
    createvImageBufferFromLockedCVPixelBuffer(v21, &v14.data);
    vImageConvert_PlanarFtoPlanar8(&src, &dest, a2, a3, 0);
    vImageConvert_Planar8ToBGRX8888(&dest, &dest, &dest, 0xFFu, &v14, 0);
    CVPixelBufferRef v5 = v21;
    v12[2](v12);

    v11[2](v11);
    v10[2](v10);

    v9[2](v9);
  }
  return v5;
}

void sub_260D0A434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_3(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

uint64_t ___Z43create32BGRAPixelBufferFromFloatPixelBufferP10__CVBufferff_block_invoke_4(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

size_t createvImageBufferFromLockedCVPixelBuffer@<X0>(__CVBuffer *a1@<X0>, void **a2@<X8>)
{
  *a2 = CVPixelBufferGetBaseAddress(a1);
  a2[1] = (void *)CVPixelBufferGetHeight(a1);
  a2[2] = (void *)CVPixelBufferGetWidth(a1);
  size_t result = CVPixelBufferGetBytesPerRow(a1);
  a2[3] = (void *)result;
  return result;
}

__CVBuffer *create32FPixelBufferFrom16UPixelBuffer(__CVBuffer *a1, float a2, float a3)
{
  CVPixelBufferRef v5 = a1;
  v18[1] = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetPixelFormatType(a1) == 1717855600)
  {
    CVPixelBufferRetain(v5);
  }
  else
  {
    CVPixelBufferRef pixelBufferOut = 0;
    size_t Width = CVPixelBufferGetWidth(v5);
    size_t Height = CVPixelBufferGetHeight(v5);
    uint64_t v17 = *MEMORY[0x263F04130];
    v18[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v8 = [NSDictionary dictionaryWithObjects:v18 forKeys:&v17 count:1];
    CVPixelBufferCreate(0, Width, Height, 0x66646570u, v8, &pixelBufferOut);
    CVPixelBufferLockBaseAddress(v5, 1uLL);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    void v15[2] = ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = v5;
    size_t v9 = (void (**)(void))MEMORY[0x261227FC0](v15);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke_2;
    unsigned char v14[3] = &__block_descriptor_40_e5_v8__0l;
    CVPixelBufferRef v14[4] = pixelBufferOut;
    size_t v10 = (void (**)(void))MEMORY[0x261227FC0](v14);
    memset(&src, 0, sizeof(src));
    createvImageBufferFromLockedCVPixelBuffer(v5, &src.data);
    memset(&v12, 0, sizeof(v12));
    createvImageBufferFromLockedCVPixelBuffer(pixelBufferOut, &v12.data);
    vImageConvert_16UToF(&src, &v12, a2, a3, 0);
    CVPixelBufferRef v5 = pixelBufferOut;
    v10[2](v10);

    v9[2](v9);
  }
  return v5;
}

void sub_260D0A7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z38create32FPixelBufferFrom16UPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

uint64_t ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

uint64_t ___Z38create16UPixelBufferFrom32FPixelBufferP10__CVBufferff_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 0);
}

CVPixelBufferRef createDilatedPixelBuffer32BGRA(__CVBuffer *a1, vImagePixelCount a2, vImagePixelCount a3, const unsigned __int8 *a4)
{
  CVPixelBuffer32ARGBFrom32BGRA = createCVPixelBuffer32ARGBFrom32BGRA(a1);
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  void v14[2] = ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke;
  unsigned char v14[3] = &__block_descriptor_40_e5_v8__0l;
  CVPixelBufferRef v14[4] = CVPixelBuffer32ARGBFrom32BGRA;
  CFDictionaryRef v8 = (void (**)(void))MEMORY[0x261227FC0](v14);
  DilatedPixelBuffer32ARGB = createDilatedPixelBuffer32ARGB(CVPixelBuffer32ARGBFrom32BGRA, a2, a3, a4);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke_2;
  unsigned char v13[3] = &__block_descriptor_40_e5_v8__0l;
  void v13[4] = DilatedPixelBuffer32ARGB;
  size_t v10 = (void (**)(void))MEMORY[0x261227FC0](v13);
  CVPixelBufferRef CVPixelBuffer32BGRAFrom32ARGB = createCVPixelBuffer32BGRAFrom32ARGB(DilatedPixelBuffer32ARGB);
  v10[2](v10);

  v8[2](v8);
  return CVPixelBuffer32BGRAFrom32ARGB;
}

void sub_260D0A988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke(uint64_t a1)
{
}

__CVBuffer *createDilatedPixelBuffer32ARGB(__CVBuffer *a1, vImagePixelCount a2, vImagePixelCount a3, const unsigned __int8 *a4)
{
  CVPixelBufferRetain(a1);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  void v15[2] = ___Z30createDilatedPixelBuffer32ARGBP10__CVBuffermmPKh_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = a1;
  CFDictionaryRef v8 = (void (**)(void))MEMORY[0x261227FC0](v15);
  IOSurfaceBackedPixelBufferCopdouble y = vg::createIOSurfaceBackedPixelBufferCopy(a1, v9);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(IOSurfaceBackedPixelBufferCopy, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.double height = CVPixelBufferGetHeight(a1);
  src.double width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(IOSurfaceBackedPixelBufferCopy);
  dest.double height = CVPixelBufferGetHeight(IOSurfaceBackedPixelBufferCopy);
  dest.double width = CVPixelBufferGetWidth(IOSurfaceBackedPixelBufferCopy);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(IOSurfaceBackedPixelBufferCopy);
  vImage_Error v11 = vImageDilate_ARGB8888(&src, &dest, 0, 0, a4, a2, a3, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(IOSurfaceBackedPixelBufferCopy, 0);
  if (v11)
  {
    CVPixelBufferRelease(IOSurfaceBackedPixelBufferCopy);
    IOSurfaceBackedPixelBufferCopdouble y = 0;
  }
  v8[2](v8);

  return IOSurfaceBackedPixelBufferCopy;
}

void sub_260D0AB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z30createDilatedPixelBuffer32BGRAP10__CVBuffermmPKh_block_invoke_2(uint64_t a1)
{
}

void ___Z30createDilatedPixelBuffer32ARGBP10__CVBuffermmPKh_block_invoke(uint64_t a1)
{
}

CVPixelBufferRef unpremultiplyAlphaIn32ARGB(__CVBuffer *a1)
{
  v20[1] = *MEMORY[0x263EF8340];
  CVPixelBufferRef pixelBuffer = 0;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  uint64_t v19 = *MEMORY[0x263F04130];
  v20[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v4 = [NSDictionary dictionaryWithObjects:v20 forKeys:&v19 count:1];
  CVPixelBufferCreate(0, Width, Height, 0x20u, v4, &pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v6 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  CFDictionaryRef v8 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  if (Height)
  {
    uint64_t v9 = 0;
    size_t v10 = (unsigned __int8 *)(BaseAddress + 1);
    vImage_Error v11 = v8 + 3;
    do
    {
      vImage_Buffer v12 = v11;
      float v13 = v10;
      for (size_t i = Width; i; --i)
      {
        *(v12 - 3) = *(v13 - 1);
        unsigned int v15 = *(v13 - 1);
        if (*(v13 - 1))
        {
          *(v12 - 2) = 255 * *v13 / v15;
          *(v12 - 1) = 255 * v13[1] / v15;
          *vImage_Buffer v12 = 255 * v13[2] / v15;
        }
        v13 += 4;
        v12 += 4;
      }
      ++v9;
      v10 += BytesPerRow;
      v11 += v6;
    }
    while (v9 != Height);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v16 = pixelBuffer;

  return v16;
}

void sub_260D0AD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id IOSurfaceFromCVPixelBuffer(__CVBuffer *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  if (CVPixelBufferIsPlanar(a1))
  {
    v14[0] = *MEMORY[0x263F0ECF8];
    uint64_t v2 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetWidth(a1)];
    v15[0] = v2;
    v14[1] = *MEMORY[0x263F0ECC0];
    int8x16_t v3 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetHeight(a1)];
    v15[1] = v3;
    void v14[2] = *MEMORY[0x263F0ECA8];
    CFDictionaryRef v4 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetBytesPerRow(a1)];
    void v15[2] = v4;
    unsigned char v14[3] = *MEMORY[0x263F0ECC8];
    CVPixelBufferRef v5 = [NSNumber numberWithUnsignedInt:CVPixelBufferGetPixelFormatType(a1)];
    v15[3] = v5;
    size_t v6 = [NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];
  }
  else
  {
    v12[0] = *MEMORY[0x263F0ECF8];
    uint64_t v2 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetWidth(a1)];
    v13[0] = v2;
    v12[1] = *MEMORY[0x263F0ECC0];
    int8x16_t v3 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetHeight(a1)];
    v13[1] = v3;
    void v12[2] = *MEMORY[0x263F0ECA8];
    CFDictionaryRef v4 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetBytesPerRow(a1)];
    void v13[2] = v4;
    void v12[3] = *MEMORY[0x263F0ECA0];
    vImage_Buffer v7 = NSNumber;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    CVPixelBufferRef v5 = [v7 numberWithUnsignedLong:VGGetBytesPerElementFromPixelFormat(PixelFormatType)];
    unsigned char v13[3] = v5;
    v12[4] = *MEMORY[0x263F0ECC8];
    uint64_t v9 = [NSNumber numberWithUnsignedInt:CVPixelBufferGetPixelFormatType(a1)];
    void v13[4] = v9;
    size_t v6 = [NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:5];
  }
  size_t v10 = IOSurfaceFromCVPixelBufferWithProperties(a1, v6);

  return v10;
}

void sub_260D0B088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id IOSurfaceFromCVPixelBufferWithProperties(__CVBuffer *a1, void *a2)
{
  v45[3] = *MEMORY[0x263EF8340];
  id v33 = a2;
  if (CVPixelBufferIsPlanar(a1))
  {
    size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
    v44[0] = *MEMORY[0x263F0ECF8];
    CFDictionaryRef v4 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetWidth(a1)];
    v45[0] = v4;
    v44[1] = *MEMORY[0x263F0ECC0];
    CVPixelBufferRef v5 = [NSNumber numberWithUnsignedLong:CVPixelBufferGetHeight(a1)];
    v45[1] = v5;
    void v44[2] = *MEMORY[0x263F0ECC8];
    size_t v6 = [NSNumber numberWithUnsignedInt:CVPixelBufferGetPixelFormatType(a1)];
    void v45[2] = v6;
    vImage_Buffer v7 = [NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:3];
    size_t v34 = (void *)[v7 mutableCopy];

    __int16 v35 = [MEMORY[0x263EFF980] arrayWithCapacity:PlaneCount];
    if (PlaneCount)
    {
      size_t v8 = 0;
      uint64_t v9 = (void *)MEMORY[0x263F0ECE0];
      size_t v10 = (void *)MEMORY[0x263F0ECD8];
      do
      {
        v42[0] = *MEMORY[0x263F0ECF0];
        vImage_Error v11 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidthOfPlane(a1, v8));
        v43[0] = v11;
        v42[1] = *v9;
        vImage_Buffer v12 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeightOfPlane(a1, v8));
        v43[1] = v12;
        time_t v42[2] = *v10;
        float v13 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetBytesPerRowOfPlane(a1, v8));
        v43[2] = v13;
        vImage_Buffer v14 = [NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:3];

        [v35 addObject:v14];
        ++v8;
      }
      while (PlaneCount != v8);
    }
    [v34 setObject:v35 forKeyedSubscript:*MEMORY[0x263F0ECE8]];
    unsigned int v15 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v34];
    [v15 lockWithOptions:0 seed:0];
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 3221225472;
    id v40[2] = ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke;
    v40[3] = &unk_265570218;
    id v16 = v15;
    id v41 = v16;
    uint64_t v17 = (void (**)(void))MEMORY[0x261227FC0](v40);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    id v39[2] = ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke_2;
    void v39[3] = &__block_descriptor_40_e5_v8__0l;
    void v39[4] = a1;
    CFDictionaryRef v18 = (void (**)(void))MEMORY[0x261227FC0](v39);
    if (PlaneCount)
    {
      for (size_t i = 0; i != PlaneCount; ++i)
      {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, i);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, i);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, i);
        memcpy((void *)[v16 baseAddressOfPlaneAtIndex:i], BaseAddressOfPlane, HeightOfPlane * BytesPerRowOfPlane);
      }
    }
    id v23 = v16;
    v18[2](v18);

    v17[2](v17);
  }
  else
  {
    uint64_t v24 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v33];
    [v24 lockWithOptions:0 seed:0];
    v37[0] = MEMORY[0x263EF8330];
    v37[1] = 3221225472;
    v37[2] = ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke;
    v37[3] = &unk_265570218;
    id v25 = v24;
    id v38 = v25;
    CVPixelBufferRef v26 = (void (**)(void))MEMORY[0x261227FC0](v37);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    void v36[2] = ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke_2;
    v36[3] = &__block_descriptor_40_e5_v8__0l;
    void v36[4] = a1;
    uint64_t v27 = (void (**)(void))MEMORY[0x261227FC0](v36);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    id v31 = v25;
    memcpy((void *)[v31 baseAddress], BaseAddress, Height * BytesPerRow);
    id v23 = v31;
    v27[2](v27);

    v26[2](v26);
  }

  return v23;
}

void sub_260D0B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___Z40IOSurfaceFromCVPixelBufferWithPropertiesP10__CVBufferP12NSDictionaryIP8NSStringP11objc_objectE_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

void ___Z32createCVPixelBufferFromIOSurfaceP9IOSurface_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CreateCVPixelBufferFromIOSurface", (const char *)&unk_260D385D9, v1, 2u);
  }
}

CVPixelBufferRef create1C32FDepthBufferFromFilePath(NSString *a1, float a2)
{
  int8x16_t v3 = a1;
  CFDictionaryRef v4 = create1C16BufferFromFilePath(v3);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke;
  void v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v4;
  CVPixelBufferRef v5 = (void (**)(void))MEMORY[0x261227FC0](v11);
  size_t v6 = create32FPixelBufferFrom16UPixelBuffer(v4, 0.0, a2);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  _OWORD v10[2] = ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke_2;
  void v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = v6;
  vImage_Buffer v7 = (void (**)(void))MEMORY[0x261227FC0](v10);
  CVPixelBufferRef PixelBuffer1C32FFromDepth32 = createPixelBuffer1C32FFromDepth32(v6, 1.0);
  v7[2](v7);

  v5[2](v5);
  return PixelBuffer1C32FFromDepth32;
}

void sub_260D0B9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef create1C16BufferFromFilePath(NSString *a1)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  id v2 = objc_alloc(MEMORY[0x263F00650]);
  int8x16_t v3 = [NSURL fileURLWithPath:v1];
  CFDictionaryRef v4 = (void *)[v2 initWithContentsOfURL:v3];

  CVPixelBufferRef pixelBuffer = 0;
  [v4 extent];
  double v6 = v5;
  [v4 extent];
  double v8 = v7;
  uint64_t v14 = *MEMORY[0x263F04130];
  v15[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v9 = [NSDictionary dictionaryWithObjects:v15 forKeys:&v14 count:1];
  CVPixelBufferCreate(0, (unint64_t)v6, (unint64_t)v8, 0x4C303136u, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  size_t v10 = [MEMORY[0x263F00628] context];
  [v10 render:v4 toCVPixelBuffer:pixelBuffer];

  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v11 = pixelBuffer;

  return v11;
}

void sub_260D0BBB0(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke(uint64_t a1)
{
}

void ___Z34create1C32FDepthBufferFromFilePathP8NSStringf_block_invoke_2(uint64_t a1)
{
}

CVPixelBufferRef createPixelBuffer1C32FFromDepth32(__CVBuffer *a1, float a2)
{
  void v26[4] = *MEMORY[0x263EF8340];
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  id v7 = objc_alloc(MEMORY[0x263F0ED00]);
  v25[0] = *MEMORY[0x263F0ECF8];
  double v8 = [NSNumber numberWithUnsignedLong:Width];
  v26[0] = v8;
  v25[1] = *MEMORY[0x263F0ECC0];
  CFDictionaryRef v9 = [NSNumber numberWithUnsignedLong:Height];
  uint64_t v10 = *MEMORY[0x263F0ECA0];
  v26[1] = v9;
  void v26[2] = &unk_270CFDDC8;
  uint64_t v11 = *MEMORY[0x263F0ECC8];
  void v25[2] = v10;
  v25[3] = v11;
  uint64_t v26[3] = &unk_270CFDDB0;
  vImage_Buffer v12 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:4];
  float v13 = (IOSurface *)[v7 initWithProperties:v12];

  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v24, v13, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height)
  {
    uint64_t v15 = 0;
    id v16 = (char *)v24[2];
    id v17 = v24[3];
    do
    {
      if (Width)
      {
        CFDictionaryRef v18 = (float *)&BaseAddress[4 * v15 * (BytesPerRow >> 2)];
        uint64_t v19 = (float *)&v16[(void)v17 * v15];
        uint64_t v20 = 4 * Width;
        do
        {
          float v21 = *v18++;
          *v19++ = v21 * a2;
          v20 -= 4;
        }
        while (v20);
      }
      ++v15;
    }
    while (v15 != Height);
  }
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v13);
  vg::IOSurfaceData::~IOSurfaceData(v24);

  return CVPixelBufferFromIOSurface;
}

void sub_260D0BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  vg::IOSurfaceData::~IOSurfaceData(&a9);

  _Unwind_Resume(a1);
}

CVPixelBufferRef createPixelBufferDepth32From1C32F(__CVBuffer *a1, float a2)
{
  v30[5] = *MEMORY[0x263EF8340];
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  id v7 = objc_alloc(MEMORY[0x263F0ED00]);
  v29[0] = *MEMORY[0x263F0ECF8];
  double v8 = [NSNumber numberWithUnsignedLong:Width];
  v30[0] = v8;
  v29[1] = *MEMORY[0x263F0ECC0];
  CFDictionaryRef v9 = [NSNumber numberWithUnsignedLong:Height];
  v30[1] = v9;
  void v29[2] = *MEMORY[0x263F0ECA8];
  uint64_t v10 = [NSNumber numberWithUnsignedLong:BytesPerRow];
  uint64_t v11 = *MEMORY[0x263F0ECA0];
  void v30[2] = v10;
  v30[3] = &unk_270CFDDC8;
  uint64_t v12 = *MEMORY[0x263F0ECC8];
  void v29[3] = v11;
  void v29[4] = v12;
  void v30[4] = &unk_270CFDDE0;
  float v13 = [NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:5];
  uint64_t v14 = (void *)[v7 initWithProperties:v13];

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  [v14 lockWithOptions:0 seed:0];
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  id v16 = v14;
  uint64_t v17 = [v16 baseAddress];
  if (Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      if (Width)
      {
        uint64_t v19 = (float *)&BaseAddress[i * BytesPerRow];
        uint64_t v20 = (float *)(v17 + i * BytesPerRow);
        uint64_t v21 = 4 * Width;
        do
        {
          float v22 = *v19++;
          *v20++ = v22 * a2;
          v21 -= 4;
        }
        while (v21);
      }
    }
  }
  [v16 unlockWithOptions:0 seed:0];
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferRef v26 = 0;
  uint64_t v27 = *MEMORY[0x263F04130];
  uint64_t v28 = MEMORY[0x263EFFA78];
  CFDictionaryRef v23 = [NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  if (CVPixelBufferCreateWithIOSurface(0, (IOSurfaceRef)v16, v23, &v26)) {
    CVPixelBufferRef v24 = 0;
  }
  else {
    CVPixelBufferRef v24 = v26;
  }

  return v24;
}

void sub_260D0C0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double srgb2xyz(__n128 a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    __n128 v11 = a1;
    float v3 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    if (v3 <= 0.04045)
    {
      float v4 = v3 / 12.92;
    }
    else
    {
      __n128 v9 = a1;
      float v4 = powf((float)(v3 + 0.055) / 1.055, 2.4);
      a1 = v9;
    }
    __n128 v10 = a1;
    *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v4;
    float32x4_t v5 = (float32x4_t)v10;
    v5.i32[3] = a1.n128_i32[3];
    a1 = (__n128)v5;
  }
  v5.i32[3] = 0;
  float32x4_t v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v6.i32[3] = 0;
  float32x4_t v7 = vminnmq_f32(v6, (float32x4_t)xmmword_260D23E70);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_260D23FF0, v7.f32[0]), (float32x4_t)xmmword_260D24000, *(float32x2_t *)v7.f32, 1), (float32x4_t)xmmword_260D24010, v7, 2).u64[0];
  return result;
}

double srgb2linear(__n128 a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    __n128 v10 = a1;
    float v3 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    if (v3 <= 0.04045)
    {
      float v4 = v3 / 12.92;
    }
    else
    {
      __n128 v8 = a1;
      float v4 = powf((float)(v3 + 0.055) / 1.055, 2.4);
      a1 = v8;
    }
    __n128 v9 = a1;
    *(float *)((unint64_t)&v9 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) = v4;
    float32x4_t v5 = (float32x4_t)v9;
    v5.i32[3] = a1.n128_i32[3];
    a1 = (__n128)v5;
  }
  v5.i32[3] = 0;
  float32x4_t v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v6.i32[3] = 0;
  *(void *)&double result = vminnmq_f32(v6, (float32x4_t)xmmword_260D23E70).u64[0];
  return result;
}

double xyz2srgb(float32x4_t a1)
{
  uint64_t v1 = 0;
  float32x4_t v2 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_260D24020, a1.f32[0]), (float32x4_t)xmmword_260D24030, *(float32x2_t *)a1.f32, 1), (float32x4_t)xmmword_260D24040, a1, 2);
  float32x4_t v11 = v2;
  do
  {
    float32x4_t v15 = v2;
    float v3 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    if (v3 <= 0.0031308)
    {
      float v5 = v3 * 12.92;
    }
    else
    {
      float32x4_t v14 = v11;
      float32x4_t v12 = v2;
      float v4 = powf(*(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))), 0.41667);
      float32x4_t v2 = v12;
      float v5 = (float)(v4 * 1.055) + -0.055;
    }
    float32x4_t v13 = v2;
    *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))) = v5;
    float32x4_t v6 = v13;
    v6.i32[3] = v2.i32[3];
    ++v1;
    float32x4_t v2 = v6;
  }
  while (v1 != 3);
  v6.i32[3] = 0;
  float32x4_t v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  v7.i32[3] = 0;
  float32x4_t v8 = vminnmq_f32(v7, (float32x4_t)xmmword_260D23E70);
  v8.i32[3] = 0;
  float32x4_t v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  v9.i32[3] = 0;
  *(void *)&double result = vminnmq_f32(v9, (float32x4_t)xmmword_260D23E70).u64[0];
  return result;
}

double linear2srgb(__n128 a1)
{
  uint64_t v1 = 0;
  __n128 v2 = a1;
  do
  {
    __n128 v13 = v2;
    float v3 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    if (v3 <= 0.0031308)
    {
      float v5 = v3 * 12.92;
    }
    else
    {
      __n128 v12 = a1;
      __n128 v10 = v2;
      float v4 = powf(*(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))), 0.41667);
      __n128 v2 = v10;
      float v5 = (float)(v4 * 1.055) + -0.055;
    }
    __n128 v11 = v2;
    *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3))) = v5;
    float32x4_t v6 = (float32x4_t)v11;
    v6.i32[3] = v2.n128_i32[3];
    ++v1;
    __n128 v2 = (__n128)v6;
  }
  while (v1 != 3);
  v6.i32[3] = 0;
  float32x4_t v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  v7.i32[3] = 0;
  *(void *)&double result = vminnmq_f32(v7, (float32x4_t)xmmword_260D23E70).u64[0];
  return result;
}

CVPixelBufferRef createPixelBufferFromData(NSData *a1, size_t a2, size_t a3, OSType a4)
{
  v20[1] = *MEMORY[0x263EF8340];
  float32x4_t v7 = a1;
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v19 = *MEMORY[0x263F04130];
  v20[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v8 = [NSDictionary dictionaryWithObjects:v20 forKeys:&v19 count:1];
  CVPixelBufferCreate(0, a2, a3, a4, v8, &pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  uint64_t v10 = VGGetBytesPerElementFromPixelFormat(a4);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  __n128 v12 = v7;
  uint64_t v13 = [(NSData *)v12 bytes];
  if (a3)
  {
    float32x4_t v14 = (char *)v13;
    size_t v15 = v10 * a2;
    do
    {
      memcpy(BaseAddress, v14, v15);
      v14 += v15;
      BaseAddress += BytesPerRow;
      --a3;
    }
    while (a3);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferRef v16 = pixelBuffer;

  return v16;
}

void sub_260D0C6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL checkEqualSurfaces(IOSurface *a1, IOSurface *a2)
{
  float v3 = a1;
  float v4 = a2;
  if ((v3 == 0) != (v4 != 0)
    && (OSType v5 = [(IOSurface *)v3 pixelFormat], v5 == [(IOSurface *)v4 pixelFormat])
    && (uint64_t v6 = [(IOSurface *)v3 width], v6 == [(IOSurface *)v4 width])
    && (uint64_t v7 = [(IOSurface *)v3 height], v7 == [(IOSurface *)v4 height])
    && (uint64_t v8 = [(IOSurface *)v3 bytesPerRow], v8 == [(IOSurface *)v4 bytesPerRow])
    && (uint64_t v9 = [(IOSurface *)v3 planeCount], v9 == [(IOSurface *)v4 planeCount]))
  {
    [(IOSurface *)v3 lockWithOptions:1 seed:0];
    [(IOSurface *)v4 lockWithOptions:1 seed:0];
    if ([(IOSurface *)v3 planeCount])
    {
      for (unint64_t i = 0; i < [(IOSurface *)v3 planeCount]; ++i)
      {
        memset(__s1, 0, sizeof(__s1));
        if (v3) {
          [(IOSurface *)v3 vg_vImageBufferOfPlaneAtIndex:i];
        }
        __s2 = 0;
        if (v4) {
          -[IOSurface vg_vImageBufferOfPlaneAtIndex:](v4, "vg_vImageBufferOfPlaneAtIndex:", i, 0);
        }
        if (*(_OWORD *)&__s1[1] != 0 || memcmp(0, __s2, 0))
        {
          BOOL v11 = 0;
          goto LABEL_22;
        }
      }
      BOOL v11 = 1;
    }
    else
    {
      BOOL v11 = memcmp([(IOSurface *)v3 baseAddress], [(IOSurface *)objc_retainAutorelease(v4) baseAddress], [(IOSurface *)v3 height] * [(IOSurface *)v3 bytesPerRow]) == 0;
    }
LABEL_22:
    -[IOSurface unlockWithOptions:seed:](v4, "unlockWithOptions:seed:", 1, 0, __s2);
    [(IOSurface *)v3 unlockWithOptions:1 seed:0];
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void sub_260D0C954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL checkEqualPixelBuffers(__CVBuffer *a1, __CVBuffer *a2)
{
  if ((a1 == 0) == (a2 != 0)) {
    return 0;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)) {
    return 0;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  if (Width != CVPixelBufferGetWidth(a2)) {
    return 0;
  }
  size_t Height = CVPixelBufferGetHeight(a1);
  if (Height != CVPixelBufferGetHeight(a2)) {
    return 0;
  }
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  if (BytesPerRow != CVPixelBufferGetBytesPerRow(a2)) {
    return 0;
  }
  size_t v8 = CVPixelBufferGetBytesPerRow(a1);
  size_t v9 = CVPixelBufferGetHeight(a1) * v8;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  BOOL v11 = CVPixelBufferGetBaseAddress(a2);
  LODWORD(v9) = memcmp(BaseAddress, v11, v9);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v9 == 0;
}

id createSurfaceFromFilePath(NSString *a1)
{
  *(void *)((char *)&v43[1] + 4) = *MEMORY[0x263EF8340];
  uint64_t v1 = a1;
  id v38 = v1;
  __n128 v2 = [MEMORY[0x263F08850] defaultManager];
  char v3 = [v2 fileExistsAtPath:v1];

  if (v3)
  {
    id v4 = objc_alloc(MEMORY[0x263F00650]);
    OSType v5 = [NSURL fileURLWithPath:v1];
    uint64_t v6 = [v4 initWithContentsOfURL:v5];

    size_t v36 = [MEMORY[0x263F00628] context];
    [v6 extent];
    uint64_t v7 = (CGImage *)objc_msgSend(v36, "createCGImage:fromRect:", v6);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 3221225472;
    id v39[2] = ___Z25createSurfaceFromFilePathP8NSString_block_invoke;
    void v39[3] = &__block_descriptor_40_e5_v8__0l;
    void v39[4] = v7;
    uint64_t v37 = (void (**)(void))MEMORY[0x261227FC0](v39);
    size_t Width = CGImageGetWidth(v7);
    size_t Height = CGImageGetHeight(v7);
    size_t BytesPerRow = CGImageGetBytesPerRow(v7);
    size_t BitsPerComponent = CGImageGetBitsPerComponent(v7);
    int v12 = BitsPerComponent;
    uint64_t v13 = 1278226488;
    size_t v14 = BytesPerRow / Width;
    if (BytesPerRow / Width == 1 && BitsPerComponent == 8) {
      goto LABEL_32;
    }
    if (v14 == 2 && BitsPerComponent == 16)
    {
      uint64_t v13 = 1278226536;
    }
    else
    {
      if (v14 == 4 && BitsPerComponent == 8)
      {
        unsigned __int16 v22 = 16961;
      }
      else
      {
        if (v14 == 4 && BitsPerComponent == 16)
        {
          uint64_t v13 = 843264104;
          goto LABEL_32;
        }
        if (v14 != 8 || BitsPerComponent != 16)
        {
          uint64_t v20 = __VGLogSharedInstance();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)vImage_Buffer buf = 67109376;
            LODWORD(v43[0]) = v14;
            WORD2(v43[0]) = 1024;
            *(_DWORD *)((char *)v43 + 6) = v12;
            _os_log_impl(&dword_260C8D000, v20, OS_LOG_TYPE_ERROR, " Unsupported pixel format for UIImage (bytes per pixel: %d, bits per component: %d) ", buf, 0xEu);
          }
          uint64_t v21 = 0;
LABEL_38:

          v37[2](v37);
          goto LABEL_39;
        }
        unsigned __int16 v22 = 26689;
      }
      uint64_t v13 = v22 | 0x52470000u;
    }
LABEL_32:
    v40[0] = *MEMORY[0x263F0ECF8];
    CFDictionaryRef v23 = [NSNumber numberWithUnsignedLong:Width];
    v41[0] = v23;
    v40[1] = *MEMORY[0x263F0ECC0];
    size_t v35 = Height;
    CVPixelBufferRef v24 = [NSNumber numberWithUnsignedLong:Height];
    v41[1] = v24;
    id v40[2] = *MEMORY[0x263F0ECC8];
    id v25 = [NSNumber numberWithUnsignedInt:v13];
    void v41[2] = v25;
    v40[3] = *MEMORY[0x263F0ECA0];
    CVPixelBufferRef v26 = [NSNumber numberWithUnsignedLong:BytesPerRow / Width];
    void v41[3] = v26;
    void v40[4] = *MEMORY[0x263F0ECA8];
    uint64_t v27 = [NSNumber numberWithUnsignedLong:BytesPerRow];
    v41[4] = v27;
    uint64_t v20 = [NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:5];

    uint64_t v21 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v20];
    if (v21)
    {
      DataProvider = CGImageGetDataProvider(v7);
      CFDataRef v29 = CGDataProviderCopyData(DataProvider);
      BytePtr = CFDataGetBytePtr(v29);
      [v21 lockWithOptions:0 seed:0];
      id v31 = v21;
      memcpy((void *)[v31 baseAddress], BytePtr, v35 * Width * v14);
      [v31 unlockWithOptions:0 seed:0];
      CFRelease(v29);
      id v32 = v31;
    }
    else
    {
      id v33 = __VGLogSharedInstance();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_impl(&dword_260C8D000, v33, OS_LOG_TYPE_ERROR, " Failed to create IOSurface ", buf, 2u);
      }
    }
    goto LABEL_38;
  }
  uint64_t v6 = __VGLogSharedInstance();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)vImage_Buffer buf = 138412290;
    v43[0] = v1;
    _os_log_impl(&dword_260C8D000, v6, OS_LOG_TYPE_ERROR, " Path does not exist: %@ ", buf, 0xCu);
  }
  uint64_t v21 = 0;
LABEL_39:

  return v21;
}

void sub_260D0CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(void), void *a13)
{
  a12[2]();

  _Unwind_Resume(a1);
}

void ___Z25createSurfaceFromFilePathP8NSString_block_invoke(uint64_t a1)
{
}

id vg_yuvSurfaceFromFilePath(NSString *a1, unsigned int a2)
{
  id v39[2] = *MEMORY[0x263EF8340];
  size_t v30 = a1;
  createSurfaceFromFilePath(v30);
  id v31 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  char v3 = create32ARGBSurfaceFrom32RGBASurface(v31);
  id v4 = (void *)MEMORY[0x263F0ECF0];
  v37[0] = *MEMORY[0x263F0ECF0];
  OSType v5 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "width"));
  unsigned int v32 = a2;
  v38[0] = v5;
  uint64_t v6 = (void *)MEMORY[0x263F0ECE0];
  v37[1] = *MEMORY[0x263F0ECE0];
  uint64_t v7 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "height"));
  size_t v8 = (void *)MEMORY[0x263F0ECD0];
  v37[2] = *MEMORY[0x263F0ECD0];
  v38[1] = v7;
  v38[2] = &unk_270CFDDF8;
  size_t v9 = [NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:3];
  v39[0] = v9;
  v35[0] = *v4;
  uint64_t v10 = NSNumber;
  uint64_t v11 = [v3 width];
  if (v11 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  uint64_t v13 = [v10 numberWithInteger:v12 >> 1];
  v36[0] = v13;
  v35[1] = *v6;
  size_t v14 = NSNumber;
  uint64_t v15 = [v3 height];
  if (v15 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  uint64_t v17 = [v14 numberWithInteger:v16 >> 1];
  id v35[2] = *v8;
  v36[1] = v17;
  void v36[2] = &unk_270CFDE10;
  CFDictionaryRef v18 = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:3];
  v39[1] = v18;
  uint64_t v19 = [MEMORY[0x263EFF8C0] arrayWithObjects:v39 count:2];

  uint64_t v20 = [v3 width];
  uint64_t v21 = MEMORY[0x261227090](*MEMORY[0x263F0ED50], v20);
  id v22 = objc_alloc(MEMORY[0x263F0ED00]);
  v33[0] = *MEMORY[0x263F0ECF8];
  CFDictionaryRef v23 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "width"));
  v34[0] = v23;
  v33[1] = *MEMORY[0x263F0ECC0];
  CVPixelBufferRef v24 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v3, "height"));
  v34[1] = v24;
  id v33[2] = *MEMORY[0x263F0ECC8];
  id v25 = [NSNumber numberWithUnsignedInt:v32];
  v34[2] = v25;
  void v33[3] = *MEMORY[0x263F0ECA8];
  CVPixelBufferRef v26 = [NSNumber numberWithInteger:v21];
  void v33[4] = *MEMORY[0x263F0ECE8];
  void v34[3] = v26;
  void v34[4] = v19;
  uint64_t v27 = [NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:5];
  uint64_t v28 = (void *)[v22 initWithProperties:v27];

  objc_msgSend(v3, "vg_convertARGB8888To420Yp8_CbCr8:", v28);

  return v28;
}

void sub_260D0D3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef create32BGRABufferFrom32RGBAFilePath(NSString *a1)
{
  createSurfaceFromFilePath(a1);
  uint64_t v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  __n128 v2 = v1;
  if (v1)
  {
    create32BGRASurfaceFrom32RGBASurface(v1);
    char v3 = (__IOSurface *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferRef pixelBufferOut = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0, &pixelBufferOut);
    CVPixelBufferRef v4 = pixelBufferOut;
  }
  else
  {
    CVPixelBufferRef v4 = 0;
  }

  return v4;
}

void sub_260D0D558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef create32ARGBBufferFrom32RGBAFilePath(NSString *a1)
{
  createSurfaceFromFilePath(a1);
  uint64_t v1 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  __n128 v2 = v1;
  if (v1)
  {
    create32ARGBSurfaceFrom32RGBASurface(v1);
    char v3 = (__IOSurface *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferRef pixelBufferOut = 0;
    CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x263EFFB08], v3, 0, &pixelBufferOut);
    CVPixelBufferRef v4 = pixelBufferOut;
  }
  else
  {
    CVPixelBufferRef v4 = 0;
  }

  return v4;
}

void sub_260D0D5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef createYCbCrBufferFrom32RGBAFilePath(NSString *a1)
{
  uint64_t v1 = a1;
  __n128 v2 = create32ARGBBufferFrom32RGBAFilePath(v1);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  id v7[2] = ___Z35createYCbCrBufferFrom32RGBAFilePathP8NSString_block_invoke;
  void v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v2;
  char v3 = (void (**)(void))MEMORY[0x261227FC0](v7);
  CVPixelBufferRef YCbCrFromARGB = vg::createYCbCrFromARGB(v2, v4);
  v3[2](v3);

  return YCbCrFromARGB;
}

void sub_260D0D6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z35createYCbCrBufferFrom32RGBAFilePathP8NSString_block_invoke(uint64_t a1)
{
}

__n128 getImageBBoxAboveThreshold(__CVBuffer *a1, float a2)
{
  CVPixelBufferRef v4 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetImageBBoxAboveThreshold", (const char *)&unk_260D385D9, buf, 2u);
  }

  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  if (Width < 1)
  {
    long long v17 = 0u;
  }
  else
  {
    int v7 = Height;
    long long v17 = 0u;
    if (Height > 0)
    {
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 3221225472;
      void v18[2] = ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke_38;
      v18[3] = &__block_descriptor_40_e5_v8__0l;
      v18[4] = a1;
      size_t v9 = (void (**)(void))MEMORY[0x261227FC0](v18);
      BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
      uint64_t v11 = 0;
      *(void *)&long long v12 = __PAIR64__(v7, Width);
      int8x8_t v13 = 0;
      do
      {
        for (uint64_t i = 0; i != Width; ++i)
        {
          if (BaseAddress[i] > a2)
          {
            int8x8_t v15 = vbsl_s8((int8x8_t)vcgtd_s64((int)v12, i), (int8x8_t)__PAIR64__(DWORD1(v12), i), *(int8x8_t *)&v12);
            int8x8_t v13 = vbsl_s8((int8x8_t)vcgtd_s64(i, v13.i32[0]), (int8x8_t)__PAIR64__(v13.u32[1], i), v13);
            *(int8x8_t *)&long long v12 = vbsl_s8((int8x8_t)vcgtd_s64(v15.i32[1], v11), (int8x8_t)__PAIR64__(v11, v15.u32[0]), v15);
            if (v11 > v13.i32[1]) {
              v13.i32[1] = v11;
            }
          }
        }
        ++v11;
        BaseAddress = (float *)((char *)BaseAddress + BytesPerRow);
      }
      while (v11 != v7);
      long long v17 = v12;
      v9[2](v9);
    }
  }
  ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke();
  return (__n128)v17;
}

void sub_260D0D930(_Unwind_Exception *a1)
{
  ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke();
  _Unwind_Resume(a1);
}

void ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke()
{
  uint64_t v0 = VGLogVGMLUtilities();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetImageBBoxAboveThreshold", (const char *)&unk_260D385D9, v1, 2u);
  }
}

uint64_t ___Z26getImageBBoxAboveThresholdP10__CVBufferf_block_invoke_38(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

CVPixelBufferRef createZeroPixelBuffer(size_t a1, size_t a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v12 = *MEMORY[0x263F04130];
  v13[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v4 = [NSDictionary dictionaryWithObjects:v13 forKeys:&v12 count:1];
  if (CVPixelBufferCreate(0, a2, a1, 0x20u, v4, &pixelBuffer))
  {
    CVPixelBufferRef v5 = 0;
  }
  else
  {
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    if (Height)
    {
      size_t v9 = BaseAddress;
      do
      {
        if (BytesPerRow) {
          bzero(v9, BytesPerRow);
        }
        v9 += BytesPerRow;
        --Height;
      }
      while (Height);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferRef v5 = pixelBuffer;
  }

  return v5;
}

void sub_260D0DB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_260D0DBA4(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL64_resizeCVPixelBufferTovImageBufferUsingNearestNeighborResamplingP10__CVBuffermmPv_block_invoke(uint64_t a1)
{
}

void ___ZL18VGLogVGMLUtilitiesv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGMLUtilities");
  uint64_t v1 = (void *)VGLogVGMLUtilities(void)::handle;
  VGLogVGMLUtilities(void)::handle = (uint64_t)v0;
}

void sub_260D0DC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___ZL33_permuteChannelsInARGB8888SurfaceP9IOSurfacejj_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t std::unordered_map<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>>>>::unordered_map(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 12 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>> const&>(a1, a2, (uint64_t)a2);
      a2 = (void *)((char *)a2 + 12);
      v5 -= 12;
    }
    while (v5);
  }
  return a1;
}

void sub_260D0DCD4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::pair<std::pair<unsigned int,unsigned int> const,std::array<unsigned char,4ul>> const&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v6 && *((_DWORD *)v11 + 5) == HIDWORD(v6)) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v7;
  void v11[2] = *(void *)a3;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a3 + 8);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *v11 = *v21;
LABEL_42:
    *uint64_t v21 = v11;
    goto LABEL_43;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_260D0DF04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::find<std::pair<unsigned int,unsigned int>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = __ROR8__(*a2, 32);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (double result = *v7; result; double result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v4 == v9)
    {
      if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == HIDWORD(v3)) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v2) {
          v9 %= *(void *)&v2;
        }
      }
      else
      {
        v9 &= *(void *)&v2 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

uint64_t ___ZL32IOSurfaceFromPlanarCVPixelBufferP10__CVBuffer_block_invoke_2(uint64_t a1)
{
  return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 32), 1uLL);
}

BOOL vg::shared::MemoryFootprint::isValid(vg::shared::MemoryFootprint *this)
{
  return *(void *)this && *((void *)this + 1) != 0;
}

float vg::shared::MemoryFootprint::toMiB(vg::shared::MemoryFootprint *this)
{
  return (float)(unint64_t)this * 0.00000095367;
}

uint64_t vg::shared::GetMemoryFootprint(vg::shared *this)
{
  mach_msg_type_number_t task_info_outCnt = 93;
  if (task_info(*MEMORY[0x263EF8960], 0x16u, task_info_out, &task_info_outCnt)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t vg::shared::MemoryUsage(vg::shared *this)
{
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)task_info_out = 0u;
  mach_msg_type_number_t task_info_outCnt = 12;
  task_info(*MEMORY[0x263EF8960], 0x14u, task_info_out, &task_info_outCnt);
  return *(void *)&task_info_out[2];
}

__uint64_t vg::shared::Time(vg::shared *this)
{
  return clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
}

IOSurface *vg::shared::remapImage(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v2 = MTLCreateSystemDefaultDevice();
  int v3 = [*(id *)a1 pixelFormat];
  if (v3 == 32)
  {
    create32BGRASurfaceFrom32ARGBSurface(*(IOSurface **)a1);
    uint64_t v5 = 81;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v3 != 1278226534)
    {
      unint64_t v22 = 0;
      goto LABEL_18;
    }
    id v4 = *(id *)a1;
    uint64_t v5 = 55;
  }
  id v31 = v4;
  uint64_t v28 = vg::shared::createMetalTextureFromSurface(v2, v4, 1, @"remappedImage");
  uint64_t v27 = vg::shared::createMetalTextureFromSurface(v2, *(void **)(a1 + 8), 1, @"remapLut");
  uint64_t v39 = *(void *)(a1 + 16);
  int32x2_t v38 = vmovn_s64(*(int64x2_t *)(a1 + 32));
  char v37 = *(unsigned char *)(a1 + 48);
  size_t v30 = (void *)[v2 newCommandQueue];
  CFDataRef v29 = vg::shared::sharedShaderLibrary((vg::shared *)[v30 setLabel:@"com.apple.visage.imageUndistortion.queue"]);
  unsigned int v32 = [v30 commandBuffer];
  int32x2_t v6 = vsub_s32(*(int32x2_t *)(a1 + 24), *(int32x2_t *)(a1 + 16));
  id v25 = [MEMORY[0x263F12A50] texture2DDescriptorWithPixelFormat:v5 width:v6.i32[0] height:v6.i32[1] mipmapped:0];
  [v25 setUsage:3];
  uint64_t v7 = (void *)[v2 newTextureWithDescriptor:v25];
  void v36[3] = 0;
  CVPixelBufferRef v24 = (void *)[v29 newFunctionWithName:@"remapImage"];
  unint64_t v8 = objc_msgSend(v2, "newComputePipelineStateWithFunction:error:");
  id v26 = 0;
  if (!v8)
  {
    unint64_t v9 = __VGLogSharedInstance();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 138412290;
      id v43 = v26;
      _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_ERROR, " Failed to create image undistortion pipeline, error %@ ", buf, 0xCu);
    }
    unint64_t v22 = 0;
    goto LABEL_17;
  }
  unint64_t v9 = [v32 computeCommandEncoder];
  [v9 setTexture:v28 atIndex:0];
  [v9 setTexture:v27 atIndex:1];
  [v9 setBytes:&v39 length:8 atIndex:0];
  [v9 setBytes:&v38 length:8 atIndex:1];
  [v9 setBytes:&v37 length:1 atIndex:2];
  [v9 setTexture:v7 atIndex:2];
  [v9 setComputePipelineState:v8];
  v36[0] = [v7 width];
  v36[1] = [v7 height];
  void v36[2] = 1;
  int64x2_t v34 = vdupq_n_s64(0x10uLL);
  uint64_t v35 = 1;
  [v9 dispatchThreads:v36 threadsPerThreadgroup:&v34];
  [v9 endEncoding];
  [v32 commit];
  [v32 waitUntilCompleted];
  id v10 = objc_alloc(MEMORY[0x263F0ED00]);
  v40[0] = *MEMORY[0x263F0ECF8];
  uint64_t v11 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "width"));
  v41[0] = v11;
  v40[1] = *MEMORY[0x263F0ECC0];
  unint64_t v12 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "height"));
  v41[1] = v12;
  id v40[2] = *MEMORY[0x263F0ECC8];
  int8x8_t v13 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v31, "pixelFormat"));
  void v41[2] = v13;
  v40[3] = *MEMORY[0x263F0ECA0];
  float v14 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v31, "bytesPerElement"));
  void v41[3] = v14;
  float v15 = [NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:4];
  BOOL v16 = (void *)[v10 initWithProperties:v15];

  [v16 lockWithOptions:0 seed:0];
  uint64_t v17 = [v7 width];
  uint64_t v18 = [v7 height];
  size_t v19 = v16;
  memset(v33, 0, 24);
  void v33[3] = v17;
  void v33[4] = v18;
  void v33[5] = 1;
  objc_msgSend(v7, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", -[IOSurface baseAddress](v19, "baseAddress"), -[IOSurface bytesPerRow](v19, "bytesPerRow"), v33, 0);
  [(IOSurface *)v19 unlockWithOptions:0 seed:0];
  OSType v20 = [(IOSurface *)v19 pixelFormat];
  if (v20 == 1111970369)
  {
    create32ARGBSurfaceFrom32BGRASurface(v19);
    uint64_t v21 = (IOSurface *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v20 != 1278226534)
    {
      unint64_t v22 = 0;
      goto LABEL_16;
    }
    uint64_t v21 = v19;
  }
  unint64_t v22 = v21;
LABEL_16:

LABEL_17:
LABEL_18:

  return v22;
}

void sub_260D0E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

IOSurface *vg::shared::inverseRemapLut(vg::shared *this, IOSurface *a2, unsigned int a3)
{
  unsigned int v4 = a2;
  v144[4] = *MEMORY[0x263EF8340];
  unsigned int v121 = this;
  int v128 = [(vg::shared *)v121 width];
  uint64_t v5 = [(vg::shared *)v121 height];
  unint64_t v120 = __PAIR64__(a3, v4);
  if (v5 >= 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v5 + 1;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v135 = 0u;
  uint64_t v7 = v6 >> 1;
  *(_OWORD *)char v133 = 0u;
  if (!v7)
  {
    int v122 = -1;
LABEL_29:
    int v124 = 0;
    do
    {
      if (v128 != 1)
      {
        int v21 = 0;
        int v22 = v124 * v128;
        CFDictionaryRef v23 = (_DWORD *)v135;
        do
        {
          int v24 = v21 + v22;
          int v25 = v21 + v22 + v128;
          int v26 = v25 + 1;
          if ((unint64_t)v23 >= *((void *)&v135 + 1))
          {
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)__p[1]) >> 2);
            unint64_t v29 = v28 + 1;
            if (v28 + 1 > 0x1555555555555555) {
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2) > v29) {
              unint64_t v29 = 0x5555555555555556 * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v30 = 0x1555555555555555;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30) {
              id v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v135 + 8, v30);
            }
            else {
              id v31 = 0;
            }
            unsigned int v32 = &v31[12 * v28];
            *(_DWORD *)unsigned int v32 = v24;
            *((_DWORD *)v32 + 1) = v25;
            *((_DWORD *)v32 + 2) = v26;
            int64x2_t v34 = __p[1];
            id v33 = (_DWORD *)v135;
            uint64_t v35 = v32;
            if ((void *)v135 != __p[1])
            {
              do
              {
                uint64_t v36 = *(void *)(v33 - 3);
                v33 -= 3;
                int v37 = v33[2];
                *(void *)(v35 - 12) = v36;
                v35 -= 12;
                *((_DWORD *)v35 + 2) = v37;
              }
              while (v33 != v34);
              id v33 = __p[1];
            }
            uint64_t v27 = v32 + 12;
            __p[1] = v35;
            *(void *)&long long v135 = v32 + 12;
            *((void *)&v135 + 1) = &v31[12 * v30];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            _DWORD *v23 = v24;
            v23[1] = v25;
            uint64_t v27 = v23 + 3;
            id v23[2] = v26;
          }
          *(void *)&long long v135 = v27;
          int v38 = v24 + 1;
          if ((unint64_t)v27 >= *((void *)&v135 + 1))
          {
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)__p[1]) >> 2);
            unint64_t v40 = v39 + 1;
            if (v39 + 1 > 0x1555555555555555) {
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2) > v40) {
              unint64_t v40 = 0x5555555555555556 * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v135 + 1) - (unint64_t)__p[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v41 = 0x1555555555555555;
            }
            else {
              unint64_t v41 = v40;
            }
            if (v41) {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,3ul>>>((uint64_t)&v135 + 8, v41);
            }
            else {
              uint64_t v42 = 0;
            }
            id v43 = &v42[12 * v39];
            *(_DWORD *)id v43 = v24;
            *((_DWORD *)v43 + 1) = v26;
            *((_DWORD *)v43 + 2) = v38;
            uint64_t v45 = __p[1];
            uint64_t v44 = (_DWORD *)v135;
            uint64_t v46 = v43;
            if ((void *)v135 != __p[1])
            {
              do
              {
                uint64_t v47 = *(void *)(v44 - 3);
                v44 -= 3;
                int v48 = v44[2];
                *(void *)(v46 - 12) = v47;
                v46 -= 12;
                *((_DWORD *)v46 + 2) = v48;
              }
              while (v44 != v45);
              uint64_t v44 = __p[1];
            }
            CFDictionaryRef v23 = v43 + 12;
            __p[1] = v46;
            *(void *)&long long v135 = v43 + 12;
            *((void *)&v135 + 1) = &v42[12 * v41];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            _DWORD *v27 = v24;
            v27[1] = v26;
            CFDictionaryRef v23 = v27 + 3;
            id v27[2] = v38;
          }
          *(void *)&long long v135 = v23;
          ++v21;
        }
        while (v21 != v128 - 1);
      }
      ++v124;
    }
    while (v124 != v122);
    goto LABEL_66;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  int v126 = v7;
  uint64_t v10 = v7;
  do
  {
    if (v128)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v9 << 32;
      do
      {
        if (v8 >= __p[0])
        {
          uint64_t v13 = (v8 - (char *)v133[0]) >> 3;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = ((char *)__p[0] - (char *)v133[0]) >> 2;
          if (v14 <= v13 + 1) {
            unint64_t v14 = v13 + 1;
          }
          if ((void *)((char *)__p[0] - (char *)v133[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IOSurface * {__strong}>>((uint64_t)__p, v15);
          }
          else {
            BOOL v16 = 0;
          }
          uint64_t v17 = &v16[8 * v13];
          *(void *)uint64_t v17 = v11 | v12;
          unint64_t v8 = v17 + 8;
          size_t v19 = (char *)v133[0];
          uint64_t v18 = (char *)v133[1];
          if (v133[1] != v133[0])
          {
            do
            {
              uint64_t v20 = *((void *)v18 - 1);
              v18 -= 8;
              *((void *)v17 - 1) = v20;
              v17 -= 8;
            }
            while (v18 != v19);
            uint64_t v18 = (char *)v133[0];
          }
          v133[0] = v17;
          v133[1] = v8;
          __p[0] = &v16[8 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(void *)unint64_t v8 = v11 | v12;
          v8 += 8;
        }
        v133[1] = v8;
        ++v11;
      }
      while (v11 != v128);
    }
    ++v9;
  }
  while (v9 != v10);
  int v122 = v126 - 1;
  if (v126 != 1) {
    goto LABEL_29;
  }
LABEL_66:
  id v49 = MTLCreateSystemDefaultDevice();
  unsigned int v50 = HIDWORD(v120);
  CGAffineTransform v51 = objc_opt_new();
  uint64_t v52 = (void *)[v49 newBufferWithBytes:v133[0] length:(char *)v133[1] - (char *)v133[0] options:0];
  uint64_t v53 = v52;
  if (v52)
  {
    [v52 setLabel:@"position"];
    uint64_t v54 = [v51 layouts];
    uint64_t v55 = [v54 objectAtIndexedSubscript:0];
    [v55 setStride:8];

    uint64_t v56 = [v51 layouts];
    uint64_t v57 = [v56 objectAtIndexedSubscript:0];
    [v57 setStepRate:1];

    CGRect v58 = [v51 layouts];
    CGRect v59 = [v58 objectAtIndexedSubscript:0];
    [v59 setStepFunction:1];

    uint64_t v60 = [v51 attributes];
    uint64_t v61 = [v60 objectAtIndexedSubscript:0];
    [v61 setFormat:37];

    uint32x4_t v62 = [v51 attributes];
    uint64_t v63 = [v62 objectAtIndexedSubscript:0];
    [v63 setOffset:0];

    id v64 = [v51 attributes];
    char v65 = [v64 objectAtIndexedSubscript:0];
    [v65 setBufferIndex:0];

    int v66 = [v49 newBufferWithBytes:__p[1] length:(void)v135 - (unint64_t)__p[1] options:0];
    int v67 = v66;
    if (v66)
    {
      [v66 setLabel:@"index"];
      id v68 = vg::shared::createMetalTextureFromSurface(v49, v121, 1, @"lut");
      if (v68)
      {
        id v69 = objc_alloc(MEMORY[0x263F0ED00]);
        v143[0] = *MEMORY[0x263F0ECF8];
        id v70 = [NSNumber numberWithUnsignedInt:v120];
        v144[0] = v70;
        v143[1] = *MEMORY[0x263F0ECC0];
        char v71 = [NSNumber numberWithUnsignedInt:HIDWORD(v120)];
        uint64_t v72 = *MEMORY[0x263F0ECC8];
        v144[1] = v71;
        v144[2] = &unk_270CFDE28;
        uint64_t v73 = *MEMORY[0x263F0ECA0];
        v143[2] = v72;
        v143[3] = v73;
        v144[3] = &unk_270CFDE40;
        id v74 = [NSDictionary dictionaryWithObjects:v144 forKeys:v143 count:4];
        v129 = (IOSurface *)[v69 initWithProperties:v74];

        vg::shared::createMetalTextureFromSurface(v49, v129, 4, @"inverseRemapLut");
        long long v125 = (vg::shared *)objc_claimAutoreleasedReturnValue();
        unsigned __int8 v75 = vg::shared::sharedShaderLibrary(v125);
        float32x2_t v76 = v75;
        unsigned int v119 = v75;
        if (v75)
        {
          std::string::size_type v127 = [v75 newFunctionWithName:@"inverseRemapLutVertexShader"];
          std::string::size_type v123 = (void *)[v76 newFunctionWithName:@"inverseRemapLutFragmentShader"];
          if (v127 && v123)
          {
            uint64_t v116 = objc_opt_new();
            [v116 setVertexFunction:v127];
            [v116 setFragmentFunction:v123];
            [v116 setVertexDescriptor:v51];
            uint64_t v77 = [(vg::shared *)v125 pixelFormat];
            id v78 = [v116 colorAttachments];
            unint64_t v79 = [v78 objectAtIndexedSubscript:0];
            [v79 setPixelFormat:v77];

            id v132 = 0;
            uint64_t v80 = [v49 newRenderPipelineStateWithDescriptor:v116 error:&v132];
            id v114 = v132;
            uint64_t v115 = (void *)v80;
            if (v80)
            {
              unint64_t v118 = [MEMORY[0x263F129A0] renderPassDescriptor];
              long long v81 = [v118 colorAttachments];
              __int16 v82 = [v81 objectAtIndexedSubscript:0];
              [v82 setTexture:v125];

              uint64_t v83 = [v118 colorAttachments];
              __int16 v84 = [v83 objectAtIndexedSubscript:0];
              [v84 setLoadAction:2];

              uint64_t v85 = [v118 colorAttachments];
              char v86 = [v85 objectAtIndexedSubscript:0];
              [v86 setStoreAction:1];

              uint64_t v87 = [v118 colorAttachments];
              uint64_t v88 = [v87 objectAtIndexedSubscript:0];
              objc_msgSend(v88, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

              unint64_t v112 = (void *)[v49 newCommandQueue];
              long long v113 = [v112 commandBuffer];
              uint64_t v117 = [v113 renderCommandEncoderWithDescriptor:v118];
              [v117 setRenderPipelineState:v115];
              unint64_t v131 = v120;
              [v117 setVertexBytes:&v131 length:8 atIndex:1];
              [v117 setVertexBuffer:v53 offset:0 atIndex:0];
              [v117 setVertexTexture:v68 atIndex:0];
              [v117 drawIndexedPrimitives:3 indexCount:(uint64_t)(v135 - (unint64_t)__p[1]) >> 2 indexType:1 indexBuffer:v67 indexBufferOffset:0 instanceCount:1];
              [v117 endEncoding];
              [v113 commit];
              [v113 waitUntilCompleted];
              id v89 = objc_alloc(MEMORY[0x263F0ED00]);
              v141[0] = *MEMORY[0x263F0ECF8];
              uint64_t v111 = [NSNumber numberWithUnsignedInt:v120];
              v142[0] = v111;
              v141[1] = *MEMORY[0x263F0ECC0];
              uint64_t v90 = [NSNumber numberWithUnsignedInt:(2 * HIDWORD(v120))];
              uint64_t v91 = *MEMORY[0x263F0ECC8];
              v142[1] = v90;
              v142[2] = &unk_270CFDE58;
              uint64_t v92 = *MEMORY[0x263F0ECA0];
              v141[2] = v91;
              v141[3] = v92;
              v142[3] = &unk_270CFDE70;
              unsigned int v93 = [NSDictionary dictionaryWithObjects:v142 forKeys:v141 count:4];
              unsigned int v94 = (IOSurface *)[v89 initWithProperties:v93];

              vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)buf, v129, 1);
              vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v130, v94, 0);
              if (HIDWORD(v120))
              {
                uint64_t v95 = 0;
                uint64_t v96 = 0;
                uint64_t v97 = v139;
                uint64_t v98 = v140;
                uint64_t v99 = (char *)v130[2];
                id v100 = v130[3];
                char v101 = (char *)v130[4];
                uint64_t v102 = (_DWORD *)(v138 + 4);
                do
                {
                  if (v120)
                  {
                    uint64_t v103 = v120;
                    std::string::size_type v104 = v99;
                    uint64_t v105 = v102;
                    do
                    {
                      *(_DWORD *)&v104[v95] = *(v105 - 1);
                      *(_DWORD *)&v104[(void)v100 * v50] = *v105;
                      uint64_t v105 = (_DWORD *)((char *)v105 + v98);
                      std::string::size_type v104 = &v101[(void)v104];
                      --v103;
                    }
                    while (v103);
                  }
                  ++v96;
                  uint64_t v102 = (_DWORD *)((char *)v102 + v97);
                  ++v50;
                  v95 += (uint64_t)v100;
                }
                while (v96 != HIDWORD(v120));
              }
              vg::IOSurfaceData::~IOSurfaceData(v130);
              vg::IOSurfaceData::~IOSurfaceData((id *)buf);

              unint64_t v106 = v118;
            }
            else
            {
              unint64_t v106 = __VGLogSharedInstance();
              if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)vImage_Buffer buf = 138412290;
                id v137 = v114;
                _os_log_impl(&dword_260C8D000, v106, OS_LOG_TYPE_ERROR, " Failed to create render pipeline state: %@ ", buf, 0xCu);
              }
              unsigned int v94 = 0;
            }

            int v109 = v116;
          }
          else
          {
            int v109 = __VGLogSharedInstance();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)vImage_Buffer buf = 0;
              _os_log_impl(&dword_260C8D000, v109, OS_LOG_TYPE_ERROR, " Failed to create inverse remap lut shader ", buf, 2u);
            }
            unsigned int v94 = 0;
          }
        }
        else
        {
          std::string::size_type v108 = __VGLogSharedInstance();
          std::string::size_type v127 = v108;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)vImage_Buffer buf = 0;
            _os_log_impl(&dword_260C8D000, v108, OS_LOG_TYPE_ERROR, " failed to load metal library. ", buf, 2u);
          }
          unsigned int v94 = 0;
        }

        p_super = &v129->super;
      }
      else
      {
        p_super = __VGLogSharedInstance();
        if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)vImage_Buffer buf = 0;
          _os_log_impl(&dword_260C8D000, p_super, OS_LOG_TYPE_ERROR, " failed to create input remap lut texture. ", buf, 2u);
        }
        unsigned int v94 = 0;
      }
    }
    else
    {
      id v68 = __VGLogSharedInstance();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_impl(&dword_260C8D000, v68, OS_LOG_TYPE_ERROR, " failed to create index buffer. ", buf, 2u);
      }
      unsigned int v94 = 0;
    }
  }
  else
  {
    int v67 = __VGLogSharedInstance();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_impl(&dword_260C8D000, v67, OS_LOG_TYPE_ERROR, " failed to create vertex buffer. ", buf, 2u);
    }
    unsigned int v94 = 0;
  }

  if (__p[1])
  {
    *(void **)&long long v135 = __p[1];
    operator delete(__p[1]);
  }
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }

  return v94;
}

void sub_260D0F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  vg::shared::detail::GridMesh::~GridMesh((vg::shared::detail::GridMesh *)&a31);
  _Unwind_Resume(a1);
}

void vg::shared::detail::GridMesh::~GridMesh(vg::shared::detail::GridMesh *this)
{
  id v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t vg::common::dumpDebugObject(vg::common *this, objc_object *a2, NSString *a3, NSString *a4)
{
  int v4 = (int)a4;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = this;
  unint64_t v8 = a2;
  uint64_t v9 = a3;
  id v17 = 0;
  uint64_t v10 = [MEMORY[0x263F08910] archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v17];
  id v11 = v17;
  if (v10)
  {
    uint64_t v12 = [(objc_object *)v8 stringByAppendingString:@".plist"];
    uint64_t v13 = [(NSString *)v9 stringByAppendingPathComponent:v12];

    uint64_t v14 = [v10 writeToFile:v13 atomically:0];
    if ((v14 & 1) == 0)
    {
      unint64_t v15 = VGLogSharedDebugDataUtilities();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        vg::common::dumpDebugObject();
      }
      goto LABEL_11;
    }
    if (v4)
    {
      unint64_t v15 = VGLogSharedDebugDataUtilities();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)vImage_Buffer buf = 138412290;
        size_t v19 = v13;
        _os_log_impl(&dword_260C8D000, v15, OS_LOG_TYPE_INFO, "Wrote %@", buf, 0xCu);
      }
LABEL_11:
    }
  }
  else
  {
    uint64_t v13 = VGLogSharedDebugDataUtilities();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      vg::common::dumpDebugObject();
    }
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_260D0FC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VGLogSharedDebugDataUtilities(void)
{
  if (VGLogSharedDebugDataUtilities(void)::onceToken != -1) {
    dispatch_once(&VGLogSharedDebugDataUtilities(void)::onceToken, &__block_literal_global_8);
  }
  os_log_t v0 = (void *)VGLogSharedDebugDataUtilities(void)::handle;

  return v0;
}

uint64_t vg::common::dumpDebugObject(vg::common *this, objc_object *a2, NSString *a3)
{
  uint64_t v5 = this;
  uint64_t v6 = a2;
  uint64_t v7 = (objc_class *)objc_opt_class();
  NSStringFromClass(v7);
  unint64_t v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = vg::common::dumpDebugObject(v5, v8, (NSString *)&v6->isa, a3);

  return v9;
}

void sub_260D0FD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id vg::common::deserializedObjectFromObject(vg::common *this, objc_object *a2)
{
  id v2 = this;
  id v11 = 0;
  int v3 = [MEMORY[0x263F08910] archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v11];
  id v4 = v11;
  if (v3)
  {
    id v10 = 0;
    uint64_t v5 = [MEMORY[0x263F08928] unarchivedObjectOfClass:objc_opt_class() fromData:v3 error:&v10];
    uint64_t v6 = v10;
    if (v5)
    {
      id v7 = v5;
    }
    else
    {
      unint64_t v8 = VGLogSharedDebugDataUtilities();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        vg::common::deserializedObjectFromObject();
      }
    }
  }
  else
  {
    uint64_t v6 = VGLogSharedDebugDataUtilities();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      vg::common::deserializedObjectFromObject();
    }
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_260D0FEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL29VGLogSharedDebugDataUtilitiesv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "SharedDebugDataUtilities");
  uint64_t v1 = (void *)VGLogSharedDebugDataUtilities(void)::handle;
  VGLogSharedDebugDataUtilities(void)::handle = (uint64_t)v0;
}

void sub_260D0FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void vg::common::dumpDebugObject()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1_0();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_260C8D000, v1, OS_LOG_TYPE_ERROR, "Failed to serialize object %@: %@", v2, 0x16u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1(&dword_260C8D000, v0, v1, "Failed to dump object file %@", v2, v3, v4, v5, v6);
}

void vg::common::deserializedObjectFromObject()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1(&dword_260C8D000, v0, v1, "Failed to archive object: %@", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_1(&dword_260C8D000, v0, v1, "Failed to unarchive object: %@", v2, v3, v4, v5, v6);
}

id vg::shared::getPersonSegmentationMapFromVision(void *a1, uint64_t a2)
{
  v21[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1;
  CVPixelBufferRef CVPixelBufferFromIOSurface = createCVPixelBufferFromIOSurface(v3);
  CVPixelBufferRef v5 = CVPixelBufferFromIOSurface;
  if (CVPixelBufferFromIOSurface)
  {
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN2vg6shared34getPersonSegmentationMapFromVisionEP9IOSurfacePU15__autoreleasingP7NSError_block_invoke;
    uint64_t v19[3] = &__block_descriptor_40_e5_v8__0l;
    void v19[4] = CVPixelBufferFromIOSurface;
    uint64_t v6 = MEMORY[0x261227FC0](v19);
    id v7 = objc_alloc(MEMORY[0x263F1EF40]);
    unint64_t v8 = (void *)[v7 initWithCVPixelBuffer:v5 options:MEMORY[0x263EFFA78]];
    if (v8)
    {
      uint64_t v9 = objc_opt_new();
      [v9 setOutputPixelFormat:1278226534];
      [v9 setQualityLevel:1];
      v21[0] = v9;
      id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v21 count:1];
      char v11 = [v8 performRequests:v10 error:a2];

      if (v11)
      {
        uint64_t v12 = [v9 results];
        uint64_t v13 = [v12 objectAtIndexedSubscript:0];
        uint64_t v14 = (__CVBuffer *)[v13 pixelBuffer];

        if (v14)
        {
          CVPixelBufferGetIOSurface(v14);
          unint64_t v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          if (v15)
          {
            BOOL v16 = resizeSurface(v15, [(IOSurface *)v3 width], [(IOSurface *)v3 height]);
LABEL_19:

            goto LABEL_20;
          }
          id v17 = __VGLogSharedInstance();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)vImage_Buffer buf = 0;
            _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_ERROR, " Person segmentation output buffer not iosurface backed ", buf, 2u);
          }
        }
        else
        {
          __VGLogSharedInstance();
          unint64_t v15 = (IOSurface *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)vImage_Buffer buf = 0;
            _os_log_impl(&dword_260C8D000, &v15->super, OS_LOG_TYPE_ERROR, " Failed to get output pixel buffer from person segmentation results ", buf, 2u);
          }
        }
        BOOL v16 = 0;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v9 = __VGLogSharedInstance();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_impl(&dword_260C8D000, v9, OS_LOG_TYPE_ERROR, " Vision request handler failed to instantiate ", buf, 2u);
      }
    }
    BOOL v16 = 0;
LABEL_20:

    (*(void (**)(uint64_t))(v6 + 16))(v6);
    goto LABEL_21;
  }
  uint64_t v6 = __VGLogSharedInstance();
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_log_impl(&dword_260C8D000, (os_log_t)v6, OS_LOG_TYPE_ERROR, " Failed to create pixel buffer ", buf, 2u);
  }
  BOOL v16 = 0;
LABEL_21:

  return v16;
}

void sub_260D10470(_Unwind_Exception *a1)
{
  v2[2](v2);
  _Unwind_Resume(a1);
}

void ___ZN2vg6shared34getPersonSegmentationMapFromVisionEP9IOSurfacePU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
}

void sub_260D10A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260D10B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D10BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260D10C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D10CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260D10D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D10F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id subkey(NSString *a1, objc_selector *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = NSStringFromSelector((SEL)a2);
  CVPixelBufferRef v5 = [(NSString *)v3 stringByAppendingPathExtension:v4];

  return v5;
}

void sub_260D1103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D1113C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D11578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D11790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_260D118E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D11A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_260D11C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D11D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260D11E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D12168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D123E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_260D1255C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D12624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D12A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_260D12B58(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void vg::ObjIO::read(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v405 = *MEMORY[0x263EF8340];
  long long v397 = 0uLL;
  unint64_t v398 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v397, 0x3E8uLL);
  v395 = 0;
  v394 = 0;
  unint64_t v396 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v394, 0x3E8uLL);
  long long v392 = 0uLL;
  unint64_t v393 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v397, 0x3E8uLL);
  long long v390 = 0uLL;
  uint64_t v391 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v390, 0x3E8uLL);
  long long v388 = 0uLL;
  uint64_t v389 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v388, 0x3E8uLL);
  long long v386 = 0uLL;
  uint64_t v387 = 0;
  std::vector<std::vector<unsigned int>>::reserve((uint64_t *)&v386, 0x3E8uLL);
  uint64_t v360 = a3;
  long long v384 = 0uLL;
  unint64_t v385 = 0;
  std::vector<std::vector<float>>::reserve((uint64_t *)&v384, 0x3E8uLL);
  memset(&v383, 0, sizeof(v383));
  int __val = 1;
  v380[0] = 0;
  v380[1] = 0;
  uint64_t v381 = 0;
  int v361 = -1;
  int v6 = -1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    id v7 = std::locale::use_facet(&v399, MEMORY[0x263F8C108]);
    unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v399);
    uint64_t v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)v380, v8);
    if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v381 >= 0) {
      id v10 = v380;
    }
    else {
      id v10 = (void **)v380[0];
    }
    if (sscanf((const char *)v10, "%3s", __s) != 1) {
      goto LABEL_232;
    }
    char v11 = (char *)v10 + strlen(__s);
    size_t v12 = strlen(__s);
    if (v12 == 1 && __s[0] == 118)
    {
      int v13 = sscanf(v11, "%lf %lf %lf %lf %lf %lf\n", &v399, v400, &v401, v402, &v402[8], &v402[16]);
      int v14 = v13;
      if (v6 == -1)
      {
        if (v13 != 3 && v13 != 6)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v378, v14);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Vertex positions should have either 3 or 6(with rgb f32 color) components. Invalid obj data. [ComponentCount = ", &v378, &__p);
          __n128 v349 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("].", &__p, &v372);
          MEMORY[0x261227580](exception, &v372, v349);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        int v6 = v13;
      }
      else if (v13 != v6)
      {
        v338 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v376, __val);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Vertex on line ", &v376, &v377);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have ", &v377, &v378);
        std::to_string(&v375, v6);
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v339 = &v375;
        }
        else {
          v339 = (std::string *)v375.__r_.__value_.__r.__words[0];
        }
        if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v375.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v375.__r_.__value_.__l.__size_;
        }
        v341 = std::string::append(&v378, (const std::string::value_type *)v339, size);
        long long v342 = *(_OWORD *)&v341->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v341->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v342;
        v341->__r_.__value_.__l.__size_ = 0;
        v341->__r_.__value_.__r.__words[2] = 0;
        v341->__r_.__value_.__r.__words[0] = 0;
        __n128 v343 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coordinates", &__p, &v372);
        MEMORY[0x261227580](v338, &v372, v343);
        __cxa_throw(v338, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(&v372, 3uLL, &__p);
      uint64_t v107 = 0;
      std::string::size_type v108 = v372.__r_.__value_.__r.__words[0];
      do
      {
        float v109 = *((double *)&v399.__locale_ + v107);
        *(float *)(v108 + 4 * v107++) = v109;
      }
      while (v107 != 3);
      long long v110 = (void *)*((void *)&v397 + 1);
      if (*((void *)&v397 + 1) >= v398)
      {
        uint64_t v111 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v397, (uint64_t)&v372);
      }
      else
      {
        **((void **)&v397 + 1) = 0;
        v110[1] = 0;
        v110[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v110, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
        uint64_t v111 = (uint64_t)(v110 + 3);
      }
      *((void *)&v397 + 1) = v111;
      if (v6 == 6)
      {
        LODWORD(v378.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::vector(&__p, 3uLL, &v378);
        uint64_t v112 = 0;
        std::string::size_type v113 = __p.__r_.__value_.__r.__words[0];
        do
        {
          float v114 = *(double *)&v402[8 * v112];
          *(float *)(v113 + 4 * v112++) = v114;
        }
        while (v112 != 3);
        uint64_t v115 = (void *)*((void *)&v384 + 1);
        if (*((void *)&v384 + 1) >= v385)
        {
          uint64_t v116 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v384, (uint64_t)&__p);
        }
        else
        {
          **((void **)&v384 + 1) = 0;
          v115[1] = 0;
          v115[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v115, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
          uint64_t v116 = (uint64_t)(v115 + 3);
        }
        *((void *)&v384 + 1) = v116;
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
LABEL_229:
      long long v146 = (void *)v372.__r_.__value_.__r.__words[0];
      if (v372.__r_.__value_.__r.__words[0])
      {
        v372.__r_.__value_.__l.__size_ = v372.__r_.__value_.__r.__words[0];
        goto LABEL_231;
      }
      goto LABEL_232;
    }
    if (v12 == 2)
    {
      if (*(unsigned __int16 *)__s == 28278)
      {
        if (sscanf(v11, "%lf %lf %lf\n", &v399, v400, &v401) != 3)
        {
          v350 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v378, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Normal on line ", &v378, &__p);
          __n128 v351 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have 3 coordinates", &__p, &v372);
          MEMORY[0x261227580](v350, &v372, v351);
          __cxa_throw(v350, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        std::vector<float>::vector(&v372, 3uLL);
        uint64_t v125 = 0;
        std::string::size_type v126 = v372.__r_.__value_.__r.__words[0];
        do
        {
          float v127 = *((double *)&v399.__locale_ + v125);
          *(float *)(v126 + 4 * v125++) = v127;
        }
        while (v125 != 3);
        int v128 = (void *)*((void *)&v392 + 1);
        if (*((void *)&v392 + 1) >= v393)
        {
          uint64_t v129 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v392, (uint64_t)&v372);
        }
        else
        {
          **((void **)&v392 + 1) = 0;
          v128[1] = 0;
          v128[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v128, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
          uint64_t v129 = (uint64_t)(v128 + 3);
        }
        *((void *)&v392 + 1) = v129;
      }
      else
      {
        if (*(unsigned __int16 *)__s != 29814) {
          goto LABEL_232;
        }
        int v15 = sscanf(v11, "%lf %lf %lf\n", &v399, v400, &v401);
        int v16 = v15;
        if (v361 == -1)
        {
          if ((v15 - 4) <= 0xFFFFFFFD)
          {
            v358 = __cxa_allocate_exception(0x10uLL);
            std::to_string(&v378, v16);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Texture coordinates should have either 2 or 3 components. Invalid obj data. [ComponentCount = ", &v378, &__p);
            __n128 v359 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("].", &__p, &v372);
            MEMORY[0x261227580](v358, &v372, v359);
            __cxa_throw(v358, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          int v361 = v15;
        }
        else if (v15 != v361)
        {
          v352 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v376, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Texture Coordinate on line ", &v376, &v377);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" should have ", &v377, &v378);
          std::to_string(&v375, v361);
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v353 = &v375;
          }
          else {
            v353 = (std::string *)v375.__r_.__value_.__r.__words[0];
          }
          if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v354 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v354 = v375.__r_.__value_.__l.__size_;
          }
          v355 = std::string::append(&v378, (const std::string::value_type *)v353, v354);
          long long v356 = *(_OWORD *)&v355->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v355->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v356;
          v355->__r_.__value_.__l.__size_ = 0;
          v355->__r_.__value_.__r.__words[2] = 0;
          v355->__r_.__value_.__r.__words[0] = 0;
          __n128 v357 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" coordinates", &__p, &v372);
          MEMORY[0x261227580](v352, &v372, v357);
          __cxa_throw(v352, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        std::vector<float>::vector(&v372, v15);
        if (v16 >= 1)
        {
          uint64_t v139 = (float *)v372.__r_.__value_.__r.__words[0];
          uint64_t v140 = v16;
          long long v141 = &v399;
          do
          {
            double v142 = *(double *)&v141->__locale_;
            ++v141;
            float v143 = v142;
            *v139++ = v143;
            --v140;
          }
          while (v140);
        }
        v144 = v395;
        if ((unint64_t)v395 >= v396)
        {
          uint64_t v145 = std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>((uint64_t *)&v394, (uint64_t)&v372);
        }
        else
        {
          void *v395 = 0;
          v144[1] = 0;
          v144[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v144, v372.__r_.__value_.__l.__data_, v372.__r_.__value_.__l.__size_, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 2);
          uint64_t v145 = (uint64_t)(v144 + 3);
        }
        v395 = (void *)v145;
      }
      goto LABEL_229;
    }
    if (v12 != 1 || __s[0] != 102) {
      goto LABEL_232;
    }
    memset(&__p, 0, sizeof(__p));
    memset(&v378, 0, sizeof(v378));
    memset(&v377, 0, sizeof(v377));
    int v374 = 0;
    while (sscanf(v11, "%s%n", &v399, &v374) == 1)
    {
      uint64_t v17 = v374;
      v371.__r_.__value_.__r.__words[0] = 0;
      v368 = 0;
      v365 = 0;
      if (sscanf((const char *)&v399, "%ld/%ld/%ld", &v371, &v368, &v365) == 3)
      {
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v397 + 1) - v397) >> 3);
        }
        else {
          LODWORD(v18) = -1;
        }
        int v21 = v18 + LODWORD(v371.__r_.__value_.__l.__data_);
        std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          int v24 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v25 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v27 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v28);
            std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
            int v24 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            unint64_t v29 = 0;
          }
          unint64_t v40 = &v29[4 * v25];
          *(_DWORD *)unint64_t v40 = v21;
          std::string::size_type v23 = (std::string::size_type)(v40 + 4);
          while ((void *)v22 != v24)
          {
            int v41 = *(_DWORD *)(v22 - 4);
            v22 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          __p.__r_.__value_.__l.__size_ = v23;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v21;
          std::string::size_type v23 = v22 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v23;
        if (((unint64_t)v368 & 0x8000000000000000) != 0) {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
        }
        else {
          LODWORD(v42) = -1;
        }
        int v43 = v42 + v368;
        std::string::size_type v44 = v378.__r_.__value_.__l.__size_;
        if (v378.__r_.__value_.__l.__size_ >= v378.__r_.__value_.__r.__words[2])
        {
          uint64_t v46 = (void *)v378.__r_.__value_.__r.__words[0];
          uint64_t v47 = (uint64_t)(v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v49 = v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0]) >> 1 > v48) {
            unint64_t v48 = v49 >> 1;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            CGAffineTransform v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v378.__r_.__value_.__r.__words[2], v50);
            std::string::size_type v44 = v378.__r_.__value_.__l.__size_;
            uint64_t v46 = (void *)v378.__r_.__value_.__r.__words[0];
          }
          else
          {
            CGAffineTransform v51 = 0;
          }
          uint64_t v52 = &v51[4 * v47];
          *(_DWORD *)uint64_t v52 = v43;
          std::string::size_type v45 = (std::string::size_type)(v52 + 4);
          while ((void *)v44 != v46)
          {
            int v53 = *(_DWORD *)(v44 - 4);
            v44 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
          v378.__r_.__value_.__l.__size_ = v45;
          v378.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51[4 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(_DWORD *)v378.__r_.__value_.__l.__size_ = v43;
          std::string::size_type v45 = v44 + 4;
        }
        v378.__r_.__value_.__l.__size_ = v45;
        if (((unint64_t)v365 & 0x8000000000000000) != 0) {
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v392 + 1) - v392) >> 3);
        }
        else {
          LODWORD(v54) = -1;
        }
        int v55 = v54 + v365;
        uint64_t v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
        if (v377.__r_.__value_.__l.__size_ < v377.__r_.__value_.__r.__words[2]) {
          goto LABEL_155;
        }
        uint64_t v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        uint64_t v58 = (uint64_t)(v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62) {
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        }
        int64_t v60 = v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0]) >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          uint32x4_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v377.__r_.__value_.__r.__words[2], v61);
          uint64_t v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
          uint64_t v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint32x4_t v62 = 0;
        }
        uint64_t v63 = &v62[4 * v58];
        *(_DWORD *)uint64_t v63 = v55;
        std::string::size_type v64 = (std::string::size_type)(v63 + 4);
        while (v56 != v57)
        {
          int v65 = *--v56;
          *((_DWORD *)v63 - 1) = v65;
          v63 -= 4;
        }
        goto LABEL_168;
      }
      if (sscanf((const char *)&v399, "%ld/%ld", &v371, &v368) == 2)
      {
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v397 + 1) - v397) >> 3);
        }
        else {
          LODWORD(v19) = -1;
        }
        int v31 = v19 + LODWORD(v371.__r_.__value_.__l.__data_);
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          int64x2_t v34 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v35 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v37 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v38);
            std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
            int64x2_t v34 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            unint64_t v39 = 0;
          }
          __int16 v84 = &v39[4 * v35];
          *(_DWORD *)__int16 v84 = v31;
          std::string::size_type v33 = (std::string::size_type)(v84 + 4);
          while ((void *)v32 != v34)
          {
            int v85 = *(_DWORD *)(v32 - 4);
            v32 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          __p.__r_.__value_.__l.__size_ = v33;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v31;
          std::string::size_type v33 = v32 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v33;
        if (((unint64_t)v368 & 0x8000000000000000) != 0) {
          unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
        }
        else {
          LODWORD(v86) = -1;
        }
        int v87 = v86 + v368;
        std::string::size_type v88 = v378.__r_.__value_.__l.__size_;
        if (v378.__r_.__value_.__l.__size_ >= v378.__r_.__value_.__r.__words[2])
        {
          uint64_t v90 = (void *)v378.__r_.__value_.__r.__words[0];
          uint64_t v91 = (uint64_t)(v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v93 = v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v378.__r_.__value_.__r.__words[2] - v378.__r_.__value_.__r.__words[0]) >> 1 > v92) {
            unint64_t v92 = v93 >> 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v94 = v92;
          }
          if (v94)
          {
            uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v378.__r_.__value_.__r.__words[2], v94);
            std::string::size_type v88 = v378.__r_.__value_.__l.__size_;
            uint64_t v90 = (void *)v378.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v95 = 0;
          }
          uint64_t v96 = &v95[4 * v91];
          *(_DWORD *)uint64_t v96 = v87;
          std::string::size_type v89 = (std::string::size_type)(v96 + 4);
          while ((void *)v88 != v90)
          {
            int v97 = *(_DWORD *)(v88 - 4);
            v88 -= 4;
            *((_DWORD *)v96 - 1) = v97;
            v96 -= 4;
          }
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
          v378.__r_.__value_.__l.__size_ = v89;
          v378.__r_.__value_.__r.__words[2] = (std::string::size_type)&v95[4 * v94];
          if (v90) {
            operator delete(v90);
          }
        }
        else
        {
          *(_DWORD *)v378.__r_.__value_.__l.__size_ = v87;
          std::string::size_type v89 = v88 + 4;
        }
        v378.__r_.__value_.__l.__size_ = v89;
      }
      else
      {
        if (sscanf((const char *)&v399, "%ld//%ld", &v371, &v365) == 2)
        {
          if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v397 + 1) - v397) >> 3);
          }
          else {
            LODWORD(v2std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = -1;
          }
          int v66 = v20 + LODWORD(v371.__r_.__value_.__l.__data_);
          std::string::size_type v67 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            id v69 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v70 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62) {
              std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
            }
            int64_t v72 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v71) {
              unint64_t v71 = v72 >> 1;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              id v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v73);
              std::string::size_type v67 = __p.__r_.__value_.__l.__size_;
              id v69 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              id v74 = 0;
            }
            uint64_t v98 = &v74[4 * v70];
            *(_DWORD *)uint64_t v98 = v66;
            std::string::size_type v68 = (std::string::size_type)(v98 + 4);
            while ((void *)v67 != v69)
            {
              int v99 = *(_DWORD *)(v67 - 4);
              v67 -= 4;
              *((_DWORD *)v98 - 1) = v99;
              v98 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
            __p.__r_.__value_.__l.__size_ = v68;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v74[4 * v73];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v66;
            std::string::size_type v68 = v67 + 4;
          }
          __p.__r_.__value_.__l.__size_ = v68;
          if (((unint64_t)v365 & 0x8000000000000000) != 0) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v392 + 1) - v392) >> 3);
          }
          else {
            LODWORD(v10std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = -1;
          }
          int v55 = v100 + v365;
          uint64_t v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
          if (v377.__r_.__value_.__l.__size_ < v377.__r_.__value_.__r.__words[2])
          {
LABEL_155:
            *uint64_t v56 = v55;
            std::string::size_type v64 = (std::string::size_type)(v56 + 1);
LABEL_170:
            v377.__r_.__value_.__l.__size_ = v64;
            goto LABEL_171;
          }
          uint64_t v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
          uint64_t v101 = (uint64_t)(v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v103 = v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v377.__r_.__value_.__r.__words[2] - v377.__r_.__value_.__r.__words[0]) >> 1 > v102) {
            unint64_t v102 = v103 >> 1;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v102;
          }
          if (v61)
          {
            uint32x4_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v377.__r_.__value_.__r.__words[2], v61);
            uint64_t v56 = (_DWORD *)v377.__r_.__value_.__l.__size_;
            uint64_t v57 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint32x4_t v62 = 0;
          }
          uint64_t v63 = &v62[4 * v101];
          *(_DWORD *)uint64_t v63 = v55;
          std::string::size_type v64 = (std::string::size_type)(v63 + 4);
          while (v56 != v57)
          {
            int v104 = *--v56;
            *((_DWORD *)v63 - 1) = v104;
            v63 -= 4;
          }
LABEL_168:
          v377.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v377.__r_.__value_.__l.__size_ = v64;
          v377.__r_.__value_.__r.__words[2] = (std::string::size_type)&v62[4 * v61];
          if (v57) {
            operator delete(v57);
          }
          goto LABEL_170;
        }
        if (sscanf((const char *)&v399, "%ld", &v371) != 1)
        {
          v344 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v375, __val);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v375, &v376);
          __n128 v345 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" has an invalid element format.", &v376, &v372);
          MEMORY[0x261227580](v344, &v372, v345);
          __cxa_throw(v344, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        if ((v371.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v397 + 1) - v397) >> 3);
        }
        else {
          LODWORD(v3std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = -1;
        }
        int v75 = v30 + LODWORD(v371.__r_.__value_.__l.__data_);
        std::string::size_type v76 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          id v78 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v79 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 62) {
            std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
          }
          int64_t v81 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v80) {
            unint64_t v80 = v81 >> 1;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v82);
            std::string::size_type v76 = __p.__r_.__value_.__l.__size_;
            id v78 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v83 = 0;
          }
          uint64_t v105 = &v83[4 * v79];
          *(_DWORD *)uint64_t v105 = v75;
          std::string::size_type v77 = (std::string::size_type)(v105 + 4);
          while ((void *)v76 != v78)
          {
            int v106 = *(_DWORD *)(v76 - 4);
            v76 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
          __p.__r_.__value_.__l.__size_ = v77;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83[4 * v82];
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v75;
          std::string::size_type v77 = v76 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v77;
      }
LABEL_171:
      v11 += v17;
    }
    v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
    v372.__r_.__value_.__l.__size_ = (std::string::size_type)&v388;
    v372.__r_.__value_.__r.__words[2] = (std::string::size_type)&v386;
    p_val = &__val;
    uint64_t v117 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] >= 0x11)
    {
      v346 = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v371, __val);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v371, &v375);
      __n128 v347 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a triangle or quad.", &v375, &v376);
      MEMORY[0x261227580](v346, &v376, v347);
      __cxa_throw(v346, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 16)
    {
      memset(&v376, 0, sizeof(v376));
      memset(&v375, 0, sizeof(v375));
      unsigned int v119 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], 1uLL);
      std::string::size_type v121 = v376.__r_.__value_.__l.__size_;
      unint64_t v120 = (void *)v376.__r_.__value_.__r.__words[0];
      _DWORD *v119 = *v117;
      std::string::size_type v122 = (std::string::size_type)(v119 + 1);
      std::string::size_type v123 = (std::string::size_type)v119;
      while ((void *)v121 != v120)
      {
        int v124 = *(_DWORD *)(v121 - 4);
        v121 -= 4;
        *(_DWORD *)(v123 - 4) = v124;
        v123 -= 4;
      }
      std::string::size_type v130 = (std::string::size_type)&v119[v118];
      v376.__r_.__value_.__r.__words[0] = v123;
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 1);
      v376.__r_.__value_.__r.__words[2] = v130;
      if (v120)
      {
        operator delete(v120);
        std::string::size_type v130 = v376.__r_.__value_.__r.__words[2];
      }
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 1);
      std::string::size_type v131 = __p.__r_.__value_.__r.__words[0];
      if (v122 < v130)
      {
        v119[1] = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4);
        id v132 = v119 + 2;
        goto LABEL_239;
      }
      char v133 = (void *)v376.__r_.__value_.__r.__words[0];
      uint64_t v134 = (uint64_t)(v122 - v376.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 62) {
        goto LABEL_542;
      }
      uint64_t v136 = v130 - v376.__r_.__value_.__r.__words[0];
      if (v136 >> 1 > v135) {
        unint64_t v135 = v136 >> 1;
      }
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v137 = v135;
      }
      if (v137)
      {
        uint64_t v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], v137);
        std::string::size_type v122 = v376.__r_.__value_.__l.__size_;
        char v133 = (void *)v376.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v138 = 0;
      }
      uint64_t v147 = &v138[4 * v134];
      *(_DWORD *)uint64_t v147 = *(_DWORD *)(v131 + 4);
      id v132 = v147 + 4;
      while ((void *)v122 != v133)
      {
        int v148 = *(_DWORD *)(v122 - 4);
        v122 -= 4;
        *((_DWORD *)v147 - 1) = v148;
        v147 -= 4;
      }
      std::string::size_type v130 = (std::string::size_type)&v138[4 * v137];
      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
      v376.__r_.__value_.__r.__words[2] = v130;
      if (v133)
      {
        operator delete(v133);
        std::string::size_type v130 = v376.__r_.__value_.__r.__words[2];
      }
LABEL_239:
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
      std::string::size_type v149 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v132 < v130)
      {
        *id v132 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
        std::string::size_type v150 = (std::string::size_type)(v132 + 1);
        goto LABEL_255;
      }
      std::string v151 = (_DWORD *)v376.__r_.__value_.__r.__words[0];
      uint64_t v152 = (uint64_t)((uint64_t)v132 - v376.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 62) {
        goto LABEL_542;
      }
      uint64_t v154 = v130 - v376.__r_.__value_.__r.__words[0];
      if (v154 >> 1 > v153) {
        unint64_t v153 = v154 >> 1;
      }
      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v155 = v153;
      }
      if (v155)
      {
        uint64_t v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v376.__r_.__value_.__r.__words[2], v155);
        id v132 = (_DWORD *)v376.__r_.__value_.__l.__size_;
        std::string v151 = (_DWORD *)v376.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v156 = 0;
      }
      std::string v157 = &v156[4 * v152];
      *(_DWORD *)std::string v157 = *(_DWORD *)(v149 + 8);
      std::string::size_type v150 = (std::string::size_type)(v157 + 4);
      while (v132 != v151)
      {
        int v158 = *--v132;
        *((_DWORD *)v157 - 1) = v158;
        v157 -= 4;
      }
      v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
      v376.__r_.__value_.__l.__size_ = v150;
      v376.__r_.__value_.__r.__words[2] = (std::string::size_type)&v156[4 * v155];
      if (v151) {
        operator delete(v151);
      }
LABEL_255:
      v376.__r_.__value_.__l.__size_ = v150;
      v159 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v160 = v375.__r_.__value_.__r.__words[2];
      std::string::size_type v161 = v375.__r_.__value_.__l.__size_;
      if (v375.__r_.__value_.__l.__size_ < v375.__r_.__value_.__r.__words[2])
      {
        *(_DWORD *)v375.__r_.__value_.__l.__size_ = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        char v162 = (_DWORD *)(v161 + 4);
        goto LABEL_271;
      }
      uint64_t v163 = (void *)v375.__r_.__value_.__r.__words[0];
      uint64_t v164 = (uint64_t)(v375.__r_.__value_.__l.__size_ - v375.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v165 = v164 + 1;
      if ((unint64_t)(v164 + 1) >> 62) {
        goto LABEL_542;
      }
      int64_t v166 = v375.__r_.__value_.__r.__words[2] - v375.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v375.__r_.__value_.__r.__words[2] - v375.__r_.__value_.__r.__words[0]) >> 1 > v165) {
        unint64_t v165 = v166 >> 1;
      }
      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v167 = v165;
      }
      if (v167)
      {
        uint64_t v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v167);
        std::string::size_type v161 = v375.__r_.__value_.__l.__size_;
        uint64_t v163 = (void *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v168 = 0;
      }
      v169 = &v168[4 * v164];
      *(_DWORD *)v169 = *v159;
      char v162 = v169 + 4;
      while ((void *)v161 != v163)
      {
        int v170 = *(_DWORD *)(v161 - 4);
        v161 -= 4;
        *((_DWORD *)v169 - 1) = v170;
        v169 -= 4;
      }
      std::string::size_type v160 = (std::string::size_type)&v168[4 * v167];
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
      v375.__r_.__value_.__r.__words[2] = v160;
      if (v163)
      {
        operator delete(v163);
        std::string::size_type v160 = v375.__r_.__value_.__r.__words[2];
      }
LABEL_271:
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
      std::string::size_type v171 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v162 < v160)
      {
        *char v162 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
        char v172 = v162 + 1;
        goto LABEL_287;
      }
      uint64_t v173 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      uint64_t v174 = (uint64_t)((uint64_t)v162 - v375.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v175 = v174 + 1;
      if ((unint64_t)(v174 + 1) >> 62) {
        goto LABEL_542;
      }
      uint64_t v176 = v160 - v375.__r_.__value_.__r.__words[0];
      if (v176 >> 1 > v175) {
        unint64_t v175 = v176 >> 1;
      }
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v177 = v175;
      }
      if (v177)
      {
        uint64_t v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v177);
        char v162 = (_DWORD *)v375.__r_.__value_.__l.__size_;
        uint64_t v173 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v178 = 0;
      }
      v179 = &v178[4 * v174];
      *(_DWORD *)v179 = *(_DWORD *)(v171 + 8);
      char v172 = v179 + 4;
      while (v162 != v173)
      {
        int v180 = *--v162;
        *((_DWORD *)v179 - 1) = v180;
        v179 -= 4;
      }
      std::string::size_type v160 = (std::string::size_type)&v178[4 * v177];
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
      v375.__r_.__value_.__r.__words[2] = v160;
      if (v173)
      {
        operator delete(v173);
        std::string::size_type v160 = v375.__r_.__value_.__r.__words[2];
      }
LABEL_287:
      v375.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
      std::string::size_type v181 = __p.__r_.__value_.__r.__words[0];
      if ((unint64_t)v172 < v160)
      {
        *char v172 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 12);
        std::string::size_type v182 = (std::string::size_type)(v172 + 1);
        goto LABEL_303;
      }
      uint64_t v183 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      uint64_t v184 = (uint64_t)((uint64_t)v172 - v375.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v185 = v184 + 1;
      if ((unint64_t)(v184 + 1) >> 62) {
LABEL_542:
      }
        std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
      uint64_t v186 = v160 - v375.__r_.__value_.__r.__words[0];
      if (v186 >> 1 > v185) {
        unint64_t v185 = v186 >> 1;
      }
      if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v187 = v185;
      }
      if (v187)
      {
        v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v375.__r_.__value_.__r.__words[2], v187);
        char v172 = (_DWORD *)v375.__r_.__value_.__l.__size_;
        uint64_t v183 = (_DWORD *)v375.__r_.__value_.__r.__words[0];
      }
      else
      {
        v188 = 0;
      }
      v189 = &v188[4 * v184];
      *(_DWORD *)v189 = *(_DWORD *)(v181 + 12);
      std::string::size_type v182 = (std::string::size_type)(v189 + 4);
      while (v172 != v183)
      {
        int v190 = *--v172;
        *((_DWORD *)v189 - 1) = v190;
        v189 -= 4;
      }
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
      v375.__r_.__value_.__l.__size_ = v182;
      v375.__r_.__value_.__r.__words[2] = (std::string::size_type)&v188[4 * v187];
      if (v183) {
        operator delete(v183);
      }
LABEL_303:
      v375.__r_.__value_.__l.__size_ = v182;
      memset(&v371, 0, sizeof(v371));
      v368 = 0;
      v369 = 0;
      v370 = 0;
      std::string v191 = (_DWORD *)v378.__r_.__value_.__r.__words[0];
      if (v378.__r_.__value_.__l.__size_ - v378.__r_.__value_.__r.__words[0] == 16)
      {
        v193 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], 1uLL);
        std::string::size_type v195 = v371.__r_.__value_.__l.__size_;
        uint64_t v194 = (void *)v371.__r_.__value_.__r.__words[0];
        _DWORD *v193 = *v191;
        std::string::size_type v196 = (std::string::size_type)(v193 + 1);
        std::string::size_type v197 = (std::string::size_type)v193;
        while ((void *)v195 != v194)
        {
          int v198 = *(_DWORD *)(v195 - 4);
          v195 -= 4;
          *(_DWORD *)(v197 - 4) = v198;
          v197 -= 4;
        }
        std::string::size_type v199 = (std::string::size_type)&v193[v192];
        v371.__r_.__value_.__r.__words[0] = v197;
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)(v193 + 1);
        v371.__r_.__value_.__r.__words[2] = v199;
        if (v194)
        {
          operator delete(v194);
          std::string::size_type v199 = v371.__r_.__value_.__r.__words[2];
        }
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)(v193 + 1);
        std::string::size_type v200 = v378.__r_.__value_.__r.__words[0];
        if (v196 < v199)
        {
          v193[1] = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 4);
          v201 = v193 + 2;
          goto LABEL_325;
        }
        v202 = (void *)v371.__r_.__value_.__r.__words[0];
        uint64_t v203 = (uint64_t)(v196 - v371.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v204 = v203 + 1;
        if ((unint64_t)(v203 + 1) >> 62) {
          goto LABEL_553;
        }
        uint64_t v205 = v199 - v371.__r_.__value_.__r.__words[0];
        if (v205 >> 1 > v204) {
          unint64_t v204 = v205 >> 1;
        }
        if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v206 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v204;
        }
        if (v206)
        {
          v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], v206);
          std::string::size_type v196 = v371.__r_.__value_.__l.__size_;
          v202 = (void *)v371.__r_.__value_.__r.__words[0];
        }
        else
        {
          v207 = 0;
        }
        v208 = &v207[4 * v203];
        *(_DWORD *)v208 = *(_DWORD *)(v200 + 4);
        v201 = v208 + 4;
        while ((void *)v196 != v202)
        {
          int v209 = *(_DWORD *)(v196 - 4);
          v196 -= 4;
          *((_DWORD *)v208 - 1) = v209;
          v208 -= 4;
        }
        std::string::size_type v199 = (std::string::size_type)&v207[4 * v206];
        v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
        v371.__r_.__value_.__r.__words[2] = v199;
        if (v202)
        {
          operator delete(v202);
          std::string::size_type v199 = v371.__r_.__value_.__r.__words[2];
        }
LABEL_325:
        v371.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
        std::string::size_type v210 = v378.__r_.__value_.__r.__words[0];
        if ((unint64_t)v201 < v199)
        {
          _DWORD *v201 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 8);
          std::string::size_type v211 = (std::string::size_type)(v201 + 1);
          goto LABEL_341;
        }
        v212 = (_DWORD *)v371.__r_.__value_.__r.__words[0];
        uint64_t v213 = (uint64_t)((uint64_t)v201 - v371.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 62) {
          goto LABEL_553;
        }
        uint64_t v215 = v199 - v371.__r_.__value_.__r.__words[0];
        if (v215 >> 1 > v214) {
          unint64_t v214 = v215 >> 1;
        }
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v216 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v216 = v214;
        }
        if (v216)
        {
          v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v371.__r_.__value_.__r.__words[2], v216);
          v201 = (_DWORD *)v371.__r_.__value_.__l.__size_;
          v212 = (_DWORD *)v371.__r_.__value_.__r.__words[0];
        }
        else
        {
          v217 = 0;
        }
        v218 = &v217[4 * v213];
        *(_DWORD *)v218 = *(_DWORD *)(v210 + 8);
        std::string::size_type v211 = (std::string::size_type)(v218 + 4);
        while (v201 != v212)
        {
          int v219 = *--v201;
          *((_DWORD *)v218 - 1) = v219;
          v218 -= 4;
        }
        v371.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
        v371.__r_.__value_.__l.__size_ = v211;
        v371.__r_.__value_.__r.__words[2] = (std::string::size_type)&v217[4 * v216];
        if (v212) {
          operator delete(v212);
        }
LABEL_341:
        v371.__r_.__value_.__l.__size_ = v211;
        v220 = (_DWORD *)v378.__r_.__value_.__r.__words[0];
        v222 = v369;
        v221 = v370;
        if (v369 < v370)
        {
          *(_DWORD *)v369 = *(_DWORD *)v378.__r_.__value_.__l.__data_;
          v223 = v222 + 4;
          goto LABEL_357;
        }
        v224 = (char *)v368;
        uint64_t v225 = (v369 - (unsigned char *)v368) >> 2;
        unint64_t v226 = v225 + 1;
        if ((unint64_t)(v225 + 1) >> 62) {
          goto LABEL_553;
        }
        uint64_t v227 = v370 - (unsigned char *)v368;
        if ((v370 - (unsigned char *)v368) >> 1 > v226) {
          unint64_t v226 = v227 >> 1;
        }
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v228 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v226;
        }
        if (v228)
        {
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v228);
          v224 = (char *)v368;
          v222 = v369;
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[4 * v225];
        *(_DWORD *)v230 = *v220;
        v223 = v230 + 4;
        while (v222 != v224)
        {
          int v231 = *((_DWORD *)v222 - 1);
          v222 -= 4;
          *((_DWORD *)v230 - 1) = v231;
          v230 -= 4;
        }
        v221 = &v229[4 * v228];
        v368 = v230;
        v369 = v223;
        v370 = v221;
        if (v224)
        {
          operator delete(v224);
          v221 = v370;
        }
LABEL_357:
        v369 = v223;
        std::string::size_type v232 = v378.__r_.__value_.__r.__words[0];
        if (v223 < v221)
        {
          *(_DWORD *)v223 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 8);
          v233 = v223 + 4;
          goto LABEL_373;
        }
        v234 = (char *)v368;
        uint64_t v235 = (v223 - (unsigned char *)v368) >> 2;
        unint64_t v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 62) {
          goto LABEL_553;
        }
        uint64_t v237 = v221 - (unsigned char *)v368;
        if (v237 >> 1 > v236) {
          unint64_t v236 = v237 >> 1;
        }
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v238 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v238 = v236;
        }
        if (v238)
        {
          v239 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v238);
          v234 = (char *)v368;
          v223 = v369;
        }
        else
        {
          v239 = 0;
        }
        v240 = &v239[4 * v235];
        *(_DWORD *)v240 = *(_DWORD *)(v232 + 8);
        v233 = v240 + 4;
        while (v223 != v234)
        {
          int v241 = *((_DWORD *)v223 - 1);
          v223 -= 4;
          *((_DWORD *)v240 - 1) = v241;
          v240 -= 4;
        }
        v221 = &v239[4 * v238];
        v368 = v240;
        v369 = v233;
        v370 = v221;
        if (v234)
        {
          operator delete(v234);
          v221 = v370;
        }
LABEL_373:
        v369 = v233;
        std::string::size_type v242 = v378.__r_.__value_.__r.__words[0];
        if (v233 < v221)
        {
          *(_DWORD *)v233 = *(_DWORD *)(v378.__r_.__value_.__r.__words[0] + 12);
          v243 = v233 + 4;
          goto LABEL_389;
        }
        v244 = (char *)v368;
        uint64_t v245 = (v233 - (unsigned char *)v368) >> 2;
        unint64_t v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 62) {
LABEL_553:
        }
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        uint64_t v247 = v221 - (unsigned char *)v368;
        if (v247 >> 1 > v246) {
          unint64_t v246 = v247 >> 1;
        }
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v248 = v246;
        }
        if (v248)
        {
          v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v370, v248);
          v244 = (char *)v368;
          v233 = v369;
        }
        else
        {
          v249 = 0;
        }
        v250 = &v249[4 * v245];
        *(_DWORD *)v250 = *(_DWORD *)(v242 + 12);
        v243 = v250 + 4;
        while (v233 != v244)
        {
          int v251 = *((_DWORD *)v233 - 1);
          v233 -= 4;
          *((_DWORD *)v250 - 1) = v251;
          v250 -= 4;
        }
        v368 = v250;
        v369 = v243;
        v370 = &v249[4 * v248];
        if (v244) {
          operator delete(v244);
        }
LABEL_389:
        v369 = v243;
      }
      v365 = 0;
      v366 = 0;
      v367 = 0;
      v362 = 0;
      v363 = 0;
      v364 = 0;
      v252 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
      if (v377.__r_.__value_.__l.__size_ - v377.__r_.__value_.__r.__words[0] == 16)
      {
        v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, 1uLL);
        v255 = (char *)v365;
        v256 = v366;
        *(_DWORD *)v254 = *v252;
        v257 = v254 + 4;
        v258 = v254;
        while (v256 != v255)
        {
          int v259 = *((_DWORD *)v256 - 1);
          v256 -= 4;
          *((_DWORD *)v258 - 1) = v259;
          v258 -= 4;
        }
        v260 = &v254[4 * v253];
        v365 = v258;
        v366 = v254 + 4;
        v367 = v260;
        if (v255)
        {
          operator delete(v255);
          v260 = v367;
        }
        v366 = v254 + 4;
        std::string::size_type v261 = v377.__r_.__value_.__r.__words[0];
        if (v257 < v260)
        {
          *((_DWORD *)v254 + 1) = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 4);
          v262 = v254 + 8;
          goto LABEL_412;
        }
        v263 = (char *)v365;
        uint64_t v264 = (v257 - (unsigned char *)v365) >> 2;
        unint64_t v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 62) {
          goto LABEL_552;
        }
        uint64_t v266 = v260 - (unsigned char *)v365;
        if (v266 >> 1 > v265) {
          unint64_t v265 = v266 >> 1;
        }
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v267 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v267 = v265;
        }
        if (v267)
        {
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, v267);
          v263 = (char *)v365;
          v257 = v366;
        }
        else
        {
          v268 = 0;
        }
        v269 = &v268[4 * v264];
        *(_DWORD *)v269 = *(_DWORD *)(v261 + 4);
        v262 = v269 + 4;
        while (v257 != v263)
        {
          int v270 = *((_DWORD *)v257 - 1);
          v257 -= 4;
          *((_DWORD *)v269 - 1) = v270;
          v269 -= 4;
        }
        v260 = &v268[4 * v267];
        v365 = v269;
        v366 = v262;
        v367 = v260;
        if (v263)
        {
          operator delete(v263);
          v260 = v367;
        }
LABEL_412:
        v366 = v262;
        std::string::size_type v271 = v377.__r_.__value_.__r.__words[0];
        if (v262 < v260)
        {
          *(_DWORD *)v262 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 8);
          v272 = v262 + 4;
          goto LABEL_428;
        }
        v273 = (char *)v365;
        uint64_t v274 = (v262 - (unsigned char *)v365) >> 2;
        unint64_t v275 = v274 + 1;
        if ((unint64_t)(v274 + 1) >> 62) {
          goto LABEL_552;
        }
        uint64_t v276 = v260 - (unsigned char *)v365;
        if (v276 >> 1 > v275) {
          unint64_t v275 = v276 >> 1;
        }
        if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v277 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v277 = v275;
        }
        if (v277)
        {
          v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v367, v277);
          v273 = (char *)v365;
          v262 = v366;
        }
        else
        {
          v278 = 0;
        }
        v279 = &v278[4 * v274];
        *(_DWORD *)v279 = *(_DWORD *)(v271 + 8);
        v272 = v279 + 4;
        while (v262 != v273)
        {
          int v280 = *((_DWORD *)v262 - 1);
          v262 -= 4;
          *((_DWORD *)v279 - 1) = v280;
          v279 -= 4;
        }
        v365 = v279;
        v366 = v272;
        v367 = &v278[4 * v277];
        if (v273) {
          operator delete(v273);
        }
LABEL_428:
        v366 = v272;
        v281 = (_DWORD *)v377.__r_.__value_.__r.__words[0];
        v283 = v363;
        v282 = v364;
        if (v363 < v364)
        {
          *(_DWORD *)v363 = *(_DWORD *)v377.__r_.__value_.__l.__data_;
          v284 = v283 + 4;
          goto LABEL_444;
        }
        v285 = (char *)v362;
        uint64_t v286 = (v363 - (unsigned char *)v362) >> 2;
        unint64_t v287 = v286 + 1;
        if ((unint64_t)(v286 + 1) >> 62) {
          goto LABEL_552;
        }
        uint64_t v288 = v364 - (unsigned char *)v362;
        if ((v364 - (unsigned char *)v362) >> 1 > v287) {
          unint64_t v287 = v288 >> 1;
        }
        if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v289 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v289 = v287;
        }
        if (v289)
        {
          v290 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v289);
          v285 = (char *)v362;
          v283 = v363;
        }
        else
        {
          v290 = 0;
        }
        v291 = &v290[4 * v286];
        *(_DWORD *)v291 = *v281;
        v284 = v291 + 4;
        while (v283 != v285)
        {
          int v292 = *((_DWORD *)v283 - 1);
          v283 -= 4;
          *((_DWORD *)v291 - 1) = v292;
          v291 -= 4;
        }
        v282 = &v290[4 * v289];
        v362 = v291;
        v363 = v284;
        v364 = v282;
        if (v285)
        {
          operator delete(v285);
          v282 = v364;
        }
LABEL_444:
        v363 = v284;
        std::string::size_type v293 = v377.__r_.__value_.__r.__words[0];
        if (v284 < v282)
        {
          *(_DWORD *)v284 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 8);
          v294 = v284 + 4;
          goto LABEL_460;
        }
        v295 = (char *)v362;
        uint64_t v296 = (v284 - (unsigned char *)v362) >> 2;
        unint64_t v297 = v296 + 1;
        if ((unint64_t)(v296 + 1) >> 62) {
          goto LABEL_552;
        }
        uint64_t v298 = v282 - (unsigned char *)v362;
        if (v298 >> 1 > v297) {
          unint64_t v297 = v298 >> 1;
        }
        if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v299 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v299 = v297;
        }
        if (v299)
        {
          v300 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v299);
          v295 = (char *)v362;
          v284 = v363;
        }
        else
        {
          v300 = 0;
        }
        v301 = &v300[4 * v296];
        *(_DWORD *)v301 = *(_DWORD *)(v293 + 8);
        v294 = v301 + 4;
        while (v284 != v295)
        {
          int v302 = *((_DWORD *)v284 - 1);
          v284 -= 4;
          *((_DWORD *)v301 - 1) = v302;
          v301 -= 4;
        }
        v282 = &v300[4 * v299];
        v362 = v301;
        v363 = v294;
        v364 = v282;
        if (v295)
        {
          operator delete(v295);
          v282 = v364;
        }
LABEL_460:
        v363 = v294;
        std::string::size_type v303 = v377.__r_.__value_.__r.__words[0];
        if (v294 < v282)
        {
          *(_DWORD *)v294 = *(_DWORD *)(v377.__r_.__value_.__r.__words[0] + 12);
          v304 = v294 + 4;
          goto LABEL_476;
        }
        v305 = (char *)v362;
        uint64_t v306 = (v294 - (unsigned char *)v362) >> 2;
        unint64_t v307 = v306 + 1;
        if ((unint64_t)(v306 + 1) >> 62) {
LABEL_552:
        }
          std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
        uint64_t v308 = v282 - (unsigned char *)v362;
        if (v308 >> 1 > v307) {
          unint64_t v307 = v308 >> 1;
        }
        if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v309 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v309 = v307;
        }
        if (v309)
        {
          v310 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v364, v309);
          v305 = (char *)v362;
          v294 = v363;
        }
        else
        {
          v310 = 0;
        }
        v311 = &v310[4 * v306];
        *(_DWORD *)v311 = *(_DWORD *)(v303 + 12);
        v304 = v311 + 4;
        while (v294 != v305)
        {
          int v312 = *((_DWORD *)v294 - 1);
          v294 -= 4;
          *((_DWORD *)v311 - 1) = v312;
          v311 -= 4;
        }
        v362 = v311;
        v363 = v304;
        v364 = &v310[4 * v309];
        if (v305) {
          operator delete(v305);
        }
LABEL_476:
        v363 = v304;
      }
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &v376, &v371, &v365);
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &v375, &v368, &v362);
      if (v362)
      {
        v363 = (char *)v362;
        operator delete(v362);
      }
      if (v365)
      {
        v366 = (char *)v365;
        operator delete(v365);
      }
      if (v368)
      {
        v369 = (char *)v368;
        operator delete(v368);
      }
      if (v371.__r_.__value_.__r.__words[0])
      {
        v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
        operator delete(v371.__r_.__value_.__l.__data_);
      }
      if (v375.__r_.__value_.__r.__words[0])
      {
        v375.__r_.__value_.__l.__size_ = v375.__r_.__value_.__r.__words[0];
        operator delete(v375.__r_.__value_.__l.__data_);
      }
      if (v376.__r_.__value_.__r.__words[0])
      {
        v376.__r_.__value_.__l.__size_ = v376.__r_.__value_.__r.__words[0];
        operator delete(v376.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()((uint64_t **)&v372, &__p, &v378, &v377);
    }
    if (v377.__r_.__value_.__r.__words[0])
    {
      v377.__r_.__value_.__l.__size_ = v377.__r_.__value_.__r.__words[0];
      operator delete(v377.__r_.__value_.__l.__data_);
    }
    if (v378.__r_.__value_.__r.__words[0])
    {
      v378.__r_.__value_.__l.__size_ = v378.__r_.__value_.__r.__words[0];
      operator delete(v378.__r_.__value_.__l.__data_);
    }
    long long v146 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_231:
      operator delete(v146);
    }
LABEL_232:
    ++__val;
  }
  uint64_t v313 = (uint64_t)v394;
  uint64_t v314 = (uint64_t)v395;
  if ((a2 & 1) == 0)
  {
    if (v395 == v394)
    {
      uint64_t v314 = (uint64_t)v394;
    }
    else
    {
      unint64_t v315 = 0xAAAAAAAAAAAAAAABLL * (v395 - v394);
      if (v315 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v397 + 1) - v397) >> 3))
      {
        unint64_t v316 = (uint64_t)(*(void *)(v397 + 8) - *(void *)v397) >> 2;
        LODWORD(v372.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::vector(&v399, v316, &v372);
        std::vector<std::vector<float>>::vector(__s, v315, (uint64_t)&v399);
        if (v399.__locale_)
        {
          *(std::locale *)v400 = v399;
          operator delete(v399.__locale_);
        }
        *(void *)v400 = 0;
        v399.__locale_ = 0;
        uint64_t v401 = 0;
        if (*((void *)&v384 + 1) != (void)v384)
        {
          v317 = v395;
          uint64_t v318 = (uint64_t)v394;
          unint64_t v319 = (uint64_t)(*(void *)(v384 + 8) - *(void *)v384) >> 2;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::vector(&v372, v319, &__p);
          std::vector<std::vector<float>>::resize((uint64_t *)&v399, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v317 - v318) >> 3), (uint64_t)&v372);
          if (v372.__r_.__value_.__r.__words[0])
          {
            v372.__r_.__value_.__l.__size_ = v372.__r_.__value_.__r.__words[0];
            operator delete(v372.__r_.__value_.__l.__data_);
          }
        }
        std::vector<unsigned int>::resize(&v383, 0xAAAAAAAAAAAAAAABLL * (v395 - v394));
        uint64_t v320 = *((void *)&v390 + 1);
        uint64_t v321 = v390;
        if (*((void *)&v390 + 1) != (void)v390)
        {
          unint64_t v322 = 0;
          do
          {
            uint64_t v323 = *(void *)(v321 + 24 * v322);
            if (*(void *)(v321 + 24 * v322 + 8) != v323)
            {
              unint64_t v324 = 0;
              uint64_t v325 = v388;
              uint64_t v326 = *(void *)(v388 + 24 * v322);
              do
              {
                unsigned int v327 = *(_DWORD *)(v323 + 4 * v324);
                v328 = (char **)(v397 + 24 * v327);
                v329 = (char *)(*(void *)__s + 24 * *(unsigned int *)(v326 + 4 * v324));
                if (v329 != (char *)v328)
                {
                  uint64_t v330 = *(void *)(v397 + 24 * v327 + 8);
                  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v329, *v328, v330, (v330 - (uint64_t)*v328) >> 2);
                  uint64_t v321 = v390;
                  uint64_t v325 = v388;
                }
                if (*(std::locale::__imp **)v400 != v399.__locale_)
                {
                  unsigned int v331 = *(_DWORD *)(*(void *)(v321 + 24 * v322) + 4 * v324);
                  v332 = (char **)(v384 + 24 * v331);
                  v333 = (char *)v399.__locale_ + 24 * *(unsigned int *)(*(void *)(v325 + 24 * v322) + 4 * v324);
                  if (v333 != (char *)v332)
                  {
                    uint64_t v334 = *(void *)(v384 + 24 * v331 + 8);
                    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v333, *v332, v334, (v334 - (uint64_t)*v332) >> 2);
                    uint64_t v321 = v390;
                    uint64_t v325 = v388;
                  }
                }
                v335 = (uint64_t *)(v321 + 24 * v322);
                uint64_t v323 = *v335;
                uint64_t v326 = *(void *)(v325 + 24 * v322);
                v383.__begin_[*(unsigned int *)(v326 + 4 * v324)] = *(_DWORD *)(*v335 + 4 * v324);
                ++v324;
              }
              while (v324 < (v335[1] - v323) >> 2);
              uint64_t v320 = *((void *)&v390 + 1);
            }
            ++v322;
          }
          while (v322 < 0xAAAAAAAAAAAAAAABLL * ((v320 - v321) >> 3));
        }
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v397, *(uint64_t *)__s, *(uint64_t *)v404, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v404 - *(void *)__s) >> 3));
        if (*(std::locale::__imp **)v400 != v399.__locale_) {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v384, (uint64_t)v399.__locale_, *(uint64_t *)v400, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v400 - (unint64_t)v399.__locale_) >> 3));
        }
        std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v390, v388, *((uint64_t *)&v388 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v388 + 1) - v388) >> 3));
        v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v399;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v372);
        v399.__locale_ = (std::locale::__imp *)__s;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v399);
        uint64_t v313 = (uint64_t)v394;
        uint64_t v314 = (uint64_t)v395;
      }
    }
  }
  *(_OWORD *)uint64_t v360 = v397;
  unint64_t v336 = v398;
  unint64_t v398 = 0;
  long long v397 = 0uLL;
  *(void *)(v360 + 16) = v336;
  *(void *)(v360 + 24) = v313;
  unint64_t v337 = v396;
  *(void *)(v360 + 32) = v314;
  *(void *)(v360 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v337;
  unint64_t v396 = 0;
  v395 = 0;
  v394 = 0;
  *(_OWORD *)(v360 + 48) = v392;
  *(void *)(v360 + 64) = v393;
  unint64_t v393 = 0;
  long long v392 = 0uLL;
  *(_OWORD *)(v360 + 72) = v390;
  *(void *)(v360 + 88) = v391;
  long long v390 = 0uLL;
  uint64_t v391 = 0;
  *(_OWORD *)(v360 + 96) = v388;
  *(void *)(v360 + 112) = v389;
  long long v388 = 0uLL;
  uint64_t v389 = 0;
  *(_OWORD *)(v360 + 12std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v386;
  *(void *)(v360 + 136) = v387;
  long long v386 = 0uLL;
  uint64_t v387 = 0;
  *(_OWORD *)(v360 + 144) = v384;
  *(void *)(v360 + 16std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v385;
  long long v384 = 0uLL;
  unint64_t v385 = 0;
  *(std::vector<unsigned int> *)(v360 + 168) = v383;
  memset(&v383, 0, sizeof(v383));
  if (SHIBYTE(v381) < 0)
  {
    operator delete(v380[0]);
    if (v383.__begin_)
    {
      v383.__end_ = v383.__begin_;
      operator delete(v383.__begin_);
    }
  }
  *(void *)__s = &v384;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v386;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v388;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v390;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v392;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v394;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  *(void *)__s = &v397;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_260D14F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v79 & 1) == 0)
    {
LABEL_16:
      if (a76 < 0) {
        operator delete(a75);
      }
      if (a77) {
        operator delete(a77);
      }
      STACK[0x3B8] = (unint64_t)&a78;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x210];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x230];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x250];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x270];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x288];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      STACK[0x3B8] = (unint64_t)&STACK[0x2A0];
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B8]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v79)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v78);
  goto LABEL_16;
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    id v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260D1550C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    id v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_260D155C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(__s);
  id v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(a1);
  id v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t vg::ObjIO::read(std::istream &,BOOL)::$_3::operator()(uint64_t **a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2[1] - *a2;
  if (!v5
    || ((uint64_t v8 = a4[1], v8 != *a4) || a3[1] != *a3)
    && ((uint64_t v9 = v5 >> 2, v10 = (v8 - *a4) >> 2, v10 != v9) || a3[1] != *a3)
    && (v8 != *a4 || v9 != (uint64_t)(a3[1] - *a3) >> 2)
    && (v10 != v9 || v9 != (uint64_t)(a3[1] - *a3) >> 2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v22, *(_DWORD *)a1[3]);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Face on line ", &v22, &v23);
    __n128 v21 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" has an invalid format.", &v23, &v24);
    MEMORY[0x261227580](exception, &v24, v21);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  char v11 = *a1;
  unint64_t v13 = (*a1)[1];
  unint64_t v12 = (*a1)[2];
  int v14 = *a1;
  if (v13 >= v12)
  {
    uint64_t result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v14, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v14, (uint64_t)a2);
    uint64_t result = v13 + 24;
  }
  v11[1] = result;
  if (a3[1] != *a3)
  {
    int v16 = a1[1];
    unint64_t v17 = v16[1];
    if (v17 >= v16[2])
    {
      uint64_t result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v16, (uint64_t)a3);
    }
    else
    {
      std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v16, (uint64_t)a3);
      uint64_t result = v17 + 24;
    }
    v16[1] = result;
  }
  if (a4[1] != *a4)
  {
    unint64_t v18 = a1[2];
    unint64_t v19 = v18[1];
    if (v19 >= v18[2])
    {
      uint64_t result = std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(v18, (uint64_t)a4);
    }
    else
    {
      std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)v18, (uint64_t)a4);
      uint64_t result = v19 + 24;
    }
    v18[1] = result;
  }
  return result;
}

void sub_260D15858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        char v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t vg::ObjIO::read@<X0>(vg::ObjIO *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = (char)a2;
  v13[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v11);
  if (!v12[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)this);
    __n128 v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v9, &v10);
    MEMORY[0x261227580](exception, &v10, v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  vg::ObjIO::read(v11, v3, a3);
  v11[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x261227660](v12);
  std::istream::~istream();
  return MEMORY[0x261227850](v13);
}

void sub_260D15B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  char v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  BOOL v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x261227650](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_260D15D4C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x261227850](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x261227660](a1 + 2);
  std::istream::~istream();
  MEMORY[0x261227850](a1 + 53);
  return a1;
}

void *vg::ObjIO::write(void *result, uint64_t *a2)
{
  if (result[1] != *result)
  {
    uint64_t v3 = result;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"# v: ", 5);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" vt: ", 5);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vn: ", 5);
    BOOL v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" f: ", 4);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ft: ", 5);
    __n128 v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" fn: ", 5);
    std::string v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" vc: ", 5);
    uint64_t result = (void *)std::ostream::operator<<();
    uint64_t v10 = *a2;
    *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 8) = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)a2 + *(void *)(v10 - 24) + 16) = 6;
    if (v3[1] != *v3)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v14 = v3[18];
      uint64_t v13 = v3[19];
      do
      {
        int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"v ", 2);
        int v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        unint64_t v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
        uint64_t result = (void *)std::ostream::operator<<();
        if (v13 != v14)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
          unint64_t v18 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
          unint64_t v19 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
          uint64_t result = (void *)std::ostream::operator<<();
        }
        ++v12;
        v11 += 24;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3));
    }
    if (v3[4] != v3[3])
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      do
      {
        std::string v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"vt ", 3);
        int v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
        uint64_t result = (void *)std::ostream::operator<<();
        ++v21;
        v20 += 24;
      }
      while (v21 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3));
    }
    if (v3[7] != v3[6])
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"vn ", 3);
        int64_t v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
        int v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
        uint64_t result = (void *)std::ostream::operator<<();
        ++v25;
        v24 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[7] - v3[6]) >> 3));
    }
    uint64_t v30 = v3[15];
    uint64_t v29 = v3[16];
    uint64_t v32 = v3[9];
    uint64_t v31 = v3[10];
    if (v3[13] == v3[12])
    {
      if (v29 == v30)
      {
        if (v31 != v32)
        {
          uint64_t v60 = 0;
          unint64_t v61 = 0;
          do
          {
            uint32x4_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"f ", 2);
            uint64_t v63 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ", 1);
            std::string::size_type v64 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" ", 1);
            uint64_t result = (void *)std::ostream::operator<<();
            ++v61;
            v60 += 24;
          }
          while (v61 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
        }
      }
      else if (v31 != v32)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"f ", 2);
          uint64_t v47 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"//", 2);
          unint64_t v48 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ", 1);
          int64_t v49 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"//", 2);
          unint64_t v50 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" ", 1);
          CGAffineTransform v51 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"//", 2);
          uint64_t result = (void *)std::ostream::operator<<();
          ++v45;
          v44 += 24;
        }
        while (v45 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
      }
    }
    else if (v29 == v30)
    {
      if (v31 != v32)
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        do
        {
          unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"f ", 2);
          int v55 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"/", 1);
          uint64_t v56 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" ", 1);
          uint64_t v57 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"/", 1);
          uint64_t v58 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" ", 1);
          unint64_t v59 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"/", 1);
          uint64_t result = (void *)std::ostream::operator<<();
          ++v53;
          v52 += 24;
        }
        while (v53 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
      }
    }
    else if (v31 != v32)
    {
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      do
      {
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"f ", 2);
        unint64_t v36 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/", 1);
        int64_t v37 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/", 1);
        unint64_t v38 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" ", 1);
        unint64_t v39 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"/", 1);
        unint64_t v40 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/", 1);
        int v41 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ", 1);
        unint64_t v42 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"/", 1);
        int v43 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"/", 1);
        uint64_t result = (void *)std::ostream::operator<<();
        ++v34;
        v33 += 24;
      }
      while (v34 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[10] - v3[9]) >> 3));
    }
  }
  return result;
}

uint64_t vg::ObjIO::write(vg::ObjIO *this, const vg::ObjContents *a2, const char *a3)
{
  v12[19] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(&v10);
  if (!v11[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    __n128 v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v8, &v9);
    MEMORY[0x261227580](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  vg::ObjIO::write(this, &v10);
  uint64_t v10 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x261227660](v11);
  std::ostream::~ostream();
  return MEMORY[0x261227850](v12);
}

void sub_260D1684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::ofstream::~ofstream(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_260D16A4C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x261227850](v1);
  _Unwind_Resume(a1);
}

void vg::ObjContentsToObjMeshData(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 8std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 20std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0;
  vg::Vector2DToMatRX<float,3ul>((uint64_t *)a1, (uint64_t)&v38);
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = v39;
  *(void *)a2 = v38;
  *(void *)(a2 + 8) = v6;
  unint64_t v38 = v4;
  uint64_t v39 = v5;
  *(_DWORD *)(a2 + 16) = v40;
  int v40 = 0;
  free(v4);
  vg::Vector2DToMatRX<unsigned int,3ul>((uint64_t *)(a1 + 72), (uint64_t)&v38);
  __n128 v7 = *(void **)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v39;
  *(void *)(a2 + 24) = v38;
  *(void *)(a2 + 32) = v9;
  unint64_t v38 = v7;
  uint64_t v39 = v8;
  *(_DWORD *)(a2 + 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v40;
  int v40 = 0;
  free(v7);
  if (*(void *)(a1 + 32) != *(void *)(a1 + 24))
  {
    vg::Vector2DToMatRX<float,2ul>((uint64_t **)(a1 + 24), (uint64_t)&v38);
    uint64_t v10 = v38;
    if (*(unsigned char *)(a2 + 72))
    {
      uint64_t v11 = *(void **)(a2 + 48);
      uint64_t v12 = *(void *)(a2 + 56);
      uint64_t v13 = v39;
      *(void *)(a2 + 48) = v38;
      *(void *)(a2 + 56) = v13;
      unint64_t v38 = v11;
      uint64_t v39 = v12;
      *(_DWORD *)(a2 + 64) = v40;
      int v40 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v14 = v39;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)(a2 + 48) = v10;
      *(void *)(a2 + 56) = v14;
      *(_DWORD *)(a2 + 64) = v40;
      int v40 = 0;
      *(unsigned char *)(a2 + 72) = 1;
    }
    free(v11);
  }
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    vg::Vector2DToMatRX<float,3ul>((uint64_t *)(a1 + 48), (uint64_t)&v38);
    int v15 = v38;
    if (*(unsigned char *)(a2 + 104))
    {
      int v16 = *(void **)(a2 + 80);
      uint64_t v17 = *(void *)(a2 + 88);
      uint64_t v18 = v39;
      *(void *)(a2 + 8std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v38;
      *(void *)(a2 + 88) = v18;
      unint64_t v38 = v16;
      uint64_t v39 = v17;
      *(_DWORD *)(a2 + 96) = v40;
      int v40 = 0;
    }
    else
    {
      int v16 = 0;
      uint64_t v19 = v39;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)(a2 + 8std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v15;
      *(void *)(a2 + 88) = v19;
      *(_DWORD *)(a2 + 96) = v40;
      int v40 = 0;
      *(unsigned char *)(a2 + 104) = 1;
    }
    free(v16);
  }
  if (*(void *)(a1 + 152) != *(void *)(a1 + 144))
  {
    vg::Vector2DToMatRX<float,3ul>((uint64_t *)(a1 + 144), (uint64_t)&v38);
    uint64_t v20 = v38;
    if (*(unsigned char *)(a2 + 136))
    {
      unint64_t v21 = *(void **)(a2 + 112);
      uint64_t v22 = *(void *)(a2 + 120);
      uint64_t v23 = v39;
      *(void *)(a2 + 112) = v38;
      *(void *)(a2 + 12std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v23;
      unint64_t v38 = v21;
      uint64_t v39 = v22;
      *(_DWORD *)(a2 + 128) = v40;
      int v40 = 0;
    }
    else
    {
      unint64_t v21 = 0;
      uint64_t v24 = v39;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)(a2 + 112) = v20;
      *(void *)(a2 + 12std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v24;
      *(_DWORD *)(a2 + 128) = v40;
      int v40 = 0;
      *(unsigned char *)(a2 + 136) = 1;
    }
    free(v21);
  }
  if (*(void *)(a1 + 104) != *(void *)(a1 + 96))
  {
    vg::Vector2DToMatRX<unsigned int,3ul>((uint64_t *)(a1 + 96), (uint64_t)&v38);
    unint64_t v25 = v38;
    if (*(unsigned char *)(a2 + 168))
    {
      unint64_t v26 = *(void **)(a2 + 144);
      uint64_t v27 = *(void *)(a2 + 152);
      uint64_t v28 = v39;
      *(void *)(a2 + 144) = v38;
      *(void *)(a2 + 152) = v28;
      unint64_t v38 = v26;
      uint64_t v39 = v27;
      *(_DWORD *)(a2 + 16std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v40;
      int v40 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v29 = v39;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)(a2 + 144) = v25;
      *(void *)(a2 + 152) = v29;
      *(_DWORD *)(a2 + 16std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v40;
      int v40 = 0;
      *(unsigned char *)(a2 + 168) = 1;
    }
    free(v26);
  }
  uint64_t v30 = *(void *)(a1 + 120);
  uint64_t v31 = *(void *)(a1 + 128);
  uint64_t v32 = (uint64_t *)(a1 + 120);
  if (v31 != v30)
  {
    vg::Vector2DToMatRX<unsigned int,3ul>(v32, (uint64_t)&v38);
    uint64_t v33 = v38;
    if (*(unsigned char *)(a2 + 200))
    {
      unint64_t v34 = *(void **)(a2 + 176);
      uint64_t v35 = *(void *)(a2 + 184);
      uint64_t v36 = v39;
      *(void *)(a2 + 176) = v38;
      *(void *)(a2 + 184) = v36;
      unint64_t v38 = v34;
      uint64_t v39 = v35;
      *(_DWORD *)(a2 + 192) = v40;
      int v40 = 0;
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v37 = v39;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)(a2 + 176) = v33;
      *(void *)(a2 + 184) = v37;
      *(_DWORD *)(a2 + 192) = v40;
      int v40 = 0;
      *(unsigned char *)(a2 + 20std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 1;
    }
    free(v34);
  }
}

void sub_260D16D58(_Unwind_Exception *a1)
{
  vg::ObjMeshData::~ObjMeshData(v1);
  _Unwind_Resume(a1);
}

uint64_t vg::Vector2DToMatRX<float,3ul>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1] - *a1;
  int v5 = -1431655765 * (v4 >> 3);
  size_t v6 = (((v4 >> 1) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v6 >> 2;
  memptr = 0;
  uint64_t result = malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
  uint64_t v8 = memptr;
  *(void *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v5;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = v10 - *a1;
  if (v10 != *a1)
  {
    int v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(v9 + 24 * v13);
      do
      {
        v8[(v12 + v15)] = *(_DWORD *)(v16 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      unint64_t v13 = (v13 + 1);
      v12 += 3;
    }
    while (v14 > v13);
  }
  return result;
}

uint64_t vg::Vector2DToMatRX<unsigned int,3ul>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1] - *a1;
  int v5 = -1431655765 * (v4 >> 3);
  size_t v6 = (((v4 >> 1) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v6 >> 2;
  memptr = 0;
  uint64_t result = malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x49090899uLL);
  uint64_t v8 = memptr;
  *(void *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v5;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = v10 - *a1;
  if (v10 != *a1)
  {
    int v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(v9 + 24 * v13);
      do
      {
        v8[(v12 + v15)] = *(_DWORD *)(v16 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      unint64_t v13 = (v13 + 1);
      v12 += 3;
    }
    while (v14 > v13);
  }
  return result;
}

float vg::Vector2DToMatRX<float,2ul>@<S0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  size_t v5 = (8 * (v4 & 0x7FFFFFFF) + 31) & 0x7FFFFFFE0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v5 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
  __n128 v7 = memptr;
  *(void *)a2 = memptr;
  *(_DWORD *)(a2 + 16) = v4;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = (char *)v9 - (char *)*a1;
  if (v9 != *a1)
  {
    unsigned int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    unsigned int v13 = 1;
    do
    {
      uint64_t v14 = *v8;
      v8 += 3;
      v7[v11] = *(_DWORD *)v14;
      float result = *(float *)(v14 + 4);
      *(float *)((char *)v7 + ((4 * v11) | 4)) = result;
      v11 += 2;
    }
    while (v12 > v13++);
  }
  return result;
}

void vg::ObjMeshData::~ObjMeshData(void **this)
{
  if (*((unsigned char *)this + 200)) {
    free(this[22]);
  }
  if (*((unsigned char *)this + 168)) {
    free(this[18]);
  }
  if (*((unsigned char *)this + 136)) {
    free(this[14]);
  }
  if (*((unsigned char *)this + 104)) {
    free(this[10]);
  }
  if (*((unsigned char *)this + 72)) {
    free(this[6]);
  }
  free(this[3]);
  free(*this);
}

void vg::ObjMeshDataToObjContents(vg *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  size_t v5 = (4 * (3 * *((_DWORD *)this + 4)) + 31) & 0x7FFFFFFE0;
  size_t v55 = v5 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x49090899uLL);
  size_t v6 = memptr;
  unint64_t v54 = memptr;
  int v7 = *((_DWORD *)this + 4);
  int v56 = 3;
  int v57 = v7;
  if (v7)
  {
    uint64_t v8 = (3 * v7);
    uint64_t v9 = *(int **)this;
    uint64_t v10 = 4 * v8;
    do
    {
      int v11 = *v9++;
      *v6++ = v11;
      v10 -= 4;
    }
    while (v10);
  }
  vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
  if (&v58 != (uint64_t *)a2) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
  }
  memptr = &v58;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
  free(v54);
  size_t v12 = (4 * (3 * *((_DWORD *)this + 10)) + 31) & 0x7FFFFFFE0;
  unint64_t v54 = 0;
  size_t v55 = v12 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x49090899uLL);
  unsigned int v13 = memptr;
  unint64_t v54 = memptr;
  int v14 = *((_DWORD *)this + 10);
  int v56 = 3;
  int v57 = v14;
  if (v14)
  {
    uint64_t v15 = (3 * v14);
    uint64_t v16 = (int *)*((void *)this + 3);
    uint64_t v17 = 4 * v15;
    do
    {
      int v18 = *v16++;
      *v13++ = v18;
      v17 -= 4;
    }
    while (v17);
  }
  vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
  if ((uint64_t *)(a2 + 72) != &v58) {
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 72, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
  }
  memptr = &v58;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
  free(v54);
  if (*((unsigned char *)this + 72))
  {
    size_t v19 = (4 * (2 * *((_DWORD *)this + 16)) + 31) & 0x7FFFFFFE0;
    unint64_t v54 = 0;
    size_t v55 = v19 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v19, 0x49090899uLL);
    uint64_t v20 = memptr;
    unint64_t v54 = memptr;
    int v21 = *((_DWORD *)this + 16);
    int v56 = 2;
    int v57 = v21;
    uint64_t v22 = (2 * v21);
    if (v22)
    {
      uint64_t v23 = (int *)*((void *)this + 6);
      uint64_t v24 = 4 * v22;
      do
      {
        int v25 = *v23++;
        *v20++ = v25;
        v24 -= 4;
      }
      while (v24);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 24) != &v58) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 24, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    }
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((unsigned char *)this + 104))
  {
    size_t v26 = (4 * (3 * *((_DWORD *)this + 24)) + 31) & 0x7FFFFFFE0;
    unint64_t v54 = 0;
    size_t v55 = v26 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v26, 0x49090899uLL);
    uint64_t v27 = memptr;
    unint64_t v54 = memptr;
    int v28 = *((_DWORD *)this + 24);
    int v56 = 3;
    int v57 = v28;
    if (v28)
    {
      uint64_t v29 = (3 * v28);
      uint64_t v30 = (int *)*((void *)this + 10);
      uint64_t v31 = 4 * v29;
      do
      {
        int v32 = *v30++;
        *v27++ = v32;
        v31 -= 4;
      }
      while (v31);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 48) != &v58) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 48, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    }
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((unsigned char *)this + 136))
  {
    size_t v33 = (4 * (3 * *((_DWORD *)this + 32)) + 31) & 0x7FFFFFFE0;
    unint64_t v54 = 0;
    size_t v55 = v33 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v33, 0x49090899uLL);
    unint64_t v34 = memptr;
    unint64_t v54 = memptr;
    int v35 = *((_DWORD *)this + 32);
    int v56 = 3;
    int v57 = v35;
    if (v35)
    {
      uint64_t v36 = (3 * v35);
      uint64_t v37 = (int *)*((void *)this + 14);
      uint64_t v38 = 4 * v36;
      do
      {
        int v39 = *v37++;
        *v34++ = v39;
        v38 -= 4;
      }
      while (v38);
    }
    vg::MatRXToVector2D<float>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 144) != &v58) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2 + 144, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    }
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((unsigned char *)this + 168))
  {
    size_t v40 = (4 * (3 * *((_DWORD *)this + 40)) + 31) & 0x7FFFFFFE0;
    size_t v55 = v40 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v40, 0x49090899uLL);
    int v41 = memptr;
    unint64_t v54 = memptr;
    int v42 = *((_DWORD *)this + 40);
    int v56 = 3;
    int v57 = v42;
    if (v42)
    {
      uint64_t v43 = (3 * v42);
      uint64_t v44 = (int *)*((void *)this + 18);
      uint64_t v45 = 4 * v43;
      do
      {
        int v46 = *v44++;
        *v41++ = v46;
        v45 -= 4;
      }
      while (v45);
    }
    vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 96) != &v58) {
      std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 96, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    }
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
  if (*((unsigned char *)this + 200))
  {
    size_t v47 = (4 * (3 * *((_DWORD *)this + 48)) + 31) & 0x7FFFFFFE0;
    size_t v55 = v47 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v47, 0x49090899uLL);
    unint64_t v48 = memptr;
    unint64_t v54 = memptr;
    int v49 = *((_DWORD *)this + 48);
    int v56 = 3;
    int v57 = v49;
    if (v49)
    {
      uint64_t v50 = (3 * v49);
      CGAffineTransform v51 = (int *)*((void *)this + 22);
      uint64_t v52 = 4 * v50;
      do
      {
        int v53 = *v51++;
        *v48++ = v53;
        v52 -= 4;
      }
      while (v52);
    }
    vg::MatRXToVector2D<unsigned int>((uint64_t *)&v54, &v58);
    if ((uint64_t *)(a2 + 120) != &v58) {
      std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 120, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3));
    }
    memptr = &v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&memptr);
    free(v54);
  }
}

void sub_260D1761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 4std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = &a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  free(a10);
  vg::ObjContents::~ObjContents(v13);
  _Unwind_Resume(a1);
}

void vg::MatRXToVector2D<float>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((unsigned int *)a1 + 5);
  std::vector<float>::vector(__p, *((unsigned int *)a1 + 4));
  std::vector<std::vector<float>>::vector(a2, v4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v5 = *((unsigned int *)a1 + 5);
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *((unsigned int *)a1 + 4);
    uint64_t v9 = *a1;
    uint64_t v10 = *a2;
    do
    {
      if (v8)
      {
        int v11 = *(_DWORD **)(v10 + 24 * v7);
        uint64_t v12 = v8;
        unsigned int v13 = v6;
        do
        {
          *v11++ = *(_DWORD *)(v9 + 4 * v13++);
          --v12;
        }
        while (v12);
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v5);
  }
}

void sub_260D1776C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vg::MatRXToVector2D<unsigned int>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((unsigned int *)a1 + 5);
  std::vector<unsigned int>::vector(&v12, *((unsigned int *)a1 + 4));
  std::vector<std::vector<unsigned int>>::vector(a2, v4, (uint64_t)&v12);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  unint64_t v5 = *((unsigned int *)a1 + 5);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = *a2;
    LODWORD(v9) = *((_DWORD *)a1 + 4);
    do
    {
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void *)(v8 + 24 * v6);
        do
        {
          *(_DWORD *)(v11 + 4 * v1std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(v7 + 4 * (v10 + v6 * v9));
          ++v10;
          unint64_t v9 = *((unsigned int *)a1 + 4);
        }
        while (v10 < v9);
        unint64_t v5 = *((unsigned int *)a1 + 5);
      }
      ++v6;
    }
    while (v6 < v5);
  }
}

void sub_260D17840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::UniqueVertexFromObjContents@<X0>(vg *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v83[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)(a2 + 48) = 0u;
  unint64_t v5 = (uint64_t *)(a2 + 48);
  *(_OWORD *)(a2 + 96) = 0u;
  uint64_t v6 = a2 + 96;
  *(_OWORD *)(a2 + 16std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 8std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  int64_t v72 = (void *)(a2 + 72);
  *(_OWORD *)a2 = 0u;
  std::vector<std::vector<unsigned int>>::resize((uint64_t *)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3));
  uint64_t v70 = v6;
  unint64_t v71 = v5;
  *(_OWORD *)std::string __p = 0u;
  long long v79 = 0u;
  float v80 = 1.0;
  std::vector<unsigned int>::vector(&v77, 3uLL);
  if (*((void *)this + 10) != *((void *)this + 9))
  {
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3); ++i)
    {
      for (uint64_t j = 0; j != 3; ++j)
      {
        uint64_t v11 = (uint64_t *)(*(void *)this + 24
                                          * *(unsigned int *)(*(void *)(*((void *)this + 9) + 24 * i) + 4 * j));
        uint64_t v12 = *v11;
        unint64_t v13 = v11[1] - *v11;
        if (v13) {
          BOOL v14 = v13 >= 9;
        }
        else {
          BOOL v14 = 0;
        }
        if (!v14) {
LABEL_144:
        }
          std::vector<float>::__throw_out_of_range[abi:ne180100]();
        v7.i64[0] = *(void *)v12;
        __int32 v15 = *(_DWORD *)(v12 + 8);
        uint64_t v16 = *((void *)this + 12);
        if (*((void *)this + 13) == v16)
        {
          float32x2_t v20 = 0;
        }
        else
        {
          uint64_t v17 = *((void *)this + 3) + 24 * *(unsigned int *)(*(void *)(v16 + 24 * i) + 4 * j);
          unint64_t v18 = *(void *)(v17 + 8) - *(void *)v17;
          if (v18) {
            BOOL v19 = v18 >= 5;
          }
          else {
            BOOL v19 = 0;
          }
          if (!v19) {
            goto LABEL_144;
          }
          float32x2_t v20 = **(float32x2_t **)v17;
        }
        uint64_t v21 = *((void *)this + 15);
        if (*((void *)this + 16) == v21)
        {
          float32x4_t v8 = 0uLL;
        }
        else
        {
          uint64_t v22 = (uint64_t *)(*((void *)this + 6) + 24 * *(unsigned int *)(*(void *)(v21 + 24 * i) + 4 * j));
          uint64_t v23 = *v22;
          unint64_t v24 = v22[1] - *v22;
          if (v24) {
            BOOL v25 = v24 > 8;
          }
          else {
            BOOL v25 = 0;
          }
          if (!v25) {
            goto LABEL_144;
          }
          v8.i64[0] = *(void *)v23;
          v8.i32[2] = *(_DWORD *)(v23 + 8);
        }
        float32x4_t v74 = v8;
        float32x4_t v8 = v7;
        v8.i32[2] = v15;
        float32x4_t v75 = v8;
        size_t v26 = v7.i32[0] ^ (v7.i32[1] << 15) ^ (v15 << 31);
        unint64_t v27 = (unint64_t)__p[1];
        if (__p[1])
        {
          uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v28.i16[0] = vaddlv_u8(v28);
          unint64_t v29 = v28.u32[0];
          if (v28.u32[0] > 1uLL)
          {
            unint64_t v30 = v26;
            if (__p[1] <= (void *)v26) {
              unint64_t v30 = v26 % (size_t)__p[1];
            }
          }
          else
          {
            unint64_t v30 = (LODWORD(__p[1]) - 1) & v26;
          }
          int v32 = (void **)*((void *)__p[0] + v30);
          if (v32)
          {
            size_t v33 = (char *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v34 = *((void *)v33 + 1);
                if (v34 == v26)
                {
                  uint32x4_t v35 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 1), v8);
                  v35.i32[3] = v35.i32[2];
                  if ((vminvq_u32(v35) & 0x80000000) != 0)
                  {
                    uint32x2_t v36 = (uint32x2_t)vceq_f32(*(float32x2_t *)(v33 + 32), v20);
                    if ((vpmin_u32(v36, v36).u32[0] & 0x80000000) != 0)
                    {
                      v7.i64[1] = v74.i64[1];
                      uint32x4_t v37 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 3), v74);
                      v37.i32[3] = v37.i32[2];
                      if ((vminvq_u32(v37) & 0x80000000) != 0) {
                        goto LABEL_117;
                      }
                    }
                  }
                }
                else
                {
                  if (v29 > 1)
                  {
                    if ((void *)v34 >= __p[1]) {
                      v34 %= (unint64_t)__p[1];
                    }
                  }
                  else
                  {
                    v34 &= (unint64_t)__p[1] - 1;
                  }
                  if (v34 != v30) {
                    break;
                  }
                }
                size_t v33 = *(char **)v33;
              }
              while (v33);
            }
          }
          if (v29 > 1)
          {
            size_t prime = v26;
            if (__p[1] <= (void *)v26) {
              size_t prime = v26 % (size_t)__p[1];
            }
          }
          else
          {
            size_t prime = (LODWORD(__p[1]) - 1) & v26;
          }
          uint64_t v31 = *((void *)&v79 + 1);
          uint64_t v38 = (void **)*((void *)__p[0] + prime);
          if (v38)
          {
            size_t v33 = (char *)*v38;
            if (*v38)
            {
              do
              {
                unint64_t v39 = *((void *)v33 + 1);
                if (v39 == v26)
                {
                  uint32x4_t v40 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 1), v8);
                  v40.i32[3] = v40.i32[2];
                  if ((vminvq_u32(v40) & 0x80000000) != 0)
                  {
                    uint32x2_t v41 = (uint32x2_t)vceq_f32(*(float32x2_t *)(v33 + 32), v20);
                    if ((vpmin_u32(v41, v41).u32[0] & 0x80000000) != 0)
                    {
                      v7.i64[1] = v74.i64[1];
                      uint32x4_t v42 = (uint32x4_t)vceqq_f32(*((float32x4_t *)v33 + 3), v74);
                      v42.i32[3] = v42.i32[2];
                      if ((vminvq_u32(v42) & 0x80000000) != 0) {
                        goto LABEL_117;
                      }
                    }
                  }
                }
                else
                {
                  if (v29 > 1)
                  {
                    if ((void *)v39 >= __p[1]) {
                      v39 %= (unint64_t)__p[1];
                    }
                  }
                  else
                  {
                    v39 &= (unint64_t)__p[1] - 1;
                  }
                  if (v39 != prime) {
                    break;
                  }
                }
                size_t v33 = *(char **)v33;
              }
              while (v33);
            }
          }
        }
        else
        {
          uint64_t v31 = *((void *)&v79 + 1);
        }
        size_t v33 = (char *)operator new(0x50uLL);
        *(void *)size_t v33 = 0;
        *((void *)v33 + 1) = v26;
        *((float32x4_t *)v33 + 1) = v75;
        *((float32x2_t *)v33 + 4) = v20;
        *((float32x4_t *)v33 + 3) = v74;
        *((_DWORD *)v33 + 16) = v31;
        *(void *)(v33 + 68) = __src;
        *((_DWORD *)v33 + 19) = v82;
        float v43 = (float)(unint64_t)(v31 + 1);
        if (v27 && (float)(v80 * (float)v27) >= v43)
        {
          size_t v26 = prime;
          goto LABEL_107;
        }
        BOOL v44 = (v27 & (v27 - 1)) == 0;
        if (v27 < 3) {
          BOOL v44 = 0;
        }
        unint64_t v45 = (2 * v27) | !v44;
        unint64_t v46 = vcvtps_u32_f32(v43 / v80);
        if (v45 <= v46) {
          size_t prime = v46;
        }
        else {
          size_t prime = v45;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v27 = (unint64_t)__p[1];
        }
        if (prime <= v27)
        {
          if (prime >= v27) {
            goto LABEL_103;
          }
          unint64_t v53 = vcvtps_u32_f32((float)*((unint64_t *)&v79 + 1) / v80);
          if (v27 < 3 || (uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
          {
            unint64_t v53 = std::__next_prime(v53);
          }
          else
          {
            uint64_t v55 = 1 << -(char)__clz(v53 - 1);
            if (v53 >= 2) {
              unint64_t v53 = v55;
            }
          }
          if (prime <= v53) {
            size_t prime = v53;
          }
          if (prime >= v27)
          {
            unint64_t v27 = (unint64_t)__p[1];
            goto LABEL_103;
          }
          if (!prime)
          {
            uint32x4_t v62 = __p[0];
            __p[0] = 0;
            if (v62) {
              operator delete(v62);
            }
            unint64_t v27 = 0;
            __p[1] = 0;
            goto LABEL_103;
          }
        }
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        size_t v47 = operator new(8 * prime);
        unint64_t v48 = __p[0];
        __p[0] = v47;
        if (v48) {
          operator delete(v48);
        }
        uint64_t v49 = 0;
        __p[1] = (void *)prime;
        do
          *((void *)__p[0] + v49++) = 0;
        while (prime != v49);
        uint64_t v50 = (void **)v79;
        if ((void)v79)
        {
          size_t v51 = *(void *)(v79 + 8);
          uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            if (v51 >= prime) {
              v51 %= prime;
            }
          }
          else
          {
            v51 &= prime - 1;
          }
          *((void *)__p[0] + v51) = &v79;
          for (k = *v50; k; size_t v51 = v57)
          {
            size_t v57 = k[1];
            if (v52.u32[0] > 1uLL)
            {
              if (v57 >= prime) {
                v57 %= prime;
              }
            }
            else
            {
              v57 &= prime - 1;
            }
            if (v57 != v51)
            {
              if (!*((void *)__p[0] + v57))
              {
                *((void *)__p[0] + v57) = v50;
                goto LABEL_99;
              }
              void *v50 = (void *)*k;
              *uint64_t k = **((void **)__p[0] + v57);
              **((void **)__p[0] + v57) = k;
              uint64_t k = v50;
            }
            size_t v57 = v51;
LABEL_99:
            uint64_t v50 = (void **)k;
            uint64_t k = (void *)*k;
          }
        }
        unint64_t v27 = prime;
LABEL_103:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v27 <= v26) {
            v26 %= v27;
          }
        }
        else
        {
          size_t v26 = (v27 - 1) & v26;
        }
LABEL_107:
        uint64_t v58 = __p[0];
        uint64_t v59 = (void *)*((void *)__p[0] + v26);
        if (v59)
        {
          *(void *)size_t v33 = *v59;
LABEL_115:
          void *v59 = v33;
          goto LABEL_116;
        }
        *(void *)size_t v33 = v79;
        *(void *)&long long v79 = v33;
        v58[v26] = &v79;
        if (*(void *)v33)
        {
          unint64_t v60 = *(void *)(*(void *)v33 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v60 >= v27) {
              v60 %= v27;
            }
          }
          else
          {
            v60 &= v27 - 1;
          }
          uint64_t v59 = (char *)__p[0] + 8 * v60;
          goto LABEL_115;
        }
LABEL_116:
        ++*((void *)&v79 + 1);
LABEL_117:
        begin = (char *)v77.__begin_;
        v77.__begin_[j] = *((_DWORD *)v33 + 16);
      }
      uint64_t v63 = (char *)(*v72 + 24 * i);
      if (v63 != (char *)&v77) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v63, begin, (uint64_t)v77.__end_, ((char *)v77.__end_ - begin) >> 2);
      }
    }
  }
  std::vector<std::vector<float>>::resize((uint64_t *)a2, *((unint64_t *)&v79 + 1));
  std::string::size_type v64 = (uint64_t *)(a2 + 24);
  if (*((void *)this + 12) != *((void *)this + 13))
  {
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(v70, *(void *)(a2 + 72), *(void *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
    std::vector<std::vector<float>>::resize(v64, *((unint64_t *)&v79 + 1));
  }
  if (*((void *)this + 15) != *((void *)this + 16))
  {
    std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a2 + 120, *(void *)(a2 + 72), *(void *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
    std::vector<std::vector<float>>::resize(v71, *((unint64_t *)&v79 + 1));
  }
  for (m = (uint64_t *)v79; m; m = (uint64_t *)*m)
  {
    long long v66 = *((_OWORD *)m + 1);
    uint64_t v67 = m[4];
    float32x4_t v76 = *((float32x4_t *)m + 3);
    unsigned int v68 = *((_DWORD *)m + 16);
    uint64_t __src = m[2];
    __int32 v82 = DWORD2(v66);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*(void *)a2 + 24 * v68), (char *)&__src, (uint64_t)v83, 3uLL);
    if (*((void *)this + 12) != *((void *)this + 13))
    {
      uint64_t __src = v67;
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*v64 + 24 * v68), (char *)&__src, (uint64_t)&v82, 2uLL);
    }
    if (*((void *)this + 15) != *((void *)this + 16))
    {
      uint64_t __src = v76.i64[0];
      __int32 v82 = v76.i32[2];
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(*v71 + 24 * v68), (char *)&__src, (uint64_t)v83, 3uLL);
    }
  }
  if (v77.__begin_)
  {
    v77.__end_ = v77.__begin_;
    operator delete(v77.__begin_);
  }
  return std::__hash_table<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::__unordered_map_hasher<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,OSTypePairHash,std::equal_to<std::pair<unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned int,unsigned int>,std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>,std::equal_to<std::pair<unsigned int,unsigned int>>,OSTypePairHash,true>,std::allocator<std::__hash_value_type<std::pair<unsigned int,unsigned int>,std::array<unsigned char,4ul>>>>::~__hash_table((uint64_t)__p);
}

void sub_260D180C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, vg::ObjContents *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void vg::ObjRead(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  vg::ObjIO::read(a1, a2, (uint64_t)v4);
  vg::ObjContentsToObjMeshData((uint64_t)v4, a3);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v4);
}

void sub_260D182C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vg::ObjRead@<X0>(vg *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = (char)a2;
  v13[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v11);
  if (!v12[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)this);
    __n128 v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v9, &v10);
    MEMORY[0x261227580](exception, &v10, v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  vg::ObjRead(v11, v3, a3);
  v11[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x261227660](v12);
  std::istream::~istream();
  return MEMORY[0x261227850](v13);
}

void sub_260D18474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void vg::ObjWrite(vg *a1, uint64_t *a2)
{
  vg::ObjMeshDataToObjContents(a1, (uint64_t)v3);
  vg::ObjIO::write(v3, a2);
  vg::ObjContents::~ObjContents((vg::ObjContents *)v3);
}

void sub_260D18530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vg::ObjWrite(vg *this, const vg::ObjMeshData *a2, const char *a3)
{
  v12[19] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(&v10);
  if (!v11[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    __n128 v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Could not open file. ", &v8, &v9);
    MEMORY[0x261227580](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  vg::ObjWrite(this, &v10);
  uint64_t v10 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x261227660](v11);
  std::ostream::~ostream();
  return MEMORY[0x261227850](v12);
}

void sub_260D186D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::ofstream::~ofstream(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_260D18A50(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<float>>::__emplace_back_slow_path<std::vector<float>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  __int32 v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_260D18B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_260D18BD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__emplace_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  __int32 v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_260D18CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  unint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      __int32 v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        *unint64_t v9 = 0;
        v9[1] = 0;
        void v9[2] = 0;
        uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      unint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v21 = result;
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v17 = v14;
    unint64_t v18 = &v14[24 * v10];
    BOOL v19 = v18;
    float32x2_t v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_260D18E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<std::vector<float>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = (void *)result[2];
  if (a2)
  {
    uint64_t v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_260D18EE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      long long v14 = 0;
    }
    __int32 v15 = &v14[4 * v11];
    uint64_t v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      BOOL v19 = *(void **)(v17 - 24);
      v17 -= 24;
      int v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_260D19180(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_260D19188(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_260D1926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<unsigned int>>::__assign_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      BOOL v19 = *(void **)(v17 - 24);
      v17 -= 24;
      int v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_260D194F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_260D194FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_260D195A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_260D19744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<float>::__throw_out_of_range[abi:ne180100]()
{
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vg::hrtf::FaceFrameData>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_260D198C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x261227670](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_260D19A38(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x260D199F8);
  }
  __cxa_rethrow();
}

void sub_260D19AB4(_Unwind_Exception *a1)
{
}

void *std::vector<std::vector<unsigned int>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      _DWORD v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_260D19B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t vg::shared::VGE5RT::modelVersion@<X0>(void *a1@<X8>)
{
  E5RT::ProgramLibrary::OpenLibrary();
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "unknown");
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "main");
  uint64_t FunctionMetadata = E5RT::ProgramLibrary::GetFunctionMetadata();
  uint64_t v3 = (void *)FunctionMetadata;
  if (v8 < 0)
  {
    operator delete(__p);
    if (v3) {
      goto LABEL_4;
    }
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a1, "unknown");
    goto LABEL_11;
  }
  if (!FunctionMetadata) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = [v3 objectForKeyedSubscript:@"UserVersion"];

  if (v4) {
    uint64_t v5 = (char *)[v4 UTF8String];
  }
  else {
    uint64_t v5 = "unknown";
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v5);

LABEL_11:
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_260D19C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vg::shared::VGE5RT::isANESupported(vg::shared::VGE5RT *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = [MEMORY[0x263F28048] aneSubType];
  if ([v1 isEqualToString:@"h11"]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = [v1 isEqualToString:@"h12"] ^ 1;
  }
  uint64_t v3 = __VGLogSharedInstance();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    uint64_t v6 = [v1 UTF8String];
    __int16 v7 = 1024;
    int v8 = v2;
    _os_log_impl(&dword_260C8D000, v3, OS_LOG_TYPE_INFO, " Support for ANE %s: %d ", (uint8_t *)&v5, 0x12u);
  }

  return v2;
}

void sub_260D19E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t vg::shared::VGE5RT::isOutputSurfaceSupported(vg::shared::VGE5RT *this)
{
  return 1;
}

BOOL vg::shared::VGE5RT::isTensorComponentFloat16(vg::shared::VGE5RT *this, const E5RT::TensorDescriptor *a2)
{
  E5RT::TensorDescriptor::GetTensorDataType(v4, this);
  BOOL v2 = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v4) == 4
    && E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v4) == 2;
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v4);
  return v2;
}

void sub_260D19EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL vg::shared::VGE5RT::isPortFloat16(E5RT::IOPort **a1)
{
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*a1);
  BOOL v2 = (vg::shared::VGE5RT *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);

  return vg::shared::VGE5RT::isTensorComponentFloat16(v2, v3);
}

id vg::shared::VGE5RT::tensorSurfaceProperties(vg::shared::VGE5RT *this, const E5RT::TensorDescriptor *a2)
{
  void v19[5] = *MEMORY[0x263EF8340];
  E5RT::TensorDescriptor::GetTensorDataType(v17, this);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(this);
  unint64_t v6 = *(void *)(*(void *)(TensorShape + 8) - 8);
  uint64_t v7 = *(void *)(*(void *)(TensorStrides + 8) - 16);
  v18[0] = *MEMORY[0x263F0ECF8];
  int v8 = [NSNumber numberWithUnsignedLong:v6];
  v19[0] = v8;
  v18[1] = *MEMORY[0x263F0ECC0];
  uint64_t v9 = [NSNumber numberWithUnsignedLong:NumElements / v6];
  v19[1] = v9;
  void v18[2] = *MEMORY[0x263F0ECA0];
  unint64_t v10 = [NSNumber numberWithUnsignedChar:E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType *)v17)];
  v19[2] = v10;
  v18[3] = *MEMORY[0x263F0ECA8];
  char v11 = [NSNumber numberWithUnsignedLong:v7];
  uint64_t v19[3] = v11;
  v18[4] = *MEMORY[0x263F0ECC8];
  BOOL isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16(this, v12);
  size_t v14 = &unk_270CFDEA0;
  if (isTensorComponentFloat16) {
    size_t v14 = &unk_270CFDE88;
  }
  void v19[4] = v14;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:5];

  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v17);

  return v15;
}

void sub_260D1A0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

id vg::shared::VGE5RT::convert1DVectorToSurface(uint64_t a1, vg::shared::VGE5RT *this)
{
  uint64_t v4 = vg::shared::VGE5RT::tensorSurfaceProperties(this, this);
  int v5 = [v4 objectForKeyedSubscript:*MEMORY[0x263F0ECF8]];
  unint64_t v6 = [v4 objectForKeyedSubscript:*MEMORY[0x263F0ECC0]];
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = [v5 unsignedIntValue];
  if (v7 == [v6 unsignedIntValue] * v8)
  {
    uint64_t v9 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v4];
    if (vg::shared::VGE5RT::isTensorComponentFloat16(this, v10)) {
      _ZN2vg6shared6VGE5RT6detail24write1DVectorToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj1ELb0EEE(v9, (void *)a1);
    }
    else {
      vg::shared::VGE5RT::detail::write1DVectorToIOSurface<float>(v9, (void *)a1);
    }
  }
  else
  {
    char v11 = __VGLogSharedInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)size_t v13 = 0;
      _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_ERROR, " vector size mismatch. ", v13, 2u);
    }

    uint64_t v9 = 0;
  }

  return v9;
}

void sub_260D1A26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZN2vg6shared6VGE5RT6detail24write1DVectorToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj1ELb0EEE(void *a1, void *a2)
{
  uint64_t v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v11, v3, 0);
  for (unint64_t i = 0; i < [(IOSurface *)v3 height]; ++i)
  {
    for (unint64_t j = 0; j < [(IOSurface *)v3 width]; ++j)
    {
      _S0 = *(_DWORD *)(*a2 + 4 * (j + i * [(IOSurface *)v3 width]));
      __asm { FCVT            H0, S0 }
      *(_WORD *)((char *)v11[2] + (unint64_t)v11[3] * i + (unint64_t)v11[4] * j) = _S0;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v11);
}

void sub_260D1A360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::detail::write1DVectorToIOSurface<float>(void *a1, void *a2)
{
  uint64_t v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v7, v3, 0);
  for (unint64_t i = 0; i < [(IOSurface *)v3 height]; ++i)
  {
    for (unint64_t j = 0; j < [(IOSurface *)v3 width]; ++j)
    {
      int v6 = [(IOSurface *)v3 width];
      *(_DWORD *)((char *)v7[2] + (unint64_t)v7[3] * i + (unint64_t)v7[4] * j) = *(_DWORD *)(*a2 + 4 * (j + i * v6));
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v7);
}

void sub_260D1A43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::convertSurfaceTo1DVector(vg::shared::VGE5RT *this@<X0>, IOSurface *a2@<X1>, const E5RT::TensorDescriptor *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v29 = this;
  unint64_t v27 = vg::shared::VGE5RT::tensorSurfaceProperties((vg::shared::VGE5RT *)a2, v6);
  int v7 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECF8]];
  unint64_t v30 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECC0]];
  uint64_t v31 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECA8]];
  int v8 = [v7 unsignedIntValue];
  unsigned int v9 = [v30 unsignedIntValue] * v8;
  size_t v10 = (4 * v9 + 31) & 0x7FFFFFFE0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  char v11 = memptr;
  *(void *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = v9;
  [(vg::shared::VGE5RT *)v29 lockWithOptions:0 seed:0];
  v32[0] = MEMORY[0x263EF8330];
  v32[1] = 3221225472;
  v32[2] = ___ZN2vg6shared6VGE5RT24convertSurfaceTo1DVectorEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke;
  v32[3] = &unk_265570218;
  uint64_t v12 = v29;
  size_t v33 = v12;
  uint8x8_t v28 = (void (**)(void))MEMORY[0x261227FC0](v32);
  BOOL isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16((vg::shared::VGE5RT *)a2, v13);
  for (unsigned int i = 0; i < [v30 unsignedIntValue]; ++i)
  {
    int v16 = 0;
    int v17 = 0;
    for (unint64_t j = 0; j < [v7 unsignedIntValue]; ++j)
    {
      int v19 = j + i * [v7 unsignedIntValue];
      uint64_t v20 = [(vg::shared::VGE5RT *)v12 baseAddress];
      if (isTensorComponentFloat16)
      {
        _H0 = *(_WORD *)(v20 + [v31 unsignedIntValue] * i + (v17 & 0xFFFFFFFE));
        __asm { FCVT            S0, H0 }
      }
      else
      {
        _S0 = *(_DWORD *)(v20 + [v31 unsignedIntValue] * i + (v16 & 0xFFFFFFFC));
      }
      v11[v19] = _S0;
      v17 += 2;
      v16 += 4;
    }
  }
  v28[2](v28);
}

void sub_260D1A6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  free(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg6shared6VGE5RT24convertSurfaceTo1DVectorEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

id vg::shared::VGE5RT::convert2DMatrixToSurface(uint64_t a1, vg::shared::VGE5RT *this)
{
  uint64_t v4 = vg::shared::VGE5RT::tensorSurfaceProperties(this, this);
  int v5 = [v4 objectForKeyedSubscript:*MEMORY[0x263F0ECF8]];
  int v6 = [v4 objectForKeyedSubscript:*MEMORY[0x263F0ECC0]];
  int v7 = *(_DWORD *)(a1 + 20);
  if (v7 == [v5 unsignedIntValue]
    && (int v8 = *(_DWORD *)(a1 + 16), v8 == [v6 unsignedIntValue]))
  {
    unsigned int v9 = (void *)[objc_alloc(MEMORY[0x263F0ED00]) initWithProperties:v4];
    if (vg::shared::VGE5RT::isTensorComponentFloat16(this, v10)) {
      _ZN2vg6shared6VGE5RT6detail24write2DMatrixToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj0ELb0EEE(v9, a1);
    }
    else {
      vg::shared::VGE5RT::detail::write2DMatrixToIOSurface<float>(v9, a1);
    }
  }
  else
  {
    char v11 = __VGLogSharedInstance();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)size_t v13 = 0;
      _os_log_impl(&dword_260C8D000, v11, OS_LOG_TYPE_ERROR, " matrix size mismatch. ", v13, 2u);
    }

    unsigned int v9 = 0;
  }

  return v9;
}

void sub_260D1A8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZN2vg6shared6VGE5RT6detail24write2DMatrixToIOSurfaceIDF16_EEvP9IOSurfaceRKN3cva6MatrixIfLj0ELj0ELb0EEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v11, v3, 0);
  for (unint64_t i = 0; i < [(IOSurface *)v3 height]; ++i)
  {
    for (unint64_t j = 0; j < [(IOSurface *)v3 width]; ++j)
    {
      _S0 = *(_DWORD *)(*(void *)a2 + 4 * (i + *(_DWORD *)(a2 + 16) * j));
      __asm { FCVT            H0, S0 }
      *(_WORD *)((char *)v11[2] + (unint64_t)v11[3] * i + (unint64_t)v11[4] * j) = _S0;
    }
  }
  vg::IOSurfaceData::~IOSurfaceData(v11);
}

void sub_260D1A9CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::detail::write2DMatrixToIOSurface<float>(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  vg::IOSurfaceData::IOSurfaceData((vg::IOSurfaceData *)v6, v3, 0);
  for (unint64_t i = 0; i < [(IOSurface *)v3 height]; ++i)
  {
    for (unint64_t j = 0; j < [(IOSurface *)v3 width]; ++j)
      *(_DWORD *)((char *)v6[2] + (unint64_t)v6[3] * i + (unint64_t)v6[4] * j) = *(_DWORD *)(*(void *)a2 + 4 * (i + *(_DWORD *)(a2 + 16) * j));
  }
  vg::IOSurfaceData::~IOSurfaceData(v6);
}

void sub_260D1AAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::convertSurfaceTo2DMatrix(vg::shared::VGE5RT *this@<X0>, IOSurface *a2@<X1>, const E5RT::TensorDescriptor *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = this;
  unint64_t v27 = vg::shared::VGE5RT::tensorSurfaceProperties((vg::shared::VGE5RT *)a2, v7);
  uint64_t v31 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECF8]];
  unint64_t v29 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECC0]];
  unint64_t v30 = [v27 objectForKeyedSubscript:*MEMORY[0x263F0ECA8]];
  int v8 = [v29 unsignedIntValue];
  int v9 = [v31 unsignedIntValue];
  size_t v10 = (4 * (v9 * v8) + 31) & 0x7FFFFFFE0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v10 >> 2;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x49090899uLL);
  char v11 = memptr;
  *(void *)a4 = memptr;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 2std::unique_ptr<vg::hrtf::DTFModelImpl>::reset[abi:ne180100](this, 0) = v9;
  [(vg::shared::VGE5RT *)v6 lockWithOptions:0 seed:0];
  v32[0] = MEMORY[0x263EF8330];
  v32[1] = 3221225472;
  v32[2] = ___ZN2vg6shared6VGE5RT24convertSurfaceTo2DMatrixEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke;
  v32[3] = &unk_265570218;
  uint64_t v12 = v6;
  size_t v33 = v12;
  uint8x8_t v28 = (void (**)(void))MEMORY[0x261227FC0](v32);
  BOOL isTensorComponentFloat16 = vg::shared::VGE5RT::isTensorComponentFloat16((vg::shared::VGE5RT *)a2, v13);
  for (unsigned int i = 0; i < [v29 unsignedIntValue]; ++i)
  {
    int v16 = 0;
    int v17 = 0;
    unint64_t v18 = 0;
    unsigned int v19 = i;
    while (v18 < [v31 unsignedIntValue])
    {
      uint64_t v20 = [(vg::shared::VGE5RT *)v12 baseAddress];
      if (isTensorComponentFloat16)
      {
        _H0 = *(_WORD *)(v20 + [v30 unsignedIntValue] * i + (v17 & 0xFFFFFFFE));
        __asm { FCVT            S0, H0 }
      }
      else
      {
        _S0 = *(_DWORD *)(v20 + [v30 unsignedIntValue] * i + (v16 & 0xFFFFFFFC));
      }
      v11[v19] = _S0;
      ++v18;
      v19 += v8;
      v17 += 2;
      v16 += 4;
    }
  }
  v28[2](v28);
}

void sub_260D1AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  free(v20);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2vg6shared6VGE5RT24convertSurfaceTo2DMatrixEPK9IOSurfaceRKN4E5RT16TensorDescriptorE_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) unlockWithOptions:0 seed:0];
}

void vg::shared::VGE5RT::compileModel(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v6 = VGLogVGE5RT();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CompileE5RTModel", (const char *)&unk_260D385D9, buf, 2u);
  }

  E5RT::E5CompilerOptions::Create(&v32, v7);
  int v8 = operator new(8uLL);
  *int v8 = 1;
  unint64_t v30 = v8 + 1;
  uint64_t v31 = v8 + 1;
  *(void *)vImage_Buffer buf = v8;
  if (a2)
  {
    int v9 = operator new(0x10uLL);
    *int v9 = xmmword_260D24050;
    size_t v10 = v9 + 1;
    *(void *)vImage_Buffer buf = v9;
    unint64_t v30 = v9 + 1;
    uint64_t v31 = v9 + 1;
    operator delete(v8);
    unint64_t v30 = v10;
  }
  char v11 = (E5RT::E5Compiler *)E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  E5RT::E5Compiler::GetCompiler(v11);
  E5RT::E5Compiler::Compile();
  if (!v28)
  {
    uint64_t v20 = VGLogVGE5RT();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v21 = a1;
      }
      else {
        char v21 = (uint64_t *)*a1;
      }
      int v22 = [NSString stringWithUTF8String:v21];
      vg::shared::VGE5RT::compileModel(v22, __p, v20);
    }

    goto LABEL_32;
  }
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v28);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  size_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(ExportedFunctions, __p);
  size_t v14 = v13;
  if (v34 < 0)
  {
    operator delete(*(void **)__p);
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
  if (!v13)
  {
LABEL_29:
    int v23 = VGLogVGE5RT();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      vg::shared::VGE5RT::compileModel(v23);
    }

LABEL_32:
    *a3 = 0;
    goto LABEL_33;
  }
LABEL_8:
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(ExportedFunctions, __p);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v16 = (std::__shared_weak_count *)*((void *)v15 + 6);
  uint64_t v25 = *((void *)v15 + 5);
  size_t v26 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v34 < 0) {
    operator delete(*(void **)__p);
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  int v17 = VGLogVGE5RT();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v18 = a1;
    }
    else {
      unint64_t v18 = (uint64_t *)*a1;
    }
    unsigned int v19 = objc_msgSend(NSString, "stringWithUTF8String:", v18, v25);
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v19;
    _os_log_impl(&dword_260C8D000, v17, OS_LOG_TYPE_INFO, "successfully compiled model in: %@", __p, 0xCu);
  }
  if (v27) {
    (*(void (**)())(*(void *)v27 + 8))();
  }
LABEL_33:
  if (v28) {
    (*(void (**)())(*(void *)v28 + 8))();
  }
  if (*(void *)buf)
  {
    unint64_t v30 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v24 = v32;
  uint64_t v32 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke();
}

void sub_260D1B174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke();
  _Unwind_Resume(a1);
}

id VGLogVGE5RT(void)
{
  if (VGLogVGE5RT(void)::onceToken != -1) {
    dispatch_once(&VGLogVGE5RT(void)::onceToken, &__block_literal_global_20);
  }
  uint64_t v0 = (void *)VGLogVGE5RT(void)::handle;

  return v0;
}

void ___ZN2vg6shared6VGE5RT12compileModelERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke()
{
  uint64_t v0 = VGLogVGE5RT();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_260C8D000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CompileE5RTModel", (const char *)&unk_260D385D9, v1, 2u);
  }
}

void ___ZL11VGLogVGE5RTv_block_invoke()
{
  objc_msgSend(MEMORY[0x263F086E0], "vg_bundleIdentifier");
  id v2 = objc_claimAutoreleasedReturnValue();
  os_log_t v0 = os_log_create((const char *)[v2 UTF8String], "VGE5RT");
  uint64_t v1 = (void *)VGLogVGE5RT(void)::handle;
  VGLogVGE5RT(void)::handle = (uint64_t)v0;
}

void sub_260D1B3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void vg::shared::VGE5RT::compileModel(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)vImage_Buffer buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "failed to compile model: %@", buf, 0xCu);
}

void vg::shared::VGE5RT::compileModel(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_260C8D000, log, OS_LOG_TYPE_ERROR, "cannot find main function in compiled library.", v1, 2u);
}

void sub_260D1B5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D1B70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_260D1B898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x270F18A38]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE53E8](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x270EE62B8](provider);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x270EE67A0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x270EE67C0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x270EE67E8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7180]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x270EE7188]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x270EE7278](dict, rect);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x270EE7DD0](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x270EE7DE0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x270EE7E08](time);
  return result;
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x270EE7E38](retstr, *(void *)&preferredTimescale, seconds);
}

uint64_t CVAFaceTrackingCopySemantics()
{
  return MEMORY[0x270F0CEE0]();
}

uint64_t CVAFaceTrackingCreate()
{
  return MEMORY[0x270F0CEE8]();
}

uint64_t CVAFaceTrackingProcess()
{
  return MEMORY[0x270F0CEF8]();
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA168](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA170](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA178](allocator, width, height, *(void *)&pixelFormatType, dataPtr, dataSize, numberOfPlanes, planeBaseAddress);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA258](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x270EEA278](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA288](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

size_t IOSurfaceAlignProperty(CFStringRef property, size_t value)
{
  return MEMORY[0x270EF4C00](property, value);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E20]();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t IR::IRDataLoader::writeIRFile()
{
  return MEMORY[0x270F91068]();
}

uint64_t IR::IRCoordinates::set()
{
  return MEMORY[0x270F910A8]();
}

uint64_t IR::IRCoordinates::IRCoordinates(IR::IRCoordinates *this)
{
  return MEMORY[0x270F910B0](this);
}

uint64_t IR::IRData::getCoordinateTree(IR::IRData *this)
{
  return MEMORY[0x270F910C0](this);
}

uint64_t IR::IRData::createSoundProfilePack(IR::IRData *this, const IR::IRData *a2, const IR::IRData *a3, const void *a4, const __CFString *a5)
{
  return MEMORY[0x270F910C8](this, a2, a3, a4, a5);
}

uint64_t IR::IRData::IRData()
{
  return MEMORY[0x270F910D0]();
}

void vg::shared::computeMedian<float>()
{
  while (1)
    ;
}

uint64_t cva::ItemHandler::createData(cva::ItemHandler *this, const __CFData *a2)
{
  return MEMORY[0x270F18A80](this, a2);
}

void cva::ItemHandler::createValue<BOOL>()
{
  while (1)
    ;
}

void cva::ItemHandler::createMatrix<float>()
{
  while (1)
    ;
}

void cva::ItemHandler::createMatrix<int>()
{
  while (1)
    ;
}

void cva::ItemHandler::~ItemHandler(cva::ItemHandler *this)
{
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const __CFString *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x270F18A90](this, a2, a3);
}

uint64_t cva::DictionaryHandler::setItem(cva::DictionaryHandler *this, const char *a2, const cva::ItemHandler *a3)
{
  return MEMORY[0x270F18A98](this, a2, a3);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, __CFDictionary *a2)
{
  return MEMORY[0x270F18AA0](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F18AA8](this, a2);
}

uint64_t cva::DictionaryHandler::DictionaryHandler(cva::DictionaryHandler *this)
{
  return MEMORY[0x270F18AB0](this);
}

void cva::DictionaryHandler::~DictionaryHandler(cva::DictionaryHandler *this)
{
}

void cva::VecLib<float>::gemm()
{
  while (1)
    ;
}

uint64_t E5RT::E5Compiler::GetCompiler(E5RT::E5Compiler *this)
{
  return MEMORY[0x270F277E8](this);
}

uint64_t E5RT::E5Compiler::Compile()
{
  return MEMORY[0x270F27800]();
}

uint64_t E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>()
{
  return MEMORY[0x270F27818]();
}

uint64_t E5RT::BufferObject::GetHandle<__IOSurface *>()
{
  return MEMORY[0x270F27820]();
}

uint64_t E5RT::ProgramLibrary::OpenLibrary()
{
  return MEMORY[0x270F27858]();
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return MEMORY[0x270F27860](this);
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
}

uint64_t E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F27880](this);
}

uint64_t E5RT::ExecutionStream::EncodeOperation()
{
  return MEMORY[0x270F27888]();
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F27898](this);
}

uint64_t E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x270F278A0](this);
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed()
{
  return MEMORY[0x270F278E0]();
}

uint64_t E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x270F27900](this);
}

uint64_t E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp()
{
  return MEMORY[0x270F27940]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::Create()
{
  return MEMORY[0x270F27990]();
}

uint64_t E5RT::IOPort::BindMemoryObject()
{
  return MEMORY[0x270F279A8]();
}

uint64_t IR::IRData::getUserData(IR::IRData *this)
{
  return MEMORY[0x270F91100](this);
}

uint64_t IR::IRData::getSampleRate(IR::IRData *this)
{
  return MEMORY[0x270F91108](this);
}

uint64_t IR::IRData::getFilterLength(IR::IRData *this)
{
  return MEMORY[0x270F91110](this);
}

uint64_t IR::IRData::getInterpolationMethod(IR::IRData *this)
{
  return MEMORY[0x270F91128](this);
}

uint64_t IR::IRData::getNumFiltersPerSpatialPoint(IR::IRData *this)
{
  return MEMORY[0x270F91130](this);
}

uint64_t IR::IRData::getPeriodForCyclicalDimensions(IR::IRData *this)
{
  return MEMORY[0x270F91138](this);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs()
{
  return MEMORY[0x270F91140]();
}

uint64_t cva::ItemHandler::isDataType(cva::ItemHandler *this)
{
  return MEMORY[0x270F18B10](this);
}

uint64_t cva::ItemHandler::isMatrixType(cva::ItemHandler *this)
{
  return MEMORY[0x270F18B18](this);
}

uint64_t cva::ItemHandler::getData(cva::ItemHandler *this)
{
  return MEMORY[0x270F18B20](this);
}

void cva::ItemHandler::getMatrix<float>()
{
  while (1)
    ;
}

void cva::ItemHandler::getMatrix<int>()
{
  while (1)
    ;
}

uint64_t cva::DictionaryHandler::getDictionary(cva::DictionaryHandler *this)
{
  return MEMORY[0x270F18B28](this);
}

uint64_t cva::DictionaryHandler::item(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x270F18B30](this, a2);
}

uint64_t cva::DictionaryHandler::hasKey(cva::DictionaryHandler *this, const char *a2)
{
  return MEMORY[0x270F18B38](this, a2);
}

uint64_t E5RT::ProgramLibrary::GetFunctionMetadata()
{
  return MEMORY[0x270F279F0]();
}

uint64_t E5RT::TensorDataType::GetElementSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F279F8](this);
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F27A00](this);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return MEMORY[0x270F27A10](this);
}

uint64_t E5RT::TensorDescriptor::AllocateMemory()
{
  return MEMORY[0x270F27A18]();
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A20](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A28](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A30](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x270F27A38](this);
}

uint64_t E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x270F27A58](this);
}

uint64_t E5RT::OperandDescriptor::TryAsTensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x270F27A68](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x270F27A98](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x270F27AA0](this);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPort *this)
{
  return MEMORY[0x270F27AC0](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x270F98308]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x270F98C88](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x270F98DA0](this, a2, a3, a4);
}

{
  return MEMORY[0x270F98DB8](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x270F98DA8]();
}

{
  return MEMORY[0x270F98DB0]();
}

{
  return MEMORY[0x270F98DC0]();
}

{
  return MEMORY[0x270F98DC8]();
}

{
  return MEMORY[0x270F98DD8]();
}

{
  return MEMORY[0x270F98DE0]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x270F98DD0](this, a2, a3, a4);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

float __exp10f(float a1)
{
  MEMORY[0x270ED7DD0](a1);
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  MEMORY[0x270ED7E18]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __udivti3()
{
  return MEMORY[0x270ED7F10]();
}

uint64_t __umodti3()
{
  return MEMORY[0x270ED7F28]();
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x270ED8EF8](*(void *)&__clock_id);
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x270F27EC8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x270F27EE0]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x270F27F08]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x270F27F20]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x270F27F78]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x270F27F98]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x270F28008]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x270F28010]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x270F28030]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x270F28068]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x270F28070]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x270F28090]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x270F280A0]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x270F280A8]();
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

uint64_t geom_oriented_bounding_box_matrix_3f()
{
  return MEMORY[0x270F30380]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

float tanhf(float a1)
{
  MEMORY[0x270EDB828](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
}

vDSP_DFT_Setup vDSP_DFT_zop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x270EDE948](__Previous, __Length, *(void *)&__Direction);
}

void vDSP_biquad(const vDSP_biquad_SetupStruct *__Setup, float *__Delay, const float *__X, vDSP_Stride __IX, float *__Y, vDSP_Stride __IY, vDSP_Length __N)
{
}

vDSP_biquad_Setup vDSP_biquad_CreateSetup(const double *__Coefficients, vDSP_Length __M)
{
  return (vDSP_biquad_Setup)MEMORY[0x270EDE968](__Coefficients, __M);
}

void vDSP_biquad_DestroySetup(vDSP_biquad_Setup __setup)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
}

void vDSP_zvphas(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageAffineWarp_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_AffineTransform *transform, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDEEE8](src, dest, tempBuffer, transform, backColor, *(void *)&flags);
}

vImage_Error vImageAffineWarp_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_AffineTransform *transform, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDEEF8](src, dest, tempBuffer, transform, *(void *)&flags, backColor);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x270EDEF18](buf, height, width, *(void *)&pixelBits, *(void *)&flags);
}

vImage_Error vImageConvert_16UToF(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x270EDEF50](src, dest, *(void *)&flags, offset, scale);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x270EDEF70](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDEF88](src, destYp, destCbCr, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x270EDEFE0](matrix, pixelRange, outInfo, *(void *)&inARGBType, *(void *)&outYpCbCrType, *(void *)&flags);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDEFE8](converter, srcs, dests, tempBuffer, *(void *)&flags);
}

vImage_Error vImageConvert_FTo16U(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x270EDF010](src, dest, *(void *)&flags, offset, scale);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF020](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF038](blue, green, red, alpha, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF090](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0E8](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0F8](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x270EDF140](matrix, pixelRange, outInfo, *(void *)&inYpCbCrType, *(void *)&outARGBType, *(void *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x270EDF158](srcFormat, destFormat, backgroundColor, *(void *)&flags, error);
}

void vImageConverter_Release(vImageConverterRef converter)
{
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x270EDF1A0](src, dest, pixelSize, *(void *)&flags);
}

vImage_Error vImageDilate_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const unsigned __int8 *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x270EDF1C8](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF210](src, dest, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF218](src, dest, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF220](src, dest, *(void *)&flags);
}

vImage_Error vImageHorizontalReflect_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF228](src, dest, *(void *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888ToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[4], int32_t divisor, const int16_t pre_bias[4], int32_t post_bias, vImage_Flags flags)
{
  return MEMORY[0x270EDF240](src, dest, matrix, *(void *)&divisor, pre_bias, *(void *)&post_bias, *(void *)&flags);
}

vImage_Error vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8 scalar, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x270EDF250](scalar, src, dest, copyMask, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDF268](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A0](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_FFFF backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2B8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2D8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2E8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF300](src, dest, rotationConstant, *(void *)&flags, backColor);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF328](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF360](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF380](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF390](src, dest, tempBuffer, *(void *)&flags);
}