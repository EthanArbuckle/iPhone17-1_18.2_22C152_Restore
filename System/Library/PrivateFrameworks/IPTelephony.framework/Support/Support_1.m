uint64_t awd::metrics::ATM_CallAttemptEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t vars8;

  v5 = this;
  v6 = *(_DWORD *)(this + 264);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 264);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_59;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 72), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 73), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40000) == 0)
  {
LABEL_18:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x80000) == 0)
  {
LABEL_19:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x100000) == 0)
  {
LABEL_20:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x200000) == 0)
  {
LABEL_21:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x400000) == 0)
  {
LABEL_22:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 75), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x800000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_29;
    }
LABEL_84:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 156), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 264) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_85;
  }
LABEL_83:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 152), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 264);
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_84;
  }
LABEL_29:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_85:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 188), (uint64_t)a2, a4);
LABEL_30:
  v7 = *(_DWORD *)(v5 + 268);
  if ((v7 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 164), (uint64_t)a2, a4);
    v7 = *(_DWORD *)(v5 + 268);
    if ((v7 & 4) == 0)
    {
LABEL_32:
      if ((v7 & 8) == 0) {
        goto LABEL_33;
      }
      goto LABEL_88;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_32;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 184), (uint64_t)a2, a4);
  v7 = *(_DWORD *)(v5 + 268);
  if ((v7 & 8) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_88:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(void *)(v5 + 168), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 268) & 0x10) != 0) {
LABEL_34:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_35:
  if (*(int *)(v5 + 200) >= 1)
  {
    v8 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v8;
    }
    while (v8 < *(int *)(v5 + 200));
  }
  v9 = *(_DWORD *)(v5 + 264);
  if ((v9 & 0x10000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
    v9 = *(_DWORD *)(v5 + 264);
  }
  if ((v9 & 0x20000) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, *(unsigned __int8 *)(v5 + 74), (uint64_t)a2, a4);
  }
  if ((*(unsigned char *)(v5 + 268) & 0x40) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  if (*(unsigned char *)(v5 + 267)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
  }
  v10 = *(_DWORD *)(v5 + 268);
  if (v10)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 160), (uint64_t)a2, a4);
    v10 = *(_DWORD *)(v5 + 268);
    if ((v10 & 0x80) == 0)
    {
LABEL_48:
      if ((v10 & 0x100) == 0) {
        goto LABEL_49;
      }
      goto LABEL_92;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_48;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 224), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x100) == 0)
  {
LABEL_49:
    if ((v10 & 0x200) == 0) {
      goto LABEL_50;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, *(unsigned int *)(v5 + 228), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x200) == 0)
  {
LABEL_50:
    if ((v10 & 0x400) == 0) {
      goto LABEL_51;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, *(unsigned int *)(v5 + 232), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x400) == 0)
  {
LABEL_51:
    if ((v10 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 236), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x800) == 0)
  {
LABEL_52:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, *(unsigned int *)(v5 + 240), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x1000) == 0)
  {
LABEL_53:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned int *)(v5 + 244), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x2000) == 0)
  {
LABEL_54:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_98:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 256), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 268) & 0x8000) == 0) {
      return this;
    }
    goto LABEL_99;
  }
LABEL_97:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E, *(unsigned __int8 *)(v5 + 189), (uint64_t)a2, a4);
  v10 = *(_DWORD *)(v5 + 268);
  if ((v10 & 0x4000) != 0) {
    goto LABEL_98;
  }
LABEL_55:
  if ((v10 & 0x8000) == 0) {
    return this;
  }
LABEL_99:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::ATM_CallAttemptEvent::ByteSize(awd::metrics::ATM_CallAttemptEvent *this)
{
  int v2 = *((_DWORD *)this + 66);
  if (!(_BYTE)v2)
  {
    int v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v5 = *((void *)this + 2);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      int v2 = *((_DWORD *)this + 66);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  int v2 = *((_DWORD *)this + 66);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_16:
  if ((v2 & 4) != 0) {
    v3 += 2;
  }
  if ((v2 & 8) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      int v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v12 = 1;
    }
    v3 += v12 + 1;
  }
  int v13 = v3 + 2;
  if ((v2 & 0x10) == 0) {
    int v13 = v3;
  }
  if ((v2 & 0x20) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x40) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x80) != 0) {
    int v4 = v13 + 2;
  }
  else {
    int v4 = v13;
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_96;
  }
  if ((v2 & 0x100) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v15 = 1;
    }
    v4 += v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0) {
        goto LABEL_38;
      }
LABEL_55:
      v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        int v2 = *((_DWORD *)this + 66);
      }
      else
      {
        int v23 = 1;
      }
      v4 += v23 + 1;
      if ((v2 & 0x800) == 0) {
        goto LABEL_68;
      }
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  uint64_t v16 = *((void *)this + 5);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  v4 += v21 + v17 + 1;
  if ((v2 & 0x400) != 0) {
    goto LABEL_55;
  }
LABEL_38:
  if ((v2 & 0x800) == 0) {
    goto LABEL_68;
  }
LABEL_59:
  uint64_t v24 = *((void *)this + 6);
  int v25 = *(unsigned __int8 *)(v24 + 23);
  char v26 = v25;
  uint64_t v27 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v27 = *(void *)(v24 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v26 = *(unsigned char *)(v24 + 23);
  }
  else
  {
    int v29 = 1;
  }
  if (v26 < 0) {
    int v25 = v27;
  }
  v4 += v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0) {
    v4 += 2;
  }
  if ((v2 & 0x2000) != 0)
  {
    uint64_t v30 = *((void *)this + 7);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    char v32 = v31;
    uint64_t v33 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >= 0x80)
    {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      uint64_t v33 = *(void *)(v30 + 8);
      int v2 = *((_DWORD *)this + 66);
      char v32 = *(unsigned char *)(v30 + 23);
    }
    else
    {
      int v35 = 1;
    }
    if (v32 < 0) {
      int v31 = v33;
    }
    v4 += v35 + v31 + 1;
    if ((v2 & 0x4000) == 0)
    {
LABEL_72:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_92;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_72;
  }
  uint64_t v36 = *((void *)this + 8);
  int v37 = *(unsigned __int8 *)(v36 + 23);
  char v38 = v37;
  uint64_t v39 = *(void *)(v36 + 8);
  if ((v37 & 0x80u) == 0) {
    unint64_t v40 = *(unsigned __int8 *)(v36 + 23);
  }
  else {
    unint64_t v40 = v39;
  }
  if (v40 >= 0x80)
  {
    int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    int v37 = *(unsigned __int8 *)(v36 + 23);
    uint64_t v39 = *(void *)(v36 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v38 = *(unsigned char *)(v36 + 23);
  }
  else
  {
    int v41 = 1;
  }
  if (v38 < 0) {
    int v37 = v39;
  }
  v4 += v41 + v37 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_92:
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if (v42 >= 0x80)
    {
      int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v43 = 1;
    }
    v4 += v43 + 2;
  }
LABEL_96:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_152;
  }
  if ((v2 & 0x10000) != 0)
  {
    v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if (v44 >= 0x80)
    {
      int v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v45 = 1;
    }
    v4 += v45 + 2;
  }
  if ((v2 & 0x20000) != 0) {
    v4 += 3;
  }
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v46 = *((void *)this + 10);
    int v47 = *(unsigned __int8 *)(v46 + 23);
    char v48 = v47;
    uint64_t v49 = *(void *)(v46 + 8);
    if ((v47 & 0x80u) == 0) {
      unint64_t v50 = *(unsigned __int8 *)(v46 + 23);
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50 >= 0x80)
    {
      int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
      int v47 = *(unsigned __int8 *)(v46 + 23);
      uint64_t v49 = *(void *)(v46 + 8);
      int v2 = *((_DWORD *)this + 66);
      char v48 = *(unsigned char *)(v46 + 23);
    }
    else
    {
      int v51 = 1;
    }
    if (v48 < 0) {
      int v47 = v49;
    }
    v4 += v51 + v47 + 2;
    if ((v2 & 0x80000) == 0)
    {
LABEL_106:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_107;
      }
LABEL_127:
      uint64_t v58 = *((void *)this + 13);
      int v59 = *(unsigned __int8 *)(v58 + 23);
      char v60 = v59;
      uint64_t v61 = *(void *)(v58 + 8);
      if ((v59 & 0x80u) == 0) {
        unint64_t v62 = *(unsigned __int8 *)(v58 + 23);
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62 >= 0x80)
      {
        int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v62);
        int v59 = *(unsigned __int8 *)(v58 + 23);
        uint64_t v61 = *(void *)(v58 + 8);
        int v2 = *((_DWORD *)this + 66);
        char v60 = *(unsigned char *)(v58 + 23);
      }
      else
      {
        int v63 = 1;
      }
      if (v60 < 0) {
        int v59 = v61;
      }
      v4 += v63 + v59 + 2;
      if ((v2 & 0x200000) == 0) {
        goto LABEL_145;
      }
      goto LABEL_136;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_106;
  }
  uint64_t v52 = *((void *)this + 11);
  int v53 = *(unsigned __int8 *)(v52 + 23);
  char v54 = v53;
  uint64_t v55 = *(void *)(v52 + 8);
  if ((v53 & 0x80u) == 0) {
    unint64_t v56 = *(unsigned __int8 *)(v52 + 23);
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56 >= 0x80)
  {
    int v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    int v53 = *(unsigned __int8 *)(v52 + 23);
    uint64_t v55 = *(void *)(v52 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v54 = *(unsigned char *)(v52 + 23);
  }
  else
  {
    int v57 = 1;
  }
  if (v54 < 0) {
    int v53 = v55;
  }
  v4 += v57 + v53 + 2;
  if ((v2 & 0x100000) != 0) {
    goto LABEL_127;
  }
LABEL_107:
  if ((v2 & 0x200000) != 0)
  {
LABEL_136:
    uint64_t v64 = *((void *)this + 14);
    int v65 = *(unsigned __int8 *)(v64 + 23);
    char v66 = v65;
    uint64_t v67 = *(void *)(v64 + 8);
    if ((v65 & 0x80u) == 0) {
      unint64_t v68 = *(unsigned __int8 *)(v64 + 23);
    }
    else {
      unint64_t v68 = v67;
    }
    if (v68 >= 0x80)
    {
      int v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v68);
      int v65 = *(unsigned __int8 *)(v64 + 23);
      uint64_t v67 = *(void *)(v64 + 8);
      int v2 = *((_DWORD *)this + 66);
      char v66 = *(unsigned char *)(v64 + 23);
    }
    else
    {
      int v69 = 1;
    }
    if (v66 < 0) {
      int v65 = v67;
    }
    v4 += v69 + v65 + 2;
  }
LABEL_145:
  if ((v2 & 0x400000) != 0) {
    v4 += 3;
  }
  if ((v2 & 0x800000) != 0)
  {
    v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v70 >= 0x80)
    {
      int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v71 = 1;
    }
    v4 += v71 + 2;
  }
LABEL_152:
  if (!HIBYTE(v2)) {
    goto LABEL_208;
  }
  if ((v2 & 0x1000000) != 0)
  {
    v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
    if ((v72 & 0x80000000) != 0)
    {
      int v73 = 10;
    }
    else if (v72 >= 0x80)
    {
      int v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v73 = 1;
    }
    v4 += v73 + 2;
    if ((v2 & 0x2000000) == 0)
    {
LABEL_155:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_156;
      }
      goto LABEL_171;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_155;
  }
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v74 >= 0x80)
  {
    int v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74);
    int v2 = *((_DWORD *)this + 66);
  }
  else
  {
    int v75 = 1;
  }
  v4 += v75 + 2;
  if ((v2 & 0x4000000) == 0)
  {
LABEL_156:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_157;
    }
    goto LABEL_180;
  }
LABEL_171:
  uint64_t v76 = *((void *)this + 16);
  int v77 = *(unsigned __int8 *)(v76 + 23);
  char v78 = v77;
  uint64_t v79 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    unint64_t v80 = *(unsigned __int8 *)(v76 + 23);
  }
  else {
    unint64_t v80 = v79;
  }
  if (v80 >= 0x80)
  {
    int v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v80);
    int v77 = *(unsigned __int8 *)(v76 + 23);
    uint64_t v79 = *(void *)(v76 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v78 = *(unsigned char *)(v76 + 23);
  }
  else
  {
    int v81 = 1;
  }
  if (v78 < 0) {
    int v77 = v79;
  }
  v4 += v81 + v77 + 2;
  if ((v2 & 0x8000000) == 0)
  {
LABEL_157:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_189;
  }
LABEL_180:
  uint64_t v82 = *((void *)this + 17);
  int v83 = *(unsigned __int8 *)(v82 + 23);
  char v84 = v83;
  uint64_t v85 = *(void *)(v82 + 8);
  if ((v83 & 0x80u) == 0) {
    unint64_t v86 = *(unsigned __int8 *)(v82 + 23);
  }
  else {
    unint64_t v86 = v85;
  }
  if (v86 >= 0x80)
  {
    int v87 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v86);
    int v83 = *(unsigned __int8 *)(v82 + 23);
    uint64_t v85 = *(void *)(v82 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v84 = *(unsigned char *)(v82 + 23);
  }
  else
  {
    int v87 = 1;
  }
  if (v84 < 0) {
    int v83 = v85;
  }
  v4 += v87 + v83 + 2;
  if ((v2 & 0x10000000) == 0)
  {
LABEL_158:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_198;
  }
LABEL_189:
  uint64_t v88 = *((void *)this + 18);
  int v89 = *(unsigned __int8 *)(v88 + 23);
  char v90 = v89;
  uint64_t v91 = *(void *)(v88 + 8);
  if ((v89 & 0x80u) == 0) {
    unint64_t v92 = *(unsigned __int8 *)(v88 + 23);
  }
  else {
    unint64_t v92 = v91;
  }
  if (v92 >= 0x80)
  {
    int v93 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v92);
    int v89 = *(unsigned __int8 *)(v88 + 23);
    uint64_t v91 = *(void *)(v88 + 8);
    int v2 = *((_DWORD *)this + 66);
    char v90 = *(unsigned char *)(v88 + 23);
  }
  else
  {
    int v93 = 1;
  }
  if (v90 < 0) {
    int v89 = v91;
  }
  v4 += v93 + v89 + 2;
  if ((v2 & 0x20000000) == 0)
  {
LABEL_159:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_206;
    }
    goto LABEL_202;
  }
LABEL_198:
  v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 38);
  if (v94 >= 0x80)
  {
    int v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
    int v2 = *((_DWORD *)this + 66);
  }
  else
  {
    int v95 = 1;
  }
  v4 += v95 + 2;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_202:
    v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 39);
    if (v96 >= 0x80)
    {
      int v97 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v96);
      int v2 = *((_DWORD *)this + 66);
    }
    else
    {
      int v97 = 1;
    }
    v4 += v97 + 2;
  }
LABEL_206:
  if (v2 < 0) {
    v4 += 3;
  }
LABEL_208:
  int v98 = *((_DWORD *)this + 67);
  if (!(_BYTE)v98) {
    goto LABEL_254;
  }
  if (v98)
  {
    v99 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
    if ((v99 & 0x80000000) != 0)
    {
      int v100 = 10;
    }
    else if (v99 >= 0x80)
    {
      int v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v99);
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v100 = 1;
    }
    v4 += v100 + 2;
    if ((v98 & 2) == 0)
    {
LABEL_211:
      if ((v98 & 4) == 0) {
        goto LABEL_212;
      }
      goto LABEL_227;
    }
  }
  else if ((v98 & 2) == 0)
  {
    goto LABEL_211;
  }
  v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 41);
  if (v101 >= 0x80)
  {
    int v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
    int v98 = *((_DWORD *)this + 67);
  }
  else
  {
    int v102 = 1;
  }
  v4 += v102 + 2;
  if ((v98 & 4) == 0)
  {
LABEL_212:
    if ((v98 & 8) == 0) {
      goto LABEL_213;
    }
    goto LABEL_231;
  }
LABEL_227:
  v103 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 46);
  if (v103 >= 0x80)
  {
    int v104 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v103);
    int v98 = *((_DWORD *)this + 67);
  }
  else
  {
    int v104 = 1;
  }
  v4 += v104 + 2;
  if ((v98 & 8) == 0)
  {
LABEL_213:
    if ((v98 & 0x10) == 0) {
      goto LABEL_214;
    }
    goto LABEL_232;
  }
LABEL_231:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 21))
      + 2;
  int v98 = *((_DWORD *)this + 67);
  if ((v98 & 0x10) == 0)
  {
LABEL_214:
    if ((v98 & 0x40) == 0) {
      goto LABEL_215;
    }
    goto LABEL_241;
  }
LABEL_232:
  uint64_t v105 = *((void *)this + 22);
  int v106 = *(unsigned __int8 *)(v105 + 23);
  char v107 = v106;
  uint64_t v108 = *(void *)(v105 + 8);
  if ((v106 & 0x80u) == 0) {
    unint64_t v109 = *(unsigned __int8 *)(v105 + 23);
  }
  else {
    unint64_t v109 = v108;
  }
  if (v109 >= 0x80)
  {
    int v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v109);
    int v106 = *(unsigned __int8 *)(v105 + 23);
    uint64_t v108 = *(void *)(v105 + 8);
    int v98 = *((_DWORD *)this + 67);
    char v107 = *(unsigned char *)(v105 + 23);
  }
  else
  {
    int v110 = 1;
  }
  if (v107 < 0) {
    int v106 = v108;
  }
  v4 += v110 + v106 + 2;
  if ((v98 & 0x40) == 0)
  {
LABEL_215:
    if ((v98 & 0x80) == 0) {
      goto LABEL_254;
    }
    goto LABEL_250;
  }
LABEL_241:
  uint64_t v111 = *((void *)this + 27);
  int v112 = *(unsigned __int8 *)(v111 + 23);
  char v113 = v112;
  uint64_t v114 = *(void *)(v111 + 8);
  if ((v112 & 0x80u) == 0) {
    unint64_t v115 = *(unsigned __int8 *)(v111 + 23);
  }
  else {
    unint64_t v115 = v114;
  }
  if (v115 >= 0x80)
  {
    int v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v115);
    int v112 = *(unsigned __int8 *)(v111 + 23);
    uint64_t v114 = *(void *)(v111 + 8);
    int v98 = *((_DWORD *)this + 67);
    char v113 = *(unsigned char *)(v111 + 23);
  }
  else
  {
    int v116 = 1;
  }
  if (v113 < 0) {
    int v112 = v114;
  }
  v4 += v116 + v112 + 2;
  if ((v98 & 0x80) != 0)
  {
LABEL_250:
    v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 56);
    if (v117 >= 0x80)
    {
      int v118 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117);
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v118 = 1;
    }
    v4 += v118 + 2;
  }
LABEL_254:
  if ((v98 & 0xFF00) == 0) {
    goto LABEL_298;
  }
  if ((v98 & 0x100) != 0)
  {
    v119 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 57);
    if (v119 >= 0x80)
    {
      int v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v119) + 2;
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v120 = 3;
    }
    v4 += v120;
    if ((v98 & 0x200) == 0)
    {
LABEL_257:
      if ((v98 & 0x400) == 0) {
        goto LABEL_258;
      }
      goto LABEL_269;
    }
  }
  else if ((v98 & 0x200) == 0)
  {
    goto LABEL_257;
  }
  v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 58);
  if (v121 >= 0x80)
  {
    int v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121) + 2;
    int v98 = *((_DWORD *)this + 67);
  }
  else
  {
    int v122 = 3;
  }
  v4 += v122;
  if ((v98 & 0x400) == 0)
  {
LABEL_258:
    if ((v98 & 0x800) == 0) {
      goto LABEL_259;
    }
LABEL_273:
    v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 60);
    if (v125 >= 0x80)
    {
      int v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125) + 2;
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v126 = 3;
    }
    v4 += v126;
    if ((v98 & 0x1000) == 0) {
      goto LABEL_281;
    }
    goto LABEL_277;
  }
LABEL_269:
  v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 59);
  if (v123 >= 0x80)
  {
    int v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123) + 2;
    int v98 = *((_DWORD *)this + 67);
  }
  else
  {
    int v124 = 3;
  }
  v4 += v124;
  if ((v98 & 0x800) != 0) {
    goto LABEL_273;
  }
LABEL_259:
  if ((v98 & 0x1000) != 0)
  {
LABEL_277:
    v127 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 61);
    if (v127 >= 0x80)
    {
      int v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v127) + 2;
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v128 = 3;
    }
    v4 += v128;
  }
LABEL_281:
  if ((v98 & 0x2000) != 0) {
    v4 += 3;
  }
  if ((v98 & 0x4000) != 0)
  {
    v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 64);
    if (v129 >= 0x80)
    {
      int v130 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129) + 2;
      int v98 = *((_DWORD *)this + 67);
    }
    else
    {
      int v130 = 3;
    }
    v4 += v130;
  }
  if ((v98 & 0x8000) != 0)
  {
    uint64_t v131 = *((void *)this + 31);
    int v132 = *(unsigned __int8 *)(v131 + 23);
    char v133 = v132;
    uint64_t v134 = *(void *)(v131 + 8);
    if ((v132 & 0x80u) == 0) {
      unint64_t v135 = *(unsigned __int8 *)(v131 + 23);
    }
    else {
      unint64_t v135 = v134;
    }
    if (v135 >= 0x80)
    {
      int v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v135);
      int v132 = *(unsigned __int8 *)(v131 + 23);
      uint64_t v134 = *(void *)(v131 + 8);
      char v133 = *(unsigned char *)(v131 + 23);
    }
    else
    {
      int v136 = 1;
    }
    if (v133 < 0) {
      int v132 = v134;
    }
    v4 += v136 + v132 + 2;
  }
LABEL_298:
  int v137 = *((_DWORD *)this + 50);
  uint64_t v138 = (v4 + 2 * v137);
  if (v137 >= 1)
  {
    for (uint64_t i = 0; i < v137; ++i)
    {
      uint64_t v140 = *(void *)(*((void *)this + 24) + 8 * i);
      int v141 = *(unsigned __int8 *)(v140 + 23);
      char v142 = v141;
      uint64_t v143 = *(void *)(v140 + 8);
      if ((v141 & 0x80u) == 0) {
        unint64_t v144 = *(unsigned __int8 *)(v140 + 23);
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144 >= 0x80)
      {
        int v145 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v144);
        int v141 = *(unsigned __int8 *)(v140 + 23);
        uint64_t v143 = *(void *)(v140 + 8);
        int v137 = *((_DWORD *)this + 50);
        char v142 = *(unsigned char *)(v140 + 23);
      }
      else
      {
        int v145 = 1;
      }
      if (v142 < 0) {
        int v141 = v143;
      }
      uint64_t v138 = (v145 + v138 + v141);
    }
  }
  *((_DWORD *)this + 65) = v138;
  return v138;
}

std::string *awd::metrics::ATM_CallAttemptEvent::CheckTypeAndMergeFrom(awd::metrics::ATM_CallAttemptEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v77);
  }
  result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::ATM_CallAttemptEvent *)((char *)this + 192));
  if (*((int *)lpsrc + 50) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = *(const std::string **)(*((void *)lpsrc + 24) + 8 * v5);
      int v7 = *((_DWORD *)this + 51);
      uint64_t v8 = *((int *)this + 50);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 52))
        {
          result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::ATM_CallAttemptEvent *)((char *)this + 192));
          int v7 = *((_DWORD *)this + 51);
        }
        *((_DWORD *)this + 51) = v7 + 1;
        int v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        uint64_t v11 = *((void *)this + 24);
        uint64_t v12 = *((int *)this + 50);
        *((_DWORD *)this + 50) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }
      else
      {
        uint64_t v9 = *((void *)this + 24);
        *((_DWORD *)this + 50) = v8 + 1;
        int v10 = *(std::string **)(v9 + 8 * v8);
      }
      result = std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 50));
  }
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if (!(_BYTE)v13) {
    goto LABEL_22;
  }
  if (v13)
  {
    uint64_t v22 = *((void *)lpsrc + 1);
    *((_DWORD *)this + 66) |= 1u;
    *((void *)this + 1) = v22;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 2) == 0)
    {
LABEL_15:
      if ((v13 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_80;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_15;
  }
  int v23 = (const std::string *)*((void *)lpsrc + 2);
  *((_DWORD *)this + 66) |= 2u;
  uint64_t v24 = (std::string *)*((void *)this + 2);
  if (v24 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v24, v23);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 4) == 0)
  {
LABEL_16:
    if ((v13 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_81;
  }
LABEL_80:
  char v25 = *((unsigned char *)lpsrc + 28);
  *((_DWORD *)this + 66) |= 4u;
  *((unsigned char *)this + 28) = v25;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 8) == 0)
  {
LABEL_17:
    if ((v13 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_83;
  }
LABEL_81:
  int v26 = *((_DWORD *)lpsrc + 6);
  if ((v26 + 1) >= 8) {
    __assert_rtn("set_type", "CATM.pb.h", 8940, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  }
  *((_DWORD *)this + 66) |= 8u;
  *((_DWORD *)this + 6) = v26;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x10) == 0)
  {
LABEL_18:
    if ((v13 & 0x20) == 0) {
      goto LABEL_19;
    }
LABEL_84:
    char v28 = *((unsigned char *)lpsrc + 30);
    *((_DWORD *)this + 66) |= 0x20u;
    *((unsigned char *)this + 30) = v28;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x40) == 0)
    {
LABEL_20:
      if ((v13 & 0x80) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    goto LABEL_85;
  }
LABEL_83:
  char v27 = *((unsigned char *)lpsrc + 29);
  *((_DWORD *)this + 66) |= 0x10u;
  *((unsigned char *)this + 29) = v27;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x20) != 0) {
    goto LABEL_84;
  }
LABEL_19:
  if ((v13 & 0x40) == 0) {
    goto LABEL_20;
  }
LABEL_85:
  char v29 = *((unsigned char *)lpsrc + 31);
  *((_DWORD *)this + 66) |= 0x40u;
  *((unsigned char *)this + 31) = v29;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x80) != 0)
  {
LABEL_21:
    char v14 = *((unsigned char *)lpsrc + 72);
    *((_DWORD *)this + 66) |= 0x80u;
    *((unsigned char *)this + 72) = v14;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_22:
  if ((v13 & 0xFF00) == 0) {
    goto LABEL_34;
  }
  if ((v13 & 0x100) != 0)
  {
    int v15 = *((_DWORD *)lpsrc + 8);
    if ((v15 - 1) >= 6 && v15 != -1) {
      __assert_rtn("set_invite_type", "CATM.pb.h", 9051, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    }
    *((_DWORD *)this + 66) |= 0x100u;
    *((_DWORD *)this + 8) = v15;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
  }
  if ((v13 & 0x200) != 0)
  {
    int v41 = (const std::string *)*((void *)lpsrc + 5);
    *((_DWORD *)this + 66) |= 0x200u;
    v42 = (std::string *)*((void *)this + 5);
    if (v42 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    result = std::string::operator=(v42, v41);
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x400) == 0)
    {
LABEL_28:
      if ((v13 & 0x800) == 0) {
        goto LABEL_29;
      }
      goto LABEL_107;
    }
  }
  else if ((v13 & 0x400) == 0)
  {
    goto LABEL_28;
  }
  int v43 = *((_DWORD *)lpsrc + 9);
  *((_DWORD *)this + 66) |= 0x400u;
  *((_DWORD *)this + 9) = v43;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x800) == 0)
  {
LABEL_29:
    if ((v13 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_110;
  }
LABEL_107:
  v44 = (const std::string *)*((void *)lpsrc + 6);
  *((_DWORD *)this + 66) |= 0x800u;
  int v45 = (std::string *)*((void *)this + 6);
  if (v45 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v45, v44);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x1000) == 0)
  {
LABEL_30:
    if ((v13 & 0x2000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_111;
  }
LABEL_110:
  char v46 = *((unsigned char *)lpsrc + 73);
  *((_DWORD *)this + 66) |= 0x1000u;
  *((unsigned char *)this + 73) = v46;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x2000) == 0)
  {
LABEL_31:
    if ((v13 & 0x4000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_114;
  }
LABEL_111:
  int v47 = (const std::string *)*((void *)lpsrc + 7);
  *((_DWORD *)this + 66) |= 0x2000u;
  char v48 = (std::string *)*((void *)this + 7);
  if (v48 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v48, v47);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x4000) == 0)
  {
LABEL_32:
    if ((v13 & 0x8000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_114:
  uint64_t v49 = (const std::string *)*((void *)lpsrc + 8);
  *((_DWORD *)this + 66) |= 0x4000u;
  unint64_t v50 = (std::string *)*((void *)this + 8);
  if (v50 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v50, v49);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x8000) != 0)
  {
LABEL_33:
    int v16 = *((_DWORD *)lpsrc + 19);
    *((_DWORD *)this + 66) |= 0x8000u;
    *((_DWORD *)this + 19) = v16;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_34:
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_44;
  }
  if ((v13 & 0x10000) != 0)
  {
    int v30 = *((_DWORD *)lpsrc + 24);
    *((_DWORD *)this + 66) |= 0x10000u;
    *((_DWORD *)this + 24) = v30;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x20000) == 0)
    {
LABEL_37:
      if ((v13 & 0x40000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_89;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_37;
  }
  char v31 = *((unsigned char *)lpsrc + 74);
  *((_DWORD *)this + 66) |= 0x20000u;
  *((unsigned char *)this + 74) = v31;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x40000) == 0)
  {
LABEL_38:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
LABEL_89:
  char v32 = (const std::string *)*((void *)lpsrc + 10);
  *((_DWORD *)this + 66) |= 0x40000u;
  uint64_t v33 = (std::string *)*((void *)this + 10);
  if (v33 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v33, v32);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x80000) == 0)
  {
LABEL_39:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_95;
  }
LABEL_92:
  unint64_t v34 = (const std::string *)*((void *)lpsrc + 11);
  *((_DWORD *)this + 66) |= 0x80000u;
  int v35 = (std::string *)*((void *)this + 11);
  if (v35 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v35, v34);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x100000) == 0)
  {
LABEL_40:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_98;
  }
LABEL_95:
  uint64_t v36 = (const std::string *)*((void *)lpsrc + 13);
  *((_DWORD *)this + 66) |= 0x100000u;
  int v37 = (std::string *)*((void *)this + 13);
  if (v37 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v37, v36);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x200000) == 0)
  {
LABEL_41:
    if ((v13 & 0x400000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_101;
  }
LABEL_98:
  char v38 = (const std::string *)*((void *)lpsrc + 14);
  *((_DWORD *)this + 66) |= 0x200000u;
  uint64_t v39 = (std::string *)*((void *)this + 14);
  if (v39 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v39, v38);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x400000) == 0)
  {
LABEL_42:
    if ((v13 & 0x800000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_101:
  char v40 = *((unsigned char *)lpsrc + 75);
  *((_DWORD *)this + 66) |= 0x400000u;
  *((unsigned char *)this + 75) = v40;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x800000) != 0)
  {
LABEL_43:
    int v17 = *((_DWORD *)lpsrc + 25);
    *((_DWORD *)this + 66) |= 0x800000u;
    *((_DWORD *)this + 25) = v17;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
  }
LABEL_44:
  if (!HIBYTE(v13)) {
    goto LABEL_55;
  }
  if ((v13 & 0x1000000) != 0)
  {
    unsigned int v18 = *((_DWORD *)lpsrc + 30);
    if (v18 >= 6) {
      __assert_rtn("set_codec", "CATM.pb.h", 9788, "::awd::metrics::enum_codec_type_IsValid(value)");
    }
    *((_DWORD *)this + 66) |= 0x1000000u;
    *((_DWORD *)this + 30) = v18;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
  }
  if ((v13 & 0x2000000) != 0)
  {
    int v67 = *((_DWORD *)lpsrc + 31);
    *((_DWORD *)this + 66) |= 0x2000000u;
    *((_DWORD *)this + 31) = v67;
    unsigned int v13 = *((_DWORD *)lpsrc + 66);
    if ((v13 & 0x4000000) == 0)
    {
LABEL_50:
      if ((v13 & 0x8000000) == 0) {
        goto LABEL_51;
      }
      goto LABEL_143;
    }
  }
  else if ((v13 & 0x4000000) == 0)
  {
    goto LABEL_50;
  }
  unint64_t v68 = (const std::string *)*((void *)lpsrc + 16);
  *((_DWORD *)this + 66) |= 0x4000000u;
  int v69 = (std::string *)*((void *)this + 16);
  if (v69 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v69, v68);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_51:
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_146;
  }
LABEL_143:
  v70 = (const std::string *)*((void *)lpsrc + 17);
  *((_DWORD *)this + 66) |= 0x8000000u;
  int v71 = (std::string *)*((void *)this + 17);
  if (v71 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v71, v70);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_52:
    if ((v13 & 0x20000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_149;
  }
LABEL_146:
  v72 = (const std::string *)*((void *)lpsrc + 18);
  *((_DWORD *)this + 66) |= 0x10000000u;
  int v73 = (std::string *)*((void *)this + 18);
  if (v73 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v73, v72);
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_53:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_54;
    }
LABEL_150:
    int v75 = *((_DWORD *)lpsrc + 39);
    *((_DWORD *)this + 66) |= 0x40000000u;
    *((_DWORD *)this + 39) = v75;
    if ((*((_DWORD *)lpsrc + 66) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_151;
  }
LABEL_149:
  int v74 = *((_DWORD *)lpsrc + 38);
  *((_DWORD *)this + 66) |= 0x20000000u;
  *((_DWORD *)this + 38) = v74;
  unsigned int v13 = *((_DWORD *)lpsrc + 66);
  if ((v13 & 0x40000000) != 0) {
    goto LABEL_150;
  }
LABEL_54:
  if ((v13 & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_151:
  char v76 = *((unsigned char *)lpsrc + 188);
  *((_DWORD *)this + 66) |= 0x80000000;
  *((unsigned char *)this + 188) = v76;
LABEL_55:
  int v19 = *((_DWORD *)lpsrc + 67);
  if (!(_BYTE)v19) {
    goto LABEL_66;
  }
  if (v19)
  {
    unsigned int v20 = *((_DWORD *)lpsrc + 40);
    if (v20 >= 3) {
      __assert_rtn("set_amr_format", "CATM.pb.h", 10109, "::awd::metrics::enum_codec_format_IsValid(value)");
    }
    *((_DWORD *)this + 67) |= 1u;
    *((_DWORD *)this + 40) = v20;
    int v19 = *((_DWORD *)lpsrc + 67);
  }
  if ((v19 & 2) != 0)
  {
    int v60 = *((_DWORD *)lpsrc + 41);
    *((_DWORD *)this + 67) |= 2u;
    *((_DWORD *)this + 41) = v60;
    int v19 = *((_DWORD *)lpsrc + 67);
    if ((v19 & 4) == 0)
    {
LABEL_61:
      if ((v19 & 8) == 0) {
        goto LABEL_62;
      }
      goto LABEL_131;
    }
  }
  else if ((v19 & 4) == 0)
  {
    goto LABEL_61;
  }
  int v61 = *((_DWORD *)lpsrc + 46);
  *((_DWORD *)this + 67) |= 4u;
  *((_DWORD *)this + 46) = v61;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 8) == 0)
  {
LABEL_62:
    if ((v19 & 0x10) == 0) {
      goto LABEL_63;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v62 = *((void *)lpsrc + 21);
  *((_DWORD *)this + 67) |= 8u;
  *((void *)this + 21) = v62;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x10) == 0)
  {
LABEL_63:
    if ((v19 & 0x40) == 0) {
      goto LABEL_64;
    }
    goto LABEL_135;
  }
LABEL_132:
  int v63 = (const std::string *)*((void *)lpsrc + 22);
  *((_DWORD *)this + 67) |= 0x10u;
  uint64_t v64 = (std::string *)*((void *)this + 22);
  if (v64 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v64, v63);
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x40) == 0)
  {
LABEL_64:
    if ((v19 & 0x80) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
LABEL_135:
  int v65 = (const std::string *)*((void *)lpsrc + 27);
  *((_DWORD *)this + 67) |= 0x40u;
  char v66 = (std::string *)*((void *)this + 27);
  if (v66 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  result = std::string::operator=(v66, v65);
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x80) != 0)
  {
LABEL_65:
    int v21 = *((_DWORD *)lpsrc + 56);
    *((_DWORD *)this + 67) |= 0x80u;
    *((_DWORD *)this + 56) = v21;
    int v19 = *((_DWORD *)lpsrc + 67);
  }
LABEL_66:
  if ((v19 & 0xFF00) == 0) {
    return result;
  }
  if ((v19 & 0x100) != 0)
  {
    int v51 = *((_DWORD *)lpsrc + 57);
    *((_DWORD *)this + 67) |= 0x100u;
    *((_DWORD *)this + 57) = v51;
    int v19 = *((_DWORD *)lpsrc + 67);
    if ((v19 & 0x200) == 0)
    {
LABEL_69:
      if ((v19 & 0x400) == 0) {
        goto LABEL_70;
      }
      goto LABEL_120;
    }
  }
  else if ((v19 & 0x200) == 0)
  {
    goto LABEL_69;
  }
  int v52 = *((_DWORD *)lpsrc + 58);
  *((_DWORD *)this + 67) |= 0x200u;
  *((_DWORD *)this + 58) = v52;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x400) == 0)
  {
LABEL_70:
    if ((v19 & 0x800) == 0) {
      goto LABEL_71;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v53 = *((_DWORD *)lpsrc + 59);
  *((_DWORD *)this + 67) |= 0x400u;
  *((_DWORD *)this + 59) = v53;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x800) == 0)
  {
LABEL_71:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_122;
  }
LABEL_121:
  int v54 = *((_DWORD *)lpsrc + 60);
  *((_DWORD *)this + 67) |= 0x800u;
  *((_DWORD *)this + 60) = v54;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x1000) == 0)
  {
LABEL_72:
    if ((v19 & 0x2000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_123;
  }
LABEL_122:
  int v55 = *((_DWORD *)lpsrc + 61);
  *((_DWORD *)this + 67) |= 0x1000u;
  *((_DWORD *)this + 61) = v55;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x2000) == 0)
  {
LABEL_73:
    if ((v19 & 0x4000) == 0) {
      goto LABEL_74;
    }
LABEL_124:
    int v57 = *((_DWORD *)lpsrc + 64);
    *((_DWORD *)this + 67) |= 0x4000u;
    *((_DWORD *)this + 64) = v57;
    if ((*((_DWORD *)lpsrc + 67) & 0x8000) == 0) {
      return result;
    }
    goto LABEL_125;
  }
LABEL_123:
  char v56 = *((unsigned char *)lpsrc + 189);
  *((_DWORD *)this + 67) |= 0x2000u;
  *((unsigned char *)this + 189) = v56;
  int v19 = *((_DWORD *)lpsrc + 67);
  if ((v19 & 0x4000) != 0) {
    goto LABEL_124;
  }
LABEL_74:
  if ((v19 & 0x8000) == 0) {
    return result;
  }
LABEL_125:
  uint64_t v58 = (const std::string *)*((void *)lpsrc + 31);
  *((_DWORD *)this + 67) |= 0x8000u;
  int v59 = (std::string *)*((void *)this + 31);
  if (v59 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  return std::string::operator=(v59, v58);
}

void sub_1C526B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallAttemptEvent::IsInitialized(awd::metrics::ATM_CallAttemptEvent *this)
{
  return 1;
}

void *awd::metrics::ATM_CallAttemptEvent::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallAttemptEvent");
}

double awd::metrics::ATM_CallConnectEvent::SharedCtor(awd::metrics::ATM_CallConnectEvent *this)
{
  *((_DWORD *)this + 58) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v1;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *((void *)this + 5) = v1;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = v1;
  *((void *)this + 8) = v1;
  double result = 0.0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v1;
  *((void *)this + 11) = v1;
  *((void *)this + 13) = v1;
  *((void *)this + 14) = v1;
  *((void *)this + 15) = v1;
  *((void *)this + 16) = v1;
  *((void *)this + 17) = 0;
  *((void *)this + 12) = 0;
  *((_WORD *)this + 98) = 0;
  *((void *)this + 18) = v1;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = v1;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = v1;
  *(void *)((char *)this + 236) = 0;
  return result;
}

void *awd::metrics::ATM_CallConnectEvent::SharedDtor(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = v1[5];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (void *)MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    this = (void *)MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    this = (void *)MEMORY[0x1C878E320](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x1C878E320](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = v1[10];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    this = (void *)MEMORY[0x1C878E320](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = v1[11];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    this = (void *)MEMORY[0x1C878E320](v13, 0x1012C40EC159624);
  }
  uint64_t v14 = v1[13];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    this = (void *)MEMORY[0x1C878E320](v14, 0x1012C40EC159624);
  }
  uint64_t v15 = v1[14];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    this = (void *)MEMORY[0x1C878E320](v15, 0x1012C40EC159624);
  }
  uint64_t v16 = v1[15];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    this = (void *)MEMORY[0x1C878E320](v16, 0x1012C40EC159624);
  }
  uint64_t v17 = v1[16];
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    this = (void *)MEMORY[0x1C878E320](v17, 0x1012C40EC159624);
  }
  uint64_t v18 = v1[18];
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    this = (void *)MEMORY[0x1C878E320](v18, 0x1012C40EC159624);
  }
  uint64_t v19 = v1[22];
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0) {
      operator delete(*(void **)v19);
    }
    this = (void *)MEMORY[0x1C878E320](v19, 0x1012C40EC159624);
  }
  uint64_t v20 = v1[28];
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::ATM_CallConnectEvent::~ATM_CallConnectEvent(awd::metrics::ATM_CallConnectEvent *this)
{
  *(void *)this = &unk_1F20BA170;
  awd::metrics::ATM_CallConnectEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA170;
  awd::metrics::ATM_CallConnectEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_CallConnectEvent::New(awd::metrics::ATM_CallConnectEvent *this)
{
}

uint64_t awd::metrics::ATM_CallConnectEvent::Clear(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 236);
  if ((_BYTE)v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(void *)(this + 24) = 0xFFFFFFFFLL;
    *(unsigned char *)(this + 96) = 0;
    unsigned int v1 = *(_DWORD *)(this + 236);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_DWORD *)(this + 32) = -1;
    if ((v1 & 0x200) != 0)
    {
      uint64_t v3 = *(void *)(this + 40);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 36) = 0;
    if ((*(unsigned char *)(this + 237) & 8) != 0)
    {
      uint64_t v4 = *(void *)(this + 48);
      if (v4 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 97) = 0;
    if ((*(unsigned char *)(this + 237) & 0x20) != 0)
    {
      uint64_t v5 = *(void *)(this + 56);
      if (v5 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 237) & 0x40) != 0)
    {
      uint64_t v6 = *(void *)(this + 64);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 72) = 0;
    unsigned int v1 = *(_DWORD *)(this + 236);
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(_DWORD *)(this + 76) = 0;
    if ((v1 & 0x20000) != 0)
    {
      uint64_t v7 = *(void *)(this + 80);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 238) & 4) != 0)
    {
      uint64_t v8 = *(void *)(this + 88);
      if (v8 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 238) & 8) != 0)
    {
      uint64_t v9 = *(void *)(this + 104);
      if (v9 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(unsigned char **)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v9 = 0;
          *(unsigned char *)(v9 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 238) & 0x10) != 0)
    {
      uint64_t v10 = *(void *)(this + 112);
      if (v10 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 98) = 0;
    *(_DWORD *)(this + 100) = 0;
    *(_DWORD *)(this + 136) = 0;
    unsigned int v1 = *(_DWORD *)(this + 236);
  }
  if (HIBYTE(v1))
  {
    if ((v1 & 0x1000000) != 0)
    {
      uint64_t v11 = *(void *)(this + 120);
      if (v11 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 239) & 2) != 0)
    {
      uint64_t v12 = *(void *)(this + 128);
      if (v12 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 239) & 4) != 0)
    {
      uint64_t v13 = *(void *)(this + 144);
      if (v13 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(unsigned char **)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v13 = 0;
          *(unsigned char *)(v13 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 140) = 0;
    *(unsigned char *)(this + 99) = 0;
    *(void *)(this + 152) = 0;
    *(_DWORD *)(this + 168) = 0;
  }
  int v14 = *(_DWORD *)(this + 240);
  if ((_BYTE)v14)
  {
    *(void *)(this + 160) = 0;
    *(_DWORD *)(this + 172) = 0;
    *(unsigned char *)(this + 196) = 0;
    if ((v14 & 8) != 0)
    {
      uint64_t v15 = *(void *)(this + 176);
      if (v15 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(unsigned char **)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v15 = 0;
          *(unsigned char *)(v15 + 23) = 0;
        }
      }
    }
    *(void *)(this + 184) = 0;
    *(_DWORD *)(this + 192) = 0;
    *(_DWORD *)(this + 200) = 0;
    int v14 = *(_DWORD *)(this + 240);
  }
  if ((v14 & 0xFF00) != 0)
  {
    *(unsigned char *)(this + 197) = 0;
    *(void *)(this + 212) = 0;
    *(void *)(this + 204) = 0;
    *(_DWORD *)(this + 220) = 0;
    if ((v14 & 0x4000) != 0)
    {
      uint64_t v16 = *(void *)(this + 224);
      if (v16 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(unsigned char **)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v16 = 0;
          *(unsigned char *)(v16 + 23) = 0;
        }
      }
    }
  }
  *(void *)(this + 236) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallConnectEvent::MergePartialFromCodedStream(awd::metrics::ATM_CallConnectEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 36);
  uint64_t v5 = (unsigned int *)((char *)this + 72);
  uint64_t v6 = (unsigned int *)((char *)this + 140);
  v139 = (unsigned int *)((char *)this + 152);
  uint64_t v140 = (unsigned int *)((char *)this + 100);
  uint64_t v134 = (unsigned int *)((char *)this + 168);
  int v132 = (unint64_t *)((char *)this + 160);
  int v130 = (unint64_t *)((char *)this + 8);
  uint64_t v131 = (unsigned int *)((char *)this + 76);
  int v137 = (unsigned int *)((char *)this + 192);
  uint64_t v138 = (unsigned int *)((char *)this + 136);
  unint64_t v135 = (unsigned int *)((char *)this + 200);
  int v136 = (unsigned int *)((char *)this + 156);
  char v133 = (unsigned int *)((char *)this + 204);
  uint64_t v7 = (unsigned int *)((char *)this + 208);
  uint64_t v8 = (unsigned int *)((char *)this + 212);
  uint64_t v9 = (unsigned int *)((char *)this + 216);
  uint64_t v10 = (unsigned int *)((char *)this + 220);
  uint64_t v11 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    unsigned int v14 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v130);
          if (!result) {
            return result;
          }
          uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v130 = *v17;
          uint64_t v18 = v17 + 1;
          *((void *)a2 + 1) = v18;
        }
        int v21 = *((_DWORD *)this + 59) | 1;
        *((_DWORD *)this + 59) = v21;
        if ((unint64_t)v18 < v16 && *v18 == 18)
        {
          *((void *)a2 + 1) = v18 + 1;
          goto LABEL_323;
        }
        continue;
      case 2u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v21 = *((_DWORD *)this + 59);
LABEL_323:
        *((_DWORD *)this + 59) = v21 | 2;
        if (*((void *)this + 2) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v98 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        if ((unint64_t)v98 >= v22 || *v98 != 24) {
          continue;
        }
        int v23 = v98 + 1;
        *((void *)a2 + 1) = v23;
LABEL_329:
        unsigned int v141 = 0;
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v99 = v141;
          int v100 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v99 = *v23;
          int v100 = v23 + 1;
          *((void *)a2 + 1) = v100;
        }
        *((unsigned char *)this + 28) = v99 != 0;
        *((_DWORD *)this + 59) |= 4u;
        if ((unint64_t)v100 >= v22 || *v100 != 32) {
          continue;
        }
        uint64_t v24 = v100 + 1;
        *((void *)a2 + 1) = v24;
LABEL_337:
        unsigned int v141 = 0;
        if ((unint64_t)v24 >= v22 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v101 = v141;
        }
        else
        {
          unsigned int v101 = *v24;
          *((void *)a2 + 1) = v24 + 1;
        }
        if (v101 + 1 <= 7)
        {
          *((_DWORD *)this + 59) |= 8u;
          *((_DWORD *)this + 6) = v101;
        }
        int v102 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v102 >= v25 || *v102 != 40) {
          continue;
        }
        int v26 = v102 + 1;
        *((void *)a2 + 1) = v26;
LABEL_347:
        unsigned int v141 = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v103 = v141;
          int v104 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v103 = *v26;
          int v104 = v26 + 1;
          *((void *)a2 + 1) = v104;
        }
        *((unsigned char *)this + 29) = v103 != 0;
        *((_DWORD *)this + 59) |= 0x10u;
        if ((unint64_t)v104 >= v25 || *v104 != 48) {
          continue;
        }
        char v27 = v104 + 1;
        *((void *)a2 + 1) = v27;
LABEL_355:
        unsigned int v141 = 0;
        if ((unint64_t)v27 >= v25 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v105 = v141;
          int v106 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v105 = *v27;
          int v106 = v27 + 1;
          *((void *)a2 + 1) = v106;
        }
        *((unsigned char *)this + 30) = v105 != 0;
        *((_DWORD *)this + 59) |= 0x20u;
        if ((unint64_t)v106 >= v25 || *v106 != 56) {
          continue;
        }
        char v28 = v106 + 1;
        *((void *)a2 + 1) = v28;
LABEL_363:
        unsigned int v141 = 0;
        if ((unint64_t)v28 >= v25 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v107 = v141;
          uint64_t v108 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v107 = *v28;
          uint64_t v108 = v28 + 1;
          *((void *)a2 + 1) = v108;
        }
        *((unsigned char *)this + 31) = v107 != 0;
        *((_DWORD *)this + 59) |= 0x40u;
        if ((unint64_t)v108 >= v25 || *v108 != 64) {
          continue;
        }
        char v29 = v108 + 1;
        *((void *)a2 + 1) = v29;
LABEL_371:
        unsigned int v141 = 0;
        if ((unint64_t)v29 >= v25 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v109 = v141;
          int v110 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v109 = *v29;
          int v110 = v29 + 1;
          *((void *)a2 + 1) = v110;
        }
        *((unsigned char *)this + 96) = v109 != 0;
        *((_DWORD *)this + 59) |= 0x80u;
        if ((unint64_t)v110 >= v25 || *v110 != 72) {
          continue;
        }
        int v30 = v110 + 1;
        *((void *)a2 + 1) = v30;
LABEL_379:
        unsigned int v141 = 0;
        if ((unint64_t)v30 >= v25 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v111 = v141;
        }
        else
        {
          unsigned int v111 = *v30;
          *((void *)a2 + 1) = v30 + 1;
        }
        if (v111 - 1 < 6 || v111 == -1)
        {
          *((_DWORD *)this + 59) |= 0x100u;
          *((_DWORD *)this + 8) = v111;
        }
        char v113 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v113 >= *((void *)a2 + 2) || *v113 != 82) {
          continue;
        }
        *((void *)a2 + 1) = v113 + 1;
LABEL_393:
        *((_DWORD *)this + 59) |= 0x200u;
        if (*((void *)this + 5) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v114 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        if ((unint64_t)v114 >= v31 || *v114 != 88) {
          continue;
        }
        char v32 = v114 + 1;
        *((void *)a2 + 1) = v32;
LABEL_399:
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unint64_t v115 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v4 = *v32;
          unint64_t v115 = v32 + 1;
          *((void *)a2 + 1) = v115;
        }
        int v33 = *((_DWORD *)this + 59) | 0x400;
        *((_DWORD *)this + 59) = v33;
        if ((unint64_t)v115 >= v31 || *v115 != 98) {
          continue;
        }
        *((void *)a2 + 1) = v115 + 1;
LABEL_407:
        *((_DWORD *)this + 59) = v33 | 0x800;
        if (*((void *)this + 6) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v116 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        if ((unint64_t)v116 >= v34 || *v116 != 104) {
          continue;
        }
        int v35 = v116 + 1;
        *((void *)a2 + 1) = v35;
LABEL_413:
        unsigned int v141 = 0;
        if ((unint64_t)v35 >= v34 || *v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v117 = v141;
          int v118 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v34 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v117 = *v35;
          int v118 = v35 + 1;
          *((void *)a2 + 1) = v118;
        }
        *((unsigned char *)this + 97) = v117 != 0;
        int v36 = *((_DWORD *)this + 59) | 0x1000;
        *((_DWORD *)this + 59) = v36;
        if ((unint64_t)v118 >= v34 || *v118 != 114) {
          continue;
        }
        *((void *)a2 + 1) = v118 + 1;
LABEL_421:
        *((_DWORD *)this + 59) = v36 | 0x2000;
        if (*((void *)this + 7) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        v119 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v119 >= *((void *)a2 + 2) || *v119 != 122) {
          continue;
        }
        *((void *)a2 + 1) = v119 + 1;
LABEL_427:
        *((_DWORD *)this + 59) |= 0x4000u;
        if (*((void *)this + 8) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v120 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        if ((int)v37 - (int)v120 < 2 || *v120 != 128 || v120[1] != 1) {
          continue;
        }
        char v38 = v120 + 2;
        *((void *)a2 + 1) = v38;
LABEL_434:
        if ((unint64_t)v38 >= v37 || (char)*v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          v121 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v5 = *v38;
          v121 = v38 + 1;
          *((void *)a2 + 1) = v121;
        }
        int v39 = *((_DWORD *)this + 59) | 0x8000;
        *((_DWORD *)this + 59) = v39;
        if ((int)v37 - (int)v121 < 2 || *v121 != 138 || v121[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v121 + 2;
LABEL_443:
        *((_DWORD *)this + 59) = v39 | 0x20000;
        if (*((void *)this + 10) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v122 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v122 < 2 || *v122 != 146 || v122[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v122 + 2;
LABEL_450:
        *((_DWORD *)this + 59) |= 0x40000u;
        if (*((void *)this + 11) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        v123 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v123 < 2 || *v123 != 154 || v123[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v123 + 2;
LABEL_457:
        *((_DWORD *)this + 59) |= 0x80000u;
        if (*((void *)this + 13) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v124 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v124 < 2 || *v124 != 162 || v124[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v124 + 2;
LABEL_464:
        *((_DWORD *)this + 59) |= 0x100000u;
        if (*((void *)this + 14) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        v125 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v40 = *((void *)a2 + 2);
        if ((int)v40 - (int)v125 < 2 || *v125 != 168 || v125[1] != 1) {
          continue;
        }
        int v41 = v125 + 2;
        *((void *)a2 + 1) = v41;
LABEL_471:
        unsigned int v141 = 0;
        if ((unint64_t)v41 >= v40 || (char)*v41 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v126 = v141;
          v127 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v126 = *v41;
          v127 = v41 + 1;
          *((void *)a2 + 1) = v127;
        }
        *((unsigned char *)this + 98) = v126 != 0;
        *((_DWORD *)this + 59) |= 0x200000u;
        if ((int)v40 - (int)v127 < 2 || *v127 != 176 || v127[1] != 1) {
          continue;
        }
        v42 = v127 + 2;
        *((void *)a2 + 1) = v42;
LABEL_480:
        if ((unint64_t)v42 >= v40 || (char)*v42 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v140);
          if (!result) {
            return result;
          }
          int v128 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v140 = *v42;
          int v128 = v42 + 1;
          *((void *)a2 + 1) = v128;
        }
        *((_DWORD *)this + 59) |= 0x400000u;
        if ((int)v40 - (int)v128 < 2 || *v128 != 184 || v128[1] != 1) {
          continue;
        }
        int v43 = v128 + 2;
        *((void *)a2 + 1) = v43;
LABEL_489:
        if ((unint64_t)v43 >= v40 || (char)*v43 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v138);
          if (!result) {
            return result;
          }
          v129 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v138 = *v43;
          v129 = v43 + 1;
          *((void *)a2 + 1) = v129;
        }
        int v44 = *((_DWORD *)this + 59) | 0x800000;
        *((_DWORD *)this + 59) = v44;
        if ((int)v40 - (int)v129 < 2 || *v129 != 194 || v129[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v129 + 2;
LABEL_69:
        *((_DWORD *)this + 59) = v44 | 0x1000000;
        if (*((void *)this + 15) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v45 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v45 < 2 || *v45 != 202 || v45[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v45 + 2;
LABEL_77:
        *((_DWORD *)this + 59) |= 0x2000000u;
        if (*((void *)this + 16) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v46 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v46 < 2 || *v46 != 210 || v46[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v46 + 2;
LABEL_85:
        *((_DWORD *)this + 59) |= 0x4000000u;
        if (*((void *)this + 18) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v48 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        if ((int)v47 - (int)v48 < 2 || *v48 != 216 || v48[1] != 1) {
          continue;
        }
        uint64_t v49 = v48 + 2;
        *((void *)a2 + 1) = v49;
LABEL_94:
        if ((unint64_t)v49 >= v47 || (char)*v49 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unint64_t v50 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v49;
          unint64_t v50 = v49 + 1;
          *((void *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 59) |= 0x8000000u;
        if ((int)v47 - (int)v50 < 2 || *v50 != 224 || v50[1] != 1) {
          continue;
        }
        int v51 = v50 + 2;
        *((void *)a2 + 1) = v51;
LABEL_155:
        if ((unint64_t)v51 >= v47 || (char)*v51 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v139);
          if (!result) {
            return result;
          }
          int v75 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v139 = *v51;
          int v75 = v51 + 1;
          *((void *)a2 + 1) = v75;
        }
        *((_DWORD *)this + 59) |= 0x10000000u;
        if ((int)v47 - (int)v75 < 2 || *v75 != 232 || v75[1] != 1) {
          continue;
        }
        int v52 = v75 + 2;
        *((void *)a2 + 1) = v52;
LABEL_175:
        unsigned int v141 = 0;
        if ((unint64_t)v52 >= v47 || (char)*v52 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v78 = v141;
          uint64_t v79 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v78 = *v52;
          uint64_t v79 = v52 + 1;
          *((void *)a2 + 1) = v79;
        }
        *((unsigned char *)this + 99) = v78 != 0;
        *((_DWORD *)this + 59) |= 0x20000000u;
        if ((int)v47 - (int)v79 < 2 || *v79 != 240 || v79[1] != 1) {
          continue;
        }
        int v53 = v79 + 2;
        *((void *)a2 + 1) = v53;
LABEL_195:
        if ((unint64_t)v53 >= v47 || (char)*v53 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v136);
          if (!result) {
            return result;
          }
          uint64_t v82 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          *int v136 = *v53;
          uint64_t v82 = v53 + 1;
          *((void *)a2 + 1) = v82;
        }
        *((_DWORD *)this + 59) |= 0x40000000u;
        if ((int)v47 - (int)v82 < 2 || *v82 != 248 || v82[1] != 1) {
          continue;
        }
        int v54 = v82 + 2;
        *((void *)a2 + 1) = v54;
LABEL_213:
        if ((unint64_t)v54 >= v47 || (char)*v54 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v134);
          if (!result) {
            return result;
          }
          char v84 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v134 = *v54;
          char v84 = v54 + 1;
          *((void *)a2 + 1) = v84;
        }
        *((_DWORD *)this + 59) |= 0x80000000;
        if ((int)v47 - (int)v84 < 2 || *v84 != 128 || v84[1] != 2) {
          continue;
        }
        int v55 = v84 + 2;
        *((void *)a2 + 1) = v55;
LABEL_231:
        if ((unint64_t)v55 >= v47 || (char)*v55 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v132);
          if (!result) {
            return result;
          }
          unint64_t v86 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          *int v132 = *v55;
          unint64_t v86 = v55 + 1;
          *((void *)a2 + 1) = v86;
        }
        *((_DWORD *)this + 60) |= 1u;
        if ((int)v47 - (int)v86 < 2 || *v86 != 136 || v86[1] != 2) {
          continue;
        }
        char v56 = v86 + 2;
        *((void *)a2 + 1) = v56;
LABEL_249:
        if ((unint64_t)v56 >= v47 || (char)*v56 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v131);
          if (!result) {
            return result;
          }
          uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v131 = *v56;
          uint64_t v88 = v56 + 1;
          *((void *)a2 + 1) = v88;
        }
        *((_DWORD *)this + 59) |= 0x10000u;
        if ((int)v47 - (int)v88 < 2 || *v88 != 144 || v88[1] != 2) {
          continue;
        }
        int v57 = v88 + 2;
        *((void *)a2 + 1) = v57;
LABEL_267:
        unsigned int v141 = 0;
        if ((unint64_t)v57 >= v47 || (char)*v57 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v90 = v141;
          uint64_t v91 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v90 = *v57;
          uint64_t v91 = v57 + 1;
          *((void *)a2 + 1) = v91;
        }
        *((_DWORD *)this + 43) = -(v90 & 1) ^ (v90 >> 1);
        *((_DWORD *)this + 60) |= 2u;
        if ((int)v47 - (int)v91 < 2 || *v91 != 152 || v91[1] != 2) {
          continue;
        }
        uint64_t v58 = v91 + 2;
        *((void *)a2 + 1) = v58;
LABEL_285:
        unsigned int v141 = 0;
        if ((unint64_t)v58 >= v47 || (char)*v58 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v93 = v141;
          v94 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v93 = *v58;
          v94 = v58 + 1;
          *((void *)a2 + 1) = v94;
        }
        *((unsigned char *)this + 196) = v93 != 0;
        int v59 = *((_DWORD *)this + 60) | 4;
        *((_DWORD *)this + 60) = v59;
        if ((int)v47 - (int)v94 < 2 || *v94 != 162 || v94[1] != 2) {
          continue;
        }
        *((void *)a2 + 1) = v94 + 2;
LABEL_115:
        *((_DWORD *)this + 60) = v59 | 8;
        if (*((void *)this + 22) == v11) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v61 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v60 = *((void *)a2 + 2);
        if ((int)v60 - (int)v61 < 2 || *v61 != 168 || v61[1] != 2) {
          continue;
        }
        uint64_t v62 = (char *)(v61 + 2);
        *((void *)a2 + 1) = v62;
LABEL_124:
        unsigned int v141 = 0;
        if ((unint64_t)v62 >= v60 || *v62 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v63 = v141;
        }
        else
        {
          unsigned int v63 = *v62;
          *((void *)a2 + 1) = v62 + 1;
        }
        if (v63 <= 2)
        {
          *((_DWORD *)this + 60) |= 0x10u;
          *((_DWORD *)this + 46) = v63;
        }
        char v76 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        if ((int)v64 - (int)v76 < 2 || *v76 != 176 || v76[1] != 2) {
          continue;
        }
        int v65 = (char *)(v76 + 2);
        *((void *)a2 + 1) = v65;
LABEL_166:
        unsigned int v141 = 0;
        if ((unint64_t)v65 >= v64 || *v65 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v77 = v141;
        }
        else
        {
          unsigned int v77 = *v65;
          *((void *)a2 + 1) = v65 + 1;
        }
        if (v77 <= 5)
        {
          *((_DWORD *)this + 60) |= 0x20u;
          *((_DWORD *)this + 47) = v77;
        }
        unint64_t v80 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        if ((int)v66 - (int)v80 < 2 || *v80 != 184 || v80[1] != 2) {
          continue;
        }
        int v67 = v80 + 2;
        *((void *)a2 + 1) = v67;
LABEL_186:
        if ((unint64_t)v67 >= v66 || (char)*v67 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v137);
          if (!result) {
            return result;
          }
          int v81 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *int v137 = *v67;
          int v81 = v67 + 1;
          *((void *)a2 + 1) = v81;
        }
        *((_DWORD *)this + 60) |= 0x40u;
        if ((int)v66 - (int)v81 < 2 || *v81 != 192 || v81[1] != 2) {
          continue;
        }
        unint64_t v68 = v81 + 2;
        *((void *)a2 + 1) = v68;
LABEL_204:
        if ((unint64_t)v68 >= v66 || (char)*v68 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v135);
          if (!result) {
            return result;
          }
          int v83 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *unint64_t v135 = *v68;
          int v83 = v68 + 1;
          *((void *)a2 + 1) = v83;
        }
        *((_DWORD *)this + 60) |= 0x80u;
        if ((int)v66 - (int)v83 < 2 || *v83 != 200 || v83[1] != 2) {
          continue;
        }
        int v69 = v83 + 2;
        *((void *)a2 + 1) = v69;
LABEL_222:
        if ((unint64_t)v69 >= v66 || (char)*v69 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v133);
          if (!result) {
            return result;
          }
          uint64_t v85 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *char v133 = *v69;
          uint64_t v85 = v69 + 1;
          *((void *)a2 + 1) = v85;
        }
        *((_DWORD *)this + 60) |= 0x100u;
        if ((int)v66 - (int)v85 < 2 || *v85 != 208 || v85[1] != 2) {
          continue;
        }
        v70 = v85 + 2;
        *((void *)a2 + 1) = v70;
LABEL_240:
        if ((unint64_t)v70 >= v66 || (char)*v70 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v87 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v70;
          int v87 = v70 + 1;
          *((void *)a2 + 1) = v87;
        }
        *((_DWORD *)this + 60) |= 0x200u;
        if ((int)v66 - (int)v87 < 2 || *v87 != 216 || v87[1] != 2) {
          continue;
        }
        int v71 = v87 + 2;
        *((void *)a2 + 1) = v71;
LABEL_258:
        if ((unint64_t)v71 >= v66 || (char)*v71 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v89 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v8 = *v71;
          int v89 = v71 + 1;
          *((void *)a2 + 1) = v89;
        }
        *((_DWORD *)this + 60) |= 0x400u;
        if ((int)v66 - (int)v89 < 2 || *v89 != 224 || v89[1] != 2) {
          continue;
        }
        v72 = v89 + 2;
        *((void *)a2 + 1) = v72;
LABEL_276:
        if ((unint64_t)v72 >= v66 || (char)*v72 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          unint64_t v92 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v9 = *v72;
          unint64_t v92 = v72 + 1;
          *((void *)a2 + 1) = v92;
        }
        *((_DWORD *)this + 60) |= 0x800u;
        if ((int)v66 - (int)v92 < 2 || *v92 != 232 || v92[1] != 2) {
          continue;
        }
        int v73 = v92 + 2;
        *((void *)a2 + 1) = v73;
LABEL_294:
        unsigned int v141 = 0;
        if ((unint64_t)v73 >= v66 || (char)*v73 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141);
          if (!result) {
            return result;
          }
          unsigned int v95 = v141;
          v96 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v95 = *v73;
          v96 = v73 + 1;
          *((void *)a2 + 1) = v96;
        }
        *((unsigned char *)this + 197) = v95 != 0;
        *((_DWORD *)this + 60) |= 0x1000u;
        if ((int)v66 - (int)v96 < 2 || *v96 != 240 || v96[1] != 34) {
          continue;
        }
        int v74 = v96 + 2;
        *((void *)a2 + 1) = v74;
        goto LABEL_309;
      case 3u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        goto LABEL_329;
      case 4u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v24 = (char *)*((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        goto LABEL_337;
      case 5u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_347;
      case 6u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v27 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_355;
      case 7u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v28 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_363;
      case 8u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v29 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_371;
      case 9u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_379;
      case 0xAu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_393;
        }
        goto LABEL_146;
      case 0xBu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v32 = (char *)*((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        goto LABEL_399;
      case 0xCu:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v33 = *((_DWORD *)this + 59);
        goto LABEL_407;
      case 0xDu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v35 = (char *)*((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        goto LABEL_413;
      case 0xEu:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v36 = *((_DWORD *)this + 59);
        goto LABEL_421;
      case 0xFu:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_427;
        }
        goto LABEL_146;
      case 0x10u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v38 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        goto LABEL_434;
      case 0x11u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v39 = *((_DWORD *)this + 59);
        goto LABEL_443;
      case 0x12u:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_450;
        }
        goto LABEL_146;
      case 0x13u:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_457;
        }
        goto LABEL_146;
      case 0x14u:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_464;
        }
        goto LABEL_146;
      case 0x15u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v41 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v40 = *((void *)a2 + 2);
        goto LABEL_471;
      case 0x16u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        v42 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v40 = *((void *)a2 + 2);
        goto LABEL_480;
      case 0x17u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v43 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v40 = *((void *)a2 + 2);
        goto LABEL_489;
      case 0x18u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v44 = *((_DWORD *)this + 59);
        goto LABEL_69;
      case 0x19u:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_77;
        }
        goto LABEL_146;
      case 0x1Au:
        int v15 = TagFallback & 7;
        if (v15 == 2) {
          goto LABEL_85;
        }
        goto LABEL_146;
      case 0x1Bu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v49 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_94;
      case 0x1Cu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v51 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_155;
      case 0x1Du:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v52 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_175;
      case 0x1Eu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v53 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_195;
      case 0x1Fu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v54 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_213;
      case 0x20u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v55 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_231;
      case 0x21u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        char v56 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_249;
      case 0x22u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v57 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_267;
      case 0x23u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v58 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v47 = *((void *)a2 + 2);
        goto LABEL_285;
      case 0x24u:
        int v15 = TagFallback & 7;
        if (v15 != 2) {
          goto LABEL_146;
        }
        int v59 = *((_DWORD *)this + 60);
        goto LABEL_115;
      case 0x25u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v62 = (char *)*((void *)a2 + 1);
        unint64_t v60 = *((void *)a2 + 2);
        goto LABEL_124;
      case 0x26u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v65 = (char *)*((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        goto LABEL_166;
      case 0x27u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v67 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_186;
      case 0x28u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        unint64_t v68 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_204;
      case 0x29u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v69 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_222;
      case 0x2Au:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        v70 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_240;
      case 0x2Bu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v71 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_258;
      case 0x2Cu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        v72 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_276;
      case 0x2Du:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_146;
        }
        int v73 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        goto LABEL_294;
      default:
        if (v14 == 558)
        {
          int v15 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_146;
          }
          int v74 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
LABEL_309:
          if ((unint64_t)v74 >= v66 || (char)*v74 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
            if (!result) {
              return result;
            }
            int v97 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v66 = *((void *)a2 + 2);
          }
          else
          {
            *uint64_t v10 = *v74;
            int v97 = v74 + 1;
            *((void *)a2 + 1) = v97;
          }
          int v19 = *((_DWORD *)this + 60) | 0x2000;
          *((_DWORD *)this + 60) = v19;
          if ((int)v66 - (int)v97 >= 2 && *v97 == 250 && v97[1] == 34)
          {
            *((void *)a2 + 1) = v97 + 2;
            goto LABEL_16;
          }
          continue;
        }
        if (v14 == 559)
        {
          int v15 = TagFallback & 7;
          if (v15 != 2) {
            goto LABEL_146;
          }
          int v19 = *((_DWORD *)this + 60);
LABEL_16:
          *((_DWORD *)this + 60) = v19 | 0x4000;
          if (*((void *)this + 28) == v11) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        int v15 = TagFallback & 7;
LABEL_146:
        if (v15 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
          continue;
          }
        }
        return 1;
    }
  }
}

uint64_t awd::metrics::ATM_CallConnectEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 236);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 236);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 96), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 97), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20000) == 0)
  {
LABEL_18:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40000) == 0)
  {
LABEL_19:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x80000) == 0)
  {
LABEL_20:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x100000) == 0)
  {
LABEL_21:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x200000) == 0)
  {
LABEL_22:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 98), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x400000) == 0)
  {
LABEL_23:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x800000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 136), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 140), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 152), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_31;
    }
LABEL_80:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 156), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 236) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_79:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 99), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 236);
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_80;
  }
LABEL_31:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_32;
  }
LABEL_81:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 168), (uint64_t)a2, a4);
LABEL_32:
  if (*(unsigned char *)(v5 + 240)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(void *)(v5 + 160), (uint64_t)a2, a4);
  }
  if (*(unsigned char *)(v5 + 238)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  }
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 2) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, *(unsigned int *)(v5 + 172), (uint64_t)a2, a4);
    int v7 = *(_DWORD *)(v5 + 240);
    if ((v7 & 4) == 0)
    {
LABEL_38:
      if ((v7 & 8) == 0) {
        goto LABEL_39;
      }
      goto LABEL_84;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_38;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned __int8 *)(v5 + 196), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v7 & 0x10) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x10) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, *(unsigned int *)(v5 + 184), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x20) == 0)
  {
LABEL_41:
    if ((v7 & 0x40) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 188), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x40) == 0)
  {
LABEL_42:
    if ((v7 & 0x80) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x80) == 0)
  {
LABEL_43:
    if ((v7 & 0x100) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 200), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x100) == 0)
  {
LABEL_44:
    if ((v7 & 0x200) == 0) {
      goto LABEL_45;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, *(unsigned int *)(v5 + 204), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x200) == 0)
  {
LABEL_45:
    if ((v7 & 0x400) == 0) {
      goto LABEL_46;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, *(unsigned int *)(v5 + 208), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x400) == 0)
  {
LABEL_46:
    if ((v7 & 0x800) == 0) {
      goto LABEL_47;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 212), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x800) == 0)
  {
LABEL_47:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, *(unsigned int *)(v5 + 216), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x1000) == 0)
  {
LABEL_48:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_49;
    }
LABEL_94:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 220), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 240) & 0x4000) == 0) {
      return this;
    }
    goto LABEL_95;
  }
LABEL_93:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned __int8 *)(v5 + 197), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 240);
  if ((v7 & 0x2000) != 0) {
    goto LABEL_94;
  }
LABEL_49:
  if ((v7 & 0x4000) == 0) {
    return this;
  }
LABEL_95:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::ATM_CallConnectEvent::ByteSize(awd::metrics::ATM_CallConnectEvent *this)
{
  unsigned int v2 = *((_DWORD *)this + 59);
  if (!(_BYTE)v2)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    unsigned int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v5 = *((void *)this + 2);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      unsigned int v2 = *((_DWORD *)this + 59);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  unsigned int v2 = *((_DWORD *)this + 59);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_16:
  if ((v2 & 4) != 0) {
    v3 += 2;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      int v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v12 = 1;
    }
    v3 += v12 + 1;
  }
  unsigned int v13 = v3 + 2;
  if ((v2 & 0x10) == 0) {
    unsigned int v13 = v3;
  }
  if ((v2 & 0x20) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x40) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x80) != 0) {
    uint64_t v4 = v13 + 2;
  }
  else {
    uint64_t v4 = v13;
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_97;
  }
  if ((v2 & 0x100) != 0)
  {
    unsigned int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v15 = 1;
    }
    LODWORD(v4) = v4 + v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0) {
        goto LABEL_38;
      }
LABEL_55:
      unint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        unsigned int v2 = *((_DWORD *)this + 59);
      }
      else
      {
        int v23 = 1;
      }
      LODWORD(v4) = v4 + v23 + 1;
      if ((v2 & 0x800) == 0) {
        goto LABEL_68;
      }
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  uint64_t v16 = *((void *)this + 5);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  LODWORD(v4) = v4 + v21 + v17 + 1;
  if ((v2 & 0x400) != 0) {
    goto LABEL_55;
  }
LABEL_38:
  if ((v2 & 0x800) == 0) {
    goto LABEL_68;
  }
LABEL_59:
  uint64_t v24 = *((void *)this + 6);
  int v25 = *(unsigned __int8 *)(v24 + 23);
  char v26 = v25;
  uint64_t v27 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v27 = *(void *)(v24 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v26 = *(unsigned char *)(v24 + 23);
  }
  else
  {
    int v29 = 1;
  }
  if (v26 < 0) {
    int v25 = v27;
  }
  LODWORD(v4) = v4 + v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0) {
    uint64_t v4 = (v4 + 2);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v2 & 0x2000) != 0)
  {
    uint64_t v30 = *((void *)this + 7);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    char v32 = v31;
    uint64_t v33 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >= 0x80)
    {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      uint64_t v33 = *(void *)(v30 + 8);
      unsigned int v2 = *((_DWORD *)this + 59);
      char v32 = *(unsigned char *)(v30 + 23);
    }
    else
    {
      int v35 = 1;
    }
    if (v32 < 0) {
      int v31 = v33;
    }
    uint64_t v4 = (v4 + v35 + v31 + 1);
    if ((v2 & 0x4000) == 0)
    {
LABEL_73:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_97;
      }
      goto LABEL_93;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_73;
  }
  uint64_t v36 = *((void *)this + 8);
  int v37 = *(unsigned __int8 *)(v36 + 23);
  char v38 = v37;
  uint64_t v39 = *(void *)(v36 + 8);
  if ((v37 & 0x80u) == 0) {
    unint64_t v40 = *(unsigned __int8 *)(v36 + 23);
  }
  else {
    unint64_t v40 = v39;
  }
  if (v40 >= 0x80)
  {
    int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    int v37 = *(unsigned __int8 *)(v36 + 23);
    uint64_t v39 = *(void *)(v36 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v38 = *(unsigned char *)(v36 + 23);
  }
  else
  {
    int v41 = 1;
  }
  if (v38 < 0) {
    int v37 = v39;
  }
  uint64_t v4 = (v4 + v41 + v37 + 1);
  if ((v2 & 0x8000) != 0)
  {
LABEL_93:
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v42 >= 0x80)
    {
      int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v43 = 1;
    }
    uint64_t v4 = (v4 + v43 + 2);
  }
LABEL_97:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_157;
  }
  if ((v2 & 0x10000) != 0)
  {
    int v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
    if (v44 >= 0x80)
    {
      int v45 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v45 = 1;
    }
    LODWORD(v4) = v4 + v45 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_100:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_101;
      }
      goto LABEL_117;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_100;
  }
  uint64_t v46 = *((void *)this + 10);
  int v47 = *(unsigned __int8 *)(v46 + 23);
  char v48 = v47;
  uint64_t v49 = *(void *)(v46 + 8);
  if ((v47 & 0x80u) == 0) {
    unint64_t v50 = *(unsigned __int8 *)(v46 + 23);
  }
  else {
    unint64_t v50 = v49;
  }
  if (v50 >= 0x80)
  {
    int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50);
    int v47 = *(unsigned __int8 *)(v46 + 23);
    uint64_t v49 = *(void *)(v46 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v48 = *(unsigned char *)(v46 + 23);
  }
  else
  {
    int v51 = 1;
  }
  if (v48 < 0) {
    int v47 = v49;
  }
  LODWORD(v4) = v4 + v51 + v47 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_101:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_102;
    }
LABEL_126:
    uint64_t v58 = *((void *)this + 13);
    int v59 = *(unsigned __int8 *)(v58 + 23);
    char v60 = v59;
    uint64_t v61 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      unint64_t v62 = *(unsigned __int8 *)(v58 + 23);
    }
    else {
      unint64_t v62 = v61;
    }
    if (v62 >= 0x80)
    {
      int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v62);
      int v59 = *(unsigned __int8 *)(v58 + 23);
      uint64_t v61 = *(void *)(v58 + 8);
      unsigned int v2 = *((_DWORD *)this + 59);
      char v60 = *(unsigned char *)(v58 + 23);
    }
    else
    {
      int v63 = 1;
    }
    if (v60 < 0) {
      int v59 = v61;
    }
    LODWORD(v4) = v4 + v63 + v59 + 2;
    if ((v2 & 0x100000) == 0) {
      goto LABEL_144;
    }
    goto LABEL_135;
  }
LABEL_117:
  uint64_t v52 = *((void *)this + 11);
  int v53 = *(unsigned __int8 *)(v52 + 23);
  char v54 = v53;
  uint64_t v55 = *(void *)(v52 + 8);
  if ((v53 & 0x80u) == 0) {
    unint64_t v56 = *(unsigned __int8 *)(v52 + 23);
  }
  else {
    unint64_t v56 = v55;
  }
  if (v56 >= 0x80)
  {
    int v57 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v56);
    int v53 = *(unsigned __int8 *)(v52 + 23);
    uint64_t v55 = *(void *)(v52 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v54 = *(unsigned char *)(v52 + 23);
  }
  else
  {
    int v57 = 1;
  }
  if (v54 < 0) {
    int v53 = v55;
  }
  LODWORD(v4) = v4 + v57 + v53 + 2;
  if ((v2 & 0x80000) != 0) {
    goto LABEL_126;
  }
LABEL_102:
  if ((v2 & 0x100000) != 0)
  {
LABEL_135:
    uint64_t v64 = *((void *)this + 14);
    int v65 = *(unsigned __int8 *)(v64 + 23);
    char v66 = v65;
    uint64_t v67 = *(void *)(v64 + 8);
    if ((v65 & 0x80u) == 0) {
      unint64_t v68 = *(unsigned __int8 *)(v64 + 23);
    }
    else {
      unint64_t v68 = v67;
    }
    if (v68 >= 0x80)
    {
      int v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v68);
      int v65 = *(unsigned __int8 *)(v64 + 23);
      uint64_t v67 = *(void *)(v64 + 8);
      unsigned int v2 = *((_DWORD *)this + 59);
      char v66 = *(unsigned char *)(v64 + 23);
    }
    else
    {
      int v69 = 1;
    }
    if (v66 < 0) {
      int v65 = v67;
    }
    LODWORD(v4) = v4 + v69 + v65 + 2;
  }
LABEL_144:
  if ((v2 & 0x200000) != 0) {
    uint64_t v4 = (v4 + 3);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v2 & 0x400000) != 0)
  {
    v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if (v70 >= 0x80)
    {
      int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v71 = 1;
    }
    uint64_t v4 = (v4 + v71 + 2);
  }
  if ((v2 & 0x800000) != 0)
  {
    v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if (v72 >= 0x80)
    {
      int v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v73 = 1;
    }
    uint64_t v4 = (v4 + v73 + 2);
  }
LABEL_157:
  if (!HIBYTE(v2)) {
    goto LABEL_212;
  }
  if ((v2 & 0x1000000) != 0)
  {
    uint64_t v74 = *((void *)this + 15);
    int v75 = *(unsigned __int8 *)(v74 + 23);
    char v76 = v75;
    uint64_t v77 = *(void *)(v74 + 8);
    if ((v75 & 0x80u) == 0) {
      unint64_t v78 = *(unsigned __int8 *)(v74 + 23);
    }
    else {
      unint64_t v78 = v77;
    }
    if (v78 >= 0x80)
    {
      int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v78);
      int v75 = *(unsigned __int8 *)(v74 + 23);
      uint64_t v77 = *(void *)(v74 + 8);
      unsigned int v2 = *((_DWORD *)this + 59);
      char v76 = *(unsigned char *)(v74 + 23);
    }
    else
    {
      int v79 = 1;
    }
    if (v76 < 0) {
      int v75 = v77;
    }
    LODWORD(v4) = v4 + v79 + v75 + 2;
    if ((v2 & 0x2000000) == 0)
    {
LABEL_160:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_161;
      }
      goto LABEL_182;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_160;
  }
  uint64_t v80 = *((void *)this + 16);
  int v81 = *(unsigned __int8 *)(v80 + 23);
  char v82 = v81;
  uint64_t v83 = *(void *)(v80 + 8);
  if ((v81 & 0x80u) == 0) {
    unint64_t v84 = *(unsigned __int8 *)(v80 + 23);
  }
  else {
    unint64_t v84 = v83;
  }
  if (v84 >= 0x80)
  {
    int v85 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v84);
    int v81 = *(unsigned __int8 *)(v80 + 23);
    uint64_t v83 = *(void *)(v80 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v82 = *(unsigned char *)(v80 + 23);
  }
  else
  {
    int v85 = 1;
  }
  if (v82 < 0) {
    int v81 = v83;
  }
  LODWORD(v4) = v4 + v85 + v81 + 2;
  if ((v2 & 0x4000000) == 0)
  {
LABEL_161:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_162;
    }
LABEL_191:
    unint64_t v92 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
    if (v92 >= 0x80)
    {
      int v93 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v92);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v93 = 1;
    }
    LODWORD(v4) = v4 + v93 + 2;
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_199;
    }
    goto LABEL_195;
  }
LABEL_182:
  uint64_t v86 = *((void *)this + 18);
  int v87 = *(unsigned __int8 *)(v86 + 23);
  char v88 = v87;
  uint64_t v89 = *(void *)(v86 + 8);
  if ((v87 & 0x80u) == 0) {
    unint64_t v90 = *(unsigned __int8 *)(v86 + 23);
  }
  else {
    unint64_t v90 = v89;
  }
  if (v90 >= 0x80)
  {
    int v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v90);
    int v87 = *(unsigned __int8 *)(v86 + 23);
    uint64_t v89 = *(void *)(v86 + 8);
    unsigned int v2 = *((_DWORD *)this + 59);
    char v88 = *(unsigned char *)(v86 + 23);
  }
  else
  {
    int v91 = 1;
  }
  if (v88 < 0) {
    int v87 = v89;
  }
  LODWORD(v4) = v4 + v91 + v87 + 2;
  if ((v2 & 0x8000000) != 0) {
    goto LABEL_191;
  }
LABEL_162:
  if ((v2 & 0x10000000) != 0)
  {
LABEL_195:
    v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 38);
    if (v94 >= 0x80)
    {
      int v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v95 = 1;
    }
    LODWORD(v4) = v4 + v95 + 2;
  }
LABEL_199:
  if ((v2 & 0x20000000) != 0) {
    uint64_t v4 = (v4 + 3);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v2 & 0x40000000) != 0)
  {
    v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 39);
    if (v96 >= 0x80)
    {
      int v97 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v96);
      unsigned int v2 = *((_DWORD *)this + 59);
    }
    else
    {
      int v97 = 1;
    }
    uint64_t v4 = (v4 + v97 + 2);
  }
  if ((v2 & 0x80000000) != 0)
  {
    int v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 42);
    if (v98 >= 0x80) {
      int v99 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98);
    }
    else {
      int v99 = 1;
    }
    uint64_t v4 = (v4 + v99 + 2);
  }
LABEL_212:
  int v100 = *((_DWORD *)this + 60);
  if (!(_BYTE)v100) {
    goto LABEL_258;
  }
  if (v100)
  {
    LODWORD(v4) = v4
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 20))
                + 2;
    int v100 = *((_DWORD *)this + 60);
  }
  if ((v100 & 2) != 0)
  {
    unsigned int v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 43)) ^ (*((int *)this + 43) >> 31));
    if (v101 >= 0x80)
    {
      int v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
      int v100 = *((_DWORD *)this + 60);
    }
    else
    {
      int v102 = 1;
    }
    LODWORD(v4) = v4 + v102 + 2;
  }
  if ((v100 & 4) != 0) {
    uint64_t v4 = (v4 + 3);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v100 & 8) != 0)
  {
    uint64_t v103 = *((void *)this + 22);
    int v104 = *(unsigned __int8 *)(v103 + 23);
    char v105 = v104;
    uint64_t v106 = *(void *)(v103 + 8);
    if ((v104 & 0x80u) == 0) {
      unint64_t v107 = *(unsigned __int8 *)(v103 + 23);
    }
    else {
      unint64_t v107 = v106;
    }
    if (v107 >= 0x80)
    {
      int v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v107);
      int v104 = *(unsigned __int8 *)(v103 + 23);
      uint64_t v106 = *(void *)(v103 + 8);
      int v100 = *((_DWORD *)this + 60);
      char v105 = *(unsigned char *)(v103 + 23);
    }
    else
    {
      int v108 = 1;
    }
    if (v105 < 0) {
      int v104 = v106;
    }
    uint64_t v4 = (v4 + v108 + v104 + 2);
    if ((v100 & 0x10) == 0)
    {
LABEL_225:
      if ((v100 & 0x20) == 0) {
        goto LABEL_226;
      }
      goto LABEL_244;
    }
  }
  else if ((v100 & 0x10) == 0)
  {
    goto LABEL_225;
  }
  unsigned int v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 46);
  if ((v109 & 0x80000000) != 0)
  {
    int v110 = 10;
  }
  else if (v109 >= 0x80)
  {
    int v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
    int v100 = *((_DWORD *)this + 60);
  }
  else
  {
    int v110 = 1;
  }
  uint64_t v4 = (v4 + v110 + 2);
  if ((v100 & 0x20) == 0)
  {
LABEL_226:
    if ((v100 & 0x40) == 0) {
      goto LABEL_227;
    }
    goto LABEL_250;
  }
LABEL_244:
  unsigned int v111 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 47);
  if ((v111 & 0x80000000) != 0)
  {
    int v112 = 10;
  }
  else if (v111 >= 0x80)
  {
    int v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v111);
    int v100 = *((_DWORD *)this + 60);
  }
  else
  {
    int v112 = 1;
  }
  uint64_t v4 = (v4 + v112 + 2);
  if ((v100 & 0x40) == 0)
  {
LABEL_227:
    if ((v100 & 0x80) == 0) {
      goto LABEL_258;
    }
    goto LABEL_254;
  }
LABEL_250:
  char v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
  if (v113 >= 0x80)
  {
    int v114 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113) + 2;
    int v100 = *((_DWORD *)this + 60);
  }
  else
  {
    int v114 = 3;
  }
  uint64_t v4 = (v114 + v4);
  if ((v100 & 0x80) != 0)
  {
LABEL_254:
    unint64_t v115 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 50);
    if (v115 >= 0x80)
    {
      int v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v115) + 2;
      int v100 = *((_DWORD *)this + 60);
    }
    else
    {
      int v116 = 3;
    }
    uint64_t v4 = (v116 + v4);
  }
LABEL_258:
  if ((v100 & 0xFF00) == 0) {
    goto LABEL_298;
  }
  if ((v100 & 0x100) != 0)
  {
    unsigned int v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 51);
    if (v117 >= 0x80)
    {
      int v118 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117) + 2;
      int v100 = *((_DWORD *)this + 60);
    }
    else
    {
      int v118 = 3;
    }
    LODWORD(v4) = v118 + v4;
    if ((v100 & 0x200) == 0)
    {
LABEL_261:
      if ((v100 & 0x400) == 0) {
        goto LABEL_262;
      }
LABEL_272:
      v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 53);
      if (v121 >= 0x80)
      {
        int v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121) + 2;
        int v100 = *((_DWORD *)this + 60);
      }
      else
      {
        int v122 = 3;
      }
      LODWORD(v4) = v122 + v4;
      if ((v100 & 0x800) == 0) {
        goto LABEL_280;
      }
      goto LABEL_276;
    }
  }
  else if ((v100 & 0x200) == 0)
  {
    goto LABEL_261;
  }
  v119 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 52);
  if (v119 >= 0x80)
  {
    int v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v119) + 2;
    int v100 = *((_DWORD *)this + 60);
  }
  else
  {
    int v120 = 3;
  }
  LODWORD(v4) = v120 + v4;
  if ((v100 & 0x400) != 0) {
    goto LABEL_272;
  }
LABEL_262:
  if ((v100 & 0x800) != 0)
  {
LABEL_276:
    v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 54);
    if (v123 >= 0x80)
    {
      int v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123) + 2;
      int v100 = *((_DWORD *)this + 60);
    }
    else
    {
      int v124 = 3;
    }
    LODWORD(v4) = v124 + v4;
  }
LABEL_280:
  if ((v100 & 0x1000) != 0) {
    uint64_t v4 = (v4 + 3);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v100 & 0x2000) != 0)
  {
    v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 55);
    if (v125 >= 0x80)
    {
      int v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125) + 2;
      int v100 = *((_DWORD *)this + 60);
    }
    else
    {
      int v126 = 3;
    }
    uint64_t v4 = (v126 + v4);
  }
  if ((v100 & 0x4000) != 0)
  {
    uint64_t v127 = *((void *)this + 28);
    int v128 = *(unsigned __int8 *)(v127 + 23);
    char v129 = v128;
    uint64_t v130 = *(void *)(v127 + 8);
    if ((v128 & 0x80u) == 0) {
      unint64_t v131 = *(unsigned __int8 *)(v127 + 23);
    }
    else {
      unint64_t v131 = v130;
    }
    if (v131 >= 0x80)
    {
      int v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v131);
      int v128 = *(unsigned __int8 *)(v127 + 23);
      uint64_t v130 = *(void *)(v127 + 8);
      char v129 = *(unsigned char *)(v127 + 23);
    }
    else
    {
      int v132 = 1;
    }
    if (v129 < 0) {
      int v128 = v130;
    }
    uint64_t v4 = (v4 + v132 + v128 + 2);
  }
LABEL_298:
  *((_DWORD *)this + 58) = v4;
  return v4;
}

void awd::metrics::ATM_CallConnectEvent::CheckTypeAndMergeFrom(awd::metrics::ATM_CallConnectEvent *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v67);
  }
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    uint64_t v12 = *((void *)lpsrc + 1);
    *((_DWORD *)this + 59) |= 1u;
    *((void *)this + 1) = v12;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_69;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  unsigned int v13 = (const std::string *)*((void *)lpsrc + 2);
  *((_DWORD *)this + 59) |= 2u;
  unsigned int v14 = (std::string *)*((void *)this + 2);
  if (v14 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v14, v13);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_70;
  }
LABEL_69:
  char v15 = *((unsigned char *)lpsrc + 28);
  *((_DWORD *)this + 59) |= 4u;
  *((unsigned char *)this + 28) = v15;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_72;
  }
LABEL_70:
  int v16 = *((_DWORD *)lpsrc + 6);
  if ((v16 + 1) >= 8) {
    __assert_rtn("set_type", "CATM.pb.h", 10746, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  }
  *((_DWORD *)this + 59) |= 8u;
  *((_DWORD *)this + 6) = v16;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_73:
    char v18 = *((unsigned char *)lpsrc + 30);
    *((_DWORD *)this + 59) |= 0x20u;
    *((unsigned char *)this + 30) = v18;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_74;
  }
LABEL_72:
  char v17 = *((unsigned char *)lpsrc + 29);
  *((_DWORD *)this + 59) |= 0x10u;
  *((unsigned char *)this + 29) = v17;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x20) != 0) {
    goto LABEL_73;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_74:
  char v19 = *((unsigned char *)lpsrc + 31);
  *((_DWORD *)this + 59) |= 0x40u;
  *((unsigned char *)this + 31) = v19;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    char v5 = *((unsigned char *)lpsrc + 96);
    *((_DWORD *)this + 59) |= 0x80u;
    *((unsigned char *)this + 96) = v5;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_26;
  }
  if ((v4 & 0x100) != 0)
  {
    int v6 = *((_DWORD *)lpsrc + 8);
    if ((v6 - 1) >= 6 && v6 != -1) {
      __assert_rtn("set_invite_type", "CATM.pb.h", 10857, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    }
    *((_DWORD *)this + 59) |= 0x100u;
    *((_DWORD *)this + 8) = v6;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
  }
  if ((v4 & 0x200) != 0)
  {
    char v38 = (const std::string *)*((void *)lpsrc + 5);
    *((_DWORD *)this + 59) |= 0x200u;
    uint64_t v39 = (std::string *)*((void *)this + 5);
    if (v39 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v39, v38);
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x400) == 0)
    {
LABEL_20:
      if ((v4 & 0x800) == 0) {
        goto LABEL_21;
      }
      goto LABEL_107;
    }
  }
  else if ((v4 & 0x400) == 0)
  {
    goto LABEL_20;
  }
  int v40 = *((_DWORD *)lpsrc + 9);
  *((_DWORD *)this + 59) |= 0x400u;
  *((_DWORD *)this + 9) = v40;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x800) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_110;
  }
LABEL_107:
  int v41 = (const std::string *)*((void *)lpsrc + 6);
  *((_DWORD *)this + 59) |= 0x800u;
  v42 = (std::string *)*((void *)this + 6);
  if (v42 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v42, v41);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x1000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_111;
  }
LABEL_110:
  char v43 = *((unsigned char *)lpsrc + 97);
  *((_DWORD *)this + 59) |= 0x1000u;
  *((unsigned char *)this + 97) = v43;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_114;
  }
LABEL_111:
  int v44 = (const std::string *)*((void *)lpsrc + 7);
  *((_DWORD *)this + 59) |= 0x2000u;
  int v45 = (std::string *)*((void *)this + 7);
  if (v45 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v45, v44);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_114:
  uint64_t v46 = (const std::string *)*((void *)lpsrc + 8);
  *((_DWORD *)this + 59) |= 0x4000u;
  int v47 = (std::string *)*((void *)this + 8);
  if (v47 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v47, v46);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x8000) != 0)
  {
LABEL_25:
    int v7 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 59) |= 0x8000u;
    *((_DWORD *)this + 18) = v7;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_26:
  if ((v4 & 0xFF0000) == 0) {
    goto LABEL_36;
  }
  if ((v4 & 0x10000) != 0)
  {
    int v20 = *((_DWORD *)lpsrc + 19);
    *((_DWORD *)this + 59) |= 0x10000u;
    *((_DWORD *)this + 19) = v20;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x20000) == 0)
    {
LABEL_29:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_80;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_29;
  }
  int v21 = (const std::string *)*((void *)lpsrc + 10);
  *((_DWORD *)this + 59) |= 0x20000u;
  unint64_t v22 = (std::string *)*((void *)this + 10);
  if (v22 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v22, v21);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_80:
  int v23 = (const std::string *)*((void *)lpsrc + 11);
  *((_DWORD *)this + 59) |= 0x40000u;
  uint64_t v24 = (std::string *)*((void *)this + 11);
  if (v24 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v24, v23);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x80000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_86;
  }
LABEL_83:
  int v25 = (const std::string *)*((void *)lpsrc + 13);
  *((_DWORD *)this + 59) |= 0x80000u;
  char v26 = (std::string *)*((void *)this + 13);
  if (v26 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v26, v25);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_89;
  }
LABEL_86:
  uint64_t v27 = (const std::string *)*((void *)lpsrc + 14);
  *((_DWORD *)this + 59) |= 0x100000u;
  unint64_t v28 = (std::string *)*((void *)this + 14);
  if (v28 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v28, v27);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x200000) == 0)
  {
LABEL_33:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_90;
  }
LABEL_89:
  char v29 = *((unsigned char *)lpsrc + 98);
  *((_DWORD *)this + 59) |= 0x200000u;
  *((unsigned char *)this + 98) = v29;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x400000) == 0)
  {
LABEL_34:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_90:
  int v30 = *((_DWORD *)lpsrc + 25);
  *((_DWORD *)this + 59) |= 0x400000u;
  *((_DWORD *)this + 25) = v30;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x800000) != 0)
  {
LABEL_35:
    int v8 = *((_DWORD *)lpsrc + 34);
    *((_DWORD *)this + 59) |= 0x800000u;
    *((_DWORD *)this + 34) = v8;
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
  }
LABEL_36:
  if (!HIBYTE(v4)) {
    goto LABEL_45;
  }
  if ((v4 & 0x1000000) != 0)
  {
    unint64_t v56 = (const std::string *)*((void *)lpsrc + 15);
    *((_DWORD *)this + 59) |= 0x1000000u;
    int v57 = (std::string *)*((void *)this + 15);
    if (v57 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v57, v56);
    unsigned int v4 = *((_DWORD *)lpsrc + 59);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_39:
      if ((v4 & 0x4000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_134;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_39;
  }
  uint64_t v58 = (const std::string *)*((void *)lpsrc + 16);
  *((_DWORD *)this + 59) |= 0x2000000u;
  int v59 = (std::string *)*((void *)this + 16);
  if (v59 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v59, v58);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_137;
  }
LABEL_134:
  char v60 = (const std::string *)*((void *)lpsrc + 18);
  *((_DWORD *)this + 59) |= 0x4000000u;
  uint64_t v61 = (std::string *)*((void *)this + 18);
  if (v61 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v61, v60);
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_138;
  }
LABEL_137:
  int v62 = *((_DWORD *)lpsrc + 35);
  *((_DWORD *)this + 59) |= 0x8000000u;
  *((_DWORD *)this + 35) = v62;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_139;
  }
LABEL_138:
  int v63 = *((_DWORD *)lpsrc + 38);
  *((_DWORD *)this + 59) |= 0x10000000u;
  *((_DWORD *)this + 38) = v63;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_44;
    }
LABEL_140:
    int v65 = *((_DWORD *)lpsrc + 39);
    *((_DWORD *)this + 59) |= 0x40000000u;
    *((_DWORD *)this + 39) = v65;
    if ((*((_DWORD *)lpsrc + 59) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_141;
  }
LABEL_139:
  char v64 = *((unsigned char *)lpsrc + 99);
  *((_DWORD *)this + 59) |= 0x20000000u;
  *((unsigned char *)this + 99) = v64;
  unsigned int v4 = *((_DWORD *)lpsrc + 59);
  if ((v4 & 0x40000000) != 0) {
    goto LABEL_140;
  }
LABEL_44:
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_45;
  }
LABEL_141:
  int v66 = *((_DWORD *)lpsrc + 42);
  *((_DWORD *)this + 59) |= 0x80000000;
  *((_DWORD *)this + 42) = v66;
LABEL_45:
  int v9 = *((_DWORD *)lpsrc + 60);
  if (!(_BYTE)v9) {
    goto LABEL_56;
  }
  if (v9)
  {
    uint64_t v31 = *((void *)lpsrc + 20);
    *((_DWORD *)this + 60) |= 1u;
    *((void *)this + 20) = v31;
    int v9 = *((_DWORD *)lpsrc + 60);
    if ((v9 & 2) == 0)
    {
LABEL_48:
      if ((v9 & 4) == 0) {
        goto LABEL_49;
      }
      goto LABEL_94;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_48;
  }
  int v32 = *((_DWORD *)lpsrc + 43);
  *((_DWORD *)this + 60) |= 2u;
  *((_DWORD *)this + 43) = v32;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 4) == 0)
  {
LABEL_49:
    if ((v9 & 8) == 0) {
      goto LABEL_50;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v33 = *((unsigned char *)lpsrc + 196);
  *((_DWORD *)this + 60) |= 4u;
  *((unsigned char *)this + 196) = v33;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 8) == 0)
  {
LABEL_50:
    if ((v9 & 0x10) == 0) {
      goto LABEL_51;
    }
    goto LABEL_98;
  }
LABEL_95:
  unint64_t v34 = (const std::string *)*((void *)lpsrc + 22);
  *((_DWORD *)this + 60) |= 8u;
  int v35 = (std::string *)*((void *)this + 22);
  if (v35 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v35, v34);
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x10) == 0)
  {
LABEL_51:
    if ((v9 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_100;
  }
LABEL_98:
  unsigned int v36 = *((_DWORD *)lpsrc + 46);
  if (v36 >= 3) {
    __assert_rtn("set_amr_format", "CATM.pb.h", 12050, "::awd::metrics::enum_codec_format_IsValid(value)");
  }
  *((_DWORD *)this + 60) |= 0x10u;
  *((_DWORD *)this + 46) = v36;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x20) == 0)
  {
LABEL_52:
    if ((v9 & 0x40) == 0) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
LABEL_100:
  unsigned int v37 = *((_DWORD *)lpsrc + 47);
  if (v37 >= 6) {
    __assert_rtn("set_codec", "CATM.pb.h", 12073, "::awd::metrics::enum_codec_type_IsValid(value)");
  }
  *((_DWORD *)this + 60) |= 0x20u;
  *((_DWORD *)this + 47) = v37;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x40) == 0) {
    goto LABEL_54;
  }
LABEL_53:
  int v10 = *((_DWORD *)lpsrc + 48);
  *((_DWORD *)this + 60) |= 0x40u;
  *((_DWORD *)this + 48) = v10;
  int v9 = *((_DWORD *)lpsrc + 60);
LABEL_54:
  if ((v9 & 0x80) != 0)
  {
    int v11 = *((_DWORD *)lpsrc + 50);
    *((_DWORD *)this + 60) |= 0x80u;
    *((_DWORD *)this + 50) = v11;
    int v9 = *((_DWORD *)lpsrc + 60);
  }
LABEL_56:
  if ((v9 & 0xFF00) == 0) {
    return;
  }
  if ((v9 & 0x100) != 0)
  {
    int v48 = *((_DWORD *)lpsrc + 51);
    *((_DWORD *)this + 60) |= 0x100u;
    *((_DWORD *)this + 51) = v48;
    int v9 = *((_DWORD *)lpsrc + 60);
    if ((v9 & 0x200) == 0)
    {
LABEL_59:
      if ((v9 & 0x400) == 0) {
        goto LABEL_60;
      }
      goto LABEL_120;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_59;
  }
  int v49 = *((_DWORD *)lpsrc + 52);
  *((_DWORD *)this + 60) |= 0x200u;
  *((_DWORD *)this + 52) = v49;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x400) == 0)
  {
LABEL_60:
    if ((v9 & 0x800) == 0) {
      goto LABEL_61;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v50 = *((_DWORD *)lpsrc + 53);
  *((_DWORD *)this + 60) |= 0x400u;
  *((_DWORD *)this + 53) = v50;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x800) == 0)
  {
LABEL_61:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_122;
  }
LABEL_121:
  int v51 = *((_DWORD *)lpsrc + 54);
  *((_DWORD *)this + 60) |= 0x800u;
  *((_DWORD *)this + 54) = v51;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x1000) == 0)
  {
LABEL_62:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_63;
    }
LABEL_123:
    int v53 = *((_DWORD *)lpsrc + 55);
    *((_DWORD *)this + 60) |= 0x2000u;
    *((_DWORD *)this + 55) = v53;
    if ((*((_DWORD *)lpsrc + 60) & 0x4000) == 0) {
      return;
    }
    goto LABEL_124;
  }
LABEL_122:
  char v52 = *((unsigned char *)lpsrc + 197);
  *((_DWORD *)this + 60) |= 0x1000u;
  *((unsigned char *)this + 197) = v52;
  int v9 = *((_DWORD *)lpsrc + 60);
  if ((v9 & 0x2000) != 0) {
    goto LABEL_123;
  }
LABEL_63:
  if ((v9 & 0x4000) == 0) {
    return;
  }
LABEL_124:
  char v54 = (const std::string *)*((void *)lpsrc + 28);
  *((_DWORD *)this + 60) |= 0x4000u;
  uint64_t v55 = (std::string *)*((void *)this + 28);
  if (v55 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v55, v54);
}

void sub_1C526F280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallConnectEvent::IsInitialized(awd::metrics::ATM_CallConnectEvent *this)
{
  return 1;
}

void *awd::metrics::ATM_CallConnectEvent::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallConnectEvent");
}

void awd::metrics::ATM_CallEndEvent_myreason::MergeFrom(awd::metrics::ATM_CallEndEvent_myreason *this, const awd::metrics::ATM_CallEndEvent_myreason *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 48);
  if (!(_BYTE)v4) {
    return;
  }
  char v5 = (std::string *)MEMORY[0x1E4FBA920];
  if (*((unsigned char *)a2 + 48))
  {
    int v6 = (const std::string *)*((void *)a2 + 1);
    *((_DWORD *)this + 12) |= 1u;
    int v7 = (std::string *)*((void *)this + 1);
    if (v7 == v5) {
      operator new();
    }
    std::string::operator=(v7, v6);
    int v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_14:
      int v9 = (const std::string *)*((void *)a2 + 2);
      *((_DWORD *)this + 12) |= 4u;
      int v10 = (std::string *)*((void *)this + 2);
      if (v10 == v5) {
        operator new();
      }
      std::string::operator=(v10, v9);
      int v4 = *((_DWORD *)a2 + 12);
      if ((v4 & 8) == 0)
      {
LABEL_8:
        if ((v4 & 0x10) == 0) {
          return;
        }
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  else if ((*((unsigned char *)a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *((_DWORD *)a2 + 10);
  *((_DWORD *)this + 12) |= 2u;
  *((_DWORD *)this + 10) = v8;
  int v4 = *((_DWORD *)a2 + 12);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    goto LABEL_8;
  }
LABEL_17:
  int v11 = (const std::string *)*((void *)a2 + 3);
  *((_DWORD *)this + 12) |= 8u;
  uint64_t v12 = (std::string *)*((void *)this + 3);
  if (v12 == v5) {
    operator new();
  }
  std::string::operator=(v12, v11);
  if ((*((_DWORD *)a2 + 12) & 0x10) != 0)
  {
LABEL_20:
    unsigned int v13 = (const std::string *)*((void *)a2 + 4);
    *((_DWORD *)this + 12) |= 0x10u;
    unsigned int v14 = (std::string *)*((void *)this + 4);
    if (v14 == v5) {
      operator new();
    }
    std::string::operator=(v14, v13);
  }
}

void sub_1C526F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(void *this)
{
  unsigned int v1 = this;
  uint64_t v2 = this[1];
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = v1[2];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (void *)MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = v1[3];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    this = (void *)MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = v1[4];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::ATM_CallEndEvent_myreason::~ATM_CallEndEvent_myreason(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  *(void *)this = &unk_1F20BA1E8;
  awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA1E8;
  awd::metrics::ATM_CallEndEvent_myreason::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_CallEndEvent_myreason::New(awd::metrics::ATM_CallEndEvent_myreason *this)
{
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 48))
  {
    uint64_t v1 = MEMORY[0x1E4FBA920];
    if (*(unsigned char *)(this + 48))
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 40) = 0;
    if ((*(unsigned char *)(this + 48) & 4) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3 != v1)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 48) & 8) != 0)
    {
      uint64_t v4 = *(void *)(this + 24);
      if (v4 != v1)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(this + 48) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(this + 32);
      if (v5 != v1)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::MergePartialFromCodedStream(awd::metrics::ATM_CallEndEvent_myreason *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 40);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (2)
  {
    int v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 < *((void *)a2 + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
LABEL_7:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v8 = TagFallback & 7;
          if (v8 != 2) {
            goto LABEL_26;
          }
          *((_DWORD *)this + 12) |= 1u;
          if (*((void *)this + 1) == v5) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (result)
          {
            int v11 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v10 = *((void *)a2 + 2);
            if ((unint64_t)v11 < v10 && *v11 == 16)
            {
              uint64_t v12 = v11 + 1;
              *((void *)a2 + 1) = v12;
              goto LABEL_18;
            }
            continue;
          }
          return result;
        case 2u:
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_26;
          }
          uint64_t v12 = (char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
LABEL_18:
          if ((unint64_t)v12 >= v10 || *v12 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
            if (!result) {
              return result;
            }
            unsigned int v13 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v10 = *((void *)a2 + 2);
          }
          else
          {
            *uint64_t v4 = *v12;
            unsigned int v13 = v12 + 1;
            *((void *)a2 + 1) = v13;
          }
          int v14 = *((_DWORD *)this + 12) | 2;
          *((_DWORD *)this + 12) = v14;
          if ((unint64_t)v13 < v10 && *v13 == 26)
          {
            *((void *)a2 + 1) = v13 + 1;
            goto LABEL_34;
          }
          continue;
        case 3u:
          int v8 = TagFallback & 7;
          if (v8 != 2) {
            goto LABEL_26;
          }
          int v14 = *((_DWORD *)this + 12);
LABEL_34:
          *((_DWORD *)this + 12) = v14 | 4;
          if (*((void *)this + 2) == v5) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          char v15 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v15 >= *((void *)a2 + 2) || *v15 != 34) {
            continue;
          }
          *((void *)a2 + 1) = v15 + 1;
LABEL_40:
          *((_DWORD *)this + 12) |= 8u;
          if (*((void *)this + 3) == v5) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          int v16 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 != 42) {
            continue;
          }
          *((void *)a2 + 1) = v16 + 1;
LABEL_46:
          *((_DWORD *)this + 12) |= 0x10u;
          if (*((void *)this + 4) == v5) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          if (*((void *)a2 + 1) != *((void *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        case 4u:
          int v8 = TagFallback & 7;
          if (v8 == 2) {
            goto LABEL_40;
          }
          goto LABEL_26;
        case 5u:
          int v8 = TagFallback & 7;
          if (v8 != 2) {
            goto LABEL_26;
          }
          goto LABEL_46;
        default:
          int v8 = TagFallback & 7;
LABEL_26:
          if (v8 == 4) {
            return 1;
          }
          if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
          return 0;
          }
      }
    }
    break;
  }
  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
  *((_DWORD *)a2 + 8) = TagFallback;
  if (TagFallback) {
    goto LABEL_7;
  }
  return 1;
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 48);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 48) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::ByteSize(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 48);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_50;
  }
  if ((*((unsigned char *)this + 48) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 48) & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v9 = v10 + 1;
    int v2 = *((_DWORD *)this + 12);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 2;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  uint64_t v3 = (v9 + v5);
  if ((v2 & 2) != 0)
  {
LABEL_15:
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
      int v2 = *((_DWORD *)this + 12);
    }
    else
    {
      int v12 = 2;
    }
    uint64_t v3 = (v12 + v3);
  }
LABEL_19:
  if ((v2 & 4) != 0)
  {
    uint64_t v13 = *((void *)this + 2);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v2 = *((_DWORD *)this + 12);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_21:
      if ((v2 & 0x10) == 0) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v19 = *((void *)this + 3);
  int v20 = *(unsigned __int8 *)(v19 + 23);
  char v21 = v20;
  uint64_t v22 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v22 = *(void *)(v19 + 8);
    int v2 = *((_DWORD *)this + 12);
    char v21 = *(unsigned char *)(v19 + 23);
  }
  else
  {
    int v24 = 1;
  }
  if (v21 < 0) {
    int v20 = v22;
  }
  uint64_t v3 = (v3 + v24 + v20 + 1);
  if ((v2 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v25 = *((void *)this + 4);
    int v26 = *(unsigned __int8 *)(v25 + 23);
    char v27 = v26;
    uint64_t v28 = *(void *)(v25 + 8);
    if ((v26 & 0x80u) == 0) {
      unint64_t v29 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29 >= 0x80)
    {
      int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29);
      int v26 = *(unsigned __int8 *)(v25 + 23);
      uint64_t v28 = *(void *)(v25 + 8);
      char v27 = *(unsigned char *)(v25 + 23);
    }
    else
    {
      int v30 = 1;
    }
    if (v27 < 0) {
      int v26 = v28;
    }
    uint64_t v3 = (v3 + v30 + v26 + 1);
  }
LABEL_50:
  *((_DWORD *)this + 11) = v3;
  return v3;
}

void awd::metrics::ATM_CallEndEvent_myreason::CheckTypeAndMergeFrom(awd::metrics::ATM_CallEndEvent_myreason *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  awd::metrics::ATM_CallEndEvent_myreason::MergeFrom(this, lpsrc);
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::IsInitialized(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  return 1;
}

void *awd::metrics::ATM_CallEndEvent_myreason::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent.myreason");
}

void awd::metrics::ATM_CallEndEvent_handover::MergeFrom(awd::metrics::ATM_CallEndEvent_handover *this, const awd::metrics::ATM_CallEndEvent_handover *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      char v6 = *((unsigned char *)a2 + 12);
      *((_DWORD *)this + 5) |= 2u;
      *((unsigned char *)this + 12) = v6;
    }
  }
}

void sub_1C526FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void awd::metrics::ATM_CallEndEvent_handover::~ATM_CallEndEvent_handover(awd::metrics::ATM_CallEndEvent_handover *this)
{
  *(void *)this = &unk_1F20BA260;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA260;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_CallEndEvent_handover::New(awd::metrics::ATM_CallEndEvent_handover *this)
{
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20))
  {
    *(_DWORD *)(this + 8) = 0;
    *(unsigned char *)(this + 12) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::MergePartialFromCodedStream(awd::metrics::ATM_CallEndEvent_handover *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    while (1)
    {
      int v4 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v4 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v16 = 0;
      int v9 = (char *)*((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      if ((unint64_t)v9 >= v7 || *v9 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
        if (!result) {
          return result;
        }
        unsigned int v10 = v16;
        int v11 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int v10 = *v9;
        int v11 = v9 + 1;
        *((void *)a2 + 1) = v11;
      }
      *((_DWORD *)this + 2) = v10;
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v11 < v7 && *v11 == 16)
      {
        unint64_t v8 = v11 + 1;
        *((void *)a2 + 1) = v8;
LABEL_23:
        unsigned int v15 = 0;
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
          if (!result) {
            return result;
          }
          unsigned int v12 = v15;
          uint64_t v13 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v12 = *v8;
          uint64_t v13 = (unsigned __int8 *)(v8 + 1);
          *((void *)a2 + 1) = v13;
        }
        *((unsigned char *)this + 12) = v12 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if (v13 == (unsigned __int8 *)v7 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v6 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unint64_t v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_23;
      }
    }
    else
    {
      int v6 = TagFallback & 7;
    }
LABEL_15:
    if (v6 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::ByteSize(awd::metrics::ATM_CallEndEvent_handover *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 20);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 5);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      uint64_t result = v3 + 2;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void awd::metrics::ATM_CallEndEvent_handover::CheckTypeAndMergeFrom(awd::metrics::ATM_CallEndEvent_handover *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  awd::metrics::ATM_CallEndEvent_handover::MergeFrom(this, lpsrc);
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::IsInitialized(awd::metrics::ATM_CallEndEvent_handover *this)
{
  return 1;
}

void *awd::metrics::ATM_CallEndEvent_handover::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent.handover");
}

double awd::metrics::ATM_CallEndEvent::SharedCtor(awd::metrics::ATM_CallEndEvent *this)
{
  *((_DWORD *)this + 167) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v1;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *((void *)this + 4) = v1;
  *((void *)this + 5) = 0xFFFFFFFFLL;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = v1;
  *((void *)this + 8) = v1;
  *((void *)this + 9) = v1;
  *((void *)this + 10) = v1;
  *((void *)this + 11) = v1;
  *((void *)this + 13) = v1;
  *((void *)this + 14) = v1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = v1;
  *((void *)this + 19) = v1;
  *((void *)this + 20) = v1;
  *((void *)this + 18) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 168) = xmmword_1C56CA140;
  *((void *)this + 25) = v1;
  *((void *)this + 24) = 0;
  *((void *)this + 26) = 0x100000000;
  *((_DWORD *)this + 72) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 29) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 32) = v1;
  *((void *)this + 50) = 0;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  *(_OWORD *)((char *)this + 382) = 0u;
  *((void *)this + 51) = v1;
  *((void *)this + 52) = 0;
  *((_WORD *)this + 199) = 0;
  *((void *)this + 69) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 158) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(void *)((char *)this + 636) = 1;
  *((void *)this + 81) = v1;
  *((void *)this + 82) = 0;
  *((_DWORD *)this + 161) = 0;
  *((unsigned char *)this + 664) = 0;
  *((_DWORD *)this + 172) = 0;
  *((_OWORD *)this + 42) = 0u;
  return result;
}

void awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent(awd::metrics::ATM_CallEndEvent *this)
{
  *(void *)this = &unk_1F20BA2D8;
  awd::metrics::ATM_CallEndEvent::SharedDtor(this);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>((uint64_t *)this + 70);
  uint64_t v2 = *((void *)this + 67);
  if (v2) {
    MEMORY[0x1C878E300](v2, 0x1000C8077774924);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>((uint64_t *)this + 64);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 106);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 66);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent(this);
  JUMPOUT(0x1C878E320);
}

void *awd::metrics::ATM_CallEndEvent::SharedDtor(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (void *)MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    this = (void *)MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    this = (void *)MEMORY[0x1C878E320](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[8];
  if (v11 != v3 && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x1C878E320](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = v1[9];
  if (v12 != v3 && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    this = (void *)MEMORY[0x1C878E320](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = v1[10];
  if (v13 != v3 && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    this = (void *)MEMORY[0x1C878E320](v13, 0x1012C40EC159624);
  }
  uint64_t v14 = v1[11];
  if (v14 != v3 && v14)
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    this = (void *)MEMORY[0x1C878E320](v14, 0x1012C40EC159624);
  }
  uint64_t v15 = v1[13];
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    this = (void *)MEMORY[0x1C878E320](v15, 0x1012C40EC159624);
  }
  uint64_t v16 = v1[14];
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    this = (void *)MEMORY[0x1C878E320](v16, 0x1012C40EC159624);
  }
  uint64_t v17 = v1[17];
  if (v17 != v3 && v17)
  {
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    this = (void *)MEMORY[0x1C878E320](v17, 0x1012C40EC159624);
  }
  uint64_t v18 = v1[19];
  if (v18 != v3 && v18)
  {
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    this = (void *)MEMORY[0x1C878E320](v18, 0x1012C40EC159624);
  }
  uint64_t v19 = v1[20];
  if (v19 != v3 && v19)
  {
    if (*(char *)(v19 + 23) < 0) {
      operator delete(*(void **)v19);
    }
    this = (void *)MEMORY[0x1C878E320](v19, 0x1012C40EC159624);
  }
  uint64_t v20 = v1[25];
  if (v20 != v3 && v20)
  {
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    this = (void *)MEMORY[0x1C878E320](v20, 0x1012C40EC159624);
  }
  uint64_t v21 = v1[32];
  if (v21 != v3 && v21)
  {
    if (*(char *)(v21 + 23) < 0) {
      operator delete(*(void **)v21);
    }
    this = (void *)MEMORY[0x1C878E320](v21, 0x1012C40EC159624);
  }
  uint64_t v22 = v1[51];
  if (v22 != v3 && v22)
  {
    if (*(char *)(v22 + 23) < 0) {
      operator delete(*(void **)v22);
    }
    this = (void *)MEMORY[0x1C878E320](v22, 0x1012C40EC159624);
  }
  uint64_t v23 = v1[81];
  if (v23 != v3 && v23)
  {
    if (*(char *)(v23 + 23) < 0) {
      operator delete(*(void **)v23);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::ATM_CallEndEvent::New(awd::metrics::ATM_CallEndEvent *this)
{
}

uint64_t awd::metrics::ATM_CallEndEvent::Clear(awd::metrics::ATM_CallEndEvent *this)
{
  unsigned int v2 = *((_DWORD *)this + 168);
  if ((_BYTE)v2)
  {
    *((void *)this + 1) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *((void *)this + 2);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *((void *)this + 3) = 0xFFFFFFFFLL;
    *((unsigned char *)this + 100) = 0;
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  int v4 = (void *)((char *)this + 672);
  if ((v2 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 10) = -1;
    if ((v2 & 0x200) != 0)
    {
      uint64_t v5 = *((void *)this + 4);
      if (v5 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 11) = 0;
    if ((*((unsigned char *)this + 673) & 8) != 0)
    {
      uint64_t v6 = *((void *)this + 6);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    *((unsigned char *)this + 101) = 0;
    if ((*((unsigned char *)this + 673) & 0x20) != 0)
    {
      uint64_t v7 = *((void *)this + 7);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 673) & 0x40) != 0)
    {
      uint64_t v8 = *((void *)this + 8);
      if (v8 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 24) = 0;
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      uint64_t v9 = *((void *)this + 9);
      if (v9 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(unsigned char **)uint64_t v9 = 0;
          *(void *)(v9 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v9 = 0;
          *(unsigned char *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 674) & 2) != 0)
    {
      uint64_t v10 = *((void *)this + 10);
      if (v10 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 674) & 4) != 0)
    {
      uint64_t v11 = *((void *)this + 11);
      if (v11 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 674) & 8) != 0)
    {
      uint64_t v12 = *((void *)this + 13);
      if (v12 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 674) & 0x10) != 0)
    {
      uint64_t v13 = *((void *)this + 14);
      if (v13 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(unsigned char **)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v13 = 0;
          *(unsigned char *)(v13 + 23) = 0;
        }
      }
    }
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  if (HIBYTE(v2))
  {
    *((unsigned char *)this + 102) = 0;
    *((_DWORD *)this + 33) = 0;
    *((_DWORD *)this + 36) = 0;
    if ((v2 & 0x8000000) != 0)
    {
      uint64_t v14 = *((void *)this + 17);
      if (v14 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(unsigned char **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 675) & 0x10) != 0)
    {
      uint64_t v15 = *((void *)this + 19);
      if (v15 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(unsigned char **)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v15 = 0;
          *(unsigned char *)(v15 + 23) = 0;
        }
      }
    }
    if ((*((unsigned char *)this + 675) & 0x20) != 0)
    {
      uint64_t v16 = *((void *)this + 20);
      if (v16 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(unsigned char **)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v16 = 0;
          *(unsigned char *)(v16 + 23) = 0;
        }
      }
    }
    *((_DWORD *)this + 37) = 0;
    *((_DWORD *)this + 42) = 0;
  }
  char v17 = *((unsigned char *)this + 676);
  if (v17)
  {
    *((unsigned char *)this + 103) = 0;
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    *((void *)this + 23) = 0;
    *((_DWORD *)this + 45) = -1;
    *((_DWORD *)this + 48) = 0;
    *((unsigned char *)this + 236) = 0;
    if (v17 < 0)
    {
      uint64_t v18 = *((void *)this + 25);
      if (v18 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v18 + 23) < 0)
        {
          **(unsigned char **)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v18 = 0;
          *(unsigned char *)(v18 + 23) = 0;
        }
      }
    }
  }
  unsigned int v19 = *((_DWORD *)this + 169);
  if ((v19 & 0xFF00) != 0)
  {
    *((unsigned char *)this + 237) = 0;
    *((_DWORD *)this + 49) = 0;
    *((void *)this + 26) = 0x100000000;
    *((void *)this + 27) = 0;
    *((void *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
  }
  if ((v19 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 72) = 0;
    *((void *)this + 30) = 0;
    *((void *)this + 31) = 0;
    if ((v19 & 0x200000) != 0)
    {
      uint64_t v20 = *((void *)this + 32);
      if (v20 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v20 + 23) < 0)
        {
          **(unsigned char **)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v20 = 0;
          *(unsigned char *)(v20 + 23) = 0;
        }
      }
    }
    *((unsigned char *)this + 238) = 0;
    unsigned int v19 = *((_DWORD *)this + 169);
  }
  if (HIBYTE(v19))
  {
    *((unsigned char *)this + 239) = 0;
    *((unsigned char *)this + 396) = 0;
    *(void *)((char *)this + 300) = 0;
    *(void *)((char *)this + 308) = 0;
    *(void *)((char *)this + 292) = 0;
  }
  int v21 = *((_DWORD *)this + 170);
  if ((_BYTE)v21)
  {
    *(_OWORD *)((char *)this + 316) = 0u;
    *(_OWORD *)((char *)this + 332) = 0u;
  }
  if ((v21 & 0xFF00) != 0)
  {
    *(_OWORD *)((char *)this + 348) = 0u;
    *(_OWORD *)((char *)this + 364) = 0u;
  }
  if ((v21 & 0xFF0000) != 0)
  {
    *((unsigned char *)this + 397) = 0;
    *((void *)this + 50) = 0;
    *(void *)((char *)this + 388) = 0;
    *(void *)((char *)this + 380) = 0;
    if ((v21 & 0x800000) != 0)
    {
      uint64_t v22 = *((void *)this + 51);
      if (v22 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v22 + 23) < 0)
        {
          **(unsigned char **)uint64_t v22 = 0;
          *(void *)(v22 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v22 = 0;
          *(unsigned char *)(v22 + 23) = 0;
        }
      }
    }
  }
  if (*((unsigned char *)this + 683))
  {
    *((void *)this + 52) = 0;
    *((unsigned char *)this + 398) = 0;
    *((void *)this + 57) = 0;
    *((void *)this + 58) = 0;
    *((void *)this + 56) = 0;
  }
  unsigned int v23 = *((_DWORD *)this + 171);
  if ((_BYTE)v23)
  {
    *((unsigned char *)this + 399) = 0;
    *((_DWORD *)this + 126) = 0;
    *(_OWORD *)((char *)this + 472) = 0u;
    *(_OWORD *)((char *)this + 488) = 0u;
  }
  if ((v23 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 127) = 0;
    *((unsigned char *)this + 620) = 0;
    *((void *)this + 69) = 0;
    *((_DWORD *)this + 146) = 0;
  }
  if ((v23 & 0xFF0000) != 0)
  {
    *(_OWORD *)((char *)this + 588) = 0u;
    *(_OWORD *)((char *)this + 604) = 0u;
  }
  if (HIBYTE(v23))
  {
    *((unsigned char *)this + 644) = 0;
    *(void *)((char *)this + 621) = 0;
    *(void *)((char *)this + 628) = 0;
    *((_DWORD *)this + 159) = 1;
  }
  char v24 = *((unsigned char *)this + 688);
  if (v24)
  {
    *((unsigned char *)this + 645) = 0;
    *((_DWORD *)this + 160) = 0;
    *((_DWORD *)this + 164) = 0;
    if ((v24 & 8) != 0)
    {
      uint64_t v25 = *((void *)this + 81);
      if (v25 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v25 + 23) < 0)
        {
          **(unsigned char **)uint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v25 = 0;
          *(unsigned char *)(v25 + 23) = 0;
        }
      }
    }
    *((_WORD *)this + 323) = 0;
    *((_DWORD *)this + 165) = 0;
    *((unsigned char *)this + 664) = 0;
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 264);
  uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 424);
  if (*((int *)this + 130) >= 1)
  {
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(void *)(*((void *)this + 64) + 8 * v27);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28);
      ++v27;
    }
    while (v27 < *((int *)this + 130));
  }
  *((_DWORD *)this + 130) = 0;
  *((_DWORD *)this + 136) = 0;
  if (*((int *)this + 142) >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      uint64_t v30 = *(void *)(*((void *)this + 70) + 8 * v29);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
      ++v29;
    }
    while (v29 < *((int *)this + 142));
  }
  *((_DWORD *)this + 142) = 0;
  *int v4 = 0;
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent::MergePartialFromCodedStream(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v3 = this;
  int v4 = (unint64_t *)((char *)a2 + 8);
  uint64_t v5 = (unint64_t *)((char *)a2 + 16);
  uint64_t v6 = this + 536;
  uint64_t v7 = (unint64_t *)(this + 8);
  uint64_t v8 = (unsigned int *)(this + 44);
  uint64_t v9 = (unsigned int *)(this + 96);
  uint64_t v10 = (unsigned int *)(this + 132);
  v481 = (unsigned int *)(this + 144);
  v487 = (unsigned int *)(this + 148);
  v485 = (unsigned int *)(this + 168);
  v478 = (unsigned int *)(this + 172);
  v474 = (unint64_t *)(this + 184);
  v475 = (unsigned int *)(this + 176);
  v469 = (unsigned int *)(this + 224);
  v470 = (unint64_t *)(this + 216);
  v467 = (unsigned int *)(this + 244);
  v468 = (unsigned int *)(this + 240);
  v466 = (unsigned int *)(this + 288);
  v412 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 264);
  v482 = (unsigned int *)(this + 228);
  v479 = (unsigned int *)(this + 208);
  v473 = (unsigned int *)(this + 248);
  v472 = (unsigned int *)(this + 252);
  v471 = (unsigned int *)(this + 120);
  v464 = (unsigned int *)(this + 128);
  v465 = (unsigned int *)(this + 124);
  v462 = (unsigned int *)(this + 296);
  v463 = (unsigned int *)(this + 292);
  v460 = (unsigned int *)(this + 304);
  v461 = (unsigned int *)(this + 300);
  v458 = (unsigned int *)(this + 312);
  v459 = (unsigned int *)(this + 308);
  v456 = (unsigned int *)(this + 320);
  v457 = (unsigned int *)(this + 316);
  v454 = (unsigned int *)(this + 328);
  v455 = (unsigned int *)(this + 324);
  v452 = (unsigned int *)(this + 336);
  v453 = (unsigned int *)(this + 332);
  v450 = (unsigned int *)(this + 344);
  v451 = (unsigned int *)(this + 340);
  v448 = (unsigned int *)(this + 352);
  v449 = (unsigned int *)(this + 348);
  v446 = (unsigned int *)(this + 360);
  v447 = (unsigned int *)(this + 356);
  v444 = (unsigned int *)(this + 368);
  v445 = (unsigned int *)(this + 364);
  v442 = (unsigned int *)(this + 376);
  v443 = (unsigned int *)(this + 372);
  v440 = (unsigned int *)(this + 384);
  v441 = (unsigned int *)(this + 380);
  v438 = (unsigned int *)(this + 392);
  v439 = (unsigned int *)(this + 388);
  v436 = (unsigned int *)(this + 404);
  v437 = (unsigned int *)(this + 400);
  v411 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 424);
  v415 = (unsigned int *)(this + 456);
  v417 = (unint64_t *)(this + 448);
  v419 = (unint64_t *)(this + 464);
  v421 = (unsigned int *)(this + 460);
  v423 = (unsigned int *)(this + 480);
  v425 = (unint64_t *)(this + 472);
  v434 = (unsigned int *)(this + 484);
  v435 = (unint64_t *)(this + 488);
  v432 = (unsigned int *)(this + 500);
  v433 = (unsigned int *)(this + 496);
  v430 = (unsigned int *)(this + 508);
  v431 = (unsigned int *)(this + 504);
  v409 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 512);
  v484 = (unsigned int *)(this + 552);
  v480 = (unsigned int *)(this + 556);
  v477 = (unsigned int *)(this + 584);
  v410 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 560);
  v413 = (unsigned int *)(this + 588);
  v414 = (unsigned int *)(this + 592);
  v416 = (unsigned int *)(this + 596);
  v418 = (unsigned int *)(this + 600);
  v420 = (unsigned int *)(this + 604);
  v422 = (unsigned int *)(this + 608);
  v424 = (unsigned int *)(this + 612);
  v428 = (unsigned int *)(this + 624);
  v429 = (unsigned int *)(this + 616);
  v426 = (unsigned int *)(this + 632);
  v427 = (unsigned int *)(this + 628);
  v486 = (unsigned int *)(this + 640);
  v476 = (unsigned int *)(this + 656);
  v483 = (unsigned int *)(this + 660);
  uint64_t v11 = MEMORY[0x1E4FBA920];
  while (1)
  {
    while (1)
    {
LABEL_2:
      uint64_t v12 = (char *)*v4;
      if (*v4 >= *v5 || *v12 < 0)
      {
        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)this;
        *((_DWORD *)a2 + 8) = this;
        if (!this) {
          return 1;
        }
      }
      else
      {
        uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v12;
        *((_DWORD *)a2 + 8) = v13;
        *((void *)a2 + 1) = v12 + 1;
        if (!v13) {
          return 1;
        }
      }
      unsigned int v14 = v13 >> 3;
      if (v13 >> 3 <= 0x22D) {
        break;
      }
      if (v13 >> 3 > 0x258)
      {
        switch(v14)
        {
          case 0x259u:
            int v15 = v13 & 7;
            if ((v13 & 7) == 0)
            {
              v179 = (unsigned __int8 *)*v4;
              unint64_t v20 = *v5;
              goto LABEL_392;
            }
            break;
          case 0x25Au:
            int v15 = v13 & 7;
            if ((v13 & 7) == 0)
            {
              v180 = (unsigned __int8 *)*v4;
              unint64_t v20 = *v5;
              goto LABEL_441;
            }
            break;
          case 0x25Bu:
            int v15 = v13 & 7;
            if ((v13 & 7) == 0)
            {
              int v21 = (char *)*v4;
              unint64_t v20 = *v5;
              goto LABEL_488;
            }
            break;
          default:
LABEL_361:
            int v15 = v13 & 7;
            break;
        }
LABEL_362:
        if (v15 == 4) {
          return 1;
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, v13);
        if ((this & 1) == 0) {
          return 0;
        }
      }
      else
      {
        switch(v14)
        {
          case 0x22Eu:
            int v15 = v13 & 7;
            if ((v13 & 7) != 0) {
              goto LABEL_362;
            }
            v174 = (unsigned __int8 *)*v4;
            unint64_t v168 = *v5;
LABEL_502:
            if ((unint64_t)v174 >= v168 || (char)*v174 < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v476);
              if (!this) {
                return this;
              }
              unint64_t v168 = *v5;
              v210 = (unsigned __int8 *)*v4;
            }
            else
            {
              unsigned int *v476 = *v174;
              v210 = v174 + 1;
              *int v4 = (unint64_t)v210;
            }
            int v175 = *(_DWORD *)(v3 + 688) | 4;
            *(_DWORD *)(v3 + 688) = v175;
            if ((int)v168 - (int)v210 >= 2 && *v210 == 250 && v210[1] == 34)
            {
              *int v4 = (unint64_t)(v210 + 2);
              goto LABEL_347;
            }
            break;
          case 0x22Fu:
            int v15 = v13 & 7;
            if (v15 != 2) {
              goto LABEL_362;
            }
            int v175 = *(_DWORD *)(v3 + 688);
LABEL_347:
            *(_DWORD *)(v3 + 688) = v175 | 8;
            if (*(void *)(v3 + 648) == v11) {
              operator new();
            }
            this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!this) {
              return this;
            }
            unint64_t v20 = *v5;
            v176 = (unsigned __int8 *)*v4;
            if ((int)(*v5 - *v4) >= 2 && *v176 == 128 && v176[1] == 35)
            {
              unsigned int v19 = v176 + 2;
              *int v4 = (unint64_t)v19;
LABEL_354:
              v488[0] = 0;
              if ((unint64_t)v19 >= v20 || (char)*v19 < 0)
              {
                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                if (!this) {
                  return this;
                }
                unsigned int v177 = v488[0];
                unint64_t v20 = *v5;
                v178 = (unsigned __int8 *)*v4;
              }
              else
              {
                unsigned int v177 = *v19;
                v178 = v19 + 1;
                *int v4 = (unint64_t)v178;
              }
              *(unsigned char *)(v3 + 646) = v177 != 0;
              *(_DWORD *)(v3 + 688) |= 0x10u;
              if ((int)v20 - (int)v178 >= 2 && *v178 == 200 && v178[1] == 37)
              {
                v179 = v178 + 2;
                *int v4 = (unint64_t)v179;
LABEL_392:
                if ((unint64_t)v179 >= v20 || (char)*v179 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v483);
                  if (!this) {
                    return this;
                  }
                  unint64_t v20 = *v5;
                  v185 = (unsigned __int8 *)*v4;
                }
                else
                {
                  unsigned int *v483 = *v179;
                  v185 = v179 + 1;
                  *int v4 = (unint64_t)v185;
                }
                *(_DWORD *)(v3 + 688) |= 0x20u;
                if ((int)v20 - (int)v185 >= 2 && *v185 == 208 && v185[1] == 37)
                {
                  v180 = v185 + 2;
                  *int v4 = (unint64_t)v180;
LABEL_441:
                  v488[0] = 0;
                  if ((unint64_t)v180 >= v20 || (char)*v180 < 0)
                  {
                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                    if (!this) {
                      return this;
                    }
                    unsigned int v194 = v488[0];
                    unint64_t v20 = *v5;
                    v195 = (unsigned __int8 *)*v4;
                  }
                  else
                  {
                    unsigned int v194 = *v180;
                    v195 = v180 + 1;
                    *int v4 = (unint64_t)v195;
                  }
                  *(unsigned char *)(v3 + 647) = v194 != 0;
                  *(_DWORD *)(v3 + 688) |= 0x40u;
                  if ((int)v20 - (int)v195 >= 2 && *v195 == 216 && v195[1] == 37)
                  {
                    int v21 = (char *)(v195 + 2);
                    *int v4 = (unint64_t)v21;
LABEL_488:
                    v488[0] = 0;
                    if ((unint64_t)v21 >= v20 || *v21 < 0)
                    {
                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                      if (!this) {
                        return this;
                      }
                      unsigned int v208 = v488[0];
                      v209 = (unsigned __int8 *)*v4;
                      unint64_t v20 = *v5;
                    }
                    else
                    {
                      unsigned int v208 = *v21;
                      v209 = (unsigned __int8 *)(v21 + 1);
                      *int v4 = (unint64_t)v209;
                    }
                    *(unsigned char *)(v3 + 664) = v208 != 0;
                    *(_DWORD *)(v3 + 688) |= 0x80u;
                    if (v209 == (unsigned __int8 *)v20
                      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                    {
                      *((_DWORD *)a2 + 8) = 0;
                      this = 1;
                      *((unsigned char *)a2 + 36) = 1;
                      return this;
                    }
                  }
                }
              }
            }
            break;
          case 0x230u:
            int v15 = v13 & 7;
            if ((v13 & 7) == 0)
            {
              unsigned int v19 = (unsigned __int8 *)*v4;
              unint64_t v20 = *v5;
              goto LABEL_354;
            }
            goto LABEL_362;
          default:
            goto LABEL_361;
        }
      }
    }
    switch(v14)
    {
      case 1u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v16 = (char *)*v4;
        unint64_t v17 = *v5;
        if (*v4 >= *v5 || *v16 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
          if (!this) {
            return this;
          }
          uint64_t v18 = (unsigned char *)*v4;
          unint64_t v17 = *v5;
        }
        else
        {
          *uint64_t v7 = *v16;
          uint64_t v18 = v16 + 1;
          *int v4 = (unint64_t)v18;
        }
        int v22 = *(_DWORD *)(v3 + 672) | 1;
        *(_DWORD *)(v3 + 672) = v22;
        if ((unint64_t)v18 >= v17 || *v18 != 18) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v18 + 1);
LABEL_1106:
        *(_DWORD *)(v3 + 672) = v22 | 2;
        if (*(void *)(v3 + 16) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v296 = (unsigned char *)*v4;
        unint64_t v24 = *v5;
        if (*v4 >= *v5 || *v296 != 24) {
          goto LABEL_2;
        }
        unsigned int v23 = v296 + 1;
        *int v4 = (unint64_t)v23;
LABEL_1112:
        v488[0] = 0;
        if ((unint64_t)v23 >= v24 || *v23 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v297 = v488[0];
          v298 = (unsigned char *)*v4;
          unint64_t v24 = *v5;
        }
        else
        {
          unsigned int v297 = *v23;
          v298 = v23 + 1;
          *int v4 = (unint64_t)v298;
        }
        *(unsigned char *)(v3 + 28) = v297 != 0;
        *(_DWORD *)(v3 + 672) |= 4u;
        if ((unint64_t)v298 >= v24 || *v298 != 32) {
          goto LABEL_2;
        }
        uint64_t v25 = v298 + 1;
        *int v4 = (unint64_t)v25;
LABEL_1120:
        v488[0] = 0;
        if ((unint64_t)v25 >= v24 || *v25 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v299 = v488[0];
        }
        else
        {
          unsigned int v299 = *v25;
          *int v4 = (unint64_t)(v25 + 1);
        }
        if (v299 + 1 <= 7)
        {
          *(_DWORD *)(v3 + 672) |= 8u;
          *(_DWORD *)(v3 + 24) = v299;
        }
        v300 = (unsigned char *)*v4;
        unint64_t v27 = *v5;
        if (*v4 >= *v5 || *v300 != 40) {
          goto LABEL_2;
        }
        int v26 = v300 + 1;
        *int v4 = (unint64_t)v26;
LABEL_1130:
        v488[0] = 0;
        if ((unint64_t)v26 >= v27 || *v26 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v301 = v488[0];
          v302 = (unsigned char *)*v4;
          unint64_t v27 = *v5;
        }
        else
        {
          unsigned int v301 = *v26;
          v302 = v26 + 1;
          *int v4 = (unint64_t)v302;
        }
        *(unsigned char *)(v3 + 29) = v301 != 0;
        *(_DWORD *)(v3 + 672) |= 0x10u;
        if ((unint64_t)v302 >= v27 || *v302 != 48) {
          goto LABEL_2;
        }
        uint64_t v28 = v302 + 1;
        *int v4 = (unint64_t)v28;
LABEL_1138:
        v488[0] = 0;
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v303 = v488[0];
          v304 = (unsigned char *)*v4;
          unint64_t v27 = *v5;
        }
        else
        {
          unsigned int v303 = *v28;
          v304 = v28 + 1;
          *int v4 = (unint64_t)v304;
        }
        *(unsigned char *)(v3 + 30) = v303 != 0;
        *(_DWORD *)(v3 + 672) |= 0x20u;
        if ((unint64_t)v304 >= v27 || *v304 != 56) {
          goto LABEL_2;
        }
        uint64_t v29 = v304 + 1;
        *int v4 = (unint64_t)v29;
LABEL_1146:
        v488[0] = 0;
        if ((unint64_t)v29 >= v27 || *v29 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v305 = v488[0];
          v306 = (unsigned char *)*v4;
          unint64_t v27 = *v5;
        }
        else
        {
          unsigned int v305 = *v29;
          v306 = v29 + 1;
          *int v4 = (unint64_t)v306;
        }
        *(unsigned char *)(v3 + 31) = v305 != 0;
        *(_DWORD *)(v3 + 672) |= 0x40u;
        if ((unint64_t)v306 >= v27 || *v306 != 64) {
          goto LABEL_2;
        }
        uint64_t v30 = v306 + 1;
        *int v4 = (unint64_t)v30;
LABEL_1154:
        v488[0] = 0;
        if ((unint64_t)v30 >= v27 || *v30 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v307 = v488[0];
          v308 = (unsigned char *)*v4;
          unint64_t v27 = *v5;
        }
        else
        {
          unsigned int v307 = *v30;
          v308 = v30 + 1;
          *int v4 = (unint64_t)v308;
        }
        *(unsigned char *)(v3 + 100) = v307 != 0;
        *(_DWORD *)(v3 + 672) |= 0x80u;
        if ((unint64_t)v308 >= v27 || *v308 != 72) {
          goto LABEL_2;
        }
        uint64_t v31 = v308 + 1;
        *int v4 = (unint64_t)v31;
LABEL_1162:
        v488[0] = 0;
        if ((unint64_t)v31 >= v27 || *v31 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v309 = v488[0];
        }
        else
        {
          unsigned int v309 = *v31;
          *int v4 = (unint64_t)(v31 + 1);
        }
        if (v309 - 1 < 6 || v309 == -1)
        {
          *(_DWORD *)(v3 + 672) |= 0x100u;
          *(_DWORD *)(v3 + 40) = v309;
        }
        v311 = (unsigned char *)*v4;
        if (*v4 >= *v5 || *v311 != 82) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v311 + 1);
LABEL_1176:
        *(_DWORD *)(v3 + 672) |= 0x200u;
        if (*(void *)(v3 + 32) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v312 = (unsigned char *)*v4;
        unint64_t v33 = *v5;
        if (*v4 >= *v5 || *v312 != 88) {
          goto LABEL_2;
        }
        int v32 = v312 + 1;
        *int v4 = (unint64_t)v32;
LABEL_1182:
        if ((unint64_t)v32 >= v33 || *v32 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!this) {
            return this;
          }
          v313 = (unsigned char *)*v4;
          unint64_t v33 = *v5;
        }
        else
        {
          *uint64_t v8 = *v32;
          v313 = v32 + 1;
          *int v4 = (unint64_t)v313;
        }
        int v34 = *(_DWORD *)(v3 + 672) | 0x400;
        *(_DWORD *)(v3 + 672) = v34;
        if ((unint64_t)v313 >= v33 || *v313 != 98) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v313 + 1);
LABEL_1190:
        *(_DWORD *)(v3 + 672) = v34 | 0x800;
        if (*(void *)(v3 + 48) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v314 = (unsigned char *)*v4;
        unint64_t v36 = *v5;
        if (*v4 >= *v5 || *v314 != 104) {
          goto LABEL_2;
        }
        int v35 = v314 + 1;
        *int v4 = (unint64_t)v35;
LABEL_1196:
        v488[0] = 0;
        if ((unint64_t)v35 >= v36 || *v35 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v315 = v488[0];
          v316 = (unsigned char *)*v4;
          unint64_t v36 = *v5;
        }
        else
        {
          unsigned int v315 = *v35;
          v316 = v35 + 1;
          *int v4 = (unint64_t)v316;
        }
        *(unsigned char *)(v3 + 101) = v315 != 0;
        int v37 = *(_DWORD *)(v3 + 672) | 0x1000;
        *(_DWORD *)(v3 + 672) = v37;
        if ((unint64_t)v316 >= v36 || *v316 != 114) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v316 + 1);
LABEL_1204:
        *(_DWORD *)(v3 + 672) = v37 | 0x2000;
        if (*(void *)(v3 + 56) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v317 = (unsigned char *)*v4;
        if (*v4 >= *v5 || *v317 != 122) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v317 + 1);
LABEL_1210:
        *(_DWORD *)(v3 + 672) |= 0x4000u;
        if (*(void *)(v3 + 64) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v39 = *v5;
        v318 = (unsigned __int8 *)*v4;
        if ((int)(*v5 - *v4) < 2 || *v318 != 128 || v318[1] != 1) {
          goto LABEL_2;
        }
        char v38 = v318 + 2;
        *int v4 = (unint64_t)v38;
LABEL_1217:
        if ((unint64_t)v38 >= v39 || (char)*v38 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!this) {
            return this;
          }
          unint64_t v39 = *v5;
          v319 = (unsigned __int8 *)*v4;
        }
        else
        {
          *uint64_t v9 = *v38;
          v319 = v38 + 1;
          *int v4 = (unint64_t)v319;
        }
        int v40 = *(_DWORD *)(v3 + 672) | 0x8000;
        *(_DWORD *)(v3 + 672) = v40;
        if ((int)v39 - (int)v319 < 2 || *v319 != 138 || v319[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v319 + 2);
LABEL_1226:
        *(_DWORD *)(v3 + 672) = v40 | 0x10000;
        if (*(void *)(v3 + 72) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v320 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v320 != 146 || v320[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v320 + 2);
LABEL_1233:
        *(_DWORD *)(v3 + 672) |= 0x40000u;
        if (*(void *)(v3 + 88) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v321 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v321 != 154 || v321[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v321 + 2);
LABEL_1240:
        *(_DWORD *)(v3 + 672) |= 0x80000u;
        if (*(void *)(v3 + 104) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        v322 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v322 != 162 || v322[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v322 + 2);
LABEL_1247:
        *(_DWORD *)(v3 + 672) |= 0x100000u;
        if (*(void *)(v3 + 112) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v42 = *v5;
        v323 = (unsigned __int8 *)*v4;
        if ((int)(*v5 - *v4) < 2 || *v323 != 168 || v323[1] != 1) {
          goto LABEL_2;
        }
        int v41 = v323 + 2;
        *int v4 = (unint64_t)v41;
LABEL_1254:
        v488[0] = 0;
        if ((unint64_t)v41 >= v42 || (char)*v41 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v324 = v488[0];
          unint64_t v42 = *v5;
          v325 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int v324 = *v41;
          v325 = v41 + 1;
          *int v4 = (unint64_t)v325;
        }
        *(unsigned char *)(v3 + 102) = v324 != 0;
        *(_DWORD *)(v3 + 672) |= 0x1000000u;
        if ((int)v42 - (int)v325 < 2 || *v325 != 176 || v325[1] != 1) {
          goto LABEL_2;
        }
        char v43 = v325 + 2;
        *int v4 = (unint64_t)v43;
LABEL_1263:
        if ((unint64_t)v43 >= v42 || (char)*v43 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!this) {
            return this;
          }
          unint64_t v42 = *v5;
          v326 = (unsigned __int8 *)*v4;
        }
        else
        {
          *uint64_t v10 = *v43;
          v326 = v43 + 1;
          *int v4 = (unint64_t)v326;
        }
        *(_DWORD *)(v3 + 672) |= 0x2000000u;
        if ((int)v42 - (int)v326 < 2 || *v326 != 184 || v326[1] != 1) {
          goto LABEL_2;
        }
        int v44 = v326 + 2;
        *int v4 = (unint64_t)v44;
LABEL_1272:
        if ((unint64_t)v44 >= v42 || (char)*v44 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v481);
          if (!this) {
            return this;
          }
          unint64_t v42 = *v5;
          v327 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v481 = *v44;
          v327 = v44 + 1;
          *int v4 = (unint64_t)v327;
        }
        int v45 = *(_DWORD *)(v3 + 672) | 0x4000000;
        *(_DWORD *)(v3 + 672) = v45;
        if ((int)v42 - (int)v327 < 2 || *v327 != 194 || v327[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v327 + 2);
LABEL_70:
        *(_DWORD *)(v3 + 672) = v45 | 0x8000000;
        if (*(void *)(v3 + 136) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        uint64_t v46 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v46 != 202 || v46[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v46 + 2);
LABEL_78:
        *(_DWORD *)(v3 + 672) |= 0x10000000u;
        if (*(void *)(v3 + 152) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        int v47 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v47 != 210 || v47[1] != 1) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v47 + 2);
LABEL_86:
        *(_DWORD *)(v3 + 672) |= 0x20000000u;
        if (*(void *)(v3 + 160) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v48 = *v5;
        int v49 = (unsigned __int8 *)*v4;
        if ((int)(*v5 - *v4) < 2 || *v49 != 216 || v49[1] != 1) {
          goto LABEL_2;
        }
        int v50 = v49 + 2;
        *int v4 = (unint64_t)v50;
LABEL_95:
        if ((unint64_t)v50 >= v48 || (char)*v50 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v487);
          if (!this) {
            return this;
          }
          unint64_t v48 = *v5;
          int v51 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v487 = *v50;
          int v51 = v50 + 1;
          *int v4 = (unint64_t)v51;
        }
        *(_DWORD *)(v3 + 672) |= 0x40000000u;
        if ((int)v48 - (int)v51 < 2 || *v51 != 224 || v51[1] != 1) {
          goto LABEL_2;
        }
        char v52 = v51 + 2;
        *int v4 = (unint64_t)v52;
LABEL_374:
        if ((unint64_t)v52 >= v48 || (char)*v52 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v485);
          if (!this) {
            return this;
          }
          unint64_t v48 = *v5;
          v183 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v485 = *v52;
          v183 = v52 + 1;
          *int v4 = (unint64_t)v183;
        }
        *(_DWORD *)(v3 + 672) |= 0x80000000;
        if ((int)v48 - (int)v183 < 2 || *v183 != 232 || v183[1] != 1) {
          goto LABEL_2;
        }
        int v53 = v183 + 2;
        *int v4 = (unint64_t)v53;
LABEL_421:
        v488[0] = 0;
        if ((unint64_t)v53 >= v48 || (char)*v53 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v190 = v488[0];
          unint64_t v48 = *v5;
          v191 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int v190 = *v53;
          v191 = v53 + 1;
          *int v4 = (unint64_t)v191;
        }
        *(unsigned char *)(v3 + 103) = v190 != 0;
        *(_DWORD *)(v3 + 676) |= 1u;
        if ((int)v48 - (int)v191 < 2 || *v191 != 240 || v191[1] != 1) {
          goto LABEL_2;
        }
        char v54 = v191 + 2;
        *int v4 = (unint64_t)v54;
LABEL_470:
        if ((unint64_t)v54 >= v48 || (char)*v54 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v478);
          if (!this) {
            return this;
          }
          unint64_t v48 = *v5;
          v201 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v478 = *v54;
          v201 = v54 + 1;
          *int v4 = (unint64_t)v201;
        }
        *(_DWORD *)(v3 + 676) |= 2u;
        if ((int)v48 - (int)v201 < 2 || *v201 != 248 || v201[1] != 1) {
          goto LABEL_2;
        }
        uint64_t v55 = v201 + 2;
        *int v4 = (unint64_t)v55;
LABEL_511:
        if ((unint64_t)v55 >= v48 || (char)*v55 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v475);
          if (!this) {
            return this;
          }
          unint64_t v48 = *v5;
          v211 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v475 = *v55;
          v211 = v55 + 1;
          *int v4 = (unint64_t)v211;
        }
        *(_DWORD *)(v3 + 676) |= 4u;
        if ((int)v48 - (int)v211 < 2 || *v211 != 128 || v211[1] != 2) {
          goto LABEL_2;
        }
        unint64_t v56 = v211 + 2;
        *int v4 = (unint64_t)v56;
LABEL_543:
        if ((unint64_t)v56 >= v48 || (char)*v56 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v474);
          if (!this) {
            return this;
          }
          unint64_t v48 = *v5;
          v215 = (unsigned __int8 *)*v4;
        }
        else
        {
          unint64_t *v474 = *v56;
          v215 = v56 + 1;
          *int v4 = (unint64_t)v215;
        }
        *(_DWORD *)(v3 + 676) |= 8u;
        if ((int)v48 - (int)v215 < 2 || *v215 != 136 || v215[1] != 2) {
          goto LABEL_2;
        }
        int v57 = (char *)(v215 + 2);
        *int v4 = (unint64_t)v57;
LABEL_561:
        v488[0] = 0;
        uint64_t v407 = v6;
        if ((unint64_t)v57 >= v48 || *v57 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          v217 = v8;
          v218 = v9;
          v219 = v10;
          v220 = v7;
          uint64_t v221 = v11;
          unint64_t v222 = v488[0];
        }
        else
        {
          v217 = v8;
          v218 = v9;
          v219 = v10;
          v220 = v7;
          uint64_t v221 = v11;
          unint64_t v222 = *v57;
          *int v4 = (unint64_t)(v57 + 1);
        }
        this = awd::metrics::enum_ATM_CallEndReason_IsValid((awd::metrics *)v222);
        if (this)
        {
          *(_DWORD *)(v3 + 676) |= 0x10u;
          *(_DWORD *)(v3 + 180) = v222;
        }
        unint64_t v59 = *v5;
        v224 = (unsigned __int8 *)*v4;
        uint64_t v11 = v221;
        uint64_t v7 = v220;
        uint64_t v10 = v219;
        uint64_t v9 = v218;
        uint64_t v8 = v217;
        uint64_t v6 = v407;
        if ((int)(*v5 - *v4) < 2 || *v224 != 144 || v224[1] != 2) {
          goto LABEL_2;
        }
        uint64_t v58 = (char *)(v224 + 2);
        *int v4 = (unint64_t)v58;
LABEL_581:
        v488[0] = 0;
        uint64_t v408 = v6;
        if ((unint64_t)v58 >= v59 || *v58 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          v225 = v8;
          v226 = v9;
          v227 = v10;
          v228 = v7;
          uint64_t v229 = v11;
          unint64_t v230 = v488[0];
        }
        else
        {
          v225 = v8;
          v226 = v9;
          v227 = v10;
          v228 = v7;
          uint64_t v229 = v11;
          unint64_t v230 = *v58;
          *int v4 = (unint64_t)(v58 + 1);
        }
        this = awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v230);
        if (this)
        {
          *(_DWORD *)(v3 + 676) |= 0x20u;
          *(_DWORD *)(v3 + 192) = v230;
        }
        unint64_t v61 = *v5;
        v232 = (unsigned __int8 *)*v4;
        uint64_t v11 = v229;
        uint64_t v7 = v228;
        uint64_t v10 = v227;
        uint64_t v9 = v226;
        uint64_t v8 = v225;
        uint64_t v6 = v408;
        if ((int)(*v5 - *v4) < 2 || *v232 != 152 || v232[1] != 2) {
          goto LABEL_2;
        }
        char v60 = v232 + 2;
        *int v4 = (unint64_t)v60;
LABEL_601:
        v488[0] = 0;
        if ((unint64_t)v60 >= v61 || (char)*v60 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          unsigned int v233 = v488[0];
          unint64_t v61 = *v5;
          v234 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int v233 = *v60;
          v234 = v60 + 1;
          *int v4 = (unint64_t)v234;
        }
        *(unsigned char *)(v3 + 236) = v233 != 0;
        *(_DWORD *)(v3 + 676) |= 0x40u;
        if ((int)v61 - (int)v234 < 2 || *v234 != 160 || v234[1] != 2) {
          goto LABEL_2;
        }
        int v62 = v234 + 2;
        *int v4 = (unint64_t)v62;
LABEL_619:
        if ((unint64_t)v62 >= v61 || (char)*v62 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v470);
          if (!this) {
            return this;
          }
          unint64_t v61 = *v5;
          v236 = (unsigned __int8 *)*v4;
        }
        else
        {
          unint64_t *v470 = *v62;
          v236 = v62 + 1;
          *int v4 = (unint64_t)v236;
        }
        *(_DWORD *)(v3 + 676) |= 0x1000u;
        if ((int)v61 - (int)v236 < 2 || *v236 != 168 || v236[1] != 2) {
          goto LABEL_2;
        }
        int v63 = v236 + 2;
        *int v4 = (unint64_t)v63;
LABEL_637:
        if ((unint64_t)v63 >= v61 || (char)*v63 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v469);
          if (!this) {
            return this;
          }
          unint64_t v61 = *v5;
          v238 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v469 = *v63;
          v238 = v63 + 1;
          *int v4 = (unint64_t)v238;
        }
        *(_DWORD *)(v3 + 676) |= 0x2000u;
        if ((int)v61 - (int)v238 < 2 || *v238 != 176 || v238[1] != 2) {
          goto LABEL_2;
        }
        char v64 = v238 + 2;
        *int v4 = (unint64_t)v64;
LABEL_655:
        if ((unint64_t)v64 >= v61 || (char)*v64 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v468);
          if (!this) {
            return this;
          }
          unint64_t v61 = *v5;
          v241 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v468 = *v64;
          v241 = v64 + 1;
          *int v4 = (unint64_t)v241;
        }
        *(_DWORD *)(v3 + 676) |= 0x10000u;
        if ((int)v61 - (int)v241 < 2 || *v241 != 184 || v241[1] != 2) {
          goto LABEL_2;
        }
        int v65 = v241 + 2;
        *int v4 = (unint64_t)v65;
LABEL_673:
        if ((unint64_t)v65 >= v61 || (char)*v65 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v467);
          if (!this) {
            return this;
          }
          unint64_t v61 = *v5;
          v243 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v467 = *v65;
          v243 = v65 + 1;
          *int v4 = (unint64_t)v243;
        }
        *(_DWORD *)(v3 + 676) |= 0x20000u;
        if ((int)v61 - (int)v243 < 2 || *v243 != 192 || v243[1] != 2) {
          goto LABEL_2;
        }
        int v66 = v243 + 2;
        *int v4 = (unint64_t)v66;
LABEL_691:
        if ((unint64_t)v66 >= v61 || (char)*v66 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v466);
          if (!this) {
            return this;
          }
          unint64_t v61 = *v5;
          v245 = (unsigned __int8 *)*v4;
        }
        else
        {
          unsigned int *v466 = *v66;
          v245 = v66 + 1;
          *int v4 = (unint64_t)v245;
        }
        int v67 = *(_DWORD *)(v3 + 676) | 0x100000;
        *(_DWORD *)(v3 + 676) = v67;
        if ((int)v61 - (int)v245 < 2 || *v245 != 202 || v245[1] != 2) {
          goto LABEL_2;
        }
        *int v4 = (unint64_t)(v245 + 2);
LABEL_126:
        *(_DWORD *)(v3 + 676) = v67 | 0x200000;
        if (*(void *)(v3 + 256) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v68 = (unsigned __int8 *)*v4;
        if ((int)(*(_DWORD *)v5 - *v4) < 2 || *v68 != 210) {
          goto LABEL_2;
        }
        break;
      case 2u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v22 = *(_DWORD *)(v3 + 672);
        goto LABEL_1106;
      case 3u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v23 = (char *)*v4;
        unint64_t v24 = *v5;
        goto LABEL_1112;
      case 4u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v25 = (char *)*v4;
        unint64_t v24 = *v5;
        goto LABEL_1120;
      case 5u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v26 = (char *)*v4;
        unint64_t v27 = *v5;
        goto LABEL_1130;
      case 6u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v28 = (char *)*v4;
        unint64_t v27 = *v5;
        goto LABEL_1138;
      case 7u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v29 = (char *)*v4;
        unint64_t v27 = *v5;
        goto LABEL_1146;
      case 8u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v30 = (char *)*v4;
        unint64_t v27 = *v5;
        goto LABEL_1154;
      case 9u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v31 = (char *)*v4;
        unint64_t v27 = *v5;
        goto LABEL_1162;
      case 0xAu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1176;
      case 0xBu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v32 = (char *)*v4;
        unint64_t v33 = *v5;
        goto LABEL_1182;
      case 0xCu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v34 = *(_DWORD *)(v3 + 672);
        goto LABEL_1190;
      case 0xDu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v35 = (char *)*v4;
        unint64_t v36 = *v5;
        goto LABEL_1196;
      case 0xEu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v37 = *(_DWORD *)(v3 + 672);
        goto LABEL_1204;
      case 0xFu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1210;
      case 0x10u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v38 = (unsigned __int8 *)*v4;
        unint64_t v39 = *v5;
        goto LABEL_1217;
      case 0x11u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v40 = *(_DWORD *)(v3 + 672);
        goto LABEL_1226;
      case 0x12u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1233;
      case 0x13u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1240;
      case 0x14u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1247;
      case 0x15u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v41 = (unsigned __int8 *)*v4;
        unint64_t v42 = *v5;
        goto LABEL_1254;
      case 0x16u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v43 = (unsigned __int8 *)*v4;
        unint64_t v42 = *v5;
        goto LABEL_1263;
      case 0x17u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v44 = (unsigned __int8 *)*v4;
        unint64_t v42 = *v5;
        goto LABEL_1272;
      case 0x18u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v45 = *(_DWORD *)(v3 + 672);
        goto LABEL_70;
      case 0x19u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_78;
      case 0x1Au:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_86;
      case 0x1Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v50 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_95;
      case 0x1Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v52 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_374;
      case 0x1Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v53 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_421;
      case 0x1Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v54 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_470;
      case 0x1Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v55 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_511;
      case 0x20u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v56 = (unsigned __int8 *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_543;
      case 0x21u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v57 = (char *)*v4;
        unint64_t v48 = *v5;
        goto LABEL_561;
      case 0x22u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v58 = (char *)*v4;
        unint64_t v59 = *v5;
        goto LABEL_581;
      case 0x23u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v60 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_601;
      case 0x24u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v62 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_619;
      case 0x25u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v63 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_637;
      case 0x26u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v64 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_655;
      case 0x27u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v65 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_673;
      case 0x28u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v66 = (unsigned __int8 *)*v4;
        unint64_t v61 = *v5;
        goto LABEL_691;
      case 0x29u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v67 = *(_DWORD *)(v3 + 676);
        goto LABEL_126;
      case 0x2Au:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1296;
      case 0x2Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v69 = (unsigned __int8 *)*v4;
        unint64_t v70 = *v5;
        goto LABEL_1308;
      case 0x2Cu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v71 = *(_DWORD *)(v3 + 676);
        goto LABEL_138;
      case 0x2Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v74 = (unsigned __int8 *)*v4;
        unint64_t v72 = *v5;
        goto LABEL_147;
      case 0x2Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v77 = (char *)*v4;
        unint64_t v72 = *v5;
        goto LABEL_383;
      case 0x2Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v78 = (unsigned __int8 *)*v4;
        unint64_t v79 = *v5;
        goto LABEL_432;
      case 0x30u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v80 = (char *)*v4;
        unint64_t v79 = *v5;
        goto LABEL_479;
      case 0x31u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v81 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_522;
      case 0x32u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v83 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_552;
      case 0x33u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v84 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_570;
      case 0x34u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v85 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_590;
      case 0x35u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v86 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_610;
      case 0x36u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v87 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_628;
      case 0x37u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v88 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_646;
      case 0x38u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v89 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_664;
      case 0x39u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v90 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_682;
      case 0x3Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v91 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_700;
      case 0x3Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v92 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_715;
      case 0x3Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v93 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_724;
      case 0x3Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v94 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_733;
      case 0x3Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v95 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_742;
      case 0x3Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v96 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_751;
      case 0x40u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v97 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_760;
      case 0x41u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v98 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_769;
      case 0x42u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v99 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_778;
      case 0x43u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v100 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_787;
      case 0x44u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v101 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_796;
      case 0x45u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v102 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_805;
      case 0x46u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v103 = (unsigned __int8 *)*v4;
        unint64_t v82 = *v5;
        goto LABEL_814;
      case 0x47u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v104 = (unsigned __int8 *)*v4;
        goto LABEL_823;
      case 0x48u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v105 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_832;
      case 0x49u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v107 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_841;
      case 0x4Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v108 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_850;
      case 0x4Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v109 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_859;
      case 0x4Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v110 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_868;
      case 0x4Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v111 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_877;
      case 0x4Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v112 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_886;
      case 0x4Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v113 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_895;
      case 0x50u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v114 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_904;
      case 0x51u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v115 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_913;
      case 0x52u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v116 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_922;
      case 0x53u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v117 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_931;
      case 0x54u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v118 = (unsigned __int8 *)*v4;
        unint64_t v106 = *v5;
        goto LABEL_940;
      case 0x55u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        int v119 = *(_DWORD *)(v3 + 680);
        goto LABEL_230;
      case 0x56u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v122 = (char *)*v4;
        unint64_t v120 = *v5;
        goto LABEL_239;
      case 0x57u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v124 = (char *)*v4;
        unint64_t v125 = *v5;
        goto LABEL_403;
      case 0x58u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v126 = (unsigned __int8 *)*v4;
        unint64_t v127 = *v5;
        goto LABEL_452;
      case 0x59u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1317;
      case 0x5Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v128 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1330;
      case 0x5Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v130 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1339;
      case 0x5Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v131 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1348;
      case 0x5Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v132 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1357;
      case 0x5Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v133 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1366;
      case 0x5Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v134 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1375;
      case 0x60u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unint64_t v135 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1384;
      case 0x61u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v136 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1393;
      case 0x62u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v137 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1402;
      case 0x63u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v138 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1411;
      case 0x64u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v139 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1420;
      case 0x65u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v140 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1429;
      case 0x66u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        unsigned int v141 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1438;
      case 0x67u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        char v142 = (unsigned __int8 *)*v4;
        unint64_t v129 = *v5;
        goto LABEL_1447;
      case 0x68u:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1456;
      case 0x69u:
        int v15 = v13 & 7;
        if (v15 == 2)
        {
          v489[0] = 0;
          v181 = (char *)*v4;
          v403 = v9;
          v404 = v10;
          if (*v4 >= *v5 || *v181 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v489))return 0; {
            v182 = v7;
            }
          }
          else
          {
            v182 = v7;
            v489[0] = *v181;
            *int v4 = (unint64_t)(v181 + 1);
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) >= 1)
          {
            v488[0] = 0;
            v328 = (char *)*v4;
            if (*v4 >= *v5 || *v328 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488))return 0; {
              unsigned int v329 = v488[0];
              }
            }
            else
            {
              unsigned int v329 = *v328;
              *int v4 = (unint64_t)(v328 + 1);
            }
            BOOL v330 = v329 != 0;
            int v331 = *(_DWORD *)(v3 + 544);
            if (v331 == *(_DWORD *)(v3 + 548))
            {
              wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(v6, v331 + 1);
              int v331 = *(_DWORD *)(v3 + 544);
            }
            uint64_t v332 = *(void *)(v3 + 536);
            *(_DWORD *)(v3 + 544) = v331 + 1;
            *(unsigned char *)(v332 + v331) = v330;
          }
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          uint64_t v11 = MEMORY[0x1E4FBA920];
          goto LABEL_1496;
        }
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        uint64_t v143 = (char *)*v4;
        unint64_t v144 = *v5;
        goto LABEL_1476;
      case 0x6Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        int v145 = (unsigned __int8 *)*v4;
        unint64_t v144 = *v5;
        goto LABEL_1502;
      case 0x6Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v146 = (unsigned __int8 *)*v4;
        unint64_t v144 = *v5;
        goto LABEL_1511;
      case 0x6Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v147 = (unsigned __int8 *)*v4;
        unint64_t v144 = *v5;
        goto LABEL_1520;
      case 0x6Du:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_1529;
      case 0x6Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v148 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_291;
      case 0x6Fu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v151 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_955;
      case 0x70u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v152 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_964;
      case 0x71u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v153 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_973;
      case 0x72u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v154 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_982;
      case 0x73u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v155 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_991;
      case 0x74u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v156 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1000;
      case 0x75u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v157 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1009;
      case 0x76u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v158 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1018;
      case 0x77u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v159 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1027;
      case 0x78u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v160 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1036;
      case 0x79u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v161 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1045;
      case 0x7Au:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v162 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1054;
      case 0x7Bu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v163 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1063;
      case 0x7Cu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v164 = (unsigned __int8 *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1072;
      case 0x7Du:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v165 = (char *)*v4;
        unint64_t v149 = *v5;
        goto LABEL_1081;
      case 0x7Eu:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v166 = (unsigned __int8 *)*v4;
        unint64_t v167 = *v5;
        goto LABEL_1092;
      case 0x7Fu:
        int v15 = v13 & 7;
        if (v15 != 2) {
          goto LABEL_362;
        }
        goto LABEL_327;
      case 0x80u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v170 = (unsigned __int8 *)*v4;
        unint64_t v168 = *v5;
        goto LABEL_336;
      case 0x81u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v172 = (unsigned __int8 *)*v4;
        unint64_t v168 = *v5;
        goto LABEL_412;
      case 0x82u:
        int v15 = v13 & 7;
        if ((v13 & 7) != 0) {
          goto LABEL_362;
        }
        v173 = (unsigned __int8 *)*v4;
        unint64_t v168 = *v5;
        goto LABEL_461;
      default:
        goto LABEL_361;
    }
    while (1)
    {
      if (v68[1] != 2) {
        goto LABEL_2;
      }
      *int v4 = (unint64_t)(v68 + 2);
LABEL_1296:
      int v333 = *(_DWORD *)(v3 + 272);
      int v334 = *(_DWORD *)(v3 + 276);
      if (v333 >= v334)
      {
        if (v334 == *(_DWORD *)(v3 + 280))
        {
          this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v412);
          int v334 = *(_DWORD *)(v3 + 276);
        }
        *(_DWORD *)(v3 + 276) = v334 + 1;
        uint64_t v335 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
        uint64_t v336 = *(void *)(v3 + 264);
        uint64_t v337 = *(int *)(v3 + 272);
        *(_DWORD *)(v3 + 272) = v337 + 1;
        *(void *)(v336 + 8 * v337) = v335;
      }
      else
      {
        *(_DWORD *)(v3 + 272) = v333 + 1;
      }
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!this) {
        return this;
      }
      unint64_t v70 = *v5;
      unint64_t v68 = (unsigned __int8 *)*v4;
      if ((int)(*v5 - *v4) < 2) {
        goto LABEL_2;
      }
      int v338 = *v68;
      if (v338 == 216) {
        break;
      }
      if (v338 != 210) {
        goto LABEL_2;
      }
    }
    if (v68[1] == 2)
    {
      int v69 = v68 + 2;
      *int v4 = (unint64_t)v69;
LABEL_1308:
      if ((unint64_t)v69 >= v70 || (char)*v69 < 0)
      {
        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v482);
        if (!this) {
          return this;
        }
        unint64_t v70 = *v5;
        v339 = (unsigned __int8 *)*v4;
      }
      else
      {
        unsigned int *v482 = *v69;
        v339 = v69 + 1;
        *int v4 = (unint64_t)v339;
      }
      int v71 = *(_DWORD *)(v3 + 676) | 0x4000;
      *(_DWORD *)(v3 + 676) = v71;
      if ((int)v70 - (int)v339 >= 2 && *v339 == 226 && v339[1] == 2)
      {
        *int v4 = (unint64_t)(v339 + 2);
LABEL_138:
        *(_DWORD *)(v3 + 676) = v71 | 0x80;
        if (*(void *)(v3 + 200) == v11) {
          operator new();
        }
        this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!this) {
          return this;
        }
        unint64_t v72 = *v5;
        int v73 = (unsigned __int8 *)*v4;
        if ((int)(*v5 - *v4) >= 2 && *v73 == 232 && v73[1] == 2)
        {
          uint64_t v74 = v73 + 2;
          *int v4 = (unint64_t)v74;
LABEL_147:
          v488[0] = 0;
          if ((unint64_t)v74 >= v72 || (char)*v74 < 0)
          {
            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
            if (!this) {
              return this;
            }
            unsigned int v75 = v488[0];
            unint64_t v72 = *v5;
            char v76 = (unsigned __int8 *)*v4;
          }
          else
          {
            unsigned int v75 = *v74;
            char v76 = v74 + 1;
            *int v4 = (unint64_t)v76;
          }
          *(unsigned char *)(v3 + 237) = v75 != 0;
          *(_DWORD *)(v3 + 676) |= 0x100u;
          if ((int)v72 - (int)v76 >= 2 && *v76 == 240 && v76[1] == 2)
          {
            uint64_t v77 = (char *)(v76 + 2);
            *int v4 = (unint64_t)v77;
LABEL_383:
            v488[0] = 0;
            if ((unint64_t)v77 >= v72 || *v77 < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
              if (!this) {
                return this;
              }
              unsigned int v184 = v488[0];
            }
            else
            {
              unsigned int v184 = *v77;
              *int v4 = (unint64_t)(v77 + 1);
            }
            if (v184 <= 3)
            {
              *(_DWORD *)(v3 + 676) |= 0x200u;
              *(_DWORD *)(v3 + 196) = v184;
            }
            unint64_t v79 = *v5;
            v192 = (unsigned __int8 *)*v4;
            if ((int)(*v5 - *v4) >= 2 && *v192 == 248 && v192[1] == 2)
            {
              unint64_t v78 = v192 + 2;
              *int v4 = (unint64_t)v78;
LABEL_432:
              if ((unint64_t)v78 >= v79 || (char)*v78 < 0)
              {
                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v479);
                if (!this) {
                  return this;
                }
                unint64_t v79 = *v5;
                v193 = (unsigned __int8 *)*v4;
              }
              else
              {
                unsigned int *v479 = *v78;
                v193 = v78 + 1;
                *int v4 = (unint64_t)v193;
              }
              *(_DWORD *)(v3 + 676) |= 0x400u;
              if ((int)v79 - (int)v193 >= 2 && *v193 == 128 && v193[1] == 3)
              {
                uint64_t v80 = (char *)(v193 + 2);
                *int v4 = (unint64_t)v80;
LABEL_479:
                v488[0] = 0;
                uint64_t v406 = v6;
                if ((unint64_t)v80 >= v79 || *v80 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                  if (!this) {
                    return this;
                  }
                  v202 = v8;
                  v203 = v9;
                  v204 = v10;
                  v205 = v7;
                  uint64_t v206 = v11;
                  unint64_t v207 = v488[0];
                }
                else
                {
                  v202 = v8;
                  v203 = v9;
                  v204 = v10;
                  v205 = v7;
                  uint64_t v206 = v11;
                  unint64_t v207 = *v80;
                  *int v4 = (unint64_t)(v80 + 1);
                }
                this = awd::metrics::session_termination_reason_IsValid((awd::metrics *)v207);
                if (this)
                {
                  *(_DWORD *)(v3 + 676) |= 0x800u;
                  *(_DWORD *)(v3 + 212) = v207;
                }
                unint64_t v82 = *v5;
                v212 = (unsigned __int8 *)*v4;
                uint64_t v11 = v206;
                uint64_t v7 = v205;
                uint64_t v10 = v204;
                uint64_t v9 = v203;
                uint64_t v8 = v202;
                uint64_t v6 = v406;
                if ((int)(*v5 - *v4) >= 2 && *v212 == 136 && v212[1] == 3)
                {
                  int v81 = v212 + 2;
                  *int v4 = (unint64_t)v81;
LABEL_522:
                  v488[0] = 0;
                  if ((unint64_t)v81 >= v82 || (char)*v81 < 0)
                  {
                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                    if (!this) {
                      return this;
                    }
                    unsigned int v213 = v488[0];
                    unint64_t v82 = *v5;
                    v214 = (unsigned __int8 *)*v4;
                  }
                  else
                  {
                    unsigned int v213 = *v81;
                    v214 = v81 + 1;
                    *int v4 = (unint64_t)v214;
                  }
                  *(_DWORD *)(v3 + 232) = -(v213 & 1) ^ (v213 >> 1);
                  *(_DWORD *)(v3 + 676) |= 0x8000u;
                  if ((int)v82 - (int)v214 >= 2 && *v214 == 144 && v214[1] == 3)
                  {
                    uint64_t v83 = v214 + 2;
                    *int v4 = (unint64_t)v83;
LABEL_552:
                    if ((unint64_t)v83 >= v82 || (char)*v83 < 0)
                    {
                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v473);
                      if (!this) {
                        return this;
                      }
                      unint64_t v82 = *v5;
                      v216 = (unsigned __int8 *)*v4;
                    }
                    else
                    {
                      unsigned int *v473 = *v83;
                      v216 = v83 + 1;
                      *int v4 = (unint64_t)v216;
                    }
                    *(_DWORD *)(v3 + 676) |= 0x40000u;
                    if ((int)v82 - (int)v216 >= 2 && *v216 == 152 && v216[1] == 3)
                    {
                      unint64_t v84 = v216 + 2;
                      *int v4 = (unint64_t)v84;
LABEL_570:
                      if ((unint64_t)v84 >= v82 || (char)*v84 < 0)
                      {
                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v472);
                        if (!this) {
                          return this;
                        }
                        unint64_t v82 = *v5;
                        v223 = (unsigned __int8 *)*v4;
                      }
                      else
                      {
                        unsigned int *v472 = *v84;
                        v223 = v84 + 1;
                        *int v4 = (unint64_t)v223;
                      }
                      *(_DWORD *)(v3 + 676) |= 0x80000u;
                      if ((int)v82 - (int)v223 >= 2 && *v223 == 160 && v223[1] == 3)
                      {
                        int v85 = v223 + 2;
                        *int v4 = (unint64_t)v85;
LABEL_590:
                        if ((unint64_t)v85 >= v82 || (char)*v85 < 0)
                        {
                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v471);
                          if (!this) {
                            return this;
                          }
                          unint64_t v82 = *v5;
                          v231 = (unsigned __int8 *)*v4;
                        }
                        else
                        {
                          unsigned int *v471 = *v85;
                          v231 = v85 + 1;
                          *int v4 = (unint64_t)v231;
                        }
                        *(_DWORD *)(v3 + 672) |= 0x200000u;
                        if ((int)v82 - (int)v231 >= 2 && *v231 == 168 && v231[1] == 3)
                        {
                          uint64_t v86 = v231 + 2;
                          *int v4 = (unint64_t)v86;
LABEL_610:
                          if ((unint64_t)v86 >= v82 || (char)*v86 < 0)
                          {
                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v465);
                            if (!this) {
                              return this;
                            }
                            unint64_t v82 = *v5;
                            v235 = (unsigned __int8 *)*v4;
                          }
                          else
                          {
                            unsigned int *v465 = *v86;
                            v235 = v86 + 1;
                            *int v4 = (unint64_t)v235;
                          }
                          *(_DWORD *)(v3 + 672) |= 0x400000u;
                          if ((int)v82 - (int)v235 >= 2 && *v235 == 176 && v235[1] == 3)
                          {
                            int v87 = v235 + 2;
                            *int v4 = (unint64_t)v87;
LABEL_628:
                            if ((unint64_t)v87 >= v82 || (char)*v87 < 0)
                            {
                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v464);
                              if (!this) {
                                return this;
                              }
                              unint64_t v82 = *v5;
                              v237 = (unsigned __int8 *)*v4;
                            }
                            else
                            {
                              unsigned int *v464 = *v87;
                              v237 = v87 + 1;
                              *int v4 = (unint64_t)v237;
                            }
                            *(_DWORD *)(v3 + 672) |= 0x800000u;
                            if ((int)v82 - (int)v237 >= 2 && *v237 == 184 && v237[1] == 3)
                            {
                              char v88 = v237 + 2;
                              *int v4 = (unint64_t)v88;
LABEL_646:
                              v488[0] = 0;
                              if ((unint64_t)v88 >= v82 || (char)*v88 < 0)
                              {
                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                if (!this) {
                                  return this;
                                }
                                unsigned int v239 = v488[0];
                                unint64_t v82 = *v5;
                                v240 = (unsigned __int8 *)*v4;
                              }
                              else
                              {
                                unsigned int v239 = *v88;
                                v240 = v88 + 1;
                                *int v4 = (unint64_t)v240;
                              }
                              *(unsigned char *)(v3 + 396) = v239 != 0;
                              *(_DWORD *)(v3 + 676) |= 0x2000000u;
                              if ((int)v82 - (int)v240 >= 2 && *v240 == 192 && v240[1] == 3)
                              {
                                uint64_t v89 = v240 + 2;
                                *int v4 = (unint64_t)v89;
LABEL_664:
                                if ((unint64_t)v89 >= v82 || (char)*v89 < 0)
                                {
                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v463);
                                  if (!this) {
                                    return this;
                                  }
                                  unint64_t v82 = *v5;
                                  v242 = (unsigned __int8 *)*v4;
                                }
                                else
                                {
                                  unsigned int *v463 = *v89;
                                  v242 = v89 + 1;
                                  *int v4 = (unint64_t)v242;
                                }
                                *(_DWORD *)(v3 + 676) |= 0x4000000u;
                                if ((int)v82 - (int)v242 >= 2 && *v242 == 200 && v242[1] == 3)
                                {
                                  unint64_t v90 = v242 + 2;
                                  *int v4 = (unint64_t)v90;
LABEL_682:
                                  if ((unint64_t)v90 >= v82 || (char)*v90 < 0)
                                  {
                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v462);
                                    if (!this) {
                                      return this;
                                    }
                                    unint64_t v82 = *v5;
                                    v244 = (unsigned __int8 *)*v4;
                                  }
                                  else
                                  {
                                    unsigned int *v462 = *v90;
                                    v244 = v90 + 1;
                                    *int v4 = (unint64_t)v244;
                                  }
                                  *(_DWORD *)(v3 + 676) |= 0x8000000u;
                                  if ((int)v82 - (int)v244 >= 2 && *v244 == 208 && v244[1] == 3)
                                  {
                                    int v91 = v244 + 2;
                                    *int v4 = (unint64_t)v91;
LABEL_700:
                                    if ((unint64_t)v91 >= v82 || (char)*v91 < 0)
                                    {
                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v461);
                                      if (!this) {
                                        return this;
                                      }
                                      unint64_t v82 = *v5;
                                      v246 = (unsigned __int8 *)*v4;
                                    }
                                    else
                                    {
                                      unsigned int *v461 = *v91;
                                      v246 = v91 + 1;
                                      *int v4 = (unint64_t)v246;
                                    }
                                    *(_DWORD *)(v3 + 676) |= 0x10000000u;
                                    if ((int)v82 - (int)v246 >= 2 && *v246 == 216 && v246[1] == 3)
                                    {
                                      unint64_t v92 = v246 + 2;
                                      *int v4 = (unint64_t)v92;
LABEL_715:
                                      if ((unint64_t)v92 >= v82 || (char)*v92 < 0)
                                      {
                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v460);
                                        if (!this) {
                                          return this;
                                        }
                                        unint64_t v82 = *v5;
                                        v247 = (unsigned __int8 *)*v4;
                                      }
                                      else
                                      {
                                        unsigned int *v460 = *v92;
                                        v247 = v92 + 1;
                                        *int v4 = (unint64_t)v247;
                                      }
                                      *(_DWORD *)(v3 + 676) |= 0x20000000u;
                                      if ((int)v82 - (int)v247 >= 2 && *v247 == 224 && v247[1] == 3)
                                      {
                                        int v93 = v247 + 2;
                                        *int v4 = (unint64_t)v93;
LABEL_724:
                                        if ((unint64_t)v93 >= v82 || (char)*v93 < 0)
                                        {
                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v459);
                                          if (!this) {
                                            return this;
                                          }
                                          unint64_t v82 = *v5;
                                          v248 = (unsigned __int8 *)*v4;
                                        }
                                        else
                                        {
                                          unsigned int *v459 = *v93;
                                          v248 = v93 + 1;
                                          *int v4 = (unint64_t)v248;
                                        }
                                        *(_DWORD *)(v3 + 676) |= 0x40000000u;
                                        if ((int)v82 - (int)v248 >= 2 && *v248 == 232 && v248[1] == 3)
                                        {
                                          v94 = v248 + 2;
                                          *int v4 = (unint64_t)v94;
LABEL_733:
                                          if ((unint64_t)v94 >= v82 || (char)*v94 < 0)
                                          {
                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v458);
                                            if (!this) {
                                              return this;
                                            }
                                            unint64_t v82 = *v5;
                                            v249 = (unsigned __int8 *)*v4;
                                          }
                                          else
                                          {
                                            unsigned int *v458 = *v94;
                                            v249 = v94 + 1;
                                            *int v4 = (unint64_t)v249;
                                          }
                                          *(_DWORD *)(v3 + 676) |= 0x80000000;
                                          if ((int)v82 - (int)v249 >= 2 && *v249 == 240 && v249[1] == 3)
                                          {
                                            int v95 = v249 + 2;
                                            *int v4 = (unint64_t)v95;
LABEL_742:
                                            if ((unint64_t)v95 >= v82 || (char)*v95 < 0)
                                            {
                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v457);
                                              if (!this) {
                                                return this;
                                              }
                                              unint64_t v82 = *v5;
                                              v250 = (unsigned __int8 *)*v4;
                                            }
                                            else
                                            {
                                              unsigned int *v457 = *v95;
                                              v250 = v95 + 1;
                                              *int v4 = (unint64_t)v250;
                                            }
                                            *(_DWORD *)(v3 + 680) |= 1u;
                                            if ((int)v82 - (int)v250 >= 2 && *v250 == 248 && v250[1] == 3)
                                            {
                                              v96 = v250 + 2;
                                              *int v4 = (unint64_t)v96;
LABEL_751:
                                              if ((unint64_t)v96 >= v82 || (char)*v96 < 0)
                                              {
                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v456);
                                                if (!this) {
                                                  return this;
                                                }
                                                unint64_t v82 = *v5;
                                                v251 = (unsigned __int8 *)*v4;
                                              }
                                              else
                                              {
                                                unsigned int *v456 = *v96;
                                                v251 = v96 + 1;
                                                *int v4 = (unint64_t)v251;
                                              }
                                              *(_DWORD *)(v3 + 680) |= 2u;
                                              if ((int)v82 - (int)v251 >= 2 && *v251 == 128 && v251[1] == 4)
                                              {
                                                int v97 = v251 + 2;
                                                *int v4 = (unint64_t)v97;
LABEL_760:
                                                if ((unint64_t)v97 >= v82 || (char)*v97 < 0)
                                                {
                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v455);
                                                  if (!this) {
                                                    return this;
                                                  }
                                                  unint64_t v82 = *v5;
                                                  v252 = (unsigned __int8 *)*v4;
                                                }
                                                else
                                                {
                                                  unsigned int *v455 = *v97;
                                                  v252 = v97 + 1;
                                                  *int v4 = (unint64_t)v252;
                                                }
                                                *(_DWORD *)(v3 + 680) |= 4u;
                                                if ((int)v82 - (int)v252 >= 2 && *v252 == 136 && v252[1] == 4)
                                                {
                                                  int v98 = v252 + 2;
                                                  *int v4 = (unint64_t)v98;
LABEL_769:
                                                  if ((unint64_t)v98 >= v82 || (char)*v98 < 0)
                                                  {
                                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v454);
                                                    if (!this) {
                                                      return this;
                                                    }
                                                    unint64_t v82 = *v5;
                                                    v253 = (unsigned __int8 *)*v4;
                                                  }
                                                  else
                                                  {
                                                    unsigned int *v454 = *v98;
                                                    v253 = v98 + 1;
                                                    *int v4 = (unint64_t)v253;
                                                  }
                                                  *(_DWORD *)(v3 + 680) |= 8u;
                                                  if ((int)v82 - (int)v253 >= 2 && *v253 == 144 && v253[1] == 4)
                                                  {
                                                    int v99 = v253 + 2;
                                                    *int v4 = (unint64_t)v99;
LABEL_778:
                                                    if ((unint64_t)v99 >= v82 || (char)*v99 < 0)
                                                    {
                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v453);
                                                      if (!this) {
                                                        return this;
                                                      }
                                                      unint64_t v82 = *v5;
                                                      v254 = (unsigned __int8 *)*v4;
                                                    }
                                                    else
                                                    {
                                                      unsigned int *v453 = *v99;
                                                      v254 = v99 + 1;
                                                      *int v4 = (unint64_t)v254;
                                                    }
                                                    *(_DWORD *)(v3 + 680) |= 0x10u;
                                                    if ((int)v82 - (int)v254 >= 2 && *v254 == 152 && v254[1] == 4)
                                                    {
                                                      int v100 = v254 + 2;
                                                      *int v4 = (unint64_t)v100;
LABEL_787:
                                                      if ((unint64_t)v100 >= v82 || (char)*v100 < 0)
                                                      {
                                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v452);
                                                        if (!this) {
                                                          return this;
                                                        }
                                                        unint64_t v82 = *v5;
                                                        v255 = (unsigned __int8 *)*v4;
                                                      }
                                                      else
                                                      {
                                                        unsigned int *v452 = *v100;
                                                        v255 = v100 + 1;
                                                        *int v4 = (unint64_t)v255;
                                                      }
                                                      *(_DWORD *)(v3 + 680) |= 0x20u;
                                                      if ((int)v82 - (int)v255 >= 2 && *v255 == 160 && v255[1] == 4)
                                                      {
                                                        unsigned int v101 = v255 + 2;
                                                        *int v4 = (unint64_t)v101;
LABEL_796:
                                                        if ((unint64_t)v101 >= v82 || (char)*v101 < 0)
                                                        {
                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v451);
                                                          if (!this) {
                                                            return this;
                                                          }
                                                          unint64_t v82 = *v5;
                                                          v256 = (unsigned __int8 *)*v4;
                                                        }
                                                        else
                                                        {
                                                          unsigned int *v451 = *v101;
                                                          v256 = v101 + 1;
                                                          *int v4 = (unint64_t)v256;
                                                        }
                                                        *(_DWORD *)(v3 + 680) |= 0x40u;
                                                        if ((int)v82 - (int)v256 >= 2 && *v256 == 168 && v256[1] == 4)
                                                        {
                                                          int v102 = v256 + 2;
                                                          *int v4 = (unint64_t)v102;
LABEL_805:
                                                          if ((unint64_t)v102 >= v82 || (char)*v102 < 0)
                                                          {
                                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v450);
                                                            if (!this) {
                                                              return this;
                                                            }
                                                            unint64_t v82 = *v5;
                                                            v257 = (unsigned __int8 *)*v4;
                                                          }
                                                          else
                                                          {
                                                            unsigned int *v450 = *v102;
                                                            v257 = v102 + 1;
                                                            *int v4 = (unint64_t)v257;
                                                          }
                                                          *(_DWORD *)(v3 + 680) |= 0x80u;
                                                          if ((int)v82 - (int)v257 >= 2 && *v257 == 176 && v257[1] == 4)
                                                          {
                                                            uint64_t v103 = v257 + 2;
                                                            *int v4 = (unint64_t)v103;
LABEL_814:
                                                            if ((unint64_t)v103 >= v82 || (char)*v103 < 0)
                                                            {
                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v449);
                                                              if (!this) {
                                                                return this;
                                                              }
                                                              unint64_t v82 = *v5;
                                                              v258 = (unsigned __int8 *)*v4;
                                                            }
                                                            else
                                                            {
                                                              unsigned int *v449 = *v103;
                                                              v258 = v103 + 1;
                                                              *int v4 = (unint64_t)v258;
                                                            }
                                                            *(_DWORD *)(v3 + 680) |= 0x100u;
                                                            if ((int)v82 - (int)v258 >= 2
                                                              && *v258 == 184
                                                              && v258[1] == 4)
                                                            {
                                                              int v104 = v258 + 2;
                                                              *int v4 = (unint64_t)v104;
LABEL_823:
                                                              unint64_t v106 = *v5;
                                                              if ((unint64_t)v104 >= *v5 || (char)*v104 < 0)
                                                              {
                                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v448);
                                                                if (!this) {
                                                                  return this;
                                                                }
                                                                unint64_t v106 = *v5;
                                                                v259 = (unsigned __int8 *)*v4;
                                                              }
                                                              else
                                                              {
                                                                unsigned int *v448 = *v104;
                                                                v259 = v104 + 1;
                                                                *int v4 = (unint64_t)v259;
                                                              }
                                                              *(_DWORD *)(v3 + 680) |= 0x200u;
                                                              if ((int)v106 - (int)v259 >= 2
                                                                && *v259 == 192
                                                                && v259[1] == 4)
                                                              {
                                                                char v105 = v259 + 2;
                                                                *int v4 = (unint64_t)v105;
LABEL_832:
                                                                if ((unint64_t)v105 >= v106 || (char)*v105 < 0)
                                                                {
                                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v447);
                                                                  if (!this) {
                                                                    return this;
                                                                  }
                                                                  unint64_t v106 = *v5;
                                                                  v260 = (unsigned __int8 *)*v4;
                                                                }
                                                                else
                                                                {
                                                                  unsigned int *v447 = *v105;
                                                                  v260 = v105 + 1;
                                                                  *int v4 = (unint64_t)v260;
                                                                }
                                                                *(_DWORD *)(v3 + 680) |= 0x400u;
                                                                if ((int)v106 - (int)v260 >= 2
                                                                  && *v260 == 200
                                                                  && v260[1] == 4)
                                                                {
                                                                  unint64_t v107 = v260 + 2;
                                                                  *int v4 = (unint64_t)v107;
LABEL_841:
                                                                  if ((unint64_t)v107 >= v106 || (char)*v107 < 0)
                                                                  {
                                                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v446);
                                                                    if (!this) {
                                                                      return this;
                                                                    }
                                                                    unint64_t v106 = *v5;
                                                                    v261 = (unsigned __int8 *)*v4;
                                                                  }
                                                                  else
                                                                  {
                                                                    unsigned int *v446 = *v107;
                                                                    v261 = v107 + 1;
                                                                    *int v4 = (unint64_t)v261;
                                                                  }
                                                                  *(_DWORD *)(v3 + 680) |= 0x800u;
                                                                  if ((int)v106 - (int)v261 >= 2
                                                                    && *v261 == 208
                                                                    && v261[1] == 4)
                                                                  {
                                                                    int v108 = v261 + 2;
                                                                    *int v4 = (unint64_t)v108;
LABEL_850:
                                                                    if ((unint64_t)v108 >= v106
                                                                      || (char)*v108 < 0)
                                                                    {
                                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v445);
                                                                      if (!this) {
                                                                        return this;
                                                                      }
                                                                      unint64_t v106 = *v5;
                                                                      v262 = (unsigned __int8 *)*v4;
                                                                    }
                                                                    else
                                                                    {
                                                                      unsigned int *v445 = *v108;
                                                                      v262 = v108 + 1;
                                                                      *int v4 = (unint64_t)v262;
                                                                    }
                                                                    *(_DWORD *)(v3 + 680) |= 0x1000u;
                                                                    if ((int)v106 - (int)v262 >= 2
                                                                      && *v262 == 216
                                                                      && v262[1] == 4)
                                                                    {
                                                                      unsigned int v109 = v262 + 2;
                                                                      *int v4 = (unint64_t)v109;
LABEL_859:
                                                                      if ((unint64_t)v109 >= v106
                                                                        || (char)*v109 < 0)
                                                                      {
                                                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v444);
                                                                        if (!this) {
                                                                          return this;
                                                                        }
                                                                        unint64_t v106 = *v5;
                                                                        v263 = (unsigned __int8 *)*v4;
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int *v444 = *v109;
                                                                        v263 = v109 + 1;
                                                                        *int v4 = (unint64_t)v263;
                                                                      }
                                                                      *(_DWORD *)(v3 + 680) |= 0x2000u;
                                                                      if ((int)v106 - (int)v263 >= 2
                                                                        && *v263 == 224
                                                                        && v263[1] == 4)
                                                                      {
                                                                        int v110 = v263 + 2;
                                                                        *int v4 = (unint64_t)v110;
LABEL_868:
                                                                        if ((unint64_t)v110 >= v106
                                                                          || (char)*v110 < 0)
                                                                        {
                                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v443);
                                                                          if (!this) {
                                                                            return this;
                                                                          }
                                                                          unint64_t v106 = *v5;
                                                                          v264 = (unsigned __int8 *)*v4;
                                                                        }
                                                                        else
                                                                        {
                                                                          unsigned int *v443 = *v110;
                                                                          v264 = v110 + 1;
                                                                          *int v4 = (unint64_t)v264;
                                                                        }
                                                                        *(_DWORD *)(v3 + 680) |= 0x4000u;
                                                                        if ((int)v106 - (int)v264 >= 2
                                                                          && *v264 == 232
                                                                          && v264[1] == 4)
                                                                        {
                                                                          unsigned int v111 = v264 + 2;
                                                                          *int v4 = (unint64_t)v111;
LABEL_877:
                                                                          if ((unint64_t)v111 >= v106
                                                                            || (char)*v111 < 0)
                                                                          {
                                                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v442);
                                                                            if (!this) {
                                                                              return this;
                                                                            }
                                                                            unint64_t v106 = *v5;
                                                                            v265 = (unsigned __int8 *)*v4;
                                                                          }
                                                                          else
                                                                          {
                                                                            unsigned int *v442 = *v111;
                                                                            v265 = v111 + 1;
                                                                            *int v4 = (unint64_t)v265;
                                                                          }
                                                                          *(_DWORD *)(v3 + 680) |= 0x8000u;
                                                                          if ((int)v106 - (int)v265 >= 2
                                                                            && *v265 == 240
                                                                            && v265[1] == 4)
                                                                          {
                                                                            int v112 = v265 + 2;
                                                                            *int v4 = (unint64_t)v112;
LABEL_886:
                                                                            if ((unint64_t)v112 >= v106
                                                                              || (char)*v112 < 0)
                                                                            {
                                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v441);
                                                                              if (!this) {
                                                                                return this;
                                                                              }
                                                                              unint64_t v106 = *v5;
                                                                              v266 = (unsigned __int8 *)*v4;
                                                                            }
                                                                            else
                                                                            {
                                                                              unsigned int *v441 = *v112;
                                                                              v266 = v112 + 1;
                                                                              *int v4 = (unint64_t)v266;
                                                                            }
                                                                            *(_DWORD *)(v3 + 680) |= 0x10000u;
                                                                            if ((int)v106 - (int)v266 >= 2
                                                                              && *v266 == 248
                                                                              && v266[1] == 4)
                                                                            {
                                                                              char v113 = v266 + 2;
                                                                              *int v4 = (unint64_t)v113;
LABEL_895:
                                                                              if ((unint64_t)v113 >= v106
                                                                                || (char)*v113 < 0)
                                                                              {
                                                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v440);
                                                                                if (!this) {
                                                                                  return this;
                                                                                }
                                                                                unint64_t v106 = *v5;
                                                                                v267 = (unsigned __int8 *)*v4;
                                                                              }
                                                                              else
                                                                              {
                                                                                unsigned int *v440 = *v113;
                                                                                v267 = v113 + 1;
                                                                                *int v4 = (unint64_t)v267;
                                                                              }
                                                                              *(_DWORD *)(v3 + 680) |= 0x20000u;
                                                                              if ((int)v106 - (int)v267 >= 2
                                                                                && *v267 == 128
                                                                                && v267[1] == 5)
                                                                              {
                                                                                int v114 = v267 + 2;
                                                                                *int v4 = (unint64_t)v114;
LABEL_904:
                                                                                if ((unint64_t)v114 >= v106
                                                                                  || (char)*v114 < 0)
                                                                                {
                                                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v439);
                                                                                  if (!this) {
                                                                                    return this;
                                                                                  }
                                                                                  unint64_t v106 = *v5;
                                                                                  v268 = (unsigned __int8 *)*v4;
                                                                                }
                                                                                else
                                                                                {
                                                                                  unsigned int *v439 = *v114;
                                                                                  v268 = v114 + 1;
                                                                                  *int v4 = (unint64_t)v268;
                                                                                }
                                                                                *(_DWORD *)(v3 + 680) |= 0x40000u;
                                                                                if ((int)v106 - (int)v268 >= 2
                                                                                  && *v268 == 136
                                                                                  && v268[1] == 5)
                                                                                {
                                                                                  unint64_t v115 = v268 + 2;
                                                                                  *int v4 = (unint64_t)v115;
LABEL_913:
                                                                                  if ((unint64_t)v115 >= v106
                                                                                    || (char)*v115 < 0)
                                                                                  {
                                                                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v438);
                                                                                    if (!this) {
                                                                                      return this;
                                                                                    }
                                                                                    unint64_t v106 = *v5;
                                                                                    v269 = (unsigned __int8 *)*v4;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    unsigned int *v438 = *v115;
                                                                                    v269 = v115 + 1;
                                                                                    *int v4 = (unint64_t)v269;
                                                                                  }
                                                                                  *(_DWORD *)(v3 + 680) |= 0x80000u;
                                                                                  if ((int)v106 - (int)v269 >= 2
                                                                                    && *v269 == 144
                                                                                    && v269[1] == 5)
                                                                                  {
                                                                                    int v116 = v269 + 2;
                                                                                    *int v4 = (unint64_t)v116;
LABEL_922:
                                                                                    if ((unint64_t)v116 >= v106
                                                                                      || (char)*v116 < 0)
                                                                                    {
                                                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v437);
                                                                                      if (!this) {
                                                                                        return this;
                                                                                      }
                                                                                      unint64_t v106 = *v5;
                                                                                      v270 = (unsigned __int8 *)*v4;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      unsigned int *v437 = *v116;
                                                                                      v270 = v116 + 1;
                                                                                      *int v4 = (unint64_t)v270;
                                                                                    }
                                                                                    *(_DWORD *)(v3 + 680) |= 0x100000u;
                                                                                    if ((int)v106 - (int)v270 >= 2
                                                                                      && *v270 == 152
                                                                                      && v270[1] == 5)
                                                                                    {
                                                                                      unsigned int v117 = v270 + 2;
                                                                                      *int v4 = (unint64_t)v117;
LABEL_931:
                                                                                      v488[0] = 0;
                                                                                      if ((unint64_t)v117 >= v106
                                                                                        || (char)*v117 < 0)
                                                                                      {
                                                                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                        if (!this) {
                                                                                          return this;
                                                                                        }
                                                                                        unsigned int v271 = v488[0];
                                                                                        unint64_t v106 = *v5;
                                                                                        v272 = (unsigned __int8 *)*v4;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        unsigned int v271 = *v117;
                                                                                        v272 = v117 + 1;
                                                                                        *int v4 = (unint64_t)v272;
                                                                                      }
                                                                                      *(unsigned char *)(v3 + 397) = v271 != 0;
                                                                                      *(_DWORD *)(v3 + 680) |= 0x200000u;
                                                                                      if ((int)v106 - (int)v272 >= 2
                                                                                        && *v272 == 160
                                                                                        && v272[1] == 5)
                                                                                      {
                                                                                        int v118 = v272 + 2;
                                                                                        *int v4 = (unint64_t)v118;
LABEL_940:
                                                                                        if ((unint64_t)v118 >= v106
                                                                                          || (char)*v118 < 0)
                                                                                        {
                                                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v436);
                                                                                          if (!this) {
                                                                                            return this;
                                                                                          }
                                                                                          unint64_t v106 = *v5;
                                                                                          v273 = (unsigned __int8 *)*v4;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          unsigned int *v436 = *v118;
                                                                                          v273 = v118 + 1;
                                                                                          *int v4 = (unint64_t)v273;
                                                                                        }
                                                                                        int v119 = *(_DWORD *)(v3 + 680) | 0x400000;
                                                                                        *(_DWORD *)(v3 + 680) = v119;
                                                                                        if ((int)v106 - (int)v273 >= 2
                                                                                          && *v273 == 170
                                                                                          && v273[1] == 5)
                                                                                        {
                                                                                          *int v4 = (unint64_t)(v273 + 2);
LABEL_230:
                                                                                          *(_DWORD *)(v3 + 680) = v119 | 0x800000;
                                                                                          if (*(void *)(v3 + 408) == v11) {
                                                                                            operator new();
                                                                                          }
                                                                                          this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                                                                                          if (!this) {
                                                                                            return this;
                                                                                          }
                                                                                          unint64_t v120 = *v5;
                                                                                          v121 = (unsigned __int8 *)*v4;
                                                                                          if ((int)(*v5 - *v4) >= 2
                                                                                            && *v121 == 176
                                                                                            && v121[1] == 5)
                                                                                          {
                                                                                            int v122 = (char *)(v121 + 2);
                                                                                            *int v4 = (unint64_t)v122;
LABEL_239:
                                                                                            v488[0] = 0;
                                                                                            if ((unint64_t)v122 >= v120
                                                                                              || *v122 < 0)
                                                                                            {
                                                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                              if (!this) {
                                                                                                return this;
                                                                                              }
                                                                                              unsigned int v123 = v488[0];
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              unsigned int v123 = *v122;
                                                                                              *int v4 = (unint64_t)(v122 + 1);
                                                                                            }
                                                                                            if (v123 <= 2)
                                                                                            {
                                                                                              *(_DWORD *)(v3 + 680) |= 0x1000000u;
                                                                                              *(_DWORD *)(v3 + 416) = v123;
                                                                                            }
                                                                                            unint64_t v125 = *v5;
                                                                                            v186 = (unsigned __int8 *)*v4;
                                                                                            if ((int)(*v5 - *v4) >= 2
                                                                                              && *v186 == 184
                                                                                              && v186[1] == 5)
                                                                                            {
                                                                                              int v124 = (char *)(v186 + 2);
                                                                                              *int v4 = (unint64_t)v124;
LABEL_403:
                                                                                              v488[0] = 0;
                                                                                              if ((unint64_t)v124 >= v125
                                                                                                || *v124 < 0)
                                                                                              {
                                                                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                                if (!this) {
                                                                                                  return this;
                                                                                                }
                                                                                                unsigned int v187 = v488[0];
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                unsigned int v187 = *v124;
                                                                                                *int v4 = (unint64_t)(v124 + 1);
                                                                                              }
                                                                                              if (v187 <= 5)
                                                                                              {
                                                                                                *(_DWORD *)(v3 + 680) |= 0x2000000u;
                                                                                                *(_DWORD *)(v3 + 420) = v187;
                                                                                              }
                                                                                              unint64_t v127 = *v5;
                                                                                              v196 = (unsigned __int8 *)*v4;
                                                                                              if ((int)(*v5 - *v4) >= 2
                                                                                                && *v196 == 192
                                                                                                && v196[1] == 5)
                                                                                              {
                                                                                                int v126 = v196 + 2;
                                                                                                *int v4 = (unint64_t)v126;
LABEL_452:
                                                                                                v488[0] = 0;
                                                                                                if ((unint64_t)v126 >= v127 || (char)*v126 < 0)
                                                                                                {
                                                                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                                  if (!this) {
                                                                                                    return this;
                                                                                                  }
                                                                                                  unsigned int v197 = v488[0];
                                                                                                  unint64_t v127 = *v5;
                                                                                                  v198 = (unsigned __int8 *)*v4;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  unsigned int v197 = *v126;
                                                                                                  v198 = v126 + 1;
                                                                                                  *int v4 = (unint64_t)v198;
                                                                                                }
                                                                                                *(unsigned char *)(v3 + 398) = v197 != 0;
                                                                                                *(_DWORD *)(v3 + 680) |= 0x4000000u;
                                                                                                if ((int)v127 - (int)v198 >= 2 && *v198 == 202)
                                                                                                {
                                                                                                  while (1)
                                                                                                  {
                                                                                                    if (v198[1] != 5) {
                                                                                                      goto LABEL_2;
                                                                                                    }
                                                                                                    *int v4 = (unint64_t)(v198 + 2);
LABEL_1317:
                                                                                                    int v340 = *(_DWORD *)(v3 + 432);
                                                                                                    int v341 = *(_DWORD *)(v3 + 436);
                                                                                                    if (v340 >= v341)
                                                                                                    {
                                                                                                      if (v341 == *(_DWORD *)(v3 + 440))
                                                                                                      {
                                                                                                        this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v411);
                                                                                                        int v341 = *(_DWORD *)(v3 + 436);
                                                                                                      }
                                                                                                      *(_DWORD *)(v3 + 436) = v341 + 1;
                                                                                                      uint64_t v342 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)this);
                                                                                                      uint64_t v343 = *(void *)(v3 + 424);
                                                                                                      uint64_t v344 = *(int *)(v3 + 432);
                                                                                                      *(_DWORD *)(v3 + 432) = v344 + 1;
                                                                                                      *(void *)(v343 + 8 * v344) = v342;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      *(_DWORD *)(v3 + 432) = v340 + 1;
                                                                                                    }
                                                                                                    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                                                                                                    if (!this) {
                                                                                                      return this;
                                                                                                    }
                                                                                                    unint64_t v129 = *v5;
                                                                                                    v198 = (unsigned __int8 *)*v4;
                                                                                                    if ((int)(*v5 - *v4) < 2) {
                                                                                                      goto LABEL_2;
                                                                                                    }
                                                                                                    int v345 = *v198;
                                                                                                    if (v345 == 208) {
                                                                                                      break;
                                                                                                    }
                                                                                                    if (v345 != 202) {
                                                                                                      goto LABEL_2;
                                                                                                    }
                                                                                                  }
                                                                                                  if (v198[1] == 5)
                                                                                                  {
                                                                                                    int v128 = v198 + 2;
                                                                                                    *int v4 = (unint64_t)v128;
LABEL_1330:
                                                                                                    if ((unint64_t)v128 >= v129 || (char)*v128 < 0)
                                                                                                    {
                                                                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v415);
                                                                                                      if (!this) {
                                                                                                        return this;
                                                                                                      }
                                                                                                      unint64_t v129 = *v5;
                                                                                                      v346 = (unsigned __int8 *)*v4;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      unsigned int *v415 = *v128;
                                                                                                      v346 = v128 + 1;
                                                                                                      *int v4 = (unint64_t)v346;
                                                                                                    }
                                                                                                    *(_DWORD *)(v3 + 680) |= 0x10000000u;
                                                                                                    if ((int)v129 - (int)v346 >= 2 && *v346 == 216 && v346[1] == 5)
                                                                                                    {
                                                                                                      uint64_t v130 = v346 + 2;
                                                                                                      *int v4 = (unint64_t)v130;
LABEL_1339:
                                                                                                      if ((unint64_t)v130 >= v129 || (char)*v130 < 0)
                                                                                                      {
                                                                                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v417);
                                                                                                        if (!this) {
                                                                                                          return this;
                                                                                                        }
                                                                                                        unint64_t v129 = *v5;
                                                                                                        v347 = (unsigned __int8 *)*v4;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        unint64_t *v417 = *v130;
                                                                                                        v347 = v130 + 1;
                                                                                                        *int v4 = (unint64_t)v347;
                                                                                                      }
                                                                                                      *(_DWORD *)(v3 + 680) |= 0x20000000u;
                                                                                                      if ((int)v129 - (int)v347 >= 2 && *v347 == 224 && v347[1] == 5)
                                                                                                      {
                                                                                                        unint64_t v131 = v347 + 2;
                                                                                                        *int v4 = (unint64_t)v131;
LABEL_1348:
                                                                                                        if ((unint64_t)v131 >= v129 || (char)*v131 < 0)
                                                                                                        {
                                                                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v419);
                                                                                                          if (!this) {
                                                                                                            return this;
                                                                                                          }
                                                                                                          unint64_t v129 = *v5;
                                                                                                          v348 = (unsigned __int8 *)*v4;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          unint64_t *v419 = *v131;
                                                                                                          v348 = v131 + 1;
                                                                                                          *int v4 = (unint64_t)v348;
                                                                                                        }
                                                                                                        *(_DWORD *)(v3 + 680) |= 0x40000000u;
                                                                                                        if ((int)v129 - (int)v348 >= 2 && *v348 == 232 && v348[1] == 5)
                                                                                                        {
                                                                                                          int v132 = v348 + 2;
                                                                                                          *int v4 = (unint64_t)v132;
LABEL_1357:
                                                                                                          if ((unint64_t)v132 >= v129 || (char)*v132 < 0)
                                                                                                          {
                                                                                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v421);
                                                                                                            if (!this) {
                                                                                                              return this;
                                                                                                            }
                                                                                                            unint64_t v129 = *v5;
                                                                                                            v349 = (unsigned __int8 *)*v4;
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            unsigned int *v421 = *v132;
                                                                                                            v349 = v132 + 1;
                                                                                                            *int v4 = (unint64_t)v349;
                                                                                                          }
                                                                                                          *(_DWORD *)(v3 + 680) |= 0x80000000;
                                                                                                          if ((int)v129 - (int)v349 >= 2 && *v349 == 240 && v349[1] == 5)
                                                                                                          {
                                                                                                            char v133 = v349 + 2;
                                                                                                            *int v4 = (unint64_t)v133;
LABEL_1366:
                                                                                                            if ((unint64_t)v133 >= v129 || (char)*v133 < 0)
                                                                                                            {
                                                                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v423);
                                                                                                              if (!this) {
                                                                                                                return this;
                                                                                                              }
                                                                                                              unint64_t v129 = *v5;
                                                                                                              v350 = (unsigned __int8 *)*v4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              unsigned int *v423 = *v133;
                                                                                                              v350 = v133 + 1;
                                                                                                              *int v4 = (unint64_t)v350;
                                                                                                            }
                                                                                                            *(_DWORD *)(v3 + 684) |= 1u;
                                                                                                            if ((int)v129 - (int)v350 >= 2 && *v350 == 248 && v350[1] == 5)
                                                                                                            {
                                                                                                              uint64_t v134 = v350 + 2;
                                                                                                              *int v4 = (unint64_t)v134;
LABEL_1375:
                                                                                                              if ((unint64_t)v134 >= v129 || (char)*v134 < 0)
                                                                                                              {
                                                                                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v425);
                                                                                                                if (!this) {
                                                                                                                  return this;
                                                                                                                }
                                                                                                                unint64_t v129 = *v5;
                                                                                                                v351 = (unsigned __int8 *)*v4;
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                unint64_t *v425 = *v134;
                                                                                                                v351 = v134 + 1;
                                                                                                                *int v4 = (unint64_t)v351;
                                                                                                              }
                                                                                                              *(_DWORD *)(v3 + 684) |= 2u;
                                                                                                              if ((int)v129 - (int)v351 >= 2 && *v351 == 128 && v351[1] == 6)
                                                                                                              {
                                                                                                                unint64_t v135 = v351 + 2;
                                                                                                                *int v4 = (unint64_t)v135;
LABEL_1384:
                                                                                                                if ((unint64_t)v135 >= v129 || (char)*v135 < 0)
                                                                                                                {
                                                                                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v435);
                                                                                                                  if (!this) {
                                                                                                                    return this;
                                                                                                                  }
                                                                                                                  unint64_t v129 = *v5;
                                                                                                                  v352 = (unsigned __int8 *)*v4;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  unint64_t *v435 = *v135;
                                                                                                                  v352 = v135 + 1;
                                                                                                                  *int v4 = (unint64_t)v352;
                                                                                                                }
                                                                                                                *(_DWORD *)(v3 + 684) |= 4u;
                                                                                                                if ((int)v129 - (int)v352 >= 2 && *v352 == 136 && v352[1] == 6)
                                                                                                                {
                                                                                                                  int v136 = v352 + 2;
                                                                                                                  *int v4 = (unint64_t)v136;
LABEL_1393:
                                                                                                                  if ((unint64_t)v136 >= v129 || (char)*v136 < 0)
                                                                                                                  {
                                                                                                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v434);
                                                                                                                    if (!this) {
                                                                                                                      return this;
                                                                                                                    }
                                                                                                                    unint64_t v129 = *v5;
                                                                                                                    v353 = (unsigned __int8 *)*v4;
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    unsigned int *v434 = *v136;
                                                                                                                    v353 = v136 + 1;
                                                                                                                    *int v4 = (unint64_t)v353;
                                                                                                                  }
                                                                                                                  *(_DWORD *)(v3 + 684) |= 8u;
                                                                                                                  if ((int)v129 - (int)v353 >= 2 && *v353 == 144 && v353[1] == 6)
                                                                                                                  {
                                                                                                                    int v137 = v353 + 2;
                                                                                                                    *int v4 = (unint64_t)v137;
LABEL_1402:
                                                                                                                    if ((unint64_t)v137 >= v129 || (char)*v137 < 0)
                                                                                                                    {
                                                                                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v433);
                                                                                                                      if (!this) {
                                                                                                                        return this;
                                                                                                                      }
                                                                                                                      unint64_t v129 = *v5;
                                                                                                                      v354 = (unsigned __int8 *)*v4;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      unsigned int *v433 = *v137;
                                                                                                                      v354 = v137 + 1;
                                                                                                                      *int v4 = (unint64_t)v354;
                                                                                                                    }
                                                                                                                    *(_DWORD *)(v3 + 684) |= 0x10u;
                                                                                                                    if ((int)v129 - (int)v354 >= 2 && *v354 == 152 && v354[1] == 6)
                                                                                                                    {
                                                                                                                      uint64_t v138 = v354 + 2;
                                                                                                                      *int v4 = (unint64_t)v138;
LABEL_1411:
                                                                                                                      if ((unint64_t)v138 >= v129 || (char)*v138 < 0)
                                                                                                                      {
                                                                                                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v432);
                                                                                                                        if (!this) {
                                                                                                                          return this;
                                                                                                                        }
                                                                                                                        unint64_t v129 = *v5;
                                                                                                                        v355 = (unsigned __int8 *)*v4;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        unsigned int *v432 = *v138;
                                                                                                                        v355 = v138 + 1;
                                                                                                                        *int v4 = (unint64_t)v355;
                                                                                                                      }
                                                                                                                      *(_DWORD *)(v3 + 684) |= 0x20u;
                                                                                                                      if ((int)v129 - (int)v355 >= 2 && *v355 == 160 && v355[1] == 6)
                                                                                                                      {
                                                                                                                        v139 = v355 + 2;
                                                                                                                        *int v4 = (unint64_t)v139;
LABEL_1420:
                                                                                                                        v488[0] = 0;
                                                                                                                        if ((unint64_t)v139 >= v129 || (char)*v139 < 0)
                                                                                                                        {
                                                                                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                                                          if (!this) {
                                                                                                                            return this;
                                                                                                                          }
                                                                                                                          unsigned int v356 = v488[0];
                                                                                                                          unint64_t v129 = *v5;
                                                                                                                          v357 = (unsigned __int8 *)*v4;
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          unsigned int v356 = *v139;
                                                                                                                          v357 = v139 + 1;
                                                                                                                          *int v4 = (unint64_t)v357;
                                                                                                                        }
                                                                                                                        *(unsigned char *)(v3 + 399) = v356 != 0;
                                                                                                                        *(_DWORD *)(v3 + 684) |= 0x40u;
                                                                                                                        if ((int)v129 - (int)v357 >= 2 && *v357 == 168 && v357[1] == 6)
                                                                                                                        {
                                                                                                                          uint64_t v140 = v357 + 2;
                                                                                                                          *int v4 = (unint64_t)v140;
LABEL_1429:
                                                                                                                          if ((unint64_t)v140 >= v129 || (char)*v140 < 0)
                                                                                                                          {
                                                                                                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v431);
                                                                                                                            if (!this) {
                                                                                                                              return this;
                                                                                                                            }
                                                                                                                            unint64_t v129 = *v5;
                                                                                                                            v358 = (unsigned __int8 *)*v4;
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            unsigned int *v431 = *v140;
                                                                                                                            v358 = v140 + 1;
                                                                                                                            *int v4 = (unint64_t)v358;
                                                                                                                          }
                                                                                                                          *(_DWORD *)(v3 + 684) |= 0x80u;
                                                                                                                          if ((int)v129 - (int)v358 >= 2 && *v358 == 176 && v358[1] == 6)
                                                                                                                          {
                                                                                                                            unsigned int v141 = v358 + 2;
                                                                                                                            *int v4 = (unint64_t)v141;
LABEL_1438:
                                                                                                                            if ((unint64_t)v141 >= v129 || (char)*v141 < 0)
                                                                                                                            {
                                                                                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v430);
                                                                                                                              if (!this) {
                                                                                                                                return this;
                                                                                                                              }
                                                                                                                              unint64_t v129 = *v5;
                                                                                                                              v359 = (unsigned __int8 *)*v4;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              unsigned int *v430 = *v141;
                                                                                                                              v359 = v141 + 1;
                                                                                                                              *int v4 = (unint64_t)v359;
                                                                                                                            }
                                                                                                                            *(_DWORD *)(v3 + 684) |= 0x100u;
                                                                                                                            if ((int)v129 - (int)v359 >= 2 && *v359 == 184 && v359[1] == 6)
                                                                                                                            {
                                                                                                                              char v142 = v359 + 2;
                                                                                                                              *int v4 = (unint64_t)v142;
LABEL_1447:
                                                                                                                              v488[0] = 0;
                                                                                                                              if ((unint64_t)v142 >= v129 || (char)*v142 < 0)
                                                                                                                              {
                                                                                                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                                                                                                if (!this) {
                                                                                                                                  return this;
                                                                                                                                }
                                                                                                                                unsigned int v360 = v488[0];
                                                                                                                                unint64_t v129 = *v5;
                                                                                                                                v361 = (unsigned __int8 *)*v4;
                                                                                                                              }
                                                                                                                              else
                                                                                                                              {
                                                                                                                                unsigned int v360 = *v142;
                                                                                                                                v361 = v142 + 1;
                                                                                                                                *int v4 = (unint64_t)v361;
                                                                                                                              }
                                                                                                                              *(unsigned char *)(v3 + 620) = v360 != 0;
                                                                                                                              *(_DWORD *)(v3 + 684) |= 0x200u;
                                                                                                                              if ((int)v129 - (int)v361 >= 2 && *v361 == 194) {
                                                                                                                                break;
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  while (1)
  {
    if (v361[1] != 6) {
      goto LABEL_2;
    }
    *int v4 = (unint64_t)(v361 + 2);
LABEL_1456:
    uint64_t v362 = *(int *)(v3 + 520);
    int v363 = *(_DWORD *)(v3 + 524);
    if ((int)v362 >= v363)
    {
      if (v363 == *(_DWORD *)(v3 + 528))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v409);
        int v363 = *(_DWORD *)(v3 + 524);
      }
      *(_DWORD *)(v3 + 524) = v363 + 1;
      operator new();
    }
    v364 = v10;
    v365 = v7;
    uint64_t v366 = v11;
    v405 = v364;
    uint64_t v367 = *(void *)(v3 + 512);
    *(_DWORD *)(v3 + 520) = v362 + 1;
    v368 = *(awd::metrics::ATM_CallEndEvent_myreason **)(v367 + 8 * v362);
    v488[0] = 0;
    v369 = (char *)*v4;
    if (*v4 >= *v5 || *v369 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488)) {
        return 0;
      }
    }
    else
    {
      v488[0] = *v369;
      *int v4 = (unint64_t)(v369 + 1);
    }
    int v370 = *((_DWORD *)a2 + 14);
    int v371 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v370 + 1;
    if (v370 >= v371) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!awd::metrics::ATM_CallEndEvent_myreason::MergePartialFromCodedStream(v368, a2)
      || !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v372 = *((_DWORD *)a2 + 14);
    BOOL v373 = __OFSUB__(v372, 1);
    int v374 = v372 - 1;
    if (v374 < 0 == v373) {
      *((_DWORD *)a2 + 14) = v374;
    }
    unint64_t v144 = *v5;
    v361 = (unsigned __int8 *)*v4;
    uint64_t v11 = v366;
    uint64_t v7 = v365;
    uint64_t v10 = v405;
    if ((int)(*v5 - *v4) <= 1) {
      goto LABEL_2;
    }
    int v375 = *v361;
    if (v375 == 200)
    {
      while (v361[1] == 6)
      {
        uint64_t v143 = (char *)(v361 + 2);
        *int v4 = (unint64_t)v143;
LABEL_1476:
        v488[0] = 0;
        v403 = v9;
        v404 = v10;
        if ((unint64_t)v143 >= v144 || *v143 < 0)
        {
          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
          if (!this) {
            return this;
          }
          v182 = v7;
          unsigned int v376 = v488[0];
        }
        else
        {
          v182 = v7;
          unsigned int v376 = *v143;
          *int v4 = (unint64_t)(v143 + 1);
        }
        BOOL v377 = v376 != 0;
        int v378 = *(_DWORD *)(v3 + 544);
        int v379 = *(_DWORD *)(v3 + 548);
        if (v378 == v379)
        {
          this = wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(v6, v378 + 1);
          int v378 = *(_DWORD *)(v3 + 544);
          int v379 = *(_DWORD *)(v3 + 548);
        }
        uint64_t v380 = *(void *)(v3 + 536);
        int v381 = v378 + 1;
        *(_DWORD *)(v3 + 544) = v378 + 1;
        *(unsigned char *)(v380 + v378) = v377;
        if (v379 - (v378 + 1) >= 1)
        {
          int v382 = v379 - v378;
          do
          {
            unint64_t v383 = *v5;
            v384 = (unsigned __int8 *)*v4;
            if ((int)(*v5 - *v4) < 2 || *v384 != 200 || v384[1] != 6) {
              break;
            }
            *int v4 = (unint64_t)(v384 + 2);
            v488[0] = 0;
            if ((unint64_t)(v384 + 2) >= v383 || (char)v384[2] < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
              if (!this) {
                return this;
              }
              uint64_t v385 = v11;
              unsigned int v386 = v488[0];
              int v381 = *(_DWORD *)(v3 + 544);
            }
            else
            {
              uint64_t v385 = v11;
              unsigned int v386 = v384[2];
              *int v4 = (unint64_t)(v384 + 3);
            }
            BOOL v387 = v386 != 0;
            if (v381 >= *(_DWORD *)(v3 + 548))
            {
              wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
              wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
              wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
              wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v488);
              int v381 = *(_DWORD *)(v3 + 544);
            }
            uint64_t v388 = *(void *)(v3 + 536);
            *(_DWORD *)(v3 + 544) = v381 + 1;
            *(unsigned char *)(v388 + v381) = v387;
            --v382;
            ++v381;
            uint64_t v11 = v385;
          }
          while (v382 > 1);
        }
LABEL_1496:
        unint64_t v144 = *v5;
        v361 = (unsigned __int8 *)*v4;
        uint64_t v7 = v182;
        uint64_t v9 = v403;
        uint64_t v10 = v404;
        if ((int)(*v5 - *v4) <= 1) {
          break;
        }
        int v389 = *v361;
        if (v389 == 208)
        {
          if (v361[1] == 6)
          {
            int v145 = v361 + 2;
            *int v4 = (unint64_t)v145;
LABEL_1502:
            if ((unint64_t)v145 >= v144 || (char)*v145 < 0)
            {
              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v484);
              if (!this) {
                return this;
              }
              unint64_t v144 = *v5;
              v390 = (unsigned __int8 *)*v4;
            }
            else
            {
              unsigned int *v484 = *v145;
              v390 = v145 + 1;
              *int v4 = (unint64_t)v390;
            }
            *(_DWORD *)(v3 + 684) |= 0x1000u;
            if ((int)v144 - (int)v390 >= 2 && *v390 == 216 && v390[1] == 6)
            {
              v146 = v390 + 2;
              *int v4 = (unint64_t)v146;
LABEL_1511:
              if ((unint64_t)v146 >= v144 || (char)*v146 < 0)
              {
                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v480);
                if (!this) {
                  return this;
                }
                unint64_t v144 = *v5;
                v391 = (unsigned __int8 *)*v4;
              }
              else
              {
                unsigned int *v480 = *v146;
                v391 = v146 + 1;
                *int v4 = (unint64_t)v391;
              }
              *(_DWORD *)(v3 + 684) |= 0x2000u;
              if ((int)v144 - (int)v391 >= 2 && *v391 == 224 && v391[1] == 6)
              {
                v147 = v391 + 2;
                *int v4 = (unint64_t)v147;
LABEL_1520:
                if ((unint64_t)v147 >= v144 || (char)*v147 < 0)
                {
                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v477);
                  if (!this) {
                    return this;
                  }
                  unint64_t v144 = *v5;
                  v392 = (unsigned __int8 *)*v4;
                }
                else
                {
                  unsigned int *v477 = *v147;
                  v392 = v147 + 1;
                  *int v4 = (unint64_t)v392;
                }
                *(_DWORD *)(v3 + 684) |= 0x4000u;
                if ((int)v144 - (int)v392 >= 2 && *v392 == 234)
                {
                  while (1)
                  {
                    if (v392[1] != 6) {
                      goto LABEL_2;
                    }
                    *int v4 = (unint64_t)(v392 + 2);
LABEL_1529:
                    uint64_t v393 = *(int *)(v3 + 568);
                    int v394 = *(_DWORD *)(v3 + 572);
                    if ((int)v393 >= v394)
                    {
                      if (v394 == *(_DWORD *)(v3 + 576))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v410);
                        int v394 = *(_DWORD *)(v3 + 572);
                      }
                      *(_DWORD *)(v3 + 572) = v394 + 1;
                      operator new();
                    }
                    uint64_t v395 = *(void *)(v3 + 560);
                    *(_DWORD *)(v3 + 568) = v393 + 1;
                    v396 = *(awd::metrics::ATM_CallEndEvent_handover **)(v395 + 8 * v393);
                    v488[0] = 0;
                    v397 = (char *)*v4;
                    if (*v4 >= *v5 || *v397 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488))return 0; {
                    }
                      }
                    else
                    {
                      v488[0] = *v397;
                      *int v4 = (unint64_t)(v397 + 1);
                    }
                    int v398 = *((_DWORD *)a2 + 14);
                    int v399 = *((_DWORD *)a2 + 15);
                    *((_DWORD *)a2 + 14) = v398 + 1;
                    if (v398 >= v399) {
                      return 0;
                    }
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
                    if (!awd::metrics::ATM_CallEndEvent_handover::MergePartialFromCodedStream(v396, a2)
                      || !*((unsigned char *)a2 + 36))
                    {
                      return 0;
                    }
                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
                    int v400 = *((_DWORD *)a2 + 14);
                    BOOL v373 = __OFSUB__(v400, 1);
                    int v401 = v400 - 1;
                    if (v401 < 0 == v373) {
                      *((_DWORD *)a2 + 14) = v401;
                    }
                    unint64_t v149 = *v5;
                    v392 = (unsigned __int8 *)*v4;
                    uint64_t v11 = MEMORY[0x1E4FBA920];
                    if ((int)(*v5 - *v4) <= 1) {
                      goto LABEL_2;
                    }
                    int v402 = *v392;
                    if (v402 == 240) {
                      break;
                    }
                    if (v402 != 234) {
                      goto LABEL_2;
                    }
                  }
                  if (v392[1] == 6)
                  {
                    v148 = v392 + 2;
                    *int v4 = (unint64_t)v148;
LABEL_291:
                    if ((unint64_t)v148 >= v149 || (char)*v148 < 0)
                    {
                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v413);
                      if (!this) {
                        return this;
                      }
                      unint64_t v149 = *v5;
                      v150 = (unsigned __int8 *)*v4;
                    }
                    else
                    {
                      unsigned int *v413 = *v148;
                      v150 = v148 + 1;
                      *int v4 = (unint64_t)v150;
                    }
                    *(_DWORD *)(v3 + 684) |= 0x10000u;
                    if ((int)v149 - (int)v150 >= 2 && *v150 == 248 && v150[1] == 6)
                    {
                      v151 = v150 + 2;
                      *int v4 = (unint64_t)v151;
LABEL_955:
                      if ((unint64_t)v151 >= v149 || (char)*v151 < 0)
                      {
                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v414);
                        if (!this) {
                          return this;
                        }
                        unint64_t v149 = *v5;
                        v274 = (unsigned __int8 *)*v4;
                      }
                      else
                      {
                        unsigned int *v414 = *v151;
                        v274 = v151 + 1;
                        *int v4 = (unint64_t)v274;
                      }
                      *(_DWORD *)(v3 + 684) |= 0x20000u;
                      if ((int)v149 - (int)v274 >= 2 && *v274 == 128 && v274[1] == 7)
                      {
                        v152 = v274 + 2;
                        *int v4 = (unint64_t)v152;
LABEL_964:
                        if ((unint64_t)v152 >= v149 || (char)*v152 < 0)
                        {
                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v416);
                          if (!this) {
                            return this;
                          }
                          unint64_t v149 = *v5;
                          v275 = (unsigned __int8 *)*v4;
                        }
                        else
                        {
                          unsigned int *v416 = *v152;
                          v275 = v152 + 1;
                          *int v4 = (unint64_t)v275;
                        }
                        *(_DWORD *)(v3 + 684) |= 0x40000u;
                        if ((int)v149 - (int)v275 >= 2 && *v275 == 136 && v275[1] == 7)
                        {
                          v153 = v275 + 2;
                          *int v4 = (unint64_t)v153;
LABEL_973:
                          if ((unint64_t)v153 >= v149 || (char)*v153 < 0)
                          {
                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v418);
                            if (!this) {
                              return this;
                            }
                            unint64_t v149 = *v5;
                            v276 = (unsigned __int8 *)*v4;
                          }
                          else
                          {
                            unsigned int *v418 = *v153;
                            v276 = v153 + 1;
                            *int v4 = (unint64_t)v276;
                          }
                          *(_DWORD *)(v3 + 684) |= 0x80000u;
                          if ((int)v149 - (int)v276 >= 2 && *v276 == 144 && v276[1] == 7)
                          {
                            v154 = v276 + 2;
                            *int v4 = (unint64_t)v154;
LABEL_982:
                            if ((unint64_t)v154 >= v149 || (char)*v154 < 0)
                            {
                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v420);
                              if (!this) {
                                return this;
                              }
                              unint64_t v149 = *v5;
                              v277 = (unsigned __int8 *)*v4;
                            }
                            else
                            {
                              unsigned int *v420 = *v154;
                              v277 = v154 + 1;
                              *int v4 = (unint64_t)v277;
                            }
                            *(_DWORD *)(v3 + 684) |= 0x100000u;
                            if ((int)v149 - (int)v277 >= 2 && *v277 == 152 && v277[1] == 7)
                            {
                              v155 = v277 + 2;
                              *int v4 = (unint64_t)v155;
LABEL_991:
                              if ((unint64_t)v155 >= v149 || (char)*v155 < 0)
                              {
                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v422);
                                if (!this) {
                                  return this;
                                }
                                unint64_t v149 = *v5;
                                v278 = (unsigned __int8 *)*v4;
                              }
                              else
                              {
                                unsigned int *v422 = *v155;
                                v278 = v155 + 1;
                                *int v4 = (unint64_t)v278;
                              }
                              *(_DWORD *)(v3 + 684) |= 0x200000u;
                              if ((int)v149 - (int)v278 >= 2 && *v278 == 160 && v278[1] == 7)
                              {
                                v156 = v278 + 2;
                                *int v4 = (unint64_t)v156;
LABEL_1000:
                                if ((unint64_t)v156 >= v149 || (char)*v156 < 0)
                                {
                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v424);
                                  if (!this) {
                                    return this;
                                  }
                                  unint64_t v149 = *v5;
                                  v279 = (unsigned __int8 *)*v4;
                                }
                                else
                                {
                                  unsigned int *v424 = *v156;
                                  v279 = v156 + 1;
                                  *int v4 = (unint64_t)v279;
                                }
                                *(_DWORD *)(v3 + 684) |= 0x400000u;
                                if ((int)v149 - (int)v279 >= 2 && *v279 == 168 && v279[1] == 7)
                                {
                                  v157 = v279 + 2;
                                  *int v4 = (unint64_t)v157;
LABEL_1009:
                                  if ((unint64_t)v157 >= v149 || (char)*v157 < 0)
                                  {
                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v429);
                                    if (!this) {
                                      return this;
                                    }
                                    unint64_t v149 = *v5;
                                    v280 = (unsigned __int8 *)*v4;
                                  }
                                  else
                                  {
                                    unsigned int *v429 = *v157;
                                    v280 = v157 + 1;
                                    *int v4 = (unint64_t)v280;
                                  }
                                  *(_DWORD *)(v3 + 684) |= 0x800000u;
                                  if ((int)v149 - (int)v280 >= 2 && *v280 == 176 && v280[1] == 7)
                                  {
                                    v158 = v280 + 2;
                                    *int v4 = (unint64_t)v158;
LABEL_1018:
                                    if ((unint64_t)v158 >= v149 || (char)*v158 < 0)
                                    {
                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v428);
                                      if (!this) {
                                        return this;
                                      }
                                      unint64_t v149 = *v5;
                                      v281 = (unsigned __int8 *)*v4;
                                    }
                                    else
                                    {
                                      unsigned int *v428 = *v158;
                                      v281 = v158 + 1;
                                      *int v4 = (unint64_t)v281;
                                    }
                                    *(_DWORD *)(v3 + 684) |= 0x1000000u;
                                    if ((int)v149 - (int)v281 >= 2 && *v281 == 184 && v281[1] == 7)
                                    {
                                      v159 = v281 + 2;
                                      *int v4 = (unint64_t)v159;
LABEL_1027:
                                      if ((unint64_t)v159 >= v149 || (char)*v159 < 0)
                                      {
                                        this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v427);
                                        if (!this) {
                                          return this;
                                        }
                                        unint64_t v149 = *v5;
                                        v282 = (unsigned __int8 *)*v4;
                                      }
                                      else
                                      {
                                        unsigned int *v427 = *v159;
                                        v282 = v159 + 1;
                                        *int v4 = (unint64_t)v282;
                                      }
                                      *(_DWORD *)(v3 + 684) |= 0x2000000u;
                                      if ((int)v149 - (int)v282 >= 2 && *v282 == 192 && v282[1] == 7)
                                      {
                                        v160 = v282 + 2;
                                        *int v4 = (unint64_t)v160;
LABEL_1036:
                                        if ((unint64_t)v160 >= v149 || (char)*v160 < 0)
                                        {
                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v426);
                                          if (!this) {
                                            return this;
                                          }
                                          unint64_t v149 = *v5;
                                          v283 = (unsigned __int8 *)*v4;
                                        }
                                        else
                                        {
                                          unsigned int *v426 = *v160;
                                          v283 = v160 + 1;
                                          *int v4 = (unint64_t)v283;
                                        }
                                        *(_DWORD *)(v3 + 684) |= 0x4000000u;
                                        if ((int)v149 - (int)v283 >= 2 && *v283 == 200 && v283[1] == 7)
                                        {
                                          v161 = v283 + 2;
                                          *int v4 = (unint64_t)v161;
LABEL_1045:
                                          v488[0] = 0;
                                          if ((unint64_t)v161 >= v149 || (char)*v161 < 0)
                                          {
                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                            if (!this) {
                                              return this;
                                            }
                                            unsigned int v284 = v488[0];
                                            unint64_t v149 = *v5;
                                            v285 = (unsigned __int8 *)*v4;
                                          }
                                          else
                                          {
                                            unsigned int v284 = *v161;
                                            v285 = v161 + 1;
                                            *int v4 = (unint64_t)v285;
                                          }
                                          *(unsigned char *)(v3 + 621) = v284 != 0;
                                          *(_DWORD *)(v3 + 684) |= 0x8000000u;
                                          if ((int)v149 - (int)v285 >= 2 && *v285 == 208 && v285[1] == 7)
                                          {
                                            v162 = v285 + 2;
                                            *int v4 = (unint64_t)v162;
LABEL_1054:
                                            v488[0] = 0;
                                            if ((unint64_t)v162 >= v149 || (char)*v162 < 0)
                                            {
                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                              if (!this) {
                                                return this;
                                              }
                                              unsigned int v286 = v488[0];
                                              unint64_t v149 = *v5;
                                              v287 = (unsigned __int8 *)*v4;
                                            }
                                            else
                                            {
                                              unsigned int v286 = *v162;
                                              v287 = v162 + 1;
                                              *int v4 = (unint64_t)v287;
                                            }
                                            *(unsigned char *)(v3 + 622) = v286 != 0;
                                            *(_DWORD *)(v3 + 684) |= 0x10000000u;
                                            if ((int)v149 - (int)v287 >= 2 && *v287 == 216 && v287[1] == 7)
                                            {
                                              v163 = v287 + 2;
                                              *int v4 = (unint64_t)v163;
LABEL_1063:
                                              v488[0] = 0;
                                              if ((unint64_t)v163 >= v149 || (char)*v163 < 0)
                                              {
                                                this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                if (!this) {
                                                  return this;
                                                }
                                                unsigned int v288 = v488[0];
                                                unint64_t v149 = *v5;
                                                v289 = (unsigned __int8 *)*v4;
                                              }
                                              else
                                              {
                                                unsigned int v288 = *v163;
                                                v289 = v163 + 1;
                                                *int v4 = (unint64_t)v289;
                                              }
                                              *(unsigned char *)(v3 + 623) = v288 != 0;
                                              *(_DWORD *)(v3 + 684) |= 0x20000000u;
                                              if ((int)v149 - (int)v289 >= 2 && *v289 == 224 && v289[1] == 7)
                                              {
                                                v164 = v289 + 2;
                                                *int v4 = (unint64_t)v164;
LABEL_1072:
                                                v488[0] = 0;
                                                if ((unint64_t)v164 >= v149 || (char)*v164 < 0)
                                                {
                                                  this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                  if (!this) {
                                                    return this;
                                                  }
                                                  unsigned int v290 = v488[0];
                                                  unint64_t v149 = *v5;
                                                  v291 = (unsigned __int8 *)*v4;
                                                }
                                                else
                                                {
                                                  unsigned int v290 = *v164;
                                                  v291 = v164 + 1;
                                                  *int v4 = (unint64_t)v291;
                                                }
                                                *(unsigned char *)(v3 + 644) = v290 != 0;
                                                *(_DWORD *)(v3 + 684) |= 0x40000000u;
                                                if ((int)v149 - (int)v291 >= 2 && *v291 == 232 && v291[1] == 7)
                                                {
                                                  v165 = (char *)(v291 + 2);
                                                  *int v4 = (unint64_t)v165;
LABEL_1081:
                                                  v488[0] = 0;
                                                  if ((unint64_t)v165 >= v149 || *v165 < 0)
                                                  {
                                                    this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                    if (!this) {
                                                      return this;
                                                    }
                                                    unsigned int v292 = v488[0];
                                                  }
                                                  else
                                                  {
                                                    unsigned int v292 = *v165;
                                                    *int v4 = (unint64_t)(v165 + 1);
                                                  }
                                                  if (v292 - 1 <= 8)
                                                  {
                                                    *(_DWORD *)(v3 + 684) |= 0x80000000;
                                                    *(_DWORD *)(v3 + 636) = v292;
                                                  }
                                                  unint64_t v167 = *v5;
                                                  v293 = (unsigned __int8 *)*v4;
                                                  if ((int)(*v5 - *v4) >= 2 && *v293 == 240 && v293[1] == 7)
                                                  {
                                                    v166 = v293 + 2;
                                                    *int v4 = (unint64_t)v166;
LABEL_1092:
                                                    v488[0] = 0;
                                                    if ((unint64_t)v166 >= v167 || (char)*v166 < 0)
                                                    {
                                                      this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                      if (!this) {
                                                        return this;
                                                      }
                                                      unsigned int v294 = v488[0];
                                                      unint64_t v167 = *v5;
                                                      v295 = (unsigned __int8 *)*v4;
                                                    }
                                                    else
                                                    {
                                                      unsigned int v294 = *v166;
                                                      v295 = v166 + 1;
                                                      *int v4 = (unint64_t)v295;
                                                    }
                                                    *(unsigned char *)(v3 + 645) = v294 != 0;
                                                    *(_DWORD *)(v3 + 688) |= 1u;
                                                    if ((int)v167 - (int)v295 >= 2 && *v295 == 250 && v295[1] == 7)
                                                    {
                                                      *int v4 = (unint64_t)(v295 + 2);
LABEL_327:
                                                      *(_DWORD *)(v3 + 672) |= 0x20000u;
                                                      if (*(void *)(v3 + 80) == v11) {
                                                        operator new();
                                                      }
                                                      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                                                      if (!this) {
                                                        return this;
                                                      }
                                                      unint64_t v168 = *v5;
                                                      v169 = (unsigned __int8 *)*v4;
                                                      if ((int)(*v5 - *v4) >= 2 && *v169 == 128 && v169[1] == 8)
                                                      {
                                                        v170 = v169 + 2;
                                                        *int v4 = (unint64_t)v170;
LABEL_336:
                                                        if ((unint64_t)v170 >= v168 || (char)*v170 < 0)
                                                        {
                                                          this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v486);
                                                          if (!this) {
                                                            return this;
                                                          }
                                                          unint64_t v168 = *v5;
                                                          v171 = (unsigned __int8 *)*v4;
                                                        }
                                                        else
                                                        {
                                                          unsigned int *v486 = *v170;
                                                          v171 = v170 + 1;
                                                          *int v4 = (unint64_t)v171;
                                                        }
                                                        *(_DWORD *)(v3 + 688) |= 2u;
                                                        if ((int)v168 - (int)v171 >= 2 && *v171 == 136 && v171[1] == 8)
                                                        {
                                                          v172 = v171 + 2;
                                                          *int v4 = (unint64_t)v172;
LABEL_412:
                                                          v488[0] = 0;
                                                          if ((unint64_t)v172 >= v168 || (char)*v172 < 0)
                                                          {
                                                            this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                            if (!this) {
                                                              return this;
                                                            }
                                                            unsigned int v188 = v488[0];
                                                            unint64_t v168 = *v5;
                                                            v189 = (unsigned __int8 *)*v4;
                                                          }
                                                          else
                                                          {
                                                            unsigned int v188 = *v172;
                                                            v189 = v172 + 1;
                                                            *int v4 = (unint64_t)v189;
                                                          }
                                                          *(unsigned char *)(v3 + 238) = v188 != 0;
                                                          *(_DWORD *)(v3 + 676) |= 0x800000u;
                                                          if ((int)v168 - (int)v189 >= 2
                                                            && *v189 == 144
                                                            && v189[1] == 8)
                                                          {
                                                            v173 = v189 + 2;
                                                            *int v4 = (unint64_t)v173;
LABEL_461:
                                                            v488[0] = 0;
                                                            if ((unint64_t)v173 >= v168 || (char)*v173 < 0)
                                                            {
                                                              this = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v488);
                                                              if (!this) {
                                                                return this;
                                                              }
                                                              unsigned int v199 = v488[0];
                                                              unint64_t v168 = *v5;
                                                              v200 = (unsigned __int8 *)*v4;
                                                            }
                                                            else
                                                            {
                                                              unsigned int v199 = *v173;
                                                              v200 = v173 + 1;
                                                              *int v4 = (unint64_t)v200;
                                                            }
                                                            *(unsigned char *)(v3 + 239) = v199 != 0;
                                                            *(_DWORD *)(v3 + 676) |= 0x1000000u;
                                                            if ((int)v168 - (int)v200 >= 2
                                                              && *v200 == 240
                                                              && v200[1] == 34)
                                                            {
                                                              v174 = v200 + 2;
                                                              *int v4 = (unint64_t)v174;
                                                              goto LABEL_502;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_2;
        }
        if (v389 != 200) {
          goto LABEL_2;
        }
      }
      goto LABEL_2;
    }
    if (v375 != 194) {
      goto LABEL_2;
    }
  }
}

void sub_1C527658C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallEndEvent::set_status_code(uint64_t a1, awd::metrics *this)
{
  int v2 = (int)this;
  uint64_t result = awd::metrics::RESPONSE_Code_IsValid(this);
  if ((result & 1) == 0) {
    __assert_rtn("set_status_code", "CATM.pb.h", 14141, "::awd::metrics::RESPONSE_Code_IsValid(value)");
  }
  *(_DWORD *)(a1 + 676) |= 0x20u;
  *(_DWORD *)(a1 + 192) = v2;
  return result;
}

uint64_t awd::metrics::ATM_CallEndEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 672);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 672);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_161;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_162;
  }
LABEL_161:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_163;
  }
LABEL_162:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_164;
  }
LABEL_163:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_165;
  }
LABEL_164:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_166;
  }
LABEL_165:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 31), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_167;
  }
LABEL_166:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 100), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_168;
  }
LABEL_167:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_169;
  }
LABEL_168:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_170;
  }
LABEL_169:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_171;
  }
LABEL_170:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_172;
  }
LABEL_171:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 101), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_173;
  }
LABEL_172:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_174;
  }
LABEL_173:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_175;
  }
LABEL_174:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_176;
  }
LABEL_175:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40000) == 0)
  {
LABEL_19:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_177;
  }
LABEL_176:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x80000) == 0)
  {
LABEL_20:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_178;
  }
LABEL_177:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x100000) == 0)
  {
LABEL_21:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_179;
  }
LABEL_178:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_180;
  }
LABEL_179:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned __int8 *)(v5 + 102), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_181;
  }
LABEL_180:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 132), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_182;
  }
LABEL_181:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned int *)(v5 + 144), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_25:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_183;
  }
LABEL_182:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_184;
  }
LABEL_183:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_28;
    }
LABEL_185:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, *(unsigned int *)(v5 + 148), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 672) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_186;
  }
LABEL_184:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 672);
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_185;
  }
LABEL_28:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_186:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, *(unsigned int *)(v5 + 168), (uint64_t)a2, a4);
LABEL_29:
  int v7 = *(_DWORD *)(v5 + 676);
  if (v7)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, *(unsigned __int8 *)(v5 + 103), (uint64_t)a2, a4);
    int v7 = *(_DWORD *)(v5 + 676);
    if ((v7 & 2) == 0)
    {
LABEL_31:
      if ((v7 & 4) == 0) {
        goto LABEL_32;
      }
      goto LABEL_189;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_31;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, *(unsigned int *)(v5 + 172), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 4) == 0)
  {
LABEL_32:
    if ((v7 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_190;
  }
LABEL_189:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned int *)(v5 + 176), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 8) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_191;
  }
LABEL_190:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, *(void *)(v5 + 184), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v7 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_192;
  }
LABEL_191:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, *(unsigned int *)(v5 + 180), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x20) == 0)
  {
LABEL_35:
    if ((v7 & 0x40) == 0) {
      goto LABEL_36;
    }
    goto LABEL_193;
  }
LABEL_192:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, *(unsigned int *)(v5 + 192), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x40) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_194;
  }
LABEL_193:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, *(unsigned __int8 *)(v5 + 236), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x1000) == 0)
  {
LABEL_37:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_195;
  }
LABEL_194:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, *(void *)(v5 + 216), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x2000) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_196;
  }
LABEL_195:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, *(unsigned int *)(v5 + 224), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x10000) == 0)
  {
LABEL_39:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_197;
  }
LABEL_196:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, *(unsigned int *)(v5 + 240), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x20000) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_198;
  }
LABEL_197:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, *(unsigned int *)(v5 + 244), (uint64_t)a2, a4);
  int v7 = *(_DWORD *)(v5 + 676);
  if ((v7 & 0x100000) == 0)
  {
LABEL_41:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_198:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, *(unsigned int *)(v5 + 288), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 676) & 0x200000) != 0) {
LABEL_42:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_43:
  if (*(int *)(v5 + 272) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v8;
    }
    while (v8 < *(int *)(v5 + 272));
  }
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x4000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned int *)(v5 + 228), (uint64_t)a2, a4);
    int v9 = *(_DWORD *)(v5 + 676);
    if ((v9 & 0x80) == 0)
    {
LABEL_48:
      if ((v9 & 0x100) == 0) {
        goto LABEL_49;
      }
      goto LABEL_202;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_48;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x100) == 0)
  {
LABEL_49:
    if ((v9 & 0x200) == 0) {
      goto LABEL_50;
    }
    goto LABEL_203;
  }
LABEL_202:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, *(unsigned __int8 *)(v5 + 237), (uint64_t)a2, a4);
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x200) == 0)
  {
LABEL_50:
    if ((v9 & 0x400) == 0) {
      goto LABEL_51;
    }
    goto LABEL_204;
  }
LABEL_203:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E, *(unsigned int *)(v5 + 196), (uint64_t)a2, a4);
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x400) == 0)
  {
LABEL_51:
    if ((v9 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_205;
  }
LABEL_204:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2F, *(unsigned int *)(v5 + 208), (uint64_t)a2, a4);
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x800) == 0)
  {
LABEL_52:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_206;
  }
LABEL_205:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x30, *(unsigned int *)(v5 + 212), (uint64_t)a2, a4);
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x8000) == 0)
  {
LABEL_53:
    if ((v9 & 0x40000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_207;
  }
LABEL_206:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x31, *(unsigned int *)(v5 + 232), (uint64_t)a2, a4);
  int v9 = *(_DWORD *)(v5 + 676);
  if ((v9 & 0x40000) == 0)
  {
LABEL_54:
    if ((v9 & 0x80000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_207:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32, *(unsigned int *)(v5 + 248), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 676) & 0x80000) != 0) {
LABEL_55:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33, *(unsigned int *)(v5 + 252), (uint64_t)a2, a4);
LABEL_56:
  int v10 = *(_DWORD *)(v5 + 672);
  if ((v10 & 0x200000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34, *(unsigned int *)(v5 + 120), (uint64_t)a2, a4);
    int v10 = *(_DWORD *)(v5 + 672);
    if ((v10 & 0x400000) == 0)
    {
LABEL_58:
      if ((v10 & 0x800000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_58;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x35, *(unsigned int *)(v5 + 124), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 672) & 0x800000) != 0) {
LABEL_59:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x36, *(unsigned int *)(v5 + 128), (uint64_t)a2, a4);
LABEL_60:
  int v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x2000000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37, *(unsigned __int8 *)(v5 + 396), (uint64_t)a2, a4);
    int v11 = *(_DWORD *)(v5 + 676);
    if ((v11 & 0x4000000) == 0)
    {
LABEL_62:
      if ((v11 & 0x8000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_214;
    }
  }
  else if ((v11 & 0x4000000) == 0)
  {
    goto LABEL_62;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x38, *(unsigned int *)(v5 + 292), (uint64_t)a2, a4);
  int v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x8000000) == 0)
  {
LABEL_63:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_215;
  }
LABEL_214:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x39, *(unsigned int *)(v5 + 296), (uint64_t)a2, a4);
  int v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_64:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_216;
  }
LABEL_215:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3A, *(unsigned int *)(v5 + 300), (uint64_t)a2, a4);
  int v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_65:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_66;
    }
LABEL_217:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3C, *(unsigned int *)(v5 + 308), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 676) & 0x80000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_218;
  }
LABEL_216:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3B, *(unsigned int *)(v5 + 304), (uint64_t)a2, a4);
  int v11 = *(_DWORD *)(v5 + 676);
  if ((v11 & 0x40000000) != 0) {
    goto LABEL_217;
  }
LABEL_66:
  if ((v11 & 0x80000000) == 0) {
    goto LABEL_67;
  }
LABEL_218:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3D, *(unsigned int *)(v5 + 312), (uint64_t)a2, a4);
LABEL_67:
  int v12 = *(_DWORD *)(v5 + 680);
  if (v12)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E, *(unsigned int *)(v5 + 316), (uint64_t)a2, a4);
    int v12 = *(_DWORD *)(v5 + 680);
    if ((v12 & 2) == 0)
    {
LABEL_69:
      if ((v12 & 4) == 0) {
        goto LABEL_70;
      }
      goto LABEL_221;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_69;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F, *(unsigned int *)(v5 + 320), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 4) == 0)
  {
LABEL_70:
    if ((v12 & 8) == 0) {
      goto LABEL_71;
    }
    goto LABEL_222;
  }
LABEL_221:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x40, *(unsigned int *)(v5 + 324), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 8) == 0)
  {
LABEL_71:
    if ((v12 & 0x10) == 0) {
      goto LABEL_72;
    }
    goto LABEL_223;
  }
LABEL_222:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x41, *(unsigned int *)(v5 + 328), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x10) == 0)
  {
LABEL_72:
    if ((v12 & 0x20) == 0) {
      goto LABEL_73;
    }
    goto LABEL_224;
  }
LABEL_223:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x42, *(unsigned int *)(v5 + 332), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x20) == 0)
  {
LABEL_73:
    if ((v12 & 0x40) == 0) {
      goto LABEL_74;
    }
    goto LABEL_225;
  }
LABEL_224:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x43, *(unsigned int *)(v5 + 336), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x40) == 0)
  {
LABEL_74:
    if ((v12 & 0x80) == 0) {
      goto LABEL_75;
    }
    goto LABEL_226;
  }
LABEL_225:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x44, *(unsigned int *)(v5 + 340), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x80) == 0)
  {
LABEL_75:
    if ((v12 & 0x100) == 0) {
      goto LABEL_76;
    }
    goto LABEL_227;
  }
LABEL_226:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x45, *(unsigned int *)(v5 + 344), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x100) == 0)
  {
LABEL_76:
    if ((v12 & 0x200) == 0) {
      goto LABEL_77;
    }
    goto LABEL_228;
  }
LABEL_227:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x46, *(unsigned int *)(v5 + 348), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x200) == 0)
  {
LABEL_77:
    if ((v12 & 0x400) == 0) {
      goto LABEL_78;
    }
    goto LABEL_229;
  }
LABEL_228:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x47, *(unsigned int *)(v5 + 352), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x400) == 0)
  {
LABEL_78:
    if ((v12 & 0x800) == 0) {
      goto LABEL_79;
    }
    goto LABEL_230;
  }
LABEL_229:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x48, *(unsigned int *)(v5 + 356), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x800) == 0)
  {
LABEL_79:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_231;
  }
LABEL_230:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x49, *(unsigned int *)(v5 + 360), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x1000) == 0)
  {
LABEL_80:
    if ((v12 & 0x2000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_232;
  }
LABEL_231:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4A, *(unsigned int *)(v5 + 364), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x2000) == 0)
  {
LABEL_81:
    if ((v12 & 0x4000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_233;
  }
LABEL_232:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4B, *(unsigned int *)(v5 + 368), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x4000) == 0)
  {
LABEL_82:
    if ((v12 & 0x8000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_234;
  }
LABEL_233:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4C, *(unsigned int *)(v5 + 372), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x8000) == 0)
  {
LABEL_83:
    if ((v12 & 0x10000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_235;
  }
LABEL_234:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4D, *(unsigned int *)(v5 + 376), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x10000) == 0)
  {
LABEL_84:
    if ((v12 & 0x20000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_236;
  }
LABEL_235:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4E, *(unsigned int *)(v5 + 380), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x20000) == 0)
  {
LABEL_85:
    if ((v12 & 0x40000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_237;
  }
LABEL_236:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4F, *(unsigned int *)(v5 + 384), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x40000) == 0)
  {
LABEL_86:
    if ((v12 & 0x80000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_238;
  }
LABEL_237:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x50, *(unsigned int *)(v5 + 388), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x80000) == 0)
  {
LABEL_87:
    if ((v12 & 0x100000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_239;
  }
LABEL_238:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x51, *(unsigned int *)(v5 + 392), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x100000) == 0)
  {
LABEL_88:
    if ((v12 & 0x200000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_240;
  }
LABEL_239:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x52, *(unsigned int *)(v5 + 400), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x200000) == 0)
  {
LABEL_89:
    if ((v12 & 0x400000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_241;
  }
LABEL_240:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x53, *(unsigned __int8 *)(v5 + 397), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x400000) == 0)
  {
LABEL_90:
    if ((v12 & 0x800000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_242;
  }
LABEL_241:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x54, *(unsigned int *)(v5 + 404), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x800000) == 0)
  {
LABEL_91:
    if ((v12 & 0x1000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_243;
  }
LABEL_242:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x1000000) == 0)
  {
LABEL_92:
    if ((v12 & 0x2000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_244;
  }
LABEL_243:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x56, *(unsigned int *)(v5 + 416), (uint64_t)a2, a4);
  int v12 = *(_DWORD *)(v5 + 680);
  if ((v12 & 0x2000000) == 0)
  {
LABEL_93:
    if ((v12 & 0x4000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
LABEL_244:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x57, *(unsigned int *)(v5 + 420), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 680) & 0x4000000) != 0) {
LABEL_94:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x58, *(unsigned __int8 *)(v5 + 398), (uint64_t)a2, a4);
LABEL_95:
  if (*(int *)(v5 + 432) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      ++v13;
    }
    while (v13 < *(int *)(v5 + 432));
  }
  int v14 = *(_DWORD *)(v5 + 680);
  if ((v14 & 0x10000000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5A, *(unsigned int *)(v5 + 456), (uint64_t)a2, a4);
    int v14 = *(_DWORD *)(v5 + 680);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_100:
      if ((v14 & 0x40000000) == 0) {
        goto LABEL_101;
      }
LABEL_248:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5C, *(void *)(v5 + 464), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 680) & 0x80000000) == 0) {
        goto LABEL_102;
      }
      goto LABEL_249;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_100;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5B, *(void *)(v5 + 448), (uint64_t)a2, a4);
  int v14 = *(_DWORD *)(v5 + 680);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_248;
  }
LABEL_101:
  if ((v14 & 0x80000000) == 0) {
    goto LABEL_102;
  }
LABEL_249:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5D, *(unsigned int *)(v5 + 460), (uint64_t)a2, a4);
LABEL_102:
  int v15 = *(_DWORD *)(v5 + 684);
  if (v15)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5E, *(unsigned int *)(v5 + 480), (uint64_t)a2, a4);
    int v15 = *(_DWORD *)(v5 + 684);
    if ((v15 & 2) == 0)
    {
LABEL_104:
      if ((v15 & 4) == 0) {
        goto LABEL_105;
      }
      goto LABEL_252;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_104;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x5F, *(void *)(v5 + 472), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 4) == 0)
  {
LABEL_105:
    if ((v15 & 8) == 0) {
      goto LABEL_106;
    }
    goto LABEL_253;
  }
LABEL_252:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x60, *(void *)(v5 + 488), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 8) == 0)
  {
LABEL_106:
    if ((v15 & 0x10) == 0) {
      goto LABEL_107;
    }
    goto LABEL_254;
  }
LABEL_253:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x61, *(unsigned int *)(v5 + 484), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x10) == 0)
  {
LABEL_107:
    if ((v15 & 0x20) == 0) {
      goto LABEL_108;
    }
    goto LABEL_255;
  }
LABEL_254:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x62, *(unsigned int *)(v5 + 496), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x20) == 0)
  {
LABEL_108:
    if ((v15 & 0x40) == 0) {
      goto LABEL_109;
    }
    goto LABEL_256;
  }
LABEL_255:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x63, *(unsigned int *)(v5 + 500), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x40) == 0)
  {
LABEL_109:
    if ((v15 & 0x80) == 0) {
      goto LABEL_110;
    }
    goto LABEL_257;
  }
LABEL_256:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x64, *(unsigned __int8 *)(v5 + 399), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x80) == 0)
  {
LABEL_110:
    if ((v15 & 0x100) == 0) {
      goto LABEL_111;
    }
    goto LABEL_258;
  }
LABEL_257:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x65, *(unsigned int *)(v5 + 504), (uint64_t)a2, a4);
  int v15 = *(_DWORD *)(v5 + 684);
  if ((v15 & 0x100) == 0)
  {
LABEL_111:
    if ((v15 & 0x200) == 0) {
      goto LABEL_113;
    }
    goto LABEL_112;
  }
LABEL_258:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x66, *(unsigned int *)(v5 + 508), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 684) & 0x200) != 0) {
LABEL_112:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x67, *(unsigned __int8 *)(v5 + 620), (uint64_t)a2, a4);
LABEL_113:
  if (*(int *)(v5 + 520) >= 1)
  {
    uint64_t v16 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x68, *(void *)(*(void *)(v5 + 512) + 8 * v16++), a2, a4);
    while (v16 < *(int *)(v5 + 520));
  }
  if (*(int *)(v5 + 544) >= 1)
  {
    uint64_t v17 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x69, *(unsigned __int8 *)(*(void *)(v5 + 536) + v17++), (uint64_t)a2, a4);
    while (v17 < *(int *)(v5 + 544));
  }
  int v18 = *(_DWORD *)(v5 + 684);
  if ((v18 & 0x1000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6A, *(unsigned int *)(v5 + 552), (uint64_t)a2, a4);
    int v18 = *(_DWORD *)(v5 + 684);
    if ((v18 & 0x2000) == 0)
    {
LABEL_121:
      if ((v18 & 0x4000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_122;
    }
  }
  else if ((v18 & 0x2000) == 0)
  {
    goto LABEL_121;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6B, *(unsigned int *)(v5 + 556), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 684) & 0x4000) != 0) {
LABEL_122:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6C, *(unsigned int *)(v5 + 584), (uint64_t)a2, a4);
LABEL_123:
  if (*(int *)(v5 + 568) >= 1)
  {
    uint64_t v19 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6D, *(void *)(*(void *)(v5 + 560) + 8 * v19++), a2, a4);
    while (v19 < *(int *)(v5 + 568));
  }
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x10000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6E, *(unsigned int *)(v5 + 588), (uint64_t)a2, a4);
    int v20 = *(_DWORD *)(v5 + 684);
    if ((v20 & 0x20000) == 0)
    {
LABEL_128:
      if ((v20 & 0x40000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_265;
    }
  }
  else if ((v20 & 0x20000) == 0)
  {
    goto LABEL_128;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x6F, *(unsigned int *)(v5 + 592), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x40000) == 0)
  {
LABEL_129:
    if ((v20 & 0x80000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_266;
  }
LABEL_265:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x70, *(unsigned int *)(v5 + 596), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x80000) == 0)
  {
LABEL_130:
    if ((v20 & 0x100000) == 0) {
      goto LABEL_131;
    }
    goto LABEL_267;
  }
LABEL_266:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x71, *(unsigned int *)(v5 + 600), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x100000) == 0)
  {
LABEL_131:
    if ((v20 & 0x200000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_268;
  }
LABEL_267:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x72, *(unsigned int *)(v5 + 604), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x200000) == 0)
  {
LABEL_132:
    if ((v20 & 0x400000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_269;
  }
LABEL_268:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x73, *(unsigned int *)(v5 + 608), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x400000) == 0)
  {
LABEL_133:
    if ((v20 & 0x800000) == 0) {
      goto LABEL_134;
    }
    goto LABEL_270;
  }
LABEL_269:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x74, *(unsigned int *)(v5 + 612), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x800000) == 0)
  {
LABEL_134:
    if ((v20 & 0x1000000) == 0) {
      goto LABEL_135;
    }
    goto LABEL_271;
  }
LABEL_270:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x75, *(unsigned int *)(v5 + 616), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x1000000) == 0)
  {
LABEL_135:
    if ((v20 & 0x2000000) == 0) {
      goto LABEL_136;
    }
    goto LABEL_272;
  }
LABEL_271:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x76, *(unsigned int *)(v5 + 624), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x2000000) == 0)
  {
LABEL_136:
    if ((v20 & 0x4000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_273;
  }
LABEL_272:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x77, *(unsigned int *)(v5 + 628), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x4000000) == 0)
  {
LABEL_137:
    if ((v20 & 0x8000000) == 0) {
      goto LABEL_138;
    }
    goto LABEL_274;
  }
LABEL_273:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x78, *(unsigned int *)(v5 + 632), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x8000000) == 0)
  {
LABEL_138:
    if ((v20 & 0x10000000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_275;
  }
LABEL_274:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x79, *(unsigned __int8 *)(v5 + 621), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x10000000) == 0)
  {
LABEL_139:
    if ((v20 & 0x20000000) == 0) {
      goto LABEL_140;
    }
    goto LABEL_276;
  }
LABEL_275:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7A, *(unsigned __int8 *)(v5 + 622), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x20000000) == 0)
  {
LABEL_140:
    if ((v20 & 0x40000000) == 0) {
      goto LABEL_141;
    }
LABEL_277:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7C, *(unsigned __int8 *)(v5 + 644), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 684) & 0x80000000) == 0) {
      goto LABEL_142;
    }
    goto LABEL_278;
  }
LABEL_276:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7B, *(unsigned __int8 *)(v5 + 623), (uint64_t)a2, a4);
  int v20 = *(_DWORD *)(v5 + 684);
  if ((v20 & 0x40000000) != 0) {
    goto LABEL_277;
  }
LABEL_141:
  if ((v20 & 0x80000000) == 0) {
    goto LABEL_142;
  }
LABEL_278:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D, *(unsigned int *)(v5 + 636), (uint64_t)a2, a4);
LABEL_142:
  if (*(unsigned char *)(v5 + 688)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7E, *(unsigned __int8 *)(v5 + 645), (uint64_t)a2, a4);
  }
  if ((*(unsigned char *)(v5 + 674) & 2) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  if ((*(unsigned char *)(v5 + 688) & 2) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x80, *(unsigned int *)(v5 + 640), (uint64_t)a2, a4);
  }
  int v21 = *(_DWORD *)(v5 + 676);
  if ((v21 & 0x800000) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x81, *(unsigned __int8 *)(v5 + 238), (uint64_t)a2, a4);
    int v21 = *(_DWORD *)(v5 + 676);
  }
  if ((v21 & 0x1000000) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x82, *(unsigned __int8 *)(v5 + 239), (uint64_t)a2, a4);
  }
  int v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 4) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22E, *(unsigned int *)(v5 + 656), (uint64_t)a2, a4);
    int v22 = *(_DWORD *)(v5 + 688);
    if ((v22 & 8) == 0)
    {
LABEL_154:
      if ((v22 & 0x10) == 0) {
        goto LABEL_155;
      }
      goto LABEL_281;
    }
  }
  else if ((v22 & 8) == 0)
  {
    goto LABEL_154;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x10) == 0)
  {
LABEL_155:
    if ((v22 & 0x20) == 0) {
      goto LABEL_156;
    }
    goto LABEL_282;
  }
LABEL_281:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x230, *(unsigned __int8 *)(v5 + 646), (uint64_t)a2, a4);
  int v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x20) == 0)
  {
LABEL_156:
    if ((v22 & 0x40) == 0) {
      goto LABEL_157;
    }
LABEL_283:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25A, *(unsigned __int8 *)(v5 + 647), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 688) & 0x80) == 0) {
      return this;
    }
    goto LABEL_284;
  }
LABEL_282:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x259, *(unsigned int *)(v5 + 660), (uint64_t)a2, a4);
  int v22 = *(_DWORD *)(v5 + 688);
  if ((v22 & 0x40) != 0) {
    goto LABEL_283;
  }
LABEL_157:
  if ((v22 & 0x80) == 0) {
    return this;
  }
LABEL_284:
  uint64_t v23 = *(unsigned __int8 *)(v5 + 664);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25B, v23, (uint64_t)a2, a4);
}

uint64_t awd::metrics::ATM_CallEndEvent::ByteSize(awd::metrics::ATM_CallEndEvent *this)
{
  unsigned int v2 = *((_DWORD *)this + 168);
  if (!(_BYTE)v2)
  {
    int v4 = 0;
    goto LABEL_34;
  }
  if ((v2 & 1) == 0)
  {
    int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v5 = *((void *)this + 2);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v8 = *(void *)(v5 + 8);
      unsigned int v2 = *((_DWORD *)this + 168);
      char v7 = *(unsigned char *)(v5 + 23);
    }
    else
    {
      int v10 = 1;
    }
    if (v7 < 0) {
      int v6 = v8;
    }
    v3 += v10 + v6 + 1;
    goto LABEL_16;
  }
  int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  unsigned int v2 = *((_DWORD *)this + 168);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_16:
  if ((v2 & 4) != 0) {
    v3 += 2;
  }
  if ((v2 & 8) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v11 & 0x80000000) != 0)
    {
      int v12 = 10;
    }
    else if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      unsigned int v2 = *((_DWORD *)this + 168);
    }
    else
    {
      int v12 = 1;
    }
    v3 += v12 + 1;
  }
  int v13 = v3 + 2;
  if ((v2 & 0x10) == 0) {
    int v13 = v3;
  }
  if ((v2 & 0x20) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x40) != 0) {
    v13 += 2;
  }
  if ((v2 & 0x80) != 0) {
    int v4 = v13 + 2;
  }
  else {
    int v4 = v13;
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_96;
  }
  if ((v2 & 0x100) != 0)
  {
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      unsigned int v2 = *((_DWORD *)this + 168);
    }
    else
    {
      int v15 = 1;
    }
    v4 += v15 + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0) {
        goto LABEL_38;
      }
LABEL_55:
      int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
        unsigned int v2 = *((_DWORD *)this + 168);
      }
      else
      {
        int v23 = 1;
      }
      v4 += v23 + 1;
      if ((v2 & 0x800) == 0) {
        goto LABEL_68;
      }
      goto LABEL_59;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  uint64_t v16 = *((void *)this + 4);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  v4 += v21 + v17 + 1;
  if ((v2 & 0x400) != 0) {
    goto LABEL_55;
  }
LABEL_38:
  if ((v2 & 0x800) == 0) {
    goto LABEL_68;
  }
LABEL_59:
  uint64_t v24 = *((void *)this + 6);
  int v25 = *(unsigned __int8 *)(v24 + 23);
  char v26 = v25;
  uint64_t v27 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v27 = *(void *)(v24 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v26 = *(unsigned char *)(v24 + 23);
  }
  else
  {
    int v29 = 1;
  }
  if (v26 < 0) {
    int v25 = v27;
  }
  v4 += v29 + v25 + 1;
LABEL_68:
  if ((v2 & 0x1000) != 0) {
    v4 += 2;
  }
  if ((v2 & 0x2000) != 0)
  {
    uint64_t v30 = *((void *)this + 7);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    char v32 = v31;
    uint64_t v33 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >= 0x80)
    {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      uint64_t v33 = *(void *)(v30 + 8);
      unsigned int v2 = *((_DWORD *)this + 168);
      char v32 = *(unsigned char *)(v30 + 23);
    }
    else
    {
      int v35 = 1;
    }
    if (v32 < 0) {
      int v31 = v33;
    }
    v4 += v35 + v31 + 1;
    if ((v2 & 0x4000) == 0)
    {
LABEL_72:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_92;
    }
  }
  else if ((v2 & 0x4000) == 0)
  {
    goto LABEL_72;
  }
  uint64_t v36 = *((void *)this + 8);
  int v37 = *(unsigned __int8 *)(v36 + 23);
  char v38 = v37;
  uint64_t v39 = *(void *)(v36 + 8);
  if ((v37 & 0x80u) == 0) {
    unint64_t v40 = *(unsigned __int8 *)(v36 + 23);
  }
  else {
    unint64_t v40 = v39;
  }
  if (v40 >= 0x80)
  {
    int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
    int v37 = *(unsigned __int8 *)(v36 + 23);
    uint64_t v39 = *(void *)(v36 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v38 = *(unsigned char *)(v36 + 23);
  }
  else
  {
    int v41 = 1;
  }
  if (v38 < 0) {
    int v37 = v39;
  }
  v4 += v41 + v37 + 1;
  if ((v2 & 0x8000) != 0)
  {
LABEL_92:
    unint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if (v42 >= 0x80)
    {
      int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      unsigned int v2 = *((_DWORD *)this + 168);
    }
    else
    {
      int v43 = 1;
    }
    v4 += v43 + 2;
  }
LABEL_96:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_163;
  }
  if ((v2 & 0x10000) != 0)
  {
    uint64_t v44 = *((void *)this + 9);
    int v45 = *(unsigned __int8 *)(v44 + 23);
    char v46 = v45;
    uint64_t v47 = *(void *)(v44 + 8);
    if ((v45 & 0x80u) == 0) {
      unint64_t v48 = *(unsigned __int8 *)(v44 + 23);
    }
    else {
      unint64_t v48 = v47;
    }
    if (v48 >= 0x80)
    {
      int v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
      int v45 = *(unsigned __int8 *)(v44 + 23);
      uint64_t v47 = *(void *)(v44 + 8);
      unsigned int v2 = *((_DWORD *)this + 168);
      char v46 = *(unsigned char *)(v44 + 23);
    }
    else
    {
      int v49 = 1;
    }
    if (v46 < 0) {
      int v45 = v47;
    }
    v4 += v49 + v45 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_99:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_124;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_99;
  }
  uint64_t v50 = *((void *)this + 10);
  int v51 = *(unsigned __int8 *)(v50 + 23);
  char v52 = v51;
  uint64_t v53 = *(void *)(v50 + 8);
  if ((v51 & 0x80u) == 0) {
    unint64_t v54 = *(unsigned __int8 *)(v50 + 23);
  }
  else {
    unint64_t v54 = v53;
  }
  if (v54 >= 0x80)
  {
    int v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v54);
    int v51 = *(unsigned __int8 *)(v50 + 23);
    uint64_t v53 = *(void *)(v50 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v52 = *(unsigned char *)(v50 + 23);
  }
  else
  {
    int v55 = 1;
  }
  if (v52 < 0) {
    int v51 = v53;
  }
  v4 += v55 + v51 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_100:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_133;
  }
LABEL_124:
  uint64_t v56 = *((void *)this + 11);
  int v57 = *(unsigned __int8 *)(v56 + 23);
  char v58 = v57;
  uint64_t v59 = *(void *)(v56 + 8);
  if ((v57 & 0x80u) == 0) {
    unint64_t v60 = *(unsigned __int8 *)(v56 + 23);
  }
  else {
    unint64_t v60 = v59;
  }
  if (v60 >= 0x80)
  {
    int v61 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v60);
    int v57 = *(unsigned __int8 *)(v56 + 23);
    uint64_t v59 = *(void *)(v56 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v58 = *(unsigned char *)(v56 + 23);
  }
  else
  {
    int v61 = 1;
  }
  if (v58 < 0) {
    int v57 = v59;
  }
  v4 += v61 + v57 + 2;
  if ((v2 & 0x80000) == 0)
  {
LABEL_101:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_102;
    }
    goto LABEL_142;
  }
LABEL_133:
  uint64_t v62 = *((void *)this + 13);
  int v63 = *(unsigned __int8 *)(v62 + 23);
  char v64 = v63;
  uint64_t v65 = *(void *)(v62 + 8);
  if ((v63 & 0x80u) == 0) {
    unint64_t v66 = *(unsigned __int8 *)(v62 + 23);
  }
  else {
    unint64_t v66 = v65;
  }
  if (v66 >= 0x80)
  {
    int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v66);
    int v63 = *(unsigned __int8 *)(v62 + 23);
    uint64_t v65 = *(void *)(v62 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v64 = *(unsigned char *)(v62 + 23);
  }
  else
  {
    int v67 = 1;
  }
  if (v64 < 0) {
    int v63 = v65;
  }
  v4 += v67 + v63 + 2;
  if ((v2 & 0x100000) == 0)
  {
LABEL_102:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_151;
  }
LABEL_142:
  uint64_t v68 = *((void *)this + 14);
  int v69 = *(unsigned __int8 *)(v68 + 23);
  char v70 = v69;
  uint64_t v71 = *(void *)(v68 + 8);
  if ((v69 & 0x80u) == 0) {
    unint64_t v72 = *(unsigned __int8 *)(v68 + 23);
  }
  else {
    unint64_t v72 = v71;
  }
  if (v72 >= 0x80)
  {
    int v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v72);
    int v69 = *(unsigned __int8 *)(v68 + 23);
    uint64_t v71 = *(void *)(v68 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v70 = *(unsigned char *)(v68 + 23);
  }
  else
  {
    int v73 = 1;
  }
  if (v70 < 0) {
    int v69 = v71;
  }
  v4 += v73 + v69 + 2;
  if ((v2 & 0x200000) == 0)
  {
LABEL_103:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_104;
    }
    goto LABEL_155;
  }
LABEL_151:
  uint64_t v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 30);
  if (v74 >= 0x80)
  {
    int v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74);
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  else
  {
    int v75 = 1;
  }
  v4 += v75 + 2;
  if ((v2 & 0x400000) == 0)
  {
LABEL_104:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_159;
  }
LABEL_155:
  char v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 31);
  if (v76 >= 0x80)
  {
    int v77 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v76);
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  else
  {
    int v77 = 1;
  }
  v4 += v77 + 2;
  if ((v2 & 0x800000) != 0)
  {
LABEL_159:
    unint64_t v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 32);
    if (v78 >= 0x80)
    {
      int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78);
      unsigned int v2 = *((_DWORD *)this + 168);
    }
    else
    {
      int v79 = 1;
    }
    v4 += v79 + 2;
  }
LABEL_163:
  if (!HIBYTE(v2)) {
    goto LABEL_217;
  }
  if ((v2 & 0x1000000) != 0) {
    v4 += 3;
  }
  if ((v2 & 0x2000000) != 0)
  {
    uint64_t v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 33);
    if (v80 >= 0x80)
    {
      int v81 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80);
      unsigned int v2 = *((_DWORD *)this + 168);
    }
    else
    {
      int v81 = 1;
    }
    v4 += v81 + 2;
    if ((v2 & 0x4000000) == 0)
    {
LABEL_168:
      if ((v2 & 0x8000000) == 0) {
        goto LABEL_169;
      }
      goto LABEL_182;
    }
  }
  else if ((v2 & 0x4000000) == 0)
  {
    goto LABEL_168;
  }
  unint64_t v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 36);
  if (v82 >= 0x80)
  {
    int v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82);
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  else
  {
    int v83 = 1;
  }
  v4 += v83 + 2;
  if ((v2 & 0x8000000) == 0)
  {
LABEL_169:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_170;
    }
    goto LABEL_191;
  }
LABEL_182:
  uint64_t v84 = *((void *)this + 17);
  int v85 = *(unsigned __int8 *)(v84 + 23);
  char v86 = v85;
  uint64_t v87 = *(void *)(v84 + 8);
  if ((v85 & 0x80u) == 0) {
    unint64_t v88 = *(unsigned __int8 *)(v84 + 23);
  }
  else {
    unint64_t v88 = v87;
  }
  if (v88 >= 0x80)
  {
    int v89 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v88);
    int v85 = *(unsigned __int8 *)(v84 + 23);
    uint64_t v87 = *(void *)(v84 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v86 = *(unsigned char *)(v84 + 23);
  }
  else
  {
    int v89 = 1;
  }
  if (v86 < 0) {
    int v85 = v87;
  }
  v4 += v89 + v85 + 2;
  if ((v2 & 0x10000000) == 0)
  {
LABEL_170:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_171;
    }
    goto LABEL_200;
  }
LABEL_191:
  uint64_t v90 = *((void *)this + 19);
  int v91 = *(unsigned __int8 *)(v90 + 23);
  char v92 = v91;
  uint64_t v93 = *(void *)(v90 + 8);
  if ((v91 & 0x80u) == 0) {
    unint64_t v94 = *(unsigned __int8 *)(v90 + 23);
  }
  else {
    unint64_t v94 = v93;
  }
  if (v94 >= 0x80)
  {
    int v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v94);
    int v91 = *(unsigned __int8 *)(v90 + 23);
    uint64_t v93 = *(void *)(v90 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v92 = *(unsigned char *)(v90 + 23);
  }
  else
  {
    int v95 = 1;
  }
  if (v92 < 0) {
    int v91 = v93;
  }
  v4 += v95 + v91 + 2;
  if ((v2 & 0x20000000) == 0)
  {
LABEL_171:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_209;
  }
LABEL_200:
  uint64_t v96 = *((void *)this + 20);
  int v97 = *(unsigned __int8 *)(v96 + 23);
  char v98 = v97;
  uint64_t v99 = *(void *)(v96 + 8);
  if ((v97 & 0x80u) == 0) {
    unint64_t v100 = *(unsigned __int8 *)(v96 + 23);
  }
  else {
    unint64_t v100 = v99;
  }
  if (v100 >= 0x80)
  {
    int v101 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v100);
    int v97 = *(unsigned __int8 *)(v96 + 23);
    uint64_t v99 = *(void *)(v96 + 8);
    unsigned int v2 = *((_DWORD *)this + 168);
    char v98 = *(unsigned char *)(v96 + 23);
  }
  else
  {
    int v101 = 1;
  }
  if (v98 < 0) {
    int v97 = v99;
  }
  v4 += v101 + v97 + 2;
  if ((v2 & 0x40000000) == 0)
  {
LABEL_172:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_217;
    }
    goto LABEL_213;
  }
LABEL_209:
  int v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 37);
  if (v102 >= 0x80)
  {
    int v103 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102);
    unsigned int v2 = *((_DWORD *)this + 168);
  }
  else
  {
    int v103 = 1;
  }
  v4 += v103 + 2;
  if ((v2 & 0x80000000) != 0)
  {
LABEL_213:
    int v104 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 42);
    if (v104 >= 0x80) {
      int v105 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v104);
    }
    else {
      int v105 = 1;
    }
    v4 += v105 + 2;
  }
LABEL_217:
  unsigned int v106 = *((_DWORD *)this + 169);
  if (!(_BYTE)v106) {
    goto LABEL_259;
  }
  if (v106) {
    v4 += 3;
  }
  if ((v106 & 2) != 0)
  {
    unint64_t v107 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 43);
    if (v107 >= 0x80)
    {
      int v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v107);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v108 = 1;
    }
    v4 += v108 + 2;
    if ((v106 & 4) == 0)
    {
LABEL_222:
      if ((v106 & 8) == 0) {
        goto LABEL_223;
      }
      goto LABEL_234;
    }
  }
  else if ((v106 & 4) == 0)
  {
    goto LABEL_222;
  }
  unsigned int v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 44);
  if (v109 >= 0x80)
  {
    int v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v110 = 1;
  }
  v4 += v110 + 2;
  if ((v106 & 8) == 0)
  {
LABEL_223:
    if ((v106 & 0x10) == 0) {
      goto LABEL_224;
    }
LABEL_235:
    unsigned int v111 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 45);
    if ((v111 & 0x80000000) != 0)
    {
      int v112 = 10;
    }
    else if (v111 >= 0x80)
    {
      int v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v111);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v112 = 1;
    }
    v4 += v112 + 2;
    if ((v106 & 0x20) == 0) {
      goto LABEL_247;
    }
    goto LABEL_241;
  }
LABEL_234:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 23))
      + 2;
  unsigned int v106 = *((_DWORD *)this + 169);
  if ((v106 & 0x10) != 0) {
    goto LABEL_235;
  }
LABEL_224:
  if ((v106 & 0x20) != 0)
  {
LABEL_241:
    char v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 48);
    if ((v113 & 0x80000000) != 0)
    {
      int v114 = 10;
    }
    else if (v113 >= 0x80)
    {
      int v114 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v114 = 1;
    }
    v4 += v114 + 2;
  }
LABEL_247:
  if ((v106 & 0x40) != 0) {
    v4 += 3;
  }
  if ((v106 & 0x80) != 0)
  {
    uint64_t v115 = *((void *)this + 25);
    int v116 = *(unsigned __int8 *)(v115 + 23);
    char v117 = v116;
    uint64_t v118 = *(void *)(v115 + 8);
    if ((v116 & 0x80u) == 0) {
      unint64_t v119 = *(unsigned __int8 *)(v115 + 23);
    }
    else {
      unint64_t v119 = v118;
    }
    if (v119 >= 0x80)
    {
      int v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v119);
      int v116 = *(unsigned __int8 *)(v115 + 23);
      uint64_t v118 = *(void *)(v115 + 8);
      unsigned int v106 = *((_DWORD *)this + 169);
      char v117 = *(unsigned char *)(v115 + 23);
    }
    else
    {
      int v120 = 1;
    }
    if (v117 < 0) {
      int v116 = v118;
    }
    v4 += v120 + v116 + 2;
  }
LABEL_259:
  if ((v106 & 0xFF00) == 0) {
    goto LABEL_299;
  }
  if ((v106 & 0x100) != 0) {
    v4 += 3;
  }
  if ((v106 & 0x200) != 0)
  {
    v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 49);
    if ((v121 & 0x80000000) != 0)
    {
      int v122 = 10;
    }
    else if (v121 >= 0x80)
    {
      int v122 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v122 = 1;
    }
    v4 += v122 + 2;
    if ((v106 & 0x400) == 0)
    {
LABEL_264:
      if ((v106 & 0x800) == 0) {
        goto LABEL_265;
      }
      goto LABEL_280;
    }
  }
  else if ((v106 & 0x400) == 0)
  {
    goto LABEL_264;
  }
  unsigned int v123 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 52);
  if (v123 >= 0x80)
  {
    int v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v123);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v124 = 1;
  }
  v4 += v124 + 2;
  if ((v106 & 0x800) == 0)
  {
LABEL_265:
    if ((v106 & 0x1000) == 0) {
      goto LABEL_266;
    }
    goto LABEL_286;
  }
LABEL_280:
  unint64_t v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 53);
  if ((v125 & 0x80000000) != 0)
  {
    int v126 = 10;
  }
  else if (v125 >= 0x80)
  {
    int v126 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v126 = 1;
  }
  v4 += v126 + 2;
  if ((v106 & 0x1000) == 0)
  {
LABEL_266:
    if ((v106 & 0x2000) == 0) {
      goto LABEL_267;
    }
    goto LABEL_287;
  }
LABEL_286:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 27))
      + 2;
  unsigned int v106 = *((_DWORD *)this + 169);
  if ((v106 & 0x2000) == 0)
  {
LABEL_267:
    if ((v106 & 0x4000) == 0) {
      goto LABEL_268;
    }
    goto LABEL_291;
  }
LABEL_287:
  unint64_t v127 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 56);
  if (v127 >= 0x80)
  {
    int v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v127);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v128 = 1;
  }
  v4 += v128 + 2;
  if ((v106 & 0x4000) == 0)
  {
LABEL_268:
    if ((v106 & 0x8000) == 0) {
      goto LABEL_299;
    }
    goto LABEL_295;
  }
LABEL_291:
  unint64_t v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 57);
  if (v129 >= 0x80)
  {
    int v130 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v130 = 1;
  }
  v4 += v130 + 2;
  if ((v106 & 0x8000) != 0)
  {
LABEL_295:
    unint64_t v131 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *((_DWORD *)this + 58)) ^ (*((int *)this + 58) >> 31));
    if (v131 >= 0x80)
    {
      int v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v131);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v132 = 1;
    }
    v4 += v132 + 2;
  }
LABEL_299:
  if ((v106 & 0xFF0000) == 0) {
    goto LABEL_338;
  }
  if ((v106 & 0x10000) != 0)
  {
    char v133 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 60);
    if (v133 >= 0x80)
    {
      int v134 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v133);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v134 = 1;
    }
    v4 += v134 + 2;
    if ((v106 & 0x20000) == 0)
    {
LABEL_302:
      if ((v106 & 0x40000) == 0) {
        goto LABEL_303;
      }
      goto LABEL_315;
    }
  }
  else if ((v106 & 0x20000) == 0)
  {
    goto LABEL_302;
  }
  unint64_t v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 61);
  if (v135 >= 0x80)
  {
    int v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v135);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v136 = 1;
  }
  v4 += v136 + 2;
  if ((v106 & 0x40000) == 0)
  {
LABEL_303:
    if ((v106 & 0x80000) == 0) {
      goto LABEL_304;
    }
    goto LABEL_319;
  }
LABEL_315:
  int v137 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 62);
  if (v137 >= 0x80)
  {
    int v138 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v137);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v138 = 1;
  }
  v4 += v138 + 2;
  if ((v106 & 0x80000) == 0)
  {
LABEL_304:
    if ((v106 & 0x100000) == 0) {
      goto LABEL_305;
    }
    goto LABEL_323;
  }
LABEL_319:
  v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 63);
  if (v139 >= 0x80)
  {
    int v140 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v139);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v140 = 1;
  }
  v4 += v140 + 2;
  if ((v106 & 0x100000) == 0)
  {
LABEL_305:
    if ((v106 & 0x200000) == 0) {
      goto LABEL_336;
    }
LABEL_327:
    uint64_t v143 = *((void *)this + 32);
    int v144 = *(unsigned __int8 *)(v143 + 23);
    char v145 = v144;
    uint64_t v146 = *(void *)(v143 + 8);
    if ((v144 & 0x80u) == 0) {
      unint64_t v147 = *(unsigned __int8 *)(v143 + 23);
    }
    else {
      unint64_t v147 = v146;
    }
    if (v147 >= 0x80)
    {
      int v148 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v147);
      int v144 = *(unsigned __int8 *)(v143 + 23);
      uint64_t v146 = *(void *)(v143 + 8);
      unsigned int v106 = *((_DWORD *)this + 169);
      char v145 = *(unsigned char *)(v143 + 23);
    }
    else
    {
      int v148 = 1;
    }
    if (v145 < 0) {
      int v144 = v146;
    }
    v4 += v148 + v144 + 2;
    goto LABEL_336;
  }
LABEL_323:
  unsigned int v141 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 72);
  if (v141 >= 0x80)
  {
    int v142 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v141);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v142 = 1;
  }
  v4 += v142 + 2;
  if ((v106 & 0x200000) != 0) {
    goto LABEL_327;
  }
LABEL_336:
  if ((v106 & 0x800000) != 0) {
    v4 += 3;
  }
LABEL_338:
  if (!HIBYTE(v106)) {
    goto LABEL_375;
  }
  int v149 = v4 + 3;
  if ((v106 & 0x1000000) == 0) {
    int v149 = v4;
  }
  if ((v106 & 0x2000000) != 0) {
    int v4 = v149 + 3;
  }
  else {
    int v4 = v149;
  }
  if ((v106 & 0x4000000) != 0)
  {
    v150 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 73);
    if (v150 >= 0x80)
    {
      int v151 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v150);
      unsigned int v106 = *((_DWORD *)this + 169);
    }
    else
    {
      int v151 = 1;
    }
    v4 += v151 + 2;
    if ((v106 & 0x8000000) == 0)
    {
LABEL_346:
      if ((v106 & 0x10000000) == 0) {
        goto LABEL_347;
      }
      goto LABEL_359;
    }
  }
  else if ((v106 & 0x8000000) == 0)
  {
    goto LABEL_346;
  }
  v152 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 74);
  if (v152 >= 0x80)
  {
    int v153 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v152);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v153 = 1;
  }
  v4 += v153 + 2;
  if ((v106 & 0x10000000) == 0)
  {
LABEL_347:
    if ((v106 & 0x20000000) == 0) {
      goto LABEL_348;
    }
    goto LABEL_363;
  }
LABEL_359:
  v154 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 75);
  if (v154 >= 0x80)
  {
    int v155 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v154);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v155 = 1;
  }
  v4 += v155 + 2;
  if ((v106 & 0x20000000) == 0)
  {
LABEL_348:
    if ((v106 & 0x40000000) == 0) {
      goto LABEL_349;
    }
    goto LABEL_367;
  }
LABEL_363:
  v156 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 76);
  if (v156 >= 0x80)
  {
    int v157 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v156);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v157 = 1;
  }
  v4 += v157 + 2;
  if ((v106 & 0x40000000) == 0)
  {
LABEL_349:
    if ((v106 & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_371;
  }
LABEL_367:
  v158 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 77);
  if (v158 >= 0x80)
  {
    int v159 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v158);
    unsigned int v106 = *((_DWORD *)this + 169);
  }
  else
  {
    int v159 = 1;
  }
  v4 += v159 + 2;
  if ((v106 & 0x80000000) != 0)
  {
LABEL_371:
    v160 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 78);
    if (v160 >= 0x80) {
      int v161 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v160);
    }
    else {
      int v161 = 1;
    }
    v4 += v161 + 2;
  }
LABEL_375:
  unsigned int v162 = *((_DWORD *)this + 170);
  if (!(_BYTE)v162) {
    goto LABEL_417;
  }
  if (v162)
  {
    v163 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 79);
    if (v163 >= 0x80)
    {
      int v164 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v163);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v164 = 1;
    }
    v4 += v164 + 2;
    if ((v162 & 2) == 0)
    {
LABEL_378:
      if ((v162 & 4) == 0) {
        goto LABEL_379;
      }
      goto LABEL_393;
    }
  }
  else if ((v162 & 2) == 0)
  {
    goto LABEL_378;
  }
  v165 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 80);
  if (v165 >= 0x80)
  {
    int v166 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v165);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v166 = 1;
  }
  v4 += v166 + 2;
  if ((v162 & 4) == 0)
  {
LABEL_379:
    if ((v162 & 8) == 0) {
      goto LABEL_380;
    }
    goto LABEL_397;
  }
LABEL_393:
  unint64_t v167 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 81);
  if (v167 >= 0x80)
  {
    int v168 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v167);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v168 = 1;
  }
  v4 += v168 + 2;
  if ((v162 & 8) == 0)
  {
LABEL_380:
    if ((v162 & 0x10) == 0) {
      goto LABEL_381;
    }
    goto LABEL_401;
  }
LABEL_397:
  v169 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 82);
  if (v169 >= 0x80)
  {
    int v170 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v169);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v170 = 1;
  }
  v4 += v170 + 2;
  if ((v162 & 0x10) == 0)
  {
LABEL_381:
    if ((v162 & 0x20) == 0) {
      goto LABEL_382;
    }
    goto LABEL_405;
  }
LABEL_401:
  v171 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 83);
  if (v171 >= 0x80)
  {
    int v172 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v171);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v172 = 1;
  }
  v4 += v172 + 2;
  if ((v162 & 0x20) == 0)
  {
LABEL_382:
    if ((v162 & 0x40) == 0) {
      goto LABEL_383;
    }
    goto LABEL_409;
  }
LABEL_405:
  v173 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 84);
  if (v173 >= 0x80)
  {
    int v174 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v173);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v174 = 1;
  }
  v4 += v174 + 2;
  if ((v162 & 0x40) == 0)
  {
LABEL_383:
    if ((v162 & 0x80) == 0) {
      goto LABEL_417;
    }
    goto LABEL_413;
  }
LABEL_409:
  int v175 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 85);
  if (v175 >= 0x80)
  {
    int v176 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v175);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v176 = 1;
  }
  v4 += v176 + 2;
  if ((v162 & 0x80) != 0)
  {
LABEL_413:
    unsigned int v177 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 86);
    if (v177 >= 0x80)
    {
      int v178 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v177);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v178 = 1;
    }
    v4 += v178 + 2;
  }
LABEL_417:
  if ((v162 & 0xFF00) == 0) {
    goto LABEL_459;
  }
  if ((v162 & 0x100) != 0)
  {
    v179 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 87);
    if (v179 >= 0x80)
    {
      int v180 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v179);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v180 = 1;
    }
    v4 += v180 + 2;
    if ((v162 & 0x200) == 0)
    {
LABEL_420:
      if ((v162 & 0x400) == 0) {
        goto LABEL_421;
      }
      goto LABEL_435;
    }
  }
  else if ((v162 & 0x200) == 0)
  {
    goto LABEL_420;
  }
  v181 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 88);
  if (v181 >= 0x80)
  {
    int v182 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v181);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v182 = 1;
  }
  v4 += v182 + 2;
  if ((v162 & 0x400) == 0)
  {
LABEL_421:
    if ((v162 & 0x800) == 0) {
      goto LABEL_422;
    }
    goto LABEL_439;
  }
LABEL_435:
  v183 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 89);
  if (v183 >= 0x80)
  {
    int v184 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v183);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v184 = 1;
  }
  v4 += v184 + 2;
  if ((v162 & 0x800) == 0)
  {
LABEL_422:
    if ((v162 & 0x1000) == 0) {
      goto LABEL_423;
    }
    goto LABEL_443;
  }
LABEL_439:
  v185 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 90);
  if (v185 >= 0x80)
  {
    int v186 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v185);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v186 = 1;
  }
  v4 += v186 + 2;
  if ((v162 & 0x1000) == 0)
  {
LABEL_423:
    if ((v162 & 0x2000) == 0) {
      goto LABEL_424;
    }
    goto LABEL_447;
  }
LABEL_443:
  unsigned int v187 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 91);
  if (v187 >= 0x80)
  {
    int v188 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v187);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v188 = 1;
  }
  v4 += v188 + 2;
  if ((v162 & 0x2000) == 0)
  {
LABEL_424:
    if ((v162 & 0x4000) == 0) {
      goto LABEL_425;
    }
    goto LABEL_451;
  }
LABEL_447:
  v189 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 92);
  if (v189 >= 0x80)
  {
    int v190 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v189);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v190 = 1;
  }
  v4 += v190 + 2;
  if ((v162 & 0x4000) == 0)
  {
LABEL_425:
    if ((v162 & 0x8000) == 0) {
      goto LABEL_459;
    }
    goto LABEL_455;
  }
LABEL_451:
  v191 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 93);
  if (v191 >= 0x80)
  {
    int v192 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v191);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v192 = 1;
  }
  v4 += v192 + 2;
  if ((v162 & 0x8000) != 0)
  {
LABEL_455:
    v193 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 94);
    if (v193 >= 0x80)
    {
      int v194 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v193);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v194 = 1;
    }
    v4 += v194 + 2;
  }
LABEL_459:
  if ((v162 & 0xFF0000) == 0) {
    goto LABEL_503;
  }
  if ((v162 & 0x10000) != 0)
  {
    v195 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 95);
    if (v195 >= 0x80)
    {
      int v196 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v195);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v196 = 1;
    }
    v4 += v196 + 2;
    if ((v162 & 0x20000) == 0)
    {
LABEL_462:
      if ((v162 & 0x40000) == 0) {
        goto LABEL_463;
      }
      goto LABEL_474;
    }
  }
  else if ((v162 & 0x20000) == 0)
  {
    goto LABEL_462;
  }
  unsigned int v197 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 96);
  if (v197 >= 0x80)
  {
    int v198 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v197);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v198 = 1;
  }
  v4 += v198 + 2;
  if ((v162 & 0x40000) == 0)
  {
LABEL_463:
    if ((v162 & 0x80000) == 0) {
      goto LABEL_464;
    }
LABEL_478:
    v201 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 98);
    if (v201 >= 0x80)
    {
      int v202 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v201);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v202 = 1;
    }
    v4 += v202 + 2;
    if ((v162 & 0x100000) == 0) {
      goto LABEL_486;
    }
    goto LABEL_482;
  }
LABEL_474:
  unsigned int v199 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 97);
  if (v199 >= 0x80)
  {
    int v200 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v199);
    unsigned int v162 = *((_DWORD *)this + 170);
  }
  else
  {
    int v200 = 1;
  }
  v4 += v200 + 2;
  if ((v162 & 0x80000) != 0) {
    goto LABEL_478;
  }
LABEL_464:
  if ((v162 & 0x100000) != 0)
  {
LABEL_482:
    v203 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 100);
    if (v203 >= 0x80)
    {
      int v204 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v203);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v204 = 1;
    }
    v4 += v204 + 2;
  }
LABEL_486:
  if ((v162 & 0x200000) != 0) {
    v4 += 3;
  }
  if ((v162 & 0x400000) != 0)
  {
    v205 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 101);
    if (v205 >= 0x80)
    {
      int v206 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v205);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v206 = 1;
    }
    v4 += v206 + 2;
  }
  if ((v162 & 0x800000) != 0)
  {
    uint64_t v207 = *((void *)this + 51);
    int v208 = *(unsigned __int8 *)(v207 + 23);
    char v209 = v208;
    uint64_t v210 = *(void *)(v207 + 8);
    if ((v208 & 0x80u) == 0) {
      unint64_t v211 = *(unsigned __int8 *)(v207 + 23);
    }
    else {
      unint64_t v211 = v210;
    }
    if (v211 >= 0x80)
    {
      int v212 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v211);
      int v208 = *(unsigned __int8 *)(v207 + 23);
      uint64_t v210 = *(void *)(v207 + 8);
      unsigned int v162 = *((_DWORD *)this + 170);
      char v209 = *(unsigned char *)(v207 + 23);
    }
    else
    {
      int v212 = 1;
    }
    if (v209 < 0) {
      int v208 = v210;
    }
    v4 += v212 + v208 + 2;
  }
LABEL_503:
  if (!HIBYTE(v162)) {
    goto LABEL_535;
  }
  if ((v162 & 0x1000000) != 0)
  {
    unsigned int v213 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 104);
    if ((v213 & 0x80000000) != 0)
    {
      int v214 = 10;
    }
    else if (v213 >= 0x80)
    {
      int v214 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v213);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v214 = 1;
    }
    v4 += v214 + 2;
  }
  if ((v162 & 0x2000000) != 0)
  {
    v215 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 105);
    if ((v215 & 0x80000000) != 0)
    {
      int v216 = 10;
    }
    else if (v215 >= 0x80)
    {
      int v216 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v215);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v216 = 1;
    }
    v4 += v216 + 2;
  }
  if ((v162 & 0x4000000) != 0) {
    v4 += 3;
  }
  if ((v162 & 0x10000000) != 0)
  {
    v217 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 114);
    if (v217 >= 0x80)
    {
      int v218 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v217);
      unsigned int v162 = *((_DWORD *)this + 170);
    }
    else
    {
      int v218 = 1;
    }
    v4 += v218 + 2;
    if ((v162 & 0x20000000) == 0)
    {
LABEL_522:
      if ((v162 & 0x40000000) == 0) {
        goto LABEL_523;
      }
LABEL_530:
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                        + 58))
          + 2;
      if ((*((_DWORD *)this + 170) & 0x80000000) == 0) {
        goto LABEL_535;
      }
      goto LABEL_531;
    }
  }
  else if ((v162 & 0x20000000) == 0)
  {
    goto LABEL_522;
  }
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 56))
      + 2;
  unsigned int v162 = *((_DWORD *)this + 170);
  if ((v162 & 0x40000000) != 0) {
    goto LABEL_530;
  }
LABEL_523:
  if ((v162 & 0x80000000) == 0) {
    goto LABEL_535;
  }
LABEL_531:
  v219 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 115);
  if (v219 >= 0x80) {
    int v220 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v219);
  }
  else {
    int v220 = 1;
  }
  v4 += v220 + 2;
LABEL_535:
  unsigned int v221 = *((_DWORD *)this + 171);
  if (!(_BYTE)v221) {
    goto LABEL_568;
  }
  if (v221)
  {
    unint64_t v222 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 120);
    if (v222 >= 0x80)
    {
      int v223 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v222);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v223 = 1;
    }
    v4 += v223 + 2;
    if ((v221 & 2) == 0)
    {
LABEL_538:
      if ((v221 & 4) == 0) {
        goto LABEL_539;
      }
      goto LABEL_548;
    }
  }
  else if ((v221 & 2) == 0)
  {
    goto LABEL_538;
  }
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 59))
      + 2;
  unsigned int v221 = *((_DWORD *)this + 171);
  if ((v221 & 4) == 0)
  {
LABEL_539:
    if ((v221 & 8) == 0) {
      goto LABEL_540;
    }
    goto LABEL_549;
  }
LABEL_548:
  v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                    + 61))
      + 2;
  unsigned int v221 = *((_DWORD *)this + 171);
  if ((v221 & 8) == 0)
  {
LABEL_540:
    if ((v221 & 0x10) == 0) {
      goto LABEL_541;
    }
LABEL_553:
    v226 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 124);
    if (v226 >= 0x80)
    {
      int v227 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v226);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v227 = 1;
    }
    v4 += v227 + 2;
    if ((v221 & 0x20) == 0) {
      goto LABEL_561;
    }
    goto LABEL_557;
  }
LABEL_549:
  v224 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 121);
  if (v224 >= 0x80)
  {
    int v225 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v224);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v225 = 1;
  }
  v4 += v225 + 2;
  if ((v221 & 0x10) != 0) {
    goto LABEL_553;
  }
LABEL_541:
  if ((v221 & 0x20) != 0)
  {
LABEL_557:
    v228 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 125);
    if (v228 >= 0x80)
    {
      int v229 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v228);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v229 = 1;
    }
    v4 += v229 + 2;
  }
LABEL_561:
  if ((v221 & 0x40) != 0) {
    v4 += 3;
  }
  if ((v221 & 0x80) != 0)
  {
    unint64_t v230 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 126);
    if (v230 >= 0x80)
    {
      int v231 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v230);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v231 = 1;
    }
    v4 += v231 + 2;
  }
LABEL_568:
  if ((v221 & 0xFF00) == 0) {
    goto LABEL_592;
  }
  if ((v221 & 0x100) != 0)
  {
    v232 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 127);
    if (v232 >= 0x80)
    {
      int v233 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v232);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v233 = 1;
    }
    v4 += v233 + 2;
  }
  if ((v221 & 0x200) != 0) {
    v4 += 3;
  }
  if ((v221 & 0x1000) != 0)
  {
    v234 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 138);
    if (v234 >= 0x80)
    {
      int v235 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v234);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v235 = 1;
    }
    v4 += v235 + 2;
    if ((v221 & 0x2000) == 0)
    {
LABEL_578:
      if ((v221 & 0x4000) == 0) {
        goto LABEL_592;
      }
      goto LABEL_588;
    }
  }
  else if ((v221 & 0x2000) == 0)
  {
    goto LABEL_578;
  }
  v236 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 139);
  if (v236 >= 0x80)
  {
    int v237 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v236);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v237 = 1;
  }
  v4 += v237 + 2;
  if ((v221 & 0x4000) != 0)
  {
LABEL_588:
    v238 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 146);
    if (v238 >= 0x80)
    {
      int v239 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v238);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v239 = 1;
    }
    v4 += v239 + 2;
  }
LABEL_592:
  if ((v221 & 0xFF0000) == 0) {
    goto LABEL_634;
  }
  if ((v221 & 0x10000) != 0)
  {
    v240 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 147);
    if (v240 >= 0x80)
    {
      int v241 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v240);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v241 = 1;
    }
    v4 += v241 + 2;
    if ((v221 & 0x20000) == 0)
    {
LABEL_595:
      if ((v221 & 0x40000) == 0) {
        goto LABEL_596;
      }
      goto LABEL_610;
    }
  }
  else if ((v221 & 0x20000) == 0)
  {
    goto LABEL_595;
  }
  v242 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 148);
  if (v242 >= 0x80)
  {
    int v243 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v242);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v243 = 1;
  }
  v4 += v243 + 2;
  if ((v221 & 0x40000) == 0)
  {
LABEL_596:
    if ((v221 & 0x80000) == 0) {
      goto LABEL_597;
    }
    goto LABEL_614;
  }
LABEL_610:
  v244 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 149);
  if (v244 >= 0x80)
  {
    int v245 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v244);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v245 = 1;
  }
  v4 += v245 + 2;
  if ((v221 & 0x80000) == 0)
  {
LABEL_597:
    if ((v221 & 0x100000) == 0) {
      goto LABEL_598;
    }
    goto LABEL_618;
  }
LABEL_614:
  v246 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 150);
  if (v246 >= 0x80)
  {
    int v247 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v246);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v247 = 1;
  }
  v4 += v247 + 2;
  if ((v221 & 0x100000) == 0)
  {
LABEL_598:
    if ((v221 & 0x200000) == 0) {
      goto LABEL_599;
    }
    goto LABEL_622;
  }
LABEL_618:
  v248 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 151);
  if (v248 >= 0x80)
  {
    int v249 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v248);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v249 = 1;
  }
  v4 += v249 + 2;
  if ((v221 & 0x200000) == 0)
  {
LABEL_599:
    if ((v221 & 0x400000) == 0) {
      goto LABEL_600;
    }
    goto LABEL_626;
  }
LABEL_622:
  v250 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 152);
  if (v250 >= 0x80)
  {
    int v251 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v250);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v251 = 1;
  }
  v4 += v251 + 2;
  if ((v221 & 0x400000) == 0)
  {
LABEL_600:
    if ((v221 & 0x800000) == 0) {
      goto LABEL_634;
    }
    goto LABEL_630;
  }
LABEL_626:
  v252 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 153);
  if (v252 >= 0x80)
  {
    int v253 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v252);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v253 = 1;
  }
  v4 += v253 + 2;
  if ((v221 & 0x800000) != 0)
  {
LABEL_630:
    v254 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 154);
    if (v254 >= 0x80)
    {
      int v255 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v254);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v255 = 1;
    }
    v4 += v255 + 2;
  }
LABEL_634:
  if (!HIBYTE(v221)) {
    goto LABEL_667;
  }
  if ((v221 & 0x1000000) == 0)
  {
    if ((v221 & 0x2000000) == 0) {
      goto LABEL_637;
    }
LABEL_643:
    v258 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 157);
    if (v258 >= 0x80)
    {
      int v259 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v258);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v259 = 1;
    }
    v4 += v259 + 2;
    if ((v221 & 0x4000000) == 0) {
      goto LABEL_651;
    }
    goto LABEL_647;
  }
  v256 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 156);
  if (v256 >= 0x80)
  {
    int v257 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v256);
    unsigned int v221 = *((_DWORD *)this + 171);
  }
  else
  {
    int v257 = 1;
  }
  v4 += v257 + 2;
  if ((v221 & 0x2000000) != 0) {
    goto LABEL_643;
  }
LABEL_637:
  if ((v221 & 0x4000000) != 0)
  {
LABEL_647:
    v260 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 158);
    if (v260 >= 0x80)
    {
      int v261 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v260);
      unsigned int v221 = *((_DWORD *)this + 171);
    }
    else
    {
      int v261 = 1;
    }
    v4 += v261 + 2;
  }
LABEL_651:
  int v262 = v4 + 3;
  if ((v221 & 0x8000000) == 0) {
    int v262 = v4;
  }
  if ((v221 & 0x10000000) != 0) {
    v262 += 3;
  }
  if ((v221 & 0x20000000) != 0) {
    v262 += 3;
  }
  if ((v221 & 0x40000000) != 0) {
    int v4 = v262 + 3;
  }
  else {
    int v4 = v262;
  }
  if ((v221 & 0x80000000) != 0)
  {
    v263 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 159);
    if ((v263 & 0x80000000) != 0)
    {
      int v264 = 10;
    }
    else if (v263 >= 0x80)
    {
      int v264 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v263);
    }
    else
    {
      int v264 = 1;
    }
    v4 += v264 + 2;
  }
LABEL_667:
  LOBYTE(v265) = *((unsigned char *)this + 688);
  if (!(_BYTE)v265) {
    goto LABEL_703;
  }
  if (*((unsigned char *)this + 688)) {
    v4 += 3;
  }
  if ((*((unsigned char *)this + 688) & 2) == 0)
  {
    if ((*((unsigned char *)this + 688) & 4) == 0) {
      goto LABEL_672;
    }
LABEL_678:
    v268 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 164);
    if (v268 >= 0x80)
    {
      int v269 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v268) + 2;
      int v265 = *((_DWORD *)this + 172);
    }
    else
    {
      int v269 = 3;
    }
    v4 += v269;
    if ((v265 & 8) == 0) {
      goto LABEL_691;
    }
LABEL_682:
    uint64_t v270 = *((void *)this + 81);
    int v271 = *(unsigned __int8 *)(v270 + 23);
    char v272 = v271;
    uint64_t v273 = *(void *)(v270 + 8);
    if ((v271 & 0x80u) == 0) {
      unint64_t v274 = *(unsigned __int8 *)(v270 + 23);
    }
    else {
      unint64_t v274 = v273;
    }
    if (v274 >= 0x80)
    {
      int v275 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v274);
      int v271 = *(unsigned __int8 *)(v270 + 23);
      uint64_t v273 = *(void *)(v270 + 8);
      int v265 = *((_DWORD *)this + 172);
      char v272 = *(unsigned char *)(v270 + 23);
    }
    else
    {
      int v275 = 1;
    }
    if (v272 < 0) {
      int v271 = v273;
    }
    v4 += v275 + v271 + 2;
    goto LABEL_691;
  }
  v266 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 160);
  if (v266 >= 0x80)
  {
    int v267 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v266);
    int v265 = *((_DWORD *)this + 172);
  }
  else
  {
    int v267 = 1;
  }
  v4 += v267 + 2;
  if ((v265 & 4) != 0) {
    goto LABEL_678;
  }
LABEL_672:
  if ((v265 & 8) != 0) {
    goto LABEL_682;
  }
LABEL_691:
  if ((v265 & 0x10) != 0) {
    v4 += 3;
  }
  if ((v265 & 0x20) != 0)
  {
    v276 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 165);
    if (v276 >= 0x80)
    {
      int v277 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v276) + 2;
      int v265 = *((_DWORD *)this + 172);
    }
    else
    {
      int v277 = 3;
    }
    v4 += v277;
  }
  int v278 = v4 + 3;
  if ((v265 & 0x40) == 0) {
    int v278 = v4;
  }
  if ((v265 & 0x80) != 0) {
    int v4 = v278 + 3;
  }
  else {
    int v4 = v278;
  }
LABEL_703:
  int v279 = *((_DWORD *)this + 68);
  int v280 = v4 + 2 * v279;
  if (v279 >= 1)
  {
    for (uint64_t i = 0; i < v279; ++i)
    {
      uint64_t v282 = *(void *)(*((void *)this + 33) + 8 * i);
      int v283 = *(unsigned __int8 *)(v282 + 23);
      char v284 = v283;
      uint64_t v285 = *(void *)(v282 + 8);
      if ((v283 & 0x80u) == 0) {
        unint64_t v286 = *(unsigned __int8 *)(v282 + 23);
      }
      else {
        unint64_t v286 = v285;
      }
      if (v286 >= 0x80)
      {
        int v287 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v286);
        int v283 = *(unsigned __int8 *)(v282 + 23);
        uint64_t v285 = *(void *)(v282 + 8);
        int v279 = *((_DWORD *)this + 68);
        char v284 = *(unsigned char *)(v282 + 23);
      }
      else
      {
        int v287 = 1;
      }
      if (v284 < 0) {
        int v283 = v285;
      }
      v280 += v287 + v283;
    }
  }
  int v288 = *((_DWORD *)this + 108);
  int v289 = v280 + 2 * v288;
  if (v288 >= 1)
  {
    for (uint64_t j = 0; j < v288; ++j)
    {
      uint64_t v291 = *(void *)(*((void *)this + 53) + 8 * j);
      int v292 = *(unsigned __int8 *)(v291 + 23);
      char v293 = v292;
      uint64_t v294 = *(void *)(v291 + 8);
      if ((v292 & 0x80u) == 0) {
        unint64_t v295 = *(unsigned __int8 *)(v291 + 23);
      }
      else {
        unint64_t v295 = v294;
      }
      if (v295 >= 0x80)
      {
        int v296 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v295);
        int v292 = *(unsigned __int8 *)(v291 + 23);
        uint64_t v294 = *(void *)(v291 + 8);
        int v288 = *((_DWORD *)this + 108);
        char v293 = *(unsigned char *)(v291 + 23);
      }
      else
      {
        int v296 = 1;
      }
      if (v293 < 0) {
        int v292 = v294;
      }
      v289 += v296 + v292;
    }
  }
  int v297 = *((_DWORD *)this + 130);
  int v298 = v289 + 2 * v297;
  if (v297 >= 1)
  {
    uint64_t v299 = 0;
    do
    {
      v300 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::ATM_CallEndEvent_myreason::ByteSize(*(awd::metrics::ATM_CallEndEvent_myreason **)(*((void *)this + 64) + 8 * v299));
      int v301 = (int)v300;
      if (v300 >= 0x80) {
        int v302 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v300);
      }
      else {
        int v302 = 1;
      }
      v298 += v301 + v302;
      ++v299;
    }
    while (v299 < *((int *)this + 130));
  }
  int v303 = *((_DWORD *)this + 142);
  uint64_t v304 = (3 * *((_DWORD *)this + 136) + v298 + 2 * v303);
  if (v303 >= 1)
  {
    uint64_t v305 = 0;
    do
    {
      v306 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::ATM_CallEndEvent_handover::ByteSize(*(awd::metrics::ATM_CallEndEvent_handover **)(*((void *)this + 70) + 8 * v305));
      int v307 = (int)v306;
      if (v306 >= 0x80) {
        int v308 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v306);
      }
      else {
        int v308 = 1;
      }
      uint64_t v304 = (v307 + v304 + v308);
      ++v305;
    }
    while (v305 < *((int *)this + 142));
  }
  *((_DWORD *)this + 167) = v304;
  return v304;
}

void awd::metrics::ATM_CallEndEvent::CheckTypeAndMergeFrom(const void **this, const void **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v186);
  }
  int v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 33));
  if (*((int *)lpsrc + 68) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = (const std::string *)*((void *)lpsrc[33] + v5);
      uint64_t v7 = *((int *)this + 68);
      int v8 = *((_DWORD *)this + 69);
      if ((int)v7 >= v8)
      {
        if (v8 == *((_DWORD *)this + 70))
        {
          int v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 33));
          int v8 = *((_DWORD *)this + 69);
        }
        *((_DWORD *)this + 69) = v8 + 1;
        int v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        int v11 = this[33];
        uint64_t v12 = *((int *)this + 68);
        *((_DWORD *)this + 68) = v12 + 1;
        v11[v12] = v10;
      }
      else
      {
        unint64_t v9 = this[33];
        *((_DWORD *)this + 68) = v7 + 1;
        int v10 = (std::string *)v9[v7];
      }
      int v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)lpsrc + 68));
  }
  int v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 53));
  if (*((int *)lpsrc + 108) >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = (const std::string *)*((void *)lpsrc[53] + v14);
      uint64_t v16 = *((int *)this + 108);
      int v17 = *((_DWORD *)this + 109);
      if ((int)v16 >= v17)
      {
        if (v17 == *((_DWORD *)this + 110))
        {
          int v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 53));
          int v17 = *((_DWORD *)this + 109);
        }
        *((_DWORD *)this + 109) = v17 + 1;
        uint64_t v19 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v13);
        unint64_t v20 = this[53];
        uint64_t v21 = *((int *)this + 108);
        *((_DWORD *)this + 108) = v21 + 1;
        v20[v21] = v19;
      }
      else
      {
        char v18 = this[53];
        *((_DWORD *)this + 108) = v16 + 1;
        uint64_t v19 = (std::string *)v18[v16];
      }
      int v13 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v19, v15);
      ++v14;
    }
    while (v14 < *((int *)lpsrc + 108));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 64));
  if (*((int *)lpsrc + 130) >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      int v23 = (const awd::metrics::ATM_CallEndEvent_myreason *)*((void *)lpsrc[64] + v22);
      uint64_t v24 = *((int *)this + 130);
      int v25 = *((_DWORD *)this + 131);
      if ((int)v24 >= v25)
      {
        if (v25 == *((_DWORD *)this + 132))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 64));
          int v25 = *((_DWORD *)this + 131);
        }
        *((_DWORD *)this + 131) = v25 + 1;
        operator new();
      }
      char v26 = (awd::metrics::ATM_CallEndEvent_myreason **)this[64];
      *((_DWORD *)this + 130) = v24 + 1;
      awd::metrics::ATM_CallEndEvent_myreason::MergeFrom(v26[v24], v23);
      ++v22;
    }
    while (v22 < *((int *)lpsrc + 130));
  }
  int v27 = *((_DWORD *)lpsrc + 136);
  if (v27)
  {
    wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve((uint64_t)(this + 67), *((_DWORD *)this + 136) + v27);
    memcpy((char *)this[67] + *((int *)this + 136), lpsrc[67], *((int *)lpsrc + 136));
    *((_DWORD *)this + 136) += *((_DWORD *)lpsrc + 136);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 70));
  if (*((int *)lpsrc + 142) >= 1)
  {
    uint64_t v28 = 0;
    do
    {
      int v29 = (const awd::metrics::ATM_CallEndEvent_handover *)*((void *)lpsrc[70] + v28);
      uint64_t v30 = *((int *)this + 142);
      int v31 = *((_DWORD *)this + 143);
      if ((int)v30 >= v31)
      {
        if (v31 == *((_DWORD *)this + 144))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(this + 70));
          int v31 = *((_DWORD *)this + 143);
        }
        *((_DWORD *)this + 143) = v31 + 1;
        operator new();
      }
      char v32 = (awd::metrics::ATM_CallEndEvent_handover **)this[70];
      *((_DWORD *)this + 142) = v30 + 1;
      awd::metrics::ATM_CallEndEvent_handover::MergeFrom(v32[v30], v29);
      ++v28;
    }
    while (v28 < *((int *)lpsrc + 142));
  }
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if (!(_BYTE)v33) {
    goto LABEL_48;
  }
  if (v33)
  {
    int v51 = lpsrc[1];
    *((_DWORD *)this + 168) |= 1u;
    this[1] = v51;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
    if ((v33 & 2) == 0)
    {
LABEL_41:
      if ((v33 & 4) == 0) {
        goto LABEL_42;
      }
      goto LABEL_160;
    }
  }
  else if ((v33 & 2) == 0)
  {
    goto LABEL_41;
  }
  char v52 = (const std::string *)lpsrc[2];
  *((_DWORD *)this + 168) |= 2u;
  uint64_t v53 = (std::string *)this[2];
  if (v53 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v53, v52);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 4) == 0)
  {
LABEL_42:
    if ((v33 & 8) == 0) {
      goto LABEL_43;
    }
    goto LABEL_161;
  }
LABEL_160:
  char v54 = *((unsigned char *)lpsrc + 28);
  *((_DWORD *)this + 168) |= 4u;
  *((unsigned char *)this + 28) = v54;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 8) == 0)
  {
LABEL_43:
    if ((v33 & 0x10) == 0) {
      goto LABEL_44;
    }
    goto LABEL_163;
  }
LABEL_161:
  int v55 = *((_DWORD *)lpsrc + 6);
  if ((v55 + 1) >= 8) {
    __assert_rtn("set_type", "CATM.pb.h", 12814, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  }
  *((_DWORD *)this + 168) |= 8u;
  *((_DWORD *)this + 6) = v55;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x10) == 0)
  {
LABEL_44:
    if ((v33 & 0x20) == 0) {
      goto LABEL_45;
    }
LABEL_164:
    char v57 = *((unsigned char *)lpsrc + 30);
    *((_DWORD *)this + 168) |= 0x20u;
    *((unsigned char *)this + 30) = v57;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
    if ((v33 & 0x40) == 0)
    {
LABEL_46:
      if ((v33 & 0x80) == 0) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    goto LABEL_165;
  }
LABEL_163:
  char v56 = *((unsigned char *)lpsrc + 29);
  *((_DWORD *)this + 168) |= 0x10u;
  *((unsigned char *)this + 29) = v56;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x20) != 0) {
    goto LABEL_164;
  }
LABEL_45:
  if ((v33 & 0x40) == 0) {
    goto LABEL_46;
  }
LABEL_165:
  char v58 = *((unsigned char *)lpsrc + 31);
  *((_DWORD *)this + 168) |= 0x40u;
  *((unsigned char *)this + 31) = v58;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x80) != 0)
  {
LABEL_47:
    char v34 = *((unsigned char *)lpsrc + 100);
    *((_DWORD *)this + 168) |= 0x80u;
    *((unsigned char *)this + 100) = v34;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
  }
LABEL_48:
  if ((v33 & 0xFF00) == 0) {
    goto LABEL_60;
  }
  if ((v33 & 0x100) != 0)
  {
    int v35 = *((_DWORD *)lpsrc + 10);
    if ((v35 - 1) >= 6 && v35 != -1) {
      __assert_rtn("set_invite_type", "CATM.pb.h", 12925, "::awd::metrics::enum_ATM_invite_call_type_IsValid(value)");
    }
    *((_DWORD *)this + 168) |= 0x100u;
    *((_DWORD *)this + 10) = v35;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
  }
  if ((v33 & 0x200) != 0)
  {
    int v77 = (const std::string *)lpsrc[4];
    *((_DWORD *)this + 168) |= 0x200u;
    unint64_t v78 = (std::string *)this[4];
    if (v78 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v78, v77);
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
    if ((v33 & 0x400) == 0)
    {
LABEL_54:
      if ((v33 & 0x800) == 0) {
        goto LABEL_55;
      }
      goto LABEL_198;
    }
  }
  else if ((v33 & 0x400) == 0)
  {
    goto LABEL_54;
  }
  int v79 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 168) |= 0x400u;
  *((_DWORD *)this + 11) = v79;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x800) == 0)
  {
LABEL_55:
    if ((v33 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_201;
  }
LABEL_198:
  uint64_t v80 = (const std::string *)lpsrc[6];
  *((_DWORD *)this + 168) |= 0x800u;
  int v81 = (std::string *)this[6];
  if (v81 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v81, v80);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x1000) == 0)
  {
LABEL_56:
    if ((v33 & 0x2000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_202;
  }
LABEL_201:
  char v82 = *((unsigned char *)lpsrc + 101);
  *((_DWORD *)this + 168) |= 0x1000u;
  *((unsigned char *)this + 101) = v82;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x2000) == 0)
  {
LABEL_57:
    if ((v33 & 0x4000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_205;
  }
LABEL_202:
  int v83 = (const std::string *)lpsrc[7];
  *((_DWORD *)this + 168) |= 0x2000u;
  uint64_t v84 = (std::string *)this[7];
  if (v84 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v84, v83);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x4000) == 0)
  {
LABEL_58:
    if ((v33 & 0x8000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_205:
  int v85 = (const std::string *)lpsrc[8];
  *((_DWORD *)this + 168) |= 0x4000u;
  char v86 = (std::string *)this[8];
  if (v86 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v86, v85);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x8000) != 0)
  {
LABEL_59:
    int v36 = *((_DWORD *)lpsrc + 24);
    *((_DWORD *)this + 168) |= 0x8000u;
    *((_DWORD *)this + 24) = v36;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
  }
LABEL_60:
  if ((v33 & 0xFF0000) == 0) {
    goto LABEL_70;
  }
  if ((v33 & 0x10000) != 0)
  {
    uint64_t v59 = (const std::string *)lpsrc[9];
    *((_DWORD *)this + 168) |= 0x10000u;
    unint64_t v60 = (std::string *)this[9];
    if (v60 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v60, v59);
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
    if ((v33 & 0x20000) == 0)
    {
LABEL_63:
      if ((v33 & 0x40000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_173;
    }
  }
  else if ((v33 & 0x20000) == 0)
  {
    goto LABEL_63;
  }
  int v61 = (const std::string *)lpsrc[10];
  *((_DWORD *)this + 168) |= 0x20000u;
  uint64_t v62 = (std::string *)this[10];
  if (v62 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v62, v61);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x40000) == 0)
  {
LABEL_64:
    if ((v33 & 0x80000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_176;
  }
LABEL_173:
  int v63 = (const std::string *)lpsrc[11];
  *((_DWORD *)this + 168) |= 0x40000u;
  char v64 = (std::string *)this[11];
  if (v64 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v64, v63);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x80000) == 0)
  {
LABEL_65:
    if ((v33 & 0x100000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_179;
  }
LABEL_176:
  uint64_t v65 = (const std::string *)lpsrc[13];
  *((_DWORD *)this + 168) |= 0x80000u;
  unint64_t v66 = (std::string *)this[13];
  if (v66 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v66, v65);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x100000) == 0)
  {
LABEL_66:
    if ((v33 & 0x200000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_182;
  }
LABEL_179:
  int v67 = (const std::string *)lpsrc[14];
  *((_DWORD *)this + 168) |= 0x100000u;
  uint64_t v68 = (std::string *)this[14];
  if (v68 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v68, v67);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x200000) == 0)
  {
LABEL_67:
    if ((v33 & 0x400000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_183;
  }
LABEL_182:
  int v69 = *((_DWORD *)lpsrc + 30);
  *((_DWORD *)this + 168) |= 0x200000u;
  *((_DWORD *)this + 30) = v69;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x400000) == 0)
  {
LABEL_68:
    if ((v33 & 0x800000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
LABEL_183:
  int v70 = *((_DWORD *)lpsrc + 31);
  *((_DWORD *)this + 168) |= 0x400000u;
  *((_DWORD *)this + 31) = v70;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x800000) != 0)
  {
LABEL_69:
    int v37 = *((_DWORD *)lpsrc + 32);
    *((_DWORD *)this + 168) |= 0x800000u;
    *((_DWORD *)this + 32) = v37;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
  }
LABEL_70:
  if (!HIBYTE(v33)) {
    goto LABEL_79;
  }
  if ((v33 & 0x1000000) != 0)
  {
    char v144 = *((unsigned char *)lpsrc + 102);
    *((_DWORD *)this + 168) |= 0x1000000u;
    *((unsigned char *)this + 102) = v144;
    unsigned int v33 = *((_DWORD *)lpsrc + 168);
    if ((v33 & 0x2000000) == 0)
    {
LABEL_73:
      if ((v33 & 0x4000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_320;
    }
  }
  else if ((v33 & 0x2000000) == 0)
  {
    goto LABEL_73;
  }
  int v145 = *((_DWORD *)lpsrc + 33);
  *((_DWORD *)this + 168) |= 0x2000000u;
  *((_DWORD *)this + 33) = v145;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x4000000) == 0)
  {
LABEL_74:
    if ((v33 & 0x8000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_321;
  }
LABEL_320:
  int v146 = *((_DWORD *)lpsrc + 36);
  *((_DWORD *)this + 168) |= 0x4000000u;
  *((_DWORD *)this + 36) = v146;
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x8000000) == 0)
  {
LABEL_75:
    if ((v33 & 0x10000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_324;
  }
LABEL_321:
  unint64_t v147 = (const std::string *)lpsrc[17];
  *((_DWORD *)this + 168) |= 0x8000000u;
  int v148 = (std::string *)this[17];
  if (v148 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v148, v147);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v33 & 0x20000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_327;
  }
LABEL_324:
  int v149 = (const std::string *)lpsrc[19];
  *((_DWORD *)this + 168) |= 0x10000000u;
  v150 = (std::string *)this[19];
  if (v150 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v150, v149);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x20000000) == 0)
  {
LABEL_77:
    if ((v33 & 0x40000000) == 0) {
      goto LABEL_78;
    }
LABEL_330:
    int v153 = *((_DWORD *)lpsrc + 37);
    *((_DWORD *)this + 168) |= 0x40000000u;
    *((_DWORD *)this + 37) = v153;
    if ((lpsrc[84] & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_331;
  }
LABEL_327:
  int v151 = (const std::string *)lpsrc[20];
  *((_DWORD *)this + 168) |= 0x20000000u;
  v152 = (std::string *)this[20];
  if (v152 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v152, v151);
  unsigned int v33 = *((_DWORD *)lpsrc + 168);
  if ((v33 & 0x40000000) != 0) {
    goto LABEL_330;
  }
LABEL_78:
  if ((v33 & 0x80000000) == 0) {
    goto LABEL_79;
  }
LABEL_331:
  int v154 = *((_DWORD *)lpsrc + 42);
  *((_DWORD *)this + 168) |= 0x80000000;
  *((_DWORD *)this + 42) = v154;
LABEL_79:
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if (!(_BYTE)v38) {
    goto LABEL_92;
  }
  if (v38)
  {
    char v71 = *((unsigned char *)lpsrc + 103);
    *((_DWORD *)this + 169) |= 1u;
    *((unsigned char *)this + 103) = v71;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
    if ((v38 & 2) == 0)
    {
LABEL_82:
      if ((v38 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_187;
    }
  }
  else if ((v38 & 2) == 0)
  {
    goto LABEL_82;
  }
  int v72 = *((_DWORD *)lpsrc + 43);
  *((_DWORD *)this + 169) |= 2u;
  *((_DWORD *)this + 43) = v72;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 4) == 0)
  {
LABEL_83:
    if ((v38 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_188;
  }
LABEL_187:
  int v73 = *((_DWORD *)lpsrc + 44);
  *((_DWORD *)this + 169) |= 4u;
  *((_DWORD *)this + 44) = v73;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 8) == 0)
  {
LABEL_84:
    if ((v38 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_189;
  }
LABEL_188:
  uint64_t v74 = lpsrc[23];
  *((_DWORD *)this + 169) |= 8u;
  this[23] = v74;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x10) == 0)
  {
LABEL_85:
    if ((v38 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_191;
  }
LABEL_189:
  unsigned int v75 = *((_DWORD *)lpsrc + 45);
  if (!awd::metrics::enum_ATM_CallEndReason_IsValid((awd::metrics *)v75)) {
    __assert_rtn("set_end_reason", "CATM.pb.h", 14118, "::awd::metrics::enum_ATM_CallEndReason_IsValid(value)");
  }
  *((_DWORD *)this + 169) |= 0x10u;
  *((_DWORD *)this + 45) = v75;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x20) == 0)
  {
LABEL_86:
    if ((v38 & 0x40) == 0) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_191:
  unsigned int v76 = *((_DWORD *)lpsrc + 48);
  if ((awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v76) & 1) == 0) {
    __assert_rtn("set_status_code", "CATM.pb.h", 14141, "::awd::metrics::RESPONSE_Code_IsValid(value)");
  }
  *((_DWORD *)this + 169) |= 0x20u;
  *((_DWORD *)this + 48) = v76;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x40) == 0) {
    goto LABEL_88;
  }
LABEL_87:
  char v39 = *((unsigned char *)lpsrc + 236);
  *((_DWORD *)this + 169) |= 0x40u;
  *((unsigned char *)this + 236) = v39;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
LABEL_88:
  if ((v38 & 0x80) != 0)
  {
    unint64_t v40 = (const std::string *)lpsrc[25];
    *((_DWORD *)this + 169) |= 0x80u;
    int v41 = (std::string *)this[25];
    if (v41 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v41, v40);
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
LABEL_92:
  if ((v38 & 0xFF00) == 0) {
    goto LABEL_108;
  }
  if ((v38 & 0x100) != 0)
  {
    char v42 = *((unsigned char *)lpsrc + 237);
    *((_DWORD *)this + 169) |= 0x100u;
    *((unsigned char *)this + 237) = v42;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
  if ((v38 & 0x200) != 0)
  {
    unsigned int v43 = *((_DWORD *)lpsrc + 49);
    if (v43 >= 4) {
      __assert_rtn("set_callendstatus", "CATM.pb.h", 14278, "::awd::metrics::enum_ATM_call_end_status_IsValid(value)");
    }
    *((_DWORD *)this + 169) |= 0x200u;
    *((_DWORD *)this + 49) = v43;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
  if ((v38 & 0x400) != 0)
  {
    int v44 = *((_DWORD *)lpsrc + 52);
    *((_DWORD *)this + 169) |= 0x400u;
    *((_DWORD *)this + 52) = v44;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
  if ((v38 & 0x800) != 0)
  {
    unsigned int v45 = *((_DWORD *)lpsrc + 53);
    if ((awd::metrics::session_termination_reason_IsValid((awd::metrics *)v45) & 1) == 0) {
      __assert_rtn("set_bye_reason", "CATM.pb.h", 14323, "::awd::metrics::session_termination_reason_IsValid(value)");
    }
    *((_DWORD *)this + 169) |= 0x800u;
    *((_DWORD *)this + 53) = v45;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
  if ((v38 & 0x1000) != 0)
  {
    unsigned int v123 = lpsrc[27];
    *((_DWORD *)this + 169) |= 0x1000u;
    this[27] = v123;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
    if ((v38 & 0x2000) == 0)
    {
LABEL_105:
      if ((v38 & 0x4000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_295;
    }
  }
  else if ((v38 & 0x2000) == 0)
  {
    goto LABEL_105;
  }
  int v124 = *((_DWORD *)lpsrc + 56);
  *((_DWORD *)this + 169) |= 0x2000u;
  *((_DWORD *)this + 56) = v124;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x4000) == 0)
  {
LABEL_106:
    if ((v38 & 0x8000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
LABEL_295:
  int v125 = *((_DWORD *)lpsrc + 57);
  *((_DWORD *)this + 169) |= 0x4000u;
  *((_DWORD *)this + 57) = v125;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x8000) != 0)
  {
LABEL_107:
    int v46 = *((_DWORD *)lpsrc + 58);
    *((_DWORD *)this + 169) |= 0x8000u;
    *((_DWORD *)this + 58) = v46;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
LABEL_108:
  if ((v38 & 0xFF0000) == 0) {
    goto LABEL_117;
  }
  if ((v38 & 0x10000) != 0)
  {
    int v87 = *((_DWORD *)lpsrc + 60);
    *((_DWORD *)this + 169) |= 0x10000u;
    *((_DWORD *)this + 60) = v87;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
    if ((v38 & 0x20000) == 0)
    {
LABEL_111:
      if ((v38 & 0x40000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_211;
    }
  }
  else if ((v38 & 0x20000) == 0)
  {
    goto LABEL_111;
  }
  int v88 = *((_DWORD *)lpsrc + 61);
  *((_DWORD *)this + 169) |= 0x20000u;
  *((_DWORD *)this + 61) = v88;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x40000) == 0)
  {
LABEL_112:
    if ((v38 & 0x80000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_212;
  }
LABEL_211:
  int v89 = *((_DWORD *)lpsrc + 62);
  *((_DWORD *)this + 169) |= 0x40000u;
  *((_DWORD *)this + 62) = v89;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x80000) == 0)
  {
LABEL_113:
    if ((v38 & 0x100000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_213;
  }
LABEL_212:
  int v90 = *((_DWORD *)lpsrc + 63);
  *((_DWORD *)this + 169) |= 0x80000u;
  *((_DWORD *)this + 63) = v90;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x100000) == 0)
  {
LABEL_114:
    if ((v38 & 0x200000) == 0) {
      goto LABEL_115;
    }
    goto LABEL_214;
  }
LABEL_213:
  int v91 = *((_DWORD *)lpsrc + 72);
  *((_DWORD *)this + 169) |= 0x100000u;
  *((_DWORD *)this + 72) = v91;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x200000) == 0)
  {
LABEL_115:
    if ((v38 & 0x800000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_116;
  }
LABEL_214:
  char v92 = (const std::string *)lpsrc[32];
  *((_DWORD *)this + 169) |= 0x200000u;
  uint64_t v93 = (std::string *)this[32];
  if (v93 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v93, v92);
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x800000) != 0)
  {
LABEL_116:
    char v47 = *((unsigned char *)lpsrc + 238);
    *((_DWORD *)this + 169) |= 0x800000u;
    *((unsigned char *)this + 238) = v47;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
  }
LABEL_117:
  if (!HIBYTE(v38)) {
    goto LABEL_126;
  }
  if ((v38 & 0x1000000) != 0)
  {
    char v155 = *((unsigned char *)lpsrc + 239);
    *((_DWORD *)this + 169) |= 0x1000000u;
    *((unsigned char *)this + 239) = v155;
    unsigned int v38 = *((_DWORD *)lpsrc + 169);
    if ((v38 & 0x2000000) == 0)
    {
LABEL_120:
      if ((v38 & 0x4000000) == 0) {
        goto LABEL_121;
      }
      goto LABEL_334;
    }
  }
  else if ((v38 & 0x2000000) == 0)
  {
    goto LABEL_120;
  }
  char v156 = *((unsigned char *)lpsrc + 396);
  *((_DWORD *)this + 169) |= 0x2000000u;
  *((unsigned char *)this + 396) = v156;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x4000000) == 0)
  {
LABEL_121:
    if ((v38 & 0x8000000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_335;
  }
LABEL_334:
  int v157 = *((_DWORD *)lpsrc + 73);
  *((_DWORD *)this + 169) |= 0x4000000u;
  *((_DWORD *)this + 73) = v157;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x8000000) == 0)
  {
LABEL_122:
    if ((v38 & 0x10000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_336;
  }
LABEL_335:
  int v158 = *((_DWORD *)lpsrc + 74);
  *((_DWORD *)this + 169) |= 0x8000000u;
  *((_DWORD *)this + 74) = v158;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x10000000) == 0)
  {
LABEL_123:
    if ((v38 & 0x20000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_337;
  }
LABEL_336:
  int v159 = *((_DWORD *)lpsrc + 75);
  *((_DWORD *)this + 169) |= 0x10000000u;
  *((_DWORD *)this + 75) = v159;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x20000000) == 0)
  {
LABEL_124:
    if ((v38 & 0x40000000) == 0) {
      goto LABEL_125;
    }
LABEL_338:
    int v161 = *((_DWORD *)lpsrc + 77);
    *((_DWORD *)this + 169) |= 0x40000000u;
    *((_DWORD *)this + 77) = v161;
    if ((*((_DWORD *)lpsrc + 169) & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_339;
  }
LABEL_337:
  int v160 = *((_DWORD *)lpsrc + 76);
  *((_DWORD *)this + 169) |= 0x20000000u;
  *((_DWORD *)this + 76) = v160;
  unsigned int v38 = *((_DWORD *)lpsrc + 169);
  if ((v38 & 0x40000000) != 0) {
    goto LABEL_338;
  }
LABEL_125:
  if ((v38 & 0x80000000) == 0) {
    goto LABEL_126;
  }
LABEL_339:
  int v162 = *((_DWORD *)lpsrc + 78);
  *((_DWORD *)this + 169) |= 0x80000000;
  *((_DWORD *)this + 78) = v162;
LABEL_126:
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if (!(_BYTE)v48) {
    goto LABEL_136;
  }
  if (v48)
  {
    int v94 = *((_DWORD *)lpsrc + 79);
    *((_DWORD *)this + 170) |= 1u;
    *((_DWORD *)this + 79) = v94;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
    if ((v48 & 2) == 0)
    {
LABEL_129:
      if ((v48 & 4) == 0) {
        goto LABEL_130;
      }
      goto LABEL_220;
    }
  }
  else if ((v48 & 2) == 0)
  {
    goto LABEL_129;
  }
  int v95 = *((_DWORD *)lpsrc + 80);
  *((_DWORD *)this + 170) |= 2u;
  *((_DWORD *)this + 80) = v95;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 4) == 0)
  {
LABEL_130:
    if ((v48 & 8) == 0) {
      goto LABEL_131;
    }
    goto LABEL_221;
  }
LABEL_220:
  int v96 = *((_DWORD *)lpsrc + 81);
  *((_DWORD *)this + 170) |= 4u;
  *((_DWORD *)this + 81) = v96;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 8) == 0)
  {
LABEL_131:
    if ((v48 & 0x10) == 0) {
      goto LABEL_132;
    }
    goto LABEL_222;
  }
LABEL_221:
  int v97 = *((_DWORD *)lpsrc + 82);
  *((_DWORD *)this + 170) |= 8u;
  *((_DWORD *)this + 82) = v97;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x10) == 0)
  {
LABEL_132:
    if ((v48 & 0x20) == 0) {
      goto LABEL_133;
    }
    goto LABEL_223;
  }
LABEL_222:
  int v98 = *((_DWORD *)lpsrc + 83);
  *((_DWORD *)this + 170) |= 0x10u;
  *((_DWORD *)this + 83) = v98;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x20) == 0)
  {
LABEL_133:
    if ((v48 & 0x40) == 0) {
      goto LABEL_134;
    }
    goto LABEL_224;
  }
LABEL_223:
  int v99 = *((_DWORD *)lpsrc + 84);
  *((_DWORD *)this + 170) |= 0x20u;
  *((_DWORD *)this + 84) = v99;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x40) == 0)
  {
LABEL_134:
    if ((v48 & 0x80) == 0) {
      goto LABEL_136;
    }
    goto LABEL_135;
  }
LABEL_224:
  int v100 = *((_DWORD *)lpsrc + 85);
  *((_DWORD *)this + 170) |= 0x40u;
  *((_DWORD *)this + 85) = v100;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x80) != 0)
  {
LABEL_135:
    int v49 = *((_DWORD *)lpsrc + 86);
    *((_DWORD *)this + 170) |= 0x80u;
    *((_DWORD *)this + 86) = v49;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
  }
LABEL_136:
  if ((v48 & 0xFF00) == 0) {
    goto LABEL_146;
  }
  if ((v48 & 0x100) != 0)
  {
    int v101 = *((_DWORD *)lpsrc + 87);
    *((_DWORD *)this + 170) |= 0x100u;
    *((_DWORD *)this + 87) = v101;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
    if ((v48 & 0x200) == 0)
    {
LABEL_139:
      if ((v48 & 0x400) == 0) {
        goto LABEL_140;
      }
      goto LABEL_228;
    }
  }
  else if ((v48 & 0x200) == 0)
  {
    goto LABEL_139;
  }
  int v102 = *((_DWORD *)lpsrc + 88);
  *((_DWORD *)this + 170) |= 0x200u;
  *((_DWORD *)this + 88) = v102;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x400) == 0)
  {
LABEL_140:
    if ((v48 & 0x800) == 0) {
      goto LABEL_141;
    }
    goto LABEL_229;
  }
LABEL_228:
  int v103 = *((_DWORD *)lpsrc + 89);
  *((_DWORD *)this + 170) |= 0x400u;
  *((_DWORD *)this + 89) = v103;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x800) == 0)
  {
LABEL_141:
    if ((v48 & 0x1000) == 0) {
      goto LABEL_142;
    }
    goto LABEL_230;
  }
LABEL_229:
  int v104 = *((_DWORD *)lpsrc + 90);
  *((_DWORD *)this + 170) |= 0x800u;
  *((_DWORD *)this + 90) = v104;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x1000) == 0)
  {
LABEL_142:
    if ((v48 & 0x2000) == 0) {
      goto LABEL_143;
    }
    goto LABEL_231;
  }
LABEL_230:
  int v105 = *((_DWORD *)lpsrc + 91);
  *((_DWORD *)this + 170) |= 0x1000u;
  *((_DWORD *)this + 91) = v105;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x2000) == 0)
  {
LABEL_143:
    if ((v48 & 0x4000) == 0) {
      goto LABEL_144;
    }
    goto LABEL_232;
  }
LABEL_231:
  int v106 = *((_DWORD *)lpsrc + 92);
  *((_DWORD *)this + 170) |= 0x2000u;
  *((_DWORD *)this + 92) = v106;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x4000) == 0)
  {
LABEL_144:
    if ((v48 & 0x8000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
LABEL_232:
  int v107 = *((_DWORD *)lpsrc + 93);
  *((_DWORD *)this + 170) |= 0x4000u;
  *((_DWORD *)this + 93) = v107;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x8000) != 0)
  {
LABEL_145:
    int v50 = *((_DWORD *)lpsrc + 94);
    *((_DWORD *)this + 170) |= 0x8000u;
    *((_DWORD *)this + 94) = v50;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
  }
LABEL_146:
  if ((v48 & 0xFF0000) == 0) {
    goto LABEL_244;
  }
  if ((v48 & 0x10000) != 0)
  {
    int v108 = *((_DWORD *)lpsrc + 95);
    *((_DWORD *)this + 170) |= 0x10000u;
    *((_DWORD *)this + 95) = v108;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
    if ((v48 & 0x20000) == 0)
    {
LABEL_149:
      if ((v48 & 0x40000) == 0) {
        goto LABEL_150;
      }
      goto LABEL_236;
    }
  }
  else if ((v48 & 0x20000) == 0)
  {
    goto LABEL_149;
  }
  int v109 = *((_DWORD *)lpsrc + 96);
  *((_DWORD *)this + 170) |= 0x20000u;
  *((_DWORD *)this + 96) = v109;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x40000) == 0)
  {
LABEL_150:
    if ((v48 & 0x80000) == 0) {
      goto LABEL_151;
    }
    goto LABEL_237;
  }
LABEL_236:
  int v110 = *((_DWORD *)lpsrc + 97);
  *((_DWORD *)this + 170) |= 0x40000u;
  *((_DWORD *)this + 97) = v110;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x80000) == 0)
  {
LABEL_151:
    if ((v48 & 0x100000) == 0) {
      goto LABEL_152;
    }
    goto LABEL_238;
  }
LABEL_237:
  int v111 = *((_DWORD *)lpsrc + 98);
  *((_DWORD *)this + 170) |= 0x80000u;
  *((_DWORD *)this + 98) = v111;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x100000) == 0)
  {
LABEL_152:
    if ((v48 & 0x200000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_239;
  }
LABEL_238:
  int v112 = *((_DWORD *)lpsrc + 100);
  *((_DWORD *)this + 170) |= 0x100000u;
  *((_DWORD *)this + 100) = v112;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x200000) == 0)
  {
LABEL_153:
    if ((v48 & 0x400000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_240;
  }
LABEL_239:
  char v113 = *((unsigned char *)lpsrc + 397);
  *((_DWORD *)this + 170) |= 0x200000u;
  *((unsigned char *)this + 397) = v113;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x400000) == 0)
  {
LABEL_154:
    if ((v48 & 0x800000) == 0) {
      goto LABEL_244;
    }
    goto LABEL_241;
  }
LABEL_240:
  int v114 = *((_DWORD *)lpsrc + 101);
  *((_DWORD *)this + 170) |= 0x400000u;
  *((_DWORD *)this + 101) = v114;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x800000) == 0) {
    goto LABEL_244;
  }
LABEL_241:
  uint64_t v115 = (const std::string *)lpsrc[51];
  *((_DWORD *)this + 170) |= 0x800000u;
  int v116 = (std::string *)this[51];
  if (v116 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v116, v115);
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
LABEL_244:
  if (!HIBYTE(v48)) {
    goto LABEL_256;
  }
  if ((v48 & 0x1000000) != 0)
  {
    unsigned int v117 = *((_DWORD *)lpsrc + 104);
    if (v117 >= 3) {
      __assert_rtn("set_amr_format", "CATM.pb.h", 15432, "::awd::metrics::enum_codec_format_IsValid(value)");
    }
    *((_DWORD *)this + 170) |= 0x1000000u;
    *((_DWORD *)this + 104) = v117;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
  }
  if ((v48 & 0x2000000) != 0)
  {
    unsigned int v118 = *((_DWORD *)lpsrc + 105);
    if (v118 >= 6) {
      __assert_rtn("set_codec", "CATM.pb.h", 15455, "::awd::metrics::enum_codec_type_IsValid(value)");
    }
    *((_DWORD *)this + 170) |= 0x2000000u;
    *((_DWORD *)this + 105) = v118;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
  }
  if ((v48 & 0x4000000) != 0)
  {
    char v181 = *((unsigned char *)lpsrc + 398);
    *((_DWORD *)this + 170) |= 0x4000000u;
    *((unsigned char *)this + 398) = v181;
    unsigned int v48 = *((_DWORD *)lpsrc + 170);
    if ((v48 & 0x10000000) == 0)
    {
LABEL_253:
      if ((v48 & 0x20000000) == 0) {
        goto LABEL_254;
      }
      goto LABEL_372;
    }
  }
  else if ((v48 & 0x10000000) == 0)
  {
    goto LABEL_253;
  }
  int v182 = *((_DWORD *)lpsrc + 114);
  *((_DWORD *)this + 170) |= 0x10000000u;
  *((_DWORD *)this + 114) = v182;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x20000000) == 0)
  {
LABEL_254:
    if ((v48 & 0x40000000) == 0) {
      goto LABEL_255;
    }
LABEL_373:
    int v184 = lpsrc[58];
    *((_DWORD *)this + 170) |= 0x40000000u;
    this[58] = v184;
    if ((lpsrc[85] & 0x80000000) == 0) {
      goto LABEL_256;
    }
    goto LABEL_374;
  }
LABEL_372:
  v183 = lpsrc[56];
  *((_DWORD *)this + 170) |= 0x20000000u;
  this[56] = v183;
  unsigned int v48 = *((_DWORD *)lpsrc + 170);
  if ((v48 & 0x40000000) != 0) {
    goto LABEL_373;
  }
LABEL_255:
  if ((v48 & 0x80000000) == 0) {
    goto LABEL_256;
  }
LABEL_374:
  int v185 = *((_DWORD *)lpsrc + 115);
  *((_DWORD *)this + 170) |= 0x80000000;
  *((_DWORD *)this + 115) = v185;
LABEL_256:
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if (!(_BYTE)v119) {
    goto LABEL_266;
  }
  if (v119)
  {
    int v126 = *((_DWORD *)lpsrc + 120);
    *((_DWORD *)this + 171) |= 1u;
    *((_DWORD *)this + 120) = v126;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
    if ((v119 & 2) == 0)
    {
LABEL_259:
      if ((v119 & 4) == 0) {
        goto LABEL_260;
      }
      goto LABEL_299;
    }
  }
  else if ((v119 & 2) == 0)
  {
    goto LABEL_259;
  }
  unint64_t v127 = lpsrc[59];
  *((_DWORD *)this + 171) |= 2u;
  this[59] = v127;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 4) == 0)
  {
LABEL_260:
    if ((v119 & 8) == 0) {
      goto LABEL_261;
    }
    goto LABEL_300;
  }
LABEL_299:
  int v128 = lpsrc[61];
  *((_DWORD *)this + 171) |= 4u;
  this[61] = v128;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 8) == 0)
  {
LABEL_261:
    if ((v119 & 0x10) == 0) {
      goto LABEL_262;
    }
    goto LABEL_301;
  }
LABEL_300:
  int v129 = *((_DWORD *)lpsrc + 121);
  *((_DWORD *)this + 171) |= 8u;
  *((_DWORD *)this + 121) = v129;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x10) == 0)
  {
LABEL_262:
    if ((v119 & 0x20) == 0) {
      goto LABEL_263;
    }
    goto LABEL_302;
  }
LABEL_301:
  int v130 = *((_DWORD *)lpsrc + 124);
  *((_DWORD *)this + 171) |= 0x10u;
  *((_DWORD *)this + 124) = v130;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x20) == 0)
  {
LABEL_263:
    if ((v119 & 0x40) == 0) {
      goto LABEL_264;
    }
    goto LABEL_303;
  }
LABEL_302:
  int v131 = *((_DWORD *)lpsrc + 125);
  *((_DWORD *)this + 171) |= 0x20u;
  *((_DWORD *)this + 125) = v131;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x40) == 0)
  {
LABEL_264:
    if ((v119 & 0x80) == 0) {
      goto LABEL_266;
    }
    goto LABEL_265;
  }
LABEL_303:
  char v132 = *((unsigned char *)lpsrc + 399);
  *((_DWORD *)this + 171) |= 0x40u;
  *((unsigned char *)this + 399) = v132;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x80) != 0)
  {
LABEL_265:
    int v120 = *((_DWORD *)lpsrc + 126);
    *((_DWORD *)this + 171) |= 0x80u;
    *((_DWORD *)this + 126) = v120;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
  }
LABEL_266:
  if ((v119 & 0xFF00) == 0) {
    goto LABEL_273;
  }
  if ((v119 & 0x100) != 0)
  {
    int v133 = *((_DWORD *)lpsrc + 127);
    *((_DWORD *)this + 171) |= 0x100u;
    *((_DWORD *)this + 127) = v133;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
    if ((v119 & 0x200) == 0)
    {
LABEL_269:
      if ((v119 & 0x1000) == 0) {
        goto LABEL_270;
      }
      goto LABEL_307;
    }
  }
  else if ((v119 & 0x200) == 0)
  {
    goto LABEL_269;
  }
  char v134 = *((unsigned char *)lpsrc + 620);
  *((_DWORD *)this + 171) |= 0x200u;
  *((unsigned char *)this + 620) = v134;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x1000) == 0)
  {
LABEL_270:
    if ((v119 & 0x2000) == 0) {
      goto LABEL_271;
    }
    goto LABEL_308;
  }
LABEL_307:
  int v135 = *((_DWORD *)lpsrc + 138);
  *((_DWORD *)this + 171) |= 0x1000u;
  *((_DWORD *)this + 138) = v135;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x2000) == 0)
  {
LABEL_271:
    if ((v119 & 0x4000) == 0) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
LABEL_308:
  int v136 = *((_DWORD *)lpsrc + 139);
  *((_DWORD *)this + 171) |= 0x2000u;
  *((_DWORD *)this + 139) = v136;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x4000) != 0)
  {
LABEL_272:
    int v121 = *((_DWORD *)lpsrc + 146);
    *((_DWORD *)this + 171) |= 0x4000u;
    *((_DWORD *)this + 146) = v121;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
  }
LABEL_273:
  if ((v119 & 0xFF0000) == 0) {
    goto LABEL_283;
  }
  if ((v119 & 0x10000) != 0)
  {
    int v137 = *((_DWORD *)lpsrc + 147);
    *((_DWORD *)this + 171) |= 0x10000u;
    *((_DWORD *)this + 147) = v137;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
    if ((v119 & 0x20000) == 0)
    {
LABEL_276:
      if ((v119 & 0x40000) == 0) {
        goto LABEL_277;
      }
      goto LABEL_312;
    }
  }
  else if ((v119 & 0x20000) == 0)
  {
    goto LABEL_276;
  }
  int v138 = *((_DWORD *)lpsrc + 148);
  *((_DWORD *)this + 171) |= 0x20000u;
  *((_DWORD *)this + 148) = v138;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x40000) == 0)
  {
LABEL_277:
    if ((v119 & 0x80000) == 0) {
      goto LABEL_278;
    }
    goto LABEL_313;
  }
LABEL_312:
  int v139 = *((_DWORD *)lpsrc + 149);
  *((_DWORD *)this + 171) |= 0x40000u;
  *((_DWORD *)this + 149) = v139;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x80000) == 0)
  {
LABEL_278:
    if ((v119 & 0x100000) == 0) {
      goto LABEL_279;
    }
    goto LABEL_314;
  }
LABEL_313:
  int v140 = *((_DWORD *)lpsrc + 150);
  *((_DWORD *)this + 171) |= 0x80000u;
  *((_DWORD *)this + 150) = v140;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x100000) == 0)
  {
LABEL_279:
    if ((v119 & 0x200000) == 0) {
      goto LABEL_280;
    }
    goto LABEL_315;
  }
LABEL_314:
  int v141 = *((_DWORD *)lpsrc + 151);
  *((_DWORD *)this + 171) |= 0x100000u;
  *((_DWORD *)this + 151) = v141;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x200000) == 0)
  {
LABEL_280:
    if ((v119 & 0x400000) == 0) {
      goto LABEL_281;
    }
    goto LABEL_316;
  }
LABEL_315:
  int v142 = *((_DWORD *)lpsrc + 152);
  *((_DWORD *)this + 171) |= 0x200000u;
  *((_DWORD *)this + 152) = v142;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x400000) == 0)
  {
LABEL_281:
    if ((v119 & 0x800000) == 0) {
      goto LABEL_283;
    }
    goto LABEL_282;
  }
LABEL_316:
  int v143 = *((_DWORD *)lpsrc + 153);
  *((_DWORD *)this + 171) |= 0x400000u;
  *((_DWORD *)this + 153) = v143;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x800000) != 0)
  {
LABEL_282:
    int v122 = *((_DWORD *)lpsrc + 154);
    *((_DWORD *)this + 171) |= 0x800000u;
    *((_DWORD *)this + 154) = v122;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
  }
LABEL_283:
  if (!HIBYTE(v119)) {
    goto LABEL_349;
  }
  if ((v119 & 0x1000000) != 0)
  {
    int v163 = *((_DWORD *)lpsrc + 156);
    *((_DWORD *)this + 171) |= 0x1000000u;
    *((_DWORD *)this + 156) = v163;
    unsigned int v119 = *((_DWORD *)lpsrc + 171);
    if ((v119 & 0x2000000) == 0)
    {
LABEL_286:
      if ((v119 & 0x4000000) == 0) {
        goto LABEL_287;
      }
      goto LABEL_342;
    }
  }
  else if ((v119 & 0x2000000) == 0)
  {
    goto LABEL_286;
  }
  int v164 = *((_DWORD *)lpsrc + 157);
  *((_DWORD *)this + 171) |= 0x2000000u;
  *((_DWORD *)this + 157) = v164;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x4000000) == 0)
  {
LABEL_287:
    if ((v119 & 0x8000000) == 0) {
      goto LABEL_288;
    }
    goto LABEL_343;
  }
LABEL_342:
  int v165 = *((_DWORD *)lpsrc + 158);
  *((_DWORD *)this + 171) |= 0x4000000u;
  *((_DWORD *)this + 158) = v165;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x8000000) == 0)
  {
LABEL_288:
    if ((v119 & 0x10000000) == 0) {
      goto LABEL_289;
    }
    goto LABEL_344;
  }
LABEL_343:
  char v166 = *((unsigned char *)lpsrc + 621);
  *((_DWORD *)this + 171) |= 0x8000000u;
  *((unsigned char *)this + 621) = v166;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x10000000) == 0)
  {
LABEL_289:
    if ((v119 & 0x20000000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_345;
  }
LABEL_344:
  char v167 = *((unsigned char *)lpsrc + 622);
  *((_DWORD *)this + 171) |= 0x10000000u;
  *((unsigned char *)this + 622) = v167;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x20000000) == 0)
  {
LABEL_290:
    if ((v119 & 0x40000000) == 0) {
      goto LABEL_291;
    }
LABEL_346:
    char v169 = *((unsigned char *)lpsrc + 644);
    *((_DWORD *)this + 171) |= 0x40000000u;
    *((unsigned char *)this + 644) = v169;
    if ((*((_DWORD *)lpsrc + 171) & 0x80000000) == 0) {
      goto LABEL_349;
    }
    goto LABEL_347;
  }
LABEL_345:
  char v168 = *((unsigned char *)lpsrc + 623);
  *((_DWORD *)this + 171) |= 0x20000000u;
  *((unsigned char *)this + 623) = v168;
  unsigned int v119 = *((_DWORD *)lpsrc + 171);
  if ((v119 & 0x40000000) != 0) {
    goto LABEL_346;
  }
LABEL_291:
  if ((v119 & 0x80000000) == 0) {
    goto LABEL_349;
  }
LABEL_347:
  int v170 = *((_DWORD *)lpsrc + 159);
  if ((v170 - 1) >= 9) {
    __assert_rtn("set_end_state", "CATM.pb.h", 16323, "::awd::metrics::enum_ATM_call_state_IsValid(value)");
  }
  *((_DWORD *)this + 171) |= 0x80000000;
  *((_DWORD *)this + 159) = v170;
LABEL_349:
  LOBYTE(v171) = *((unsigned char *)lpsrc + 688);
  if (!(_BYTE)v171) {
    return;
  }
  if ((_BYTE)lpsrc[86])
  {
    char v173 = *((unsigned char *)lpsrc + 645);
    *((_DWORD *)this + 172) |= 1u;
    *((unsigned char *)this + 645) = v173;
    int v171 = *((_DWORD *)lpsrc + 172);
    if ((v171 & 2) == 0)
    {
LABEL_352:
      if ((v171 & 4) == 0) {
        goto LABEL_353;
      }
      goto LABEL_362;
    }
  }
  else if (((_BYTE)lpsrc[86] & 2) == 0)
  {
    goto LABEL_352;
  }
  int v174 = *((_DWORD *)lpsrc + 160);
  *((_DWORD *)this + 172) |= 2u;
  *((_DWORD *)this + 160) = v174;
  int v171 = *((_DWORD *)lpsrc + 172);
  if ((v171 & 4) == 0)
  {
LABEL_353:
    if ((v171 & 8) == 0) {
      goto LABEL_354;
    }
    goto LABEL_363;
  }
LABEL_362:
  int v175 = *((_DWORD *)lpsrc + 164);
  *((_DWORD *)this + 172) |= 4u;
  *((_DWORD *)this + 164) = v175;
  int v171 = *((_DWORD *)lpsrc + 172);
  if ((v171 & 8) == 0)
  {
LABEL_354:
    if ((v171 & 0x10) == 0) {
      goto LABEL_355;
    }
    goto LABEL_366;
  }
LABEL_363:
  int v176 = (const std::string *)lpsrc[81];
  *((_DWORD *)this + 172) |= 8u;
  unsigned int v177 = (std::string *)this[81];
  if (v177 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v177, v176);
  int v171 = *((_DWORD *)lpsrc + 172);
  if ((v171 & 0x10) == 0)
  {
LABEL_355:
    if ((v171 & 0x20) == 0) {
      goto LABEL_356;
    }
    goto LABEL_367;
  }
LABEL_366:
  char v178 = *((unsigned char *)lpsrc + 646);
  *((_DWORD *)this + 172) |= 0x10u;
  *((unsigned char *)this + 646) = v178;
  int v171 = *((_DWORD *)lpsrc + 172);
  if ((v171 & 0x20) == 0)
  {
LABEL_356:
    if ((v171 & 0x40) == 0) {
      goto LABEL_357;
    }
    goto LABEL_368;
  }
LABEL_367:
  int v179 = *((_DWORD *)lpsrc + 165);
  *((_DWORD *)this + 172) |= 0x20u;
  *((_DWORD *)this + 165) = v179;
  int v171 = *((_DWORD *)lpsrc + 172);
  if ((v171 & 0x40) == 0)
  {
LABEL_357:
    if ((v171 & 0x80) == 0) {
      return;
    }
    goto LABEL_358;
  }
LABEL_368:
  char v180 = *((unsigned char *)lpsrc + 647);
  *((_DWORD *)this + 172) |= 0x40u;
  *((unsigned char *)this + 647) = v180;
  if ((lpsrc[86] & 0x80) != 0)
  {
LABEL_358:
    char v172 = *((unsigned char *)lpsrc + 664);
    *((_DWORD *)this + 172) |= 0x80u;
    *((unsigned char *)this + 664) = v172;
  }
}

void sub_1C527AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_CallEndEvent::IsInitialized(awd::metrics::ATM_CallEndEvent *this)
{
  return 1;
}

void *awd::metrics::ATM_CallEndEvent::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_CallEndEvent");
}

uint64_t awd::metrics::BchannelTransmitStatistics::SharedDtor(uint64_t this)
{
  if (this != MEMORY[0x1E4FBA920] && this != 0)
  {
    if (*(char *)(this + 23) < 0) {
      operator delete(*(void **)this);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::BchannelTransmitStatistics::~BchannelTransmitStatistics(awd::metrics::BchannelTransmitStatistics *this)
{
  *(void *)this = &unk_1F20BA350;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA350;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::BchannelTransmitStatistics::New(awd::metrics::BchannelTransmitStatistics *this)
{
}

uint64_t awd::metrics::BchannelTransmitStatistics::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 96);
  if ((_BYTE)v1)
  {
    *(void *)(this + 40) = 0;
    *(_DWORD *)(this + 36) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
    *(void *)(this + 8) = 0;
    *(unsigned char *)(this + 32) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      uint64_t v2 = *(void *)(this + 48);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 88) = 0;
    *(void *)(this + 64) = 0;
    *(void *)(this + 72) = 0;
    *(void *)(this + 56) = 0;
    int v1 = *(_DWORD *)(this + 96);
  }
  if ((v1 & 0xFF0000) != 0) {
    *(void *)(this + 80) = 0;
  }
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::BchannelTransmitStatistics::MergePartialFromCodedStream(awd::metrics::BchannelTransmitStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v55 = (unint64_t *)((char *)this + 8);
  char v56 = (unint64_t *)((char *)this + 24);
  char v57 = (unsigned int *)((char *)this + 20);
  char v58 = (unsigned int *)((char *)this + 36);
  int v4 = (unsigned int *)((char *)this + 40);
  uint64_t v5 = (unsigned int *)((char *)this + 44);
  int v6 = (unsigned int *)((char *)this + 56);
  uint64_t v7 = (unsigned int *)((char *)this + 60);
  int v8 = (unsigned int *)((char *)this + 64);
  unint64_t v9 = (unsigned int *)((char *)this + 68);
  int v10 = (unsigned int *)((char *)this + 72);
  int v11 = (unsigned int *)((char *)this + 76);
  char v54 = (unsigned int *)((char *)this + 88);
  char v52 = (unsigned int *)((char *)this + 16);
  uint64_t v53 = (unint64_t *)((char *)this + 80);
  while (2)
  {
    uint64_t v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v52);
        if (result)
        {
          *((_DWORD *)this + 24) |= 1u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          if ((unint64_t)v17 < v16 && *v17 == 16)
          {
            char v18 = v17 + 1;
            *((void *)a2 + 1) = v18;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        char v18 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_16:
        if ((unint64_t)v18 < v16 && (*v18 & 0x80000000) == 0)
        {
          *int v55 = *v18;
          uint64_t v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
LABEL_54:
          *((_DWORD *)this + 24) |= 2u;
          if ((unint64_t)v19 < v16 && *v19 == 24)
          {
            unint64_t v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_57;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v55);
        if (result)
        {
          uint64_t v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 3u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        unint64_t v20 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_57:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v56);
          if (!result) {
            return result;
          }
          int v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v56 = *v20;
          int v36 = v20 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 24) |= 4u;
        if ((unint64_t)v36 >= v16 || *v36 != 32) {
          continue;
        }
        uint64_t v21 = v36 + 1;
        *((void *)a2 + 1) = v21;
LABEL_65:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v57 = *v21;
          int v37 = v21 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 24) |= 8u;
        if ((unint64_t)v37 >= v16 || *v37 != 40) {
          continue;
        }
        uint64_t v22 = v37 + 1;
        *((void *)a2 + 1) = v22;
LABEL_73:
        unsigned int v59 = 0;
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v59);
          if (!result) {
            return result;
          }
          unsigned int v38 = v59;
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v38 = *v22;
          char v39 = v22 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((unsigned char *)this + 32) = v38 != 0;
        *((_DWORD *)this + 24) |= 0x10u;
        if ((unint64_t)v39 >= v16 || *v39 != 48) {
          continue;
        }
        int v23 = v39 + 1;
        *((void *)a2 + 1) = v23;
LABEL_81:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!result) {
            return result;
          }
          unint64_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v58 = *v23;
          unint64_t v40 = v23 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if ((unint64_t)v40 >= v16 || *v40 != 56) {
          continue;
        }
        uint64_t v24 = v40 + 1;
        *((void *)a2 + 1) = v24;
LABEL_89:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v41 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v4 = *v24;
          int v41 = v24 + 1;
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 24) |= 0x40u;
        if ((unint64_t)v41 >= v16 || *v41 != 64) {
          continue;
        }
        int v25 = v41 + 1;
        *((void *)a2 + 1) = v25;
LABEL_97:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v42 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v5 = *v25;
          char v42 = v25 + 1;
          *((void *)a2 + 1) = v42;
        }
        int v26 = *((_DWORD *)this + 24) | 0x80;
        *((_DWORD *)this + 24) = v26;
        if ((unint64_t)v42 >= v16 || *v42 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v42 + 1;
LABEL_105:
        *((_DWORD *)this + 24) = v26 | 0x100;
        if (*((void *)this + 6) == MEMORY[0x1E4FBA920]) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v43 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        if ((unint64_t)v43 >= v27 || *v43 != 80) {
          continue;
        }
        uint64_t v28 = v43 + 1;
        *((void *)a2 + 1) = v28;
LABEL_111:
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v44 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v28;
          int v44 = v28 + 1;
          *((void *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 24) |= 0x200u;
        if ((unint64_t)v44 >= v27 || *v44 != 88) {
          continue;
        }
        int v29 = v44 + 1;
        *((void *)a2 + 1) = v29;
LABEL_119:
        if ((unint64_t)v29 >= v27 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          unsigned int v45 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v29;
          unsigned int v45 = v29 + 1;
          *((void *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if ((unint64_t)v45 >= v27 || *v45 != 96) {
          continue;
        }
        uint64_t v30 = v45 + 1;
        *((void *)a2 + 1) = v30;
LABEL_127:
        if ((unint64_t)v30 >= v27 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v30;
          int v46 = v30 + 1;
          *((void *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 24) |= 0x800u;
        if ((unint64_t)v46 >= v27 || *v46 != 104) {
          continue;
        }
        int v31 = v46 + 1;
        *((void *)a2 + 1) = v31;
LABEL_135:
        if ((unint64_t)v31 >= v27 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          char v47 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *unint64_t v9 = *v31;
          char v47 = v31 + 1;
          *((void *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 24) |= 0x1000u;
        if ((unint64_t)v47 >= v27 || *v47 != 112) {
          continue;
        }
        char v32 = v47 + 1;
        *((void *)a2 + 1) = v32;
LABEL_143:
        if ((unint64_t)v32 >= v27 || *v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          unsigned int v48 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v32;
          unsigned int v48 = v32 + 1;
          *((void *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 24) |= 0x2000u;
        if ((unint64_t)v48 >= v27 || *v48 != 120) {
          continue;
        }
        unsigned int v33 = v48 + 1;
        *((void *)a2 + 1) = v33;
LABEL_151:
        if ((unint64_t)v33 >= v27 || (char)*v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v49 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v11 = *v33;
          int v49 = v33 + 1;
          *((void *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 24) |= 0x4000u;
        if ((int)v27 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1) {
          continue;
        }
        char v34 = v49 + 2;
        *((void *)a2 + 1) = v34;
LABEL_160:
        if ((unint64_t)v34 >= v27 || (char)*v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!result) {
            return result;
          }
          int v50 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *char v54 = *v34;
          int v50 = v34 + 1;
          *((void *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 24) |= 0x8000u;
        if ((int)v27 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1) {
          continue;
        }
        int v35 = (char *)(v50 + 2);
        *((void *)a2 + 1) = v35;
LABEL_169:
        if ((unint64_t)v35 >= v27 || *v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v53);
          if (!result) {
            return result;
          }
          int v51 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v53 = *v35;
          int v51 = (unsigned __int8 *)(v35 + 1);
          *((void *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 24) |= 0x10000u;
        if (v51 != (unsigned __int8 *)v27 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        uint64_t v21 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_65;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        uint64_t v22 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_73;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_81;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        uint64_t v24 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_89;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_97;
      case 9u:
        int v14 = TagFallback & 7;
        if (v14 != 2) {
          goto LABEL_48;
        }
        int v26 = *((_DWORD *)this + 24);
        goto LABEL_105;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        uint64_t v28 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_111;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_119;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        uint64_t v30 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_127;
      case 0xDu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v31 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_135;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        char v32 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_143;
      case 0xFu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        unsigned int v33 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_151;
      case 0x10u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        char v34 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_160;
      case 0x11u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v35 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_169;
      default:
        int v14 = TagFallback & 7;
LABEL_48:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::BchannelTransmitStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 96);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 8), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 96) & 0x10000) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x8000) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v6 & 0x10000) == 0) {
    return this;
  }
LABEL_35:
  uint64_t v7 = *(void *)(v5 + 80);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::BchannelTransmitStatistics::ByteSize(awd::metrics::BchannelTransmitStatistics *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_32;
  }
  LODWORD(v3) = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 24);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  LODWORD(v3) = v3
              + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 3))
              + 1;
  int v2 = *((_DWORD *)this + 24);
  if ((v2 & 8) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v4 >= 0x80)
  {
    int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v5 = 1;
  }
  LODWORD(v3) = v3 + v5 + 1;
LABEL_13:
  if ((v2 & 0x10) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x20) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v7 = 1;
    }
    uint64_t v3 = (v3 + v7 + 1);
    if ((v2 & 0x40) == 0)
    {
LABEL_18:
      if ((v2 & 0x80) == 0) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_18;
  }
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v9 = 1;
  }
  uint64_t v3 = (v3 + v9 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_28:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v11 + 1);
  }
LABEL_32:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_41;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v13 = *((void *)this + 6);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v2 = *((_DWORD *)this + 24);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_35:
      if ((v2 & 0x400) == 0) {
        goto LABEL_36;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v19 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v20 = 2;
  }
  uint64_t v3 = (v20 + v3);
  if ((v2 & 0x400) == 0)
  {
LABEL_36:
    if ((v2 & 0x800) == 0) {
      goto LABEL_37;
    }
    goto LABEL_61;
  }
LABEL_57:
  uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v22 = 2;
  }
  uint64_t v3 = (v22 + v3);
  if ((v2 & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_65;
  }
LABEL_61:
  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v24 = 2;
  }
  uint64_t v3 = (v24 + v3);
  if ((v2 & 0x1000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_69;
  }
LABEL_65:
  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v25 >= 0x80)
  {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v26 = 2;
  }
  uint64_t v3 = (v26 + v3);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_73;
  }
LABEL_69:
  unint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
  if (v27 >= 0x80)
  {
    int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v28 = 2;
  }
  uint64_t v3 = (v28 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_40:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_41;
    }
LABEL_77:
    int v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if (v31 >= 0x80)
    {
      int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 2;
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v32 = 3;
    }
    uint64_t v3 = (v32 + v3);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
LABEL_73:
  int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v30 = 2;
  }
  uint64_t v3 = (v30 + v3);
  if ((v2 & 0x8000) != 0) {
    goto LABEL_77;
  }
LABEL_41:
  if ((v2 & 0x10000) != 0) {
LABEL_42:
  }
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 10))
       + 2;
LABEL_43:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::BchannelTransmitStatistics::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  int v4 = *((_DWORD *)lpsrc + 24);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v8 = *((_DWORD *)lpsrc + 4);
    *((_DWORD *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v8;
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v9 = lpsrc[1];
  *((_DWORD *)this + 24) |= 2u;
  this[1] = v9;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v10 = lpsrc[3];
  *((_DWORD *)this + 24) |= 4u;
  this[3] = v10;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 24) |= 8u;
  *((_DWORD *)this + 5) = v11;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_32:
    int v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 24) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_31:
  char v12 = *((unsigned char *)lpsrc + 32);
  *((_DWORD *)this + 24) |= 0x10u;
  *((unsigned char *)this + 32) = v12;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_33:
  int v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 24) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 24) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    int v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_24;
  }
  if ((v4 & 0x100) != 0)
  {
    char v15 = lpsrc[6];
    *((_DWORD *)this + 24) |= 0x100u;
    uint64_t v16 = (std::string *)this[6];
    if (v16 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v16, v15);
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v17 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 24) |= 0x200u;
  *((_DWORD *)this + 14) = v17;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v18 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 24) |= 0x400u;
  *((_DWORD *)this + 15) = v18;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v19 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 16) = v19;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v20 = *((_DWORD *)lpsrc + 17);
  *((_DWORD *)this + 24) |= 0x1000u;
  *((_DWORD *)this + 17) = v20;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v21 = *((_DWORD *)lpsrc + 18);
  *((_DWORD *)this + 24) |= 0x2000u;
  *((_DWORD *)this + 18) = v21;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_43:
  int v22 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 24) |= 0x4000u;
  *((_DWORD *)this + 19) = v22;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    int v6 = *((_DWORD *)lpsrc + 22);
    *((_DWORD *)this + 24) |= 0x8000u;
    *((_DWORD *)this + 22) = v6;
    int v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_24:
  if ((v4 & 0x10000) != 0)
  {
    int v7 = lpsrc[10];
    *((_DWORD *)this + 24) |= 0x10000u;
    this[10] = v7;
  }
}

void sub_1C527BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::BchannelTransmitStatistics::IsInitialized(awd::metrics::BchannelTransmitStatistics *this)
{
  return 1;
}

void *awd::metrics::BchannelTransmitStatistics::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.BchannelTransmitStatistics");
}

void awd::metrics::BchannelReceiveStatistics::~BchannelReceiveStatistics(awd::metrics::BchannelReceiveStatistics *this)
{
  *(void *)this = &unk_1F20BA3C8;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA3C8;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 6));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::BchannelReceiveStatistics::New(awd::metrics::BchannelReceiveStatistics *this)
{
}

uint64_t awd::metrics::BchannelReceiveStatistics::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 96);
  if ((_BYTE)v1)
  {
    *(void *)(this + 40) = 0;
    *(_DWORD *)(this + 36) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
    *(void *)(this + 8) = 0;
    *(unsigned char *)(this + 32) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      uint64_t v2 = *(void *)(this + 48);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 88) = 0;
    *(void *)(this + 64) = 0;
    *(void *)(this + 72) = 0;
    *(void *)(this + 56) = 0;
    int v1 = *(_DWORD *)(this + 96);
  }
  if ((v1 & 0xFF0000) != 0) {
    *(void *)(this + 80) = 0;
  }
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::BchannelReceiveStatistics::MergePartialFromCodedStream(awd::metrics::BchannelReceiveStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v55 = (unint64_t *)((char *)this + 8);
  char v56 = (unint64_t *)((char *)this + 24);
  char v57 = (unsigned int *)((char *)this + 20);
  char v58 = (unsigned int *)((char *)this + 36);
  int v4 = (unsigned int *)((char *)this + 40);
  int v5 = (unsigned int *)((char *)this + 44);
  int v6 = (unsigned int *)((char *)this + 56);
  int v7 = (unsigned int *)((char *)this + 60);
  int v8 = (unsigned int *)((char *)this + 64);
  int v9 = (unsigned int *)((char *)this + 68);
  int v10 = (unsigned int *)((char *)this + 72);
  int v11 = (unsigned int *)((char *)this + 76);
  char v54 = (unsigned int *)((char *)this + 88);
  char v52 = (unsigned int *)((char *)this + 16);
  uint64_t v53 = (unint64_t *)((char *)this + 80);
  while (2)
  {
    char v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v52);
        if (result)
        {
          *((_DWORD *)this + 24) |= 1u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          if ((unint64_t)v17 < v16 && *v17 == 16)
          {
            int v18 = v17 + 1;
            *((void *)a2 + 1) = v18;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_16:
        if ((unint64_t)v18 < v16 && (*v18 & 0x80000000) == 0)
        {
          *int v55 = *v18;
          int v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
LABEL_54:
          *((_DWORD *)this + 24) |= 2u;
          if ((unint64_t)v19 < v16 && *v19 == 24)
          {
            int v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_57;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v55);
        if (result)
        {
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 3u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_57:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v56);
          if (!result) {
            return result;
          }
          int v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v56 = *v20;
          int v36 = v20 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 24) |= 4u;
        if ((unint64_t)v36 >= v16 || *v36 != 32) {
          continue;
        }
        int v21 = v36 + 1;
        *((void *)a2 + 1) = v21;
LABEL_65:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v57);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v57 = *v21;
          int v37 = v21 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 24) |= 8u;
        if ((unint64_t)v37 >= v16 || *v37 != 40) {
          continue;
        }
        int v22 = v37 + 1;
        *((void *)a2 + 1) = v22;
LABEL_73:
        unsigned int v59 = 0;
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v59);
          if (!result) {
            return result;
          }
          unsigned int v38 = v59;
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v38 = *v22;
          char v39 = v22 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((unsigned char *)this + 32) = v38 != 0;
        *((_DWORD *)this + 24) |= 0x10u;
        if ((unint64_t)v39 >= v16 || *v39 != 48) {
          continue;
        }
        int v23 = v39 + 1;
        *((void *)a2 + 1) = v23;
LABEL_81:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v58);
          if (!result) {
            return result;
          }
          unint64_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v58 = *v23;
          unint64_t v40 = v23 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if ((unint64_t)v40 >= v16 || *v40 != 56) {
          continue;
        }
        int v24 = v40 + 1;
        *((void *)a2 + 1) = v24;
LABEL_89:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v41 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v4 = *v24;
          int v41 = v24 + 1;
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 24) |= 0x40u;
        if ((unint64_t)v41 >= v16 || *v41 != 64) {
          continue;
        }
        int v25 = v41 + 1;
        *((void *)a2 + 1) = v25;
LABEL_97:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v42 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v5 = *v25;
          char v42 = v25 + 1;
          *((void *)a2 + 1) = v42;
        }
        int v26 = *((_DWORD *)this + 24) | 0x80;
        *((_DWORD *)this + 24) = v26;
        if ((unint64_t)v42 >= v16 || *v42 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v42 + 1;
LABEL_105:
        *((_DWORD *)this + 24) = v26 | 0x100;
        if (*((void *)this + 6) == MEMORY[0x1E4FBA920]) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v43 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        if ((unint64_t)v43 >= v27 || *v43 != 80) {
          continue;
        }
        int v28 = v43 + 1;
        *((void *)a2 + 1) = v28;
LABEL_111:
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v44 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v28;
          int v44 = v28 + 1;
          *((void *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 24) |= 0x200u;
        if ((unint64_t)v44 >= v27 || *v44 != 88) {
          continue;
        }
        int v29 = v44 + 1;
        *((void *)a2 + 1) = v29;
LABEL_119:
        if ((unint64_t)v29 >= v27 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          unsigned int v45 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v7 = *v29;
          unsigned int v45 = v29 + 1;
          *((void *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if ((unint64_t)v45 >= v27 || *v45 != 96) {
          continue;
        }
        int v30 = v45 + 1;
        *((void *)a2 + 1) = v30;
LABEL_127:
        if ((unint64_t)v30 >= v27 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v30;
          int v46 = v30 + 1;
          *((void *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 24) |= 0x800u;
        if ((unint64_t)v46 >= v27 || *v46 != 104) {
          continue;
        }
        int v31 = v46 + 1;
        *((void *)a2 + 1) = v31;
LABEL_135:
        if ((unint64_t)v31 >= v27 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          char v47 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v31;
          char v47 = v31 + 1;
          *((void *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 24) |= 0x1000u;
        if ((unint64_t)v47 >= v27 || *v47 != 112) {
          continue;
        }
        int v32 = v47 + 1;
        *((void *)a2 + 1) = v32;
LABEL_143:
        if ((unint64_t)v32 >= v27 || *v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          unsigned int v48 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v32;
          unsigned int v48 = v32 + 1;
          *((void *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 24) |= 0x2000u;
        if ((unint64_t)v48 >= v27 || *v48 != 120) {
          continue;
        }
        unsigned int v33 = v48 + 1;
        *((void *)a2 + 1) = v33;
LABEL_151:
        if ((unint64_t)v33 >= v27 || (char)*v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v49 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v11 = *v33;
          int v49 = v33 + 1;
          *((void *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 24) |= 0x4000u;
        if ((int)v27 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1) {
          continue;
        }
        char v34 = v49 + 2;
        *((void *)a2 + 1) = v34;
LABEL_160:
        if ((unint64_t)v34 >= v27 || (char)*v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v54);
          if (!result) {
            return result;
          }
          int v50 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *char v54 = *v34;
          int v50 = v34 + 1;
          *((void *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 24) |= 0x8000u;
        if ((int)v27 - (int)v50 < 2 || *v50 != 136 || v50[1] != 1) {
          continue;
        }
        int v35 = (char *)(v50 + 2);
        *((void *)a2 + 1) = v35;
LABEL_169:
        if ((unint64_t)v35 >= v27 || *v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v53);
          if (!result) {
            return result;
          }
          int v51 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v53 = *v35;
          int v51 = (unsigned __int8 *)(v35 + 1);
          *((void *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 24) |= 0x10000u;
        if (v51 != (unsigned __int8 *)v27 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v21 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_65;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_73;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_81;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_89;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_97;
      case 9u:
        int v14 = TagFallback & 7;
        if (v14 != 2) {
          goto LABEL_48;
        }
        int v26 = *((_DWORD *)this + 24);
        goto LABEL_105;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_111;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_119;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_127;
      case 0xDu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v31 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_135;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v32 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_143;
      case 0xFu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        unsigned int v33 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_151;
      case 0x10u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        char v34 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_160;
      case 0x11u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v35 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_169;
      default:
        int v14 = TagFallback & 7;
LABEL_48:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::BchannelReceiveStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 96);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 8), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 96) & 0x10000) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x8000) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v6 & 0x10000) == 0) {
    return this;
  }
LABEL_35:
  uint64_t v7 = *(void *)(v5 + 80);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::BchannelReceiveStatistics::ByteSize(awd::metrics::BchannelReceiveStatistics *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_32;
  }
  LODWORD(v3) = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 24);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  LODWORD(v3) = v3
              + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 3))
              + 1;
  int v2 = *((_DWORD *)this + 24);
  if ((v2 & 8) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v4 >= 0x80)
  {
    int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v5 = 1;
  }
  LODWORD(v3) = v3 + v5 + 1;
LABEL_13:
  if ((v2 & 0x10) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x20) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v7 = 1;
    }
    uint64_t v3 = (v3 + v7 + 1);
    if ((v2 & 0x40) == 0)
    {
LABEL_18:
      if ((v2 & 0x80) == 0) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_18;
  }
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v9 = 1;
  }
  uint64_t v3 = (v3 + v9 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_28:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v11 + 1);
  }
LABEL_32:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_41;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v13 = *((void *)this + 6);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v2 = *((_DWORD *)this + 24);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v3 = (v3 + v18 + v14 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_35:
      if ((v2 & 0x400) == 0) {
        goto LABEL_36;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v19 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v20 = 2;
  }
  uint64_t v3 = (v20 + v3);
  if ((v2 & 0x400) == 0)
  {
LABEL_36:
    if ((v2 & 0x800) == 0) {
      goto LABEL_37;
    }
    goto LABEL_61;
  }
LABEL_57:
  int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v22 = 2;
  }
  uint64_t v3 = (v22 + v3);
  if ((v2 & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_65;
  }
LABEL_61:
  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v24 = 2;
  }
  uint64_t v3 = (v24 + v3);
  if ((v2 & 0x1000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_69;
  }
LABEL_65:
  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v25 >= 0x80)
  {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v26 = 2;
  }
  uint64_t v3 = (v26 + v3);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_73;
  }
LABEL_69:
  unint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
  if (v27 >= 0x80)
  {
    int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v28 = 2;
  }
  uint64_t v3 = (v28 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_40:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_41;
    }
LABEL_77:
    int v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if (v31 >= 0x80)
    {
      int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 2;
      int v2 = *((_DWORD *)this + 24);
    }
    else
    {
      int v32 = 3;
    }
    uint64_t v3 = (v32 + v3);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
LABEL_73:
  int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29) + 1;
    int v2 = *((_DWORD *)this + 24);
  }
  else
  {
    int v30 = 2;
  }
  uint64_t v3 = (v30 + v3);
  if ((v2 & 0x8000) != 0) {
    goto LABEL_77;
  }
LABEL_41:
  if ((v2 & 0x10000) != 0) {
LABEL_42:
  }
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 10))
       + 2;
LABEL_43:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::BchannelReceiveStatistics::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  int v4 = *((_DWORD *)lpsrc + 24);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v8 = *((_DWORD *)lpsrc + 4);
    *((_DWORD *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v8;
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v9 = lpsrc[1];
  *((_DWORD *)this + 24) |= 2u;
  this[1] = v9;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v10 = lpsrc[3];
  *((_DWORD *)this + 24) |= 4u;
  this[3] = v10;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 24) |= 8u;
  *((_DWORD *)this + 5) = v11;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_32:
    int v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 24) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_31:
  char v12 = *((unsigned char *)lpsrc + 32);
  *((_DWORD *)this + 24) |= 0x10u;
  *((unsigned char *)this + 32) = v12;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_33:
  int v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 24) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 24) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    int v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_24;
  }
  if ((v4 & 0x100) != 0)
  {
    char v15 = lpsrc[6];
    *((_DWORD *)this + 24) |= 0x100u;
    uint64_t v16 = (std::string *)this[6];
    if (v16 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v16, v15);
    int v4 = *((_DWORD *)lpsrc + 24);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v17 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 24) |= 0x200u;
  *((_DWORD *)this + 14) = v17;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v18 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 24) |= 0x400u;
  *((_DWORD *)this + 15) = v18;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v19 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 16) = v19;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v20 = *((_DWORD *)lpsrc + 17);
  *((_DWORD *)this + 24) |= 0x1000u;
  *((_DWORD *)this + 17) = v20;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v21 = *((_DWORD *)lpsrc + 18);
  *((_DWORD *)this + 24) |= 0x2000u;
  *((_DWORD *)this + 18) = v21;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_43:
  int v22 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 24) |= 0x4000u;
  *((_DWORD *)this + 19) = v22;
  int v4 = *((_DWORD *)lpsrc + 24);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    int v6 = *((_DWORD *)lpsrc + 22);
    *((_DWORD *)this + 24) |= 0x8000u;
    *((_DWORD *)this + 22) = v6;
    int v4 = *((_DWORD *)lpsrc + 24);
  }
LABEL_24:
  if ((v4 & 0x10000) != 0)
  {
    int v7 = lpsrc[10];
    *((_DWORD *)this + 24) |= 0x10000u;
    this[10] = v7;
  }
}

void sub_1C527D23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::BchannelReceiveStatistics::IsInitialized(awd::metrics::BchannelReceiveStatistics *this)
{
  return 1;
}

void *awd::metrics::BchannelReceiveStatistics::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.BchannelReceiveStatistics");
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::~Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  *(void *)this = &unk_1F20BA440;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA440;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::New(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(this + 40) = 0;
    *(void *)(this + 48) = 0;
    *(_DWORD *)(this + 64) = 0;
    *(void *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::MergePartialFromCodedStream(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 16);
  int v5 = (unsigned int *)((char *)this + 20);
  int v6 = (unsigned int *)((char *)this + 24);
  int v46 = (unsigned int *)((char *)this + 32);
  char v47 = (unsigned int *)((char *)this + 28);
  int v44 = (unsigned int *)((char *)this + 12);
  unsigned int v45 = (unsigned int *)((char *)this + 36);
  char v42 = (unsigned int *)((char *)this + 8);
  unsigned int v43 = (unsigned int *)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 44);
  int v8 = (unsigned int *)((char *)this + 48);
  int v9 = (unsigned int *)((char *)this + 52);
  int v10 = (unsigned int *)((char *)this + 64);
  int v11 = (unint64_t *)((char *)this + 56);
  while (2)
  {
    char v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v42);
        if (result)
        {
          *((_DWORD *)this + 18) |= 1u;
          uint64_t v16 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v16 < *((void *)a2 + 2) && *v16 == 21)
          {
            *((void *)a2 + 1) = v16 + 1;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
LABEL_15:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v44);
        if (result)
        {
          *((_DWORD *)this + 18) |= 2u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v17 < *((void *)a2 + 2) && *v17 == 29)
          {
            *((void *)a2 + 1) = v17 + 1;
            goto LABEL_20;
          }
          continue;
        }
        return result;
      case 3u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
LABEL_20:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v4);
        if (result)
        {
          *((_DWORD *)this + 18) |= 4u;
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          if ((unint64_t)v19 < v18 && *v19 == 32)
          {
            int v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_26;
          }
          continue;
        }
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
LABEL_26:
        if ((unint64_t)v20 < v18 && (*v20 & 0x80000000) == 0)
        {
          *int v5 = *v20;
          int v21 = v20 + 1;
          *((void *)a2 + 1) = v21;
LABEL_54:
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v21 < v18 && *v21 == 40)
          {
            int v22 = v21 + 1;
            *((void *)a2 + 1) = v22;
            goto LABEL_57;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (result)
        {
          int v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
LABEL_57:
        if ((unint64_t)v22 >= v18 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v22;
          int v32 = v22 + 1;
          *((void *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v32 >= v18 || *v32 != 48) {
          continue;
        }
        int v23 = v32 + 1;
        *((void *)a2 + 1) = v23;
LABEL_65:
        if ((unint64_t)v23 >= v18 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!result) {
            return result;
          }
          unsigned int v33 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *char v47 = *v23;
          unsigned int v33 = v23 + 1;
          *((void *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v33 >= v18 || *v33 != 56) {
          continue;
        }
        int v24 = v33 + 1;
        *((void *)a2 + 1) = v24;
LABEL_73:
        if ((unint64_t)v24 >= v18 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!result) {
            return result;
          }
          char v34 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v46 = *v24;
          char v34 = v24 + 1;
          *((void *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v34 >= v18 || *v34 != 64) {
          continue;
        }
        int v25 = v34 + 1;
        *((void *)a2 + 1) = v25;
LABEL_81:
        if ((unint64_t)v25 >= v18 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v45);
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v45 = *v25;
          int v35 = v25 + 1;
          *((void *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v35 >= v18 || *v35 != 72) {
          continue;
        }
        int v26 = v35 + 1;
        *((void *)a2 + 1) = v26;
LABEL_89:
        if ((unint64_t)v26 >= v18 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v43);
          if (!result) {
            return result;
          }
          int v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v43 = *v26;
          int v36 = v26 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v36 >= v18 || *v36 != 80) {
          continue;
        }
        unint64_t v27 = v36 + 1;
        *((void *)a2 + 1) = v27;
LABEL_97:
        if ((unint64_t)v27 >= v18 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v7 = *v27;
          int v37 = v27 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 18) |= 0x200u;
        if ((unint64_t)v37 >= v18 || *v37 != 88) {
          continue;
        }
        int v28 = v37 + 1;
        *((void *)a2 + 1) = v28;
LABEL_105:
        if ((unint64_t)v28 >= v18 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          unsigned int v38 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v28;
          unsigned int v38 = v28 + 1;
          *((void *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 18) |= 0x400u;
        if ((unint64_t)v38 >= v18 || *v38 != 96) {
          continue;
        }
        int v29 = v38 + 1;
        *((void *)a2 + 1) = v29;
LABEL_113:
        if ((unint64_t)v29 >= v18 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v29;
          char v39 = v29 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 18) |= 0x800u;
        if ((unint64_t)v39 >= v18 || *v39 != 104) {
          continue;
        }
        int v30 = v39 + 1;
        *((void *)a2 + 1) = v30;
LABEL_121:
        if ((unint64_t)v30 >= v18 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          unint64_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v30;
          unint64_t v40 = v30 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 18) |= 0x1000u;
        if ((unint64_t)v40 >= v18 || *v40 != 112) {
          continue;
        }
        int v31 = v40 + 1;
        *((void *)a2 + 1) = v31;
LABEL_129:
        if ((unint64_t)v31 >= v18 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v41 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v11 = *v31;
          int v41 = (unsigned __int8 *)(v31 + 1);
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 18) |= 0x2000u;
        if (v41 != (unsigned __int8 *)v18 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_65;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_73;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_81;
      case 9u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_89;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        unint64_t v27 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_97;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_105;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_113;
      case 0xDu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v31 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_129;
      default:
        int v14 = TagFallback & 7;
LABEL_48:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 72) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  uint64_t v7 = *(void *)(v5 + 56);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::ByteSize(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  int v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  unsigned int v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0) {
    v3 += 5;
  }
  if ((v2 & 4) != 0) {
    uint64_t v4 = v3 + 5;
  }
  else {
    uint64_t v4 = v3;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v6 = 1;
    }
    uint64_t v4 = (v4 + v6 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_9:
      if ((v2 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v7 >= 0x80)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v8 = 1;
  }
  uint64_t v4 = (v4 + v8 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_22:
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v10 = 1;
  }
  uint64_t v4 = (v4 + v10 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
LABEL_26:
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_30:
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v14 = 2;
    }
    uint64_t v4 = (v14 + v4);
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_42;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v17 = 2;
    }
    uint64_t v4 = (v17 + v4);
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0) {
        goto LABEL_38;
      }
      goto LABEL_51;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v19 = 2;
  }
  uint64_t v4 = (v19 + v4);
  if ((v2 & 0x400) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_55;
  }
LABEL_51:
  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v21 = 2;
  }
  uint64_t v4 = (v21 + v4);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_40;
    }
LABEL_59:
    int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v25 = 2;
    }
    uint64_t v4 = (v25 + v4);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
LABEL_55:
  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v23 = 2;
  }
  uint64_t v4 = (v23 + v4);
  if ((v2 & 0x1000) != 0) {
    goto LABEL_59;
  }
LABEL_40:
  if ((v2 & 0x2000) != 0) {
LABEL_41:
  }
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 7))
       + 1;
LABEL_42:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::CheckTypeAndMergeFrom(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  int v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v7 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 18) |= 1u;
    *((_DWORD *)this + 2) = v7;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v8 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 3) = v8;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v9 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 18) |= 4u;
  *((_DWORD *)this + 4) = v9;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v10 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 18) |= 8u;
  *((_DWORD *)this + 5) = v10;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    int v12 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 7) = v12;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  int v11 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 6) = v11;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_29:
  int v13 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 18) |= 0x40u;
  *((_DWORD *)this + 8) = v13;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    int v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v14 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x100u;
    *((_DWORD *)this + 10) = v14;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v15 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 11) = v15;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 18) |= 0x400u;
  *((_DWORD *)this + 12) = v16;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 18) |= 0x800u;
  *((_DWORD *)this + 13) = v17;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      return;
    }
    goto LABEL_21;
  }
LABEL_35:
  int v18 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x1000u;
  *((_DWORD *)this + 16) = v18;
  if ((*((_DWORD *)lpsrc + 18) & 0x2000) != 0)
  {
LABEL_21:
    uint64_t v6 = *((void *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x2000u;
    *((void *)this + 7) = v6;
  }
}

void sub_1C527E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::IsInitialized(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return 1;
}

void *awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock");
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::~Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  *(void *)this = &unk_1F20BA4B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA4B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::New(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(this + 40) = 0;
    *(void *)(this + 48) = 0;
    *(_DWORD *)(this + 64) = 0;
    *(void *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::MergePartialFromCodedStream(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 16);
  int v5 = (unsigned int *)((char *)this + 20);
  uint64_t v6 = (unsigned int *)((char *)this + 24);
  int v46 = (unsigned int *)((char *)this + 32);
  char v47 = (unsigned int *)((char *)this + 28);
  int v44 = (unsigned int *)((char *)this + 12);
  unsigned int v45 = (unsigned int *)((char *)this + 36);
  char v42 = (unsigned int *)((char *)this + 8);
  unsigned int v43 = (unsigned int *)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 44);
  int v8 = (unsigned int *)((char *)this + 48);
  int v9 = (unsigned int *)((char *)this + 52);
  int v10 = (unsigned int *)((char *)this + 64);
  int v11 = (unint64_t *)((char *)this + 56);
  while (2)
  {
    int v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v42);
        if (result)
        {
          *((_DWORD *)this + 18) |= 1u;
          int v16 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v16 < *((void *)a2 + 2) && *v16 == 21)
          {
            *((void *)a2 + 1) = v16 + 1;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
LABEL_15:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v44);
        if (result)
        {
          *((_DWORD *)this + 18) |= 2u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v17 < *((void *)a2 + 2) && *v17 == 29)
          {
            *((void *)a2 + 1) = v17 + 1;
            goto LABEL_20;
          }
          continue;
        }
        return result;
      case 3u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_48;
        }
LABEL_20:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v4);
        if (result)
        {
          *((_DWORD *)this + 18) |= 4u;
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          if ((unint64_t)v19 < v18 && *v19 == 32)
          {
            int v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_26;
          }
          continue;
        }
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
LABEL_26:
        if ((unint64_t)v20 < v18 && (*v20 & 0x80000000) == 0)
        {
          *int v5 = *v20;
          int v21 = v20 + 1;
          *((void *)a2 + 1) = v21;
LABEL_54:
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v21 < v18 && *v21 == 40)
          {
            int v22 = v21 + 1;
            *((void *)a2 + 1) = v22;
            goto LABEL_57;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (result)
        {
          int v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          goto LABEL_54;
        }
        break;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
LABEL_57:
        if ((unint64_t)v22 >= v18 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v22;
          int v32 = v22 + 1;
          *((void *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v32 >= v18 || *v32 != 48) {
          continue;
        }
        int v23 = v32 + 1;
        *((void *)a2 + 1) = v23;
LABEL_65:
        if ((unint64_t)v23 >= v18 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!result) {
            return result;
          }
          unsigned int v33 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *char v47 = *v23;
          unsigned int v33 = v23 + 1;
          *((void *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v33 >= v18 || *v33 != 56) {
          continue;
        }
        int v24 = v33 + 1;
        *((void *)a2 + 1) = v24;
LABEL_73:
        if ((unint64_t)v24 >= v18 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!result) {
            return result;
          }
          char v34 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v46 = *v24;
          char v34 = v24 + 1;
          *((void *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v34 >= v18 || *v34 != 64) {
          continue;
        }
        int v25 = v34 + 1;
        *((void *)a2 + 1) = v25;
LABEL_81:
        if ((unint64_t)v25 >= v18 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v45);
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v45 = *v25;
          int v35 = v25 + 1;
          *((void *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v35 >= v18 || *v35 != 72) {
          continue;
        }
        int v26 = v35 + 1;
        *((void *)a2 + 1) = v26;
LABEL_89:
        if ((unint64_t)v26 >= v18 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v43);
          if (!result) {
            return result;
          }
          int v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v43 = *v26;
          int v36 = v26 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v36 >= v18 || *v36 != 80) {
          continue;
        }
        unint64_t v27 = v36 + 1;
        *((void *)a2 + 1) = v27;
LABEL_97:
        if ((unint64_t)v27 >= v18 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v7 = *v27;
          int v37 = v27 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 18) |= 0x200u;
        if ((unint64_t)v37 >= v18 || *v37 != 88) {
          continue;
        }
        int v28 = v37 + 1;
        *((void *)a2 + 1) = v28;
LABEL_105:
        if ((unint64_t)v28 >= v18 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          unsigned int v38 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v28;
          unsigned int v38 = v28 + 1;
          *((void *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 18) |= 0x400u;
        if ((unint64_t)v38 >= v18 || *v38 != 96) {
          continue;
        }
        int v29 = v38 + 1;
        *((void *)a2 + 1) = v29;
LABEL_113:
        if ((unint64_t)v29 >= v18 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v29;
          char v39 = v29 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 18) |= 0x800u;
        if ((unint64_t)v39 >= v18 || *v39 != 104) {
          continue;
        }
        int v30 = v39 + 1;
        *((void *)a2 + 1) = v30;
LABEL_121:
        if ((unint64_t)v30 >= v18 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          unint64_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v30;
          unint64_t v40 = v30 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 18) |= 0x1000u;
        if ((unint64_t)v40 >= v18 || *v40 != 112) {
          continue;
        }
        int v31 = v40 + 1;
        *((void *)a2 + 1) = v31;
LABEL_129:
        if ((unint64_t)v31 >= v18 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v41 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v11 = *v31;
          int v41 = (unsigned __int8 *)(v31 + 1);
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 18) |= 0x2000u;
        if (v41 != (unsigned __int8 *)v18 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_65;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_73;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_81;
      case 9u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_89;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        unint64_t v27 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_97;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_105;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_113;
      case 0xDu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_48;
        }
        int v31 = (char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        goto LABEL_129;
      default:
        int v14 = TagFallback & 7;
LABEL_48:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 72) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  uint64_t v7 = *(void *)(v5 + 56);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::ByteSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  int v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  unsigned int v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0) {
    v3 += 5;
  }
  if ((v2 & 4) != 0) {
    uint64_t v4 = v3 + 5;
  }
  else {
    uint64_t v4 = v3;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v6 = 1;
    }
    uint64_t v4 = (v4 + v6 + 1);
    if ((v2 & 0x10) == 0)
    {
LABEL_9:
      if ((v2 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v7 >= 0x80)
  {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v8 = 1;
  }
  uint64_t v4 = (v4 + v8 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_22:
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v10 = 1;
  }
  uint64_t v4 = (v4 + v10 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
LABEL_26:
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_30:
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v14 = 2;
    }
    uint64_t v4 = (v14 + v4);
  }
LABEL_34:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_42;
  }
  if ((v2 & 0x100) != 0)
  {
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v17 = 2;
    }
    uint64_t v4 = (v17 + v4);
    if ((v2 & 0x200) == 0)
    {
LABEL_37:
      if ((v2 & 0x400) == 0) {
        goto LABEL_38;
      }
      goto LABEL_51;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v19 = 2;
  }
  uint64_t v4 = (v19 + v4);
  if ((v2 & 0x400) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_55;
  }
LABEL_51:
  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v21 = 2;
  }
  uint64_t v4 = (v21 + v4);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_40;
    }
LABEL_59:
    int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v25 = 2;
    }
    uint64_t v4 = (v25 + v4);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
LABEL_55:
  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v23 = 2;
  }
  uint64_t v4 = (v23 + v4);
  if ((v2 & 0x1000) != 0) {
    goto LABEL_59;
  }
LABEL_40:
  if ((v2 & 0x2000) != 0) {
LABEL_41:
  }
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 7))
       + 1;
LABEL_42:
  *((_DWORD *)this + 17) = v4;
  return v4;
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::CheckTypeAndMergeFrom(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  int v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v7 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 18) |= 1u;
    *((_DWORD *)this + 2) = v7;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v8 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 3) = v8;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v9 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 18) |= 4u;
  *((_DWORD *)this + 4) = v9;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v10 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 18) |= 8u;
  *((_DWORD *)this + 5) = v10;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    int v12 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 7) = v12;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  int v11 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 6) = v11;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_29:
  int v13 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 18) |= 0x40u;
  *((_DWORD *)this + 8) = v13;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    int v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v14 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x100u;
    *((_DWORD *)this + 10) = v14;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v15 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 11) = v15;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 18) |= 0x400u;
  *((_DWORD *)this + 12) = v16;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 18) |= 0x800u;
  *((_DWORD *)this + 13) = v17;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      return;
    }
    goto LABEL_21;
  }
LABEL_35:
  int v18 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x1000u;
  *((_DWORD *)this + 16) = v18;
  if ((*((_DWORD *)lpsrc + 18) & 0x2000) != 0)
  {
LABEL_21:
    uint64_t v6 = *((void *)lpsrc + 7);
    *((_DWORD *)this + 18) |= 0x2000u;
    *((void *)this + 7) = v6;
  }
}

void sub_1C527F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::IsInitialized(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return 1;
}

void *awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock");
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::~Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  *(void *)this = &unk_1F20BA530;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA530;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::New(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 100);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 56) = 0u;
    *(_OWORD *)(this + 40) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(void *)(this + 72) = 0;
    *(void *)(this + 80) = 0;
    *(void *)(this + 88) = 0;
  }
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::MergePartialFromCodedStream(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v62 = (unsigned int *)((char *)this + 8);
  unint64_t v66 = (unsigned int *)((char *)this + 12);
  int v67 = (unsigned int *)((char *)this + 16);
  uint64_t v68 = (unsigned int *)((char *)this + 20);
  int v69 = (unsigned int *)((char *)this + 24);
  int v70 = (unsigned int *)((char *)this + 28);
  int v4 = (unsigned int *)((char *)this + 32);
  int v5 = (unsigned int *)((char *)this + 36);
  uint64_t v6 = (unsigned int *)((char *)this + 40);
  int v7 = (unsigned int *)((char *)this + 44);
  int v8 = (unsigned int *)((char *)this + 48);
  int v9 = (unsigned int *)((char *)this + 52);
  int v10 = (unsigned int *)((char *)this + 56);
  int v11 = (unsigned int *)((char *)this + 60);
  char v64 = (unsigned int *)((char *)this + 68);
  uint64_t v65 = (unsigned int *)((char *)this + 64);
  int v63 = (unsigned int *)((char *)this + 72);
  unint64_t v60 = (unsigned int *)((char *)this + 80);
  int v61 = (unsigned int *)((char *)this + 76);
  char v58 = (unint64_t *)((char *)this + 88);
  unsigned int v59 = (unsigned int *)((char *)this + 84);
  while (2)
  {
    int v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_56;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v62);
        if (result)
        {
          *((_DWORD *)this + 25) |= 1u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          if ((unint64_t)v17 < v16 && *v17 == 16)
          {
            int v18 = v17 + 1;
            *((void *)a2 + 1) = v18;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_15:
        if ((unint64_t)v18 < v16 && (*v18 & 0x80000000) == 0)
        {
          *unint64_t v66 = *v18;
          int v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
LABEL_62:
          *((_DWORD *)this + 25) |= 2u;
          if ((unint64_t)v19 < v16 && *v19 == 24)
          {
            int v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_65;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v66);
        if (result)
        {
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          goto LABEL_62;
        }
        break;
      case 3u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_65:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v67);
          if (!result) {
            return result;
          }
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v67 = *v20;
          char v39 = v20 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 25) |= 4u;
        if ((unint64_t)v39 >= v16 || *v39 != 32) {
          continue;
        }
        int v21 = v39 + 1;
        *((void *)a2 + 1) = v21;
LABEL_73:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v68);
          if (!result) {
            return result;
          }
          unint64_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v68 = *v21;
          unint64_t v40 = v21 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 25) |= 8u;
        if ((unint64_t)v40 >= v16 || *v40 != 40) {
          continue;
        }
        int v22 = v40 + 1;
        *((void *)a2 + 1) = v22;
LABEL_81:
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v69);
          if (!result) {
            return result;
          }
          int v41 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v69 = *v22;
          int v41 = v22 + 1;
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 25) |= 0x10u;
        if ((unint64_t)v41 >= v16 || *v41 != 48) {
          continue;
        }
        int v23 = v41 + 1;
        *((void *)a2 + 1) = v23;
LABEL_89:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v70);
          if (!result) {
            return result;
          }
          char v42 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v70 = *v23;
          char v42 = v23 + 1;
          *((void *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 25) |= 0x20u;
        if ((unint64_t)v42 >= v16 || *v42 != 56) {
          continue;
        }
        int v24 = v42 + 1;
        *((void *)a2 + 1) = v24;
LABEL_97:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unsigned int v43 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v4 = *v24;
          unsigned int v43 = v24 + 1;
          *((void *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 25) |= 0x40u;
        if ((unint64_t)v43 >= v16 || *v43 != 64) {
          continue;
        }
        int v25 = v43 + 1;
        *((void *)a2 + 1) = v25;
LABEL_105:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v44 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v5 = *v25;
          int v44 = v25 + 1;
          *((void *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 25) |= 0x80u;
        if ((unint64_t)v44 >= v16 || *v44 != 72) {
          continue;
        }
        int v26 = v44 + 1;
        *((void *)a2 + 1) = v26;
LABEL_113:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unsigned int v45 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v26;
          unsigned int v45 = v26 + 1;
          *((void *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 25) |= 0x100u;
        if ((unint64_t)v45 >= v16 || *v45 != 80) {
          continue;
        }
        unint64_t v27 = v45 + 1;
        *((void *)a2 + 1) = v27;
LABEL_121:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v7 = *v27;
          int v46 = v27 + 1;
          *((void *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 25) |= 0x200u;
        if ((unint64_t)v46 >= v16 || *v46 != 88) {
          continue;
        }
        int v28 = v46 + 1;
        *((void *)a2 + 1) = v28;
LABEL_129:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          char v47 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v28;
          char v47 = v28 + 1;
          *((void *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 25) |= 0x400u;
        if ((unint64_t)v47 >= v16 || *v47 != 96) {
          continue;
        }
        int v29 = v47 + 1;
        *((void *)a2 + 1) = v29;
LABEL_137:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          unsigned int v48 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v29;
          unsigned int v48 = v29 + 1;
          *((void *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 25) |= 0x800u;
        if ((unint64_t)v48 >= v16 || *v48 != 112) {
          continue;
        }
        int v30 = v48 + 1;
        *((void *)a2 + 1) = v30;
LABEL_145:
        if ((unint64_t)v30 >= v16 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          int v49 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v30;
          int v49 = v30 + 1;
          *((void *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 25) |= 0x1000u;
        if ((unint64_t)v49 >= v16 || *v49 != 120) {
          continue;
        }
        int v31 = v49 + 1;
        *((void *)a2 + 1) = v31;
LABEL_153:
        if ((unint64_t)v31 >= v16 || (char)*v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v50 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v11 = *v31;
          int v50 = v31 + 1;
          *((void *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 25) |= 0x2000u;
        if ((int)v16 - (int)v50 < 2 || *v50 != 128 || v50[1] != 1) {
          continue;
        }
        int v32 = v50 + 2;
        *((void *)a2 + 1) = v32;
LABEL_162:
        if ((unint64_t)v32 >= v16 || (char)*v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v65);
          if (!result) {
            return result;
          }
          int v51 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v65 = *v32;
          int v51 = v32 + 1;
          *((void *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 25) |= 0x4000u;
        if ((int)v16 - (int)v51 < 2 || *v51 != 136 || v51[1] != 1) {
          continue;
        }
        unsigned int v33 = v51 + 2;
        *((void *)a2 + 1) = v33;
LABEL_171:
        if ((unint64_t)v33 >= v16 || (char)*v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v64);
          if (!result) {
            return result;
          }
          char v52 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v64 = *v33;
          char v52 = v33 + 1;
          *((void *)a2 + 1) = v52;
        }
        *((_DWORD *)this + 25) |= 0x8000u;
        if ((int)v16 - (int)v52 < 2 || *v52 != 144 || v52[1] != 1) {
          continue;
        }
        char v34 = v52 + 2;
        *((void *)a2 + 1) = v34;
LABEL_180:
        if ((unint64_t)v34 >= v16 || (char)*v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
          if (!result) {
            return result;
          }
          uint64_t v53 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v63 = *v34;
          uint64_t v53 = v34 + 1;
          *((void *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 25) |= 0x10000u;
        if ((int)v16 - (int)v53 < 2 || *v53 != 152 || v53[1] != 1) {
          continue;
        }
        int v35 = v53 + 2;
        *((void *)a2 + 1) = v35;
LABEL_189:
        if ((unint64_t)v35 >= v16 || (char)*v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v61);
          if (!result) {
            return result;
          }
          char v54 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v61 = *v35;
          char v54 = v35 + 1;
          *((void *)a2 + 1) = v54;
        }
        *((_DWORD *)this + 25) |= 0x20000u;
        if ((int)v16 - (int)v54 < 2 || *v54 != 160 || v54[1] != 1) {
          continue;
        }
        int v36 = v54 + 2;
        *((void *)a2 + 1) = v36;
LABEL_198:
        if ((unint64_t)v36 >= v16 || (char)*v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!result) {
            return result;
          }
          int v55 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *unint64_t v60 = *v36;
          int v55 = v36 + 1;
          *((void *)a2 + 1) = v55;
        }
        *((_DWORD *)this + 25) |= 0x40000u;
        if ((int)v16 - (int)v55 < 2 || *v55 != 168 || v55[1] != 1) {
          continue;
        }
        int v37 = v55 + 2;
        *((void *)a2 + 1) = v37;
LABEL_207:
        if ((unint64_t)v37 >= v16 || (char)*v37 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!result) {
            return result;
          }
          char v56 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v59 = *v37;
          char v56 = v37 + 1;
          *((void *)a2 + 1) = v56;
        }
        *((_DWORD *)this + 25) |= 0x80000u;
        if ((int)v16 - (int)v56 < 2 || *v56 != 176 || v56[1] != 1) {
          continue;
        }
        unsigned int v38 = (char *)(v56 + 2);
        *((void *)a2 + 1) = v38;
LABEL_216:
        if ((unint64_t)v38 >= v16 || *v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v58);
          if (!result) {
            return result;
          }
          char v57 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v58 = *v38;
          char v57 = (unsigned __int8 *)(v38 + 1);
          *((void *)a2 + 1) = v57;
        }
        *((_DWORD *)this + 25) |= 0x100000u;
        if (v57 != (unsigned __int8 *)v16 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v21 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_73;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_81;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_89;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_97;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_105;
      case 9u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_113;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        unint64_t v27 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_129;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_137;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_145;
      case 0xFu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v31 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_153;
      case 0x10u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v32 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_162;
      case 0x11u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        unsigned int v33 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_171;
      case 0x12u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        char v34 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_180;
      case 0x13u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v35 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_189;
      case 0x14u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v36 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_198;
      case 0x15u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v37 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_207;
      case 0x16u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        unsigned int v38 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_216;
      default:
        int v14 = TagFallback & 7;
LABEL_56:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 100);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 100) & 0x100000) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80000) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v6 & 0x100000) == 0) {
    return this;
  }
LABEL_43:
  uint64_t v7 = *(void *)(v5 + 88);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::ByteSize(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  int v2 = *((_DWORD *)this + 25);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_39;
  }
  uint64_t v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v4 >= 0x80)
    {
      int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v5 = 1;
    }
    uint64_t v3 = (v3 + v5 + 1);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v7 = 1;
  }
  uint64_t v3 = (v3 + v7 + 1);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_19:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v9 = 1;
  }
  uint64_t v3 = (v3 + v9 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_23:
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v11 = 1;
  }
  uint64_t v3 = (v3 + v11 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_27:
  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v3 = (v3 + v13 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
LABEL_31:
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v3 = (v3 + v15 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_35:
    unint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v17 = 1;
    }
    uint64_t v3 = (v3 + v17 + 1);
  }
LABEL_39:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_81;
  }
  if ((v2 & 0x100) != 0)
  {
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v19 = 1;
    }
    uint64_t v3 = (v3 + v19 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_42:
      if ((v2 & 0x400) == 0) {
        goto LABEL_43;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_42;
  }
  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v21 = 1;
  }
  uint64_t v3 = (v3 + v21 + 1);
  if ((v2 & 0x400) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0) {
      goto LABEL_44;
    }
    goto LABEL_61;
  }
LABEL_57:
  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v23 = 1;
  }
  uint64_t v3 = (v3 + v23 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_65;
  }
LABEL_61:
  int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v24 >= 0x80)
  {
    int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v25 = 1;
  }
  uint64_t v3 = (v3 + v25 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_45:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_69;
  }
LABEL_65:
  int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v27 = 1;
  }
  uint64_t v3 = (v3 + v27 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_46:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_73;
  }
LABEL_69:
  int v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28) + 1;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v29 = 2;
  }
  uint64_t v3 = (v29 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_47:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_77;
  }
LABEL_73:
  int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v30 >= 0x80)
  {
    int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v31 = 3;
  }
  uint64_t v3 = (v31 + v3);
  if ((v2 & 0x8000) != 0)
  {
LABEL_77:
    int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v32 >= 0x80)
    {
      int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v33 = 3;
    }
    uint64_t v3 = (v33 + v3);
  }
LABEL_81:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_88;
  }
  if ((v2 & 0x10000) != 0)
  {
    int v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v35 >= 0x80)
    {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v36 = 3;
    }
    uint64_t v3 = (v36 + v3);
    if ((v2 & 0x20000) == 0)
    {
LABEL_84:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_85;
      }
      goto LABEL_97;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_84;
  }
  int v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v37 >= 0x80)
  {
    int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v38 = 3;
  }
  uint64_t v3 = (v38 + v3);
  if ((v2 & 0x40000) == 0)
  {
LABEL_85:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_86;
    }
LABEL_101:
    int v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
    if (v41 >= 0x80)
    {
      int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v42 = 3;
    }
    uint64_t v3 = (v42 + v3);
    if ((v2 & 0x100000) != 0) {
      goto LABEL_87;
    }
    goto LABEL_88;
  }
LABEL_97:
  char v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
  if (v39 >= 0x80)
  {
    int v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v40 = 3;
  }
  uint64_t v3 = (v40 + v3);
  if ((v2 & 0x80000) != 0) {
    goto LABEL_101;
  }
LABEL_86:
  if ((v2 & 0x100000) != 0) {
LABEL_87:
  }
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 11))
       + 2;
LABEL_88:
  *((_DWORD *)this + 24) = v3;
  return v3;
}

void awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::CheckTypeAndMergeFrom(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  int v4 = *((_DWORD *)lpsrc + 25);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v8 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 25) |= 1u;
    *((_DWORD *)this + 2) = v8;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v9 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 25) |= 2u;
  *((_DWORD *)this + 3) = v9;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v10 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 25) |= 4u;
  *((_DWORD *)this + 4) = v10;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 25) |= 8u;
  *((_DWORD *)this + 5) = v11;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_37:
    int v13 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 25) |= 0x20u;
    *((_DWORD *)this + 7) = v13;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_36:
  int v12 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 25) |= 0x10u;
  *((_DWORD *)this + 6) = v12;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x20) != 0) {
    goto LABEL_37;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_38:
  int v14 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 25) |= 0x40u;
  *((_DWORD *)this + 8) = v14;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 25) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    int v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_24;
  }
  if ((v4 & 0x100) != 0)
  {
    int v15 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 25) |= 0x100u;
    *((_DWORD *)this + 10) = v15;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v16 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 25) |= 0x200u;
  *((_DWORD *)this + 11) = v16;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v17 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 25) |= 0x400u;
  *((_DWORD *)this + 12) = v17;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v18 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 25) |= 0x800u;
  *((_DWORD *)this + 13) = v18;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v19 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 25) |= 0x1000u;
  *((_DWORD *)this + 14) = v19;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v20 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 25) |= 0x2000u;
  *((_DWORD *)this + 15) = v20;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_46:
  int v21 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 25) |= 0x4000u;
  *((_DWORD *)this + 16) = v21;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    int v6 = *((_DWORD *)lpsrc + 17);
    *((_DWORD *)this + 25) |= 0x8000u;
    *((_DWORD *)this + 17) = v6;
    int v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_24:
  if ((v4 & 0xFF0000) == 0) {
    return;
  }
  if ((v4 & 0x10000) != 0)
  {
    int v22 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 25) |= 0x10000u;
    *((_DWORD *)this + 18) = v22;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x20000) == 0)
    {
LABEL_27:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_27;
  }
  int v23 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 25) |= 0x20000u;
  *((_DWORD *)this + 19) = v23;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v24 = *((_DWORD *)lpsrc + 20);
  *((_DWORD *)this + 25) |= 0x40000u;
  *((_DWORD *)this + 20) = v24;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      return;
    }
    goto LABEL_30;
  }
LABEL_51:
  int v25 = *((_DWORD *)lpsrc + 21);
  *((_DWORD *)this + 25) |= 0x80000u;
  *((_DWORD *)this + 21) = v25;
  if ((*((_DWORD *)lpsrc + 25) & 0x100000) != 0)
  {
LABEL_30:
    uint64_t v7 = *((void *)lpsrc + 11);
    *((_DWORD *)this + 25) |= 0x100000u;
    *((void *)this + 11) = v7;
  }
}

void sub_1C52806E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::IsInitialized(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return 1;
}

void *awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock");
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::~Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  *(void *)this = &unk_1F20BA5A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA5A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::New(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 100);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_OWORD *)(this + 56) = 0u;
    *(_OWORD *)(this + 40) = 0u;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *(void *)(this + 72) = 0;
    *(void *)(this + 80) = 0;
    *(void *)(this + 88) = 0;
  }
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::MergePartialFromCodedStream(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v62 = (unsigned int *)((char *)this + 8);
  unint64_t v66 = (unsigned int *)((char *)this + 12);
  int v67 = (unsigned int *)((char *)this + 16);
  uint64_t v68 = (unsigned int *)((char *)this + 20);
  int v69 = (unsigned int *)((char *)this + 24);
  int v70 = (unsigned int *)((char *)this + 28);
  int v4 = (unsigned int *)((char *)this + 32);
  int v5 = (unsigned int *)((char *)this + 36);
  int v6 = (unsigned int *)((char *)this + 40);
  uint64_t v7 = (unsigned int *)((char *)this + 44);
  int v8 = (unsigned int *)((char *)this + 48);
  int v9 = (unsigned int *)((char *)this + 52);
  int v10 = (unsigned int *)((char *)this + 56);
  int v11 = (unsigned int *)((char *)this + 60);
  char v64 = (unsigned int *)((char *)this + 68);
  uint64_t v65 = (unsigned int *)((char *)this + 64);
  int v63 = (unsigned int *)((char *)this + 72);
  unint64_t v60 = (unsigned int *)((char *)this + 80);
  int v61 = (unsigned int *)((char *)this + 76);
  char v58 = (unint64_t *)((char *)this + 88);
  unsigned int v59 = (unsigned int *)((char *)this + 84);
  while (2)
  {
    int v12 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 5) {
          goto LABEL_56;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v62);
        if (result)
        {
          *((_DWORD *)this + 25) |= 1u;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          if ((unint64_t)v17 < v16 && *v17 == 16)
          {
            int v18 = v17 + 1;
            *((void *)a2 + 1) = v18;
            goto LABEL_15;
          }
          continue;
        }
        return result;
      case 2u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_15:
        if ((unint64_t)v18 < v16 && (*v18 & 0x80000000) == 0)
        {
          *unint64_t v66 = *v18;
          int v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
LABEL_62:
          *((_DWORD *)this + 25) |= 2u;
          if ((unint64_t)v19 < v16 && *v19 == 24)
          {
            int v20 = v19 + 1;
            *((void *)a2 + 1) = v20;
            goto LABEL_65;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v66);
        if (result)
        {
          int v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
          goto LABEL_62;
        }
        break;
      case 3u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
LABEL_65:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v67);
          if (!result) {
            return result;
          }
          char v39 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v67 = *v20;
          char v39 = v20 + 1;
          *((void *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 25) |= 4u;
        if ((unint64_t)v39 >= v16 || *v39 != 32) {
          continue;
        }
        int v21 = v39 + 1;
        *((void *)a2 + 1) = v21;
LABEL_73:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v68);
          if (!result) {
            return result;
          }
          int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v68 = *v21;
          int v40 = v21 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 25) |= 8u;
        if ((unint64_t)v40 >= v16 || *v40 != 40) {
          continue;
        }
        int v22 = v40 + 1;
        *((void *)a2 + 1) = v22;
LABEL_81:
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v69);
          if (!result) {
            return result;
          }
          int v41 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v69 = *v22;
          int v41 = v22 + 1;
          *((void *)a2 + 1) = v41;
        }
        *((_DWORD *)this + 25) |= 0x10u;
        if ((unint64_t)v41 >= v16 || *v41 != 48) {
          continue;
        }
        int v23 = v41 + 1;
        *((void *)a2 + 1) = v23;
LABEL_89:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v70);
          if (!result) {
            return result;
          }
          int v42 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v70 = *v23;
          int v42 = v23 + 1;
          *((void *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 25) |= 0x20u;
        if ((unint64_t)v42 >= v16 || *v42 != 56) {
          continue;
        }
        int v24 = v42 + 1;
        *((void *)a2 + 1) = v24;
LABEL_97:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unsigned int v43 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v4 = *v24;
          unsigned int v43 = v24 + 1;
          *((void *)a2 + 1) = v43;
        }
        *((_DWORD *)this + 25) |= 0x40u;
        if ((unint64_t)v43 >= v16 || *v43 != 64) {
          continue;
        }
        int v25 = v43 + 1;
        *((void *)a2 + 1) = v25;
LABEL_105:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v44 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v5 = *v25;
          int v44 = v25 + 1;
          *((void *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 25) |= 0x80u;
        if ((unint64_t)v44 >= v16 || *v44 != 72) {
          continue;
        }
        int v26 = v44 + 1;
        *((void *)a2 + 1) = v26;
LABEL_113:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unsigned int v45 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v26;
          unsigned int v45 = v26 + 1;
          *((void *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 25) |= 0x100u;
        if ((unint64_t)v45 >= v16 || *v45 != 80) {
          continue;
        }
        int v27 = v45 + 1;
        *((void *)a2 + 1) = v27;
LABEL_121:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v27;
          int v46 = v27 + 1;
          *((void *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 25) |= 0x200u;
        if ((unint64_t)v46 >= v16 || *v46 != 88) {
          continue;
        }
        int v28 = v46 + 1;
        *((void *)a2 + 1) = v28;
LABEL_129:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          char v47 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v8 = *v28;
          char v47 = v28 + 1;
          *((void *)a2 + 1) = v47;
        }
        *((_DWORD *)this + 25) |= 0x400u;
        if ((unint64_t)v47 >= v16 || *v47 != 96) {
          continue;
        }
        int v29 = v47 + 1;
        *((void *)a2 + 1) = v29;
LABEL_137:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          unsigned int v48 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v29;
          unsigned int v48 = v29 + 1;
          *((void *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 25) |= 0x800u;
        if ((unint64_t)v48 >= v16 || *v48 != 112) {
          continue;
        }
        int v30 = v48 + 1;
        *((void *)a2 + 1) = v30;
LABEL_145:
        if ((unint64_t)v30 >= v16 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!result) {
            return result;
          }
          int v49 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v10 = *v30;
          int v49 = v30 + 1;
          *((void *)a2 + 1) = v49;
        }
        *((_DWORD *)this + 25) |= 0x1000u;
        if ((unint64_t)v49 >= v16 || *v49 != 120) {
          continue;
        }
        int v31 = v49 + 1;
        *((void *)a2 + 1) = v31;
LABEL_153:
        if ((unint64_t)v31 >= v16 || (char)*v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v11);
          if (!result) {
            return result;
          }
          int v50 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v11 = *v31;
          int v50 = v31 + 1;
          *((void *)a2 + 1) = v50;
        }
        *((_DWORD *)this + 25) |= 0x2000u;
        if ((int)v16 - (int)v50 < 2 || *v50 != 128 || v50[1] != 1) {
          continue;
        }
        int v32 = v50 + 2;
        *((void *)a2 + 1) = v32;
LABEL_162:
        if ((unint64_t)v32 >= v16 || (char)*v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v65);
          if (!result) {
            return result;
          }
          int v51 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v65 = *v32;
          int v51 = v32 + 1;
          *((void *)a2 + 1) = v51;
        }
        *((_DWORD *)this + 25) |= 0x4000u;
        if ((int)v16 - (int)v51 < 2 || *v51 != 136 || v51[1] != 1) {
          continue;
        }
        int v33 = v51 + 2;
        *((void *)a2 + 1) = v33;
LABEL_171:
        if ((unint64_t)v33 >= v16 || (char)*v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v64);
          if (!result) {
            return result;
          }
          char v52 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v64 = *v33;
          char v52 = v33 + 1;
          *((void *)a2 + 1) = v52;
        }
        *((_DWORD *)this + 25) |= 0x8000u;
        if ((int)v16 - (int)v52 < 2 || *v52 != 144 || v52[1] != 1) {
          continue;
        }
        char v34 = v52 + 2;
        *((void *)a2 + 1) = v34;
LABEL_180:
        if ((unint64_t)v34 >= v16 || (char)*v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v63);
          if (!result) {
            return result;
          }
          uint64_t v53 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v63 = *v34;
          uint64_t v53 = v34 + 1;
          *((void *)a2 + 1) = v53;
        }
        *((_DWORD *)this + 25) |= 0x10000u;
        if ((int)v16 - (int)v53 < 2 || *v53 != 152 || v53[1] != 1) {
          continue;
        }
        int v35 = v53 + 2;
        *((void *)a2 + 1) = v35;
LABEL_189:
        if ((unint64_t)v35 >= v16 || (char)*v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v61);
          if (!result) {
            return result;
          }
          char v54 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *int v61 = *v35;
          char v54 = v35 + 1;
          *((void *)a2 + 1) = v54;
        }
        *((_DWORD *)this + 25) |= 0x20000u;
        if ((int)v16 - (int)v54 < 2 || *v54 != 160 || v54[1] != 1) {
          continue;
        }
        int v36 = v54 + 2;
        *((void *)a2 + 1) = v36;
LABEL_198:
        if ((unint64_t)v36 >= v16 || (char)*v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v60);
          if (!result) {
            return result;
          }
          int v55 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *unint64_t v60 = *v36;
          int v55 = v36 + 1;
          *((void *)a2 + 1) = v55;
        }
        *((_DWORD *)this + 25) |= 0x40000u;
        if ((int)v16 - (int)v55 < 2 || *v55 != 168 || v55[1] != 1) {
          continue;
        }
        int v37 = v55 + 2;
        *((void *)a2 + 1) = v37;
LABEL_207:
        if ((unint64_t)v37 >= v16 || (char)*v37 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v59);
          if (!result) {
            return result;
          }
          char v56 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *unsigned int v59 = *v37;
          char v56 = v37 + 1;
          *((void *)a2 + 1) = v56;
        }
        *((_DWORD *)this + 25) |= 0x80000u;
        if ((int)v16 - (int)v56 < 2 || *v56 != 176 || v56[1] != 1) {
          continue;
        }
        int v38 = (char *)(v56 + 2);
        *((void *)a2 + 1) = v38;
LABEL_216:
        if ((unint64_t)v38 >= v16 || *v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v58);
          if (!result) {
            return result;
          }
          char v57 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *char v58 = *v38;
          char v57 = (unsigned __int8 *)(v38 + 1);
          *((void *)a2 + 1) = v57;
        }
        *((_DWORD *)this + 25) |= 0x100000u;
        if (v57 != (unsigned __int8 *)v16 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v21 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_73;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_81;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_89;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_97;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v25 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_105;
      case 9u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v26 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_113;
      case 0xAu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v27 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xBu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v28 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_129;
      case 0xCu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v29 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_137;
      case 0xEu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v30 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_145;
      case 0xFu:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v31 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_153;
      case 0x10u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v32 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_162;
      case 0x11u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v33 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_171;
      case 0x12u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        char v34 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_180;
      case 0x13u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v35 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_189;
      case 0x14u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v36 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_198;
      case 0x15u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v37 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_207;
      case 0x16u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        int v38 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_216;
      default:
        int v14 = TagFallback & 7;
LABEL_56:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 100);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(unsigned int *)(v5 + 68), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 72), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 100) & 0x100000) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x80000) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v6 & 0x100000) == 0) {
    return this;
  }
LABEL_43:
  uint64_t v7 = *(void *)(v5 + 88);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::ByteSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  int v2 = *((_DWORD *)this + 25);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_39;
  }
  uint64_t v3 = (v2 << 31 >> 31) & 5;
  if ((v2 & 2) != 0)
  {
    int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v4 >= 0x80)
    {
      int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v5 = 1;
    }
    uint64_t v3 = (v3 + v5 + 1);
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v7 = 1;
  }
  uint64_t v3 = (v3 + v7 + 1);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_19:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v9 = 1;
  }
  uint64_t v3 = (v3 + v9 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_23:
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v11 = 1;
  }
  uint64_t v3 = (v3 + v11 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_27:
  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v3 = (v3 + v13 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
LABEL_31:
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v3 = (v3 + v15 + 1);
  if ((v2 & 0x80) != 0)
  {
LABEL_35:
    unint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v17 = 1;
    }
    uint64_t v3 = (v3 + v17 + 1);
  }
LABEL_39:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_81;
  }
  if ((v2 & 0x100) != 0)
  {
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v19 = 1;
    }
    uint64_t v3 = (v3 + v19 + 1);
    if ((v2 & 0x200) == 0)
    {
LABEL_42:
      if ((v2 & 0x400) == 0) {
        goto LABEL_43;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_42;
  }
  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v21 = 1;
  }
  uint64_t v3 = (v3 + v21 + 1);
  if ((v2 & 0x400) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0) {
      goto LABEL_44;
    }
    goto LABEL_61;
  }
LABEL_57:
  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v23 = 1;
  }
  uint64_t v3 = (v3 + v23 + 1);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_65;
  }
LABEL_61:
  int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v24 >= 0x80)
  {
    int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v25 = 1;
  }
  uint64_t v3 = (v3 + v25 + 1);
  if ((v2 & 0x1000) == 0)
  {
LABEL_45:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_69;
  }
LABEL_65:
  int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v27 = 1;
  }
  uint64_t v3 = (v3 + v27 + 1);
  if ((v2 & 0x2000) == 0)
  {
LABEL_46:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_73;
  }
LABEL_69:
  int v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28) + 1;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v29 = 2;
  }
  uint64_t v3 = (v29 + v3);
  if ((v2 & 0x4000) == 0)
  {
LABEL_47:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_77;
  }
LABEL_73:
  int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v30 >= 0x80)
  {
    int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v31 = 3;
  }
  uint64_t v3 = (v31 + v3);
  if ((v2 & 0x8000) != 0)
  {
LABEL_77:
    int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v32 >= 0x80)
    {
      int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v33 = 3;
    }
    uint64_t v3 = (v33 + v3);
  }
LABEL_81:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_88;
  }
  if ((v2 & 0x10000) != 0)
  {
    int v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if (v35 >= 0x80)
    {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v36 = 3;
    }
    uint64_t v3 = (v36 + v3);
    if ((v2 & 0x20000) == 0)
    {
LABEL_84:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_85;
      }
      goto LABEL_97;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_84;
  }
  int v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 19);
  if (v37 >= 0x80)
  {
    int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v38 = 3;
  }
  uint64_t v3 = (v38 + v3);
  if ((v2 & 0x40000) == 0)
  {
LABEL_85:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_86;
    }
LABEL_101:
    int v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
    if (v41 >= 0x80)
    {
      int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41) + 2;
      int v2 = *((_DWORD *)this + 25);
    }
    else
    {
      int v42 = 3;
    }
    uint64_t v3 = (v42 + v3);
    if ((v2 & 0x100000) != 0) {
      goto LABEL_87;
    }
    goto LABEL_88;
  }
LABEL_97:
  char v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
  if (v39 >= 0x80)
  {
    int v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39) + 2;
    int v2 = *((_DWORD *)this + 25);
  }
  else
  {
    int v40 = 3;
  }
  uint64_t v3 = (v40 + v3);
  if ((v2 & 0x80000) != 0) {
    goto LABEL_101;
  }
LABEL_86:
  if ((v2 & 0x100000) != 0) {
LABEL_87:
  }
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 11))
       + 2;
LABEL_88:
  *((_DWORD *)this + 24) = v3;
  return v3;
}

void awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::CheckTypeAndMergeFrom(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  int v4 = *((_DWORD *)lpsrc + 25);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    int v8 = *((_DWORD *)lpsrc + 2);
    *((_DWORD *)this + 25) |= 1u;
    *((_DWORD *)this + 2) = v8;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v9 = *((_DWORD *)lpsrc + 3);
  *((_DWORD *)this + 25) |= 2u;
  *((_DWORD *)this + 3) = v9;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v10 = *((_DWORD *)lpsrc + 4);
  *((_DWORD *)this + 25) |= 4u;
  *((_DWORD *)this + 4) = v10;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v11 = *((_DWORD *)lpsrc + 5);
  *((_DWORD *)this + 25) |= 8u;
  *((_DWORD *)this + 5) = v11;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_37:
    int v13 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 25) |= 0x20u;
    *((_DWORD *)this + 7) = v13;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_36:
  int v12 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 25) |= 0x10u;
  *((_DWORD *)this + 6) = v12;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x20) != 0) {
    goto LABEL_37;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_38:
  int v14 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 25) |= 0x40u;
  *((_DWORD *)this + 8) = v14;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 25) |= 0x80u;
    *((_DWORD *)this + 9) = v5;
    int v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_24;
  }
  if ((v4 & 0x100) != 0)
  {
    int v15 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 25) |= 0x100u;
    *((_DWORD *)this + 10) = v15;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v16 = *((_DWORD *)lpsrc + 11);
  *((_DWORD *)this + 25) |= 0x200u;
  *((_DWORD *)this + 11) = v16;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v17 = *((_DWORD *)lpsrc + 12);
  *((_DWORD *)this + 25) |= 0x400u;
  *((_DWORD *)this + 12) = v17;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v18 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 25) |= 0x800u;
  *((_DWORD *)this + 13) = v18;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v19 = *((_DWORD *)lpsrc + 14);
  *((_DWORD *)this + 25) |= 0x1000u;
  *((_DWORD *)this + 14) = v19;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x2000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v20 = *((_DWORD *)lpsrc + 15);
  *((_DWORD *)this + 25) |= 0x2000u;
  *((_DWORD *)this + 15) = v20;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_46:
  int v21 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 25) |= 0x4000u;
  *((_DWORD *)this + 16) = v21;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x8000) != 0)
  {
LABEL_23:
    int v6 = *((_DWORD *)lpsrc + 17);
    *((_DWORD *)this + 25) |= 0x8000u;
    *((_DWORD *)this + 17) = v6;
    int v4 = *((_DWORD *)lpsrc + 25);
  }
LABEL_24:
  if ((v4 & 0xFF0000) == 0) {
    return;
  }
  if ((v4 & 0x10000) != 0)
  {
    int v22 = *((_DWORD *)lpsrc + 18);
    *((_DWORD *)this + 25) |= 0x10000u;
    *((_DWORD *)this + 18) = v22;
    int v4 = *((_DWORD *)lpsrc + 25);
    if ((v4 & 0x20000) == 0)
    {
LABEL_27:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_27;
  }
  int v23 = *((_DWORD *)lpsrc + 19);
  *((_DWORD *)this + 25) |= 0x20000u;
  *((_DWORD *)this + 19) = v23;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v24 = *((_DWORD *)lpsrc + 20);
  *((_DWORD *)this + 25) |= 0x40000u;
  *((_DWORD *)this + 20) = v24;
  int v4 = *((_DWORD *)lpsrc + 25);
  if ((v4 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      return;
    }
    goto LABEL_30;
  }
LABEL_51:
  int v25 = *((_DWORD *)lpsrc + 21);
  *((_DWORD *)this + 25) |= 0x80000u;
  *((_DWORD *)this + 21) = v25;
  if ((*((_DWORD *)lpsrc + 25) & 0x100000) != 0)
  {
LABEL_30:
    uint64_t v7 = *((void *)lpsrc + 11);
    *((_DWORD *)this + 25) |= 0x100000u;
    *((void *)this + 11) = v7;
  }
}

void sub_1C5281D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::IsInitialized(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return 1;
}

void *awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock");
}

void awd::metrics::MetricATM_SoundUMB_State::~MetricATM_SoundUMB_State(awd::metrics::MetricATM_SoundUMB_State *this)
{
  *(void *)this = &unk_1F20BA620;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA620;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::MetricATM_SoundUMB_State::New(awd::metrics::MetricATM_SoundUMB_State *this)
{
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 40))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(unsigned char *)(this + 32) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::MergePartialFromCodedStream(awd::metrics::MetricATM_SoundUMB_State *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unint64_t *)((char *)this + 16);
  int v6 = (unint64_t *)((char *)this + 24);
  while (2)
  {
    uint64_t v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v21 = 0;
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          unsigned int v12 = *v11;
          int v13 = v11 + 1;
          *((void *)a2 + 1) = v13;
LABEL_24:
          *((unsigned char *)this + 32) = v12 != 0;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            int v14 = v13 + 1;
            *((void *)a2 + 1) = v14;
            goto LABEL_27;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v12 = v21;
          int v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
LABEL_27:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
        }
        else
        {
          *int v4 = *v14;
          int v17 = v14 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((_DWORD *)this + 10) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 24) {
          continue;
        }
        int v15 = v17 + 1;
        *((void *)a2 + 1) = v15;
LABEL_35:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
        }
        else
        {
          *int v5 = *v15;
          int v18 = v15 + 1;
          *((void *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 10) |= 4u;
        if ((unint64_t)v18 >= v10 || *v18 != 32) {
          continue;
        }
        int v16 = v18 + 1;
        *((void *)a2 + 1) = v16;
LABEL_43:
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v16;
          int v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 10) |= 8u;
        if (v19 != (unsigned __int8 *)v10 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        goto LABEL_35;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        goto LABEL_43;
      default:
        int v9 = TagFallback & 7;
LABEL_18:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 32), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 40) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 8), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(void *)(v5 + 24);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::ByteSize(awd::metrics::MetricATM_SoundUMB_State *this)
{
  int v2 = *((_DWORD *)this + 10);
  if ((_BYTE)v2)
  {
    uint64_t v3 = 2 * (v2 & 1u);
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = (v3 | 1)
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1));
      int v2 = *((_DWORD *)this + 10);
      if ((v2 & 4) == 0)
      {
LABEL_4:
        if ((v2 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else if ((v2 & 4) == 0)
    {
      goto LABEL_4;
    }
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2))
       + 1;
    if ((*((_DWORD *)this + 10) & 8) != 0) {
LABEL_9:
    }
      uint64_t v3 = v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 3))
         + 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_10:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

void awd::metrics::MetricATM_SoundUMB_State::CheckTypeAndMergeFrom(awd::metrics::MetricATM_SoundUMB_State *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)lpsrc + 40);
  if (!(_BYTE)v4) {
    return;
  }
  if ((*((unsigned char *)lpsrc + 40) & 1) == 0)
  {
    if ((*((unsigned char *)lpsrc + 40) & 2) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    uint64_t v7 = *((void *)lpsrc + 1);
    *((_DWORD *)this + 10) |= 2u;
    *((void *)this + 1) = v7;
    int v4 = *((_DWORD *)lpsrc + 10);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  char v6 = *((unsigned char *)lpsrc + 32);
  *((_DWORD *)this + 10) |= 1u;
  *((unsigned char *)this + 32) = v6;
  int v4 = *((_DWORD *)lpsrc + 10);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v4 & 4) == 0) {
    goto LABEL_8;
  }
LABEL_13:
  uint64_t v8 = *((void *)lpsrc + 2);
  *((_DWORD *)this + 10) |= 4u;
  *((void *)this + 2) = v8;
  if ((*((_DWORD *)lpsrc + 10) & 8) != 0)
  {
LABEL_9:
    uint64_t v5 = *((void *)lpsrc + 3);
    *((_DWORD *)this + 10) |= 8u;
    *((void *)this + 3) = v5;
  }
}

void sub_1C52823E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::IsInitialized(awd::metrics::MetricATM_SoundUMB_State *this)
{
  return 1;
}

void *awd::metrics::MetricATM_SoundUMB_State::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.MetricATM_SoundUMB_State");
}

void *awd::metrics::ATM_signaling_message::SharedDtor(void *this)
{
  int v1 = this;
  uint64_t v2 = this[2];
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = v1[4];
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    this = (void *)MEMORY[0x1C878E320](v5, 0x1012C40EC159624);
  }
  uint64_t v7 = v1[6];
  if (v7 != v3 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    this = (void *)MEMORY[0x1C878E320](v7, 0x1012C40EC159624);
  }
  uint64_t v9 = v1[7];
  if (v9 != v3 && v9 != 0)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::ATM_signaling_message::~ATM_signaling_message(awd::metrics::ATM_signaling_message *this)
{
  *(void *)this = &unk_1F20BA698;
  awd::metrics::ATM_signaling_message::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA698;
  awd::metrics::ATM_signaling_message::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::ATM_signaling_message::New(awd::metrics::ATM_signaling_message *this)
{
}

uint64_t awd::metrics::ATM_signaling_message::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 72);
  if ((_BYTE)v1)
  {
    *(void *)(this + 8) = 0;
    *(_DWORD *)(this + 24) = 0;
    uint64_t v2 = MEMORY[0x1E4FBA920];
    if ((v1 & 4) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 44) = 0;
    *(_DWORD *)(this + 28) = -1;
    if ((*(unsigned char *)(this + 72) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(this + 32);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 45) = 0;
    *(_DWORD *)(this + 40) = 0;
    int v1 = *(_DWORD *)(this + 72);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(unsigned char *)(this + 46) = 0;
    *(_DWORD *)(this + 64) = 0;
    if ((v1 & 0x400) != 0)
    {
      uint64_t v5 = *(void *)(this + 48);
      if (v5 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(this + 47) = 0;
    if ((*(unsigned char *)(this + 73) & 0x10) != 0)
    {
      uint64_t v6 = *(void *)(this + 56);
      if (v6 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t awd::metrics::ATM_signaling_message::MergePartialFromCodedStream(awd::metrics::ATM_signaling_message *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 24);
  uint64_t v6 = (unsigned int *)((char *)this + 40);
  uint64_t v7 = (unsigned int *)((char *)this + 64);
  uint64_t v8 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v13 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        if ((unint64_t)v13 < v12 && (*v13 & 0x80000000) == 0)
        {
          *uint64_t v4 = *v13;
          int v14 = v13 + 1;
          *((void *)a2 + 1) = v14;
LABEL_42:
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            int v15 = v14 + 1;
            *((void *)a2 + 1) = v15;
            goto LABEL_45;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          int v14 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
          goto LABEL_42;
        }
        break;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
LABEL_45:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v29 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v5 = *v15;
          int v29 = v15 + 1;
          *((void *)a2 + 1) = v29;
        }
        int v16 = *((_DWORD *)this + 18) | 2;
        *((_DWORD *)this + 18) = v16;
        if ((unint64_t)v29 >= v12 || *v29 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v29 + 1;
LABEL_53:
        *((_DWORD *)this + 18) = v16 | 4;
        if (*((void *)this + 2) == v8) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v30 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        if ((unint64_t)v30 >= v17 || *v30 != 32) {
          continue;
        }
        int v18 = v30 + 1;
        *((void *)a2 + 1) = v18;
LABEL_59:
        unsigned int v46 = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v31 = v46;
          int v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v17 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v31 = *v18;
          int v32 = v18 + 1;
          *((void *)a2 + 1) = v32;
        }
        *((unsigned char *)this + 44) = v31 != 0;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v32 >= v17 || *v32 != 40) {
          continue;
        }
        int v19 = v32 + 1;
        *((void *)a2 + 1) = v19;
LABEL_67:
        unsigned int v46 = 0;
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v33 = v46;
        }
        else
        {
          unsigned int v33 = *v19;
          *((void *)a2 + 1) = v19 + 1;
        }
        if (v33 + 1 <= 7)
        {
          *((_DWORD *)this + 18) |= 0x10u;
          *((_DWORD *)this + 7) = v33;
        }
        char v34 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v34 >= *((void *)a2 + 2) || *v34 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v34 + 1;
LABEL_77:
        *((_DWORD *)this + 18) |= 0x20u;
        if (*((void *)this + 4) == v8) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v35 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        if ((unint64_t)v35 >= v20 || *v35 != 56) {
          continue;
        }
        unsigned int v21 = v35 + 1;
        *((void *)a2 + 1) = v21;
LABEL_83:
        unsigned int v46 = 0;
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v36 = v46;
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v36 = *v21;
          int v37 = v21 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((unsigned char *)this + 45) = v36 != 0;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v37 >= v20 || *v37 != 64) {
          continue;
        }
        int v22 = v37 + 1;
        *((void *)a2 + 1) = v22;
LABEL_91:
        if ((unint64_t)v22 >= v20 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v38 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v22;
          int v38 = v22 + 1;
          *((void *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v38 >= v20 || *v38 != 72) {
          continue;
        }
        int v23 = v38 + 1;
        *((void *)a2 + 1) = v23;
LABEL_99:
        unsigned int v46 = 0;
        if ((unint64_t)v23 >= v20 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v39 = v46;
          int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v39 = *v23;
          int v40 = v23 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((unsigned char *)this + 46) = v39 != 0;
        *((_DWORD *)this + 18) |= 0x100u;
        if ((unint64_t)v40 >= v20 || *v40 != 80) {
          continue;
        }
        int v24 = v40 + 1;
        *((void *)a2 + 1) = v24;
LABEL_107:
        if ((unint64_t)v24 >= v20 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v41 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v24;
          int v41 = v24 + 1;
          *((void *)a2 + 1) = v41;
        }
        int v25 = *((_DWORD *)this + 18) | 0x200;
        *((_DWORD *)this + 18) = v25;
        if ((unint64_t)v41 >= v20 || *v41 != 90) {
          continue;
        }
        *((void *)a2 + 1) = v41 + 1;
LABEL_115:
        *((_DWORD *)this + 18) = v25 | 0x400;
        if (*((void *)this + 6) == v8) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v42 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        if ((unint64_t)v42 >= v26 || *v42 != 96) {
          continue;
        }
        int v27 = v42 + 1;
        *((void *)a2 + 1) = v27;
LABEL_121:
        unsigned int v46 = 0;
        if ((unint64_t)v27 >= v26 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v43 = v46;
          int v44 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v43 = *v27;
          int v44 = v27 + 1;
          *((void *)a2 + 1) = v44;
        }
        *((unsigned char *)this + 47) = v43 != 0;
        int v28 = *((_DWORD *)this + 18) | 0x800;
        *((_DWORD *)this + 18) = v28;
        if ((unint64_t)v44 >= v26 || *v44 != 106) {
          continue;
        }
        *((void *)a2 + 1) = v44 + 1;
LABEL_129:
        *((_DWORD *)this + 18) = v28 | 0x1000;
        if (*((void *)this + 7) == v8) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)a2 + 1) != *((void *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_37;
        }
        int v16 = *((_DWORD *)this + 18);
        goto LABEL_53;
      case 4u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_59;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v19 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_67;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_77;
        }
        goto LABEL_37;
      case 7u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v21 = (char *)*((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        goto LABEL_83;
      case 8u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        goto LABEL_91;
      case 9u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        goto LABEL_99;
      case 0xAu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v24 = (char *)*((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        goto LABEL_107;
      case 0xBu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_37;
        }
        int v25 = *((_DWORD *)this + 18);
        goto LABEL_115;
      case 0xCu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v27 = (char *)*((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xDu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_37;
        }
        int v28 = *((_DWORD *)this + 18);
        goto LABEL_129;
      default:
        int v11 = TagFallback & 7;
LABEL_37:
        if (v11 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::ATM_signaling_message::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 44), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 45), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 46), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 47), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 72) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v6 & 0x1000) == 0) {
    return this;
  }
LABEL_27:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::ATM_signaling_message::ByteSize(awd::metrics::ATM_signaling_message *this)
{
  int v2 = *((_DWORD *)this + 18);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_48;
  }
  if ((v2 & 1) == 0)
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v4 >= 0x80)
    {
      int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v5 = 1;
    }
    LODWORD(v3) = v3 + v5 + 1;
    goto LABEL_11;
  }
  LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                            + 1))
              + 1;
  int v2 = *((_DWORD *)this + 18);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)this + 2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v2 = *((_DWORD *)this + 18);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    LODWORD(v3) = v3 + v11 + v7 + 1;
  }
  if ((v2 & 8) != 0) {
    LODWORD(v3) = v3 + 2;
  }
  if ((v2 & 0x10) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v13 = 2;
    }
    LODWORD(v3) = v13 + v3;
  }
  if ((v2 & 0x20) != 0)
  {
    uint64_t v14 = *((void *)this + 4);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    char v16 = v15;
    uint64_t v17 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
      int v15 = *(unsigned __int8 *)(v14 + 23);
      uint64_t v17 = *(void *)(v14 + 8);
      int v2 = *((_DWORD *)this + 18);
      char v16 = *(unsigned char *)(v14 + 23);
    }
    else
    {
      int v19 = 1;
    }
    if (v16 < 0) {
      int v15 = v17;
    }
    LODWORD(v3) = v3 + v19 + v15 + 1;
  }
  if ((v2 & 0x40) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x80) != 0)
  {
    unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v20 >= 0x80)
    {
      int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
      int v2 = *((_DWORD *)this + 18);
    }
    else
    {
      int v21 = 2;
    }
    uint64_t v3 = (v21 + v3);
  }
LABEL_48:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0) {
      LODWORD(v3) = v3 + 2;
    }
    if ((v2 & 0x200) != 0)
    {
      int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
      if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
        int v2 = *((_DWORD *)this + 18);
      }
      else
      {
        int v23 = 2;
      }
      LODWORD(v3) = v23 + v3;
    }
    if ((v2 & 0x400) != 0)
    {
      uint64_t v24 = *((void *)this + 6);
      int v25 = *(unsigned __int8 *)(v24 + 23);
      char v26 = v25;
      uint64_t v27 = *(void *)(v24 + 8);
      if ((v25 & 0x80u) == 0) {
        unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28 >= 0x80)
      {
        int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
        int v25 = *(unsigned __int8 *)(v24 + 23);
        uint64_t v27 = *(void *)(v24 + 8);
        int v2 = *((_DWORD *)this + 18);
        char v26 = *(unsigned char *)(v24 + 23);
      }
      else
      {
        int v29 = 1;
      }
      if (v26 < 0) {
        int v25 = v27;
      }
      LODWORD(v3) = v3 + v29 + v25 + 1;
    }
    if ((v2 & 0x800) != 0) {
      uint64_t v3 = (v3 + 2);
    }
    else {
      uint64_t v3 = v3;
    }
    if ((v2 & 0x1000) != 0)
    {
      uint64_t v30 = *((void *)this + 7);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      char v32 = v31;
      uint64_t v33 = *(void *)(v30 + 8);
      if ((v31 & 0x80u) == 0) {
        unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34 >= 0x80)
      {
        int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
        int v31 = *(unsigned __int8 *)(v30 + 23);
        uint64_t v33 = *(void *)(v30 + 8);
        char v32 = *(unsigned char *)(v30 + 23);
      }
      else
      {
        int v35 = 1;
      }
      if (v32 < 0) {
        int v31 = v33;
      }
      uint64_t v3 = (v3 + v35 + v31 + 1);
    }
  }
  *((_DWORD *)this + 17) = v3;
  return v3;
}

void awd::metrics::ATM_signaling_message::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }
  int v4 = *((_DWORD *)lpsrc + 18);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    uint64_t v6 = lpsrc[1];
    *((_DWORD *)this + 18) |= 1u;
    this[1] = v6;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v7 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 18) |= 2u;
  *((_DWORD *)this + 6) = v7;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_23:
  char v8 = lpsrc[2];
  *((_DWORD *)this + 18) |= 4u;
  uint64_t v9 = (std::string *)this[2];
  if (v9 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v9, v8);
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v10 = *((unsigned char *)lpsrc + 44);
  *((_DWORD *)this + 18) |= 8u;
  *((unsigned char *)this + 44) = v10;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_29:
    unint64_t v12 = lpsrc[4];
    *((_DWORD *)this + 18) |= 0x20u;
    int v13 = (std::string *)this[4];
    if (v13 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v13, v12);
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_27:
  int v11 = *((_DWORD *)lpsrc + 7);
  if ((v11 + 1) >= 8) {
    __assert_rtn("set_type", "CATM.pb.h", 19210, "::awd::metrics::enum_ATM_call_type_IsValid(value)");
  }
  *((_DWORD *)this + 18) |= 0x10u;
  *((_DWORD *)this + 7) = v11;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_32:
  char v14 = *((unsigned char *)lpsrc + 45);
  *((_DWORD *)this + 18) |= 0x40u;
  *((unsigned char *)this + 45) = v14;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 10);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 10) = v5;
    int v4 = *((_DWORD *)lpsrc + 18);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    char v15 = *((unsigned char *)lpsrc + 46);
    *((_DWORD *)this + 18) |= 0x100u;
    *((unsigned char *)this + 46) = v15;
    int v4 = *((_DWORD *)lpsrc + 18);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v16 = *((_DWORD *)lpsrc + 16);
  *((_DWORD *)this + 18) |= 0x200u;
  *((_DWORD *)this + 16) = v16;
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
LABEL_39:
    char v19 = *((unsigned char *)lpsrc + 47);
    *((_DWORD *)this + 18) |= 0x800u;
    *((unsigned char *)this + 47) = v19;
    if ((lpsrc[9] & 0x1000) == 0) {
      return;
    }
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v17 = lpsrc[6];
  *((_DWORD *)this + 18) |= 0x400u;
  unint64_t v18 = (std::string *)this[6];
  if (v18 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v18, v17);
  int v4 = *((_DWORD *)lpsrc + 18);
  if ((v4 & 0x800) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v4 & 0x1000) == 0) {
    return;
  }
LABEL_40:
  unint64_t v20 = lpsrc[7];
  *((_DWORD *)this + 18) |= 0x1000u;
  int v21 = (std::string *)this[7];
  if (v21 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v21, v20);
}

void sub_1C52836F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::ATM_signaling_message::IsInitialized(awd::metrics::ATM_signaling_message *this)
{
  return 1;
}

void *awd::metrics::ATM_signaling_message::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.ATM_signaling_message");
}

uint64_t awd::metrics::conference_call_event::SharedDtor(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = MEMORY[0x1C878E320](v2, 0x1012C40EC159624);
  }
  uint64_t v5 = *(void *)(v1 + 32);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    JUMPOUT(0x1C878E320);
  }
  return this;
}

void awd::metrics::conference_call_event::~conference_call_event(awd::metrics::conference_call_event *this)
{
  *(void *)this = &unk_1F20BA710;
  awd::metrics::conference_call_event::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA710;
  awd::metrics::conference_call_event::SharedDtor((uint64_t)this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::conference_call_event::New(awd::metrics::conference_call_event *this)
{
}

uint64_t awd::metrics::conference_call_event::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 44);
  if (v1)
  {
    *(void *)(this + 8) = 0;
    uint64_t v2 = MEMORY[0x1E4FBA920];
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(void *)(this + 24) = 1;
    if ((*(unsigned char *)(this + 44) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(this + 32);
      if (v4 != v2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t awd::metrics::conference_call_event::MergePartialFromCodedStream(awd::metrics::conference_call_event *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 28);
  uint64_t v6 = MEMORY[0x1E4FBA920];
  while (2)
  {
    int v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          *uint64_t v4 = *v11;
          unint64_t v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
LABEL_26:
          int v13 = *((_DWORD *)this + 11) | 1;
          *((_DWORD *)this + 11) = v13;
          if ((unint64_t)v12 < v10 && *v12 == 18)
          {
            *((void *)a2 + 1) = v12 + 1;
            goto LABEL_29;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          unint64_t v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
        int v13 = *((_DWORD *)this + 11);
LABEL_29:
        *((_DWORD *)this + 11) = v13 | 2;
        if (*((void *)this + 2) == v6) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v19 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        if ((unint64_t)v19 >= v14 || *v19 != 24) {
          continue;
        }
        char v15 = v19 + 1;
        *((void *)a2 + 1) = v15;
LABEL_35:
        unsigned int v24 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v20 = v24;
        }
        else
        {
          unsigned int v20 = *v15;
          *((void *)a2 + 1) = v15 + 1;
        }
        if (v20 - 1 <= 3)
        {
          *((_DWORD *)this + 11) |= 4u;
          *((_DWORD *)this + 6) = v20;
        }
        int v21 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        if ((unint64_t)v21 >= v16 || *v21 != 32) {
          continue;
        }
        uint64_t v17 = v21 + 1;
        *((void *)a2 + 1) = v17;
LABEL_45:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v16 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v5 = *v17;
          int v22 = v17 + 1;
          *((void *)a2 + 1) = v22;
        }
        int v18 = *((_DWORD *)this + 11) | 8;
        *((_DWORD *)this + 11) = v18;
        if ((unint64_t)v22 >= v16 || *v22 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v22 + 1;
LABEL_53:
        *((_DWORD *)this + 11) = v18 | 0x10;
        if (*((void *)this + 4) == v6) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)a2 + 1) != *((void *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        char v15 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        goto LABEL_35;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v16 = *((void *)a2 + 2);
        goto LABEL_45;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
        int v18 = *((_DWORD *)this + 11);
        goto LABEL_53;
      default:
        int v9 = TagFallback & 7;
LABEL_21:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::conference_call_event::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 44);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  unsigned int v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[7], (uint64_t)a2, a4);
    if ((v5[11] & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[6], (uint64_t)a2, a4);
  unsigned int v6 = v5[11];
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::conference_call_event::ByteSize(awd::metrics::conference_call_event *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_39;
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 11);
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *((_DWORD *)this + 11);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  uint64_t v3 = (v3 + v9 + v5 + 1);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      int v2 = *((_DWORD *)this + 11);
    }
    else
    {
      int v11 = 2;
    }
    uint64_t v3 = (v11 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0) {
        goto LABEL_39;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v13 = 2;
  }
  uint64_t v3 = (v13 + v3);
  if ((v2 & 0x10) != 0)
  {
LABEL_30:
    uint64_t v14 = *((void *)this + 4);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    char v16 = v15;
    uint64_t v17 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18);
      int v15 = *(unsigned __int8 *)(v14 + 23);
      uint64_t v17 = *(void *)(v14 + 8);
      char v16 = *(unsigned char *)(v14 + 23);
    }
    else
    {
      int v19 = 1;
    }
    if (v16 < 0) {
      int v15 = v17;
    }
    uint64_t v3 = (v3 + v19 + v15 + 1);
  }
LABEL_39:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::conference_call_event::CheckTypeAndMergeFrom(const std::string **this, const std::string **lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *((unsigned char *)lpsrc + 44);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)lpsrc + 44))
    {
      unint64_t v8 = lpsrc[1];
      *((_DWORD *)this + 11) |= 1u;
      this[1] = v8;
      int v4 = *((_DWORD *)lpsrc + 11);
      if ((v4 & 2) == 0)
      {
LABEL_7:
        if ((v4 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_19;
      }
    }
    else if ((*((unsigned char *)lpsrc + 44) & 2) == 0)
    {
      goto LABEL_7;
    }
    int v9 = lpsrc[2];
    *((_DWORD *)this + 11) |= 2u;
    unint64_t v10 = (std::string *)this[2];
    if (v10 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v10, v9);
    int v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_19:
    int v11 = *((_DWORD *)lpsrc + 6);
    if ((v11 - 1) >= 4) {
      __assert_rtn("set_state", "CATM.pb.h", 19649, "::awd::metrics::enum_conf_call_event_IsValid(value)");
    }
    *((_DWORD *)this + 11) |= 4u;
    *((_DWORD *)this + 6) = v11;
    int v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    int v5 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 11) |= 8u;
    *((_DWORD *)this + 7) = v5;
    int v4 = *((_DWORD *)lpsrc + 11);
LABEL_10:
    if ((v4 & 0x10) != 0)
    {
      char v6 = lpsrc[4];
      *((_DWORD *)this + 11) |= 0x10u;
      uint64_t v7 = (std::string *)this[4];
      if (v7 == (std::string *)MEMORY[0x1E4FBA920]) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_1C528414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::conference_call_event::IsInitialized(awd::metrics::conference_call_event *this)
{
  return 1;
}

void *awd::metrics::conference_call_event::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.conference_call_event");
}

void awd::metrics::commCenterIMSSignallingDeferral::~commCenterIMSSignallingDeferral(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  *(void *)this = &unk_1F20BA788;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA788;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::commCenterIMSSignallingDeferral::New(awd::metrics::commCenterIMSSignallingDeferral *this)
{
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 44))
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::MergePartialFromCodedStream(awd::metrics::commCenterIMSSignallingDeferral *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 24);
  char v6 = (unint64_t *)((char *)this + 16);
  uint64_t v7 = (unsigned int *)((char *)this + 28);
  unint64_t v8 = (unsigned int *)((char *)this + 32);
  int v9 = (unsigned int *)((char *)this + 36);
  while (2)
  {
    unint64_t v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          *int v4 = *v14;
          int v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
LABEL_28:
          *((_DWORD *)this + 11) |= 1u;
          if ((unint64_t)v15 < v13 && *v15 == 16)
          {
            char v16 = v15 + 1;
            *((void *)a2 + 1) = v16;
            goto LABEL_31;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          goto LABEL_28;
        }
        break;
      case 2u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        char v16 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
LABEL_31:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          *int v5 = *v16;
          int v21 = v16 + 1;
          *((void *)a2 + 1) = v21;
        }
        *((_DWORD *)this + 11) |= 2u;
        if ((unint64_t)v21 >= v13 || *v21 != 24) {
          continue;
        }
        uint64_t v17 = v21 + 1;
        *((void *)a2 + 1) = v17;
LABEL_39:
        if ((unint64_t)v17 >= v13 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          *char v6 = *v17;
          int v22 = v17 + 1;
          *((void *)a2 + 1) = v22;
        }
        *((_DWORD *)this + 11) |= 4u;
        if ((unint64_t)v22 >= v13 || *v22 != 32) {
          continue;
        }
        unint64_t v18 = v22 + 1;
        *((void *)a2 + 1) = v18;
LABEL_47:
        if ((unint64_t)v18 >= v13 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v23 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v7 = *v18;
          int v23 = v18 + 1;
          *((void *)a2 + 1) = v23;
        }
        *((_DWORD *)this + 11) |= 8u;
        if ((unint64_t)v23 >= v13 || *v23 != 40) {
          continue;
        }
        int v19 = v23 + 1;
        *((void *)a2 + 1) = v19;
LABEL_55:
        if ((unint64_t)v19 >= v13 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          unsigned int v24 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          *unint64_t v8 = *v19;
          unsigned int v24 = v19 + 1;
          *((void *)a2 + 1) = v24;
        }
        *((_DWORD *)this + 11) |= 0x10u;
        if ((unint64_t)v24 >= v13 || *v24 != 48) {
          continue;
        }
        unsigned int v20 = v24 + 1;
        *((void *)a2 + 1) = v20;
LABEL_63:
        if ((unint64_t)v20 >= v13 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          int v25 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          *int v9 = *v20;
          int v25 = (unsigned __int8 *)(v20 + 1);
          *((void *)a2 + 1) = v25;
        }
        *((_DWORD *)this + 11) |= 0x20u;
        if (v25 != (unsigned __int8 *)v13 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_39;
      case 4u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v18 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_47;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v19 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_55;
      case 6u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v20 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_63;
      default:
        int v12 = TagFallback & 7;
LABEL_22:
        if (v12 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 44);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  uint64_t v7 = *(unsigned int *)(v5 + 36);
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::ByteSize(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_29;
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 11);
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) == 0) {
      goto LABEL_11;
    }
  }
  int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v4 >= 0x80)
  {
    int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v5 = 2;
  }
  uint64_t v3 = (v5 + v3);
LABEL_11:
  if ((v2 & 4) != 0)
  {
    uint64_t v3 = v3
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 2))
       + 1;
    int v2 = *((_DWORD *)this + 11);
    if ((v2 & 8) == 0)
    {
LABEL_13:
      if ((v2 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_13;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v3 = (v7 + v3);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_25;
  }
LABEL_21:
  unint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v9 = 2;
  }
  uint64_t v3 = (v9 + v3);
  if ((v2 & 0x20) != 0)
  {
LABEL_25:
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v10 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
    }
    else {
      int v11 = 2;
    }
    uint64_t v3 = (v11 + v3);
  }
LABEL_29:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::commCenterIMSSignallingDeferral::CheckTypeAndMergeFrom(awd::metrics::commCenterIMSSignallingDeferral *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *((unsigned char *)lpsrc + 44);
  if (!(_BYTE)v4) {
    return;
  }
  if (*((unsigned char *)lpsrc + 44))
  {
    uint64_t v6 = *((void *)lpsrc + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((void *)this + 1) = v6;
    int v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)lpsrc + 44) & 2) == 0)
  {
    goto LABEL_7;
  }
  int v7 = *((_DWORD *)lpsrc + 6);
  *((_DWORD *)this + 11) |= 2u;
  *((_DWORD *)this + 6) = v7;
  int v4 = *((_DWORD *)lpsrc + 11);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_16:
    int v9 = *((_DWORD *)lpsrc + 7);
    *((_DWORD *)this + 11) |= 8u;
    *((_DWORD *)this + 7) = v9;
    int v4 = *((_DWORD *)lpsrc + 11);
    if ((v4 & 0x10) == 0)
    {
LABEL_10:
      if ((v4 & 0x20) == 0) {
        return;
      }
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v8 = *((void *)lpsrc + 2);
  *((_DWORD *)this + 11) |= 4u;
  *((void *)this + 2) = v8;
  int v4 = *((_DWORD *)lpsrc + 11);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_9:
  if ((v4 & 0x10) == 0) {
    goto LABEL_10;
  }
LABEL_17:
  int v10 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 11) |= 0x10u;
  *((_DWORD *)this + 8) = v10;
  if ((*((_DWORD *)lpsrc + 11) & 0x20) != 0)
  {
LABEL_11:
    int v5 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 11) |= 0x20u;
    *((_DWORD *)this + 9) = v5;
  }
}

void sub_1C52849B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::IsInitialized(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  return 1;
}

void *awd::metrics::commCenterIMSSignallingDeferral::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.commCenterIMSSignallingDeferral");
}

void awd::metrics::LBRSessionStatistics::~LBRSessionStatistics(awd::metrics::LBRSessionStatistics *this)
{
  *(void *)this = &unk_1F20BA800;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 2));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20BA800;
  awd::metrics::BchannelTransmitStatistics::SharedDtor(*((void *)this + 2));
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  JUMPOUT(0x1C878E320);
}

void awd::metrics::LBRSessionStatistics::New(awd::metrics::LBRSessionStatistics *this)
{
}

uint64_t awd::metrics::LBRSessionStatistics::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 64);
  if ((_BYTE)v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(void *)(this + 24) = 0;
    *(void *)(this + 32) = 0;
    *(void *)(this + 40) = 0;
    int v1 = *(_DWORD *)(this + 64);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(this + 48) = 0;
    *(_DWORD *)(this + 56) = 0;
  }
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t awd::metrics::LBRSessionStatistics::MergePartialFromCodedStream(awd::metrics::LBRSessionStatistics *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        int v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v10 < v9 && (*v10 & 0x80000000) == 0)
        {
          *int v4 = *v10;
          int v11 = v10 + 1;
          *((void *)a2 + 1) = v11;
LABEL_38:
          int v12 = *((_DWORD *)this + 16) | 1;
          *((_DWORD *)this + 16) = v12;
          if ((unint64_t)v11 < v9 && *v11 == 18)
          {
            *((void *)a2 + 1) = v11 + 1;
            goto LABEL_41;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          int v11 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          goto LABEL_38;
        }
        break;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_32;
        }
        int v12 = *((_DWORD *)this + 16);
LABEL_41:
        *((_DWORD *)this + 16) = v12 | 2;
        if (*((void *)this + 2) == v5) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v24 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v24 >= v13 || *v24 != 24) {
          continue;
        }
        uint64_t v14 = v24 + 1;
        *((void *)a2 + 1) = v14;
LABEL_47:
        unsigned int v44 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v25 = v44;
        }
        else
        {
          unsigned int v25 = *v14;
          *((void *)a2 + 1) = v14 + 1;
        }
        if (v25 <= 4)
        {
          *((_DWORD *)this + 16) |= 4u;
          *((_DWORD *)this + 6) = v25;
        }
        char v26 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        if ((unint64_t)v26 >= v15 || *v26 != 32) {
          continue;
        }
        char v16 = v26 + 1;
        *((void *)a2 + 1) = v16;
LABEL_57:
        unsigned int v44 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v27 = v44;
          unint64_t v28 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v27 = *v16;
          unint64_t v28 = v16 + 1;
          *((void *)a2 + 1) = v28;
        }
        *((_DWORD *)this + 7) = v27;
        *((_DWORD *)this + 16) |= 8u;
        if ((unint64_t)v28 >= v15 || *v28 != 40) {
          continue;
        }
        uint64_t v17 = v28 + 1;
        *((void *)a2 + 1) = v17;
LABEL_65:
        unsigned int v44 = 0;
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v29 = v44;
          uint64_t v30 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v29 = *v17;
          uint64_t v30 = v17 + 1;
          *((void *)a2 + 1) = v30;
        }
        *((_DWORD *)this + 8) = v29;
        *((_DWORD *)this + 16) |= 0x10u;
        if ((unint64_t)v30 >= v15 || *v30 != 48) {
          continue;
        }
        unint64_t v18 = v30 + 1;
        *((void *)a2 + 1) = v18;
LABEL_73:
        unsigned int v44 = 0;
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v31 = v44;
          char v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v31 = *v18;
          char v32 = v18 + 1;
          *((void *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 9) = v31;
        *((_DWORD *)this + 16) |= 0x20u;
        if ((unint64_t)v32 >= v15 || *v32 != 56) {
          continue;
        }
        int v19 = v32 + 1;
        *((void *)a2 + 1) = v19;
LABEL_81:
        unsigned int v44 = 0;
        if ((unint64_t)v19 >= v15 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v33 = v44;
          unint64_t v34 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v33 = *v19;
          unint64_t v34 = v19 + 1;
          *((void *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 10) = v33;
        *((_DWORD *)this + 16) |= 0x40u;
        if ((unint64_t)v34 >= v15 || *v34 != 64) {
          continue;
        }
        unsigned int v20 = v34 + 1;
        *((void *)a2 + 1) = v20;
LABEL_89:
        unsigned int v44 = 0;
        if ((unint64_t)v20 >= v15 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v35 = v44;
          unsigned int v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v35 = *v20;
          unsigned int v36 = v20 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 11) = v35;
        *((_DWORD *)this + 16) |= 0x80u;
        if ((unint64_t)v36 >= v15 || *v36 != 72) {
          continue;
        }
        int v21 = v36 + 1;
        *((void *)a2 + 1) = v21;
LABEL_97:
        unsigned int v44 = 0;
        if ((unint64_t)v21 >= v15 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v37 = v44;
          int v38 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v37 = *v21;
          int v38 = v21 + 1;
          *((void *)a2 + 1) = v38;
        }
        *((_DWORD *)this + 12) = v37;
        *((_DWORD *)this + 16) |= 0x100u;
        if ((unint64_t)v38 >= v15 || *v38 != 80) {
          continue;
        }
        int v22 = v38 + 1;
        *((void *)a2 + 1) = v22;
LABEL_105:
        unsigned int v44 = 0;
        if ((unint64_t)v22 >= v15 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v39 = v44;
          int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v39 = *v22;
          int v40 = v22 + 1;
          *((void *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 13) = v39;
        *((_DWORD *)this + 16) |= 0x200u;
        if ((unint64_t)v40 >= v15 || *v40 != 88) {
          continue;
        }
        int v23 = v40 + 1;
        *((void *)a2 + 1) = v23;
LABEL_113:
        unsigned int v44 = 0;
        if ((unint64_t)v23 >= v15 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
          if (!result) {
            return result;
          }
          unsigned int v41 = v44;
          int v42 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v15 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v41 = *v23;
          int v42 = (unsigned __int8 *)(v23 + 1);
          *((void *)a2 + 1) = v42;
        }
        *((_DWORD *)this + 14) = v41;
        *((_DWORD *)this + 16) |= 0x400u;
        if (v42 != (unsigned __int8 *)v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_47;
      case 4u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        char v16 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_57;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        uint64_t v17 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_65;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        unint64_t v18 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_73;
      case 7u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        int v19 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_81;
      case 8u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        unsigned int v20 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_89;
      case 9u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        int v21 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_97;
      case 0xAu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_105;
      case 0xBu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_113;
      default:
        int v8 = TagFallback & 7;
LABEL_32:
        if (v8 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::LBRSessionStatistics::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 64);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  unsigned int v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[6], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[7], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[8], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[9], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[10], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[11], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[13], (uint64_t)a2, a4);
    if ((v5[16] & 0x400) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[12], (uint64_t)a2, a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x200) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v6 & 0x400) == 0) {
    return this;
  }
LABEL_23:
  uint64_t v7 = v5[14];
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::LBRSessionStatistics::ByteSize(awd::metrics::LBRSessionStatistics *this)
{
  int v2 = *((_DWORD *)this + 16);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_59;
  }
  if (v2)
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 16);
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *((_DWORD *)this + 16);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  uint64_t v3 = (v3 + v9 + v5 + 1);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 10;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      int v2 = *((_DWORD *)this + 16);
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v11 + 1);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if ((v12 & 0x80000000) != 0)
  {
    int v13 = 10;
  }
  else if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    int v2 = *((_DWORD *)this + 16);
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v3 = (v3 + v13 + 1);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_35:
  uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if ((v14 & 0x80000000) != 0)
  {
    int v15 = 10;
  }
  else if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    int v2 = *((_DWORD *)this + 16);
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v3 = (v3 + v15 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_41:
  char v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
  if ((v16 & 0x80000000) != 0)
  {
    int v17 = 11;
  }
  else if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    int v2 = *((_DWORD *)this + 16);
  }
  else
  {
    int v17 = 2;
  }
  uint64_t v3 = (v17 + v3);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
LABEL_47:
  unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if ((v18 & 0x80000000) != 0)
  {
    int v19 = 11;
  }
  else if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    int v2 = *((_DWORD *)this + 16);
  }
  else
  {
    int v19 = 2;
  }
  uint64_t v3 = (v19 + v3);
  if ((v2 & 0x80) != 0)
  {
LABEL_53:
    unsigned int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if ((v20 & 0x80000000) != 0)
    {
      int v21 = 11;
    }
    else if (v20 >= 0x80)
    {
      int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20) + 1;
      int v2 = *((_DWORD *)this + 16);
    }
    else
    {
      int v21 = 2;
    }
    uint64_t v3 = (v21 + v3);
  }
LABEL_59:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_82;
  }
  if ((v2 & 0x100) != 0)
  {
    int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v22 & 0x80000000) != 0)
    {
      int v23 = 11;
    }
    else if (v22 >= 0x80)
    {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22) + 1;
      int v2 = *((_DWORD *)this + 16);
    }
    else
    {
      int v23 = 2;
    }
    uint64_t v3 = (v23 + v3);
    if ((v2 & 0x200) == 0)
    {
LABEL_62:
      if ((v2 & 0x400) == 0) {
        goto LABEL_82;
      }
      goto LABEL_76;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_62;
  }
  unsigned int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if ((v24 & 0x80000000) != 0)
  {
    int v25 = 11;
  }
  else if (v24 >= 0x80)
  {
    int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24) + 1;
    int v2 = *((_DWORD *)this + 16);
  }
  else
  {
    int v25 = 2;
  }
  uint64_t v3 = (v25 + v3);
  if ((v2 & 0x400) != 0)
  {
LABEL_76:
    char v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if ((v26 & 0x80000000) != 0)
    {
      int v27 = 11;
    }
    else if (v26 >= 0x80)
    {
      int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26) + 1;
    }
    else
    {
      int v27 = 2;
    }
    uint64_t v3 = (v27 + v3);
  }
LABEL_82:
  *((_DWORD *)this + 15) = v3;
  return v3;
}

void awd::metrics::LBRSessionStatistics::CheckTypeAndMergeFrom(awd::metrics::LBRSessionStatistics *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  if (lpsrc == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  int v4 = *((_DWORD *)lpsrc + 16);
  if (!(_BYTE)v4) {
    goto LABEL_14;
  }
  if (v4)
  {
    uint64_t v7 = *((void *)lpsrc + 1);
    *((_DWORD *)this + 16) |= 1u;
    *((void *)this + 1) = v7;
    int v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  unint64_t v8 = (const std::string *)*((void *)lpsrc + 2);
  *((_DWORD *)this + 16) |= 2u;
  int v9 = (std::string *)*((void *)this + 2);
  if (v9 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v9, v8);
  int v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_24:
  unsigned int v10 = *((_DWORD *)lpsrc + 6);
  if (v10 >= 5) {
    __assert_rtn("set_sessionresult", "CATM.pb.h", 19996, "::awd::metrics::LBRSessionStatistics_SessionResult_IsValid(value)");
  }
  *((_DWORD *)this + 16) |= 4u;
  *((_DWORD *)this + 6) = v10;
  int v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v11 = *((_DWORD *)lpsrc + 7);
  *((_DWORD *)this + 16) |= 8u;
  *((_DWORD *)this + 7) = v11;
  int v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    int v13 = *((_DWORD *)lpsrc + 9);
    *((_DWORD *)this + 16) |= 0x20u;
    *((_DWORD *)this + 9) = v13;
    int v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 0x40) == 0)
    {
LABEL_12:
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  int v12 = *((_DWORD *)lpsrc + 8);
  *((_DWORD *)this + 16) |= 0x10u;
  *((_DWORD *)this + 8) = v12;
  int v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_29:
  int v14 = *((_DWORD *)lpsrc + 10);
  *((_DWORD *)this + 16) |= 0x40u;
  *((_DWORD *)this + 10) = v14;
  int v4 = *((_DWORD *)lpsrc + 16);
  if ((v4 & 0x80) != 0)
  {
LABEL_13:
    int v5 = *((_DWORD *)lpsrc + 11);
    *((_DWORD *)this + 16) |= 0x80u;
    *((_DWORD *)this + 11) = v5;
    int v4 = *((_DWORD *)lpsrc + 16);
  }
LABEL_14:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v15 = *((_DWORD *)lpsrc + 12);
    *((_DWORD *)this + 16) |= 0x100u;
    *((_DWORD *)this + 12) = v15;
    int v4 = *((_DWORD *)lpsrc + 16);
    if ((v4 & 0x200) == 0)
    {
LABEL_17:
      if ((v4 & 0x400) == 0) {
        return;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_17;
  }
  int v16 = *((_DWORD *)lpsrc + 13);
  *((_DWORD *)this + 16) |= 0x200u;
  *((_DWORD *)this + 13) = v16;
  if ((*((_DWORD *)lpsrc + 16) & 0x400) != 0)
  {
LABEL_18:
    int v6 = *((_DWORD *)lpsrc + 14);
    *((_DWORD *)this + 16) |= 0x400u;
    *((_DWORD *)this + 14) = v6;
  }
}

void sub_1C5285898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::LBRSessionStatistics::IsInitialized(awd::metrics::LBRSessionStatistics *this)
{
  return 1;
}

void *awd::metrics::LBRSessionStatistics::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "awd.metrics.LBRSessionStatistics");
}

uint64_t awd::metrics::ATM_Registration_Attempt::GetCachedSize(awd::metrics::ATM_Registration_Attempt *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t awd::metrics::ATM_Registration_Result::GetCachedSize(awd::metrics::ATM_Registration_Result *this)
{
  return *((unsigned int *)this + 52);
}

uint64_t awd::metrics::ATM_CallAttemptEvent::GetCachedSize(awd::metrics::ATM_CallAttemptEvent *this)
{
  return *((unsigned int *)this + 65);
}

uint64_t awd::metrics::ATM_CallConnectEvent::GetCachedSize(awd::metrics::ATM_CallConnectEvent *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t awd::metrics::ATM_CallEndEvent_myreason::GetCachedSize(awd::metrics::ATM_CallEndEvent_myreason *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t awd::metrics::ATM_CallEndEvent_handover::GetCachedSize(awd::metrics::ATM_CallEndEvent_handover *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::ATM_CallEndEvent::GetCachedSize(awd::metrics::ATM_CallEndEvent *this)
{
  return *((unsigned int *)this + 167);
}

uint64_t awd::metrics::BchannelTransmitStatistics::GetCachedSize(awd::metrics::BchannelTransmitStatistics *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t awd::metrics::BchannelReceiveStatistics::GetCachedSize(awd::metrics::BchannelReceiveStatistics *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetCachedSize(awd::metrics::Local_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock::GetCachedSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_StatisticsSummaryReportBlock *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetCachedSize(awd::metrics::Local_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock::GetCachedSize(awd::metrics::Remote_SoundUMB_Dchannel_XR_VoIPMetricsReportBlock *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t awd::metrics::MetricATM_SoundUMB_State::GetCachedSize(awd::metrics::MetricATM_SoundUMB_State *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::ATM_signaling_message::GetCachedSize(awd::metrics::ATM_signaling_message *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::conference_call_event::GetCachedSize(awd::metrics::conference_call_event *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::commCenterIMSSignallingDeferral::GetCachedSize(awd::metrics::commCenterIMSSignallingDeferral *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::LBRSessionStatistics::GetCachedSize(awd::metrics::LBRSessionStatistics *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Clear<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v1 = 0;
    do
    {
      uint64_t v2 = *(void *)(*(void *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v2 = 0;
        *(unsigned char *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int *a1)
{
  if (a1[3] >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
      ++v2;
    }
    while (v2 < a1[3]);
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    JUMPOUT(0x1C878E300);
  }
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Destroy<wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::ATM_CallEndEvent_myreason>::TypeHandler>(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  uint64_t result = *a1;
  if (*a1)
  {
    JUMPOUT(0x1C878E300);
  }
  return result;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    uint64_t v3 = result;
    int v4 = 2 * v2;
    if (v4 <= a2) {
      int v4 = a2;
    }
    if (v4 <= 4) {
      int v5 = 4;
    }
    else {
      int v5 = v4;
    }
    *(_DWORD *)(v3 + 12) = v5;
    operator new[]();
  }
  return result;
}

void _GLOBAL__sub_I_CATM_pb_cc(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((_MergedGlobals_2 & 1) == 0)
  {
    LOBYTE(_MergedGlobals_2) = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ipTelephony/Source/Daemon/Core/AWD/cpp/CATM.pb.cc", a4);
    operator new();
  }
}

uint64_t logBytes@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      *(_DWORD *)((char *)v10 + *(void *)(*(void *)&v10[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v10
                                                                                        + *(void *)(*(void *)&v10[0] - 24)
                                                                                        + 8) & 0xFFFFFFB5 | 8;
      char v9 = 48;
      int v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, &v9);
      *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
      uint64_t v7 = (void *)std::ostream::operator<<();
      v16[0] = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v16, 1);
      ++v4;
    }
    while (v4 != v5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v14);
}

void sub_1C5286388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void SDPBandwidth::toStream(SDPBandwidth *this, ImsOutStream *a2, int a3)
{
  int v6 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 98;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v7 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&SDPBandwidth::bwTypeLookup + *((unsigned int *)this + 3));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  unint64_t v8 = (void *)*((void *)a2 + 1);
  char v10 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
  *((unsigned char *)a2 + 17) = 0;
  SDPBandwidth::bandwidth(this, a3);
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C52864A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SDPBandwidth::bandwidth(SDPBandwidth *this, int a2)
{
  int v2 = *((_DWORD *)this + 3);
  if ((v2 - 3) > 1) {
    return *((void *)this + 3);
  }
  if (!*((unsigned char *)this + 16)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 8);
  if (v3 == 1 && a2 == 0) {
    return 0;
  }
  if (v3 == 2) {
    return *((void *)this + 3);
  }
  if (v2 == 3)
  {
    double v7 = 0.0125;
    goto LABEL_14;
  }
  double v6 = 0.0;
  if (v2 == 4)
  {
    double v7 = 0.0375;
LABEL_14:
    double v6 = v7 * (double)(200 * *((unsigned __int16 *)this + 18));
  }
  return (unint64_t)(v6 * (double)*((unint64_t *)this + 3));
}

void SDPBandwidth::~SDPBandwidth(SDPBandwidth *this)
{
}

void LazuliParameterHeader::LazuliParameterHeader(LazuliParameterHeader *this, const LazuliParameterHeader *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20D7EA8;
  uint64_t v4 = (std::string *)((char *)this + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *(void *)this = &unk_1F20BAA80;
  *((void *)this + 7) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 8, *((void ***)a2 + 8), (void **)a2 + 9);
  *((unsigned char *)this + 89) = 1;
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
}

void sub_1C528664C(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type LazuliParameterHeader::findParameterMarker(int a1, std::string *this)
{
  return std::string::find(this, 59, 0);
}

uint64_t LazuliParameterHeader::valueAndParamsAsString(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (v1)
  {
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v3);
  }
  return v1;
}

void sub_1C52867B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

ImsOutStream *LazuliParameterHeader::encode(const std::string *this, ImsOutStream *a2)
{
  LazuliHeader::encode(this, a2);
  return SipParameterMap::toStream((SipParameterMap *)&this[2].__r_.__value_.__r.__words[1], a2, 0, 0, 0, 0);
}

uint64_t LazuliParameterHeader::decode(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  memset(&__p, 0, sizeof(__p));
  memset(&__str, 0, sizeof(__str));
  if (v4 == -1)
  {
    std::string::operator=(&__p, a2);
  }
  else
  {
    std::string::size_type v5 = v4;
    std::string::basic_string(&v9, a2, 0, v4, (std::allocator<char> *)&v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v9;
    std::string::basic_string(&v9, a2, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    std::string __str = v9;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 48))(a1, &__p);
  if (v6)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      SipParameterMap::fromString(a1 + 56, &__str, 0, 0);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C52869A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::weak_ptr<WakeOnWifiAssertion>::~weak_ptr(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void WakeOnWifiAssertion::~WakeOnWifiAssertion(WakeOnWifiAssertion *this)
{
  *(void *)this = &unk_1F20BAB08;
  if (*((void *)this + 13))
  {
    WiFiManagerClientSetWoWState();
    CFRelease(*((CFTypeRef *)this + 13));
    *((void *)this + 13) = 0;
    uint64_t v2 = (*(uint64_t (**)(WakeOnWifiAssertion *))(*(void *)this + 64))(this);
    (*(void (**)(WakeOnWifiAssertion *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Disabled wake on wifi", 21);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  WakeOnWifiAssertion::~WakeOnWifiAssertion(this);
  JUMPOUT(0x1C878E320);
}

void WakeOnWifiAssertion::get(WakeOnWifiAssertion *this@<X0>, char **a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_3, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &WakeOnWifiAssertion::get(void)::creationMutex, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_3);
  }
  std::mutex::lock(&WakeOnWifiAssertion::get(void)::creationMutex);
  *a2 = 0;
  a2[1] = 0;
  if (qword_1EBBDBD48)
  {
    int v3 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EBBDBD48);
    a2[1] = (char *)v3;
    if (v3)
    {
      uint64_t v4 = qword_1EBBDBD40;
      *a2 = (char *)qword_1EBBDBD40;
      if (v4)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Wake on wifi has ", 17);
        *(unsigned char *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" holders", 8);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        goto LABEL_15;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  uint64_t v6 = (char *)operator new(0x88uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F20BAB80;
  *(_OWORD *)(v6 + 24) = 0u;
  double v7 = v6 + 24;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.wow");
  ImsLogContainer::ImsLogContainer((uint64_t)(v6 + 24), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1F20BAB08;
  *((void *)v6 + 16) = 0;
  uint64_t v8 = WiFiManagerClientCreate();
  *((void *)v6 + 16) = v8;
  if (v8)
  {
    WiFiManagerClientSetWoWState();
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v7 + 64))(v7);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Enabled wake on wifi", 20);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v7 + 56))(v7);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Failed to enable wake on wifi", 29);
  }
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  *((void *)v6 + 3) = &unk_1F20BABD0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 2, 1uLL, memory_order_relaxed);
  char v10 = (std::__shared_weak_count *)qword_1EBBDBD48;
  qword_1EBBDBD40 = (uint64_t)(v6 + 24);
  qword_1EBBDBD48 = (uint64_t)v6;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *a2 = v7;
  a2[1] = v6;
LABEL_15:
  std::mutex::unlock(&WakeOnWifiAssertion::get(void)::creationMutex);
}

void sub_1C5286FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  std::mutex::unlock(&WakeOnWifiAssertion::get(void)::creationMutex);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BAB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BAB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper,std::allocator<WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void WakeOnWifiAssertion::get(void)::WakeOnWifiAssertionWrapper::~WakeOnWifiAssertionWrapper(WakeOnWifiAssertion *a1)
{
  WakeOnWifiAssertion::~WakeOnWifiAssertion(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_WakeOnWifiAssertion_cpp()
{
  return __cxa_atexit((void (*)(void *))std::weak_ptr<WakeOnWifiAssertion>::~weak_ptr, &qword_1EBBDBD40, &dword_1C51D1000);
}

uint64_t isPhoneNumber(unsigned __int8 *a1)
{
  char v1 = a1[23];
  if (v1 < 0)
  {
    if (!*((void *)a1 + 1))
    {
LABEL_14:
      char v1 = 0;
      return v1 & 1;
    }
    uint64_t v2 = *(unsigned char **)a1;
  }
  else
  {
    uint64_t v2 = a1;
    if (!a1[23]) {
      return v1 & 1;
    }
  }
  if (*v2 == 43 || (v1 >= 0 ? (unint64_t v3 = a1[23]) : (unint64_t v3 = *((void *)a1 + 1)), !v3))
  {
    char v1 = 1;
    return v1 & 1;
  }
  uint64_t v4 = *(unsigned __int8 **)a1;
  if (v1 >= 0) {
    uint64_t v4 = a1;
  }
  if (*v4 - 97 < 0x1A) {
    goto LABEL_14;
  }
  uint64_t v6 = 0;
  char v1 = 0;
  do
  {
    if (v4[v6] - 65 < 0x1A) {
      break;
    }
    char v1 = v6 + 1 >= v3;
    if (v3 - 1 == v6) {
      break;
    }
    unsigned int v7 = v4[++v6] - 97;
  }
  while (v7 >= 0x1A);
  return v1 & 1;
}

BOOL SipUri::isBarred(SipUri *this)
{
  BOOL result = SipUri::isSipUri(this);
  if (result)
  {
    unint64_t v3 = (void *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      uint64_t v4 = *((void *)this + 3);
      if (!v4) {
        return 0;
      }
      unint64_t v3 = (void *)*v3;
    }
    else
    {
      uint64_t v4 = *((unsigned __int8 *)this + 39);
      if (!*((unsigned char *)this + 39)) {
        return 0;
      }
    }
    uint64_t v5 = (char *)v3 + v4;
    if (v4 >= 15)
    {
      uint64_t v6 = v3;
      do
      {
        unsigned int v7 = (char *)memchr(v6, 51, v4 - 14);
        if (!v7) {
          break;
        }
        if (*(void *)v7 == 0x7774656E70706733 && *(void *)(v7 + 7) == 0x67726F2E6B726F77) {
          return v7 != v5 && v7 - (char *)v3 != -1;
        }
        uint64_t v6 = v7 + 1;
        uint64_t v4 = v5 - (unsigned char *)v6;
      }
      while (v5 - (unsigned char *)v6 > 14);
    }
    unsigned int v7 = v5;
    return v7 != v5 && v7 - (char *)v3 != -1;
  }
  return result;
}

BOOL SipUri::isSipUri(SipUri *this)
{
  SipUri::guessScheme(this, &__p);
  BOOL v1 = isSipScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

BOOL isSipScheme(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v1 == 4)
  {
    if (v2 >= 0) {
      unsigned int v7 = a1;
    }
    else {
      unsigned int v7 = *(_DWORD **)a1;
    }
    return *v7 == 1936746867;
  }
  else
  {
    if (v1 != 3) {
      return 0;
    }
    if (v2 >= 0) {
      unint64_t v3 = a1;
    }
    else {
      unint64_t v3 = *(unsigned __int16 **)a1;
    }
    int v4 = *v3;
    int v5 = *((unsigned __int8 *)v3 + 2);
    return v4 == 26995 && v5 == 112;
  }
}

void SipUri::guessScheme(SipUri *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (const std::string::value_type **)((char *)this + 104);
  if (*((char *)this + 127) < 0)
  {
    std::string::size_type v3 = *((void *)this + 14);
    if (v3)
    {
      std::string::__init_copy_ctor_external(a2, *v2, v3);
      return;
    }
  }
  else if (*((unsigned char *)this + 127))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
    return;
  }
  if (*((unsigned char *)this + 320))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (*((char *)this + 199) < 0)
  {
    if (*((void *)this + 23)) {
      goto LABEL_10;
    }
LABEL_12:
    int v4 = "sip";
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 199)) {
    goto LABEL_12;
  }
LABEL_10:
  int v4 = "tel";
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

BOOL SipUri::isTelUri(SipUri *this)
{
  SipUri::guessScheme(this, &__p);
  BOOL v1 = isTelScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

BOOL isTelScheme(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v1 != 3) {
    return 0;
  }
  if (v2 >= 0) {
    std::string::size_type v3 = a1;
  }
  else {
    std::string::size_type v3 = *(unsigned __int16 **)a1;
  }
  int v4 = *v3;
  int v5 = *((unsigned __int8 *)v3 + 2);
  return v4 == 25972 && v5 == 108;
}

BOOL SipUri::isUrn(SipUri *this)
{
  SipUri::guessScheme(this, &__p);
  BOOL v1 = isUrnScheme((unsigned __int16 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

BOOL isUrnScheme(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v1 != 3) {
    return 0;
  }
  if (v2 >= 0) {
    std::string::size_type v3 = a1;
  }
  else {
    std::string::size_type v3 = *(unsigned __int16 **)a1;
  }
  int v4 = *v3;
  int v5 = *((unsigned __int8 *)v3 + 2);
  return v4 == 29301 && v5 == 110;
}

BOOL SipUri::isEmergencyUrn(SipUri *this)
{
  if (!SipUri::isUrn(this)) {
    return 0;
  }
  uint64_t v2 = *((unsigned __int8 *)this + 247);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)this + 29);
  }
  if (v2 != 7) {
    return 0;
  }
  int v4 = v3 >= 0 ? (SipUri *)((char *)this + 224) : (SipUri *)*((void *)this + 28);
  int v5 = *(_DWORD *)v4;
  int v6 = *(_DWORD *)((char *)v4 + 3);
  if (v5 != 1987208563 || v6 != 1701013878) {
    return 0;
  }
  std::string::basic_string(&__p, (const std::string *)((char *)this + 248), 0, 3uLL, (std::allocator<char> *)&v16);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size != 3)
  {
    BOOL v8 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v8;
    }
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
    return v8;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  int data_low = LOWORD(p_p->__r_.__value_.__l.__data_);
  int v13 = p_p->__r_.__value_.__s.__data_[2];
  BOOL v8 = data_low == 28531 && v13 == 115;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
  return v8;
}

uint64_t SipUri::getEmergencySubservice(SipUri *this)
{
  char v2 = *((unsigned char *)this + 295);
  if (v2 < 0)
  {
    if (*((void *)this + 35)) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*((unsigned char *)this + 295)) {
    return 0;
  }
LABEL_3:
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 295);
  }
  else {
    uint64_t v3 = *((void *)this + 35);
  }
  uint64_t result = 6;
  int v5 = (char *)this + 272;
  switch(v3)
  {
    case 4:
      if (v2 < 0) {
        int v5 = *(char **)v5;
      }
      BOOL v6 = *(_DWORD *)v5 == 1701996902;
      unsigned int v7 = 3;
      goto LABEL_30;
    case 6:
      if (v2 < 0) {
        int v5 = *(char **)v5;
      }
      if (*(_DWORD *)v5 == 1768714096 && *((_WORD *)v5 + 2) == 25955)
      {
        uint64_t result = 1;
      }
      else
      {
        BOOL v6 = (*(_DWORD *)v5 ^ 0x6972616D | *((unsigned __int16 *)v5 + 2) ^ 0x656E) == 0;
        unsigned int v7 = 4;
LABEL_30:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 6;
        }
      }
      break;
    case 8:
      if (v2 < 0) {
        int v5 = *(char **)v5;
      }
      unint64_t v9 = bswap64(*(void *)v5);
      BOOL v10 = v9 >= 0x6D6F756E7461696ELL;
      int v11 = v9 > 0x6D6F756E7461696ELL;
      int v12 = !v10;
      if (v11 == v12) {
        return 5;
      }
      else {
        return 6;
      }
    case 9:
      if (v2 < 0) {
        int v5 = *(char **)v5;
      }
      BOOL v6 = (*(void *)v5 ^ 0x636E616C75626D61 | v5[8] ^ 0x65) == 0;
      unsigned int v7 = 2;
      goto LABEL_30;
    default:
      return result;
  }
  return result;
}

void SipUri::setNamespaceStr(uint64_t a1, const std::string *a2)
{
  SipUri::makeUrn((SipUri *)a1);
  std::string::operator=((std::string *)(a1 + 248), a2);
  std::string::size_type v4 = std::string::find((const std::string *)(a1 + 248), 46, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 295) < 0)
    {
      **(unsigned char **)(a1 + 272) = 0;
      *(void *)(a1 + 280) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 272) = 0;
      *(unsigned char *)(a1 + 295) = 0;
    }
  }
  else
  {
    std::string::basic_string(&v6, (const std::string *)(a1 + 248), v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
    int v5 = (void **)(a1 + 272);
    if (*(char *)(a1 + 295) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)int v5 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    *(void *)(a1 + 288) = *((void *)&v6.__r_.__value_.__l + 2);
  }
}

void SipUri::SipUri(SipUri *this)
{
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 1) = &unk_1F20CA780;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 8) = &unk_1F20B37B0;
  *((void *)this + 9) = (char *)this + 80;
  *((unsigned char *)this + 97) = 1;
  *(void *)this = &unk_1F20BAC60;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 39) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 41) = &unk_1F20B37B0;
  *((void *)this + 42) = (char *)this + 344;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = &unk_1F20B37B0;
  *((void *)this + 47) = (char *)this + 384;
  *((unsigned char *)this + 96) = 1;
  *((_WORD *)this + 180) = 257;
  *((_WORD *)this + 200) = 257;
  *((unsigned char *)this + 320) = 0;
}

uint64_t SipUri::SipUri(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = &unk_1F20CA780;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = &unk_1F20B37B0;
  *(void *)(a1 + 72) = a1 + 80;
  *(unsigned char *)(a1 + 97) = 1;
  *(void *)a1 = &unk_1F20BAC60;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 328) = &unk_1F20B37B0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 368) = &unk_1F20B37B0;
  *(void *)(a1 + 376) = a1 + 384;
  *(unsigned char *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 360) = 257;
  *(_WORD *)(a1 + 400) = 257;
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  SipHost::SipHost((uint64_t)v4, a2);
  (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 32))(a1, v4);
  SipHost::~SipHost((SipHost *)v4);
  return a1;
}

void sub_1C5287B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BOOL v8 = v4;
  SipHost::~SipHost((SipHost *)va);
  *(void *)(v3 + 368) = v6;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 376, *(void **)(v3 + 384));
  *(void *)(v3 + 328) = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 336, *(void **)(v3 + 344));
  if (*(char *)(v3 + 319) < 0) {
    operator delete(*(void **)(v3 + 296));
  }
  if (*(char *)(v3 + 295) < 0) {
    operator delete(*(void **)(v3 + 272));
  }
  if (*(char *)(v3 + 271) < 0) {
    operator delete(*(void **)(v3 + 248));
  }
  if (*(char *)(v3 + 247) < 0) {
    operator delete(*(void **)(v3 + 224));
  }
  if (*(char *)(v3 + 223) < 0) {
    operator delete(*(void **)(v3 + 200));
  }
  if (*(char *)(v3 + 199) < 0) {
    operator delete(*(void **)(v3 + 176));
  }
  if (*(char *)(v3 + 175) < 0) {
    operator delete(*(void **)(v3 + 152));
  }
  if (*(char *)(v3 + 151) < 0) {
    operator delete(*(void **)(v3 + 128));
  }
  if (*(char *)(v3 + 127) < 0) {
    operator delete(*v8);
  }
  SipHop::~SipHop((SipHop *)v3);
  _Unwind_Resume(a1);
}

uint64_t SipUri::SipUri(uint64_t a1, std::string *a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = &unk_1F20CA780;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = &unk_1F20B37B0;
  *(void *)(a1 + 72) = a1 + 80;
  *(unsigned char *)(a1 + 97) = 1;
  *(void *)a1 = &unk_1F20BAC60;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 328) = &unk_1F20B37B0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 368) = &unk_1F20B37B0;
  *(void *)(a1 + 376) = a1 + 384;
  *(unsigned char *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 360) = 257;
  *(_WORD *)(a1 + 400) = 257;
  *(unsigned char *)(a1 + 320) = 0;
  SipUri::fromString(a1, a2);
  return a1;
}

void sub_1C5287DA8(_Unwind_Exception *a1)
{
  uint64_t v7 = v2;
  *(void *)(v1 + 368) = v4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v1 + 384));
  *(void *)(v1 + 328) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v1 + 344));
  if (*(char *)(v1 + 319) < 0) {
    operator delete(*(void **)(v1 + 296));
  }
  if (*(char *)(v1 + 295) < 0) {
    operator delete(*(void **)(v1 + 272));
  }
  if (*(char *)(v1 + 271) < 0) {
    operator delete(*(void **)(v1 + 248));
  }
  if (*(char *)(v1 + 247) < 0) {
    operator delete(*(void **)(v1 + 224));
  }
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*(void **)(v1 + 200));
  }
  if (*(char *)(v1 + 199) < 0) {
    operator delete(*(void **)(v1 + 176));
  }
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*(void **)(v1 + 128));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v6);
  }
  SipHop::~SipHop((SipHop *)v1);
  _Unwind_Resume(a1);
}

uint64_t SipUri::fromString(uint64_t a1, std::string *a2)
{
  SipUri::clear((SipUri *)a1);
  std::string::size_type v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  if (!v6) {
    return 0;
  }
  if ((v4 & 0x80) == 0)
  {
    if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
    {
      memset(&__str, 0, sizeof(__str));
      int v7 = a2->__r_.__value_.__s.__data_[0];
      std::string::size_type v8 = v4;
      goto LABEL_10;
    }
LABEL_14:
    std::string::size_type v10 = 0;
LABEL_52:
    std::string::size_type NotQuoted = ims::findNotQuoted((uint64_t *)a2, 0x3Cu);
    if (NotQuoted == -1)
    {
      std::string::size_type v24 = 0;
      goto LABEL_58;
    }
    std::string::size_type v21 = NotQuoted;
    std::string::size_type v22 = std::string::find(a2, 62, NotQuoted);
    if (v22 != -1)
    {
      std::string::size_type v10 = v22;
      std::string::basic_string(&__str, a2, 0, v21, (std::allocator<char> *)&v51);
      int v23 = (void **)(a1 + 200);
      if (*(char *)(a1 + 223) < 0) {
        operator delete(*v23);
      }
      *(_OWORD *)int v23 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(void *)(a1 + 216) = *((void *)&__str.__r_.__value_.__l + 2);
      ims::chomp((std::string *)(a1 + 200), "\r\n\t ", 3);
      std::string::size_type v24 = v21 + 1;
LABEL_58:
      std::string::size_type v25 = std::string::find(a2, 58, v24);
      if (v25 != -1)
      {
        std::string::size_type v26 = v25;
        std::string::basic_string(&v51, a2, v24, v25 - v24, (std::allocator<char> *)&v53);
        ims::lowerCase((uint64_t)&v51, &__str);
        int v27 = (void **)(a1 + 104);
        if (*(char *)(a1 + 127) < 0) {
          operator delete(*v27);
        }
        *(_OWORD *)int v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(a1 + 120) = *((void *)&__str.__r_.__value_.__l + 2);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (isSipScheme((unsigned __int16 *)(a1 + 104))
          || isTelScheme((unsigned __int16 *)(a1 + 104))
          || isUrnScheme((unsigned __int16 *)(a1 + 104)))
        {
          std::string::size_type v24 = v26 + 1;
        }
        else if (*(char *)(a1 + 127) < 0)
        {
          **(unsigned char **)(a1 + 104) = 0;
          *(void *)(a1 + 112) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 104) = 0;
          *(unsigned char *)(a1 + 127) = 0;
        }
      }
      unint64_t v28 = (_DWORD *)(a1 + 104);
      if (!isTelScheme((unsigned __int16 *)(a1 + 104)))
      {
        std::string::size_type v29 = std::string::find(a2, 64, v24);
        if (v29 != -1)
        {
          std::string::size_type v30 = v29;
          std::string::basic_string(&__str, a2, v24, v29 - v24, (std::allocator<char> *)&v51);
          unsigned int v31 = (void **)(a1 + 128);
          if (*(char *)(a1 + 151) < 0) {
            operator delete(*v31);
          }
          *(_OWORD *)unsigned int v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(void *)(a1 + 144) = *((void *)&__str.__r_.__value_.__l + 2);
          std::string::size_type v32 = std::string::find((const std::string *)(a1 + 128), 59, 0);
          if (v32 != -1)
          {
            std::string::size_type v33 = v32;
            memset(&__str, 0, sizeof(__str));
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), v32 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v51);
            SipParameterMap::fromString(a1 + 368, &__str, 0, 0);
            std::string::basic_string(&v51, (const std::string *)(a1 + 128), 0, v33, (std::allocator<char> *)&v53);
            if (*(char *)(a1 + 151) < 0) {
              operator delete(*v31);
            }
            *(_OWORD *)unsigned int v31 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
            *(void *)(a1 + 144) = *((void *)&v51.__r_.__value_.__l + 2);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          std::string::size_type v34 = std::string::find((const std::string *)(a1 + 128), 58, 0);
          if (v34 != -1)
          {
            std::string::size_type v35 = v34;
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), v34 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v51);
            unsigned int v36 = (void **)(a1 + 152);
            if (*(char *)(a1 + 175) < 0) {
              operator delete(*v36);
            }
            *(_OWORD *)unsigned int v36 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(a1 + 168) = *((void *)&__str.__r_.__value_.__l + 2);
            std::string::basic_string(&__str, (const std::string *)(a1 + 128), 0, v35, (std::allocator<char> *)&v51);
            if (*(char *)(a1 + 151) < 0) {
              operator delete(*v31);
            }
            *(_OWORD *)unsigned int v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(a1 + 144) = *((void *)&__str.__r_.__value_.__l + 2);
            ims::removePercentEscapes(a1 + 152);
          }
          ims::removePercentEscapes(a1 + 128);
          std::string::size_type v24 = v30 + 1;
        }
      }
      std::string::size_type v37 = std::string::find(a2, 63, v24);
      std::string::size_type v38 = v37;
      if (v37 != -1)
      {
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string(&__str, a2, v37 + 1, v10 + ~v37, (std::allocator<char> *)&v51);
        SipParameterMap::fromString(a1 + 328, &__str, 0, 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type v10 = v38;
      }
      std::string::size_type v39 = std::string::find(a2, 59, v24);
      BOOL v41 = v38 == -1 || v39 < v38;
      if (v39 != -1 && v41)
      {
        std::string::size_type v42 = v39;
        std::string::basic_string(&__str, a2, v39 + 1, v10 + ~v39, (std::allocator<char> *)&v51);
        SipParameterMap::fromString(a1 + 64, &__str, 0, 0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string::size_type v10 = v42;
      }
      memset(&__str, 0, sizeof(__str));
      std::string::basic_string(&__str, a2, v24, v10 - v24, (std::allocator<char> *)&v51);
      int v43 = *(char *)(a1 + 127);
      if (v43 < 0)
      {
        if (*(void *)(a1 + 112))
        {
LABEL_100:
          if (isTelScheme((unsigned __int16 *)(a1 + 104)))
          {
            if (v43 < 0)
            {
              *(void *)(a1 + 112) = 3;
              unint64_t v28 = *(_DWORD **)(a1 + 104);
            }
            else
            {
              *(unsigned char *)(a1 + 127) = 3;
            }
LABEL_128:
            *unint64_t v28 = 7103860;
            int v49 = (std::string *)(a1 + 176);
            std::string::operator=(v49, &__str);
            ims::removePercentEscapes((uint64_t)v49);
            goto LABEL_137;
          }
          if ((v43 & 0x80000000) == 0)
          {
LABEL_108:
            *(unsigned char *)(a1 + 127) = 3;
LABEL_136:
            *unint64_t v28 = 7367027;
            SipHost::fromString(a1 + 8, &__str);
LABEL_137:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            return 1;
          }
LABEL_135:
          *(void *)(a1 + 112) = 3;
          unint64_t v28 = *(_DWORD **)(a1 + 104);
          goto LABEL_136;
        }
      }
      else if (*(unsigned char *)(a1 + 127))
      {
        goto LABEL_100;
      }
      uint64_t v44 = *(unsigned __int8 *)(a1 + 151);
      if (*(char *)(a1 + 151) < 0)
      {
        if (*(void *)(a1 + 136)) {
          goto LABEL_122;
        }
      }
      else if (*(unsigned char *)(a1 + 151))
      {
        goto LABEL_122;
      }
      std::string::size_type v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v47 = __str.__r_.__value_.__l.__size_;
      }
      if (v47 == 1)
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (p_str->__r_.__value_.__s.__data_[0] == 42)
        {
          *(unsigned char *)(a1 + 320) = 1;
          goto LABEL_137;
        }
      }
LABEL_122:
      if ((v44 & 0x80) != 0) {
        uint64_t v44 = *(void *)(a1 + 136);
      }
      if (!v44)
      {
        if (IpAddress::isAddress(&__str))
        {
          LOBYTE(v43) = *(unsigned char *)(a1 + 127);
        }
        else
        {
          int v50 = isPhoneNumber((unsigned __int8 *)&__str);
          int v43 = *(char *)(a1 + 127);
          if (v50)
          {
            if (v43 < 0)
            {
              *(void *)(a1 + 112) = 3;
              unint64_t v28 = *(_DWORD **)(a1 + 104);
            }
            else
            {
              *(unsigned char *)(a1 + 127) = 3;
            }
            goto LABEL_128;
          }
        }
      }
      if ((v43 & 0x80) == 0) {
        goto LABEL_108;
      }
      goto LABEL_135;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "sip.parse");
    std::string::basic_string[abi:ne180100]<0>(&v51, "");
    uint64_t v45 = ims::error((uint64_t)&__str, (uint64_t)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"URI has no closing '>': ", 24);
    *(unsigned char *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v45 + 32))(v45, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v45 + 17) = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if (!size) {
    goto LABEL_14;
  }
  memset(&__str, 0, sizeof(__str));
  int v7 = *(unsigned __int8 *)a2->__r_.__value_.__l.__data_;
  std::string::size_type v8 = size;
LABEL_10:
  if (v7 == 60)
  {
    std::string::size_type v9 = v8 - 1;
    if ((v4 & 0x80) != 0)
    {
      if (*(unsigned char *)(a2->__r_.__value_.__r.__words[0] + v9) != 62) {
        goto LABEL_44;
      }
    }
    else
    {
      if (a2->__r_.__value_.__s.__data_[v9] != 62) {
        goto LABEL_44;
      }
      std::string::size_type size = v4;
    }
    std::string::basic_string(&v51, a2, 1uLL, size - 2, (std::allocator<char> *)&v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v51;
  }
  else
  {
    std::string::operator=(&__str, a2);
  }
  std::string::basic_string(&v51, &__str, 0, 4uLL, (std::allocator<char> *)&v53);
  std::string::size_type v11 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v51.__r_.__value_.__l.__size_;
  }
  if (v11 != 4)
  {
    BOOL v13 = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  int v12 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v12 = &v51;
  }
  BOOL v13 = LODWORD(v12->__r_.__value_.__l.__data_) == 980316789;
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (v13) {
      goto LABEL_31;
    }
LABEL_44:
    char v17 = 0;
    goto LABEL_45;
  }
LABEL_30:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (!v13) {
    goto LABEL_44;
  }
LABEL_31:
  std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
  }
  if (v14 < 5) {
    goto LABEL_44;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &__str;
  }
  else {
    uint64_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  char v16 = memchr((char *)v15->__r_.__value_.__r.__words + 4, 58, v14 - 4);
  char v17 = 0;
  if (v16)
  {
    int64_t v18 = v16 - (unsigned char *)v15;
    if (v18 != -1)
    {
      SipUri::makeUrn((SipUri *)a1);
      std::string::basic_string(&v51, &__str, 4uLL, v18 - 4, (std::allocator<char> *)&v53);
      int v19 = (void **)(a1 + 224);
      if (*(char *)(a1 + 247) < 0) {
        operator delete(*v19);
      }
      *(_OWORD *)int v19 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      *(void *)(a1 + 240) = *((void *)&v51.__r_.__value_.__l + 2);
      std::string::basic_string(&v51, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v53);
      SipUri::setNamespaceStr(a1, &v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      char v17 = 1;
    }
  }
LABEL_45:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v17) {
      return 1;
    }
    goto LABEL_49;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((v17 & 1) == 0)
  {
LABEL_49:
    if ((*((unsigned char *)&a2->__r_.__value_.__s + 23) & 0x80) != 0) {
      std::string::size_type v10 = a2->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v10 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    goto LABEL_52;
  }
  return 1;
}

void sub_1C528875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void SipUri::SipUri(SipUri *this, const SipUri *a2)
{
  SipHop::SipHop(this, a2);
  *(void *)uint64_t v4 = &unk_1F20BAC60;
  *(_OWORD *)(v4 + 104) = 0u;
  uint64_t v5 = (std::string *)(v4 + 104);
  *(_OWORD *)(v4 + 152) = 0u;
  std::string::size_type v6 = (std::string *)(v4 + 152);
  *(_OWORD *)(v4 + 200) = 0u;
  int v7 = (std::string *)(v4 + 200);
  *(_OWORD *)(v4 + 248) = 0u;
  std::string::size_type v8 = (std::string *)(v4 + 248);
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  BOOL v13 = (std::string *)(v4 + 128);
  std::string::size_type v14 = (std::string *)(v4 + 176);
  *(_OWORD *)(v4 + 168) = 0u;
  std::string::size_type v9 = (std::string *)(v4 + 272);
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(void *)(v4 + 312) = 0;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  std::string::size_type v11 = (uint64_t **)(v4 + 336);
  int v12 = (std::string *)(v4 + 224);
  *(void *)(v4 + 344) = 0;
  *(void *)(v4 + 352) = 0;
  *(void *)(v4 + 328) = &unk_1F20B37B0;
  *(void *)(v4 + 336) = v4 + 344;
  *(_WORD *)(v4 + 360) = 256;
  std::string::size_type v10 = (uint64_t **)(v4 + 376);
  *(void *)(v4 + 384) = 0;
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 368) = &unk_1F20B37B0;
  *(void *)(v4 + 376) = v4 + 384;
  *(_WORD *)(v4 + 400) = 256;
  if ((const SipUri *)v4 == a2)
  {
    *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
    *((unsigned char *)this + 360) = *((unsigned char *)a2 + 360);
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 9, *((long long **)a2 + 9), (long long *)a2 + 5);
    *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v11, *((long long **)a2 + 42), (long long *)((char *)a2 + 344));
    *((unsigned char *)this + 360) = *((unsigned char *)a2 + 360);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v10, *((long long **)a2 + 47), (long long *)a2 + 24);
  }
  *((unsigned char *)this + 400) = *((unsigned char *)a2 + 400);
  std::string::operator=(v5, (const std::string *)((char *)a2 + 104));
  std::string::operator=(v14, (const std::string *)((char *)a2 + 176));
  std::string::operator=(v13, (const std::string *)((char *)a2 + 128));
  std::string::operator=(v6, (const std::string *)((char *)a2 + 152));
  std::string::operator=(v7, (const std::string *)((char *)a2 + 200));
  *((unsigned char *)this + 320) = *((unsigned char *)a2 + 320);
  std::string::operator=(v12, (const std::string *)((char *)a2 + 224));
  std::string::operator=(v8, (const std::string *)((char *)a2 + 248));
  std::string::operator=(v9, (const std::string *)((char *)a2 + 272));
}

void sub_1C52889D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  *(void *)(v12 + 368) = v18;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17, *(void **)(v12 + 384));
  *(void *)(v12 + 328) = v15;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a9, *(void **)(v12 + 344));
  if (*(char *)(v12 + 319) < 0) {
    operator delete(*(void **)(v12 + 296));
  }
  if (*(char *)(v12 + 295) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v12 + 271) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v12 + 247) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v12 + 223) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v12 + 199) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v12 + 175) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v12 + 151) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v12 + 127) < 0) {
    operator delete(*v13);
  }
  SipHop::~SipHop((SipHop *)v12);
  _Unwind_Resume(a1);
}

SipUri *SipUri::operator=(SipUri *this, uint64_t a2)
{
  if ((SipUri *)a2 != this)
  {
    SipUri::clear(this);
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)(a2 + 104));
    std::string::operator=((std::string *)((char *)this + 176), (const std::string *)(a2 + 176));
    std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(a2 + 128));
    std::string::operator=((std::string *)((char *)this + 152), (const std::string *)(a2 + 152));
    std::string::operator=((std::string *)((char *)this + 200), (const std::string *)(a2 + 200));
    SipHost::operator=((uint64_t)this + 8, a2 + 8);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 9, *(long long **)(a2 + 72), (long long *)(a2 + 80));
    *((unsigned char *)this + 96) = *(unsigned char *)(a2 + 96);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 42, *(long long **)(a2 + 336), (long long *)(a2 + 344));
    *((unsigned char *)this + 360) = *(unsigned char *)(a2 + 360);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 47, *(long long **)(a2 + 376), (long long *)(a2 + 384));
    *((unsigned char *)this + 400) = *(unsigned char *)(a2 + 400);
    *((unsigned char *)this + 320) = *(unsigned char *)(a2 + 320);
    std::string::operator=((std::string *)((char *)this + 224), (const std::string *)(a2 + 224));
    std::string::operator=((std::string *)((char *)this + 248), (const std::string *)(a2 + 248));
    std::string::operator=((std::string *)((char *)this + 272), (const std::string *)(a2 + 272));
  }
  return this;
}

void SipUri::clear(SipUri *this)
{
  if (*((char *)this + 127) < 0)
  {
    **((unsigned char **)this + 13) = 0;
    *((void *)this + 14) = 0;
  }
  else
  {
    *((unsigned char *)this + 104) = 0;
    *((unsigned char *)this + 127) = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    **((unsigned char **)this + 22) = 0;
    *((void *)this + 23) = 0;
  }
  else
  {
    *((unsigned char *)this + 176) = 0;
    *((unsigned char *)this + 199) = 0;
  }
  if (*((char *)this + 151) < 0)
  {
    **((unsigned char **)this + 16) = 0;
    *((void *)this + 17) = 0;
  }
  else
  {
    *((unsigned char *)this + 128) = 0;
    *((unsigned char *)this + 151) = 0;
  }
  if (*((char *)this + 175) < 0)
  {
    **((unsigned char **)this + 19) = 0;
    *((void *)this + 20) = 0;
  }
  else
  {
    *((unsigned char *)this + 152) = 0;
    *((unsigned char *)this + 175) = 0;
  }
  if (*((char *)this + 223) < 0)
  {
    **((unsigned char **)this + 25) = 0;
    *((void *)this + 26) = 0;
  }
  else
  {
    *((unsigned char *)this + 200) = 0;
    *((unsigned char *)this + 223) = 0;
  }
  SipHost::clear((SipUri *)((char *)this + 8));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = (char *)this + 384;
  if (*((char *)this + 247) < 0)
  {
    **((unsigned char **)this + 28) = 0;
    *((void *)this + 29) = 0;
  }
  else
  {
    *((unsigned char *)this + 224) = 0;
    *((unsigned char *)this + 247) = 0;
  }
  if (*((char *)this + 271) < 0)
  {
    **((unsigned char **)this + 31) = 0;
    *((void *)this + 32) = 0;
  }
  else
  {
    *((unsigned char *)this + 248) = 0;
    *((unsigned char *)this + 271) = 0;
  }
  if (*((char *)this + 295) < 0)
  {
    **((unsigned char **)this + 34) = 0;
    *((void *)this + 35) = 0;
  }
  else
  {
    *((unsigned char *)this + 272) = 0;
    *((unsigned char *)this + 295) = 0;
  }
  *((unsigned char *)this + 320) = 0;
}

uint64_t SipUri::makeSipUri(uint64_t this)
{
  if (*(char *)(this + 127) < 0)
  {
    *(void *)(this + 112) = 3;
    uint64_t v1 = *(_DWORD **)(this + 104);
  }
  else
  {
    uint64_t v1 = (_DWORD *)(this + 104);
    *(unsigned char *)(this + 127) = 3;
  }
  *uint64_t v1 = 7367027;
  if (*(char *)(this + 199) < 0)
  {
    **(unsigned char **)(this + 176) = 0;
    *(void *)(this + 184) = 0;
  }
  else
  {
    *(unsigned char *)(this + 176) = 0;
    *(unsigned char *)(this + 199) = 0;
  }
  if (*(char *)(this + 247) < 0)
  {
    **(unsigned char **)(this + 224) = 0;
    *(void *)(this + 232) = 0;
  }
  else
  {
    *(unsigned char *)(this + 224) = 0;
    *(unsigned char *)(this + 247) = 0;
  }
  if (*(char *)(this + 271) < 0)
  {
    **(unsigned char **)(this + 248) = 0;
    *(void *)(this + 256) = 0;
  }
  else
  {
    *(unsigned char *)(this + 248) = 0;
    *(unsigned char *)(this + 271) = 0;
  }
  if (*(char *)(this + 295) < 0)
  {
    **(unsigned char **)(this + 272) = 0;
    *(void *)(this + 280) = 0;
  }
  else
  {
    *(unsigned char *)(this + 272) = 0;
    *(unsigned char *)(this + 295) = 0;
  }
  return this;
}

void SipUri::makeUrn(SipUri *this)
{
  if (*((char *)this + 127) < 0)
  {
    *((void *)this + 14) = 3;
    uint64_t v2 = (_DWORD *)*((void *)this + 13);
  }
  else
  {
    uint64_t v2 = (_DWORD *)((char *)this + 104);
    *((unsigned char *)this + 127) = 3;
  }
  *uint64_t v2 = 7238261;
  SipHost::clear((SipUri *)((char *)this + 8));
  if (*((char *)this + 151) < 0)
  {
    **((unsigned char **)this + 16) = 0;
    *((void *)this + 17) = 0;
  }
  else
  {
    *((unsigned char *)this + 128) = 0;
    *((unsigned char *)this + 151) = 0;
  }
  if (*((char *)this + 175) < 0)
  {
    **((unsigned char **)this + 19) = 0;
    *((void *)this + 20) = 0;
  }
  else
  {
    *((unsigned char *)this + 152) = 0;
    *((unsigned char *)this + 175) = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    **((unsigned char **)this + 22) = 0;
    *((void *)this + 23) = 0;
  }
  else
  {
    *((unsigned char *)this + 176) = 0;
    *((unsigned char *)this + 199) = 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 336, *((void **)this + 43));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = (char *)this + 384;
  *((unsigned char *)this + 320) = 0;
}

BOOL SipUri::isAnonymousUri(SipUri *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 127);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)this + 14);
  }
  if (v1 != 3) {
    return 0;
  }
  uint64_t v3 = v2 >= 0 ? (SipUri *)((char *)this + 104) : (SipUri *)*((void *)this + 13);
  int v4 = *(unsigned __int16 *)v3;
  int v5 = *((unsigned __int8 *)v3 + 2);
  if (v4 != 26995 || v5 != 112) {
    return 0;
  }
  uint64_t v7 = *((unsigned __int8 *)this + 151);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)this + 17);
  }
  if (v7 != 9) {
    return 0;
  }
  std::string::size_type v9 = v8 >= 0 ? (SipUri *)((char *)this + 128) : (SipUri *)*((void *)this + 16);
  uint64_t v10 = *(void *)v9;
  int v11 = *((unsigned __int8 *)v9 + 8);
  if (v10 != 0x756F6D796E6F6E61 || v11 != 115) {
    return 0;
  }
  uint64_t v13 = *((unsigned __int8 *)this + 39);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)this + 3);
  }
  if (v13 != 17) {
    return 0;
  }
  uint64_t v17 = (char *)*((void *)this + 2);
  uint64_t v15 = (char *)this + 16;
  char v16 = v17;
  if (v14 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v16;
  }
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *((void *)v18 + 1);
  int v21 = v18[16];
  return v19 == 0x756F6D796E6F6E61 && v20 == 0x696C61766E692E73 && v21 == 100;
}

BOOL SipUri::isAnonymousUser(SipUri *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 127);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)this + 14);
  }
  if (v1 != 3) {
    return 0;
  }
  uint64_t v3 = v2 >= 0 ? (SipUri *)((char *)this + 104) : (SipUri *)*((void *)this + 13);
  int v4 = *(unsigned __int16 *)v3;
  int v5 = *((unsigned __int8 *)v3 + 2);
  if (v4 != 26995 || v5 != 112) {
    return 0;
  }
  if (*((char *)this + 151) < 0)
  {
    int v8 = (char *)*((void *)this + 16);
    uint64_t v9 = *((void *)this + 17);
  }
  else
  {
    int v8 = (char *)this + 128;
    uint64_t v9 = *((unsigned __int8 *)this + 151);
  }
  uint64_t v10 = &v8[v9];
  if (v9 >= 9)
  {
    int v11 = v8;
    do
    {
      uint64_t v12 = (char *)memchr(v11, 97, v9 - 8);
      if (!v12) {
        break;
      }
      if (*(void *)v12 == 0x756F6D796E6F6E61 && v12[8] == 115) {
        return v12 != v10 && v12 - v8 != -1;
      }
      int v11 = v12 + 1;
      uint64_t v9 = v10 - (unsigned char *)v11;
    }
    while (v10 - (unsigned char *)v11 > 8);
  }
  uint64_t v12 = v10;
  return v12 != v10 && v12 - v8 != -1;
}

void SipUri::makeAnonymous(SipUri *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "Anonymous <sip:anonymous@anonymous.invalid>");
  SipUri::fromString((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5289100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUri::setUser(uint64_t a1, const std::string *a2, uint64_t a3)
{
  v12[1] = 0;
  v12[2] = (void *)256;
  int v11 = (uint64_t *)v12;
  v12[0] = 0;
  uint64_t v10 = &unk_1F20B37B0;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    uint64_t v13 = __p;
    uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v11, __p, (uint64_t)&std::piecewise_construct, (long long **)&v13);
    std::string::operator=((std::string *)(v7 + 7), (const std::string *)a3);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  SipUri::setUser(a1, a2, (uint64_t)&v10);
  uint64_t v10 = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_1C528921C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17, a17);
  _Unwind_Resume(a1);
}

void *SipUri::setUser(uint64_t a1, const std::string *a2, uint64_t a3)
{
  SipUri::makeSipUri(a1);
  uint64_t result = std::string::operator=((std::string *)(a1 + 128), a2);
  *(unsigned char *)(a1 + 320) = 0;
  if (a1 + 368 != a3) {
    uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 376), *(long long **)(a3 + 8), (long long *)(a3 + 16));
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a3 + 32);
  return result;
}

uint64_t SipUri::setHost(SipUri *this, const SipHost *a2)
{
  SipUri::makeSipUri((uint64_t)this);
  uint64_t result = SipHost::operator=((uint64_t)this + 8, (uint64_t)a2);
  *((unsigned char *)this + 320) = 0;
  return result;
}

long long *SipUri::phoneContext(SipUri *this)
{
  if (SipUri::isTelUri(this))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    int v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
    if ((void **)((char *)this + 80) == v2) {
      uint64_t v3 = &ims::kEmptyString;
    }
    else {
      uint64_t v3 = (long long *)(v2 + 7);
    }
  }
  else
  {
    uint64_t v3 = &ims::kEmptyString;
    if (!SipUri::isSipUri(this)) {
      return v3;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    int v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, __p);
    if ((void **)((char *)this + 384) != v4) {
      uint64_t v3 = (long long *)(v4 + 7);
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1C52893B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *SipUri::verstatLevel(SipUri *this)
{
  if (SipUri::isTelUri(this))
  {
    int v2 = (char *)this + 64;
    goto LABEL_3;
  }
  uint64_t v3 = &ims::kEmptyString;
  if (SipUri::isSipUri(this))
  {
    uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, (void **)"verstat");
    if ((void **)((char *)this + 80) != v5) {
      uint64_t v3 = (long long *)(v5 + 7);
    }
    uint64_t v6 = *((unsigned __int8 *)v3 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *((void *)v3 + 1);
    }
    if (!v6)
    {
      int v2 = (char *)this + 368;
LABEL_3:
      uint64_t v3 = &ims::kEmptyString;
      int v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v2 + 8), (void **)"verstat");
      if (v2 + 16 != (char *)v4) {
        return (long long *)(v4 + 7);
      }
    }
  }
  return v3;
}

void SipUri::setPhoneContext(uint64_t **this, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    if (SipUri::isTelUri((SipUri *)this))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
      char v9 = __p;
      uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, __p, (uint64_t)&std::piecewise_construct, (long long **)&v9);
      std::string::operator=((std::string *)(v5 + 7), (const std::string *)a2);
    }
    else
    {
      if (!SipUri::isSipUri((SipUri *)this)) {
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
      char v9 = __p;
      uint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 47, __p, (uint64_t)&std::piecewise_construct, (long long **)&v9);
      std::string::operator=((std::string *)(v6 + 7), (const std::string *)a2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    SipParameterMap::clearParameter((uint64_t)(this + 8), __p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "phone-context");
    SipParameterMap::clearParameter((uint64_t)(this + 46), __p);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C52895CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::needsPhoneContext(SipUri *this)
{
  if (SipUri::isTelUri(this))
  {
    int v2 = (unsigned __int8 *)this + 176;
  }
  else
  {
    uint64_t result = SipUri::isSipUri(this);
    if (!result) {
      return result;
    }
    int v2 = (unsigned __int8 *)this + 128;
  }
  return isLocalPhoneNumber(v2);
}

uint64_t isLocalPhoneNumber(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 0;
  }
  uint64_t result = isPhoneNumber(a1);
  if (result)
  {
    uint64_t v5 = *(unsigned __int8 **)a1;
    if (v2 >= 0) {
      uint64_t v5 = a1;
    }
    return *v5 != 43;
  }
  return result;
}

void SipUri::countryCodeFromPhoneContext(SipUri *this@<X0>, std::string *a2@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = SipUri::phoneContext(this);
  ims::chomp("\r\n\t ", (uint64_t)v3, 3, &__p);
  char v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_17;
    }
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] == 43)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (size < 2)
    {
LABEL_16:
      *a2 = __p;
      return;
    }
    char v7 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    char v8 = &v7->__r_.__value_.__s.__data_[1];
    std::string::size_type v9 = size - 1;
    while (1)
    {
      int v11 = *v8++;
      unsigned __int8 v10 = v11;
      if (v11 < 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v10 + 60) & 0x400) == 0) {
        break;
      }
      if (!--v9) {
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (v4 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void SipUri::asString(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  SipUri::asString(a1, (uint64_t)a2);
}

void sub_1C52897E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUri::asString(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v2);
  }
}

void sub_1C52898E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipUri::toStream(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 320))
  {
    LoggableString::LoggableString((LoggableString *)&__p, "*");
    (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 40))(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return a2;
  }
  if (a3 == 1) {
    goto LABEL_5;
  }
  if (*(char *)(a1 + 223) < 0)
  {
    if (*(void *)(a1 + 208)) {
      goto LABEL_8;
    }
  }
  else if (*(unsigned char *)(a1 + 223))
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1 + 200);
    uint64_t v6 = *(void **)(a2 + 8);
    char v7 = " <";
    uint64_t v8 = 2;
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 88) && !*(void *)(a1 + 392) && a3)
  {
LABEL_5:
    int v5 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = *(void **)(a2 + 8);
  char v7 = "<";
  uint64_t v8 = 1;
LABEL_13:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  *(unsigned char *)(a2 + 17) = 0;
  int v5 = 1;
LABEL_14:
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(a1 + 127))
  {
    goto LABEL_20;
  }
  LoggableString::LoggableString(&__p, (const std::string *)(a1 + 104));
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (isTelScheme((unsigned __int16 *)(a1 + 104)))
  {
    memset(&v18, 0, sizeof(v18));
    if (*(char *)(a1 + 199) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 176), *(void *)(a1 + 184));
    }
    else {
      std::string v18 = *(std::string *)(a1 + 176);
    }
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, &v18);
    (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 56))(a2, &__p);
    if (v17 < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_60;
    }
    unsigned __int8 v10 = (void *)v18.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
  if (!isUrnScheme((unsigned __int16 *)(a1 + 104)))
  {
    int v11 = (const std::string::value_type **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
    {
      std::string::size_type v12 = *(void *)(a1 + 136);
      if (v12)
      {
        memset(&v18, 0, sizeof(v18));
        std::string::__init_copy_ctor_external(&v18, *v11, v12);
LABEL_41:
        ims::addPercentEscapes((uint64_t)&v18, @"&=+$,;?/", @":#[]@!'()");
        ObfuscatedString::ObfuscatedString((uint64_t)&__p, &v18);
        (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 56))(a2, &__p);
        if (v17 < 0) {
          operator delete(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a1 + 175) < 0)
        {
          if (!*(void *)(a1 + 160))
          {
LABEL_55:
            if (*(void *)(a1 + 392)) {
              SipParameterMap::toStream((SipParameterMap *)(a1 + 368), (ImsOutStream *)a2, 0, 0, 0, 0);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"@", 1);
            *(unsigned char *)(a2 + 17) = 0;
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
            goto LABEL_59;
          }
        }
        else if (!*(unsigned char *)(a1 + 175))
        {
          goto LABEL_55;
        }
        std::string::operator=(&v18, (const std::string *)(a1 + 152));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
        *(unsigned char *)(a2 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v14, "xxxxxx");
        PIIString::PIIString((uint64_t)&__p, &v18, &v14);
        (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 48))(a2, &__p);
        if (v17 < 0) {
          operator delete(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        goto LABEL_55;
      }
    }
    else if (*(unsigned char *)(a1 + 151))
    {
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
      v18.__r_.__value_.__r.__words[2] = *(void *)(a1 + 144);
      goto LABEL_41;
    }
LABEL_59:
    SipHost::toStream((SipHost *)(a1 + 8), (ImsOutStream *)a2, 1);
    goto LABEL_60;
  }
  LoggableString::LoggableString(&__p, (const std::string *)(a1 + 224));
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::string::size_type v9 = *(void **)(a2 + 8);
  v18.__r_.__value_.__s.__data_[0] = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v18, 1);
  *(unsigned char *)(a2 + 17) = 0;
  LoggableString::LoggableString(&v18, (const std::string *)(a1 + 248));
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 40))(a2, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_60;
  }
  unsigned __int8 v10 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_38:
  operator delete(v10);
LABEL_60:
  SipParameterMap::toStream((SipParameterMap *)(a1 + 64), (ImsOutStream *)a2, 0, @"[]/:&+$", @"#@!'()*=", 0);
  if (*(void *)(a1 + 352))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"?", 1);
    *(unsigned char *)(a2 + 17) = 0;
    SipParameterMap::toStream((SipParameterMap *)(a1 + 328), (ImsOutStream *)a2, 1, 0, 0, 0);
  }
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)">", 1);
    *(unsigned char *)(a2 + 17) = 0;
  }
  return a2;
}

void sub_1C5289E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ims::AccessNetwork::~AccessNetwork((void **)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 41) < 0) {
    operator delete(*(void **)(v21 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t SipUri::toStream(SipUri *this, ImsOutStream *a2)
{
  return SipUri::toStream((uint64_t)this, (uint64_t)a2, 2);
}

void SipUri::getContentIdString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C528A1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void SipUri::getUriString(SipUri *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C528A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v30 - 80));
  _Unwind_Resume(a1);
}

long long *SipUri::transport(SipUri *this)
{
  return &ims::kEmptyString;
}

BOOL SipUri::isValidUri(SipUri *this)
{
  uint64_t v2 = (unsigned __int16 *)((char *)this + 104);
  if (!isSipScheme((unsigned __int16 *)this + 52)) {
    goto LABEL_8;
  }
  if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 39)) {
      goto LABEL_6;
    }
    return 1;
  }
  if (*((void *)this + 3)) {
    return 1;
  }
LABEL_6:
  uint64_t v3 = *((void *)this + 6);
  if (v3 && ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3) & 1) != 0) {
    return 1;
  }
LABEL_8:
  if (isTelScheme(v2))
  {
    if (*((char *)this + 199) < 0)
    {
      if (*((void *)this + 23)) {
        return 1;
      }
    }
    else if (*((unsigned char *)this + 199))
    {
      return 1;
    }
  }
  BOOL result = isUrnScheme(v2);
  if (result)
  {
    if (*((char *)this + 247) < 0) {
      uint64_t v5 = *((void *)this + 29);
    }
    else {
      uint64_t v5 = *((unsigned __int8 *)this + 247);
    }
    return v5 != 0;
  }
  return result;
}

void SipUri::makeCanonical(SipUri *this)
{
  if (*((char *)this + 127) < 0)
  {
    if (*((void *)this + 14)) {
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)this + 127))
  {
    goto LABEL_8;
  }
  uint64_t v2 = (void **)((char *)this + 104);
  SipUri::guessScheme(this, &v5);
  if (*((char *)this + 127) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((void *)this + 15) = *((void *)&v5.__r_.__value_.__l + 2);
LABEL_8:
  if (SipUri::isSipUri(this) && isPhoneNumber((unsigned __int8 *)this + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "user");
    std::string::basic_string[abi:ne180100]<0>(&__p, "phone");
    uint64_t v6 = &v5;
    uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 9, (void **)&v5.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v6);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C528A908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::equals(SipUri *this, const SipUri *a2, int a3)
{
  int v3 = *((unsigned __int8 *)a2 + 320);
  if (*((unsigned char *)this + 320)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*((unsigned char *)this + 320)) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    return !v5;
  }
  uint64_t v9 = *((unsigned __int8 *)this + 127);
  size_t v10 = *((void *)this + 14);
  if ((v9 & 0x80u) == 0) {
    uint64_t v11 = *((unsigned __int8 *)this + 127);
  }
  else {
    uint64_t v11 = *((void *)this + 14);
  }
  uint64_t v12 = *((unsigned __int8 *)a2 + 127);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 14);
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    uint64_t v15 = (unsigned __int8 *)a2 + 104;
  }
  else {
    uint64_t v15 = (unsigned __int8 *)*((void *)a2 + 13);
  }
  if ((v9 & 0x80) == 0)
  {
    if (*((unsigned char *)this + 127))
    {
      char v16 = (unsigned __int8 *)this + 104;
      while (*v16 == *v15)
      {
        ++v16;
        ++v15;
        if (!--v9) {
          goto LABEL_28;
        }
      }
      return 0;
    }
    return 1;
  }
  if (memcmp(*((const void **)this + 13), v15, v10)) {
    return 0;
  }
  if (!v10) {
    return 1;
  }
LABEL_28:
  if (!isTelScheme((unsigned __int16 *)this + 52))
  {
    if (isSipScheme((unsigned __int16 *)this + 52))
    {
      if (!a3
        || (uint64_t result = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 128, (unsigned __int8 *)a2 + 128), result))
      {
        return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 1);
      }
    }
    else
    {
      uint64_t result = isUrnScheme((unsigned __int16 *)this + 52);
      if (result)
      {
        uint64_t result = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 224, (unsigned __int8 *)a2 + 224);
        if (result)
        {
          return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)this + 248, (unsigned __int8 *)a2 + 248);
        }
      }
    }
    return result;
  }
  uint64_t v17 = *((unsigned __int8 *)this + 199);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = *((unsigned __int8 *)this + 199);
  }
  else {
    uint64_t v18 = *((void *)this + 23);
  }
  uint64_t v19 = *((unsigned __int8 *)a2 + 199);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)a2 + 23);
  }
  if (v18 != v19) {
    return 0;
  }
  uint64_t v21 = (const void **)((char *)this + 176);
  std::string::size_type v24 = (unsigned __int8 *)*((void *)a2 + 22);
  int v23 = (char *)a2 + 176;
  std::string::size_type v22 = v24;
  if (v20 >= 0) {
    std::string::size_type v25 = (unsigned __int8 *)v23;
  }
  else {
    std::string::size_type v25 = v22;
  }
  if ((v17 & 0x80) != 0) {
    return memcmp(*v21, v25, *((void *)this + 23)) == 0;
  }
  if (!*((unsigned char *)this + 199)) {
    return 1;
  }
  uint64_t v26 = v17 - 1;
  do
  {
    int v28 = *(unsigned __int8 *)v21;
    uint64_t v21 = (const void **)((char *)v21 + 1);
    int v27 = v28;
    int v30 = *v25++;
    int v29 = v30;
    BOOL v32 = v26-- != 0;
    uint64_t result = v27 == v29;
  }
  while (v27 == v29 && v32);
  return result;
}

BOOL SipUri::userMatch(SipUri *this, const SipUri *a2)
{
  BOOL result = SipUri::isSipUri(this);
  if (result)
  {
    uint64_t v5 = *((unsigned __int8 *)this + 127);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = *((unsigned __int8 *)this + 127);
    }
    else {
      uint64_t v6 = *((void *)this + 14);
    }
    uint64_t v7 = *((unsigned __int8 *)a2 + 127);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a2 + 14);
    }
    if (v6 != v7) {
      return 0;
    }
    uint64_t v9 = (const void **)((char *)this + 104);
    if (v8 >= 0) {
      size_t v10 = (unsigned __int8 *)a2 + 104;
    }
    else {
      size_t v10 = (unsigned __int8 *)*((void *)a2 + 13);
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, *((void *)this + 14))) {
        return 0;
      }
    }
    else if (*((unsigned char *)this + 127))
    {
      while (*(unsigned __int8 *)v9 == *v10)
      {
        uint64_t v9 = (const void **)((char *)v9 + 1);
        ++v10;
        if (!--v5) {
          goto LABEL_17;
        }
      }
      return 0;
    }
LABEL_17:
    if (*((char *)a2 + 151) >= 0) {
      unint64_t v11 = *((unsigned __int8 *)a2 + 151);
    }
    else {
      unint64_t v11 = *((void *)a2 + 17);
    }
    if (v11)
    {
      unint64_t v12 = *((unsigned __int8 *)this + 151);
      if (*((char *)this + 151) < 0)
      {
        if (*((void *)this + 17)) {
          goto LABEL_23;
        }
      }
      else if (*((unsigned char *)this + 151))
      {
LABEL_23:
        if (SipUri::isAnonymousUser(this) && SipUri::isAnonymousUser(a2)) {
          return 1;
        }
        if (v11 >= 6 && ((v12 & 0x80) != 0 ? (unint64_t v13 = *((void *)this + 17)) : (unint64_t v13 = v12), v13 > 5)) {
          std::string::size_type v14 = 3;
        }
        else {
          std::string::size_type v14 = 0;
        }
        uint64_t v15 = (char *)this + 128;
        if ((v12 & 0x80) != 0) {
          unint64_t v12 = *((void *)this + 17);
        }
        if (v11 >= v12)
        {
          std::string::basic_string(&v41, (const std::string *)((char *)this + 128), v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
          int64_t v17 = *((unsigned __int8 *)a2 + 151);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = (char *)a2 + 128;
          }
          else {
            uint64_t v18 = (char *)*((void *)a2 + 16);
          }
          int v19 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          std::string::size_type v20 = v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v21 = &v41;
          }
          else {
            uint64_t v21 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            int64_t size = v41.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            if ((v17 & 0x80u) != 0) {
              int64_t v17 = *((void *)a2 + 17);
            }
            int v23 = &v18[v17];
            if (v17 >= size)
            {
              int v33 = v21->__r_.__value_.__s.__data_[0];
              std::string::size_type v34 = v18;
              do
              {
                int64_t v35 = v17 - size;
                if (v35 == -1) {
                  break;
                }
                unsigned int v36 = (char *)memchr(v34, v33, v35 + 1);
                if (!v36) {
                  break;
                }
                std::string::size_type v24 = v36;
                if (!memcmp(v36, v21, size)) {
                  goto LABEL_55;
                }
                std::string::size_type v34 = v24 + 1;
                int64_t v17 = v23 - (v24 + 1);
              }
              while (v17 >= size);
            }
            std::string::size_type v24 = v23;
LABEL_55:
            if (v24 == v23) {
              uint64_t v25 = -1;
            }
            else {
              uint64_t v25 = v24 - v18;
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          if ((v19 & 0x80000000) == 0) {
            return v25 != -1;
          }
          BOOL v32 = (void *)v20;
        }
        else
        {
          std::string::basic_string(&v41, (const std::string *)((char *)a2 + 128), v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
          if (*((char *)this + 151) < 0)
          {
            uint64_t v15 = (char *)*((void *)this + 16);
            int64_t v16 = *((void *)this + 17);
          }
          else
          {
            int64_t v16 = *((unsigned __int8 *)this + 151);
          }
          int v26 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          std::string::size_type v27 = v41.__r_.__value_.__r.__words[0];
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v28 = &v41;
          }
          else {
            int v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t v29 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            int64_t v29 = v41.__r_.__value_.__l.__size_;
          }
          if (v29)
          {
            int v30 = &v15[v16];
            if (v16 >= v29)
            {
              int v37 = v28->__r_.__value_.__s.__data_[0];
              std::string::size_type v38 = v15;
              do
              {
                int64_t v39 = v16 - v29;
                if (v39 == -1) {
                  break;
                }
                int v40 = (char *)memchr(v38, v37, v39 + 1);
                if (!v40) {
                  break;
                }
                unsigned int v31 = v40;
                if (!memcmp(v40, v28, v29)) {
                  goto LABEL_68;
                }
                std::string::size_type v38 = v31 + 1;
                int64_t v16 = v30 - (v31 + 1);
              }
              while (v16 >= v29);
            }
            unsigned int v31 = v30;
LABEL_68:
            if (v31 == v30) {
              uint64_t v25 = -1;
            }
            else {
              uint64_t v25 = v31 - v15;
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          if ((v26 & 0x80000000) == 0) {
            return v25 != -1;
          }
          BOOL v32 = (void *)v27;
        }
        operator delete(v32);
        return v25 != -1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t SipUri::matches(SipUri *this, const SipUri *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 151);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 151);
  }
  else {
    uint64_t v3 = *((void *)this + 17);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 151);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 17);
  }
  if (v3 != v4) {
    return 0;
  }
  int v8 = (const void **)((char *)this + 128);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)a2 + 128;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 16);
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *((void *)this + 17))) {
      goto LABEL_17;
    }
    return 0;
  }
  if (*((unsigned char *)this + 151))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  return SipHost::equals((SipUri *)((char *)this + 8), (const SipUri *)((char *)a2 + 8), 0);
}

void SipUri::normalizedPhoneNumber(SipUri *this@<X0>, std::string *a2@<X8>)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA210], SipUri::normalizedPhoneNumber(void)const::visualSeparators, &dword_1C51D1000);
  }
  unint64_t v4 = 0;
  int v5 = (char **)((char *)this + 176);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    unint64_t v6 = *((char *)this + 199) < 0 ? *((void *)this + 23) : *((unsigned __int8 *)this + 199);
    if (v4 >= v6) {
      break;
    }
    uint64_t v7 = (char *)this + 176;
    if ((*((unsigned char *)this + 199) & 0x80) != 0) {
      uint64_t v7 = *v5;
    }
    if (std::string::find((const std::string *)SipUri::normalizedPhoneNumber(void)const::visualSeparators, v7[v4], 0) == -1)
    {
      int v8 = (char *)this + 176;
      if (*((char *)this + 199) < 0) {
        int v8 = *v5;
      }
      std::string::push_back(a2, v8[v4]);
    }
    ++v4;
  }
}

void sub_1C528B028(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUri::anonymousUri(SipUri *this)
{
  uint64_t result = kAnonymousUri;
  if (!kAnonymousUri) {
    operator new();
  }
  return result;
}

void SipUri::clone(SipUri *this)
{
}

void sub_1C528B118(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

uint64_t PIIString::PIIString(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1C528B18C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallInfo::IMSCallInfo(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t *a6)
{
  *(void *)a1 = &unk_1F20BACB0;
  *(void *)(a1 + 8) = &unk_1F20BAE00;
  *(void *)(a1 + 16) = &unk_1F20BAE28;
  *(unsigned char *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  unint64_t v11 = (std::string *)(a1 + 80);
  *(void *)(a1 + 72) = &unk_1F20B3708;
  int v19 = (std::string *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  SipUri::SipUri((SipUri *)(a1 + 144));
  *(_OWORD *)(a1 + 552) = 0u;
  *(unsigned char *)(a1 + 569) = 0;
  *(_WORD *)(a1 + 572) = 0;
  *(unsigned char *)(a1 + 574) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 625) = 0u;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a5;
  uint64_t v13 = *a6;
  uint64_t v12 = a6[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v14 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 136) = v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 560);
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(unsigned char *)(a1 + 568) = 0;
  if (a2)
  {
    int v16 = *(_DWORD *)(a2 + 200) + 1;
    *(_DWORD *)(a2 + 200) = v16;
  }
  else
  {
    LOBYTE(v16) = -1;
  }
  *(unsigned char *)(a1 + 40) = v16;
  *(_WORD *)(a1 + 570) = 0;
  std::string::operator=(v11, (const std::string *)(a3 + 8));
  std::string::operator=(v19, a4);
  return a1;
}

void sub_1C528B380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  int v16 = *(std::__shared_weak_count **)(v12 + 136);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*(char *)(v12 + 127) < 0) {
    operator delete(*a12);
  }
  *(void *)(v12 + 72) = a10;
  if (*(char *)(v12 + 103) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::nextBasebandCallId(IMSCallManager *this)
{
  uint64_t v1 = (*((_DWORD *)this + 50) + 1);
  *((_DWORD *)this + 50) = v1;
  return v1;
}

void IMSCallInfo::~IMSCallInfo(IMSCallInfo *this)
{
  *(void *)this = &unk_1F20BACB0;
  *((void *)this + 1) = &unk_1F20BAE00;
  *((void *)this + 2) = &unk_1F20BAE28;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    *(void *)(v2 + 408) = 0;
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100]((uint64_t *)this + 73, 0);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  SipUri::~SipUri((IMSCallInfo *)((char *)this + 144));
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  *((void *)this + 9) = &unk_1F20B3708;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

{
  uint64_t vars8;

  IMSCallInfo::~IMSCallInfo(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IMSCallInfo::~IMSCallInfo(IMSCallInfo *this)
{
}

{
  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 16));
}

{
  uint64_t vars8;

  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IMSCallInfo::~IMSCallInfo((IMSCallInfo *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

void IMSCallInfo::stack(IMSCallInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 4);
  *a2 = 0;
  a2[1] = 0;
  if (v3)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v3 + 192))(v3, (char *)this + 104);
    if (!*a2)
    {
      uint64_t v5 = *((void *)this + 16);
      if (v5)
      {
        unint64_t v6 = *(std::__shared_weak_count **)(v5 + 368);
        if (v6 && (unint64_t v6 = std::__shared_weak_count::lock(v6)) != 0) {
          uint64_t v7 = *(void *)(v5 + 360);
        }
        else {
          uint64_t v7 = 0;
        }
        int v8 = (std::__shared_weak_count *)a2[1];
        *a2 = v7;
        a2[1] = v6;
        if (v8)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
  }
}

uint64_t IMSCallInfo::startCall(IMSCallInfo *this, const SipUri *a2, const BambiCallOptions *a3, const BambiEmergencyCallOptions *a4)
{
  if (*((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v4 = ims::error((uint64_t)&v13, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSCallInfo::startCall called on an existing call", 49);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_13;
  }
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 127)) {
      goto LABEL_12;
    }
LABEL_7:
    (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 192))(&v13);
    int v8 = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
    }
    if (v8)
    {
      v16[0] = 0;
      v16[1] = 0;
      (*(void (**)(SipStack **__return_ptr))(**((void **)this + 4) + 192))(v16);
      *((unsigned char *)this + 568) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v13, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v9 = ims::debug((uint64_t)&v13, (uint64_t)&__p);
      if (a4) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Starting emergency call to uruint64_t i = ", 33);
      }
      else {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Starting call to uruint64_t i = ", 23);
      }
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v9);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v13);
      }
      operator new();
    }
    goto LABEL_12;
  }
  if (*((void *)this + 14)) {
    goto LABEL_7;
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&v13, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::error((uint64_t)&v13, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSCallInfo::startCall called for invalid stack", 47);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_13:
  *(unsigned char *)(v4 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v13);
  }
  return 0;
}

void sub_1C528C260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    SipUri::~SipUri((SipUri *)(v2 + 360));
    BambiCallOptions::~BambiCallOptions((void **)(v2 + 8));
    JUMPOUT(0x1C878E320);
  }
  return result;
}

void IMSCallInfo::sendAccessBarringDisconnect(IMSCallInfo *this)
{
  uint64_t v21 = 65792;
  uint64_t v23 = 0;
  memset(&v22, 0, sizeof(v22));
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  std::string::__assign_external(&v22, "SessionTerminated:AccessBarring", 0x1FuLL);
  LODWORD(v23) = 4;
  int v19 = 0;
  std::string::size_type v20 = 0;
  (*(void (**)(SipStack **__return_ptr))(**((void **)this + 4) + 192))(&v19);
  uint64_t v2 = @"kIMSCallDisconnectionReasonAccessBarring";
  if (v19)
  {
    uint64_t v3 = (ImsPrefs *)SipStack::prefs(v19);
    CSFBOnAccessBarredKey = (void **)ImsPrefs::getCSFBOnAccessBarredKey(v3);
    if (ImsPrefs::BOOLValue(v3, CSFBOnAccessBarredKey))
    {
      if (*((_DWORD *)v19 + 50) == 2
        && *(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)v19 + 18)) + 456)
        && !*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)v19 + 18)) + 912)
        && !ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v19 + 3160)))
      {
        std::string::basic_string[abi:ne180100]<0>(v17, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::error((uint64_t)v17, (uint64_t)__p);
        unint64_t v6 = (unsigned char *)ImsOutStream::operator<<(v5, "IMSCallInfo::sendAccessBarringDisconnect falling back to CS");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v6[17] = 0;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        uint64_t v2 = @"kCallDisconnectionReasonRequiresCSFB";
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          *v22.__r_.__value_.__l.__data_ = 0;
          v22.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v22.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
        }
      }
    }
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN11IMSCallInfo27sendAccessBarringDisconnectEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_46;
  v7[4] = this;
  v7[5] = v2;
  __int16 v8 = v21;
  char v9 = BYTE2(v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v22;
  }
  int v11 = v23;
  char v12 = BYTE4(v23);
  if (SHIBYTE(v25[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v24, *((std::string::size_type *)&v24 + 1));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v24;
    v13.__r_.__value_.__r.__words[2] = v25[0];
  }
  if (SHIBYTE(v25[3]) < 0) {
    std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)v25[1], v25[2]);
  }
  else {
    std::string v14 = *(std::string *)&v25[1];
  }
  ims::performBlock((IMSClientManager *)v7);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (SHIBYTE(v25[3]) < 0) {
    operator delete((void *)v25[1]);
  }
  if (SHIBYTE(v25[0]) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1C528C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  unsigned int v46 = *(std::__shared_weak_count **)(v44 - 152);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  ims::DisconnectInfo::~DisconnectInfo((void **)(v44 - 144));
  _Unwind_Resume(a1);
}

void IMSCallInfo::uuid(IMSCallInfo *this, uint64_t a2)
{
  *(void *)this = &unk_1F20B3708;
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 80);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 96);
  }
}

uint64_t ImsUuid::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = (const void **)(a1 + 8);
  char v9 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v7 = (unsigned __int8 *)(a2 + 8);
  __int16 v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    unint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void IMSCallManager::epsFallbackCall(IMSCallManager *this, uint64_t a2)
{
  *(void *)this = &unk_1F20B3708;
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (*(char *)(a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 176);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 192);
  }
}

uint64_t IMSCallInfo::startCall(IMSCallInfo *this)
{
  if (*((_DWORD *)this + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "call");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v5 = ims::warn((uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Not waiting to dial call ", 25);
    *(unsigned char *)(v5 + 17) = 0;
    IMSCallInfo::uuid((IMSCallInfo *)&v10, (uint64_t)this);
    (*((void (**)(void **, uint64_t))v10 + 2))(&v10, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v10 = &unk_1F20B3708;
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    return 1;
  }
  if (capabilities::radio::mav20Plus(this))
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "call");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v2 = ims::info((uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Checking UAC access barring before dialing call ", 48);
    *(unsigned char *)(v2 + 17) = 0;
    IMSCallInfo::uuid((IMSCallInfo *)&v10, (uint64_t)this);
    (*((void (**)(void **, uint64_t))v10 + 2))(&v10, v2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    uint64_t v10 = &unk_1F20B3708;
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    IMSCallManager::sendCallStatusRequest(*((void *)this + 3), (uint64_t)this + 104, 0, 1, *((unsigned char *)this + 568));
    (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 192))(&v10);
    uint64_t v3 = (ims::AccessNetwork *)((char *)v10 + 3160);
    if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v10 + 3160)) || ims::AccessNetwork::isNR(v3))
    {
      int v4 = *((unsigned __int8 *)this + 568);
      if (__p) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
      }
      if (!v4) {
        return 1;
      }
    }
    else if (__p)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "call");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v7 = ims::debug((uint64_t)&v10, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Not waiting for UAC check ", 26);
    *(unsigned char *)(v7 + 17) = 0;
    if (*((unsigned char *)this + 568)) {
      __int16 v8 = "for emergency call";
    }
    else {
      __int16 v8 = "while on WiFi";
    }
    if (*((unsigned char *)this + 568)) {
      uint64_t v9 = 18;
    }
    else {
      uint64_t v9 = 13;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v12 < 0) {
      operator delete(v10);
    }
    return IMSCallInfo::continueCall(this);
  }
  else
  {
    return IMSCallInfo::continueCall(this);
  }
}

void sub_1C528CD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallStatusRequest(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  int v21 = a3;
  IPTelephonyManager::sendCallStatusRequest(*(void *)(a1 + 24), a2, a3, 1, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(v19, "call");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  uint64_t v8 = ims::debug((uint64_t)v19, (uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Voice call ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  ims::toString<UacCallStatus>(&v21, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
  uint64_t v9 = *(void **)(v8 + 8);
  char v22 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if (a3) {
      goto LABEL_7;
    }
LABEL_12:
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(v13 + 288);
    char v12 = *(std::__shared_weak_count **)(v13 + 296);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AnalyticsLogger::setCallActive(*(AnalyticsLogger **)(v14 + 120), 1);
    goto LABEL_15;
  }
  if (!a3) {
    goto LABEL_12;
  }
LABEL_7:
  if (a3 != 2) {
    return;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(v10 + 288);
  char v12 = *(std::__shared_weak_count **)(v10 + 296);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AnalyticsLogger::setCallActive(*(AnalyticsLogger **)(v11 + 120), 0);
LABEL_15:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C528D02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallInfo::continueCall(IMSCallInfo *this)
{
  uint64_t v2 = (std::string *)((char *)this + 592);
  ims::AccessNetwork::clear((uint64_t)this + 592);
  uint64_t v84 = 0;
  int v85 = 0;
  IMSCallInfo::stack(this, &v84);
  uint64_t v3 = v84;
  if (v84)
  {
    std::string::operator=(v2, (const std::string *)(v84 + 3160));
    std::string::operator=((std::string *)((char *)this + 616), (const std::string *)(v3 + 3184));
    long long v4 = *(_OWORD *)(v3 + 3208);
    *((unsigned char *)this + 656) = *(unsigned char *)(v3 + 3224);
    *((_OWORD *)this + 40) = v4;
    std::string::basic_string[abi:ne180100]<0>(v67, "call");
    std::string::basic_string[abi:ne180100]<0>(&v75, "");
    uint64_t v5 = ims::debug((uint64_t)v67, (uint64_t)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ANI at call start: ", 19);
    *(unsigned char *)(v5 + 17) = 0;
    LoggableString::LoggableString(&__p, v2);
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(v75);
    }
    if ((v67[23] & 0x80000000) != 0) {
      operator delete(*(void **)v67);
    }
  }
  if (*((_DWORD *)this + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v75, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::warn((uint64_t)&v75, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Not waiting to dial call ", 25);
    *(unsigned char *)(v8 + 17) = 0;
    IMSCallInfo::uuid((IMSCallInfo *)v67, (uint64_t)this);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v67 + 16))(v67, v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    *(void *)int v67 = &unk_1F20B3708;
    if ((v67[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v67[8]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(v75);
    }
    goto LABEL_143;
  }
  *((_DWORD *)this + 144) = 2;
  if (*((void *)this + 73))
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    unsigned int v75 = &unk_1F20B2680;
    unsigned int v76 = &_bambiDomain;
    uint64_t v79 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    unint64_t v6 = (void **)((char *)this + 104);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 4) + 192))(&v73);
    uint64_t v71 = 0;
    int v72 = 0;
    uint64_t v7 = (void *)*((void *)this + 4);
    if (*(char *)(v73 + 4183) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v67, *(const std::string::value_type **)(v73 + 4160), *(void *)(v73 + 4168));
    }
    else {
      *(std::string *)int v67 = *(std::string *)(v73 + 4160);
    }
    BambiClient::initializeCallToRemoteUri(v7, (std::string *)v67, (const SipUri *)(*((void *)this + 73) + 360), (std::__shared_weak_count_vtbl *)this, (const BambiCallOptions *)(*((void *)this + 73) + 8), **((void **)this + 73), (uint64_t)&v75, (uint64_t)&v71);
    if ((v67[23] & 0x80000000) != 0) {
      operator delete(*(void **)v67);
    }
    uint64_t v11 = v71;
    if (v71)
    {
      char v12 = *(std::__shared_weak_count **)(v71 + 368);
      if (!v12) {
        goto LABEL_113;
      }
      uint64_t v13 = std::__shared_weak_count::lock(v12);
      if (!v13) {
        goto LABEL_113;
      }
      uint64_t v14 = v13;
      if (*(void *)(v11 + 360))
      {
        uint64_t v15 = v71;
        char v16 = *(std::__shared_weak_count **)(v71 + 368);
        if (v16 && (char v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          uint64_t v18 = *(void *)(v15 + 360);
          uint64_t v19 = v73;
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          if (v18 == v19) {
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v24 = v73;
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          if (!v24)
          {
LABEL_113:
            uint64_t v39 = v71;
            std::string::size_type v38 = v72;
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v40 = (std::__shared_weak_count *)*((void *)this + 17);
            *((void *)this + 16) = v39;
            *((void *)this + 17) = v38;
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
            uint64_t v41 = *((void *)this + 3);
            if (*(char *)(v41 + 199) < 0)
            {
              **(unsigned char **)(v41 + 176) = 0;
              *(void *)(v41 + 184) = 0;
            }
            else
            {
              *(unsigned char *)(v41 + 176) = 0;
              *(unsigned char *)(v41 + 199) = 0;
            }
            std::unique_ptr<IMSCallInfo::DialInfo>::reset[abi:ne180100]((uint64_t *)this + 73, 0);
            uint64_t v42 = *((void *)this + 3);
            uint64_t v43 = *(void *)(v42 + 24);
            uint64_t v44 = *(std::__shared_weak_count **)(v42 + 32);
            if (v44) {
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v45 = *(void *)(v43 + 288);
            unsigned int v46 = *(std::__shared_weak_count **)(v43 + 296);
            if (v46) {
              atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v47 = (std::__shared_weak_count *)*((void *)this + 17);
            v53[0] = *((void *)this + 16);
            v53[1] = (uint64_t)v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            IMSMetricsManager::logSessionRequestedEvent(v45, v53, *((unsigned __int8 *)this + 40), 1);
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            if (v46) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
            }
            if (v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            }
            uint64_t v48 = *((void *)this + 3);
            IMSCallInfo::uuid((IMSCallInfo *)v51, (uint64_t)this);
            if (*((unsigned char *)this + 569)) {
              int v49 = kIMSCallStatusPulling;
            }
            else {
              int v49 = kIMSCallStatusDialing;
            }
            (*(void (**)(uint64_t, void *, __CFString *, void, void))(*(void *)v48 + 232))(v48, v51, *v49, *((unsigned __int8 *)this + 40), 0);
            v51[0] = &unk_1F20B3708;
            if ((v52 & 0x80000000) == 0) {
              goto LABEL_138;
            }
            int v33 = (void *)v51[1];
LABEL_137:
            operator delete(v33);
LABEL_138:
            if (v72) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v72);
            }
            if (v74) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v74);
            }
            ImsResult::~ImsResult((ImsResult *)&v75);
LABEL_143:
            uint64_t v10 = 1;
            goto LABEL_144;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v67, "call");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v25 = ims::warn((uint64_t)v67, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"desired stack (", 15);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v25 + 32))(v25, (char *)this + 104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)") not equal to actual stack (", 29);
        *(unsigned char *)(v25 + 17) = 0;
        uint64_t v26 = v71;
        std::string::size_type v27 = *(std::__shared_weak_count **)(v71 + 368);
        if (v27)
        {
          int v28 = std::__shared_weak_count::lock(v27);
          if (v28) {
            uint64_t v29 = *(void *)(v26 + 360);
          }
          else {
            uint64_t v29 = 0;
          }
        }
        else
        {
          uint64_t v29 = 0;
          int v28 = 0;
        }
        if (*(char *)(v29 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v29 + 4160), *(void *)(v29 + 4168));
        }
        else {
          std::string v62 = *(std::string *)(v29 + 4160);
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v25 + 32))(v25, &v62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)")", 1);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v67[23] & 0x80000000) != 0) {
          operator delete(*(void **)v67);
        }
        uint64_t v34 = v71;
        int64_t v35 = *(std::__shared_weak_count **)(v71 + 368);
        if (v35)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v35);
          if (v14) {
            uint64_t v36 = *(void *)(v34 + 360);
          }
          else {
            uint64_t v36 = 0;
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v14 = 0;
        }
        if (*(char *)(v36 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v67, *(const std::string::value_type **)(v36 + 4160), *(void *)(v36 + 4168));
        }
        else
        {
          uint64_t v37 = v36 + 4160;
          *(_OWORD *)int v67 = *(_OWORD *)v37;
          *(void *)&v67[16] = *(void *)(v37 + 16);
        }
        if (*((char *)this + 127) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)unint64_t v6 = *(_OWORD *)v67;
        *((void *)this + 15) = *(void *)&v67[16];
        v67[23] = 0;
        v67[0] = 0;
        if (!v14) {
          goto LABEL_113;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      goto LABEL_113;
    }
    *(void *)int v67 = 256;
    uint64_t v68 = 0;
    memset(&v67[8], 0, 24);
    long long v69 = 0u;
    memset(v70, 0, sizeof(v70));
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&SessionTerminatedResultDomain::_domain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 28;
    if (v76 == &SessionTerminatedResultDomain::_domain)
    {
      int v20 = v77;
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v20 == 28)
      {
        std::string::__assign_external((std::string *)&v67[8], "SessionTerminated:OnEmergencyCall", 0x21uLL);
        int v21 = kIMSCallDisconnectionReasonOnEmergencyCall;
        goto LABEL_57;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    if (*(_DWORD *)(v73 + 200) != 2
      || !*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v73 + 144)) + 456)
      || *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v73 + 144)) + 912))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "call");
      std::string::basic_string[abi:ne180100]<0>(&v62, "");
      uint64_t v22 = ims::error((uint64_t)&__p, (uint64_t)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"IMSCallInfo::continueCall not falling back to CS", 48);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = @"kCallDisconnectionReasonUnknownError";
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_58;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    uint64_t v30 = ims::error((uint64_t)&__p, (uint64_t)&v62);
    unsigned int v31 = (unsigned char *)ImsOutStream::operator<<(v30, "IMSCallInfo::continueCall falling back to CS");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v31[17] = 0;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v21 = kIMSCallDisconnectionReasonRequiresCSFB;
LABEL_57:
    uint64_t v23 = *v21;
LABEL_58:
    LODWORD(v68) = 4;
    v67[2] = 1;
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 1174405120;
    v54[2] = ___ZN11IMSCallInfo12continueCallEv_block_invoke;
    v54[3] = &__block_descriptor_tmp_31;
    v54[4] = this;
    v54[5] = v23;
    __int16 v55 = *(_WORD *)v67;
    char v56 = 1;
    if ((v67[31] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)&v67[8], *(std::string::size_type *)&v67[16]);
    }
    else {
      std::string v57 = *(std::string *)&v67[8];
    }
    int v58 = v68;
    char v59 = BYTE4(v68);
    if (SHIBYTE(v70[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
    }
    else
    {
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v69;
      v60.__r_.__value_.__r.__words[2] = v70[0];
    }
    if (SHIBYTE(v70[3]) < 0) {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)v70[1], v70[2]);
    }
    else {
      std::string v61 = *(std::string *)&v70[1];
    }
    ims::performBlock((IMSClientManager *)v54);
    uint64_t v32 = **((void **)this + 73);
    if (v32)
    {
      if (*(char *)(v32 + 4695) < 0) {
        operator delete(*(void **)(v32 + 4672));
      }
      SipUri::~SipUri((SipUri *)(v32 + 4264));
      SipStackConfig::~SipStackConfig((void **)(v32 + 1752));
      SipRegistrationConfig::~SipRegistrationConfig((void **)(v32 + 80));
      if (*(char *)(v32 + 71) < 0) {
        operator delete(*(void **)(v32 + 48));
      }
      if (*(char *)(v32 + 47) < 0) {
        operator delete(*(void **)(v32 + 24));
      }
      if (*(char *)(v32 + 23) < 0) {
        operator delete(*(void **)v32);
      }
      MEMORY[0x1C878E320](v32, 0x10B2C40AA878D3ELL);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70[3]) < 0) {
      operator delete((void *)v70[1]);
    }
    if (SHIBYTE(v70[0]) < 0) {
      operator delete((void *)v69);
    }
    if ((v67[31] & 0x80000000) == 0) {
      goto LABEL_138;
    }
    int v33 = *(void **)&v67[8];
    goto LABEL_137;
  }
  std::string::basic_string[abi:ne180100]<0>(&v75, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v9 = ims::warn((uint64_t)&v75, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No dial information cached for ", 31);
  *(unsigned char *)(v9 + 17) = 0;
  IMSCallInfo::uuid((IMSCallInfo *)v67, (uint64_t)this);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v67 + 16))(v67, v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  *(void *)int v67 = &unk_1F20B3708;
  if ((v67[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v67[8]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  uint64_t v10 = 0;
LABEL_144:
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  return v10;
}

void sub_1C528DDB8(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  long long v4 = *(std::__shared_weak_count **)(v2 - 176);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 - 160);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  ImsResult::~ImsResult((ImsResult *)(v2 - 152));
  unint64_t v6 = *(std::__shared_weak_count **)(v2 - 72);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN11IMSCallInfo12continueCallEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(IMSCallManager **)(v2 + 24);
  IMSCallInfo::uuid((IMSCallInfo *)v6, v2);
  ims::CFString::asString(*(const __CFString **)(a1 + 40), (const void *)0x8000100, &__p);
  IMSCallManager::sendCallDisconnectionNotification(v3, (uint64_t)v6, &__p, a1 + 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v6[0] = &unk_1F20B3708;
  if (v7 < 0) {
    operator delete((void *)v6[1]);
  }
  *(unsigned char *)(v2 + 571) = 1;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 24) + 240))(*(void *)(v2 + 24), v2);
}

void sub_1C528E134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallDisconnectionNotification(IMSCallManager *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "call");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  uint64_t v8 = ims::debug((uint64_t)v29, (uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Sending Call Status Changed notification: disconnection for callid: ", 68);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", reason = ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, a3);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((v29[23] & 0x80000000) != 0) {
    operator delete(*(void **)v29);
  }
  uint64_t v30 = &unk_1F20B3708;
  uint64_t v9 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v9;
    v31.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  uint64_t v10 = IMSCallManager::callInfoForUuid((uint64_t)a1, (uint64_t)&v30);
  uint64_t v11 = (IMSCallInfo *)v10;
  uint64_t v30 = &unk_1F20B3708;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if (!v11) {
      goto LABEL_19;
    }
  }
  else if (!v10)
  {
    goto LABEL_19;
  }
  IMSCallInfo::stack(v11, v29);
  uint64_t v12 = *(void *)v29;
  if (*(void *)&v29[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v29[8]);
  }
  if (!v12)
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(&v33, "");
    uint64_t v13 = ims::error((uint64_t)v29, (uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to disconnect call - unknown stack id", 44);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if ((v29[23] & 0x80000000) != 0)
    {
      uint64_t v14 = *(void **)v29;
LABEL_71:
      operator delete(v14);
      return;
    }
    return;
  }
  memset(&v33, 0, sizeof(v33));
  IMSCallInfo::stack(v11, v29);
  if (*(char *)(*(void *)v29 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(*(void *)v29 + 4160), *(void *)(*(void *)v29 + 4168));
  }
  else {
    std::string v33 = *(std::string *)(*(void *)v29 + 4160);
  }
  if (*(void *)&v29[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v29[8]);
  }
  memset(&v29[3], 0, 85);
  *(_WORD *)uint64_t v29 = *(_WORD *)a4;
  v29[2] = *(unsigned char *)(a4 + 2);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v29[8], *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v29[8] = *(_OWORD *)(a4 + 8);
    *(void *)&v29[24] = *(void *)(a4 + 24);
  }
  *(_DWORD *)&v29[32] = *(_DWORD *)(a4 + 32);
  v29[36] = *(unsigned char *)(a4 + 36);
  if (*(char *)(a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v29[40], *(const std::string::value_type **)(a4 + 40), *(void *)(a4 + 48));
  }
  else
  {
    *(_OWORD *)&v29[40] = *(_OWORD *)(a4 + 40);
    *(void *)&v29[56] = *(void *)(a4 + 56);
  }
  if (*(char *)(a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v29[64], *(const std::string::value_type **)(a4 + 64), *(void *)(a4 + 72));
  }
  else
  {
    *(_OWORD *)&v29[64] = *(_OWORD *)(a4 + 64);
    *(void *)&v29[80] = *(void *)(a4 + 80);
  }
  ims::CFString::asString(@"kCallDisconnectionReasonNormal", (const void *)0x8000100, &__p);
  uint64_t v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v15 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  if (size == v17)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v15 & 0x80) != 0)
    {
      char v27 = memcmp(a3->__r_.__value_.__l.__data_, p_p, a3->__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
    {
      uint64_t v19 = v15 - 1;
      int v20 = a3;
      do
      {
        int v22 = v20->__r_.__value_.__s.__data_[0];
        int v20 = (std::string *)((char *)v20 + 1);
        int v21 = v22;
        int v24 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v23 = v24;
        BOOL v26 = v19-- != 0;
        char v27 = v21 == v23;
      }
      while (v21 == v23 && v26);
    }
    else
    {
      char v27 = 1;
    }
  }
  else
  {
    char v27 = 0;
  }
  v29[36] = IMSCallManager::sendCallEndRequest(a1, (std::__shared_weak_count **)v11, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v28 = IMSClientManager::delegateForStack((void **)&v33.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v9;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  (*(void (**)(uint64_t, std::string *, std::string *, unsigned char *))(*(void *)v28 + 16))(v28, &__p, a3, v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v29[87] & 0x80000000) != 0) {
    operator delete(*(void **)&v29[64]);
  }
  if ((v29[63] & 0x80000000) != 0) {
    operator delete(*(void **)&v29[40]);
  }
  if ((v29[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v29[8]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v14 = (void *)v33.__r_.__value_.__r.__words[0];
    goto LABEL_71;
  }
}

void sub_1C528E6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  ims::DisconnectInfo::~DisconnectInfo((void **)&a10);
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c26_ZTSN3ims14DisconnectInfoE(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(a1 + 48) = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  int v6 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v6;
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  uint64_t v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1C528E8C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c26_ZTSN3ims14DisconnectInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 56);
    operator delete(v2);
  }
}

void ims::DisconnectInfo::~DisconnectInfo(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void IMSCallManager::setEPSFallbackCall(IMSCallManager *this, IMSCallInfo *a2)
{
  if (a2)
  {
    IMSCallInfo::uuid((IMSCallInfo *)v4, (uint64_t)a2);
    uint64_t v3 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      operator delete(*v3);
    }
    *(_OWORD *)uint64_t v3 = *(_OWORD *)&v4[8];
    *((void *)this + 24) = v5;
  }
  else if (*((char *)this + 199) < 0)
  {
    **((unsigned char **)this + 22) = 0;
    *((void *)this + 23) = 0;
  }
  else
  {
    *((unsigned char *)this + 176) = 0;
    *((unsigned char *)this + 199) = 0;
  }
}

void IMSCallInfo::endCall(uint64_t a1, const std::string *a2)
{
  if (!*(void *)(a1 + 552))
  {
    if (!*(void *)(a1 + 128)) {
      return;
    }
    memset(&v60, 0, sizeof(v60));
    LODWORD(size) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v60, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      LOBYTE(size) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    }
    else
    {
      std::string v60 = *a2;
    }
    int v17 = (char)size;
    std::string::size_type size = size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (size == 13)
    {
      uint64_t v18 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      if (v17 >= 0) {
        uint64_t v18 = (uint64_t *)a2;
      }
      uint64_t v19 = *v18;
      uint64_t v20 = *(uint64_t *)((char *)v18 + 5);
      if (v19 == *(void *)"UserTriggered" && v20 == *(void *)"riggered")
      {
        std::string v31 = *(void **)(a1 + 128);
        if (v31[65])
        {
          uint64_t v32 = (std::__shared_weak_count *)v31[46];
          if (v32)
          {
            uint64_t v32 = std::__shared_weak_count::lock(v32);
            std::string v33 = v32;
            if (v32) {
              uint64_t v32 = (std::__shared_weak_count *)v31[45];
            }
          }
          else
          {
            std::string v33 = 0;
          }
          uint64_t v34 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
          EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v34);
          int v36 = ImsPrefs::BOOLValue(v34, EmergencyAnonymousAutomaticRedialKey);
          char v37 = v36;
          if (v33)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            if (v37)
            {
LABEL_69:
              if (*(unsigned char *)(a1 + 574))
              {
                std::string::size_type v38 = *(SipSession **)(*(void *)(a1 + 128) + 392);
                if (!v38 || (SipSession::confirmed(v38) & 1) == 0)
                {
                  std::string::__assign_external(&v60, "EmergencyUserTriggeredTimeout", 0x1DuLL);
                  goto LABEL_78;
                }
              }
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              {
                v60.__r_.__value_.__l.__size_ = 22;
                uint64_t v39 = (std::string *)v60.__r_.__value_.__r.__words[0];
                uint64_t v29 = (std::string::value_type *)(v60.__r_.__value_.__r.__words[0] + 22);
              }
              else
              {
                uint64_t v29 = &v60.__r_.__value_.__s.__data_[22];
                *((unsigned char *)&v60.__r_.__value_.__s + 23) = 22;
                uint64_t v39 = &v60;
              }
              qmemcpy(v39, "EmergencyUserTriggered", 22);
              goto LABEL_77;
            }
          }
          else if (v36)
          {
            goto LABEL_69;
          }
        }
      }
    }
    std::string::size_type v22 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      std::string::size_type v22 = a2->__r_.__value_.__l.__size_;
    }
    if (v22 != 13
      || (v23 >= 0 ? (int v24 = (uint64_t *)a2) : (int v24 = (uint64_t *)a2->__r_.__value_.__r.__words[0]),
          (uint64_t v25 = *v24, v26 = *(uint64_t *)((char *)v24 + 5), v25 == *(void *)"UserTriggered")
        ? (BOOL v27 = v26 == *(void *)"riggered")
        : (BOOL v27 = 0),
          !v27
       || (uint64_t v28 = *(SipSession **)(*(void *)(a1 + 128) + 392)) != 0 && (SipSession::confirmed(v28) & 1) != 0))
    {
LABEL_78:
      std::string::size_type v40 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v41 = (char)v40;
      if ((v40 & 0x80u) != 0) {
        std::string::size_type v40 = a2->__r_.__value_.__l.__size_;
      }
      if (v40 != 13) {
        goto LABEL_94;
      }
      uint64_t v42 = v41 >= 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
      uint64_t v43 = *v42;
      uint64_t v44 = *(uint64_t *)((char *)v42 + 5);
      if (v43 != *(void *)"UserTriggered" || v44 != *(void *)"riggered") {
        goto LABEL_94;
      }
      uint64_t v46 = *(void *)(a1 + 128);
      if (*(char *)(v46 + 1695) < 0)
      {
        if (!*(void *)(v46 + 1680))
        {
LABEL_94:
          std::string::basic_string[abi:ne180100]<0>(v58, "call");
          std::string::basic_string[abi:ne180100]<0>(v54, "");
          uint64_t v47 = ims::debug((uint64_t)v58, (uint64_t)v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"endCall: reason= ", 17);
          *(unsigned char *)(v47 + 17) = 0;
          LoggableString::LoggableString(&v53, a2);
          (*(void (**)(uint64_t, std::string *))(*(void *)v47 + 40))(v47, &v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" (", 2);
          *(unsigned char *)(v47 + 17) = 0;
          LoggableString::LoggableString(&__p, &v60);
          (*(void (**)(uint64_t, std::string *))(*(void *)v47 + 40))(v47, &__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"); confirmed= ",
            14);
          *(unsigned char *)(v47 + 17) = 0;
          uint64_t v48 = *(SipSession **)(*(void *)(a1 + 128) + 392);
          int v49 = "false";
          if (v48)
          {
            if (SipSession::confirmed(v48))
            {
              int v49 = "true";
              uint64_t v50 = 4;
            }
            else
            {
              uint64_t v50 = 5;
            }
          }
          else
          {
            uint64_t v50 = 5;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)v49, v50);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v47 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (v55 < 0) {
            operator delete(v54[0]);
          }
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          BambiCall::endWithReason(*(BambiCall **)(a1 + 128), (uint64_t)&v60, (uint64_t)v51);
          ImsResult::~ImsResult((ImsResult *)v51);
          goto LABEL_108;
        }
      }
      else if (!*(unsigned char *)(v46 + 1695))
      {
        goto LABEL_94;
      }
      std::string::operator=(&v60, (const std::string *)(v46 + 1672));
      goto LABEL_94;
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      v60.__r_.__value_.__l.__size_ = 14;
      uint64_t v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
      uint64_t v29 = (std::string::value_type *)(v60.__r_.__value_.__r.__words[0] + 14);
    }
    else
    {
      uint64_t v29 = &v60.__r_.__value_.__s.__data_[14];
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 14;
      uint64_t v30 = &v60;
    }
    qmemcpy(v30, "RejectedByUser", 14);
LABEL_77:
    *uint64_t v29 = 0;
    goto LABEL_78;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 216))(&v60);
  std::string::size_type v4 = v60.__r_.__value_.__r.__words[0];
  if (v60.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v60.__r_.__value_.__l.__size_);
  }
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "call");
    std::string::basic_string[abi:ne180100]<0>(v58, "");
    uint64_t v5 = ims::debug((uint64_t)&v60, (uint64_t)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"endCall: CallInfo ", 18);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(a1 + 72, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" is in a conference call.  Removing participant from call.", 58);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 216))(&v60);
    uint64_t v6 = v60.__r_.__value_.__r.__words[0];
    long long v7 = *(std::__shared_weak_count **)(a1 + 560);
    uint64_t v56 = *(void *)(a1 + 552);
    std::string v57 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
    }
    if (v8 == 5)
    {
      if (v9 >= 0) {
        uint64_t v10 = (int *)a2;
      }
      else {
        uint64_t v10 = (int *)a2->__r_.__value_.__r.__words[0];
      }
      int v11 = *v10;
      int v12 = *((unsigned __int8 *)v10 + 4);
      BOOL v14 = v11 == *(_DWORD *)"SRVCC" && v12 == str_7_10[4];
    }
    else
    {
      BOOL v14 = 0;
    }
    BambiConferenceCall::removeParticipant(v6, &v56, v14);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v60.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v60.__r_.__value_.__l.__size_);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "call");
  std::string::basic_string[abi:ne180100]<0>(v58, "");
  uint64_t v16 = ims::error((uint64_t)&v60, (uint64_t)v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"endCall: CallInfo ", 18);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 72) + 16))(a1 + 72, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" is in a conference call, but manager doesn't have one.", 55);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v59 < 0) {
    operator delete(v58[0]);
  }
LABEL_108:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
}

void sub_1C528F18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::ringCall(IMSCallInfo *this)
{
  uint64_t v1 = (int8x8_t *)*((void *)this + 16);
  if (v1)
  {
    double v2 = BambiCall::ring(v1, (uint64_t)&v7);
    int v3 = (*(uint64_t (**)(uint64_t, void, double))(*(void *)v8 + 24))(v8, v9, v2);
    ImsResult::~ImsResult((ImsResult *)&v7);
    if (v3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)&v7, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Couldn't send ringing notification", 34);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v7);
      }
    }
  }
}

void sub_1C528F36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::answerCall(void *a1, const std::string *a2)
{
  if (!a1[69])
  {
    uint64_t v4 = (std::string *)a1[16];
    if (!v4) {
      return;
    }
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v15 = 0u;
    long long v16 = 0u;
    BambiCall::answer(v4, a2, (uint64_t)v15);
    if (!(*(unsigned int (**)(void *, void))(*(void *)v15[1] + 24))(v15[1], v16)) {
      goto LABEL_15;
    }
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v10 = 1073741838;
    if (v15[1] == &_bambiDomain)
    {
      int v5 = v16;
      ImsResult::~ImsResult((ImsResult *)__p);
      if (v5 == 1073741838)
      {
LABEL_15:
        ImsResult::~ImsResult((ImsResult *)v15);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Couldn't answer call", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::error((uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"IMSCallManager::answerCall: call ", 33);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(void *, uint64_t))(a1[9] + 16))(a1 + 9, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" is already in a conference.", 28);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1C528F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a27);
  _Unwind_Resume(a1);
}

void IMSCallInfo::setActive(IMSCallInfo *this, int a2)
{
  if (*((void *)this + 69))
  {
    (*(void (**)(void))(**((void **)this + 3) + 200))();
  }
  else
  {
    double v2 = (BambiCall *)*((void *)this + 16);
    if (v2)
    {
      if (a2) {
        BambiCall::performLocalResume(v2);
      }
      else {
        BambiCall::performLocalHold(v2);
      }
    }
  }
}

uint64_t IMSCallInfo::isActive(IMSCallInfo *this)
{
  if (*((void *)this + 69))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"isActive: call is conference participant", 40);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v9 = 0;
    int v10 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 216))(&v9);
    if (v9
      && (uint64_t v3 = *(SipSession **)(v9 + 392)) != 0
      && SipSession::confirmed(v3)
      && (*(_DWORD *)(v9 + 448) & 0xFFFFFFFE) != 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"isActive: conference call is confirmed or unheld", 48);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      char v4 = 0;
    }
    else
    {
      char v4 = 1;
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 16);
    if (v6)
    {
      long long v7 = *(SipSession **)(v6 + 392);
      if (v7)
      {
        if (SipSession::confirmed(v7) && (*(_DWORD *)(*((void *)this + 16) + 448) & 0xFFFFFFFE) != 2) {
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_1C528F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

SipSession *IMSCallInfo::isAlerting(IMSCallInfo *this)
{
  uint64_t v1 = *((void *)this + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(SipSession **)(v1 + 392);
  if (result) {
    return (SipSession *)(SipSession::confirmed(result) ^ 1);
  }
  return result;
}

void IMSCallInfo::refresh(IMSCallInfo *this, int a2)
{
  uint64_t v2 = (RTPManager **)*((void *)this + 16);
  if (v2)
  {
    BambiCall::handleSRVCCFailure(v2, a2, (ImsResult *)v3);
    ImsResult::~ImsResult((ImsResult *)v3);
  }
}

BOOL IMSCallInfo::isMultiParty(IMSCallInfo *this)
{
  return *((void *)this + 69) != 0;
}

void IMSCallInfo::setBasebandCallId(IMSCallInfo *this, char a2)
{
  *((unsigned char *)this + 40) = a2;
  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Setting basebandCallId to ", 26);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C528FAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN11IMSCallInfo27sendAccessBarringDisconnectEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(IMSCallManager **)(v2 + 24);
  IMSCallInfo::uuid((IMSCallInfo *)v6, v2);
  ims::CFString::asString(*(const __CFString **)(a1 + 40), (const void *)0x8000100, &__p);
  IMSCallManager::sendCallDisconnectionNotification(v3, (uint64_t)v6, &__p, a1 + 48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v6[0] = &unk_1F20B3708;
  if (v7 < 0) {
    operator delete((void *)v6[1]);
  }
  *(unsigned char *)(v2 + 571) = 1;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 24) + 240))(*(void *)(v2 + 24), v2);
}

void sub_1C528FC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleJoinedConferenceEvent(std::string *this, BambiCallJoinedConferenceEvent *a2)
{
  char v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
  }
  if (v5 == this[5].__r_.__value_.__l.__size_)
  {
    std::string::operator=(this + 2, (const std::string *)(v5 + 496));
    std::string::basic_string[abi:ne180100]<0>(&v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Swapping call for conference participant", 40);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v21);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 6);
    if (v9)
    {
      std::string::size_type v10 = *((void *)a2 + 5);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v11 = std::__shared_weak_count::lock(v9);
      if (v11) {
        std::string::size_type v12 = v10;
      }
      else {
        std::string::size_type v12 = 0;
      }
    }
    else
    {
      std::string::size_type v12 = 0;
      char v11 = 0;
    }
    this[23].__r_.__value_.__r.__words[0] = v12;
    std::string::size_type size = (std::__shared_weak_count *)this[23].__r_.__value_.__l.__size_;
    this[23].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (size) {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    *(void *)(this[23].__r_.__value_.__r.__words[0] + 1080) = &this->__r_.__value_.__l.__size_;
    char v14 = (std::__shared_weak_count *)this[5].__r_.__value_.__r.__words[2];
    this[5].__r_.__value_.__l.__size_ = 0;
    this[5].__r_.__value_.__r.__words[2] = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    std::string::pointer data = this[1].__r_.__value_.__l.__data_;
    IMSCallInfo::uuid((IMSCallInfo *)v17, (uint64_t)this);
    (*(void (**)(std::string::pointer, void *, __CFString *, void, BambiCallJoinedConferenceEvent *))(*(void *)data + 232))(data, v17, @"kCallStatusJoined", this[1].__r_.__value_.__s.__data_[16], a2);
    v17[0] = &unk_1F20B3708;
    if (v18 < 0) {
      operator delete((void *)v17[1]);
    }
    (*(void (**)(void **__return_ptr))(*(void *)this[1].__r_.__value_.__l.__data_ + 216))(&v21);
    int v16 = *((_DWORD *)v21 + 112);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v16 == 3) {
      (*(void (**)(std::string::size_type, uint64_t))(*(void *)this[1].__r_.__value_.__l.__data_ + 200))(this[1].__r_.__value_.__r.__words[0], 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleJoinedConferenceEvent for an unknown call", 60);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v21);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C528FFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 368);
    if (v5)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        uint64_t v9 = *(void *)(v3 + 360);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (v9)
        {
          uint64_t v10 = *a2;
          char v11 = *(std::__shared_weak_count **)(*a2 + 368);
          if (v11)
          {
            std::string::size_type v12 = std::__shared_weak_count::lock(v11);
            if (v12) {
              uint64_t v13 = *(void *)(v10 + 360);
            }
            else {
              uint64_t v13 = 0;
            }
          }
          else
          {
            uint64_t v13 = 0;
            std::string::size_type v12 = 0;
          }
          if (*(char *)(v13 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
          }
          else {
            std::string v17 = *(std::string *)(v13 + 4160);
          }
          IMSCallInfo::uuid((IMSCallInfo *)v15, a1);
          IMSCallManager::sendInputFrequencyLevelUpdateNotification(v14, (void **)&v17.__r_.__value_.__l.__data_, (uint64_t)v15, a3);
          v15[0] = &unk_1F20B3708;
          if (v16 < 0) {
            operator delete((void *)v15[1]);
          }
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
    }
  }
}

void sub_1C5290160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendInputFrequencyLevelUpdateNotification(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = IMSClientManager::delegateForStack(a2);
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string __p = *(std::string *)(a3 + 8);
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v6 + 216))(v6, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5290270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 368);
    if (v5)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        uint64_t v9 = *(void *)(v3 + 360);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (v9)
        {
          uint64_t v10 = *a2;
          char v11 = *(std::__shared_weak_count **)(*a2 + 368);
          if (v11)
          {
            std::string::size_type v12 = std::__shared_weak_count::lock(v11);
            if (v12) {
              uint64_t v13 = *(void *)(v10 + 360);
            }
            else {
              uint64_t v13 = 0;
            }
          }
          else
          {
            uint64_t v13 = 0;
            std::string::size_type v12 = 0;
          }
          if (*(char *)(v13 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
          }
          else {
            std::string v17 = *(std::string *)(v13 + 4160);
          }
          IMSCallInfo::uuid((IMSCallInfo *)v15, a1);
          IMSCallManager::sendOutputFrequencyLevelUpdateNotification(v14, (void **)&v17.__r_.__value_.__l.__data_, (uint64_t)v15, a3);
          v15[0] = &unk_1F20B3708;
          if (v16 < 0) {
            operator delete((void *)v15[1]);
          }
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
    }
  }
}

void sub_1C52903B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendOutputFrequencyLevelUpdateNotification(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = IMSClientManager::delegateForStack(a2);
  if (*(char *)(a3 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else {
    std::string __p = *(std::string *)(a3 + 8);
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v6 + 224))(v6, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C52904C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleVocoderInfoEvent(IMSCallInfo *a1, uint64_t a2, uint64_t a3)
{
  IMSCallInfo::stack(a1, &v12);
  std::string::size_type v6 = v12.__r_.__value_.__r.__words[0];
  if (v12.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12.__r_.__value_.__l.__size_);
  }
  if (v6)
  {
    IMSCallInfo::stack(a1, &v10);
    if (*(char *)(v10 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
    }
    else {
      std::string v12 = *(std::string *)(v10 + 4160);
    }
    IMSCallInfo::uuid((IMSCallInfo *)v8, (uint64_t)a1);
    uint64_t v7 = IMSClientManager::delegateForStack((void **)&v12.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 232))(v7, a2, a3);
    v8[0] = &unk_1F20B3708;
    if (v9 < 0) {
      operator delete((void *)v8[1]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1C5290608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::sendVocoderInfoNotification(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)IMSClientManager::delegateForStack(a2) + 232);
  return v2();
}

void IMSCallInfo::handleAudioStreamTokensEvent(IMSCallInfo *this, const __CFArray *a2)
{
  uint64_t v8 = 0;
  CFStringRef v9 = 0;
  if (*((char *)this + 103) < 0) {
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else {
    std::string v7 = *(std::string *)((char *)this + 80);
  }
  ims::CFString::CFString(&v8, (char *)&v7, 0x8000100u);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  IMSCallInfo::stack(this, &v5);
  if (*(char *)(v5 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string v7 = *(std::string *)(v5 + 4160);
  }
  IMSCallManager::sendAudioStreamTokensNotification(v4, (void **)&v7.__r_.__value_.__l.__data_, v9, 0, a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  ims::CFType::~CFType((ims::CFType *)&v8);
}

void sub_1C52907D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1C5290814(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C529080CLL);
}

const void **IMSCallManager::sendAudioStreamTokensNotification(int a1, void **a2, CFStringRef theString, int a4, CFTypeRef cf)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v14 = 0u;
  CFTypeRef cfa = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringGetCString(theString, buffer, 256, 0x600u);
  uint64_t v7 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  CFTypeRef v9 = cfa;
  if (cfa) {
    CFRetain(cfa);
  }
  (*(void (**)(uint64_t, void **, CFTypeRef *))(*(void *)v7 + 176))(v7, __p, &v9);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&cfa);
}

void sub_1C5290950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextStreamTokenEvent(IMSCallInfo *this, const __CFNumber *a2)
{
  uint64_t v8 = 0;
  CFStringRef v9 = 0;
  if (*((char *)this + 103) < 0) {
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else {
    std::string v7 = *(std::string *)((char *)this + 80);
  }
  ims::CFString::CFString(&v8, (char *)&v7, 0x8000100u);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  IMSCallInfo::stack(this, &v5);
  if (*(char *)(v5 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string v7 = *(std::string *)(v5 + 4160);
  }
  IMSCallManager::sendTextStreamTokenNotification(v4, (void **)&v7.__r_.__value_.__l.__data_, v9, 0, a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  ims::CFType::~CFType((ims::CFType *)&v8);
}

void sub_1C5290A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1C5290ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5290AD4);
}

const void **IMSCallManager::sendTextStreamTokenNotification(int a1, void **a2, CFStringRef theString, int a4, CFTypeRef cf)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v14 = 0u;
  CFTypeRef cfa = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringGetCString(theString, buffer, 256, 0x600u);
  uint64_t v7 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  CFTypeRef v9 = cfa;
  if (cfa) {
    CFRetain(cfa);
  }
  (*(void (**)(uint64_t, void **, CFTypeRef *))(*(void *)v7 + 184))(v7, __p, &v9);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&cfa);
}

void sub_1C5290C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleIncomingDtmfEvent(IMSCallInfo *this, uint64_t a2)
{
  uint64_t v8 = 0;
  CFStringRef v9 = 0;
  if (*((char *)this + 103) < 0) {
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else {
    std::string v7 = *(std::string *)((char *)this + 80);
  }
  ims::CFString::CFString(&v8, (char *)&v7, 0x8000100u);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  IMSCallInfo::stack(this, &v5);
  if (*(char *)(v5 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string v7 = *(std::string *)(v5 + 4160);
  }
  IMSCallManager::sendIncomingDtmfNotification(v4, (void **)&v7.__r_.__value_.__l.__data_, v9, a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  ims::CFType::~CFType((ims::CFType *)&v8);
}

void sub_1C5290D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  ims::CFType::~CFType((ims::CFType *)(v16 - 32));
  _Unwind_Resume(a1);
}

void sub_1C5290DA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5290D98);
}

void IMSCallManager::sendIncomingDtmfNotification(int a1, void **a2, CFStringRef theString, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)buffer = 0u;
  CFStringGetCString(theString, buffer, 256, 0x600u);
  uint64_t v6 = IMSClientManager::delegateForStack(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, buffer);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v6 + 192))(v6, __p, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5290EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextStreamHeldEvent(IMSCallInfo *this, uint64_t a2)
{
  memset(&v8, 0, sizeof(v8));
  IMSCallInfo::stack(this, &v5);
  if (v5[4183] < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)v5 + 520), *((void *)v5 + 521));
  }
  else {
    std::string v8 = *(std::string *)(v5 + 4160);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__data_);
  }
  memset(&v7, 0, sizeof(v7));
  IMSCallInfo::uuid((IMSCallInfo *)&v5, (uint64_t)this);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    uint64_t v5 = (char *)&unk_1F20B3708;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v7 = __p;
  }
  uint64_t v4 = IMSClientManager::delegateForStack((void **)&v8.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v4 + 136))(v4, &v7, a2);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C5291028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleCallInvalidated(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)&v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handleCallInvalidated", 21);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v23 < 0) {
    operator delete((void *)v22);
  }
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  if (!*(void *)(a1 + 552))
  {
    if (*a2 != *(void *)(a1 + 128)) {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    uint64_t v7 = ims::debug((uint64_t)__p, (uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleCallInvalidated actually removing the call", 48);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v23 < 0) {
      operator delete((void *)v22);
    }
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = *a2;
    if (*(unsigned char *)(*a2 + 1496))
    {
      int v9 = *(unsigned __int8 *)(a1 + 571);
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a1 + 571);
      if (!*(unsigned char *)(v8 + 1497))
      {
        if (!*(unsigned char *)(a1 + 571))
        {
          uint64_t v13 = *(void *)(a1 + 24);
          long long v14 = *(std::__shared_weak_count **)(v8 + 368);
          if (v14)
          {
            long long v15 = std::__shared_weak_count::lock(v14);
            if (v15) {
              uint64_t v16 = *(void *)(v8 + 360);
            }
            else {
              uint64_t v16 = 0;
            }
          }
          else
          {
            uint64_t v16 = 0;
            long long v15 = 0;
          }
          if (*(char *)(v16 + 4183) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v16 + 4160), *(void *)(v16 + 4168));
          }
          else
          {
            uint64_t v17 = v16 + 4160;
            *(_OWORD *)std::string __p = *(_OWORD *)v17;
            *(void *)&long long v19 = *(void *)(v17 + 16);
          }
          IMSCallManager::sendCallStatusRequest(v13, (uint64_t)__p, 2, *(unsigned __int8 *)(*a2 + 1496), *(void *)(*a2 + 520) != 0);
          if (SBYTE7(v19) < 0) {
            operator delete(__p[0]);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        goto LABEL_21;
      }
    }
    if (!v9)
    {
      bzero(__p, 0x250uLL);
      BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, 10);
      __p[0] = &unk_1F20B85E8;
      uint64_t v10 = *a2;
      long long v11 = (std::__shared_weak_count *)a2[1];
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      long long v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      *(void *)&long long v19 = v10;
      *((void *)&v19 + 1) = v11;
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      IMSCallInfo::handleSessionTerminationEvent((IMSCallInfo *)a1, (BambiCallSessionTerminationBaseEvent *)__p);
      BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
      goto LABEL_34;
    }
LABEL_21:
    *(_OWORD *)long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v19 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v22, "CallInvalidated");
    BambiCallNamedEvent::BambiCallNamedEvent((uint64_t)__p, &v22);
    if (v23 < 0) {
      operator delete((void *)v22);
    }
    __p[0] = &unk_1F20C32B8;
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[1]);
    }
    __p[0] = &unk_1F20B8640;
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
    }
LABEL_34:
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 240))(*(void *)(a1 + 24), a1);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  uint64_t v5 = ims::debug((uint64_t)__p, (uint64_t)&v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Invalidated call turned into a conference participant.  Keeping CallInfo", 72);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete((void *)v22);
  }
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5291514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionTerminationEvent(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 != *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v133, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v133, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo: received ", 22);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(BambiCallSessionTerminationBaseEvent *, uint64_t))(*(void *)a2 + 16))(a2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" event for an unknown call", 26);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v134) < 0)
    {
      uint64_t v8 = (void *)v133;
LABEL_335:
      operator delete(v8);
      goto LABEL_336;
    }
    goto LABEL_336;
  }
  uint64_t v170 = 256;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  long long v171 = 0uLL;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  LODWORD(v173) = IMSCallInfo::sendSessionTerminationMetric(this, a2, (BOOL *)&v170);
  (*(void (**)(long long *__return_ptr, BambiCallSessionTerminationBaseEvent *))(*(void *)a2 + 40))(&v133, a2);
  if (SHIBYTE(v172) < 0) {
    operator delete((void *)v171);
  }
  long long v171 = v133;
  uint64_t v172 = v134;
  BYTE1(v170) = *((unsigned char *)a2 + 146);
  *((unsigned char *)this + 571) = 1;
  uint64_t v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  uint64_t v163 = 0;
  int v164 = 0;
  IMSCallInfo::stack(this, &v163);
  uint64_t v9 = v163;
  if (v163)
  {
    std::string::operator=((std::string *)&v165, (const std::string *)(v163 + 3160));
    std::string::operator=((std::string *)((char *)&v166 + 8), (const std::string *)(v9 + 3184));
    LOBYTE(v169) = *(unsigned char *)(v9 + 3224);
    long long v168 = *(_OWORD *)(v9 + 3208);
  }
  if (!*((unsigned char *)this + 664))
  {
    if (*((char *)this + 615) < 0)
    {
      if (!*((void *)this + 75)) {
        goto LABEL_35;
      }
    }
    else if (!*((unsigned char *)this + 615))
    {
      goto LABEL_35;
    }
    if (*((char *)this + 639) < 0)
    {
      if (!*((void *)this + 78)) {
        goto LABEL_35;
      }
    }
    else if (!*((unsigned char *)this + 639))
    {
      goto LABEL_35;
    }
    uint64_t v11 = BYTE7(v166);
    if (SBYTE7(v166) < 0) {
      uint64_t v11 = *((void *)&v165 + 1);
    }
    if (v11)
    {
      uint64_t v12 = HIBYTE(v167);
      if (v167 < 0) {
        uint64_t v12 = v167;
      }
      if (v12)
      {
        BOOL v10 = ims::AccessNetwork::isNR((IMSCallInfo *)((char *)this + 592))
           && ims::AccessNetwork::isLTE((ims::AccessNetwork *)&v165);
        std::string::basic_string[abi:ne180100]<0>(&v133, "call");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v27 = ims::debug((uint64_t)&v133, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"start ANI: ", 11);
        *(unsigned char *)(v27 + 17) = 0;
        LoggableString::LoggableString(&v162, (const std::string *)((char *)this + 592));
        (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 40))(v27, &v162);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)", current ANI: ", 15);
        *(unsigned char *)(v27 + 17) = 0;
        LoggableString::LoggableString(&v161, (const std::string *)&v165);
        (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 40))(v27, &v161);
        if (v10) {
          long long v28 = ": EPS Fallback happend during the call";
        }
        else {
          long long v28 = ": EPS Fallback did not happen during the call";
        }
        if (v10) {
          uint64_t v29 = 38;
        }
        else {
          uint64_t v29 = 45;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)v28, v29);
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v134) < 0) {
          operator delete((void *)v133);
        }
LABEL_36:
        if ((_BYTE)v170)
        {
          long long v133 = 0uLL;
          *(void *)&long long v134 = 0;
          if (!v10) {
            goto LABEL_58;
          }
          goto LABEL_38;
        }
LABEL_40:
        uint64_t v16 = *((void *)this + 16);
        if (!*(unsigned char *)(v16 + 1496) && !*(unsigned char *)(v16 + 1497))
        {
          std::string::basic_string[abi:ne180100]<0>(&v133, "call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v26 = ims::debug((uint64_t)&v133, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Not sending termination event for hidden call", 45);
          *(unsigned char *)(v26 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v26 + 17) = 0;
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v134) < 0) {
            operator delete((void *)v133);
          }
          BYTE4(v173) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 0);
          goto LABEL_323;
        }
        memset(&v162, 0, sizeof(v162));
        int v17 = *((_DWORD *)a2 + 10);
        switch(v17)
        {
          case 0:
          case 4:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v30 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            std::string v31 = (unsigned char *)ImsOutStream::operator<<(v30, "I hung up with ");
            (*(void (**)(uint64_t, unsigned char *))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v31);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v31[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            goto LABEL_93;
          case 1:
          case 5:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v32 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v32);
            std::string v33 = (unsigned char *)ImsOutStream::operator<<(v32, " hung up");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v33[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonNormal", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 2:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v59 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            std::string v60 = (unsigned char *)ImsOutStream::operator<<(v59, "I rejected call from ");
            (*(void (**)(uint64_t, unsigned char *))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v60);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v60[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
LABEL_93:
            ims::CFString::asString(@"kCallDisconnectionReasonNormal", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 3:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v61 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v61);
            std::string v62 = (unsigned char *)ImsOutStream::operator<<(v61, " Rejected");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v62[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonRemoteBusy", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 6:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v63 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v63);
            long long v64 = (unsigned char *)ImsOutStream::operator<<(v63, " answered elsewhere");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v64[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonAnsweredElsewhere", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 7:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v65 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v65);
            long long v66 = (unsigned char *)ImsOutStream::operator<<(v65, " not allowed as other secondary device is in use");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v66[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonSecondaryDeviceAlreadyInUse", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 8:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v67 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v67);
            uint64_t v68 = (unsigned char *)ImsOutStream::operator<<(v67, " Silent hangup completed");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v68[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            BYTE4(v173) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 0);
            goto LABEL_320;
          case 9:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v69 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v69);
            int v70 = (unsigned char *)ImsOutStream::operator<<(v69, " transferred to another device");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v70[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonTransferredToOtherDevice", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 11:
          case 12:
          case 13:
          case 14:
          case 29:
            if (v17 == 11 && v10)
            {
              (*(void (**)(long long *__return_ptr))(**((void **)this + 4) + 192))(&v133);
              long long v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v133);
              long long v20 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v19);
              if (ImsPrefs::BOOLValue(v19, v20)) {
                BOOL v21 = *((_DWORD *)this + 144) < 3;
              }
              else {
                BOOL v21 = 0;
              }
              if (*((void *)&v133 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
              }
              if (v21)
              {
                std::string::basic_string[abi:ne180100]<0>(&v133, "call");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                uint64_t v34 = ims::debug((uint64_t)&v133, (uint64_t)__p);
                int64_t v35 = (unsigned char *)ImsOutStream::operator<<(v34, "Network error resulting in redial over LTE with ");
                (*(void (**)(uint64_t, unsigned char *))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v35);
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v35[17] = 0;
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v134) < 0) {
                  operator delete((void *)v133);
                }
                goto LABEL_107;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v36 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v37 = (unsigned char *)ImsOutStream::operator<<(v36, "Network error resulting in redial with ");
            (*(void (**)(uint64_t, unsigned char *))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v37);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v37[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonNetworkError", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 15:
            uint64_t v158 = 0;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            long long v134 = 0u;
            long long v135 = 0u;
            long long v133 = 0u;
            SipUri::SipUri((SipUri *)&v133);
            std::string::basic_string[abi:ne180100]<0>(__p, "call");
            std::string::basic_string[abi:ne180100]<0>(&v161, "");
            uint64_t v75 = ims::debug((uint64_t)__p, (uint64_t)&v161);
            uint64_t v76 = ImsOutStream::operator<<(v75, "Call to ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v76);
            uint64_t v77 = (unsigned char *)ImsOutStream::operator<<(v76, " requires emergency session");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v77[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            uint64_t v79 = (uint64_t)v78;
            if (v78)
            {
              SipUri::SipUri((SipUri *)__p, (const SipUri *)(v78 + 592));
              SipUri::operator=((SipUri *)&v133, (uint64_t)__p);
              SipUri::~SipUri((SipUri *)__p);
              uint64_t v79 = *(unsigned char *)(v79 + 1000) != 0;
            }
            BYTE4(v173) = IMSCallManager::sendCallEndRequest(*((IMSCallManager **)this + 3), (std::__shared_weak_count **)this, 1);
            uint64_t v80 = *((void *)this + 3);
            IMSCallInfo::uuid((IMSCallInfo *)v130, (uint64_t)this);
            IMSCallManager::sendEmergencySessionRequiredNotification(v80, (uint64_t)v130, (uint64_t)&v133, v79);
            v130[0] = &unk_1F20B3708;
            if (v131 < 0) {
              operator delete((void *)v130[1]);
            }
            SipUri::~SipUri((SipUri *)&v133);
            goto LABEL_320;
          case 16:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v81 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v82 = ImsOutStream::operator<<(v81, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v82);
            uint64_t v83 = (unsigned char *)ImsOutStream::operator<<(v82, " due to ");
            int v84 = *((_DWORD *)a2 + 10);
            if (v84 > 37) {
              int v84 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v84));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v83 + 40))(v83, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v83[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonForbidden", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 17:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v85 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            char v86 = (unsigned char *)ImsOutStream::operator<<(v85, "INVITE timed out to ");
            (*(void (**)(uint64_t, unsigned char *))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v86);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v86 + 64))(v86, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v86[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonTimeout", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 19:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v38 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v39 = ImsOutStream::operator<<(v38, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v39);
            std::string::size_type v40 = (unsigned char *)ImsOutStream::operator<<(v39, " due to ");
            int v41 = *((_DWORD *)a2 + 10);
            if (v41 > 37) {
              int v41 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v41));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v40 + 40))(v40, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v40[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonMediaError", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 20:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v87 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v88 = ImsOutStream::operator<<(v87, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v88);
            int v89 = (unsigned char *)ImsOutStream::operator<<(v88, " due to ");
            int v90 = *((_DWORD *)a2 + 10);
            if (v90 > 37) {
              int v90 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v90));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v89 + 40))(v89, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v89 + 64))(v89, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v89[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonMediaTimeout", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 21:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v91 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v92 = ImsOutStream::operator<<(v91, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v92);
            uint64_t v93 = (unsigned char *)ImsOutStream::operator<<(v92, " due to ");
            int v94 = *((_DWORD *)a2 + 10);
            if (v94 > 37) {
              int v94 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v94));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v93 + 40))(v93, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v93[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonMediaHeartbeatTimeout", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 22:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v42 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v43 = ImsOutStream::operator<<(v42, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v43);
            uint64_t v44 = (unsigned char *)ImsOutStream::operator<<(v43, " due to ");
            int v45 = *((_DWORD *)a2 + 10);
            if (v45 > 37) {
              int v45 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v45));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v44 + 40))(v44, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v44[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonLocalSocketError", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 24:
            if (!v10) {
              goto LABEL_284;
            }
            (*(void (**)(long long *__return_ptr))(**((void **)this + 4) + 192))(&v133);
            uint64_t v46 = (ImsPrefs *)SipStack::prefs((SipStack *)v133);
            uint64_t v47 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v46);
            if (ImsPrefs::BOOLValue(v46, v47)) {
              BOOL v48 = *((_DWORD *)this + 144) < 3;
            }
            else {
              BOOL v48 = 0;
            }
            if (*((void *)&v133 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
            }
            if (v48)
            {
              std::string::basic_string[abi:ne180100]<0>(&v133, "call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v109 = ims::debug((uint64_t)&v133, (uint64_t)__p);
              uint64_t v110 = ImsOutStream::operator<<(v109, "Call to ");
              (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v110);
              int v111 = (unsigned char *)ImsOutStream::operator<<(v110, " requires redial over LTE due to LocalQosTimeout");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v111 + 64))(v111, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v111[17] = 0;
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v134) < 0) {
                operator delete((void *)v133);
              }
LABEL_107:
              ims::CFString::asString(@"kCallDisconnectionReasonRequiresRedialOverLteOnly", (const void *)0x8000100, (std::string *)&v133);
            }
            else
            {
LABEL_284:
              std::string::basic_string[abi:ne180100]<0>(&v133, "call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v112 = ims::debug((uint64_t)&v133, (uint64_t)__p);
              uint64_t v113 = ImsOutStream::operator<<(v112, "Disconnected from ");
              (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v113);
              int v114 = (unsigned char *)ImsOutStream::operator<<(v113, " as in the dedault case due to LocalQosTimeout");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v114[17] = 0;
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v134) < 0) {
                operator delete((void *)v133);
              }
LABEL_288:
              ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, (std::string *)&v133);
            }
            break;
          case 31:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v49 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v49);
            uint64_t v50 = (unsigned char *)ImsOutStream::operator<<(v49, " failed: we cannot support emergency calls in this location");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v50[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonNoEmergencyCallLocation", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 32:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v95 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v96 = ImsOutStream::operator<<(v95, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v96);
            int v97 = (unsigned char *)ImsOutStream::operator<<(v96, " due to ");
            int v98 = *((_DWORD *)a2 + 10);
            if (v98 > 37) {
              int v98 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v98));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v97 + 40))(v97, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v97[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonAudioUnit", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 33:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v51 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v52 = ImsOutStream::operator<<(v51, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v52);
            std::string v53 = (unsigned char *)ImsOutStream::operator<<(v52, " due to ");
            int v54 = *((_DWORD *)a2 + 10);
            if (v54 > 37) {
              int v54 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v54));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v53 + 40))(v53, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v53[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonMediaserverCrash", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 34:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v99 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v99);
            int v100 = (unsigned char *)ImsOutStream::operator<<(v99, " Declined, locally busy.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v100[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonLocalBusy", (const void *)0x8000100, (std::string *)&v133);
            break;
          case 35:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v101 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v102 = ImsOutStream::operator<<(v101, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v102);
            int v103 = (unsigned char *)ImsOutStream::operator<<(v102, " due to ");
            int v104 = *((_DWORD *)a2 + 10);
            if (v104 > 37) {
              int v104 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v104));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v103 + 40))(v103, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v103[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kIMSCallDisconnectionReasonBasebandCrash", (const void *)0x8000100, (std::string *)&v133);
            goto LABEL_271;
          case 36:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v55 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v56 = ImsOutStream::operator<<(v55, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v56);
            std::string v57 = (unsigned char *)ImsOutStream::operator<<(v56, " due to ");
            int v58 = *((_DWORD *)a2 + 10);
            if (v58 > 37) {
              int v58 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v58));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v57 + 40))(v57, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v57[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonRequiresCSFB", (const void *)0x8000100, (std::string *)&v133);
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v162.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v133;
            v162.__r_.__value_.__r.__words[2] = v134;
            LOBYTE(v170) = 1;
            goto LABEL_274;
          case 37:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v105 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v106 = ImsOutStream::operator<<(v105, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v106);
            int v107 = (unsigned char *)ImsOutStream::operator<<(v106, " due to ");
            int v108 = *((_DWORD *)a2 + 10);
            if (v108 > 37) {
              int v108 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v108));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v107 + 40))(v107, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v107 + 64))(v107, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v107[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonRequiresRedial", (const void *)0x8000100, (std::string *)&v133);
LABEL_271:
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v162.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v133;
            v162.__r_.__value_.__r.__words[2] = v134;
LABEL_274:
            BYTE2(v170) = 1;
            goto LABEL_292;
          default:
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v71 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            uint64_t v72 = ImsOutStream::operator<<(v71, "Disconnected from ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v72);
            uint64_t v73 = (unsigned char *)ImsOutStream::operator<<(v72, " due to ");
            int v74 = *((_DWORD *)a2 + 10);
            if (v74 > 37) {
              int v74 = 10;
            }
            LoggableString::LoggableString(&v161, (const std::string *)(reasonStrings + 24 * v74));
            (*(void (**)(unsigned char *, std::string *))(*(void *)v73 + 40))(v73, &v161);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v73[17] = 0;
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v161.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            goto LABEL_288;
        }
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v133;
        v162.__r_.__value_.__r.__words[2] = v134;
LABEL_292:
        if (*((unsigned char *)a2 + 148) && *(void *)(*((void *)this + 16) + 520))
        {
          IMSCallInfo::stack(this, &v133);
          BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v133 + 3160));
          if (*((void *)&v133 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
          }
          if (isNR)
          {
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v116 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            unsigned int v117 = (unsigned char *)ImsOutStream::operator<<(v116, "Anonymous redial requested for NR emergency call.  Doing EPS fallback instead.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v117 + 64))(v117, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v117[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v133, "call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v118 = ims::debug((uint64_t)&v133, (uint64_t)__p);
            unsigned int v119 = (unsigned char *)ImsOutStream::operator<<(v118, "Anonymous redial is set for this call, attempting new emergency call.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v119[17] = 0;
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v134) < 0) {
              operator delete((void *)v133);
            }
            long long v133 = 0uLL;
            uint64_t v120 = *((void *)this + 4);
            int v121 = (std::__shared_weak_count *)*((void *)this + 17);
            uint64_t v128 = *((void *)this + 16);
            int v129 = v121;
            if (v121) {
              atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BambiClient::initializeRedial(v120, &v128, 0, 0, (uint64_t)&v133);
            if (v129) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v129);
            }
            uint64_t v122 = v133;
            if ((void)v133)
            {
              *(void *)(*((void *)this + 16) + 408) = 0;
              uint64_t v123 = *((void *)&v133 + 1);
              if (*((void *)&v133 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v133 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              int v124 = (std::__shared_weak_count *)*((void *)this + 17);
              *((void *)this + 16) = v122;
              *((void *)this + 17) = v123;
              if (v124) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v124);
              }
              *((unsigned char *)this + 574) = 1;
              *((unsigned char *)this + 571) = 0;
              if (*((void *)&v133 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
              }
              goto LABEL_320;
            }
            if (*((void *)&v133 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
            }
          }
        }
        int v125 = (IMSCallManager *)*((void *)this + 3);
        IMSCallInfo::uuid((IMSCallInfo *)v126, (uint64_t)this);
        IMSCallManager::sendCallDisconnectionNotification(v125, (uint64_t)v126, &v162, (uint64_t)&v170);
        v126[0] = &unk_1F20B3708;
        if (v127 < 0) {
          operator delete((void *)v126[1]);
        }
LABEL_320:
        if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_323;
        }
        uint64_t v25 = (void *)v162.__r_.__value_.__r.__words[0];
        goto LABEL_322;
      }
    }
LABEL_35:
    BOOL v10 = 0;
    goto LABEL_36;
  }
  if (!(_BYTE)v170)
  {
    BOOL v10 = 1;
    goto LABEL_40;
  }
  long long v133 = 0uLL;
  *(void *)&long long v134 = 0;
LABEL_38:
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 4) + 192))(__p);
  uint64_t v13 = (ImsPrefs *)SipStack::prefs((SipStack *)__p[0].__r_.__value_.__l.__data_);
  long long v14 = (void **)ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v13);
  if (ImsPrefs::BOOLValue(v13, v14)) {
    BOOL v15 = *((_DWORD *)this + 144) < 3;
  }
  else {
    BOOL v15 = 0;
  }
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  if (v15)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v162, "");
    uint64_t v22 = ims::debug((uint64_t)__p, (uint64_t)&v162);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Call to ", 8);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" requires redial over LTE", 25);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    ims::CFString::asString(@"kCallDisconnectionReasonRequiresRedialOverLteOnly", (const void *)0x8000100, __p);
    goto LABEL_63;
  }
LABEL_58:
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v162, "");
  uint64_t v23 = ims::debug((uint64_t)__p, (uint64_t)&v162);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Call to ", 8);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 16) + 1048) + 40))(*((void *)this + 16) + 1048, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" requires CS fallback", 21);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  ims::CFString::asString(@"kCallDisconnectionReasonRequiresCSFB", (const void *)0x8000100, __p);
LABEL_63:
  if (SBYTE7(v134) < 0) {
    operator delete((void *)v133);
  }
  long long v133 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(void *)&long long v134 = *((void *)&__p[0].__r_.__value_.__l + 2);
  BYTE2(v170) = 1;
  long long v24 = (IMSCallManager *)*((void *)this + 3);
  IMSCallInfo::uuid((IMSCallInfo *)v159, (uint64_t)this);
  IMSCallManager::sendCallDisconnectionNotification(v24, (uint64_t)v159, (std::string *)&v133, (uint64_t)&v170);
  v159[0] = &unk_1F20B3708;
  if (v160 < 0) {
    operator delete((void *)v159[1]);
  }
  if (SBYTE7(v134) < 0)
  {
    uint64_t v25 = (void *)v133;
LABEL_322:
    operator delete(v25);
  }
LABEL_323:
  if (v164) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v164);
  }
  if (SHIBYTE(v167) < 0) {
    operator delete(*((void **)&v166 + 1));
  }
  if (SBYTE7(v166) < 0) {
    operator delete((void *)v165);
  }
  if (SHIBYTE(v176) < 0) {
    operator delete(*((void **)&v175 + 1));
  }
  if (SBYTE7(v175) < 0) {
    operator delete((void *)v174);
  }
  if (SHIBYTE(v172) < 0)
  {
    uint64_t v8 = (void *)v171;
    goto LABEL_335;
  }
LABEL_336:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52941B8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 248);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ims::AccessNetwork::~AccessNetwork((void **)(v2 - 240));
  ims::DisconnectInfo::~DisconnectInfo((void **)(v2 - 160));
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void IMSCallInfo::handleMediaInitializedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = *((void *)this + 3);
  IMSCallInfo::uuid((IMSCallInfo *)v5, (uint64_t)this);
  (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v4 + 232))(v4, v5, @"kCallStatusMediaInitialized", *((unsigned __int8 *)this + 40), a2);
  v5[0] = &unk_1F20B3708;
  if (v6 < 0) {
    operator delete((void *)v5[1]);
  }
}

void sub_1C52947BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleMediaActivationEvent(IMSCallInfo *this, BambiCallEvent *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMedia", 11);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "A";
  }
  else {
    uint64_t v7 = "Dea";
  }
  if (a3) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ctivationEvent", 14);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (*((void *)this + 69))
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Ignore for conference participant.", 34);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    return;
  }
  *((unsigned char *)this + 572) = a3;
  BOOL v10 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (!v10) {
    return;
  }
  uint64_t v11 = *((void *)a2 + 2);
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  uint64_t v13 = v12;
  if (v12) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != *((void *)this + 16))
  {
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  BOOL v15 = *(SipSession **)(v14 + 392);
  if (v15)
  {
    int v16 = SipSession::confirmed(v15);
    if (!v13) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  int v16 = 0;
  if (v13) {
LABEL_26:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_27:
  std::__shared_weak_count::__release_weak(v10);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v25, (uint64_t)this);
    long long v18 = kIMSCallStatusMediaActive;
    if (!a3) {
      long long v18 = kIMSCallStatusMediaInactive;
    }
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v17 + 232))(v17, v25, *v18, *((unsigned __int8 *)this + 40), a2);
    v25[0] = &unk_1F20B3708;
    if (v26 < 0) {
      operator delete((void *)v25[1]);
    }
    uint64_t v19 = *((void *)this + 3);
    long long v20 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v23 = *((void *)this + 16);
    long long v24 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSCallInfo::uuid((IMSCallInfo *)v21, (uint64_t)this);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v19 + 208))(v19, &v23, a3, v21);
    v21[0] = &unk_1F20B3708;
    if (v22 < 0) {
      operator delete((void *)v21[1]);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
}

void sub_1C5294B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionConfirmedEvent(IMSCallInfo *this, BambiCallSessionConfirmedEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "call");
    std::string::basic_string[abi:ne180100]<0>(&v30, "");
    uint64_t v8 = ims::debug((uint64_t)&v33, (uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Session confirmed with ", 23);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 1048) + 40))(v5 + 1048, v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v32 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v28, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, void))(*(void *)v9 + 232))(v9, v28, @"kCallStatusMediaActive", *((unsigned __int8 *)this + 40), 0);
    v28[0] = &unk_1F20B3708;
    if (v29 < 0) {
      operator delete((void *)v28[1]);
    }
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v26 = *((void *)this + 16);
    uint64_t v27 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSCallInfo::uuid((IMSCallInfo *)v24, (uint64_t)this);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v10 + 208))(v10, &v26, 1, v24);
    v24[0] = &unk_1F20B3708;
    if (v25 < 0) {
      operator delete((void *)v24[1]);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v12 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v22, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallSessionConfirmedEvent *))(*(void *)v12 + 232))(v12, v22, @"kCallStatusActive", *((unsigned __int8 *)this + 40), a2);
    v22[0] = &unk_1F20B3708;
    if (v23 < 0) {
      operator delete((void *)v22[1]);
    }
    uint64_t v13 = (BambiCall *)*((void *)this + 16);
    if (v13) {
      BambiCall::sendHoldResumeIndication(v13, (*((_DWORD *)v13 + 112) & 0xFFFFFFFE) == 2);
    }
    if (*((_DWORD *)this + 144) == 2 && *((void *)this + 16))
    {
      uint64_t v14 = *((void *)this + 3);
      IMSCallInfo::stack(this, &v30);
      if (v30[4183] < 0) {
        std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)v30 + 520), *((void *)v30 + 521));
      }
      else {
        std::string v33 = *(std::string *)(v30 + 4160);
      }
      IMSCallManager::sendCallStatusRequest(v14, (uint64_t)&v33, 1, *(unsigned __int8 *)(*((void *)this + 16) + 1496), *(void *)(*((void *)this + 16) + 520) != 0);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      *((_DWORD *)this + 144) = 3;
    }
    uint64_t v15 = *((void *)this + 3);
    uint64_t v16 = *(void *)(v15 + 24);
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 32);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(v16 + 288);
    uint64_t v19 = *(std::__shared_weak_count **)(v16 + 296);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v20 = (std::__shared_weak_count *)*((void *)this + 17);
    v21[0] = *((void *)this + 16);
    v21[1] = (uint64_t)v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSMetricsManager::logSessionConfirmedEvent(v18, v21, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40));
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "call");
    std::string::basic_string[abi:ne180100]<0>(&v30, "");
    uint64_t v7 = ims::debug((uint64_t)&v33, (uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionConfirmedEvent for an unknown call", 60);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v32 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C529512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 96);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionAcknowledgedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (!v5) {
      uint64_t v4 = 0;
    }
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  if (v4 == *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Session acknowledged with ", 26);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + 1048) + 40))(v4 + 1048, v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    uint64_t v9 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v10, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, void))(*(void *)v9 + 232))(v9, v10, @"kCallStatusAcknowledged", *((unsigned __int8 *)this + 40), 0);
    v10[0] = &unk_1F20B3708;
    if (v11 < 0)
    {
      uint64_t v7 = (void *)v10[1];
      goto LABEL_17;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"IMSCallInfo::handleSessionAcknowledgedEvent for an unknown call", 63);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0)
    {
      uint64_t v7 = v14[0];
LABEL_17:
      operator delete(v7);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5295508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionRequestedEvent(IMSCallInfo *this, BambiCallSessionRequestedEvent *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (!v5) {
      uint64_t v4 = 0;
    }
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  if (v4 != *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v44, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent for an unknown call", 60);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    if (v45 < 0)
    {
      uint64_t v7 = v44[0];
LABEL_57:
      operator delete(v7);
      goto LABEL_72;
    }
    goto LABEL_72;
  }
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
  v41[0] = v4;
  v41[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = BambiClient::unconfirmedCallsExcludingCall(v8, 0, v41);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v10)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    (*(void (**)(SipStack **__return_ptr))(**((void **)this + 4) + 192))(&v37);
    if (v37)
    {
      char v13 = (ImsPrefs *)SipStack::prefs(v37);
      uint64_t v14 = (void **)ImsPrefs::getMaxCallCountKey(v13);
      unsigned int v15 = ImsPrefs::intValue(v13, v14);
    }
    else
    {
      unsigned int v15 = 3;
    }
    uint64_t v16 = *((void *)this + 4);
    v44[0] = 0;
    v44[1] = 0;
    if (BambiClient::callCountExcludingCall(v16, v44) > (unint64_t)v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v17 = ims::info((uint64_t)v44, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent when we already have ", 62);
      *(unsigned char *)(v17 + 17) = 0;
      uint64_t v18 = *((void *)this + 4);
      v46[0] = 0;
      v46[1] = 0;
      BambiClient::callCountExcludingCall(v18, v46);
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" calls. Declining.", 18);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      uint64_t v19 = *((void *)this + 3);
      uint64_t v35 = &unk_1F20B3708;
      if (*((char *)this + 103) < 0) {
        std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 10), *((void *)this + 11));
      }
      else {
        std::string v36 = *(std::string *)((char *)this + 80);
      }
      std::string::basic_string[abi:ne180100]<0>(v44, "AlreadyOnMaxCalls");
      (*(void (**)(uint64_t, void **, void **))(*(void *)v19 + 40))(v19, &v35, v44);
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      uint64_t v35 = &unk_1F20B3708;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      goto LABEL_70;
    }
    uint64_t v20 = *((void *)this + 3);
    uint64_t v21 = *(void *)(v20 + 24);
    char v22 = *(std::__shared_weak_count **)(v20 + 32);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = *(void *)(v21 + 288);
    long long v24 = *(std::__shared_weak_count **)(v21 + 296);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v25 = (std::__shared_weak_count *)*((void *)this + 17);
    v34[0] = *((void *)this + 16);
    v34[1] = (uint64_t)v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSMetricsManager::logSessionRequestedEvent(v23, v34, *((unsigned __int8 *)this + 40), 0);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v28 = *((void *)this + 3);
    uint64_t v29 = *(void *)(v28 + 24);
    char v30 = *(std::__shared_weak_count **)(v28 + 32);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = *(void *)(v29 + 288);
    char v32 = *(std::__shared_weak_count **)(v29 + 296);
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      if (*(unsigned char *)(v31 + 224))
      {
        isWifuint64_t i = ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v37 + 3160));
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        if (!v30) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    else if (*(unsigned char *)(v31 + 224))
    {
      BOOL v26 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)((char *)v37 + 3160));
      isWifuint64_t i = v26;
      if (!v30)
      {
LABEL_50:
        if (!isWifi)
        {
LABEL_70:
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          goto LABEL_72;
        }
LABEL_69:
        IMSCallManager::sendIncomingCallStatusNotification((IMSCallManager *)v26, this, v27);
        goto LABEL_70;
      }
LABEL_49:
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      goto LABEL_50;
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::info((uint64_t)v44, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"IMSCallInfo::handleSessionRequestedEvent during an existing alerting call. Declining.", 85);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  uint64_t v12 = *((void *)this + 3);
  uint64_t v39 = &unk_1F20B3708;
  if (*((char *)this + 103) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else {
    std::string v40 = *(std::string *)((char *)this + 80);
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "EstablishingAnotherCall");
  (*(void (**)(uint64_t, void **, void **))(*(void *)v12 + 40))(v12, &v39, v44);
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  uint64_t v39 = &unk_1F20B3708;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v7 = (void *)v40.__r_.__value_.__r.__words[0];
    goto LABEL_57;
  }
LABEL_72:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5295B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendIncomingCallStatusNotification(IMSCallManager *this, IMSCallInfo *a2, BambiCallEvent *a3)
{
  memset(v74, 0, sizeof(v74));
  long long v72 = 0u;
  *(_OWORD *)uint64_t v73 = 0u;
  *(_OWORD *)int v70 = 0u;
  long long v71 = 0u;
  *(_OWORD *)uint64_t v68 = 0u;
  long long v69 = 0u;
  *(_OWORD *)uint64_t v67 = 0u;
  memset(v66, 0, sizeof(v66));
  if (a2)
  {
    uint64_t v5 = (BambiCall *)*((void *)a2 + 16);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 17);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (v5)
      {
        uint64_t v5 = (BambiCall *)*((void *)a2 + 16);
        uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 17);
        memset(&__p, 0, sizeof(__p));
        if (v6)
        {
          char v7 = 0;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          char v7 = 1;
        }
LABEL_13:
        BambiCall::remoteDisplayName(v5, &__p);
        if ((v7 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        memset(&__s, 0, sizeof(__s));
        int v10 = (BambiCall *)*((void *)a2 + 16);
        uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 17);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiCall::remoteDisplayNumber(v10, (uint64_t)&__s);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        std::string v62 = 0;
        uint64_t v63 = 0;
        IMSCallInfo::stack(a2, &v62);
        if (v62)
        {
          uint64_t v12 = (ImsPrefs *)SipStack::prefs(v62);
          EnableSenderNameKey = (void **)ImsPrefs::getEnableSenderNameKey(v12);
          if (ImsPrefs::BOOLValue(v12, EnableSenderNameKey))
          {
            ims::removeQuotes((uint64_t)&__p, &__str);
            std::string::basic_string[abi:ne180100]<0>(&v60, "\"\\"");
            ims::unescapeString((uint64_t *)&__str, 0x5Cu, (uint64_t)&v60, &v58);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = v58;
            *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
            v58.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          }
          std::string::operator=(v66, &__p);
          unsigned int v15 = (BambiCall *)*((void *)a2 + 16);
          uint64_t v16 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BambiCall::remoteDisplayNumber(v15, (uint64_t)&v58);
          if (SHIBYTE(v66[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66[1].__r_.__value_.__l.__data_);
          }
          v66[1] = v58;
          *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
          v58.__r_.__value_.__s.__data_[0] = 0;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          uint64_t v17 = (BambiCall *)*((void *)a2 + 16);
          uint64_t v18 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BambiCall::remoteDisplayCountryCode(v17, &v58);
          if (SHIBYTE(v68[0]) < 0) {
            operator delete(v67[0]);
          }
          *(_OWORD *)uint64_t v67 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
          v68[0] = (void *)v58.__r_.__value_.__r.__words[2];
          *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
          v58.__r_.__value_.__s.__data_[0] = 0;
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          uint64_t v19 = *((void *)a2 + 16);
          uint64_t v20 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::operator=((std::string *)&v68[1], (const std::string *)(v19 + 472));
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          uint64_t v21 = (BambiCall *)*((void *)a2 + 16);
          char v22 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL IsPrivate = BambiCall::senderIsPrivate(v21);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            if (IsPrivate)
            {
LABEL_52:
              LOBYTE(v70[0]) = 1;
              std::string::basic_string[abi:ne180100]<0>(&__str, "call");
              std::string::basic_string[abi:ne180100]<0>(&v60, "");
              uint64_t v24 = ims::debug((uint64_t)&__str, (uint64_t)&v60);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Incoming call ", 14);
              *(unsigned char *)(v24 + 17) = 0;
              IMSCallInfo::uuid((IMSCallInfo *)&v58, (uint64_t)a2);
              (*(void (**)(std::string *, uint64_t))(v58.__r_.__value_.__r.__words[0] + 16))(&v58, v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" from blocked number", 20);
              *(unsigned char *)(v24 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v24 + 17) = 0;
              goto LABEL_62;
            }
          }
          else if (BambiCall::senderIsPrivate(v21))
          {
            goto LABEL_52;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "call");
          std::string::basic_string[abi:ne180100]<0>(&v60, "");
          uint64_t v25 = ims::debug((uint64_t)&__str, (uint64_t)&v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Incoming call ", 14);
          *(unsigned char *)(v25 + 17) = 0;
          IMSCallInfo::uuid((IMSCallInfo *)&v58, (uint64_t)a2);
          (*(void (**)(std::string *, uint64_t))(v58.__r_.__value_.__r.__words[0] + 16))(&v58, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" from ", 6);
          *(unsigned char *)(v25 + 17) = 0;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__s.__r_.__value_.__l.__size_)
            {
              std::string::__init_copy_ctor_external(&v57, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              goto LABEL_60;
            }
          }
          else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
          {
            std::string v57 = __s;
            goto LABEL_60;
          }
          std::string::basic_string[abi:ne180100]<0>(&v57, "Unknown number");
LABEL_60:
          (*(void (**)(uint64_t, std::string *))(*(void *)v25 + 32))(v25, &v57);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
LABEL_62:
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = __s.__r_.__value_.__l.__size_;
          }
          memset(&__str, 0, sizeof(__str));
          p_str = &__str;
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 1);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_s = &__s;
            }
            else {
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            memmove(p_str, p_s, size);
          }
          *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + size) = 10;
          memset(&v60, 0, sizeof(v60));
          uint64_t v29 = *((void *)a2 + 16);
          char v30 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(char *)(v29 + 703) < 0) {
            std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v29 + 680), *(void *)(v29 + 688));
          }
          else {
            std::string v60 = *(std::string *)(v29 + 680);
          }
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v31 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v31 = v60.__r_.__value_.__l.__size_;
          }
          if (v31)
          {
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v32 = &v60;
            }
            else {
              char v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            std::string::append(&__str, (const std::string::value_type *)v32, v31);
          }
          std::string::operator=((std::string *)&v70[1], &__str);
          BYTE1(v70[0]) = *((unsigned char *)a2 + 40);
          uint64_t v34 = *((void *)a2 + 16);
          std::string v33 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v33)
          {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v35 = *(void *)(v34 + 392);
            if (v35) {
              LOBYTE(v35) = *(unsigned char *)(v35 + 1640) & 1;
            }
            LOBYTE(v72) = v35;
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            uint64_t v34 = *((void *)a2 + 16);
            std::string v36 = (std::__shared_weak_count *)*((void *)a2 + 17);
            if (v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v37 = *(void *)(v34 + 392);
              if (v37) {
                LODWORD(v37) = *(_DWORD *)(v37 + 1644);
              }
              DWORD1(v72) = v37;
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              goto LABEL_106;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v34 + 392);
            if (v38) {
              LOBYTE(v38) = *(unsigned char *)(v38 + 1640) & 1;
            }
            LOBYTE(v72) = v38;
          }
          uint64_t v39 = *(void *)(v34 + 392);
          if (v39) {
            LODWORD(v39) = *(_DWORD *)(v39 + 1644);
          }
          DWORD1(v72) = v39;
LABEL_106:
          std::string v40 = (ImsPrefs *)SipStack::prefs(v62);
          EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v40);
          int v42 = ImsPrefs::BOOLValue(v40, EnableBrandedCallingKey);
          char v43 = (BambiCall *)*((void *)a2 + 16);
          uint64_t v44 = (std::__shared_weak_count *)*((void *)a2 + 17);
          if (v42)
          {
            if (v44) {
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BambiCall::remoteCompanyName(v43, &v58);
            std::string::size_type v45 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
            if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v45 = v58.__r_.__value_.__l.__size_;
            }
            if (v45)
            {
              uint64_t v47 = *((void *)a2 + 16);
              uint64_t v46 = (std::__shared_weak_count *)*((void *)a2 + 17);
              if (v46) {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v48 = *(void *)(v47 + 392);
              if (v48) {
                LODWORD(v48) = *(_DWORD *)(v48 + 1644);
              }
              BOOL v49 = v48 == 1;
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
            }
            else
            {
              BOOL v49 = 0;
            }
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            if (v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            }
            char v43 = (BambiCall *)*((void *)a2 + 16);
            uint64_t v44 = (std::__shared_weak_count *)*((void *)a2 + 17);
            if (v49)
            {
              if (v44) {
                atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BambiCall::remoteCompanyName(v43, &v58);
              if (SHIBYTE(v66[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v66[0].__r_.__value_.__l.__data_);
              }
              v66[0] = v58;
              *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
              v58.__r_.__value_.__s.__data_[0] = 0;
              if (v44) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v44);
              }
              uint64_t v50 = (BambiCall *)*((void *)a2 + 16);
              uint64_t v51 = (std::__shared_weak_count *)*((void *)a2 + 17);
              if (v51) {
                atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BambiCall::remoteImageUrl(v50, &v58);
              if (SHIBYTE(v74[3]) < 0) {
                operator delete(v74[1]);
              }
              *(std::string *)&v74[1] = v58;
              *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
              v58.__r_.__value_.__s.__data_[0] = 0;
              if (v51) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v51);
              }
              char v43 = (BambiCall *)*((void *)a2 + 16);
              uint64_t v44 = (std::__shared_weak_count *)*((void *)a2 + 17);
            }
          }
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BambiCall::spamInfo(v43, (uint64_t)&v58);
          *((void *)&v72 + 1) = v58.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v74[0]) < 0) {
            operator delete(v73[0]);
          }
          *(_OWORD *)uint64_t v73 = *(_OWORD *)&v58.__r_.__value_.__r.__words[1];
          v74[0] = v59;
          HIBYTE(v59) = 0;
          v58.__r_.__value_.__s.__data_[8] = 0;
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          memset(&v57, 0, sizeof(v57));
          if (*((char *)v62 + 4183) < 0)
          {
            std::string::__init_copy_ctor_external(&v57, *((const std::string::value_type **)v62 + 520), *((void *)v62 + 521));
          }
          else
          {
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *((_OWORD *)v62 + 260);
            v57.__r_.__value_.__r.__words[2] = *((void *)v62 + 522);
          }
          std::string::basic_string[abi:ne180100]<0>(v55, "audit");
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          uint64_t v52 = ims::debug((uint64_t)v55, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"Creating ims::Client handle for call ", 37);
          *(unsigned char *)(v52 + 17) = 0;
          IMSCallInfo::uuid((IMSCallInfo *)&v58, (uint64_t)a2);
          (*(void (**)(std::string *, uint64_t))(v58.__r_.__value_.__r.__words[0] + 16))(&v58, v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)" on stack ", 10);
          *(unsigned char *)(v52 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v52 + 32))(v52, &v57);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v52 + 17) = 0;
          v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58.__r_.__value_.__l.__size_);
          }
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          if (v56 < 0) {
            operator delete(v55[0]);
          }
          IMSCallInfo::createCallHandle(a2);
        }
        std::string::basic_string[abi:ne180100]<0>(&v58, "legacy");
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        uint64_t v14 = ims::warn((uint64_t)&v58, (uint64_t)&__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to resolve sip stack for callid: ", 40);
        *(unsigned char *)(v14 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v9 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_159;
        }
        goto LABEL_160;
      }
    }
    else if (v5)
    {
      uint64_t v6 = 0;
      memset(&__p, 0, sizeof(__p));
      char v7 = 1;
      goto LABEL_13;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::error((uint64_t)&v58, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"sendIncomingCallStatusNotification does not have a valid callInfo", 65);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (void *)v58.__r_.__value_.__r.__words[0];
LABEL_159:
    operator delete(v9);
  }
LABEL_160:
  if (SHIBYTE(v74[3]) < 0) {
    operator delete(v74[1]);
  }
  if (SHIBYTE(v74[0]) < 0) {
    operator delete(v73[0]);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[1]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[1]);
  }
  if (SHIBYTE(v68[0]) < 0) {
    operator delete(v67[0]);
  }
  if (SHIBYTE(v66[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66[0].__r_.__value_.__l.__data_);
  }
}

void sub_1C5296990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51)
{
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  ims::CallIncomingInfo::~CallIncomingInfo(&a51);
  _Unwind_Resume(a1);
}

void sub_1C5296BCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a21) < 0) {
    JUMPOUT(0x1C5296BB8);
  }
  JUMPOUT(0x1C5296BBCLL);
}

uint64_t IMSCallInfo::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 104);
  return v2();
}

void IMSCallInfo::handleHoldIndicationEvent(IMSCallInfo *this, BambiCallHoldResumeIndicationEvent *a2)
{
  if (a2)
  {
    IMSCallInfo::stack(this, &v8);
    if (*(char *)(v8 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
    }
    else {
      std::string v10 = *(std::string *)(v8 + 4160);
    }
    uint64_t v4 = IMSClientManager::delegateForStack((void **)&v10.__r_.__value_.__l.__data_);
    IMSCallInfo::uuid((IMSCallInfo *)&v5, (uint64_t)this);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = __p;
    }
    (*(void (**)(uint64_t, std::string *, void, void))(*(void *)v4 + 208))(v4, &v7, *((unsigned int *)a2 + 11), *((unsigned int *)a2 + 10));
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = &unk_1F20B3708;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C5296D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleResumeIndicationEvent(IMSCallInfo *this, BambiCallHoldResumeIndicationEvent *a2)
{
  if (a2)
  {
    IMSCallInfo::stack(this, &v8);
    if (*(char *)(v8 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
    }
    else {
      std::string v10 = *(std::string *)(v8 + 4160);
    }
    uint64_t v4 = IMSClientManager::delegateForStack((void **)&v10.__r_.__value_.__l.__data_);
    IMSCallInfo::uuid((IMSCallInfo *)&v5, (uint64_t)this);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = __p;
    }
    (*(void (**)(uint64_t, std::string *, void, void))(*(void *)v4 + 200))(v4, &v7, *((unsigned int *)a2 + 11), *((unsigned int *)a2 + 10));
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = &unk_1F20B3708;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C5296F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionTerminatingEvent(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *a2)
{
  if (!*((unsigned char *)this + 571)) {
    IMSCallInfo::handleSessionTerminationEvent(this, a2);
  }
}

void IMSCallInfo::handleSessionTerminatedEvent(IMSCallInfo *this, BambiCallSessionTerminatedEvent *a2)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 32);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(v5 + 288);
  uint64_t v8 = *(std::__shared_weak_count **)(v5 + 296);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v7 + 176;
  for (uint64_t i = *(void *)(v7 + 184); i != v9; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, BambiCallSessionTerminatedEvent *))(**(void **)(i + 16) + 80))(*(void *)(i + 16), a2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!*((unsigned char *)this + 571))
  {
    uint64_t v11 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v18, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, void))(*(void *)v11 + 232))(v11, v18, @"kCallStatusMediaInactive", *((unsigned __int8 *)this + 40), 0);
    v18[0] = &unk_1F20B3708;
    if (v19 < 0) {
      operator delete((void *)v18[1]);
    }
    uint64_t v12 = *((void *)this + 3);
    char v13 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v16 = *((void *)this + 16);
    uint64_t v17 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSCallInfo::uuid((IMSCallInfo *)v14, (uint64_t)this);
    (*(void (**)(uint64_t, uint64_t *, void, void *))(*(void *)v12 + 208))(v12, &v16, 0, v14);
    v14[0] = &unk_1F20B3708;
    if (v15 < 0) {
      operator delete((void *)v14[1]);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    IMSCallInfo::handleSessionTerminationEvent(this, a2);
  }
}

void sub_1C52971E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

IMSCallInfo *IMSCallInfo::handleMetricOnlyEvent(IMSCallInfo *this, BambiCallEvent *lpsrc)
{
  if ((*((_DWORD *)lpsrc + 2) & 0xFFFFFFFE) == 0xE)
  {
    uint64_t v2 = this;
    IMSCallInfo::sendSessionTerminationMetric(v2, v3, 0);
    uint64_t v4 = (IMSCallManager *)*((void *)v2 + 3);
    return (IMSCallInfo *)IMSCallManager::sendCallEndRequest(v4, (std::__shared_weak_count **)v2, 0);
  }
  return this;
}

uint64_t IMSCallInfo::sendSessionTerminationMetric(IMSCallInfo *this, BambiCallSessionTerminationBaseEvent *a2, BOOL *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (!v8) {
      uint64_t v7 = 0;
    }
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  if (*((unsigned char *)a2 + 144) && !*((unsigned char *)a2 + 145))
  {
    IMSCallInfo::stack(this, &v31);
    if (v31)
    {
      IMSCallInfo::stack(this, &v29);
      if (*(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v29 + 144)) + 456)) {
        BOOL v26 = v7 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26 || !*(unsigned char *)(v7 + 1496))
      {
        BOOL v9 = 0;
      }
      else
      {
        IMSCallInfo::stack(this, &v27);
        BOOL v9 = *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(v27 + 144)) + 912) == 0;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (a3) {
    *a3 = v9;
  }
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *((void *)this + 3);
    uint64_t v13 = *(void *)(v12 + 24);
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 32);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(v13 + 288);
    uint64_t v16 = *(std::__shared_weak_count **)(v13 + 296);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = v15 + 176;
    for (uint64_t i = *(void *)(v15 + 184); i != v17; uint64_t i = *(void *)(i + 8))
      (*(void (**)(void, void *))(**(void **)(i + 16) + 80))(*(void *)(i + 16), v11);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  uint64_t v19 = *((void *)this + 3);
  uint64_t v20 = *(void *)(v19 + 24);
  uint64_t v21 = *(std::__shared_weak_count **)(v19 + 32);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v22 = *(IMSMetricsManager **)(v20 + 288);
  uint64_t v23 = *(std::__shared_weak_count **)(v20 + 296);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = IMSMetricsManager::logSessionTerminationEvent(v22, a2, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40), v9);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v24;
}

void sub_1C52975BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::sendCallEndRequest(IMSCallManager *this, std::__shared_weak_count **a2, char a3)
{
  memset(&v33, 0, sizeof(v33));
  IMSCallInfo::stack((IMSCallInfo *)a2, &v30);
  if (*((char *)v30 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)v30 + 520), *((void *)v30 + 521));
  }
  else {
    std::string v33 = *(std::string *)((char *)v30 + 4160);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v6 = a2[16];
  uint64_t v7 = a2[17];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    BOOL v9 = a2[16];
    uint64_t v8 = a2[17];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_26;
  }
  std::string v10 = a2[69];
  uint64_t v11 = a2[70];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    uint64_t v8 = 0;
    BOOL v9 = 0;
    goto LABEL_24;
  }
  uint64_t v12 = a2[69];
  uint64_t v13 = a2[70];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  shared_owners = (std::__shared_weak_count *)v12[6].__shared_owners_;
  if (shared_owners)
  {
    BOOL v9 = (std::__shared_weak_count *)v12[6].__vftable;
    atomic_fetch_add_explicit(&shared_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = std::__shared_weak_count::lock(shared_owners);
    if (!v8) {
      BOOL v9 = 0;
    }
    std::__shared_weak_count::__release_weak(shared_owners);
    if (!v13) {
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v9 = 0;
    uint64_t v8 = 0;
    if (!v13) {
      goto LABEL_24;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_24:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
LABEL_26:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9)
  {
    int shared_owners_low = LOBYTE(v9[62].__shared_owners_);
    goto LABEL_38;
  }
  uint64_t v16 = a2[69];
  uint64_t v17 = a2[70];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v16)
  {
    int shared_owners_low = *((unsigned __int8 *)a2 + 573);
    if (!v17) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v18 = a2[69];
  uint64_t v19 = a2[70];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int shared_owners_low = LOBYTE(v18[53].__shared_weak_owners_);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (!v17) {
      goto LABEL_38;
    }
LABEL_37:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_38;
  }
  int shared_owners_low = LOBYTE(v18[53].__shared_weak_owners_);
  if (v17) {
    goto LABEL_37;
  }
LABEL_38:
  if ((*((_DWORD *)a2 + 144) | 4) == 4)
  {
    uint64_t v20 = 0;
    if (!v8) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v9)
  {
    char v22 = v9[21].__shared_weak_owners_ != 0;
    if (!shared_owners_low) {
      goto LABEL_72;
    }
  }
  else
  {
    char v22 = 0;
    if (!shared_owners_low) {
      goto LABEL_72;
    }
  }
  if (a3) {
    goto LABEL_72;
  }
  uint64_t v23 = a2[16];
  uint64_t v24 = a2[17];
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v23)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      goto LABEL_72;
    }
    uint64_t v23 = a2[16];
    uint64_t v25 = a2[17];
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v23) {
      goto LABEL_72;
    }
    uint64_t v25 = 0;
  }
  if (v23[18].__vftable)
  {
    BOOL isNR = 0;
  }
  else
  {
    IMSCallInfo::stack((IMSCallInfo *)a2, &v30);
    BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v30 + 3160));
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (!v24)
  {
    if (isNR) {
      goto LABEL_66;
    }
LABEL_72:
    IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v33, 2, shared_owners_low != 0, v22);
    uint64_t v20 = 1;
    goto LABEL_73;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (!isNR) {
    goto LABEL_72;
  }
LABEL_66:
  std::string::basic_string[abi:ne180100]<0>(&v30, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v27 = ims::warn((uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Not sending call status request for END due to call setup failure on NR", 71);
  *(unsigned char *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v27 + 17) = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(v30);
  }
  IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v33, 4, shared_owners_low != 0, v22);
  IMSCallManager::setEPSFallbackCall(this, (IMSCallInfo *)a2);
  uint64_t v20 = 0;
LABEL_73:
  *((_DWORD *)a2 + 144) = 4;
  if (v8) {
LABEL_40:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_41:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_1C5297A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if ((v29 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendEmergencySessionRequiredNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::debug((uint64_t)&v21, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Sending Call Status Changed notification: emergency session required for callid: ", 81);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = &unk_1F20B3708;
  BOOL v9 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *v9;
    v17.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  uint64_t v10 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v16);
  uint64_t v11 = (IMSCallInfo *)v10;
  uint64_t v16 = &unk_1F20B3708;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if (!v11)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(&v21, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v13 = ims::error((uint64_t)&v21, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to issue emergency redial request - unknown stack id", 59);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      goto LABEL_26;
    }
  }
  else if (!v10)
  {
    goto LABEL_17;
  }
  IMSCallInfo::stack(v11, &v21);
  std::string::size_type v12 = v21.__r_.__value_.__r.__words[0];
  if (v21.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21.__r_.__value_.__l.__size_);
  }
  if (!v12) {
    goto LABEL_17;
  }
  memset(&v21, 0, sizeof(v21));
  IMSCallInfo::stack(v11, &__p);
  if (*((char *)__p + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)__p + 520), *((void *)__p + 521));
  }
  else {
    std::string v21 = *(std::string *)((char *)__p + 4160);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  SipUri::asString(a3, &__p);
  uint64_t v14 = IMSClientManager::delegateForStack((void **)&v21.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *v9;
    v15.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  (*(void (**)(uint64_t, std::string *, void **, uint64_t))(*(void *)v14 + 24))(v14, &v15, &__p, a4);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
LABEL_26:
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5297DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallInfo::handleParticipantLeftConference(uint64_t a1, uint64_t a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleParticipantLeftConferenceEvent", 36);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if (a3) {
      goto LABEL_24;
    }
  }
  else if (a3)
  {
    goto LABEL_24;
  }
  __p[0] = (void *)65792;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __p[1] = 0;
  uint64_t v29 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  int v7 = *(_DWORD *)(*(void *)a2 + 1292);
  if (v7 > 9)
  {
    if (v7 == 20)
    {
      LODWORD(v31) = 1026;
      std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:MediaTimeout", 0x26uLL);
      uint64_t v20 = *(IMSCallManager **)(a1 + 24);
      IMSCallInfo::uuid((IMSCallInfo *)v24, a1);
      ims::CFString::asString(@"kCallDisconnectionReasonMediaTimeout", (const void *)0x8000100, &v35);
      IMSCallManager::sendCallDisconnectionNotification(v20, (uint64_t)v24, &v35, (uint64_t)__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v24;
      v24[0] = &unk_1F20B3708;
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v31) = 1009;
      BYTE2(__p[0]) = 0;
      std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:NetworkError", 0x26uLL);
      std::string v21 = *(IMSCallManager **)(a1 + 24);
      IMSCallInfo::uuid((IMSCallInfo *)v22, a1);
      ims::CFString::asString(@"kCallDisconnectionReasonNetworkError", (const void *)0x8000100, &v35);
      IMSCallManager::sendCallDisconnectionNotification(v21, (uint64_t)v22, &v35, (uint64_t)__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v22;
      v22[0] = &unk_1F20B3708;
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (v7 == 1) {
      int v8 = 1008;
    }
    else {
      int v8 = 1003;
    }
    if (v7) {
      int v9 = v8;
    }
    else {
      int v9 = 1007;
    }
    LODWORD(v31) = v9;
    std::string::__assign_external((std::string *)&__p[1], "ConferenceParticipantLeft:Normal", 0x20uLL);
    uint64_t v10 = *(IMSCallManager **)(a1 + 24);
    IMSCallInfo::uuid((IMSCallInfo *)v26, a1);
    ims::CFString::asString(@"kCallDisconnectionReasonNormal", (const void *)0x8000100, &v35);
    IMSCallManager::sendCallDisconnectionNotification(v10, (uint64_t)v26, &v35, (uint64_t)__p);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v26;
    v26[0] = &unk_1F20B3708;
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  operator delete((void *)v11[1]);
LABEL_18:
  if (SHIBYTE(v34) < 0) {
    operator delete(*((void **)&v33 + 1));
  }
  if (SBYTE7(v33) < 0) {
    operator delete((void *)v32);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
LABEL_24:
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 32);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(v13 + 288);
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 296);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v15 + 176;
  uint64_t v18 = *(void *)(v15 + 184);
  if (v18 != v15 + 176)
  {
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v18 + 16) + 104))(*(void *)(v18 + 16), a1 + 48);
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18 != v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 240))(*(void *)(a1 + 24), a1);
}

void sub_1C5298280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  ims::DisconnectInfo::~DisconnectInfo(&a30);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'IMSCallInfo::handleParticipantLeftConference(uint64_t a1, uint64_t a2, char a3)
{
  return IMSCallInfo::handleParticipantLeftConference(a1 - 8, a2, a3);
}

void IMSCallInfo::handleSessionActivatedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Call ", 5);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 9) + 16))((char *)this + 72, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" activated", 10);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    int v9 = *(SipSession **)(*((void *)this + 16) + 392);
    if (v9 && SipSession::confirmed(v9))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Sending kIMSCallStatusActive", 28);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      uint64_t v11 = *((void *)this + 3);
      IMSCallInfo::uuid((IMSCallInfo *)v25, (uint64_t)this);
      (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v11 + 232))(v11, v25, @"kCallStatusActive", *((unsigned __int8 *)this + 40), a2);
      v25[0] = &unk_1F20B3708;
      if (v26 < 0) {
        operator delete((void *)v25[1]);
      }
      uint64_t v12 = *((void *)this + 3);
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = *(std::__shared_weak_count **)(v12 + 32);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(void *)(v13 + 288);
      uint64_t v16 = *(std::__shared_weak_count **)(v13 + 296);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v15 + 176;
      for (uint64_t i = *(void *)(v15 + 184); i != v17; uint64_t i = *(void *)(i + 8))
        (*(void (**)(void, BambiCallEvent *, __CFString *))(**(void **)(i + 16) + 96))(*(void *)(i + 16), a2, @"kCallStatusActive");
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v19 = *((void *)this + 3);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 17);
      uint64_t v23 = *((void *)this + 16);
      uint64_t v24 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSCallInfo::uuid((IMSCallInfo *)v21, (uint64_t)this);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v19 + 208))(v19, &v23, 1, v21);
      v21[0] = &unk_1F20B3708;
      if (v22 < 0) {
        operator delete((void *)v21[1]);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionActivatedEvent for an unknown call", 60);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5298860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionHoldFailedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Call ", 5);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 9) + 16))((char *)this + 72, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" hold failed!", 13);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    int v9 = *(SipSession **)(*((void *)this + 16) + 392);
    if (v9 && SipSession::confirmed(v9))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Sending kIMSCallStatusHoldFailed", 32);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      uint64_t v11 = *((void *)this + 3);
      IMSCallInfo::uuid((IMSCallInfo *)v18, (uint64_t)this);
      (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v11 + 232))(v11, v18, @"kCallStatusHoldFailed", *((unsigned __int8 *)this + 40), a2);
      v18[0] = &unk_1F20B3708;
      if (v19 < 0) {
        operator delete((void *)v18[1]);
      }
      uint64_t v12 = *((void *)this + 3);
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 17);
      uint64_t v16 = *((void *)this + 16);
      uint64_t v17 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSCallInfo::uuid((IMSCallInfo *)v14, (uint64_t)this);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v12 + 208))(v12, &v16, 1, v14);
      v14[0] = &unk_1F20B3708;
      if (v15 < 0) {
        operator delete((void *)v14[1]);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionHoldFailedEvent for an unknown call", 61);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5298D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionResumeFailedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Call ", 5);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 9) + 16))((char *)this + 72, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" resume failed!", 15);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    int v9 = *(SipSession **)(*((void *)this + 16) + 392);
    if (v9 && SipSession::confirmed(v9))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Sending kIMSCallStatusResumeFailed", 34);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      uint64_t v11 = *((void *)this + 3);
      IMSCallInfo::uuid((IMSCallInfo *)v18, (uint64_t)this);
      (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v11 + 232))(v11, v18, @"kCallStatusResumeFailed", *((unsigned __int8 *)this + 40), a2);
      v18[0] = &unk_1F20B3708;
      if (v19 < 0) {
        operator delete((void *)v18[1]);
      }
      uint64_t v12 = *((void *)this + 3);
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 17);
      uint64_t v16 = *((void *)this + 16);
      uint64_t v17 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSCallInfo::uuid((IMSCallInfo *)v14, (uint64_t)this);
      (*(void (**)(uint64_t, uint64_t *, void, void *))(*(void *)v12 + 208))(v12, &v16, 0, v14);
      v14[0] = &unk_1F20B3708;
      if (v15 < 0) {
        operator delete((void *)v14[1]);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionResumeFailedEvent for an unknown call", 63);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C529921C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionLocalHeldEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v8 = *((void *)this + 3);
    uint64_t v9 = *(void *)(v8 + 24);
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 32);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(v9 + 288);
    uint64_t v12 = *(std::__shared_weak_count **)(v9 + 296);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = v11 + 176;
    for (uint64_t i = *(void *)(v11 + 184); i != v13; uint64_t i = *(void *)(i + 8))
      (*(void (**)(void, BambiCallEvent *, __CFString *))(**(void **)(i + 16) + 96))(*(void *)(i + 16), a2, @"kCallStatusInactive");
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::debug((uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Call ", 5);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 9) + 16))((char *)this + 72, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" deactivated", 12);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    uint64_t v16 = *(SipSession **)(*((void *)this + 16) + 392);
    if (v16 && SipSession::confirmed(v16))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "call");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v17 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Sending kIMSCallStatusInactive", 30);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      uint64_t v18 = *((void *)this + 3);
      IMSCallInfo::uuid((IMSCallInfo *)v25, (uint64_t)this);
      (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v18 + 232))(v18, v25, @"kCallStatusInactive", *((unsigned __int8 *)this + 40), a2);
      v25[0] = &unk_1F20B3708;
      if (v26 < 0) {
        operator delete((void *)v25[1]);
      }
      uint64_t v19 = *((void *)this + 3);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 17);
      uint64_t v23 = *((void *)this + 16);
      uint64_t v24 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      IMSCallInfo::uuid((IMSCallInfo *)v21, (uint64_t)this);
      (*(void (**)(uint64_t, uint64_t *, void, void *))(*(void *)v19 + 208))(v19, &v23, 0, v21);
      v21[0] = &unk_1F20B3708;
      if (v22 < 0) {
        operator delete((void *)v21[1]);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleSessionLocalHeldEvent for an unknown call", 60);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5299784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleRingingEvent(IMSCallInfo *this, BambiCallProvisionalResponseEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v8 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v16, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallProvisionalResponseEvent *))(*(void *)v8 + 232))(v8, v16, @"kCallStatusRinging", *((unsigned __int8 *)this + 40), a2);
    v16[0] = &unk_1F20B3708;
    if (v17 < 0) {
      operator delete((void *)v16[1]);
    }
    uint64_t v9 = *((void *)this + 3);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(v10 + 288);
    uint64_t v13 = *(std::__shared_weak_count **)(v10 + 296);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 17);
    v15[0] = *((void *)this + 16);
    v15[1] = (uint64_t)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSMetricsManager::logRingingEvent(v12, v15, *((unsigned __int8 *)this + 40), *((unsigned __int8 *)this + 40));
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleRingingEvent for an unknown call", 51);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5299AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    if (!v31)
    {
LABEL_3:
      if (!v30)
      {
LABEL_8:
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      goto LABEL_8;
    }
  }
  else if (!v31)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  if (!v30) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void IMSCallInfo::handleLRBTEvent(IMSCallInfo *this, BambiCallEvent *a2, int a3)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (!v8) {
      uint64_t v7 = 0;
    }
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  if (v7 == *((void *)this + 16))
  {
    uint64_t v11 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v13, (uint64_t)this);
    uint64_t v12 = kIMSCallStatusPlayLRBT;
    if (!a3) {
      uint64_t v12 = kIMSCallStatusStopLRBT;
    }
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v11 + 232))(v11, v13, *v12, *((unsigned __int8 *)this + 40), a2);
    v13[0] = &unk_1F20B3708;
    if (v14 < 0)
    {
      uint64_t v10 = (void *)v13[1];
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"IMSCallInfo::handleRingingEvent for an unknown call", 51);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0)
    {
      uint64_t v10 = (void *)v17[0];
LABEL_15:
      operator delete(v10);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C5299D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextMediaDetectedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v9 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v10, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v9 + 232))(v9, v10, @"kIMSCallStatusTextMediaDetected", *((unsigned __int8 *)this + 40), a2);
    v10[0] = &unk_1F20B3708;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    uint64_t v8 = (void *)v10[1];
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleTextMediaDetectedEvent for an unknown call", 61);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0)
  {
    uint64_t v8 = (void *)v14[0];
LABEL_13:
    operator delete(v8);
  }
LABEL_14:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5299F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTextMediaDeactivatedEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v9 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v10, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v9 + 232))(v9, v10, @"kIMSCallStatusTextMediaDeactivated", *((unsigned __int8 *)this + 40), a2);
    v10[0] = &unk_1F20B3708;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    uint64_t v8 = (void *)v10[1];
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleTextMediaDeactivatedEvent for an unknown call", 64);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0)
  {
    uint64_t v8 = (void *)v14[0];
LABEL_13:
    operator delete(v8);
  }
LABEL_14:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C529A198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleSessionProgressEvent(IMSCallInfo *this, BambiCallProvisionalResponseEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v9 = *((void *)this + 3);
    uint64_t v10 = *(void *)(v9 + 24);
    char v11 = *(std::__shared_weak_count **)(v9 + 32);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(v10 + 288);
    char v13 = *(std::__shared_weak_count **)(v10 + 296);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v14 = (std::__shared_weak_count *)*((void *)this + 17);
    v18[0] = *((void *)this + 16);
    v18[1] = (uint64_t)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IMSMetricsManager::logSessionProgress(v12, (uint64_t)a2 + 40, v18, *((unsigned __int8 *)this + 40));
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v15 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v16, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallProvisionalResponseEvent *))(*(void *)v15 + 232))(v15, v16, @"kCallStatusInProgress", *((unsigned __int8 *)this + 40), a2);
    v16[0] = &unk_1F20B3708;
    if (v17 < 0)
    {
      uint64_t v8 = (void *)v16[1];
      goto LABEL_25;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleInProgressEvent for an unknown call", 54);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0)
    {
      uint64_t v8 = (void *)v21[0];
LABEL_25:
      operator delete(v8);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C529A444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::handleTryingEvent(IMSCallInfo *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 16))
  {
    uint64_t v9 = *((void *)this + 3);
    IMSCallInfo::uuid((IMSCallInfo *)v10, (uint64_t)this);
    (*(void (**)(uint64_t, void *, __CFString *, void, BambiCallEvent *))(*(void *)v9 + 232))(v9, v10, @"kCallStatusTrying", *((unsigned __int8 *)this + 40), a2);
    v10[0] = &unk_1F20B3708;
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    uint64_t v8 = (void *)v10[1];
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSCallInfo::handleTryingEvent for an unknown call", 50);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0)
  {
    uint64_t v8 = (void *)v14[0];
LABEL_13:
    operator delete(v8);
  }
LABEL_14:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C529A6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::logIncomingPrack(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v3 + 288);
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 296);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  v8[0] = *(void *)(a1 + 128);
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSMetricsManager::logIncomingPrack(v5, a2, v8, *(unsigned __int8 *)(a1 + 40));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C529A7F8(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  goto LABEL_5;
}

void non-virtual thunk to'IMSCallInfo::logIncomingPrack(uint64_t a1, uint64_t a2)
{
}

void IMSCallInfo::logPrackResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v3 + 288);
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 296);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
  v8[0] = *(void *)(a1 + 128);
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSMetricsManager::logPrackResponse(v5, a2, v8, *(unsigned __int8 *)(a1 + 40));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C529A900(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  goto LABEL_5;
}

void non-virtual thunk to'IMSCallInfo::logPrackResponse(uint64_t a1, uint64_t a2)
{
}

void IMSCallInfo::createCallHandle(IMSCallInfo *this)
{
}

void sub_1C529AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (*(char *)(v25 - 41) < 0) {
    operator delete(*(void **)(v25 - 64));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878E320](v24, 0x10B3C40948CF7CALL);
  _Unwind_Resume(a1);
}

BOOL IMSCallInfo::isEmergency(IMSCallInfo *this)
{
  if (*((unsigned char *)this + 568)) {
    return 1;
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (!v3) {
    return 0;
  }
  if (v3[65]) {
    return 1;
  }
  uint64_t v4 = (std::__shared_weak_count *)v3[46];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (v3[45])
  {
    uint64_t v7 = *((void *)this + 16);
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 368);
    if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0)
    {
      BOOL v1 = *(unsigned char *)(*(void *)(v7 + 360) + 176) != 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    else
    {
      BOOL v1 = MEMORY[0xB0] != 0;
    }
  }
  else
  {
    BOOL v1 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v1;
}

uint64_t IMSCallManager::IMSCallManager(uint64_t result, uint64_t *a2)
{
  *(void *)uint64_t result = &unk_1F20BAED0;
  *(void *)(result + 8) = &unk_1F20BAFD8;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)(result + 16) = &unk_1F20BB008;
  *(void *)(result + 24) = v3;
  *(void *)(result + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 72) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result + 72;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = result + 96;
  *(void *)(result + 112) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 136) = &unk_1F20B3708;
  *(void *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 168) = &unk_1F20B3708;
  *(void *)(result + 176) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  return result;
}

void IMSCallManager::~IMSCallManager(IMSCallManager *this)
{
  *(void *)this = &unk_1F20BAED0;
  *((void *)this + 1) = &unk_1F20BAFD8;
  *((void *)this + 2) = &unk_1F20BB008;
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = (void *)*((void *)this + 6);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  *((void *)this + 21) = &unk_1F20B3708;
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  *((void *)this + 17) = &unk_1F20B3708;
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*((void **)this + 12));
  std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*((void **)this + 9));
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

{
  uint64_t vars8;

  IMSCallManager::~IMSCallManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IMSCallManager::~IMSCallManager(IMSCallManager *this)
{
}

{
  uint64_t vars8;

  IMSCallManager::~IMSCallManager((IMSCallManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

uint64_t IMSCallManager::dumpState(IMSCallManager *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"----- Active Lazuli Sessions (", 30);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)") -----", 7);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (char *)*((void *)this + 8);
  uint64_t v6 = (char *)this + 72;
  if (v5 != v6)
  {
    do
    {
      uint64_t result = LazuliSession::logSession(*((LazuliSession **)v5 + 10), a2);
      uint64_t v7 = (char *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

void IMSCallManager::delegateForIncomingCall(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 368);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 360);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        if (v7)
        {
          uint64_t v8 = *a3;
          BOOL v9 = *(std::__shared_weak_count **)(*a3 + 368);
          if (v9)
          {
            uint64_t v10 = std::__shared_weak_count::lock(v9);
            if (v10) {
              uint64_t v11 = *(void *)(v8 + 360);
            }
            else {
              uint64_t v11 = 0;
            }
          }
          else
          {
            uint64_t v11 = 0;
            uint64_t v10 = 0;
          }
          if (*(char *)(v11 + 4183) < 0)
          {
            std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::string v12 = *(std::string *)(v11 + 4160);
          }
          std::string __p = v12;
          *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
          v12.__r_.__value_.__s.__data_[0] = 0;
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
      }
    }
  }
  operator new();
}

void sub_1C529B2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::delegateForIncomingCall(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t IMSCallManager::getInfoForActiveCall@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 65280;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = a2 + 16;
  *(void *)(a2 + 8) = &unk_1F20B3708;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(this + 40);
  uint64_t v5 = *(void *)(this + 48);
  if (v5 == v4) {
    return this;
  }
  uint64_t v6 = this;
  uint64_t v7 = 0;
  while (1)
  {
    this = *(void *)(v4 + 8 * v7);
    if (!this) {
      goto LABEL_7;
    }
    this = IMSCallInfo::isActive((IMSCallInfo *)this);
    uint64_t v4 = *(void *)(v6 + 40);
    uint64_t v8 = *(IMSCallInfo **)(v4 + 8 * v7);
    if (this) {
      break;
    }
    if (*((unsigned char *)v8 + 572)) {
      goto LABEL_10;
    }
    uint64_t v5 = *(void *)(v6 + 48);
LABEL_7:
    if (++v7 >= (unint64_t)((v5 - v4) >> 3)) {
      return this;
    }
  }
  if (!v8) {
    return this;
  }
LABEL_10:
  IMSCallInfo::uuid((IMSCallInfo *)v9, *(void *)(v4 + 8 * v7));
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v9[8];
  *(void *)(v3 + 16) = v10;
  *(unsigned char *)(a2 + 1) = *((unsigned char *)v8 + 40);
  this = IMSCallInfo::isEmergency(v8);
  *(unsigned char *)a2 = this;
  return this;
}

void sub_1C529B478(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::getInfoForBasebandCallId@<X0>(uint64_t this@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 65280;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = a3 + 16;
  *(void *)(a3 + 8) = &unk_1F20B3708;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v5 = *(void *)(this + 40);
  uint64_t v6 = *(void *)(this + 48) - v5;
  if (v6)
  {
    uint64_t v7 = this;
    uint64_t v8 = 0;
    unint64_t v9 = v6 >> 3;
    int v10 = a2;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    while (1)
    {
      uint64_t v11 = *(void *)(v5 + 8 * v8);
      if (v11)
      {
        if (*(unsigned __int8 *)(v11 + 40) == v10) {
          break;
        }
      }
      if (v9 == ++v8) {
        return this;
      }
    }
    IMSCallInfo::uuid((IMSCallInfo *)v12, v11);
    if (*(char *)(a3 + 39) < 0) {
      operator delete(*(void **)v4);
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)&v12[8];
    *(void *)(v4 + 16) = v13;
    *(unsigned char *)(a3 + 1) = v10;
    this = IMSCallInfo::isEmergency(*(IMSCallInfo **)(*(void *)(v7 + 40) + 8 * v8));
    *(unsigned char *)a3 = this;
  }
  return this;
}

void sub_1C529B590(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::initializeNonEmergencyCall(uint64_t a1, std::string *a2, uint64_t a3)
{
  memset(&v95, 0, sizeof(v95));
  int v94 = &unk_1F20B3708;
  if (*(char *)(a3 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else {
    std::string v95 = *(std::string *)(a3 + 16);
  }
  memset(v93, 0, sizeof(v93));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v93, (const BambiCallOptions *)(a3 + 40));
  long long v92 = 0u;
  long long v91 = 0u;
  uint64_t v90 = 0;
  uint64_t v75 = 0;
  memset(v74, 0, sizeof(v74));
  long long v73 = 0u;
  memset(v72, 0, sizeof(v72));
  DWORD2(v73) = 90;
  LOBYTE(v74[0]) = 1;
  BYTE2(v74[0]) = 1;
  *(void *)((char *)v74 + 4) = 0x200000001;
  *(_WORD *)((char *)v74 + 13) = 257;
  *(void *)((char *)v74 + 15) = 0;
  *(_WORD *)((char *)&v74[1] + 7) = 256;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  memset(v78, 0, sizeof(v78));
  uint64_t v81 = 0x40A7700000000000;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v71 = 0;
  int v70 = 0;
  uint64_t v6 = (void **)(a3 + 5096);
  (*(void (**)(SipStack **__return_ptr))(**(void **)(*(void *)(a1 + 24) + 168) + 192))(&v70);
  uint64_t v7 = *(void *)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  IPTelephonyManager::auditCarrierPrefs(v7, (uint64_t)v6, (uint64_t)__p);
  if (SBYTE7(v42) < 0) {
    operator delete(__p[0]);
  }
  if (v70)
  {
    if (*((_DWORD *)v70 + 50) == 2)
    {
      uint64_t v66 = 0;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)std::string __p = 0u;
      SipUri::SipUri((SipUri *)__p);
      memset(&v69, 0, sizeof(v69));
      uint64_t v8 = (ImsPrefs *)SipStack::prefs(v70);
      unint64_t v9 = (void **)ImsPrefs::getCallTransferRequestUriKey(v8);
      ImsPrefs::stringValue(v8, v9);
      int v10 = (ImsPrefs *)SipStack::prefs(v70);
      uint64_t v11 = (void **)ImsPrefs::getCallTransferDialNumberKey(v10);
      ImsPrefs::stringValue(v10, v11);
      uint64_t v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      int v15 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
      }
      if (size == v14)
      {
        char v16 = (void *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v12 & 0x80) == 0)
        {
          if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
          {
            char v18 = a2;
            while (v18->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
            {
              char v18 = (std::string *)((char *)v18 + 1);
              p_str = (std::string *)((char *)p_str + 1);
              if (!--v12) {
                goto LABEL_42;
              }
            }
            goto LABEL_40;
          }
LABEL_42:
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v22 = v69.__r_.__value_.__l.__size_;
          }
          if (v15 < 0) {
            operator delete(v16);
          }
          if (v22)
          {
            OutgoingUruint64_t i = SipUri::fromString((uint64_t)__p, &v69);
            memset(&__str, 0, sizeof(__str));
            uint64_t v24 = (ImsPrefs *)SipStack::prefs(v70);
            uint64_t v25 = (void **)ImsPrefs::getCallTransferToUriKey(v24);
            ImsPrefs::stringValue(v24, v25);
            std::string::operator=((std::string *)((char *)&v93[5] + 8), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_54:
            if (OutgoingUri)
            {
              char v27 = (const ImsPrefs *)SipStack::prefs(v70);
              BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v93, v27);
              memset(&__str, 0, sizeof(__str));
              uint64_t v28 = *(void *)(*(void *)(a1 + 24) + 168);
              *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
              if (!BambiClient::unconfirmedCallsExcludingCall(v28, (uint64_t *)&__str, &v37)) {
                operator new();
              }
              std::string::basic_string[abi:ne180100]<0>(&v37, "call");
              std::string::basic_string[abi:ne180100]<0>(v33, "");
              uint64_t v29 = ims::debug((uint64_t)&v37, (uint64_t)v33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Can not dial calls during existing alerting call", 48);
              *(unsigned char *)(v29 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v29 + 17) = 0;
              if (v34 < 0) {
                operator delete(v33[0]);
              }
              if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v37.__r_.__value_.__l.__data_);
              }
              uint64_t v31 = &unk_1F20B3708;
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v32, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
              }
              else {
                std::string v32 = v95;
              }
              ims::CFString::asString(@"kCallDisconnectionReasonAnsweringExistingCall", (const void *)0x8000100, &v37);
              IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v31, v6, &v37, 0);
              if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v37.__r_.__value_.__l.__data_);
              }
              uint64_t v31 = &unk_1F20B3708;
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
              v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "call");
              std::string::basic_string[abi:ne180100]<0>(&v37, "");
              uint64_t v30 = ims::error((uint64_t)&__str, (uint64_t)&v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
              *(unsigned char *)(v30 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v30 + 17) = 0;
              if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v37.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              uint64_t v35 = &unk_1F20B3708;
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v36, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
              }
              else {
                std::string v36 = v95;
              }
              ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &__str);
              IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v35, v6, &__str, 0);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              uint64_t v35 = &unk_1F20B3708;
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v36.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
            SipUri::~SipUri((SipUri *)__p);
            goto LABEL_83;
          }
LABEL_50:
          uint64_t v26 = *(void *)(a1 + 24);
          uint64_t v38 = v70;
          uint64_t v39 = v71;
          if (v71) {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v26, &v38, a2, (SipUri *)__p);
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          goto LABEL_54;
        }
        if (!memcmp(a2->__r_.__value_.__l.__data_, p_str, a2->__r_.__value_.__l.__size_)) {
          goto LABEL_42;
        }
      }
LABEL_40:
      if (v15 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      goto LABEL_50;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    uint64_t v21 = ims::error((uint64_t)__p, (uint64_t)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"unable to dial call: stack ", 27);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v21 + 32))(v21, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" uninitialized.", 15);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v67 = &unk_1F20B3708;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v68, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v68 = v95;
    }
    ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, (std::string *)__p);
    IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)&v67, v6, (const std::string *)__p, 0);
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v67 = &unk_1F20B3708;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      char v20 = (void *)v68.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unable to begin non-emergency call: invalid stack id ", 53);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v42) < 0)
    {
      char v20 = __p[0];
LABEL_38:
      operator delete(v20);
    }
  }
LABEL_83:
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  BambiCallOptions::~BambiCallOptions((void **)v72);
  BambiCallOptions::~BambiCallOptions((void **)v93);
  int v94 = &unk_1F20B3708;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
}

void sub_1C529C318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  std::string __p = &a44;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  SipUri::~SipUri((SipUri *)&a47);
  if (STACK[0x2D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D8]);
  }
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x2E0]);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x440]);
  *(void *)(v48 - 112) = v47;
  if (*(char *)(v48 - 81) < 0) {
    operator delete(*(void **)(v48 - 104));
  }
  _Unwind_Resume(a1);
}

void IMSCallManager::sendCallDisconnectionNotification(uint64_t a1, uint64_t a2, void **a3, const std::string *a4, int a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  uint64_t v10 = ims::debug((uint64_t)__p, (uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Sending Call Status Changed notification: disconnection for callid: ", 68);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", reason = ", 11);
  *(unsigned char *)(v10 + 17) = 0;
  LoggableString::LoggableString(&v25, a4);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &v25);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = (void *)256;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  *(_OWORD *)std::string::size_type v22 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  if (a5)
  {
    char v16 = &unk_1F20B3708;
    if (*(char *)(a2 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    }
    else {
      std::string v17 = *(std::string *)(a2 + 8);
    }
    uint64_t v11 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v16);
    uint64_t v12 = v11;
    char v16 = &unk_1F20B3708;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v17.__r_.__value_.__l.__data_);
      if (v12) {
        goto LABEL_13;
      }
    }
    else if (v11)
    {
LABEL_13:
      BOOL v13 = *(unsigned char *)(v12 + 573) != 0;
LABEL_20:
      BYTE4(v21) = 1;
      IMSCallManager::sendCallStatusRequest(a1, (uint64_t)a3, 2, v13, 0);
      goto LABEL_21;
    }
    std::string::basic_string[abi:ne180100]<0>(&v26, "call");
    std::string::basic_string[abi:ne180100]<0>(&v25, "");
    uint64_t v14 = ims::error((uint64_t)&v26, (uint64_t)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to find call ", 20);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" -- assuming mobile originated.", 31);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    BOOL v13 = 1;
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v15 = IMSClientManager::delegateForStack(a3);
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v26 = *(std::string *)(a2 + 8);
  }
  (*(void (**)(uint64_t, std::string *, const std::string *, void **))(*(void *)v15 + 16))(v15, &v26, a4, __p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  if (SHIBYTE(v23[0]) < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[1]);
  }
}

void sub_1C529C980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 57) < 0) {
    operator delete(*(void **)(v21 - 80));
  }
  ims::DisconnectInfo::~DisconnectInfo(&__p);
  _Unwind_Resume(a1);
}

void IMSCallManager::initializeMOLazuliSession(IMSCallManager *this, const LazuliSendParams *a2, int a3, char a4)
{
  uint64_t v8 = (uint64_t **)((char *)this + 64);
  unint64_t v9 = (std::string *)((char *)a2 + 72);
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 64, (void **)a2 + 9);
  if ((void **)((char *)this + 72) != v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v11 = ims::debug((uint64_t)v56, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"session already established ", 28);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v57) < 0) {
      operator delete(v56[0]);
    }
    return;
  }
  uint64_t v12 = v10;
  long long v82 = 0;
  long long v83 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(*((void *)this + 3) + 168) + 192))(&v82);
  uint64_t v81 = 0;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  *(_OWORD *)long long v56 = 0u;
  SipUri::SipUri((SipUri *)v56);
  uint64_t v13 = *((void *)this + 3);
  long long v54 = v82;
  long long v55 = v83;
  if (v83) {
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v13, &v54, (std::string *)a2 + 2, (SipUri *)v56);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if ((OutgoingUri & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&v20, "");
    uint64_t v17 = ims::error((uint64_t)&__p, (uint64_t)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ImsUuid::ImsUuid(v52, (uint64_t)v9);
    ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &__p);
    IMSCallManager::sendCallDisconnectionNotification((uint64_t)this, (uint64_t)v52, (void **)a2, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v52[0] = &unk_1F20B3708;
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_113;
    }
    char v16 = (void *)v52[1];
    goto LABEL_24;
  }
  if (v12 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v8, (void **)&v9->__r_.__value_.__l.__data_))
  {
    memset(&v51[2], 0, 56);
    v51[0] = &unk_1F20B2680;
    v51[1] = &_bambiDomain;
    *(_OWORD *)uint64_t v48 = 0u;
    memset(__s, 0, sizeof(__s));
    *(_OWORD *)long long v46 = 0u;
    memset(v45, 0, sizeof(v45));
    *(_DWORD *)&v48[8] = 90;
    *(void *)&v48[16] = 16777472;
    memset(v49, 0, sizeof(v49));
    memset(&v50, 0, sizeof(v50));
    std::string::operator=(&v45[1], v9);
    std::string::operator=((std::string *)v46, v9);
    std::string::operator=(v45, (const std::string *)((char *)a2 + 272));
    std::string::operator=(v49, (const std::string *)((char *)a2 + 248));
    std::string::operator=(&v49[1], (const std::string *)a2 + 1);
    v48[16] = a4;
    std::string::operator=(&v50, (const std::string *)((char *)a2 + 296));
    long long v44 = 0uLL;
    uint64_t v18 = *(void *)(*((void *)this + 3) + 168);
    long long v42 = v82;
    long long v43 = v83;
    if (v83) {
      atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v34, v45[0].__r_.__value_.__l.__data_, v45[0].__r_.__value_.__l.__size_);
    }
    else {
      std::string v34 = v45[0];
    }
    if (SHIBYTE(v45[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35, v45[1].__r_.__value_.__l.__data_, v45[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v35 = v45[1];
    }
    if (SHIBYTE(__s[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)v46[0], v46[1]);
    }
    else
    {
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)v46;
      v36.__r_.__value_.__r.__words[2] = (std::string::size_type)__s[0];
    }
    if (SHIBYTE(__s[3]) < 0) {
      std::string::__init_copy_ctor_external(&v37, __s[1], (std::string::size_type)__s[2]);
    }
    else {
      std::string v37 = *(std::string *)&__s[1];
    }
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v48;
    *(void *)&v38[13] = *(void *)&v48[13];
    if (SHIBYTE(v49[0].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v39, v49[0].__r_.__value_.__l.__data_, v49[0].__r_.__value_.__l.__size_);
    }
    else {
      std::string v39 = v49[0];
    }
    if (SHIBYTE(v49[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v49[1].__r_.__value_.__l.__data_, v49[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v49[1];
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v41, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      std::string v41 = v50;
    }
    BambiClient::createNewLazuliSession(v18, (uint64_t)&v42, (const SipUri *)v56, (const LazuliSessionOptions *)&v34, &v44);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if ((void)v44)
    {
      uint64_t v31 = 0;
      memset(v30, 0, sizeof(v30));
      if (a3)
      {
        LazuliSendParams::LazuliSendParams((std::string *)v30, a2);
        LOBYTE(v31) = 1;
      }
      if (*((char *)a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else {
        std::string v20 = *(std::string *)a2;
      }
      long long v21 = v44;
      if (*((void *)&v44 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100](v22, (const LazuliSendParams *)v30);
      std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&__p, (long long *)v9, (long long *)&v20);
      std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(v8, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (v29) {
        LazuliSendParams::~LazuliSendParams(&v28);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v23) {
        LazuliSendParams::~LazuliSendParams((void **)&v22[0].__r_.__value_.__l.__data_);
      }
      if (*((void *)&v21 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if ((_BYTE)v31) {
        LazuliSendParams::~LazuliSendParams((void **)v30);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
      std::string::basic_string[abi:ne180100]<0>(&v20, "");
      uint64_t v19 = ims::error((uint64_t)&__p, (uint64_t)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Unable to create session for ", 29);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 32))(v19, v9);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ImsUuid::ImsUuid(v32, (uint64_t)v9);
      ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &__p);
      IMSCallManager::sendCallDisconnectionNotification((uint64_t)this, (uint64_t)v32, (void **)a2, &__p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v32[0] = &unk_1F20B3708;
      if (v33 < 0) {
        operator delete((void *)v32[1]);
      }
    }
    if (*((void *)&v44 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s[3]) < 0) {
      operator delete(__s[1]);
    }
    if (SHIBYTE(__s[0]) < 0) {
      operator delete((void *)v46[0]);
    }
    if (SHIBYTE(v45[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45[0].__r_.__value_.__l.__data_);
    }
    ImsResult::~ImsResult((ImsResult *)v51);
    goto LABEL_113;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  uint64_t v15 = ims::debug((uint64_t)&__p, (uint64_t)&v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"session found for ", 18);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    char v16 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_24:
    operator delete(v16);
  }
LABEL_113:
  SipUri::~SipUri((SipUri *)v56);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
}

void sub_1C529D4E8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x450])) {
    LazuliSendParams::~LazuliSendParams((void **)&STACK[0x310]);
  }
  if (STACK[0x558]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x558]);
  }
  LazuliSessionOptions::~LazuliSessionOptions((void **)&STACK[0x560]);
  ImsResult::~ImsResult((ImsResult *)&STACK[0x628]);
  SipUri::~SipUri((SipUri *)&STACK[0x6A0]);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 104);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,LazuliInfo>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384)) {
    LazuliSendParams::~LazuliSendParams((void **)(a1 + 64));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void LazuliInfo::~LazuliInfo(void **this)
{
  if (*((unsigned char *)this + 360)) {
    LazuliSendParams::~LazuliSendParams(this + 5);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void IMSCallManager::leaveGroupChat(uint64_t **this, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v17, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Leaving Group Chat ", 19);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, a2 + 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" with trx ", 10);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, a2 + 1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(this + 8), (void **)&a2[3].__r_.__value_.__l.__data_);
  if (this + 9 == (uint64_t **)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)&v17, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"triggering session creation for ", 32);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" with trx ", 10);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    IMSCallManager::initializeMOLazuliSession((IMSCallManager *)this, (const LazuliSendParams *)a2, 1, 0);
  }
  else
  {
    uint64_t v7 = (SipSession **)v5[10];
    uint64_t v6 = (std::__shared_weak_count *)v5[11];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v27, 0, sizeof(v27));
    if (*((char *)v5 + 79) < 0) {
      std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v5[7], (std::string::size_type)v5[8]);
    }
    else {
      std::string v27 = *(std::string *)(v5 + 7);
    }
    LazuliSession::leaveGroup(v7, a2 + 1);
    uint64_t v25 = 0;
    char v26 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)this[3][21] + 192))(&v25);
    uint64_t v9 = *(void *)(v25 + 144);
    uint64_t v11 = *(void *)(v9 + 208);
    uint64_t v10 = *(std::__shared_weak_count **)(v9 + 216);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "UserTriggered");
    v23[0].__r_.__value_.__s.__data_[0] = 0;
    char v24 = 0;
    SipLazuliManager::terminateMessageSession(v11, (uint64_t)&a2[3], (uint64_t)&v17, v23);
    if (v24) {
      ImsResult::~ImsResult((ImsResult *)v23);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(this + 8, (void **)&a2[3].__r_.__value_.__l.__data_);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = *a2;
    }
    uint64_t v13 = v7;
    uint64_t v14 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v15) = 0;
    char v16 = 0;
    std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&v17, (long long *)&a2[3], (long long *)&__p);
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(this + 11, (void **)&v17.__r_.__value_.__l.__data_, (uint64_t)&v17);
    if (v22) {
      LazuliSendParams::~LazuliSendParams(&v21);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v16) {
      LazuliSendParams::~LazuliSendParams(&v15);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C529DD08(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 120);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void IMSCallManager::handleLeaveGroupChat(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 88);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, a2);
  if ((uint64_t *)(a1 + 96) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSCallManager::handleMOSessionConnected(uint64_t **a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 8), a2);
  if (a1 + 9 != (uint64_t **)v3)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100]((std::string *)v9, (const LazuliSendParams *)(v3 + 12));
    if ((_BYTE)v10)
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "lazuli");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Found pending Group Chat leave for new session", 46);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      IMSCallManager::leaveGroupChat(a1, (std::string *)v9);
      if ((_BYTE)v10) {
        LazuliSendParams::~LazuliSendParams((void **)v9);
      }
    }
  }
}

void sub_1C529DFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a61) {
    LazuliSendParams::~LazuliSendParams(&a21);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::trackMTLazuliSession(uint64_t a1, void **a2, void *a3)
{
  char v6 = (uint64_t **)(a1 + 64);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
  if ((void **)(a1 + 72) != v7)
  {
    char v8 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v28, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v9 = ims::debug((uint64_t)&v28, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"session already established ", 28);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" old ", 5);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" vs ", 4);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v8[10] == (void *)*a3) {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v28, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::debug((uint64_t)&v28, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Replacing LazuliSession for conv ", 33);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 24) + 168) + 192))(&__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      uint64_t v11 = *(void *)(__p.__r_.__value_.__r.__words[0] + 144);
      uint64_t v13 = *(void *)(v11 + 208);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 216);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v28, "TerminateChat");
      v34[0].__r_.__value_.__s.__data_[0] = 0;
      char v35 = 0;
      SipLazuliManager::terminateMessageSession(v13, (uint64_t)a2, (uint64_t)&v28, v34);
      if (v35) {
        ImsResult::~ImsResult((ImsResult *)v34);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    LazuliSession::detachSipSession((LazuliSession *)v8[10]);
    uint64_t v15 = (void *)*a3;
    uint64_t v14 = (atomic_ullong *)a3[1];
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    char v16 = (std::__shared_weak_count *)v8[11];
    v8[10] = v15;
    v8[11] = v14;
    if (!v16) {
      return;
    }
LABEL_56:
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v17 = ims::debug((uint64_t)&v28, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Tracking lazuli session ", 24);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (void *)*a3;
  char v19 = *(std::__shared_weak_count **)(*a3 + 288);
  if (v19)
  {
    std::string v20 = std::__shared_weak_count::lock(v19);
    if (v20) {
      uint64_t v21 = v18[35];
    }
    else {
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    std::string v20 = 0;
  }
  if (*(char *)(v21 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v21 + 4160), *(void *)(v21 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v21 + 4160);
  }
  char v22 = (std::__shared_weak_count *)a3[1];
  uint64_t v24 = *a3;
  uint64_t v25 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v26) = 0;
  char v27 = 0;
  std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(&v28, (long long *)a2, (long long *)&__p);
  std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(v6, (void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v28);
  if (v33) {
    LazuliSendParams::~LazuliSendParams(&v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v27) {
    LazuliSendParams::~LazuliSendParams(&v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v20)
  {
    char v16 = v20;
    goto LABEL_56;
  }
}

void sub_1C529E540(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void IMSCallManager::terminateLazuli(uint64_t a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v39, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  uint64_t v8 = ims::debug((uint64_t)&v39, (uint64_t)&v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Terminating lazuli ", 19);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v38 < 0) {
    operator delete(v36);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = (uint64_t **)(a1 + 64);
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, (void **)a2);
  if ((void **)(a1 + 72) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(&v36, "");
    uint64_t v13 = ims::error((uint64_t)&v39, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"session not found. unable to terminate ", 39);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v38 < 0) {
      operator delete(v36);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v12 = (LazuliSession *)v10[10];
    uint64_t v11 = (std::__shared_weak_count *)v10[11];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v39, 0, sizeof(v39));
    if (*((char *)v10 + 79) < 0) {
      std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v10[7], (std::string::size_type)v10[8]);
    }
    else {
      std::string v39 = *(std::string *)(v10 + 7);
    }
    LazuliSession::endSession(v12, a3);
    std::string v36 = 0;
    std::string v37 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 24) + 168) + 192))(&v36);
    uint64_t v14 = *((void *)v36 + 18);
    uint64_t v15 = *(void *)(v14 + 208);
    char v16 = *(std::__shared_weak_count **)(v14 + 216);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v34[0].__r_.__value_.__s.__data_[0] = 0;
    char v35 = 0;
    SipLazuliManager::terminateMessageSession(v15, a2, a3, v34);
    if (v35) {
      ImsResult::~ImsResult((ImsResult *)v34);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(v9, (void **)a2))
    {
      uint64_t v17 = MEMORY[0x1C878F160](*a4);
      uint64_t v18 = MEMORY[0x1E4F14590];
      if (v17 != MEMORY[0x1E4F14590])
      {
        xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
        if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C878F160](v19) == v18)
          {
            xpc_retain(v19);
            xpc_object_t v20 = v19;
          }
          else
          {
            xpc_object_t v20 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v20 = xpc_null_create();
          xpc_object_t v19 = 0;
        }
        xpc_release(v19);
        xpc_object_t v21 = xpc_null_create();
        xpc_object_t v22 = *a4;
        *a4 = v20;
        xpc_release(v22);
        xpc_release(v21);
      }
      if (!xpc_dictionary_get_value(*a4, "kConversationId"))
      {
        if (*(char *)(a2 + 23) >= 0) {
          char v23 = (const char *)a2;
        }
        else {
          char v23 = *(const char **)a2;
        }
        xpc_object_t v32 = xpc_string_create(v23);
        if (!v32) {
          xpc_object_t v32 = xpc_null_create();
        }
        char v30 = a4;
        uint64_t v31 = (std::__shared_weak_count *)"kConversationId";
        xpc::dict::object_proxy::operator=((uint64_t)&v30, &v32, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v32);
        xpc_object_t v32 = 0;
      }
      if (!xpc_dictionary_get_value(*a4, "kReason"))
      {
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v24 = (const char *)a3;
        }
        else {
          uint64_t v24 = *(const char **)a3;
        }
        xpc_object_t v28 = xpc_string_create(v24);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        char v30 = a4;
        uint64_t v31 = (std::__shared_weak_count *)"kReason";
        xpc::dict::object_proxy::operator=((uint64_t)&v30, &v28, &v29);
        xpc_release(v29);
        xpc_object_t v29 = 0;
        xpc_release(v28);
        xpc_object_t v28 = 0;
      }
      char v30 = 0;
      uint64_t v31 = 0;
      IMSClientManager::lazuliDelegateForStack((void **)&v39.__r_.__value_.__l.__data_, &v30);
      uint64_t v25 = (LazuliDelegate *)v30;
      if (v30)
      {
        xpc_object_t v26 = *a4;
        xpc_object_t v27 = v26;
        if (v26) {
          xpc_retain(v26);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        LazuliDelegate::handleSessionTerminated(v25, &v27);
        xpc_release(v27);
        xpc_object_t v27 = 0;
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1C529EB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::terminateAllLazuliSessions(IMSCallManager *this)
{
  xpc_object_t v21 = &v21;
  xpc_object_t v22 = &v21;
  uint64_t v23 = 0;
  uint64_t v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      uint64_t v4 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&v21, 0, 0, (uint64_t)(v2 + 32));
      uint64_t v5 = v21;
      *uint64_t v4 = v21;
      v4[1] = &v21;
      v5[1] = v4;
      xpc_object_t v21 = v4;
      ++v23;
      char v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          char v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "lazuli");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Terminating ", 12);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" chats", 6);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  for (uint64_t i = v22; i != &v21; uint64_t i = (void *)i[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "TerminateChat");
    xpc_object_t object = xpc_null_create();
    IMSCallManager::terminateLazuli((uint64_t)this, (uint64_t)(i + 2), (uint64_t)v19, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  if (*((void *)this + 13))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "lazuli");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Forcefully detaching sip session for ", 37);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" chats", 6);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    uint64_t v12 = (char *)*((void *)this + 11);
    uint64_t v13 = (char *)this + 96;
    if (v12 != v13)
    {
      do
      {
        LazuliSession::forceDetachSipSession(*((LazuliSession **)v12 + 10));
        uint64_t v14 = (char *)*((void *)v12 + 1);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (char *)*((void *)v12 + 2);
            BOOL v8 = *(void *)v15 == (void)v12;
            uint64_t v12 = v15;
          }
          while (!v8);
        }
        uint64_t v12 = v15;
      }
      while (v15 != v13);
    }
  }
  std::__list_imp<std::string>::clear(&v21);
}

void sub_1C529EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__list_imp<std::string>::clear(&a22);
  _Unwind_Resume(a1);
}

BOOL IMSCallManager::hasActiveSession(uint64_t a1, void **a2)
{
  return a1 + 72 != (void)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
}

void IMSCallManager::initializePullCall(uint64_t *a1, uint64_t a2)
{
  memset(&v48, 0, sizeof(v48));
  uint64_t v47 = &unk_1F20B3708;
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string v48 = *(std::string *)(a2 + 16);
  }
  uint64_t v46 = 0;
  memset(v45, 0, sizeof(v45));
  SipUri::SipUri((SipUri *)v45);
  long long v44 = 0;
  long long v43 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(a1[3] + 168) + 192))(&v43);
  if (v43)
  {
    int v4 = *(char *)(a2 + 175);
    if (v4 < 0) {
      uint64_t v5 = *(void *)(a2 + 160);
    }
    else {
      uint64_t v5 = *(unsigned __int8 *)(a2 + 175);
    }
    BOOL v8 = (void **)(a2 + 152);
    if (!v5)
    {
      SipStack::activeThumperPullCallId(v43, (std::string *)v14);
      if (*(char *)(a2 + 175) < 0) {
        operator delete(*v8);
      }
      *(_OWORD *)BOOL v8 = *(_OWORD *)v14;
      *(void *)(a2 + 168) = v15;
      LOBYTE(v4) = *(unsigned char *)(a2 + 175);
    }
    memset(&__p, 0, sizeof(__p));
    if ((v4 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 152), *(void *)(a2 + 160));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a2 + 168);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (IPTelephonyManager::makeOutgoingUriForPull(a1[3], a2 + 5096, &__p, (SipUri *)v45))
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)uint64_t v14 = 0u;
        long long v15 = 0u;
        BambiCallOptions::BambiCallOptions((BambiCallOptions *)v14, (const BambiCallOptions *)(a2 + 40));
        uint64_t v10 = (const ImsPrefs *)SipStack::prefs(v43);
        BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v14, v10);
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(v14, "call");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      uint64_t v12 = ims::error((uint64_t)v14, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"IMSCallManager: unable to determine destination URI", 51);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (SBYTE7(v15) < 0) {
        operator delete(v14[0]);
      }
      std::string v36 = &unk_1F20B3708;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v37, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      }
      else {
        std::string v37 = v48;
      }
      (*(void (**)(uint64_t *, void **, __CFString *, uint64_t, void))(*a1 + 232))(a1, &v36, @"kCallStatusPulling", 255, 0);
      std::string v36 = &unk_1F20B3708;
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint64_t v13 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "call");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      uint64_t v11 = ims::error((uint64_t)v14, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Unable to initiate pull call without pull-call-id", 49);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if (SBYTE7(v15) < 0) {
        operator delete(v14[0]);
      }
      char v38 = &unk_1F20B3708;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v39, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      }
      else {
        std::string v39 = v48;
      }
      (*(void (**)(uint64_t *, void **, __CFString *, uint64_t, void))(*a1 + 232))(a1, &v38, @"kCallStatusPulling", 255, 0);
      char v38 = &unk_1F20B3708;
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint64_t v13 = (void *)v39.__r_.__value_.__r.__words[0];
    }
    operator delete(v13);
LABEL_43:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_46;
    }
    uint64_t v7 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::error((uint64_t)v14, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Unable to initiate pull call for invalid stack ", 47);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2 + 5096);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v15) < 0)
  {
    uint64_t v7 = v14[0];
LABEL_45:
    operator delete(v7);
  }
LABEL_46:
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  SipUri::~SipUri((SipUri *)v45);
  uint64_t v47 = &unk_1F20B3708;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_1C529F7AC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x1C878E320](v12, 0x10B3C409B3D2E52);
  BambiCallOptions::~BambiCallOptions((void **)va);
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (STACK[0x238]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x238]);
  }
  SipUri::~SipUri((SipUri *)&STACK[0x240]);
  *(void *)(v13 - 96) = v11;
  if (*(char *)(v13 - 65) < 0) {
    operator delete(*(void **)(v13 - 88));
  }
  _Unwind_Resume(a1);
}

void IMSCallManager::initializeEmergencyCall()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  memset(&v133, 0, sizeof(v133));
  char v132 = &unk_1F20B3708;
  if (*(char *)(v1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)(v1 + 16), *(void *)(v1 + 24));
  }
  else {
    std::string v133 = *(std::string *)(v1 + 16);
  }
  memset(v131, 0, sizeof(v131));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v131, (const BambiCallOptions *)(v4 + 40));
  bzero(&v101, 0x1260uLL);
  BambiEmergencyCallOptions::BambiEmergencyCallOptions(&v101, (const BambiEmergencyCallOptions *)(v4 + 392));
  int v100 = 0;
  uint64_t v99 = 0;
  uint64_t v65 = v5;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(*(void *)(v5 + 24) + 168) + 192))(&v99);
  memset(&v98, 0, sizeof(v98));
  if (*(char *)(v4 + 415) < 0) {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v4 + 392), *(void *)(v4 + 400));
  }
  else {
    std::string v98 = *(std::string *)(v4 + 392);
  }
  uint64_t v97 = 0;
  memset(v96, 0, sizeof(v96));
  SipUri::SipUri((SipUri *)v96);
  uint64_t v6 = v99;
  if (v99)
  {
    uint64_t v7 = *(void *)(*(void *)(v5 + 24) + 168);
    *(_DWORD *)(v7 + 232) = 0x10000;
    uint64_t v8 = *(void *)(v7 + 696);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
      uint64_t v6 = v99;
    }
    uint64_t v9 = (const ImsPrefs *)SipStack::prefs(v6);
    BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v131, v9);
    char v105 = *(unsigned char *)(v3 + 557);
    uint64_t v10 = *(void *)(v3 + 296);
    if (v10 != *(void *)(v3 + 304))
    {
      if (*(char *)(v10 + 23) < 0)
      {
        if (*(void *)(v10 + 8))
        {
LABEL_13:
          uint64_t v11 = (const ImsPrefs *)SipStack::prefs(v99);
          SipStackConfig::initializeFromPrefs((SipStackConfig *)v123, v11, *(unsigned char *)(v3 + 556), 0, *(unsigned char *)(v3 + 609));
          std::string::operator=(&v126, *(const std::string **)(v3 + 296));
          char v127 = *(_DWORD *)(v3 + 328);
          char v124 = *(unsigned char *)(v3 + 712);
          std::string::operator=(v125, (const std::string *)(v3 + 616));
          if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v3 + 24))) {
            int v12 = 1;
          }
          else {
            int v12 = 2;
          }
          int v128 = v12;
          uint64_t v13 = (ImsPrefs *)SipStack::prefs(v99);
          EmergencyPreferredIdentityKey = (const ImsPrefsKeyEnum *)ImsPrefs::getEmergencyPreferredIdentityKey(v13);
          ImsPrefs::stringValue(v13, EmergencyPreferredIdentityKey, (std::string *)&__p);
          std::string::basic_string[abi:ne180100]<0>(&v136, "IMSI");
          char v15 = BYTE7(v69);
          if ((SBYTE7(v69) & 0x80u) == 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
          int v17 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
          long long v18 = (void *)v136.__r_.__value_.__r.__words[0];
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v19 = &v136;
          }
          else {
            long long v19 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          int v20 = strcasecmp(p_p, (const char *)v19);
          if (v17 < 0)
          {
            operator delete(v18);
            if ((BYTE7(v69) & 0x80) == 0)
            {
LABEL_24:
              if (v20) {
                goto LABEL_45;
              }
LABEL_35:
              if (SipUri::isValidUri((SipUri *)v129))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                std::string::basic_string[abi:ne180100]<0>(&v136, "");
                uint64_t v22 = ims::debug((uint64_t)&__p, (uint64_t)&v136);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"anonymous preferred identity is ", 32);
                *(unsigned char *)(v22 + 17) = 0;
                (*(void (**)(void *, uint64_t))(v129[0] + 40))(v129, v22);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v22 + 17) = 0;
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v136.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v69) < 0) {
                  operator delete((void *)__p);
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                std::string::basic_string[abi:ne180100]<0>(&v136, "");
                uint64_t v23 = ims::debug((uint64_t)&__p, (uint64_t)&v136);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"No a valid anonymous preferred identity", 39);
                *(unsigned char *)(v23 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v23 + 17) = 0;
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v136.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v69) < 0) {
                  operator delete((void *)__p);
                }
                SipUri::clear((SipUri *)v129);
              }
LABEL_45:
              if (*((char *)v99 + 4183) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__p, *((const std::string::value_type **)v99 + 520), *((void *)v99 + 521));
              }
              else
              {
                long long __p = *((_OWORD *)v99 + 260);
                *(void *)&long long v69 = *((void *)v99 + 522);
              }
              if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v104.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&v104.__r_.__value_.__l.__data_ = __p;
              v104.__r_.__value_.__r.__words[2] = v69;
              memset(&__str, 0, sizeof(__str));
              SipStack::carrierIdentifier(v99, &v94);
              long long __p = 0uLL;
              *(void *)&long long v69 = 0;
              BambiPrefsManager::subscribers((BambiPrefsManager *)&v94, (uint64_t *)&__p);
              std::string::basic_string[abi:ne180100]<0>(&v136, "call");
              std::string::basic_string[abi:ne180100]<0>(&v135, "");
              uint64_t v24 = ims::debug((uint64_t)&v136, (uint64_t)&v135);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"found ", 6);
              *(unsigned char *)(v24 + 17) = 0;
              if ((void)__p != *((void *)&__p + 1))
              {
                v67.__r_.__value_.__r.__words[0] = (uint64_t)(*((void *)&__p + 1) - __p) >> 4;
                ims::detail::to_string_impl<unsigned long,std::integral_constant<BOOL,false>>::operator()();
              }
              std::string::basic_string[abi:ne180100]<0>(&v134, "NO");
              (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &v134);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" subscriber(s) for ", 19);
              *(unsigned char *)(v24 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &v94);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v24 + 17) = 0;
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v134.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v135.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v136.__r_.__value_.__l.__data_);
              }
              long long v25 = (SipStack **)*((void *)&__p + 1);
              long long v26 = (SipStack **)__p;
              if ((void)__p == *((void *)&__p + 1))
              {
LABEL_90:
                std::string::basic_string[abi:ne180100]<0>(&__str, "");
                char v38 = (const std::string *)(v3 + 24);
LABEL_91:
                v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
                if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v94.__r_.__value_.__l.__data_);
                }
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                  std::string::basic_string[abi:ne180100]<0>(&v136, "");
                  uint64_t v40 = ims::debug((uint64_t)&__p, (uint64_t)&v136);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Use normal stack for emergency", 30);
                  *(unsigned char *)(v40 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v40 + 17) = 0;
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v136.__r_.__value_.__l.__data_);
                  }
                  if (SBYTE7(v69) < 0) {
                    operator delete((void *)__p);
                  }
                  std::string::operator=(&v104, &__str);
                }
                char v41 = (const ImsPrefs *)SipStack::prefs(v99);
                SipRegistrationConfig::initializeFromPrefs(&v106, v41);
                long long v43 = *(std::string **)(v3 + 504);
                long long v42 = *(std::string **)(v3 + 512);
                while (v43 != v42)
                {
                  uint64_t v93 = 0;
                  long long v91 = 0u;
                  long long v92 = 0u;
                  long long v89 = 0u;
                  long long v90 = 0u;
                  long long v87 = 0u;
                  long long v88 = 0u;
                  long long v85 = 0u;
                  long long v86 = 0u;
                  long long v83 = 0u;
                  long long v84 = 0u;
                  long long v81 = 0u;
                  long long v82 = 0u;
                  long long v79 = 0u;
                  long long v80 = 0u;
                  long long v77 = 0u;
                  long long v78 = 0u;
                  long long v75 = 0u;
                  long long v76 = 0u;
                  long long v73 = 0u;
                  long long v74 = 0u;
                  long long v71 = 0u;
                  long long v72 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  long long __p = 0u;
                  SipUri::SipUri((uint64_t)&__p, v43);
                  if (SipUri::isValidUri((SipUri *)&__p))
                  {
                    std::vector<std::string>::pointer end = v106.__end_;
                    if (v106.__end_ >= v106.__end_cap_.__value_)
                    {
                      long long v45 = (std::string *)std::vector<SipUri>::__push_back_slow_path<SipUri const&>((uint64_t *)&v106, (const SipUri *)&__p);
                    }
                    else
                    {
                      SipUri::SipUri((SipUri *)v106.__end_, (const SipUri *)&__p);
                      long long v45 = end + 17;
                    }
                    v106.__end_ = v45;
                  }
                  SipUri::~SipUri((SipUri *)&__p);
                  ++v43;
                }
                memset(&v94, 0, sizeof(v94));
                uint64_t v46 = (ImsPrefs *)SipStack::prefs(v99);
                EmergencyRegistrationRequestUriKey = (void **)ImsPrefs::getEmergencyRegistrationRequestUriKey(v46);
                ImsPrefs::stringValue(v46, EmergencyRegistrationRequestUriKey);
                std::string::size_type v48 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
                if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v48 = v94.__r_.__value_.__l.__size_;
                }
                if (v48 && (SipUri::fromString((uint64_t)&v108, &v94) & 1) == 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                  std::string::basic_string[abi:ne180100]<0>(&v136, "");
                  uint64_t v49 = ims::error((uint64_t)&__p, (uint64_t)&v136);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"Invalid emergency registration request URI: ", 44);
                  *(unsigned char *)(v49 + 17) = 0;
                  (*(void (**)(uint64_t, std::string *))(*(void *)v49 + 32))(v49, &v94);
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v49 + 17) = 0;
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v136.__r_.__value_.__l.__data_);
                  }
                  if (SBYTE7(v69) < 0) {
                    operator delete((void *)__p);
                  }
                }
                std::string::operator=(&v109, (const std::string *)(v3 + 456));
                std::string::operator=(v110, (const std::string *)(v3 + 432));
                std::string v50 = (ImsPrefs *)SipStack::prefs(v99);
                RegistrationExpirationSecondsKey = (void **)ImsPrefs::getRegistrationExpirationSecondsKey(v50);
                int v107 = ImsPrefs::intValue(v50, RegistrationExpirationSecondsKey);
                std::string::operator=(&v111, v38);
                std::string::operator=(&v112, (const std::string *)(v3 + 48));
                long long v113 = *(_OWORD *)(v3 + 72);
                char v114 = *(unsigned char *)(v3 + 88);
                std::string::operator=(&v115, (const std::string *)(v3 + 96));
                std::string::operator=(&v116, (const std::string *)(v3 + 120));
                long long v117 = *(_OWORD *)(v3 + 144);
                char v118 = *(unsigned char *)(v3 + 160);
                std::string::operator=(&v119, (const std::string *)(v3 + 168));
                std::string::operator=(&v120, (const std::string *)(v3 + 192));
                long long v121 = *(_OWORD *)(v3 + 216);
                char v122 = *(unsigned char *)(v3 + 232);
                SipStack::setEmergencyAni(v99, (const ims::AccessNetworks *)v38);
                SipStack::carrierIdentifier(v99, &v67);
                long long __p = 0uLL;
                *(void *)&long long v69 = 0;
                BambiPrefsManager::subscribers((BambiPrefsManager *)&v67, (uint64_t *)&__p);
                for (uint64_t i = (void *)__p; i != *((void **)&__p + 1); i += 2)
                {
                  if (!*(unsigned char *)(*i + 176))
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v136, "call");
                    std::string::basic_string[abi:ne180100]<0>(&v135, "");
                    uint64_t v54 = ims::debug((uint64_t)&v136, (uint64_t)&v135);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"using companion stack ", 22);
                    *(unsigned char *)(v54 + 17) = 0;
                    uint64_t v55 = *i;
                    if (*(char *)(*i + 4183) < 0) {
                      std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(v55 + 4160), *(void *)(v55 + 4168));
                    }
                    else {
                      std::string v134 = *(std::string *)(v55 + 4160);
                    }
                    (*(void (**)(uint64_t, std::string *))(*(void *)v54 + 32))(v54, &v134);
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v54 + 17) = 0;
                    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v134.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v135.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v136.__r_.__value_.__l.__data_);
                    }
                    uint64_t v53 = *i;
                    uint64_t v56 = i[1];
                    if (v56) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
                    }
LABEL_133:
                    v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
                    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v67.__r_.__value_.__l.__data_);
                    }
                    memset(&v136, 0, sizeof(v136));
                    if (v53) {
                      uint64_t v57 = v53 + 3376;
                    }
                    else {
                      uint64_t v57 = v3;
                    }
                    if (*(char *)(v57 + 431) < 0) {
                      std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)(v57 + 408), *(void *)(v57 + 416));
                    }
                    else {
                      std::string v136 = *(std::string *)(v57 + 408);
                    }
                    memset(&v135, 0, sizeof(v135));
                    if (*(char *)(v57 + 407) < 0) {
                      std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(v57 + 384), *(void *)(v57 + 392));
                    }
                    else {
                      std::string v135 = *(std::string *)(v57 + 384);
                    }
                    int v58 = *(_DWORD *)(v3 + 552);
                    std::string::operator=((std::string *)(v65 + 208), &v136);
                    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                    std::string::basic_string[abi:ne180100]<0>(&v134, "");
                    uint64_t v59 = ims::debug((uint64_t)&__p, (uint64_t)&v134);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"saved IMSI: ", 12);
                    *(unsigned char *)(v59 + 17) = 0;
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 32))(v59, v65 + 208);
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v59 + 17) = 0;
                    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v134.__r_.__value_.__l.__data_);
                    }
                    if (SBYTE7(v69) < 0) {
                      operator delete((void *)__p);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
                    std::string::basic_string[abi:ne180100]<0>(&v134, "");
                    uint64_t v60 = ims::debug((uint64_t)&__p, (uint64_t)&v134);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)"picking emergency IMPU ", 23);
                    *(unsigned char *)(v60 + 17) = 0;
                    if (v58 == 1) {
                      long long v61 = "USIM";
                    }
                    else {
                      long long v61 = "ISIM";
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)v61, 4);
                    *(unsigned char *)(v60 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)" from list: ", 12);
                    *(unsigned char *)(v60 + 17) = 0;
                    std::string::basic_string[abi:ne180100]<0>(&v66, ",");
                    ims::join<std::__wrap_iter<std::string const*>>();
                  }
                }
                uint64_t v53 = 0;
                goto LABEL_133;
              }
              while (1)
              {
                if (*v26)
                {
                  SipStack::carrierIdentifier(*v26, &v136);
                  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v27 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v27 = v136.__r_.__value_.__l.__size_;
                  }
                  std::string::size_type v28 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
                  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v28 = v94.__r_.__value_.__l.__size_;
                  }
                  if (v27 != v28)
                  {
                    if ((*((unsigned char *)&v136.__r_.__value_.__s + 23) & 0x80) != 0) {
                      operator delete(v136.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_89;
                  }
                  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v29 = &v94;
                  }
                  else {
                    long long v29 = (std::string *)v94.__r_.__value_.__r.__words[0];
                  }
                  if ((*((unsigned char *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    long long v34 = (void *)v136.__r_.__value_.__r.__words[0];
                    int v35 = memcmp(v136.__r_.__value_.__l.__data_, v29, v136.__r_.__value_.__l.__size_);
                    operator delete(v34);
                    if (v35) {
                      goto LABEL_89;
                    }
                  }
                  else if (*((unsigned char *)&v136.__r_.__value_.__s + 23))
                  {
                    uint64_t v30 = 0;
                    do
                    {
                      int v31 = v136.__r_.__value_.__s.__data_[v30];
                      int v32 = v29->__r_.__value_.__s.__data_[v30];
                    }
                    while (v31 == v32 && HIBYTE(v136.__r_.__value_.__r.__words[2]) - 1 != v30++);
                    if (v31 != v32) {
                      goto LABEL_89;
                    }
                  }
                  if (*((char *)*v26 + 1631) >= 0) {
                    std::string v36 = (char *)*v26 + 1608;
                  }
                  else {
                    std::string v36 = (const char *)*((void *)*v26 + 201);
                  }
                  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string v37 = &v126;
                  }
                  else {
                    std::string v37 = (std::string *)v126.__r_.__value_.__r.__words[0];
                  }
                  if (!strcasecmp(v36, (const char *)v37))
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v136, "call");
                    std::string::basic_string[abi:ne180100]<0>(&v135, "");
                    char v38 = (const std::string *)(v3 + 24);
                    uint64_t v62 = ims::debug((uint64_t)&v136, (uint64_t)&v135);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)"interface ", 10);
                    *(unsigned char *)(v62 + 17) = 0;
                    (*(void (**)(uint64_t, std::string *))(*(void *)v62 + 32))(v62, &v126);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)" used by existing stack ", 24);
                    *(unsigned char *)(v62 + 17) = 0;
                    long long v63 = *v26;
                    if (*((char *)*v26 + 4183) < 0) {
                      std::string::__init_copy_ctor_external(&v134, *((const std::string::value_type **)v63 + 520), *((void *)v63 + 521));
                    }
                    else {
                      std::string v134 = *(std::string *)((char *)v63 + 4160);
                    }
                    (*(void (**)(uint64_t, std::string *))(*(void *)v62 + 32))(v62, &v134);
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v62 + 17) = 0;
                    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v134.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v135.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v136.__r_.__value_.__l.__data_);
                    }
                    long long v64 = *v26;
                    if (*((char *)*v26 + 4183) < 0) {
                      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v64 + 520), *((void *)v64 + 521));
                    }
                    else {
                      std::string __str = *(std::string *)((char *)v64 + 4160);
                    }
                    goto LABEL_91;
                  }
                }
LABEL_89:
                v26 += 2;
                if (v26 == v25) {
                  goto LABEL_90;
                }
              }
            }
          }
          else if ((v15 & 0x80) == 0)
          {
            goto LABEL_24;
          }
          operator delete((void *)__p);
          if (v20) {
            goto LABEL_45;
          }
          goto LABEL_35;
        }
      }
      else if (*(unsigned char *)(v10 + 23))
      {
        goto LABEL_13;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v136, "");
    long long v21 = (unsigned char *)ims::error((uint64_t)&__p, (uint64_t)&v136);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v21 + 1), (uint64_t)"No emergency interface specified for emergency call", 51);
    v21[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v136, "");
    long long v21 = (unsigned char *)ims::error((uint64_t)&__p, (uint64_t)&v136);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v21 + 1), (uint64_t)"No sip stack ", 13);
    v21[17] = 0;
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v21 + 32))(v21, v4 + 5096);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v21[17] = 0;
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v69) < 0) {
    operator delete((void *)__p);
  }
  SipUri::~SipUri((SipUri *)v96);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  if (v130 < 0) {
    operator delete((void *)v129[51]);
  }
  SipUri::~SipUri((SipUri *)v129);
  SipStackConfig::~SipStackConfig(v123);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&v106.__begin_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (v103 < 0) {
    operator delete(v102);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  BambiCallOptions::~BambiCallOptions(v131);
  char v132 = &unk_1F20B3708;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
}

void sub_1C52A20C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51)
{
  *(void *)(v51 - 128) = &a51;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 128));
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  SipUri::~SipUri((SipUri *)&STACK[0x320]);
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (STACK[0x4E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4E8]);
  }
  BambiEmergencyCallOptions::~BambiEmergencyCallOptions((void **)&STACK[0x4F0]);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x1750]);
  *(void *)(v51 - 224) = a16;
  if (*(char *)(v51 - 193) < 0) {
    operator delete(*(void **)(v51 - 216));
  }
  _Unwind_Resume(a1);
}

void IMSCallManager::endLegacyCall(uint64_t a1, int a2, _DWORD *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v23, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Doing HANG UP to call Id = ", 27);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  memset(&v23, 0, sizeof(v23));
  std::string::basic_string[abi:ne180100]<0>(&v23, "UserTriggered");
  switch(*a3)
  {
    case 1:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 12;
        uint64_t v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 12;
        uint64_t v7 = &v23;
      }
      qmemcpy(v7, "DoNotDisturb", 12);
      uint64_t v13 = &v7->__r_.__value_.__s.__data_[12];
      goto LABEL_30;
    case 2:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 19;
        uint64_t v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 19;
        uint64_t v8 = &v23;
      }
      qmemcpy(v8, "CallWaitingDisabled", 19);
      uint64_t v13 = &v8->__r_.__value_.__s.__data_[19];
      goto LABEL_30;
    case 3:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 5;
        uint64_t v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 5;
        uint64_t v9 = &v23;
      }
      qmemcpy(v9, "SRVCC", 5);
      uint64_t v13 = &v9->__r_.__value_.__s.__data_[5];
      goto LABEL_30;
    case 4:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 16;
        uint64_t v10 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 16;
        uint64_t v10 = &v23;
      }
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)"DeferToSecondary";
      uint64_t v13 = &v10->__r_.__value_.__s.__data_[16];
      goto LABEL_30;
    case 5:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 14;
        uint64_t v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 14;
        uint64_t v11 = &v23;
      }
      qmemcpy(v11, "AvoidVoicemail", 14);
      uint64_t v13 = &v11->__r_.__value_.__s.__data_[14];
      goto LABEL_30;
    case 6:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        v23.__r_.__value_.__l.__size_ = 7;
        int v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v23.__r_.__value_.__s + 23) = 7;
        int v12 = &v23;
      }
      qmemcpy(v12, "Blocked", 7);
      uint64_t v13 = &v12->__r_.__value_.__s.__data_[7];
LABEL_30:
      *uint64_t v13 = 0;
      break;
    default:
      break;
  }
  uint64_t v14 = *(uint64_t **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48) - (void)v14;
  if (v15)
  {
    unint64_t v16 = v15 >> 3;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    while (1)
    {
      uint64_t v17 = *v14;
      if (*v14)
      {
        if (*(unsigned __int8 *)(v17 + 40) == a2) {
          break;
        }
      }
      ++v14;
      if (!--v16) {
        goto LABEL_37;
      }
    }
    IMSCallInfo::endCall(v17, &v23);
  }
  else
  {
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v18 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to HANG UP call Id = ", 28);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)".  No call found.", 17);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1C52A2B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::endCall(uint64_t a1, uint64_t a2, const std::string *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v18, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Doing HANG UP to call UUID = ", 29);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v16 = *(std::string *)(a2 + 8);
  }
  uint64_t v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v15);
  uint64_t v8 = (IMSCallInfo *)v7;
  uint64_t v15 = &unk_1F20B3708;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_10;
    }
  }
  else if (v7)
  {
    if (*((_DWORD *)v8 + 144) != 1) {
      goto LABEL_16;
    }
LABEL_10:
    IMSCallInfo::stack(v8, &v18);
    std::string::size_type v9 = v18.__r_.__value_.__r.__words[0];
    if (v18.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18.__r_.__value_.__l.__size_);
    }
    if (v9)
    {
      IMSCallInfo::uuid((IMSCallInfo *)v13, (uint64_t)v8);
      IMSCallInfo::stack(v8, &v11);
      if (*(char *)(v11 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
      }
      else {
        std::string v18 = *(std::string *)(v11 + 4160);
      }
      ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &__p);
      IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)v13, (void **)&v18.__r_.__value_.__l.__data_, &__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v13[0] = &unk_1F20B3708;
      if (v14 < 0) {
        operator delete((void *)v13[1]);
      }
      (*(void (**)(uint64_t, IMSCallInfo *))(*(void *)a1 + 240))(a1, v8);
    }
    else
    {
LABEL_16:
      IMSCallInfo::endCall((uint64_t)v8, a3);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v10 = ims::error((uint64_t)&v18, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"endCall: unknown callId ", 24);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v10);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C52A2F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::callInfoForUuid(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48) == *(void *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "call");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::debug((uint64_t)v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Checking call ", 14);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v5 + 17) = 0;
    IMSCallInfo::uuid((IMSCallInfo *)&v10, *(void *)(*(void *)(a1 + 40) + 8 * v4));
    v10[2]((void **)&v10, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v10 = (void (**)(void **, uint64_t))&unk_1F20B3708;
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(v6 + 8 * v4);
    if (v7)
    {
      IMSCallInfo::uuid((IMSCallInfo *)&v10, v7);
      int v8 = ImsUuid::operator==((uint64_t)&v10, a2);
      uint64_t v10 = (void (**)(void **, uint64_t))&unk_1F20B3708;
      if (v12 < 0) {
        operator delete(__p);
      }
      uint64_t v6 = *(void *)(a1 + 40);
      if (v8) {
        break;
      }
    }
    if (++v4 >= (unint64_t)((*(void *)(a1 + 48) - v6) >> 3)) {
      return 0;
    }
  }
  return *(void *)(v6 + 8 * v4);
}

void sub_1C52A3240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::ringCall(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Doing RING to call Id = ", 24);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  int v8 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v9 = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v8);
  uint64_t v6 = (IMSCallInfo *)v5;
  int v8 = &unk_1F20B3708;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_10;
    }
  }
  else if (v5)
  {
LABEL_10:
    IMSCallInfo::ringCall(v6);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::error((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ringCall: unknown callId ", 25);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v7);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1C52A350C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::answerCall(uint64_t a1, uint64_t a2, const std::string *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Doing ANSWER to call Id = ", 26);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v10 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v11 = *(std::string *)(a2 + 8);
  }
  uint64_t v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v10);
  int v8 = (void *)v7;
  uint64_t v10 = &unk_1F20B3708;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_10;
    }
  }
  else if (v7)
  {
LABEL_10:
    IMSCallInfo::answerCall(v8, a3);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"answerCall: unknown callId ", 27);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_1C52A37C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL IMSCallManager::activateCall(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Doing ACTIVATE to call Id = ", 28);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v7 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v8 = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v7);
  uint64_t v7 = &unk_1F20B3708;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v5) {
    IMSCallInfo::setActive(v5, 1);
  }
  return v5 != 0;
}

void sub_1C52A39A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::deactivateCall(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Doing DEACTIVATE to call Id = ", 30);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  char v10 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v11 = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v10);
  char v10 = &unk_1F20B3708;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v5)
  {
    IMSCallInfo::setActive(v5, 0);
    uint64_t v7 = *((void *)v5 + 16);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 17);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v7)
      {
        uint64_t v9 = *((void *)v5 + 16);
        std::string v8 = (std::__shared_weak_count *)*((void *)v5 + 17);
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          *(unsigned char *)(v9 + 1810) = 1;
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        else
        {
          *(unsigned char *)(v9 + 1810) = 1;
        }
      }
    }
    else if (v7)
    {
      *(unsigned char *)(v7 + 1810) = 1;
    }
  }
}

void sub_1C52A3BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::playDtmf(IMSCallInfo *this, RTPManager *a2)
{
  uint64_t v4 = *((void *)this + 16);
  if (v4 && *((unsigned char *)this + 572))
  {
    uint64_t v5 = *(RTPManager **)(v4 + 376);
    RTPManager::startSendingDTMF(v5, a2);
  }
  else if (*((void *)this + 69))
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 216))(&v7);
    uint64_t v6 = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v6)
    {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 216))(&v7);
      RTPManager::startSendingDTMF(*(RTPManager **)(v7 + 376), a2);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_1C52A3D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::playDtmf(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4 && *(unsigned char *)(a1 + 572))
  {
    uint64_t v5 = *(void *)(v4 + 376);
    RTPManager::sendDTMFDigits(v5, a2);
  }
  else if (*(void *)(a1 + 552))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 216))(&v7);
    uint64_t v6 = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v6)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 216))(&v7);
      RTPManager::sendDTMFDigits(*(void *)(v7 + 376), a2);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_1C52A3E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::stopDtmf(IMSCallInfo *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2 && *((unsigned char *)this + 572))
  {
    uint64_t v3 = *(RTPManager **)(v2 + 376);
    RTPManager::stopSendingDTMF(v3);
  }
  else if (*((void *)this + 69))
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 216))(&v5);
    uint64_t v4 = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (v4)
    {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 216))(&v5);
      RTPManager::stopSendingDTMF(*(RTPManager **)(v5 + 376));
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1C52A3F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::setRelayMode(IMSCallInfo *this, int a2)
{
  uint64_t v4 = (BambiCall *)*((void *)this + 16);
  if (v4)
  {
    BambiCall::setRelayMode(v4, a2);
  }
  else if (*((void *)this + 69))
  {
    (*(void (**)(BambiCall **__return_ptr))(**((void **)this + 3) + 216))(&v6);
    uint64_t v5 = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5)
    {
      (*(void (**)(BambiCall **__return_ptr))(**((void **)this + 3) + 216))(&v6);
      BambiCall::setRelayMode(v6, a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1C52A402C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::setScreeningMode(IMSCallInfo *this, uint64_t a2)
{
  uint64_t v4 = (BambiCall *)*((void *)this + 16);
  if (v4)
  {
    BambiCall::setScreeningMode(v4, a2);
  }
  else if (*((void *)this + 69))
  {
    (*(void (**)(BambiCall **__return_ptr))(**((void **)this + 3) + 216))(&v6);
    uint64_t v5 = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5)
    {
      (*(void (**)(BambiCall **__return_ptr))(**((void **)this + 3) + 216))(&v6);
      BambiCall::setScreeningMode(v6, a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1C52A4130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallInfo::setTextMediaSessionMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4)
  {
    BambiCall::setTextMediaSessionMode(v4, a2);
  }
  else if (*(void *)(a1 + 552))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 216))(&v6);
    uint64_t v5 = v6;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 216))(&v6);
      BambiCall::setTextMediaSessionMode(v6, a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1C52A4234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::playDtmf(uint64_t a1, uint64_t a2, RTPManager *a3)
{
  uint64_t v6 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  uint64_t v6 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    IMSCallInfo::playDtmf(v5, a3);
  }
}

void sub_1C52A4308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::playDtmf(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v6 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  uint64_t v6 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    IMSCallInfo::playDtmf(v5, a3);
  }
}

void sub_1C52A43E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::stopDtmf(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v3 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v4);
  uint64_t v4 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    IMSCallInfo::stopDtmf(v3);
  }
}

void sub_1C52A44B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setRelayMode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  uint64_t v6 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    IMSCallInfo::setRelayMode(v5, a3);
  }
}

void sub_1C52A458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setScreeningMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v5 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v6);
  uint64_t v6 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    IMSCallInfo::setScreeningMode(v5, a3);
  }
}

void sub_1C52A4668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setTextMediaSessionMode(uint64_t a1, uint64_t a2, int a3)
{
  char v13 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  uint64_t v6 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v13);
  uint64_t v7 = v6;
  char v13 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7) {
      goto LABEL_6;
    }
  }
  else if (v6)
  {
LABEL_6:
    IMSCallInfo::setTextMediaSessionMode(v7, a3);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "call");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v8 = ims::warn((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unable to set text mode for call.  No call for UUID ", 52);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C52A481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::setTextMediaSessionMode(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  if (!a4) {
    a3 = 0;
  }
  if (a3 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v5 = ims::error((uint64_t)&v33, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"TTY mode is not supported by IMS", 32);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v32 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v33, "call");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = ims::debug((uint64_t)&v33, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Turning RTT ", 12);
  *(unsigned char *)(v8 + 17) = 0;
  if (a3 == 2) {
    uint64_t v9 = "ON";
  }
  else {
    uint64_t v9 = "OFF";
  }
  if (a3 == 2) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for stack ID ", 14);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 32))(v8, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string v11 = *(IMSCallInfo ***)(a1 + 40);
  char v12 = *(IMSCallInfo ***)(a1 + 48);
  if (v11 != v12)
  {
    while (1)
    {
      char v13 = *v11;
      IMSCallInfo::stack(*v11, &__p);
      if (__p) {
        break;
      }
      BOOL v14 = 0;
LABEL_51:
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v14) {
        IMSCallInfo::setTextMediaSessionMode((uint64_t)v13, a3);
      }
      if (++v11 == v12) {
        return;
      }
    }
    IMSCallInfo::stack(v13, &v28);
    if (*(char *)(v28 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v28 + 4160), *(void *)(v28 + 4168));
    }
    else {
      std::string v33 = *(std::string *)(v28 + 4160);
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = a2[23];
    int v17 = (char)v16;
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    if (size == v16)
    {
      if (v17 >= 0) {
        std::string v18 = a2;
      }
      else {
        std::string v18 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::size_type v27 = (void *)v33.__r_.__value_.__r.__words[0];
        BOOL v14 = memcmp(v33.__r_.__value_.__l.__data_, v18, v33.__r_.__value_.__l.__size_) == 0;
        goto LABEL_47;
      }
      if (*((unsigned char *)&v33.__r_.__value_.__s + 23))
      {
        uint64_t v19 = HIBYTE(v33.__r_.__value_.__r.__words[2]) - 1;
        char v20 = &v33;
        do
        {
          int v22 = v20->__r_.__value_.__s.__data_[0];
          char v20 = (std::string *)((char *)v20 + 1);
          int v21 = v22;
          int v24 = *v18++;
          int v23 = v24;
          BOOL v26 = v19-- != 0;
          BOOL v14 = v21 == v23;
        }
        while (v21 == v23 && v26);
        if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_45:
          std::string::size_type v27 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_47:
          operator delete(v27);
        }
      }
      else
      {
        BOOL v14 = 1;
      }
LABEL_49:
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      goto LABEL_51;
    }
    BOOL v14 = 0;
    if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
}

void sub_1C52A4BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::mergeAllCalls(IMSCallManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)&v80);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Doing MERGE ALL", 15);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (SHIBYTE(v82[0]) < 0) {
    operator delete(v80);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 5);
  uint64_t v3 = (uint64_t *)*((void *)this + 6);
  if (v4 == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v80, "");
    uint64_t v35 = ims::debug((uint64_t)__p, (uint64_t)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"No calls to merge", 17);
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
    if (SHIBYTE(v82[0]) < 0) {
      operator delete(v80);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  long long v52 = this;
  uint64_t v54 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  long long v80 = 0;
  long long v81 = 0;
  v82[0] = 0;
  do
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *(void *)(*v4 + 128);
    uint64_t v9 = *(std::__shared_weak_count **)(*v4 + 136);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8 || *(void *)(v7 + 552))
    {
      uint64_t v10 = v6;
      if (!v9) {
        goto LABEL_42;
      }
LABEL_12:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v6 = v10;
      goto LABEL_42;
    }
    int v11 = *(unsigned __int8 *)(v7 + 570);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (!v11)
    {
      long long v12 = *(_OWORD *)(v7 + 128);
      uint64_t v13 = *(void *)(v7 + 136);
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v14 = v81;
      if ((unint64_t)v81 >= v82[0])
      {
        long long v53 = v12;
        uint64_t v16 = (v81 - v80) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v82[0] - (void)v80;
        if ((uint64_t)(v82[0] - (void)v80) >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        *(void *)&long long v56 = v82;
        char v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)v82, v19);
        int v21 = &v20[16 * v16];
        *(void *)std::string __p = v20;
        *(void *)&__p[8] = v21;
        *(void *)&__p[24] = &v20[16 * v22];
        *(_OWORD *)int v21 = v53;
        *(void *)&__p[16] = v21 + 16;
        std::vector<std::shared_ptr<BambiCall>>::__swap_out_circular_buffer((uint64_t *)&v80, __p);
        char v15 = v81;
        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)__p);
      }
      else
      {
        *(void *)long long v81 = v12;
        *((void *)v14 + 1) = v13;
        char v15 = v14 + 16;
      }
      long long v81 = v15;
      *(unsigned char *)(v7 + 570) = 1;
      uint64_t v24 = *(void *)(v7 + 128);
      int v23 = *(std::__shared_weak_count **)(v7 + 136);
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        int v25 = *(unsigned __int8 *)(v24 + 754);
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        uint64_t v24 = *(void *)(v7 + 128);
        BOOL v26 = *(std::__shared_weak_count **)(v7 + 136);
        LODWORD(v54) = (v25 != 0) | v54;
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          int v27 = *(unsigned __int8 *)(v24 + 755);
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          uint64_t v24 = *(void *)(v7 + 128);
          uint64_t v9 = *(std::__shared_weak_count **)(v7 + 136);
          goto LABEL_32;
        }
      }
      else
      {
        LODWORD(v54) = (*(unsigned char *)(v24 + 754) != 0) | v54;
      }
      uint64_t v9 = 0;
      int v27 = *(unsigned __int8 *)(v24 + 755);
LABEL_32:
      BYTE4(v54) |= v27 != 0;
      if (v5)
      {
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = *(std::__shared_weak_count **)(v24 + 368);
        if (v28 && (long long v29 = std::__shared_weak_count::lock(v28)) != 0)
        {
          BOOL v30 = *(void *)(v24 + 360) == v5;
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          if (!v9)
          {
LABEL_41:
            if (!v30)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "call");
              std::string::basic_string[abi:ne180100]<0>(&v79, "");
              uint64_t v44 = ims::error((uint64_t)__p, (uint64_t)&v79);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Unable to merge calls across SIP stacks.  Merge from ", 53);
              *(unsigned char *)(v44 + 17) = 0;
              if (*(char *)(v5 + 4183) < 0) {
                std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
              }
              else {
                std::string v78 = *(std::string *)(v5 + 4160);
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)v44 + 32))(v44, &v78);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)" to ", 4);
              *(unsigned char *)(v44 + 17) = 0;
              uint64_t v46 = *(void *)(v7 + 128);
              long long v45 = *(std::__shared_weak_count **)(v7 + 136);
              if (v45) {
                atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v47 = *(std::__shared_weak_count **)(v46 + 368);
              if (v47) {
                std::string::size_type v48 = std::__shared_weak_count::lock(v47);
              }
              else {
                std::string::size_type v48 = 0;
              }
              std::ostream::operator<<();
              *(unsigned char *)(v44 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)" requested.", 11);
              *(unsigned char *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v44 + 17) = 0;
              if (v48) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v48);
              }
              if (v45) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v45);
              }
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v78.__r_.__value_.__l.__data_);
              }
              goto LABEL_70;
            }
            goto LABEL_42;
          }
        }
        else
        {
          BOOL v30 = 0;
          if (!v9) {
            goto LABEL_41;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        goto LABEL_41;
      }
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v31 = *(std::__shared_weak_count **)(v24 + 368);
      if (v31)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v31);
        if (v10)
        {
          uint64_t v5 = *(void *)(v24 + 360);
          if (!v6)
          {
LABEL_53:
            uint64_t v6 = v10;
            if (v9) {
              goto LABEL_12;
            }
            goto LABEL_42;
          }
LABEL_52:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      uint64_t v5 = 0;
      if (!v6) {
        goto LABEL_53;
      }
      goto LABEL_52;
    }
LABEL_42:
    ++v4;
  }
  while (v4 != v3);
  if (v81 == v80)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v79, "");
    uint64_t v36 = ims::debug((uint64_t)__p, (uint64_t)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"No new calls to merge", 21);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
LABEL_70:
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
LABEL_88:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v34 = 0;
    if (v6) {
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  char v32 = (char *)(v5 + 4183);
  if (!*(unsigned char *)(v5 + 4336))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v79, "");
    uint64_t v37 = ims::error((uint64_t)__p, (uint64_t)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Previous conference INVITE ended fatally, automatically failing merge.", 70);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (*v32 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 4160);
      *(void *)&__p[16] = *(void *)(v5 + 4176);
    }
    uint64_t v42 = IMSClientManager::delegateForStack((void **)__p);
    (*(void (**)(void))(*(void *)(v42 + 16) + 40))();
    goto LABEL_88;
  }
  if (*((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v79, "");
    uint64_t v33 = ims::debug((uint64_t)__p, (uint64_t)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Merging ", 8);
    *(unsigned char *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" calls into existing conference", 31);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v34 = BambiConferenceCall::addCalls(*((void *)this + 14), (uint64_t *)&v80);
    if (!v6) {
      goto LABEL_92;
    }
LABEL_91:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_92;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  uint64_t v38 = ims::debug((uint64_t)__p, (uint64_t)&v79);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Starting conference call with ", 30);
  *(unsigned char *)(v38 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v38 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" other participants", 19);
  *(unsigned char *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v38 + 17) = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v39 = IMSCallManager::getActiveCall(this);
  if (v39)
  {
    IMSCallInfo::uuid((IMSCallInfo *)__p, v39);
    uint64_t v40 = (void **)((char *)this + 144);
    if (*((char *)v52 + 167) < 0) {
      operator delete(*v40);
    }
    *(_OWORD *)uint64_t v40 = *(_OWORD *)&__p[8];
    *((void *)v52 + 20) = *(void *)&__p[24];
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v79, "");
    uint64_t v41 = ims::debug((uint64_t)__p, (uint64_t)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"setting _activeCallBeforeConference to ", 39);
    *(unsigned char *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*((void *)v52 + 17) + 16))((uint64_t)v52 + 136, v41);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (*((char *)this + 167) < 0)
    {
      **((unsigned char **)this + 18) = 0;
      *((void *)this + 19) = 0;
    }
    else
    {
      *((unsigned char *)this + 144) = 0;
      *((unsigned char *)this + 167) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v79, "");
    uint64_t v41 = ims::error((uint64_t)__p, (uint64_t)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"No active call when starting conference", 39);
    *(unsigned char *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v41 + 17) = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v75 = 0;
  uint64_t v63 = 0;
  *(void *)&v58[1] = 0;
  long long v56 = 0u;
  memset(v57, 0, sizeof(v57));
  memset(__p, 0, sizeof(__p));
  DWORD2(v56) = 90;
  v57[0] = 1;
  v57[2] = 1;
  *(void *)&v57[4] = 0x200000001;
  *(_WORD *)&v57[13] = 257;
  *(_WORD *)int v58 = 256;
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v59 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v66 = 0x40A7700000000000;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v49 = (const ImsPrefs *)SipStack::prefs((SipStack *)v5);
  BambiCallOptions::initializeFromPrefs((BambiCallOptions *)__p, v49);
  BYTE2(v59) = v54 & 1;
  BYTE3(v59) = BYTE4(v54) & 1;
  if (*v32 < 0) {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string v79 = *(std::string *)(v5 + 4160);
  }
  IMSCallManager::sendCallStatusRequest((uint64_t)v52, (uint64_t)&v79, 0, 1, 0);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  BambiClient::initializeConferenceCall(*(void *)(*((void *)v52 + 3) + 168), (uint64_t *)&v80, (uint64_t)v52 + 16, (const BambiCallOptions *)__p, (BambiCall **)&v79);
  long long v50 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v51 = (std::__shared_weak_count *)*((void *)v52 + 15);
  *((_OWORD *)v52 + 7) = v50;
  if (v51)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    if (v79.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v79.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v34 = *((void *)v52 + 14) != 0;
  BambiCallOptions::~BambiCallOptions((void **)__p);
  if (v6) {
    goto LABEL_91;
  }
LABEL_92:
  *(void *)std::string __p = &v80;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v34;
}

void sub_1C52A58C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v21 - 121) < 0) {
    operator delete(*(void **)(v21 - 144));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  *(void *)(v21 - 144) = v21 - 120;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 144));
  _Unwind_Resume(a1);
}

uint64_t IMSCallManager::getActiveCall(IMSCallManager *this)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BambiClient::activeCall(*(void *)(*((void *)this + 3) + 168), &v9);
  uint64_t v2 = v9;
  if (!v9 || (uint64_t v3 = (uint64_t *)*((void *)this + 5), v4 = (uint64_t *)*((void *)this + 6), v3 == v4))
  {
LABEL_8:
    uint64_t v5 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        uint64_t v7 = *(void *)(v5 + 128);
        uint64_t v6 = *(std::__shared_weak_count **)(v5 + 136);
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        if (v7 == v2) {
          break;
        }
      }
      if (++v3 == v4) {
        goto LABEL_8;
      }
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v5;
}

void IMSCallManager::transferCalls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ImsUuid::ImsUuid(v28, a2);
  uint64_t v6 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)v28);
  v28[0] = &unk_1F20B3708;
  if (v29 < 0) {
    operator delete((void *)v28[1]);
  }
  ImsUuid::ImsUuid(v26, a3);
  uint64_t v7 = IMSCallManager::callInfoForUuid(a1, (uint64_t)v26);
  v26[0] = &unk_1F20B3708;
  if (v27 < 0)
  {
    operator delete((void *)v26[1]);
    if (v6) {
      goto LABEL_5;
    }
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&v25, "call");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v12 = ims::error((uint64_t)&v25, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"No call ", 8);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" found for transferee", 21);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    goto LABEL_21;
  }
  if (!v6) {
    goto LABEL_19;
  }
LABEL_5:
  if (v7)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    IMSCallInfo::stack(v6, &v21);
    uint64_t v8 = (uint64_t *)v21;
    if (v21)
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 17);
      uint64_t v19 = *((void *)v6 + 16);
      char v20 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(v7 + 136);
      uint64_t v17 = *(void *)(v7 + 128);
      uint64_t v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v11 = SipStack::transferCalls(v8, &v19, &v17);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v11) {
        goto LABEL_37;
      }
      if (*(char *)(v21 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v21 + 4160), *(void *)(v21 + 4168));
      }
      else {
        std::string v25 = *(std::string *)(v21 + 4160);
      }
      uint64_t v16 = IMSClientManager::delegateForStack((void **)&v25.__r_.__value_.__l.__data_);
      (*(void (**)(void))(*(void *)(v16 + 16) + 112))();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "call");
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      uint64_t v14 = ims::error((uint64_t)&v25, (uint64_t)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No valid SIP stack to initiate transfer", 39);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v21 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v21 + 4160), *(void *)(v21 + 4168));
      }
      else {
        std::string v25 = *(std::string *)(v21 + 4160);
      }
      uint64_t v15 = IMSClientManager::delegateForStack((void **)&v25.__r_.__value_.__l.__data_);
      (*(void (**)(void))(*(void *)(v15 + 16) + 112))();
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
LABEL_37:
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "call");
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  uint64_t v13 = ims::error((uint64_t)&v25, (uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No call ", 8);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" found for transfer target", 26);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
LABEL_21:
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C52A5F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::transferAllCalls(IMSCallManager *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  if (*((void *)this + 6) - (void)v1 >= 0x10uLL)
  {
    IMSCallInfo::uuid((IMSCallInfo *)&v6, *v1);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = v7;
    }
    IMSCallInfo::uuid((IMSCallInfo *)&v3, *(void *)(*((void *)this + 6) - 8));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v5 = __p;
    }
    IMSCallManager::transferCalls((uint64_t)this, (uint64_t)&v8, (uint64_t)&v5);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = &unk_1F20B3708;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = &unk_1F20B3708;
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C52A61EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 25) < 0) {
    operator delete(*(void **)(v29 - 48));
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::refreshCall(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Sending reinvite for call Id = ", 31);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string v8 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v9 = *(std::string *)(a2 + 8);
  }
  std::string v7 = (IMSCallInfo *)IMSCallManager::callInfoForUuid(a1, (uint64_t)&v8);
  std::string v8 = &unk_1F20B3708;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v7) {
    IMSCallInfo::refresh(v7, a3);
  }
}

void sub_1C52A641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::callInfoForSipCallId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 48) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v2 + 8 * v5);
    uint64_t v7 = *(void *)(v6 + 128);
    std::string v8 = *(std::__shared_weak_count **)(v6 + 136);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v7)
    {
      BOOL v26 = 0;
      goto LABEL_32;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * v5);
    uint64_t v10 = *(void *)(v9 + 128);
    char v11 = *(std::__shared_weak_count **)(v9 + 136);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(unsigned __int8 *)(v10 + 495);
    size_t v13 = *(void *)(v10 + 480);
    if ((v12 & 0x80u) == 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 495);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 480);
    }
    uint64_t v15 = a2[23];
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)a2 + 1);
    }
    if (v14 == v15)
    {
      uint64_t v17 = (const void **)(v10 + 472);
      if (v16 >= 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *(unsigned __int8 **)a2;
      }
      if ((v12 & 0x80) != 0)
      {
        BOOL v26 = memcmp(*v17, v18, v13) == 0;
        goto LABEL_30;
      }
      if (v12)
      {
        uint64_t v19 = v12 - 1;
        do
        {
          int v21 = *(unsigned __int8 *)v17;
          uint64_t v17 = (const void **)((char *)v17 + 1);
          int v20 = v21;
          int v23 = *v18++;
          int v22 = v23;
          BOOL v25 = v19-- != 0;
          BOOL v26 = v20 == v22;
        }
        while (v20 == v22 && v25);
LABEL_30:
        if (!v11) {
          goto LABEL_32;
        }
LABEL_31:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        goto LABEL_32;
      }
      BOOL v26 = 1;
      if (v11) {
        goto LABEL_31;
      }
    }
    else
    {
      BOOL v26 = 0;
      if (v11) {
        goto LABEL_31;
      }
    }
LABEL_32:
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v26) {
      return *(void *)(*(void *)(a1 + 40) + 8 * v5);
    }
    ++v5;
    uint64_t v2 = *(void *)(a1 + 40);
    if (v5 >= (*(void *)(a1 + 48) - v2) >> 3) {
      return 0;
    }
  }
}

void IMSCallManager::setConferenceCallActive(IMSCallManager *this, int a2)
{
  if (*((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v13, (uint64_t)__p);
    uint64_t v5 = v4;
    if (a2) {
      uint64_t v6 = "Activating";
    }
    else {
      uint64_t v6 = "Deactivating";
    }
    uint64_t v7 = *(void **)(v4 + 8);
    if (a2) {
      uint64_t v8 = 10;
    }
    else {
      uint64_t v8 = 12;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" conference call", 16);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v9 = (BambiCall *)*((void *)this + 14);
    if (a2)
    {
      BambiCall::performLocalResume(v9);
    }
    else
    {
      BambiCall::performLocalHold(v9);
      *(unsigned char *)(*((void *)this + 14) + 1810) = 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"setConferenceCallActive: no existing conference call", 52);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
}

void sub_1C52A67A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::endConferenceCall(IMSCallManager *this)
{
  if (*((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "call");
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Ending conference call", 22);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    uint64_t v3 = (BambiCall *)*((void *)this + 14);
    std::string::basic_string[abi:ne180100]<0>(v8, "UserTriggered");
    BambiCall::endWithReason(v3, (uint64_t)v8, (uint64_t)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "call");
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    uint64_t v4 = ims::error((uint64_t)v8, (uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"endConferenceCall: no existing conference call", 46);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C52A6988(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleCallInvalidated(uint64_t a1, uint64_t *a2)
{
  if (*a2 == *(void *)(a1 + 112))
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "call");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v4 = ims::debug((uint64_t)&v40, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Conference call invalidated", 27);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = *(void *)(a1 + 112);
    if (v5 && *(unsigned char *)(v5 + 2035))
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "call");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v6 = ims::error((uint64_t)&v40, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Conference ended due to fatal error.  Further merges will be disabled.", 70);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = *(void *)(a1 + 112);
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 368);
      if (v8 && (char v9 = std::__shared_weak_count::lock(v8)) != 0)
      {
        *(unsigned char *)(*(void *)(v7 + 360) + 4336) = 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      else
      {
        MEMORY[0x10F0] = 0;
      }
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 120);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v11 = IMSCallManager::getActiveCall((IMSCallManager *)a1);
    if (*(void *)(a1 + 40) != *(void *)(a1 + 48))
    {
      uint64_t v12 = v11;
      uint64_t v13 = *a2;
      char v14 = *(std::__shared_weak_count **)(*a2 + 368);
      if (v14 && (uint64_t v15 = std::__shared_weak_count::lock(v14)) != 0)
      {
        int v16 = *(_DWORD *)(*(void *)(v13 + 360) + 200);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      else
      {
        int v16 = MEMORY[0xC8];
      }
      if (v16 != 2 || v12)
      {
        if (v16 == 2) {
          return;
        }
        std::string::basic_string[abi:ne180100]<0>(&v40, "call");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v17 = ims::debug((uint64_t)&v40, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Stack not initialized.  Forcing disconnect to joined parties.", 61);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        uint64_t v18 = *(uint64_t **)(a1 + 40);
        for (uint64_t i = *(uint64_t **)(a1 + 48); v18 != i; ++v18)
        {
          int v20 = (IMSCallInfo *)*v18;
          if (*v18 && *((void *)v20 + 69))
          {
            IMSCallInfo::uuid((IMSCallInfo *)v33, *v18);
            IMSCallInfo::stack(v20, &v31);
            if (*(char *)(v31 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v31 + 4160), *(void *)(v31 + 4168));
            }
            else {
              std::string v40 = *(std::string *)(v31 + 4160);
            }
            ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &__p);
            IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)v33, (void **)&v40.__r_.__value_.__l.__data_, &__p, 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            v33[0] = &unk_1F20B3708;
            if (v34 < 0) {
              operator delete((void *)v33[1]);
            }
          }
        }
        uint64_t v21 = *a2;
        int v22 = *(std::__shared_weak_count **)(*a2 + 368);
        if (v22)
        {
          int v23 = std::__shared_weak_count::lock(v22);
          if (v23) {
            uint64_t v24 = *(void *)(v21 + 360);
          }
          else {
            uint64_t v24 = 0;
          }
        }
        else
        {
          uint64_t v24 = 0;
          int v23 = 0;
        }
        if (*(char *)(v24 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v24 + 4160), *(void *)(v24 + 4168));
        }
        else {
          std::string v40 = *(std::string *)(v24 + 4160);
        }
        IMSCallManager::sendCallStatusRequest(a1, (uint64_t)&v40, 2, 1, 0);
      }
      else
      {
        if (*(char *)(a1 + 167) < 0)
        {
          if (!*(void *)(a1 + 152)) {
            return;
          }
        }
        else if (!*(unsigned char *)(a1 + 167))
        {
          return;
        }
        std::string::basic_string[abi:ne180100]<0>(&v40, "call");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v25 = ims::debug((uint64_t)&v40, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Activating call with id: ", 25);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 136) + 16))(a1 + 136, v25);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        uint64_t v37 = &unk_1F20B3708;
        if (*(char *)(a1 + 167) < 0) {
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 144), *(void *)(a1 + 152));
        }
        else {
          std::string v38 = *(std::string *)(a1 + 144);
        }
        BOOL v26 = IMSCallManager::activateCall(a1, (uint64_t)&v37);
        uint64_t v37 = &unk_1F20B3708;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        if (!v26)
        {
          IMSCallInfo::uuid((IMSCallInfo *)v35, **(void **)(a1 + 40));
          IMSCallManager::activateCall(a1, (uint64_t)v35);
          v35[0] = &unk_1F20B3708;
          if (v36 < 0) {
            operator delete((void *)v35[1]);
          }
        }
        if (*(char *)(a1 + 167) < 0)
        {
          **(unsigned char **)(a1 + 144) = 0;
          *(void *)(a1 + 152) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 144) = 0;
          *(unsigned char *)(a1 + 167) = 0;
        }
        uint64_t v27 = *a2;
        uint64_t v28 = *(std::__shared_weak_count **)(*a2 + 368);
        if (v28)
        {
          int v23 = std::__shared_weak_count::lock(v28);
          if (v23) {
            uint64_t v29 = *(void *)(v27 + 360);
          }
          else {
            uint64_t v29 = 0;
          }
        }
        else
        {
          uint64_t v29 = 0;
          int v23 = 0;
        }
        if (*(char *)(v29 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v29 + 4160), *(void *)(v29 + 4168));
        }
        else {
          std::string v40 = *(std::string *)(v29 + 4160);
        }
        uint64_t v30 = IMSClientManager::delegateForStack((void **)&v40.__r_.__value_.__l.__data_);
        (*(void (**)(void))(*(void *)(v30 + 16) + 40))();
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
  }
}

void sub_1C52A70D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleCallInvalidated(uint64_t a1, uint64_t *a2)
{
}

void IMSCallManager::handleMediaActivationEvent(IMSCallManager *this, BambiCallEvent *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMedia", 11);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "A";
  }
  else {
    uint64_t v7 = "Dea";
  }
  if (a3) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ctivationEvent", 14);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  char v9 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = std::__shared_weak_count::lock(v9);
    if (!v11) {
      uint64_t v10 = 0;
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  if (v10 == *((void *)this + 14))
  {
    uint64_t v13 = *(SipSession **)(v10 + 392);
    if (v13 && SipSession::confirmed(v13))
    {
      char v14 = (std::__shared_weak_count *)*((void *)this + 15);
      uint64_t v17 = *((void *)this + 14);
      uint64_t v18 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = &unk_1F20B3708;
      if (byte_1EBBDB3B8[23] < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)byte_1EBBDB3B8, *(std::string::size_type *)&byte_1EBBDB3B8[8]);
      }
      else {
        std::string v16 = *(std::string *)byte_1EBBDB3B8;
      }
      (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void **))(*(void *)this + 208))(this, &v17, a3, &v15);
      uint64_t v15 = &unk_1F20B3708;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Ignore for non-conference call.", 31);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C52A7520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleMediaActivationEvent(IMSCallManager *this, BambiCallEvent *a2, uint64_t a3)
{
}

void *IMSCallManager::removeCallInfo(void *this, IMSCallInfo *a2)
{
  uint64_t v3 = this[5];
  uint64_t v2 = this[6];
  if (v3 != v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 0;
    uint64_t v6 = this[5];
    while (*(IMSCallInfo **)(v3 + v5) != a2)
    {
      v5 += 8;
      if (v3 + v5 == v2) {
        return this;
      }
    }
    if (a2)
    {
      this = (void *)(*(uint64_t (**)(IMSCallInfo *))(*(void *)a2 + 8))(a2);
      uint64_t v6 = v4[5];
      uint64_t v2 = v4[6];
    }
    uint64_t v7 = v3 + v5;
    uint64_t v8 = v2 - (v7 + 8);
    if (v2 != v7 + 8)
    {
      this = memmove((void *)v7, (const void *)(v7 + 8), v2 - (v7 + 8));
      uint64_t v6 = v4[5];
    }
    v4[6] = v7 + v8;
    if (v6 == v7 + v8) {
      *((_DWORD *)v4 + 50) = 0;
    }
  }
  return this;
}

void IMSCallManager::handleBurstDtmfSendComplete(IMSCallManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"handleBurstDtmfSendComplete", 27);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C52A775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionConfirmedEvent(IMSCallManager *this, BambiCallSessionConfirmedEvent *a2)
{
  char v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v5 = std::__shared_weak_count::lock(v3);
    if (!v5) {
      uint64_t v4 = 0;
    }
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = 0;
  }
  if (v4 == *((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Conference session confirmed", 28);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = &unk_1F20B3708;
    if (byte_1EBBDB3B8[23] < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)byte_1EBBDB3B8, *(std::string::size_type *)&byte_1EBBDB3B8[8]);
    }
    else {
      std::string v8 = *(std::string *)byte_1EBBDB3B8;
    }
    (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void **))(*(void *)this + 208))(this, &v9, 1, &v7);
    uint64_t v7 = &unk_1F20B3708;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C52A7988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleSessionConfirmedEvent(IMSCallManager *this, BambiCallSessionConfirmedEvent *a2)
{
}

uint64_t IMSCallManager::sendConferenceSubscriptionEvent(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 48);
  return v2();
}

void IMSCallManager::handleSessionTerminatedEvent(IMSCallManager *this, BambiCallSessionTerminatedEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Terminated conference call", 26);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = v5;
    uint64_t v29 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v26 = &unk_1F20B3708;
    if (byte_1EBBDB3B8[23] < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)byte_1EBBDB3B8, *(std::string::size_type *)&byte_1EBBDB3B8[8]);
    }
    else {
      std::string v27 = *(std::string *)byte_1EBBDB3B8;
    }
    (*(void (**)(IMSCallManager *, uint64_t *, void, void **))(*(void *)this + 208))(this, &v28, 0, &v26);
    BOOL v26 = &unk_1F20B3708;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    memset(&v32, 0, sizeof(v32));
    std::string v8 = *(std::__shared_weak_count **)(v5 + 368);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *(void *)(v5 + 360);
LABEL_25:
        if (*(char *)(v10 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
        }
        else {
          std::string v32 = *(std::string *)(v10 + 4160);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        IMSCallManager::sendCallStatusRequest((uint64_t)this, (uint64_t)&v32, 2, 1, 0);
        uint64_t v11 = *((void *)this + 3);
        char v12 = *(IMSMetricsManager **)(v11 + 288);
        uint64_t v13 = *(std::__shared_weak_count **)(v11 + 296);
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        IMSMetricsManager::logSessionTerminationEvent(v12, a2, 255, 255, 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        uint64_t v14 = *((void *)this + 3);
        uint64_t v15 = *(void *)(v14 + 288);
        std::string v16 = *(std::__shared_weak_count **)(v14 + 296);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = v15 + 176;
        for (uint64_t i = *(void *)(v15 + 184); i != v17; uint64_t i = *(void *)(i + 8))
          (*(void (**)(void, BambiCallSessionTerminatedEvent *))(**(void **)(i + 16) + 80))(*(void *)(i + 16), a2);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v19 = IMSClientManager::delegateForStack((void **)&v32.__r_.__value_.__l.__data_);
        (*(void (**)(void))(*(void *)(v19 + 16) + 48))();
        uint64_t v21 = (uint64_t *)*((void *)this + 5);
        for (uint64_t j = (uint64_t *)*((void *)this + 6); v21 != j; ++v21)
        {
          uint64_t v22 = *v21;
          uint64_t v24 = *(void *)(*v21 + 128);
          int v23 = *(std::__shared_weak_count **)(*v21 + 136);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v24 && !*(void *)(v22 + 552))
          {
            int v25 = *(unsigned __int8 *)(v22 + 570);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            if (v25) {
              *(unsigned char *)(v22 + 570) = 0;
            }
          }
          else if (v23)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = 0;
    goto LABEL_25;
  }
LABEL_55:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52A7E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleSessionTerminatedEvent(IMSCallManager *this, BambiCallSessionTerminatedEvent *a2)
{
}

void IMSCallManager::handleSessionActivatedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (v5 == *((void *)this + 14))
  {
    uint64_t v18 = v6;
    std::string::basic_string[abi:ne180100]<0>(v27, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Conference call activated", 25);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v9 = (uint64_t *)*((void *)this + 5);
    std::string v8 = (uint64_t *)*((void *)this + 6);
    while (v9 != v8)
    {
      uint64_t v10 = *v9;
      uint64_t v11 = *(void *)(*v9 + 552);
      char v12 = *(std::__shared_weak_count **)(*v9 + 560);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (!v11) {
        goto LABEL_28;
      }
      IMSCallInfo::uuid((IMSCallInfo *)v23, v10);
      (*(void (**)(IMSCallManager *, void *, __CFString *, void, BambiCallEvent *))(*(void *)this
                                                                                                 + 232))(this, v23, @"kCallStatusActive", *(unsigned __int8 *)(v10 + 40), a2);
      v23[0] = &unk_1F20B3708;
      if (v24 < 0) {
        operator delete((void *)v23[1]);
      }
      uint64_t v13 = *(void *)(v10 + 552);
      uint64_t v14 = *(std::__shared_weak_count **)(v10 + 560);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 152);
      if (v15)
      {
        std::string v16 = *(BambiCall **)(v13 + 144);
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v17 = std::__shared_weak_count::lock(v15);
        if (!v17) {
          std::string v16 = 0;
        }
        std::__shared_weak_count::__release_weak(v15);
        if (!v14) {
          goto LABEL_24;
        }
      }
      else
      {
        std::string v16 = 0;
        uint64_t v17 = 0;
        if (!v14) {
          goto LABEL_24;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_24:
      if (v16) {
        BambiCall::sendHoldResumeIndication(v16, (*((_DWORD *)v16 + 112) & 0xFFFFFFFE) == 2);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
LABEL_28:
      ++v9;
    }
    uint64_t v6 = v18;
    uint64_t v21 = v5;
    uint64_t v22 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = &unk_1F20B3708;
    if (byte_1EBBDB3B8[23] < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)byte_1EBBDB3B8, *(std::string::size_type *)&byte_1EBBDB3B8[8]);
    }
    else {
      std::string v20 = *(std::string *)byte_1EBBDB3B8;
    }
    (*(void (**)(IMSCallManager *, uint64_t *, uint64_t, void **))(*(void *)this + 208))(this, &v21, 1, &v19);
    uint64_t v19 = &unk_1F20B3708;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52A8238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleSessionActivatedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
}

void IMSCallManager::handleSessionActivationAcceptedEvent(BambiConferenceCall **this, BambiCallEvent *a2)
{
  char v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = (BambiConferenceCall *)*((void *)a2 + 2);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (!v5) {
      uint64_t v4 = 0;
    }
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  if (v4 == this[14])
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Conference call activation accepted", 35);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    BambiConferenceCall::conferenceCallActivated(this[14]);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C52A8438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleSessionActivationAcceptedEvent(BambiConferenceCall **this, BambiCallEvent *a2)
{
}

void IMSCallManager::handleSessionHoldFailedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"nothing to do for kIMSCallStatusHoldFailed", 42);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C52A8554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionResumeFailedEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"nothing to do for kIMSCallStatusResumeFailed", 44);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C52A8654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleSessionLocalHeldEvent(IMSCallManager *this, BambiCallEvent *a2)
{
  char v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v6 = std::__shared_weak_count::lock(v4);
    if (!v6) {
      uint64_t v5 = 0;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
  }
  if (v5 == *((void *)this + 14))
  {
    uint64_t v18 = v6;
    std::string::basic_string[abi:ne180100]<0>(v27, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Conference call deactivated", 27);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v9 = (uint64_t *)*((void *)this + 5);
    char v8 = (uint64_t *)*((void *)this + 6);
    while (v9 != v8)
    {
      uint64_t v10 = *v9;
      uint64_t v11 = *(void *)(*v9 + 552);
      char v12 = *(std::__shared_weak_count **)(*v9 + 560);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (!v11) {
        goto LABEL_28;
      }
      IMSCallInfo::uuid((IMSCallInfo *)v23, v10);
      (*(void (**)(IMSCallManager *, void *, __CFString *, void, BambiCallEvent *))(*(void *)this
                                                                                                 + 232))(this, v23, @"kCallStatusInactive", *(unsigned __int8 *)(v10 + 40), a2);
      v23[0] = &unk_1F20B3708;
      if (v24 < 0) {
        operator delete((void *)v23[1]);
      }
      uint64_t v13 = *(void *)(v10 + 552);
      uint64_t v14 = *(std::__shared_weak_count **)(v10 + 560);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 152);
      if (v15)
      {
        std::string v16 = *(BambiCall **)(v13 + 144);
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v17 = std::__shared_weak_count::lock(v15);
        if (!v17) {
          std::string v16 = 0;
        }
        std::__shared_weak_count::__release_weak(v15);
        if (!v14) {
          goto LABEL_24;
        }
      }
      else
      {
        std::string v16 = 0;
        uint64_t v17 = 0;
        if (!v14) {
          goto LABEL_24;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_24:
      if (v16) {
        BambiCall::sendHoldResumeIndication(v16, (*((_DWORD *)v16 + 112) & 0xFFFFFFFE) == 2);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
LABEL_28:
      ++v9;
    }
    char v6 = v18;
    uint64_t v21 = v5;
    uint64_t v22 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = &unk_1F20B3708;
    if (byte_1EBBDB3B8[23] < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)byte_1EBBDB3B8, *(std::string::size_type *)&byte_1EBBDB3B8[8]);
    }
    else {
      std::string v20 = *(std::string *)byte_1EBBDB3B8;
    }
    (*(void (**)(IMSCallManager *, uint64_t *, void, void **))(*(void *)this + 208))(this, &v21, 0, &v19);
    uint64_t v19 = &unk_1F20B3708;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52A89F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleSessionLocalHeldEvent(IMSCallManager *this, BambiCallEvent *a2)
{
}

uint64_t IMSCallManager::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 104);
  return v2();
}

uint64_t non-virtual thunk to'IMSCallManager::handleForceLTEFallbackEvent(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(IMSClientManager::delegateForStack(a2) + 16) + 104);
  return v2();
}

void IMSCallManager::handleConferenceEvent(IMSCallManager *this, BambiCallConferenceEvent *a2)
{
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  char v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (!v4)
  {
    char v6 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = *((void *)a2 + 2);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v6 = std::__shared_weak_count::lock(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v6)
  {
LABEL_11:
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if (v5)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 368);
    if (v7)
    {
      char v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 360);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (v9)
        {
          uint64_t v10 = *(std::__shared_weak_count **)(v5 + 368);
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              uint64_t v12 = *(void *)(v5 + 360);
LABEL_96:
              uint64_t v42 = v6;
              if (*(char *)(v12 + 4183) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
                if (SHIBYTE(v54) < 0) {
                  operator delete((void *)v53);
                }
              }
              else
              {
                uint64_t v38 = v12 + 4160;
                *(_OWORD *)std::string __p = *(_OWORD *)v38;
                *(void *)&__p[16] = *(void *)(v38 + 16);
              }
              long long v53 = *(_OWORD *)__p;
              uint64_t v54 = *(void *)&__p[16];
              __p[23] = 0;
              __p[0] = 0;
              if (v11) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              }
              int v14 = 1;
              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t v12 = 0;
          goto LABEL_96;
        }
      }
    }
  }
LABEL_12:
  uint64_t v42 = v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "call");
  std::string::basic_string[abi:ne180100]<0>(&v52, "");
  uint64_t v13 = ims::error((uint64_t)__p, (uint64_t)&v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Invalid sip stack for conference event", 38);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v14 = 0;
LABEL_17:
  if (v5 == *((void *)this + 14))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    uint64_t v15 = ims::debug((uint64_t)__p, (uint64_t)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Conference event: ", 18);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    switch(*((_DWORD *)a2 + 16))
    {
      case 1:
        if (v14)
        {
          uint64_t v16 = IMSClientManager::delegateForStack((void **)&v53);
          (*(void (**)(void))(*(void *)(v16 + 16) + 32))();
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "call");
        std::string::basic_string[abi:ne180100]<0>(&v52, "");
        uint64_t v17 = ims::debug((uint64_t)__p, (uint64_t)&v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Clear active call before conference", 35);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (*((char *)this + 167) < 0)
        {
          **((unsigned char **)this + 18) = 0;
          *((void *)this + 19) = 0;
        }
        else
        {
          *((unsigned char *)this + 144) = 0;
          *((unsigned char *)this + 167) = 0;
        }
        goto LABEL_18;
      case 2:
        if (v14)
        {
          uint64_t v18 = IMSClientManager::delegateForStack((void **)&v53);
          (*(void (**)(void))(*(void *)(v18 + 16) + 40))();
        }
        uint64_t v19 = (uint64_t *)*((void *)this + 5);
        std::string v20 = (uint64_t *)*((void *)this + 6);
        if (v19 == v20) {
          goto LABEL_18;
        }
        break;
      case 3:
        uint64_t v33 = *(std::__shared_weak_count **)(v5 + 368);
        if (v33)
        {
          char v34 = std::__shared_weak_count::lock(v33);
          if (v34) {
            uint64_t v35 = *(void *)(v5 + 360);
          }
          else {
            uint64_t v35 = 0;
          }
        }
        else
        {
          uint64_t v35 = 0;
          char v34 = 0;
        }
        if (*(char *)(v35 + 4183) < 0) {
          goto LABEL_110;
        }
        uint64_t v39 = v35 + 4160;
        *(_OWORD *)std::string __p = *(_OWORD *)v39;
        *(void *)&__p[16] = *(void *)(v39 + 16);
        goto LABEL_111;
      case 4:
        char v36 = *(std::__shared_weak_count **)(v5 + 368);
        if (v36)
        {
          char v34 = std::__shared_weak_count::lock(v36);
          if (v34) {
            uint64_t v35 = *(void *)(v5 + 360);
          }
          else {
            uint64_t v35 = 0;
          }
        }
        else
        {
          uint64_t v35 = 0;
          char v34 = 0;
        }
        if (*(char *)(v35 + 4183) < 0)
        {
LABEL_110:
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v35 + 4160), *(void *)(v35 + 4168));
        }
        else
        {
          uint64_t v40 = v35 + 4160;
          *(_OWORD *)std::string __p = *(_OWORD *)v40;
          *(void *)&__p[16] = *(void *)(v40 + 16);
        }
LABEL_111:
        uint64_t v41 = IMSClientManager::delegateForStack((void **)__p);
        (*(void (**)(void))(*(void *)(v41 + 16) + 48))();
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        goto LABEL_18;
      case 5:
        uint64_t v37 = IMSClientManager::delegateForStack((void **)&v53);
        (*(void (**)(void))(*(void *)(v37 + 16) + 24))();
        goto LABEL_18;
      default:
        goto LABEL_18;
    }
    do
    {
      uint64_t v21 = *v19;
      memset(&v52, 0, sizeof(v52));
      IMSCallInfo::uuid((IMSCallInfo *)__p, v21);
      if ((__p[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        *(void *)std::string __p = &unk_1F20B3708;
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
      }
      else
      {
        std::string v52 = *(std::string *)&__p[8];
      }
      uint64_t v22 = *(void *)(v21 + 552);
      int v23 = *(std::__shared_weak_count **)(v21 + 560);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22)
      {
        uint64_t v24 = *(void *)(v21 + 552);
        int v25 = *(std::__shared_weak_count **)(v21 + 560);
        if (v25)
        {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v26 = *(_DWORD *)(v24 + 240) == 6;
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          if (!v23) {
            goto LABEL_49;
          }
LABEL_48:
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          goto LABEL_49;
        }
        BOOL v26 = *(_DWORD *)(v24 + 240) == 6;
        if (v23) {
          goto LABEL_48;
        }
      }
      else
      {
        BOOL v26 = 0;
        if (v23) {
          goto LABEL_48;
        }
      }
LABEL_49:
      if (v26)
      {
        std::string::basic_string[abi:ne180100]<0>(v49, "call");
        std::string::basic_string[abi:ne180100]<0>(v47, "");
        uint64_t v27 = ims::debug((uint64_t)v49, (uint64_t)v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Sending active notification for ", 32);
        *(unsigned char *)(v27 + 17) = 0;
        IMSCallInfo::uuid((IMSCallInfo *)__p, v21);
        (*(void (**)(unsigned char *, uint64_t))(*(void *)__p + 16))(__p, v27);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        *(void *)std::string __p = &unk_1F20B3708;
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        IMSCallInfo::uuid((IMSCallInfo *)v45, v21);
        (*(void (**)(IMSCallManager *, void *, __CFString *, void, BambiCallConferenceEvent *))(*(void *)this + 232))(this, v45, @"kCallStatusActive", *(unsigned __int8 *)(v21 + 40), a2);
        v45[0] = &unk_1F20B3708;
        if (v46 < 0) {
          operator delete((void *)v45[1]);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v49, "call");
        std::string::basic_string[abi:ne180100]<0>(v47, "");
        uint64_t v28 = ims::debug((uint64_t)v49, (uint64_t)v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Sending inactive notification for ", 34);
        *(unsigned char *)(v28 + 17) = 0;
        IMSCallInfo::uuid((IMSCallInfo *)__p, v21);
        (*(void (**)(unsigned char *, uint64_t))(*(void *)__p + 16))(__p, v28);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v28 + 17) = 0;
        *(void *)std::string __p = &unk_1F20B3708;
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        IMSCallInfo::uuid((IMSCallInfo *)v43, v21);
        (*(void (**)(IMSCallManager *, void *, __CFString *, void, BambiCallConferenceEvent *))(*(void *)this + 232))(this, v43, @"kCallStatusInactive", *(unsigned __int8 *)(v21 + 40), a2);
        v43[0] = &unk_1F20B3708;
        if (v44 < 0) {
          operator delete((void *)v43[1]);
        }
        *(unsigned char *)(v21 + 570) = 0;
      }
      uint64_t v30 = *(BambiCall **)(v21 + 128);
      uint64_t v29 = *(std::__shared_weak_count **)(v21 + 136);
      if (v29)
      {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        if (v30)
        {
          uint64_t v30 = *(BambiCall **)(v21 + 128);
          char v31 = *(std::__shared_weak_count **)(v21 + 136);
          if (!v31) {
            goto LABEL_75;
          }
          char v32 = 0;
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_76;
        }
      }
      else if (v30)
      {
        char v31 = 0;
LABEL_75:
        char v32 = 1;
LABEL_76:
        BambiCall::sendHoldResumeIndication(v30, (*((_DWORD *)v30 + 112) & 0xFFFFFFFE) == 2);
        if ((v32 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      ++v19;
    }
    while (v19 != v20);
  }
LABEL_18:
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
}

void sub_1C52A9588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,void *a40,int a41,__int16 a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSCallManager::handleConferenceEvent(IMSCallManager *this, BambiCallConferenceEvent *a2)
{
}

void IMSCallManager::sendCallStatusChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = &unk_1F20B3708;
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(a1, &v7, a3, 255, a4);
  uint64_t v7 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C52A9888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::sendCallStatusChangedNotification(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  memset(&v94, 0, sizeof(v94));
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::size_type v7 = *(void *)(a2 + 16);
    if (v7)
    {
      long long v90 = &unk_1F20B3708;
      char v6 = (std::string *)(a2 + 8);
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), v7);
      goto LABEL_6;
    }
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(&v93, "call");
    std::string::basic_string[abi:ne180100]<0>(&v92, "");
    uint64_t v16 = ims::warn((uint64_t)&v93, (uint64_t)&v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"UUID for call is empty - treating as LEGACY request", 51);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a2 + 31)) {
    goto LABEL_17;
  }
  long long v90 = &unk_1F20B3708;
  char v6 = (std::string *)(a2 + 8);
  std::string __p = *(std::string *)(a2 + 8);
LABEL_6:
  uint64_t v8 = IMSCallManager::callInfoForUuid(a1, (uint64_t)&v90);
  uint64_t v9 = v8;
  long long v90 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
    {
LABEL_8:
      long long v88 = 0;
      long long v89 = 0;
      IMSCallInfo::stack((IMSCallInfo *)v9, &v88);
      if (!v88)
      {
        std::string::basic_string[abi:ne180100]<0>(&v93, "call");
        std::string::basic_string[abi:ne180100]<0>(&v92, "");
        uint64_t v18 = ims::warn((uint64_t)&v93, (uint64_t)&v92);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to resolve sip stack for callid: ", 40);
        *(unsigned char *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
LABEL_150:
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
        goto LABEL_156;
      }
      uint64_t v10 = (ImsPrefs *)SipStack::prefs(v88);
      ConvertSessionProgressToRingingKey = (void **)ImsPrefs::getConvertSessionProgressToRingingKey(v10);
      if (ImsPrefs::BOOLValue(v10, ConvertSessionProgressToRingingKey)
        && CFEqual(a3, @"kCallStatusInProgress")
        && !*(unsigned char *)(v9 + 569))
      {
        a3 = @"kCallStatusRinging";
      }
      uint64_t v13 = *(void *)(v9 + 128);
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 136);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (!v13) {
          goto LABEL_30;
        }
        uint64_t v13 = *(void *)(v9 + 128);
        int v14 = *(std::__shared_weak_count **)(v9 + 136);
        if (v14)
        {
          char v15 = 0;
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_28;
        }
      }
      else
      {
        if (!v13) {
          goto LABEL_30;
        }
        int v14 = 0;
      }
      char v15 = 1;
LABEL_28:
      std::string::operator=(&v94, (const std::string *)(v13 + 472));
      if ((v15 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
LABEL_30:
      memset(&v93, 0, sizeof(v93));
      if (*(char *)(a2 + 31) < 0) {
        std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
      }
      else {
        std::string v93 = *v6;
      }
      memset(&v92, 0, sizeof(v92));
      if (*((char *)v88 + 4183) < 0)
      {
        std::string::__init_copy_ctor_external(&v92, *((const std::string::value_type **)v88 + 520), *((void *)v88 + 521));
      }
      else
      {
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *((_OWORD *)v88 + 260);
        v92.__r_.__value_.__r.__words[2] = *((void *)v88 + 522);
      }
      memset(&__s1, 0, sizeof(__s1));
      ims::CFString::asString(a3, (const void *)0x8000100, &__s1);
      std::string::basic_string[abi:ne180100]<0>(&v86, "call");
      std::string::basic_string[abi:ne180100]<0>(&v85, "");
      uint64_t v19 = ims::debug((uint64_t)&v86, (uint64_t)&v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Delegating ", 11);
      *(unsigned char *)(v19 + 17) = 0;
      LoggableString::LoggableString(&v84, &__s1);
      (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" notification for ", 18);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v19);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      ims::CFString::asString(@"kCallStatusTrying", (const void *)0x8000100, &v86);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v21 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      int v22 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v21 = v86.__r_.__value_.__l.__size_;
      }
      if (size != v21)
      {
        BOOL v32 = 0;
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_83;
        }
        goto LABEL_61;
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v23 = &v86;
      }
      else {
        int v23 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v32 = memcmp(__s1.__r_.__value_.__l.__data_, v23, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          BOOL v32 = 1;
          if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_83:
            if (v32) {
              goto LABEL_84;
            }
            goto LABEL_62;
          }
LABEL_61:
          operator delete(v86.__r_.__value_.__l.__data_);
          if (v32)
          {
LABEL_84:
            long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                  + 48);
            goto LABEL_147;
          }
LABEL_62:
          ims::CFString::asString(@"kCallStatusActive", (const void *)0x8000100, &v86);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v33 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v33 = __s1.__r_.__value_.__l.__size_;
          }
          std::string::size_type v34 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          int v35 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v34 = v86.__r_.__value_.__l.__size_;
          }
          if (v33 == v34)
          {
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v36 = &v86;
            }
            else {
              char v36 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              BOOL v44 = memcmp(__s1.__r_.__value_.__l.__data_, v36, __s1.__r_.__value_.__l.__size_) == 0;
            }
            else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
            {
              uint64_t v37 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
              p_s1 = &__s1;
              do
              {
                int v40 = p_s1->__r_.__value_.__s.__data_[0];
                p_s1 = (std::string *)((char *)p_s1 + 1);
                int v39 = v40;
                int v42 = v36->__r_.__value_.__s.__data_[0];
                char v36 = (std::string *)((char *)v36 + 1);
                int v41 = v42;
                BOOL v30 = v37-- != 0;
                char v43 = v30;
                BOOL v44 = v39 == v41;
              }
              while (v39 == v41 && (v43 & 1) != 0);
            }
            else
            {
              BOOL v44 = 1;
            }
          }
          else
          {
            BOOL v44 = 0;
          }
          if (v35 < 0)
          {
            operator delete(v86.__r_.__value_.__l.__data_);
            if (v44) {
              goto LABEL_91;
            }
          }
          else if (v44)
          {
LABEL_91:
            long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                  + 32);
            goto LABEL_147;
          }
          ims::CFString::asString(@"kCallStatusInactive", (const void *)0x8000100, &v86);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v46 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v46 = __s1.__r_.__value_.__l.__size_;
          }
          std::string::size_type v47 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          int v48 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v47 = v86.__r_.__value_.__l.__size_;
          }
          if (v46 == v47)
          {
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v49 = &v86;
            }
            else {
              uint64_t v49 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              BOOL v57 = memcmp(__s1.__r_.__value_.__l.__data_, v49, __s1.__r_.__value_.__l.__size_) == 0;
            }
            else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
            {
              uint64_t v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
              uint64_t v51 = &__s1;
              do
              {
                int v53 = v51->__r_.__value_.__s.__data_[0];
                uint64_t v51 = (std::string *)((char *)v51 + 1);
                int v52 = v53;
                int v55 = v49->__r_.__value_.__s.__data_[0];
                uint64_t v49 = (std::string *)((char *)v49 + 1);
                int v54 = v55;
                BOOL v30 = v50-- != 0;
                char v56 = v30;
                BOOL v57 = v52 == v54;
              }
              while (v52 == v54 && (v56 & 1) != 0);
            }
            else
            {
              BOOL v57 = 1;
            }
          }
          else
          {
            BOOL v57 = 0;
          }
          if (v48 < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          if (v57)
          {
            long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                  + 40);
          }
          else
          {
            ims::CFString::asString(@"kCallStatusRinging", (const void *)0x8000100, &v86);
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = __s1.__r_.__value_.__l.__size_;
            }
            std::string::size_type v59 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            int v60 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v59 = v86.__r_.__value_.__l.__size_;
            }
            if (v58 == v59)
            {
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v61 = &v86;
              }
              else {
                long long v61 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                BOOL v69 = memcmp(__s1.__r_.__value_.__l.__data_, v61, __s1.__r_.__value_.__l.__size_) == 0;
              }
              else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
              {
                uint64_t v62 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
                uint64_t v63 = &__s1;
                do
                {
                  int v65 = v63->__r_.__value_.__s.__data_[0];
                  uint64_t v63 = (std::string *)((char *)v63 + 1);
                  int v64 = v65;
                  int v67 = v61->__r_.__value_.__s.__data_[0];
                  long long v61 = (std::string *)((char *)v61 + 1);
                  int v66 = v67;
                  BOOL v30 = v62-- != 0;
                  char v68 = v30;
                  BOOL v69 = v64 == v66;
                }
                while (v64 == v66 && (v68 & 1) != 0);
              }
              else
              {
                BOOL v69 = 1;
              }
            }
            else
            {
              BOOL v69 = 0;
            }
            if (v60 < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            if (v69)
            {
              long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                    + 56);
            }
            else
            {
              ims::CFString::asString(@"kCallStatusJoined", (const void *)0x8000100, &v86);
              BOOL v70 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              if (v70)
              {
                long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                      + 64);
              }
              else
              {
                ims::CFString::asString(@"kCallStatusDialing", (const void *)0x8000100, &v86);
                if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86))
                {
                  BOOL v71 = 1;
                }
                else
                {
                  ims::CFString::asString(@"kCallStatusPulling", (const void *)0x8000100, &v85);
                  BOOL v71 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v85);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v85.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                if (v71)
                {
                  uint64_t v72 = IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_);
                  (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v72 + 80))(v72, &v93, &v94);
LABEL_148:
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__s1.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_150;
                }
                ims::CFString::asString(@"kCallStatusInProgress", (const void *)0x8000100, &v86);
                BOOL v73 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                if (v73)
                {
                  long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                        + 72);
                }
                else
                {
                  ims::CFString::asString(@"kCallStatusAcknowledged", (const void *)0x8000100, &v86);
                  BOOL v74 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v86.__r_.__value_.__l.__data_);
                  }
                  if (v74)
                  {
                    long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                          + 144);
                  }
                  else
                  {
                    ims::CFString::asString(@"kCallStatusHoldFailed", (const void *)0x8000100, &v86);
                    BOOL v75 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v86.__r_.__value_.__l.__data_);
                    }
                    if (v75)
                    {
                      long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                            + 104);
                    }
                    else
                    {
                      ims::CFString::asString(@"kCallStatusResumeFailed", (const void *)0x8000100, &v86);
                      BOOL v76 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v86.__r_.__value_.__l.__data_);
                      }
                      if (v76)
                      {
                        long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                              + 112);
                      }
                      else
                      {
                        ims::CFString::asString(@"kCallStatusPlayLRBT", (const void *)0x8000100, &v86);
                        BOOL v77 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v86.__r_.__value_.__l.__data_);
                        }
                        if (v77) {
                          goto LABEL_189;
                        }
                        ims::CFString::asString(@"kCallStatusStopLRBT", (const void *)0x8000100, &v86);
                        BOOL v78 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v86.__r_.__value_.__l.__data_);
                        }
                        if (v78)
                        {
LABEL_189:
                          long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                                + 96);
                        }
                        else
                        {
                          ims::CFString::asString(@"kCallStatusMediaActive", (const void *)0x8000100, &v86);
                          BOOL v79 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v86.__r_.__value_.__l.__data_);
                          }
                          if (v79) {
                            goto LABEL_196;
                          }
                          ims::CFString::asString(@"kCallStatusMediaInactive", (const void *)0x8000100, &v86);
                          BOOL v80 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v86.__r_.__value_.__l.__data_);
                          }
                          if (v80)
                          {
LABEL_196:
                            long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                                  + 88);
                          }
                          else
                          {
                            ims::CFString::asString(@"kCallStatusMediaInitialized", (const void *)0x8000100, &v86);
                            BOOL v81 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v86.__r_.__value_.__l.__data_);
                            }
                            if (v81)
                            {
                              long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                                    + 152);
                            }
                            else
                            {
                              ims::CFString::asString(@"kIMSCallStatusTextMediaDetected", (const void *)0x8000100, &v86);
                              BOOL v82 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v86.__r_.__value_.__l.__data_);
                              }
                              if (v82)
                              {
                                long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                                      + 120);
                              }
                              else
                              {
                                ims::CFString::asString(@"kIMSCallStatusTextMediaDeactivated", (const void *)0x8000100, &v86);
                                BOOL v83 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, (unsigned __int8 *)&v86);
                                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v86.__r_.__value_.__l.__data_);
                                }
                                if (!v83) {
                                  goto LABEL_148;
                                }
                                long long v45 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack((void **)&v92.__r_.__value_.__l.__data_)
                                                      + 128);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_147:
          (*v45)();
          goto LABEL_148;
        }
        uint64_t v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        int v25 = &__s1;
        do
        {
          int v27 = v25->__r_.__value_.__s.__data_[0];
          int v25 = (std::string *)((char *)v25 + 1);
          int v26 = v27;
          int v29 = v23->__r_.__value_.__s.__data_[0];
          int v23 = (std::string *)((char *)v23 + 1);
          int v28 = v29;
          BOOL v30 = v24-- != 0;
          char v31 = v30;
          BOOL v32 = v26 == v28;
        }
        while (v26 == v28 && (v31 & 1) != 0);
      }
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_61;
    }
  }
  else if (v8)
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "call");
  std::string::basic_string[abi:ne180100]<0>(&v92, "");
  uint64_t v17 = ims::warn((uint64_t)&v93, (uint64_t)&v92);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Unable to find call information for UUID ", 41);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v17);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
LABEL_20:
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
LABEL_156:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
}

void sub_1C52AA914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (*(char *)(v47 - 65) < 0) {
    operator delete(*(void **)(v47 - 88));
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::failPendingCalls(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = (IMSCallInfo **)a1[5];
  char v3 = (IMSCallInfo **)a1[6];
  if (v2 == v3) {
    return;
  }
  char v6 = 0;
  std::string::size_type v7 = 0;
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = *v2;
    if (!*v2 || *((_DWORD *)v9 + 144) != 1) {
      goto LABEL_56;
    }
    IMSCallInfo::stack(*v2, &v34);
    if (*(char *)(v34 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v34 + 4160), *(void *)(v34 + 4168));
    }
    else {
      std::string v36 = *(std::string *)(v34 + 4160);
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = a2[23];
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    if (size == v11)
    {
      if (v12 >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v36.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        int v23 = (void *)v36.__r_.__value_.__r.__words[0];
        BOOL v22 = memcmp(v36.__r_.__value_.__l.__data_, v13, v36.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((unsigned char *)&v36.__r_.__value_.__s + 23))
        {
          BOOL v22 = 1;
          goto LABEL_32;
        }
        uint64_t v14 = HIBYTE(v36.__r_.__value_.__r.__words[2]) - 1;
        char v15 = &v36;
        do
        {
          int v17 = v15->__r_.__value_.__s.__data_[0];
          char v15 = (std::string *)((char *)v15 + 1);
          int v16 = v17;
          int v19 = *v13++;
          int v18 = v19;
          BOOL v21 = v14-- != 0;
          BOOL v22 = v16 == v18;
        }
        while (v16 == v18 && v21);
        if ((*((unsigned char *)&v36.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_32;
        }
LABEL_28:
        int v23 = (void *)v36.__r_.__value_.__r.__words[0];
      }
      operator delete(v23);
      goto LABEL_32;
    }
    BOOL v22 = 0;
    if ((*((unsigned char *)&v36.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_32:
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v22)
    {
      IMSCallInfo::uuid((IMSCallInfo *)v32, (uint64_t)v9);
      ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &v36);
      IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)v32, (void **)a2, &v36, 1);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      v32[0] = &unk_1F20B3708;
      if (v33 < 0) {
        operator delete((void *)v32[1]);
      }
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v24 = v7 - v6;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v6) >> 2 > v25) {
          unint64_t v25 = (uint64_t)(v8 - (void)v6) >> 2;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        int v28 = (IMSCallInfo **)(v26 + 8 * v24);
        *int v28 = v9;
        int v29 = v28 + 1;
        while (v7 != v6)
        {
          BOOL v30 = *--v7;
          *--int v28 = v30;
        }
        unint64_t v8 = v26 + 8 * v27;
        if (v6) {
          operator delete(v6);
        }
        char v6 = v28;
        std::string::size_type v7 = v29;
      }
      else
      {
        *v7++ = v9;
      }
    }
LABEL_56:
    ++v2;
  }
  while (v2 != v3);
  if (v6 != v7)
  {
    char v31 = v6;
    do
      (*(void (**)(void *, void))(*a1 + 240))(a1, *v31++);
    while (v31 != v7);
  }
  if (v6) {
    operator delete(v6);
  }
}

void sub_1C52AAD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::continuePendingCalls(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(IMSCallInfo ***)(a1 + 40);
  char v3 = *(IMSCallInfo ***)(a1 + 48);
  if (v2 != v3)
  {
    while (1)
    {
      char v6 = *v2;
      if (*v2)
      {
        if (*((_DWORD *)v6 + 144) == 1) {
          break;
        }
      }
LABEL_45:
      if (++v2 == v3) {
        return;
      }
    }
    IMSCallInfo::stack(*v2, &v28);
    if (*((char *)v28 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)v28 + 520), *((void *)v28 + 521));
    }
    else {
      std::string v24 = *(std::string *)((char *)v28 + 4160);
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = a2[23];
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)a2 + 1);
    }
    if (size == v8)
    {
      if (v9 >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string v20 = (void *)v24.__r_.__value_.__r.__words[0];
        BOOL v19 = memcmp(v24.__r_.__value_.__l.__data_, v10, v24.__r_.__value_.__l.__size_) == 0;
        goto LABEL_29;
      }
      if (!*((unsigned char *)&v24.__r_.__value_.__s + 23))
      {
        BOOL v19 = 1;
        goto LABEL_31;
      }
      uint64_t v11 = HIBYTE(v24.__r_.__value_.__r.__words[2]) - 1;
      int v12 = &v24;
      do
      {
        int v14 = v12->__r_.__value_.__s.__data_[0];
        int v12 = (std::string *)((char *)v12 + 1);
        int v13 = v14;
        int v16 = *v10++;
        int v15 = v16;
        BOOL v18 = v11-- != 0;
        BOOL v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
      if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      BOOL v19 = 0;
      if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_31:
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v19 && (IMSCallInfo::startCall(v6) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v28, "call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v21 = ims::error((uint64_t)&v28, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Unable to start pending call ", 29);
          *(unsigned char *)(v21 + 17) = 0;
          IMSCallInfo::uuid((IMSCallInfo *)&v24, (uint64_t)v6);
          (*(void (**)(std::string *, uint64_t))(v24.__r_.__value_.__r.__words[0] + 16))(&v24, v21);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
          if (v25 < 0) {
            operator delete((void *)v24.__r_.__value_.__l.__size_);
          }
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          if (v30 < 0) {
            operator delete(v28);
          }
          IMSCallInfo::uuid((IMSCallInfo *)v22, (uint64_t)v6);
          ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &v24);
          IMSCallManager::sendCallDisconnectionNotification(a1, (uint64_t)v22, (void **)a2, &v24, 1);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          v22[0] = &unk_1F20B3708;
          if (v23 < 0) {
            operator delete((void *)v22[1]);
          }
        }
        goto LABEL_45;
      }
    }
    std::string v20 = (void *)v24.__r_.__value_.__r.__words[0];
LABEL_29:
    operator delete(v20);
    goto LABEL_31;
  }
}

void sub_1C52AB134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceEstablished(void *a1, unsigned int a2, int a3, void *a4)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v24, (uint64_t)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  int v9 = *(void **)(v8 + 8);
  if (a4[1] != *a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Handling QoS notification for ", 30);
    *(unsigned char *)(v8 + 17) = 0;
    if (a3) {
      uint64_t v10 = "local";
    }
    else {
      uint64_t v10 = "remote";
    }
    if (a3) {
      uint64_t v11 = 5;
    }
    else {
      uint64_t v11 = 6;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v10, v11);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" ports: ", 8);
    *(unsigned char *)(v8 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    ims::join<std::__wrap_iter<unsigned short const*>>();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Handling QoS notification without any ports", 43);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  int v12 = (uint64_t *)a1[5];
  int v13 = (uint64_t *)a1[6];
  while (v12 != v13)
  {
    uint64_t v14 = *v12;
    uint64_t v15 = *(void *)(*v12 + 128);
    int v16 = *(std::__shared_weak_count **)(*v12 + 136);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15)
    {
      uint64_t v17 = *(void *)(v14 + 128);
      BOOL v18 = *(std::__shared_weak_count **)(v14 + 136);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v19 = BambiCall::setQualityOfServiceEstablished(v17, a2, a3, a4);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (!v16) {
        goto LABEL_23;
      }
    }
    else
    {
      char v19 = 0;
      if (!v16) {
        goto LABEL_23;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_23:
    if (v19) {
      return;
    }
    ++v12;
  }
  uint64_t v20 = a1[14];
  if (!v20 || (BambiCall::setQualityOfServiceEstablished(v20, a2, a3, a4) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v21 = ims::debug((uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"handleQualityOfServiceEstablished: no call found ", 49);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_1C52AB550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceEstablished(void *a1, int **a2)
{
  std::string __p = 0;
  char v4 = 0;
  uint64_t v5 = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned short>>>((uint64_t)&v6, *a2, a2[1], (uint64_t)&__p);
  IMSCallManager::handleQualityOfServiceEstablished(a1, 0, 1, &__p);
  if (__p)
  {
    char v4 = __p;
    operator delete(__p);
  }
}

void sub_1C52AB644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleQualityOfServiceRevoked(IMSCallManager *this, unsigned int a2)
{
  char v4 = (uint64_t *)*((void *)this + 5);
  uint64_t v5 = (uint64_t *)*((void *)this + 6);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *(void *)(*v4 + 128);
    uint64_t v8 = *(std::__shared_weak_count **)(*v4 + 136);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      int v9 = *(BambiCall **)(v6 + 128);
      uint64_t v10 = *(std::__shared_weak_count **)(v6 + 136);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v11 = BambiCall::setQualityOfServiceRevoked(v9, a2);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (!v8) {
        goto LABEL_11;
      }
    }
    else
    {
      char v11 = 0;
      if (!v8) {
        goto LABEL_11;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_11:
    if (v11) {
      return;
    }
    ++v4;
  }
  int v12 = (BambiCall *)*((void *)this + 14);
  if (!v12 || (BambiCall::setQualityOfServiceRevoked(v12, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::debug((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"handleQualityOfServiceRevoked: no call found ", 45);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
}

void sub_1C52AB7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

IMSCallInfo *IMSCallManager::getDialingCall(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(IMSCallInfo ***)(a1 + 40);
  char v3 = *(IMSCallInfo ***)(a1 + 48);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v5 = *v2;
      if (!*v2) {
        goto LABEL_35;
      }
      IMSCallInfo::stack(*v2, &v19);
      if (!v19)
      {
        BOOL v6 = 0;
        goto LABEL_32;
      }
      IMSCallInfo::stack(v5, &v16);
      if (*(char *)(v16 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v16 + 4160), *(void *)(v16 + 4168));
      }
      else {
        std::string v18 = *(std::string *)(v16 + 4160);
      }
      char v7 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v18.__r_.__value_.__l.__size_;
      }
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (size != v9) {
        goto LABEL_23;
      }
      char v11 = v10 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((*((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x80) == 0) {
        break;
      }
      uint64_t v14 = (void *)v18.__r_.__value_.__r.__words[0];
      if (!memcmp(v18.__r_.__value_.__l.__data_, v11, v18.__r_.__value_.__l.__size_)) {
        goto LABEL_27;
      }
      BOOL v6 = 0;
LABEL_29:
      operator delete(v14);
LABEL_30:
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
LABEL_32:
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v6) {
        return v5;
      }
LABEL_35:
      if (++v2 == v3) {
        return 0;
      }
    }
    if (*((unsigned char *)&v18.__r_.__value_.__s + 23))
    {
      int v12 = &v18;
      uint64_t v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      while (v12->__r_.__value_.__s.__data_[0] == *v11)
      {
        int v12 = (std::string *)((char *)v12 + 1);
        ++v11;
        if (!--v13) {
          goto LABEL_27;
        }
      }
LABEL_23:
      BOOL v6 = 0;
      if ((*((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
LABEL_27:
      BOOL v6 = (*((_DWORD *)v5 + 144) - 1) < 2;
      if ((v7 & 0x80) == 0) {
        goto LABEL_30;
      }
    }
    uint64_t v14 = (void *)v18.__r_.__value_.__r.__words[0];
    goto LABEL_29;
  }
  return 0;
}

void sub_1C52AB9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleUacBarringResponse(void *a1, unsigned __int8 *a2, int a3)
{
  v52[0] = a3;
  std::string::basic_string[abi:ne180100]<0>(&v45, "call");
  std::string::basic_string[abi:ne180100]<0>(&v49, "");
  uint64_t v5 = ims::debug((uint64_t)&v45, (uint64_t)&v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Received UAC barring response ", 30);
  *(unsigned char *)(v5 + 17) = 0;
  ims::toString<UacAccessResponse>(v52, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" for ", 5);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(v49);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  BOOL v6 = (IMSCallInfo **)a1[5];
  char v7 = (IMSCallInfo **)a1[6];
  if (v6 != v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      char v11 = *v6;
      if (*v6)
      {
        if (*((_DWORD *)v11 + 144) == 1) {
          break;
        }
      }
LABEL_101:
      if (++v6 == v7)
      {
        if (v8 != v9)
        {
          int v40 = v8;
          do
            (*(void (**)(void *, void))(*a1 + 240))(a1, *v40++);
          while (v40 != v9);
        }
        if (v8) {
          operator delete(v8);
        }
        return;
      }
    }
    IMSCallInfo::stack(*v6, &v49);
    if (v49[4183] < 0) {
      std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)v49 + 520), *((void *)v49 + 521));
    }
    else {
      std::string v45 = *(std::string *)(v49 + 4160);
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = a2[23];
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *((void *)a2 + 1);
    }
    if (size == v13)
    {
      if (v14 >= 0) {
        char v15 = a2;
      }
      else {
        char v15 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        char v25 = (void *)v45.__r_.__value_.__r.__words[0];
        BOOL v24 = memcmp(v45.__r_.__value_.__l.__data_, v15, v45.__r_.__value_.__l.__size_) == 0;
        goto LABEL_36;
      }
      if (!*((unsigned char *)&v45.__r_.__value_.__s + 23))
      {
        BOOL v24 = 1;
        goto LABEL_38;
      }
      uint64_t v16 = HIBYTE(v45.__r_.__value_.__r.__words[2]) - 1;
      char v17 = &v45;
      do
      {
        int v19 = v17->__r_.__value_.__s.__data_[0];
        char v17 = (std::string *)((char *)v17 + 1);
        int v18 = v19;
        int v21 = *v15++;
        int v20 = v21;
        BOOL v23 = v16-- != 0;
        BOOL v24 = v18 == v20;
      }
      while (v18 == v20 && v23);
      if ((*((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v24 = 0;
      if ((*((unsigned char *)&v45.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_38:
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (v24)
        {
          switch(v52[0])
          {
            case 0:
              std::string::basic_string[abi:ne180100]<0>(&v49, "call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v26 = ims::info((uint64_t)&v49, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Continuing call with uuid ", 26);
              *(unsigned char *)(v26 + 17) = 0;
              IMSCallInfo::uuid((IMSCallInfo *)&v45, (uint64_t)v11);
              (*(void (**)(std::string *, uint64_t))(v45.__r_.__value_.__r.__words[0] + 16))(&v45, v26);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v26 + 17) = 0;
              v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
              if (v46 < 0) {
                operator delete((void *)v45.__r_.__value_.__l.__size_);
              }
              if (v48 < 0) {
                operator delete(__p[0]);
              }
              if (v51 < 0) {
                operator delete(v49);
              }
              if (IMSCallInfo::continueCall(v11)) {
                goto LABEL_101;
              }
              if ((unint64_t)v9 < v10)
              {
LABEL_77:
                *v9++ = v11;
              }
              else
              {
                uint64_t v27 = v9 - v8;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
LABEL_108:
                }
                  std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v10 - (void)v8) >> 2 > v28) {
                  unint64_t v28 = (uint64_t)(v10 - (void)v8) >> 2;
                }
                if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v29 = v28;
                }
                if (v29) {
                  unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v29);
                }
                else {
                  uint64_t v30 = 0;
                }
                int v35 = (IMSCallInfo **)(v29 + 8 * v27);
                *int v35 = v11;
                std::string v36 = v35 + 1;
                while (v9 != v8)
                {
                  int v39 = *--v9;
                  *--int v35 = v39;
                }
LABEL_98:
                unint64_t v10 = v29 + 8 * v30;
                if (v8) {
                  operator delete(v8);
                }
                uint64_t v8 = v35;
                uint64_t v9 = v36;
              }
              break;
            case 1:
              IMSCallInfo::sendAccessBarringDisconnect(v11);
              goto LABEL_101;
            case 2:
              IMSCallInfo::uuid((IMSCallInfo *)v41, (uint64_t)v11);
              ims::CFString::asString(@"kCallDisconnectionReasonUnknownError", (const void *)0x8000100, &v45);
              IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)v41, (void **)a2, &v45, 0);
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v45.__r_.__value_.__l.__data_);
              }
              v41[0] = &unk_1F20B3708;
              if (v42 < 0) {
                operator delete((void *)v41[1]);
              }
              if ((unint64_t)v9 < v10) {
                goto LABEL_77;
              }
              uint64_t v31 = v9 - v8;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
                goto LABEL_108;
              }
              if ((uint64_t)(v10 - (void)v8) >> 2 > v32) {
                unint64_t v32 = (uint64_t)(v10 - (void)v8) >> 2;
              }
              if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v32;
              }
              if (v29) {
                unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v29);
              }
              else {
                uint64_t v30 = 0;
              }
              int v35 = (IMSCallInfo **)(v29 + 8 * v31);
              *int v35 = v11;
              std::string v36 = v35 + 1;
              while (v9 != v8)
              {
                uint64_t v37 = *--v9;
                *--int v35 = v37;
              }
              goto LABEL_98;
            case 5:
              IMSCallInfo::uuid((IMSCallInfo *)v43, (uint64_t)v11);
              ims::CFString::asString(@"kIMSCallDisconnectionReasonInvalidRat", (const void *)0x8000100, &v45);
              IMSCallManager::sendCallDisconnectionNotification((uint64_t)a1, (uint64_t)v43, (void **)a2, &v45, 0);
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v45.__r_.__value_.__l.__data_);
              }
              v43[0] = &unk_1F20B3708;
              if (v44 < 0) {
                operator delete((void *)v43[1]);
              }
              if ((unint64_t)v9 < v10) {
                goto LABEL_77;
              }
              uint64_t v33 = v9 - v8;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                goto LABEL_108;
              }
              if ((uint64_t)(v10 - (void)v8) >> 2 > v34) {
                unint64_t v34 = (uint64_t)(v10 - (void)v8) >> 2;
              }
              if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v34;
              }
              if (v29) {
                unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v29);
              }
              else {
                uint64_t v30 = 0;
              }
              int v35 = (IMSCallInfo **)(v29 + 8 * v33);
              *int v35 = v11;
              std::string v36 = v35 + 1;
              while (v9 != v8)
              {
                uint64_t v38 = *--v9;
                *--int v35 = v38;
              }
              goto LABEL_98;
            default:
              goto LABEL_101;
          }
        }
        goto LABEL_101;
      }
    }
    char v25 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_36:
    operator delete(v25);
    goto LABEL_38;
  }
}

void sub_1C52AC0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 97) < 0) {
    operator delete(*(void **)(v41 - 120));
  }
  if (v40) {
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSCallManager::handleMediaStackSwitchComplete(uint64_t a1, void **a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleMediaStackSwitchComplete for stack ", 41);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  LODWORD(v10[0]) = a3 != 1;
  uint64_t v6 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(void))(*(void *)(v6 + 16) + 72))();
}

void sub_1C52AC3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallManager::handleUpdatePendingCall(void *a1, unsigned __int8 *a2, int a3)
{
  if (a3) {
    IMSCallManager::failPendingCalls(a1, a2);
  }
  else {
    IMSCallManager::continuePendingCalls((uint64_t)a1, a2);
  }
}

void non-virtual thunk to'IMSCallManager::handleUpdatePendingCall(uint64_t a1, unsigned __int8 *a2, int a3)
{
  char v3 = (void *)(a1 - 8);
  if (a3) {
    IMSCallManager::failPendingCalls(v3, a2);
  }
  else {
    IMSCallManager::continuePendingCalls((uint64_t)v3, a2);
  }
}

void IMSCallManager::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 368);
    if (v5)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        if (*(void *)(v3 + 360))
        {
          uint64_t v9 = *a2;
          uint64_t v10 = *(void *)(a1 + 112);
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          if (v9 == v10)
          {
            uint64_t v11 = *a2;
            int v12 = *(std::__shared_weak_count **)(*a2 + 368);
            if (v12)
            {
              uint64_t v13 = std::__shared_weak_count::lock(v12);
              if (v13) {
                uint64_t v14 = *(void *)(v11 + 360);
              }
              else {
                uint64_t v14 = 0;
              }
            }
            else
            {
              uint64_t v14 = 0;
              uint64_t v13 = 0;
            }
            if (*(char *)(v14 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v14 + 4160), *(void *)(v14 + 4168));
            }
            else {
              std::string v18 = *(std::string *)(v14 + 4160);
            }
            char v15 = ImsUuid::ImsUuid(v16, (uint64_t)&ims::kEmptyString);
            IMSCallManager::sendInputFrequencyLevelUpdateNotification((uint64_t)v15, (void **)&v18.__r_.__value_.__l.__data_, (uint64_t)v16, a3);
            v16[0] = &unk_1F20B3708;
            if (v17 < 0) {
              operator delete((void *)v16[1]);
            }
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
        else
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
  }
}

void sub_1C52AC580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleInputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void IMSCallManager::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 368);
    if (v5)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        if (*(void *)(v3 + 360))
        {
          uint64_t v9 = *a2;
          uint64_t v10 = *(void *)(a1 + 112);
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          if (v9 == v10)
          {
            uint64_t v11 = *a2;
            int v12 = *(std::__shared_weak_count **)(*a2 + 368);
            if (v12)
            {
              uint64_t v13 = std::__shared_weak_count::lock(v12);
              if (v13) {
                uint64_t v14 = *(void *)(v11 + 360);
              }
              else {
                uint64_t v14 = 0;
              }
            }
            else
            {
              uint64_t v14 = 0;
              uint64_t v13 = 0;
            }
            if (*(char *)(v14 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v14 + 4160), *(void *)(v14 + 4168));
            }
            else {
              std::string v18 = *(std::string *)(v14 + 4160);
            }
            char v15 = ImsUuid::ImsUuid(v16, (uint64_t)&ims::kEmptyString);
            IMSCallManager::sendOutputFrequencyLevelUpdateNotification((uint64_t)v15, (void **)&v18.__r_.__value_.__l.__data_, (uint64_t)v16, a3);
            v16[0] = &unk_1F20B3708;
            if (v17 < 0) {
              operator delete((void *)v16[1]);
            }
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
        else
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
  }
}

void sub_1C52AC750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSCallManager::handleOutputFrequencyLevelEvent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void IMSCallManager::sendCallStatusToIRatManager(void *a1, uint64_t *a2, char a3)
{
  int v9 = 0;
  int v4 = 255;
  char v5 = a3;
  uint64_t v3 = *a2;
  BOOL v7 = *(_DWORD *)(*a2 + 452) > 2;
  BOOL v6 = (*(_DWORD *)(v3 + 448) & 0xFFFFFFFE) == 2;
  LOBYTE(v9) = a1[6] - a1[5] > 8uLL;
  char v8 = v9;
  IMSiRatClient::reportCallStatus((uint64_t *)(a1[3] + 344), &v4);
}

uint64_t IMSCallManager::conferenceCall@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  *a2 = *(void *)(this + 112);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void BambiEmergencyCallOptions::BambiEmergencyCallOptions(std::string *this, const BambiEmergencyCallOptions *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  this[3].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 72);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&this[3].__r_.__value_.__r.__words[1], (const BambiEmergencyCallOptions *)((char *)a2 + 80));
  SipStackConfig::SipStackConfig((SipStackConfig *)&this[73], (const BambiEmergencyCallOptions *)((char *)a2 + 1752));
  SipUri::SipUri((SipUri *)&this[177].__r_.__value_.__r.__words[2], (const BambiEmergencyCallOptions *)((char *)a2 + 4264));
  BOOL v7 = (std::string *)((char *)this + 4672);
  if (*((char *)a2 + 4695) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 584), *((void *)a2 + 585));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 292);
    this[195].__r_.__value_.__l.__size_ = *((void *)a2 + 586);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[195].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 4696);
}

void sub_1C52AC9F8(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v6);
  SipStackConfig::~SipStackConfig(v5);
  SipRegistrationConfig::~SipRegistrationConfig(v4);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void SipStackConfig::SipStackConfig(SipStackConfig *this, const SipStackConfig *a2)
{
  SipUserAgentConfig::SipUserAgentConfig(this, a2);
  SipTransportLayerConfig::SipTransportLayerConfig((std::string *)(v4 + 1400), (const SipStackConfig *)((char *)a2 + 1400));
  uint64_t v5 = *((void *)a2 + 253);
  *((_DWORD *)this + 508) = *((_DWORD *)a2 + 508);
  *((void *)this + 253) = v5;
  BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase((SipStackConfig *)((char *)this + 2040), (const SipStackConfig *)((char *)a2 + 2040));
  *((void *)this + 255) = &unk_1F20DBBE8;
  BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons((SipStackConfig *)((char *)this + 2208), (const SipStackConfig *)((char *)a2 + 2208));
  if (*((char *)a2 + 2423) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 100, *((const std::string::value_type **)a2 + 300), *((void *)a2 + 301));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 150);
    *((void *)this + 302) = *((void *)a2 + 302);
    *((_OWORD *)this + 150) = v6;
  }
  uint64_t v7 = *((void *)a2 + 303);
  *((unsigned char *)this + 2432) = *((unsigned char *)a2 + 2432);
  *((void *)this + 303) = v7;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 305, (uint64_t)a2 + 2440);
  uint64_t v8 = *((void *)a2 + 308);
  *((_WORD *)this + 1236) = *((_WORD *)a2 + 1236);
  *((void *)this + 308) = v8;
  *((_WORD *)this + 1240) = *((_WORD *)a2 + 1240);
  int v9 = (std::string *)((char *)this + 2488);
  if (*((char *)a2 + 2511) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 311), *((void *)a2 + 312));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 2488);
    *((void *)this + 313) = *((void *)a2 + 313);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C52ACBB0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6, *(void **)(v1 + 2448));
  if (*(char *)(v1 + 2423) < 0) {
    operator delete(*v5);
  }
  BambiCallIncomingTerminationReasons::~BambiCallIncomingTerminationReasons(v4);
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(v3);
  SipTransportLayerConfig::~SipTransportLayerConfig(v2);
  SipUserAgentConfig::~SipUserAgentConfig((SipUserAgentConfig *)v1);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::~BambiCallIncomingTerminationReasons(BambiCallIncomingTerminationReasons *this)
{
  *(void *)this = &unk_1F20DBC28;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20DBC28;
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
  JUMPOUT(0x1C878E320);
}

void SipUserAgentConfig::SipUserAgentConfig(SipUserAgentConfig *this, const SipUserAgentConfig *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 26) = *(_OWORD *)((char *)a2 + 26);
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  SipUri::SipUri((SipUserAgentConfig *)((char *)this + 48), (const SipUserAgentConfig *)((char *)a2 + 48));
  *((unsigned char *)this + 456) = *((unsigned char *)a2 + 456);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 464), *((const std::string::value_type **)a2 + 58), *((void *)a2 + 59));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 29);
    *((void *)this + 60) = *((void *)a2 + 60);
    *((_OWORD *)this + 29) = v6;
  }
  if (*((char *)a2 + 511) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 488), *((const std::string::value_type **)a2 + 61), *((void *)a2 + 62));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 488);
    *((void *)this + 63) = *((void *)a2 + 63);
    *(_OWORD *)((char *)this + 488) = v7;
  }
  *((void *)this + 64) = &unk_1F20CA1D0;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t *)this + 65, (uint64_t)a2 + 520);
  int v8 = *((_DWORD *)a2 + 136);
  *((unsigned char *)this + 548) = *((unsigned char *)a2 + 548);
  *((_DWORD *)this + 136) = v8;
  *((void *)this + 69) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 70, *((void ***)a2 + 70), (void **)a2 + 71);
  *((unsigned char *)this + 585) = 1;
  *((unsigned char *)this + 584) = *((unsigned char *)a2 + 584);
  long long v9 = *((_OWORD *)a2 + 37);
  long long v10 = *((_OWORD *)a2 + 38);
  *(_OWORD *)((char *)this + 620) = *(_OWORD *)((char *)a2 + 620);
  *((_OWORD *)this + 37) = v9;
  *((_OWORD *)this + 38) = v10;
  if (*((char *)a2 + 663) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 640), *((const std::string::value_type **)a2 + 80), *((void *)a2 + 81));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 40);
    *((void *)this + 82) = *((void *)a2 + 82);
    *((_OWORD *)this + 40) = v11;
  }
  int v12 = (std::string *)((char *)this + 664);
  if (*((char *)a2 + 687) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 83), *((void *)a2 + 84));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 664);
    *((void *)this + 85) = *((void *)a2 + 85);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *((_WORD *)this + 344) = *((_WORD *)a2 + 344);
  *((void *)this + 87) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 88, (uint64_t)a2 + 704);
  *((void *)this + 91) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 92, (uint64_t)a2 + 736);
  *((void *)this + 95) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 96, (uint64_t)a2 + 768);
  long long v14 = *(_OWORD *)((char *)a2 + 808);
  *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 792);
  *(_OWORD *)((char *)this + 808) = v14;
  *((void *)this + 103) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 104, (uint64_t)a2 + 832);
  *((void *)this + 107) = *((void *)a2 + 107);
  if (*((char *)a2 + 887) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 36, *((const std::string::value_type **)a2 + 108), *((void *)a2 + 109));
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 54);
    *((void *)this + 110) = *((void *)a2 + 110);
    *((_OWORD *)this + 54) = v15;
  }
  uint64_t v16 = (std::string *)((char *)this + 888);
  if (*((char *)a2 + 911) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 111), *((void *)a2 + 112));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 888);
    *((void *)this + 113) = *((void *)a2 + 113);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  uint64_t v18 = *((void *)a2 + 114);
  *((_WORD *)this + 460) = *((_WORD *)a2 + 460);
  *((void *)this + 114) = v18;
  if (*((char *)a2 + 951) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 928), *((const std::string::value_type **)a2 + 116), *((void *)a2 + 117));
  }
  else
  {
    long long v19 = *((_OWORD *)a2 + 58);
    *((void *)this + 118) = *((void *)a2 + 118);
    *((_OWORD *)this + 58) = v19;
  }
  *((_WORD *)this + 476) = *((_WORD *)a2 + 476);
  int v20 = (std::string *)((char *)this + 960);
  if (*((char *)a2 + 983) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 120), *((void *)a2 + 121));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 60);
    *((void *)this + 122) = *((void *)a2 + 122);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *((_DWORD *)this + 246) = *((_DWORD *)a2 + 246);
  *((void *)this + 124) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 125, (uint64_t)a2 + 1000);
  *((void *)this + 128) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 129, (uint64_t)a2 + 1032);
  *((void *)this + 132) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 133, (uint64_t)a2 + 1064);
  *((void *)this + 136) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 137, (uint64_t)a2 + 1096);
  *((void *)this + 140) = *((void *)a2 + 140);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)this + 141, (uint64_t)a2 + 1128);
  int v22 = *((_DWORD *)a2 + 288);
  *((unsigned char *)this + 1156) = *((unsigned char *)a2 + 1156);
  *((_DWORD *)this + 288) = v22;
  std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::map[abi:ne180100]((uint64_t *)this + 145, (uint64_t)a2 + 1160);
  *((void *)this + 148) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 149, (uint64_t)a2 + 1192);
  *((unsigned char *)this + 1216) = *((unsigned char *)a2 + 1216);
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)this + 153, (uint64_t)a2 + 1224);
  std::map<std::string,ims::SpamCategory>::map[abi:ne180100]((uint64_t *)this + 156, (uint64_t)a2 + 1248);
  long long v23 = *(_OWORD *)((char *)a2 + 1272);
  long long v24 = *(_OWORD *)((char *)a2 + 1288);
  *((unsigned char *)this + 1304) = *((unsigned char *)a2 + 1304);
  *(_OWORD *)((char *)this + 1272) = v23;
  *(_OWORD *)((char *)this + 1288) = v24;
  *((void *)this + 164) = &unk_1F20E3DD0;
  std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)this + 165, (uint64_t)a2 + 1320);
  if (*((char *)a2 + 1367) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 56, *((const std::string::value_type **)a2 + 168), *((void *)a2 + 169));
  }
  else
  {
    long long v25 = *((_OWORD *)a2 + 84);
    *((void *)this + 170) = *((void *)a2 + 170);
    *((_OWORD *)this + 84) = v25;
  }
  *((void *)this + 172) = 0;
  *((void *)this + 171) = 0;
  *((void *)this + 173) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 57, *((long long **)a2 + 171), *((long long **)a2 + 172), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 172) - *((void *)a2 + 171)) >> 3));
  *((_DWORD *)this + 348) = *((_DWORD *)a2 + 348);
}

void sub_1C52AD254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,void **a29,uint64_t a30)
{
  *(void *)(v31 + 1312) = v30;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v36, *(void **)(v31 + 1328));
  std::__tree<std::string>::destroy(v35, *(char **)(v31 + 1256));
  std::__tree<unsigned int>::destroy(v33, *(void **)(v31 + 1232));
  *(void *)(v31 + 1184) = v32;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v37, *(void **)(v31 + 1200));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v34, *(void **)(v31 + 1168));
  std::__tree<std::string>::destroy(a9, *(char **)(v31 + 1136));
  *(void *)(v31 + 1088) = a10;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a11, *(void **)(v31 + 1104));
  *(void *)(v31 + 1056) = a14;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a15, *(void **)(v31 + 1072));
  *(void *)(v31 + 1024) = a18;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a19, *(void **)(v31 + 1040));
  *(void *)(v31 + 992) = a20;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a21, *(void **)(v31 + 1008));
  if (*(char *)(v31 + 983) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v31 + 951) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v31 + 911) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v31 + 887) < 0) {
    operator delete(*a17);
  }
  *(void *)(v31 + 824) = a24;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a25, *(void **)(v31 + 840));
  *(void *)(v31 + 760) = a26;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a27, *(void **)(v31 + 776));
  *(void *)(v31 + 728) = a30;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(*(void *)(v38 - 160), *(void **)(v31 + 744));
  uint64_t v40 = *(void *)(v38 - 144);
  *(void *)(v31 + 696) = *(void *)(v38 - 152);
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v40, *(void **)(v31 + 712));
  if (*(char *)(v31 + 687) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(v31 + 663) < 0) {
    operator delete(*a23);
  }
  uint64_t v41 = *(void *)(v38 - 128);
  *(void *)(v31 + 552) = *(void *)(v38 - 136);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v41, *(void **)(v31 + 568));
  uint64_t v42 = *(void *)(v38 - 112);
  *(void *)(v31 + 512) = *(void *)(v38 - 120);
  std::__tree<std::string>::destroy(v42, *(char **)(v31 + 528));
  if (*(char *)(v31 + 511) < 0) {
    operator delete(*a28);
  }
  if (*(char *)(v31 + 487) < 0) {
    operator delete(*a29);
  }
  SipUri::~SipUri(*(SipUri **)(v38 - 104));
  _Unwind_Resume(a1);
}

void sub_1C52AD46C()
{
}

void sub_1C52AD474()
{
}

void sub_1C52AD47C()
{
}

void sub_1C52AD484()
{
}

void sub_1C52AD48C()
{
}

void sub_1C52AD494()
{
}

void sub_1C52AD49C()
{
}

void sub_1C52AD4A4()
{
}

void sub_1C52AD4AC()
{
}

void sub_1C52AD4B4()
{
}

void sub_1C52AD4BC()
{
}

void sub_1C52AD4C4()
{
}

void sub_1C52AD4CC()
{
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C52AD514(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  long long v10 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

uint64_t *std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C52AD688(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::__construct_node<std::pair<std::string const,std::vector<SipHeaderTemplateMap::HeaderTemplate>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void SipTransportLayerConfig::SipTransportLayerConfig(std::string *this, const SipTransportLayerConfig *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  SipUri::SipUri((SipUri *)&this[1], (const SipTransportLayerConfig *)((char *)a2 + 24));
  long long v5 = *((_OWORD *)a2 + 28);
  *(_OWORD *)&this[18].__r_.__value_.__l.__data_ = *((_OWORD *)a2 + 27);
  *(_OWORD *)&this[18].__r_.__value_.__r.__words[2] = v5;
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 464), *((const std::string::value_type **)a2 + 58), *((void *)a2 + 59));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 29);
    this[20].__r_.__value_.__r.__words[0] = *((void *)a2 + 60);
    *(_OWORD *)&this[19].__r_.__value_.__r.__words[1] = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 61);
  LODWORD(this[20].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 124);
  this[20].__r_.__value_.__l.__size_ = v7;
  this[21].__r_.__value_.__r.__words[2] = 0;
  this[21].__r_.__value_.__r.__words[0] = 0;
  this[21].__r_.__value_.__l.__size_ = 0;
  std::vector<SipSecurityAgreementConfig>::__init_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(this[21].__r_.__value_.__r.__words, *((void *)a2 + 63), *((void *)a2 + 64), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 64) - *((void *)a2 + 63)) >> 3));
  this[22].__r_.__value_.__r.__words[0] = *((void *)a2 + 66);
  this[22].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20D68F0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&this[22].__r_.__value_.__r.__words[2], (uint64_t)a2 + 544);
  long long v8 = *(_OWORD *)((char *)a2 + 568);
  LODWORD(this[24].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 146);
  *(_OWORD *)&this[23].__r_.__value_.__r.__words[2] = v8;
  HIDWORD(this[24].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 147);
  this[24].__r_.__value_.__r.__words[2] = *((void *)a2 + 74);
  this[25].__r_.__value_.__r.__words[0] = *((void *)a2 + 75);
  this[25].__r_.__value_.__l.__size_ = *((void *)a2 + 76);
  this[25].__r_.__value_.__r.__words[2] = *((void *)a2 + 77);
}

void sub_1C52AD938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  SipUri::~SipUri(v11);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void *std::vector<SipSecurityAgreementConfig>::__init_with_size[abi:ne180100]<SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<SipSecurityAgreementConfig>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*,SipSecurityAgreementConfig*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C52AD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void BambiCallOptions::BambiCallOptions(BambiCallOptions *this, const BambiCallOptions *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  long long v5 = *((_OWORD *)a2 + 2);
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  *(void *)((char *)this + 77) = *(void *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((_OWORD *)this + 2) = v5;
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v8;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *((_OWORD *)this + 7) = v9;
  }
  *((unsigned char *)this + 136) = *((unsigned char *)a2 + 136);
  ims::LocationInfo::LocationInfo((BambiCallOptions *)((char *)this + 144), (const BambiCallOptions *)((char *)a2 + 144));
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 18);
    *((void *)this + 38) = *((void *)a2 + 38);
    *((_OWORD *)this + 18) = v10;
  }
  *((unsigned char *)this + 312) = *((unsigned char *)a2 + 312);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 320), (long long *)a2 + 20);
}

void sub_1C52ADC58(_Unwind_Exception *a1)
{
  ims::LocationInfo::~LocationInfo(v5);
  if (v2[135] < 0) {
    operator delete(*v4);
  }
  if (v2[111] < 0) {
    operator delete(*v3);
  }
  if (v2[31] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_1C52ADCFC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void BambiCallOptions::~BambiCallOptions(void **this)
{
  if (*((unsigned char *)this + 344) && *((char *)this + 343) < 0) {
    operator delete(this[40]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *ImsUuid::ImsUuid(void *a1, uint64_t a2)
{
  *a1 = &unk_1F20B3708;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  ImsUuid::assign((uint64_t)a1, a2);
  return a1;
}

void sub_1C52ADE90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void LazuliSessionOptions::~LazuliSessionOptions(void **this)
{
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::__optional_copy_base<LazuliSendParams,false>::__optional_copy_base[abi:ne180100](std::string *this, const LazuliSendParams *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[13].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 320))
  {
    LazuliSendParams::LazuliSendParams(this, a2);
    this[13].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1C52ADF84(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 320)) {
    LazuliSendParams::~LazuliSendParams((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,LazuliInfo>::pair[abi:ne180100]<std::string const&,LazuliInfo,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(long long *)((char *)a3 + 24);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100]((std::string *)((char *)this + 64), (uint64_t)a3 + 40);
  return this;
}

void sub_1C52AE030(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[13].__r_.__value_.__s.__data_[8] = 0;
  if (*(unsigned char *)(a2 + 320))
  {
    LazuliSendParams::LazuliSendParams(this, (long long *)a2);
    this[13].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1C52AE0AC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 320)) {
    LazuliSendParams::~LazuliSendParams((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__list_imp<std::string>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    long long v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

void ims::detail::to_string_impl<unsigned long,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C52AE22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<SipUri>::__push_back_slow_path<SipUri const&>(uint64_t *a1, const SipUri *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x50505050505050) {
    unint64_t v9 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (SipUri *)&v10[408 * v4];
  uint64_t v16 = &v10[408 * v9];
  SipUri::SipUri(v14, a2);
  long long v15 = (char *)v14 + 408;
  std::vector<SipUri>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C52AE34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipUri>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipUri>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipUri>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>,std::reverse_iterator<SipUri*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 408;
  while (a3 + v10 != a5)
  {
    int v12 = (SipUri *)(v11 + v10);
    v10 -= 408;
    SipUri::SipUri(v12, (const SipUri *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<SipUri>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 408;
    (**(void (***)(void))(i - 408))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<BambiCall>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<BambiCall>>,std::reverse_iterator<std::shared_ptr<BambiCall>*>,std::reverse_iterator<std::shared_ptr<BambiCall>*>,std::reverse_iterator<std::shared_ptr<BambiCall>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<BambiCall>>,std::reverse_iterator<std::shared_ptr<BambiCall>*>,std::reverse_iterator<std::shared_ptr<BambiCall>*>,std::reverse_iterator<std::shared_ptr<BambiCall>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiCall>>,std::reverse_iterator<std::shared_ptr<BambiCall>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiCall>>,std::reverse_iterator<std::shared_ptr<BambiCall>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void ims::CallIncomingInfo::~CallIncomingInfo(void **this)
{
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

int *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned short>>>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  uint64_t v9 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    int v6 = *v4++;
    __int16 v8 = v6;
    std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:ne180100](&v9, &v8);
  }
  while (v4 != v5);
  return v5;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:ne180100](uint64_t *a1, _WORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_WORD **)(*a1 + 8);
  int v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    __int16 v8 = *(_WORD **)v4;
    uint64_t v9 = (uint64_t)v5 - *(void *)v4;
    if (v9 <= -3) {
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = *v6 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      uint64_t v12 = v10 + 1;
    }
    else {
      uint64_t v12 = *v6 - (void)v8;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v6, v13);
      __int16 v8 = *(_WORD **)v4;
      uint64_t v5 = *(_WORD **)(v4 + 8);
    }
    else
    {
      long long v14 = 0;
    }
    long long v15 = &v14[2 * v10];
    uint64_t v16 = &v14[2 * v13];
    *(_WORD *)long long v15 = *a2;
    uint64_t v7 = v15 + 2;
    while (v5 != v8)
    {
      __int16 v17 = *--v5;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

const void **ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384)) {
    LazuliSendParams::~LazuliSendParams((void **)(a1 + 64));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,LazuliInfo>>(uint64_t **a1, void **a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  __int16 v8 = (char **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      __int16 v8 = (char **)v5;
      uint64_t v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (!*v7)
  {
LABEL_10:
    uint64_t v15 = 0;
    unint64_t v11 = (char *)operator new(0x1A8uLL);
    v14[0] = v11;
    v14[1] = v6;
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *((void *)v11 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v11 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v12 = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *((_OWORD *)v11 + 5) = v12;
    std::__optional_move_base<LazuliSendParams,false>::__optional_move_base[abi:ne180100]((std::string *)v11 + 4, a3 + 64);
    LOBYTE(v15) = 1;
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    *uint64_t v7 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      unint64_t v11 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
}

void sub_1C52AEAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v6 = *(std::__shared_weak_count **)(v2 + 88);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LazuliInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,LazuliInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,LazuliInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LazuliInfo>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,LazuliInfo>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void ims::join<std::__wrap_iter<unsigned short const*>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C52AECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ims::join<std::__wrap_iter<unsigned short const*>>(uint64_t result, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (result != a2)
  {
    uint64_t v7 = result;
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0) {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)a3 + 32))(a3, a4);
      }
      v7 += 2;
      uint64_t result = std::ostream::operator<<();
      char v8 = 0;
      a3[17] = 0;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t *DefaultRegistrationPolicy::DefaultRegistrationPolicy(uint64_t *a1, uint64_t *a2, std::__shared_weak_count **a3)
{
  uint64_t v5 = a3[1];
  char v8 = *a3;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationPolicy::SipRegistrationPolicy((uint64_t)a1, a2 + 1, &v8);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v6 = *a2;
  *a1 = *a2;
  a1[13] = a2[6];
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 24)) = a2[7];
  a1[23] = (uint64_t)&unk_1F20BB4B0;
  a1[295] = 0;
  a1[297] = 0;
  a1[296] = 0;
  return a1;
}

void sub_1C52AEE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void *DefaultRegistrationPolicy::DefaultRegistrationPolicy(void *a1, std::__shared_weak_count **a2)
{
  a1[13] = &unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationPolicy::SipRegistrationPolicy((uint64_t)a1, (uint64_t *)&off_1F20BB4C0, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_1F20BB208;
  a1[13] = &unk_1F20BB468;
  a1[23] = &unk_1F20BB4B0;
  a1[295] = 0;
  a1[297] = 0;
  a1[296] = 0;
  return a1;
}

void sub_1C52AEF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *((void *)this + 13) = a2[6];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[7];
  *((void *)this + 23) = &unk_1F20BB4B0;
  uint64_t v5 = (void *)*((void *)this + 295);
  if (v5)
  {
    *((void *)this + 296) = v5;
    operator delete(v5);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, a2 + 1);
}

void DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'DefaultRegistrationPolicy::~DefaultRegistrationPolicy(DefaultRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

uint64_t DefaultRegistrationPolicy::maxRetryInterval(DefaultRegistrationPolicy *this)
{
  return *(void *)(*((void *)this + 296) - 16) + *(unsigned int *)(*((void *)this + 296) - 8);
}

uint64_t DefaultRegistrationPolicy::generalErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  int v1 = *((_DWORD *)this + 52);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = (v1 - 1);
  uint64_t v3 = *((void *)this + 296);
  uint64_t v4 = *((void *)this + 295);
  uint64_t v5 = v3 - v4;
  uint64_t v6 = (uint64_t *)(v4 + 16 * v2);
  uint64_t v7 = (uint64_t *)(v3 - 16);
  if (v2 >= v5 >> 4) {
    char v8 = v7;
  }
  else {
    char v8 = v6;
  }
  uint64_t v9 = *v8;
  if (*((_DWORD *)v8 + 2)) {
    v9 += random() % *((unsigned int *)v8 + 2);
  }
  return v9;
}

uint64_t DefaultRegistrationPolicy::fatalErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  int v1 = (uint64_t *)*((void *)this + 295);
  uint64_t v2 = *v1;
  if (*((_DWORD *)v1 + 2)) {
    v2 += random() % *((unsigned int *)v1 + 2);
  }
  return v2;
}

uint64_t DefaultRegistrationPolicy::forbiddenErrorRetryInterval(DefaultRegistrationPolicy *this)
{
  int v1 = (uint64_t *)*((void *)this + 295);
  uint64_t v2 = *v1;
  if (*((_DWORD *)v1 + 2)) {
    v2 += random() % *((unsigned int *)v1 + 2);
  }
  return v2;
}

void DefaultRegistrationPolicy::updateConfig(DefaultRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  uint64_t v4 = (_DWORD **)((char *)this + 2360);
  if ((char *)this + 2360 != (char *)a2 + 960) {
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)this + 2360, *((char **)a2 + 120), *((void *)a2 + 121), (uint64_t)(*((void *)a2 + 121) - *((void *)a2 + 120)) >> 4);
  }
  unint64_t v5 = *((void *)this + 295);
  if (v5 == *((void *)this + 296))
  {
    unint64_t v6 = *((void *)this + 297);
    if (v5 >= v6)
    {
      uint64_t v8 = v6 - v5;
      uint64_t v9 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1) {
        uint64_t v9 = 1;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)this + 2376, v10);
      long long v12 = (_DWORD *)*((void *)this + 296);
      uint64_t v13 = (_DWORD *)*((void *)this + 295);
      uint64_t v15 = &v11[16 * v14];
      *(void *)unint64_t v11 = 30;
      *((_DWORD *)v11 + 2) = 0;
      uint64_t v7 = v11 + 16;
      if (v12 != v13)
      {
        do
        {
          uint64_t v16 = *((void *)v12 - 2);
          v12 -= 4;
          int v17 = v12[2];
          *((void *)v11 - 2) = v16;
          v11 -= 16;
          *((_DWORD *)v11 + 2) = v17;
        }
        while (v12 != v13);
        long long v12 = *v4;
      }
      *((void *)this + 295) = v11;
      *((void *)this + 296) = v7;
      *((void *)this + 297) = v15;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)unint64_t v5 = 30;
      *(_DWORD *)(v5 + 8) = 0;
      uint64_t v7 = (char *)(v5 + 16);
    }
    *((void *)this + 296) = v7;
  }
  SipRegistrationPolicy::updateConfig((ims **)this, a2);
}

const char *DefaultRegistrationPolicy::name(DefaultRegistrationPolicy *this)
{
  return "default";
}

void SipRecorder::recordBlob(void *lpsrc, uint64_t a2, uint64_t a3, int a4)
{
  v61[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = byte_1EA3D56B7;
  if (byte_1EA3D56B7 < 0) {
    uint64_t v4 = qword_1EA3D56A8;
  }
  if (v4)
  {
    memset(&__p, 0, sizeof(__p));
    if (lpsrc)
    {
      if (v9)
      {
        unint64_t v10 = (const std::string *)(*(uint64_t (**)(void *))(*(void *)v9 + 112))(v9);
        std::string::operator=(&__p, v10);
      }
      else
      {
        uint64_t v60 = 0;
        long long v58 = 0u;
        memset(v59, 0, sizeof(v59));
        *(_OWORD *)char v56 = 0u;
        long long v57 = 0u;
        memset(v55, 0, sizeof(v55));
        *(_OWORD *)int v53 = 0u;
        long long v54 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v53);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v53[1], &v44);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
        __p.__r_.__value_.__r.__words[2] = v45;
        v53[0] = *(void **)MEMORY[0x1E4FBA418];
        *(void **)((char *)v53 + *((void *)v53[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
        v53[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (SHIBYTE(v57) < 0) {
          operator delete(v56[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C878E270](v59);
      }
      uint64_t v11 = byte_1EA3D56B7;
      if (byte_1EA3D56B7 < 0) {
        uint64_t v11 = qword_1EA3D56A8;
      }
      if (v11)
      {
        uint64_t v52 = 0;
        long long v50 = 0u;
        memset(v51, 0, sizeof(v51));
        *(_OWORD *)char v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
        if (byte_1EA3D56B7 >= 0) {
          long long v12 = &SipRecorder::_recordingPath;
        }
        else {
          long long v12 = (uint64_t *)SipRecorder::_recordingPath;
        }
        if (byte_1EA3D56B7 >= 0) {
          uint64_t v13 = byte_1EA3D56B7;
        }
        else {
          uint64_t v13 = qword_1EA3D56A8;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)v12, v13);
        if (a4)
        {
          ++dword_1EBBDBD54;
          uint64_t v14 = (void *)std::ostream::operator<<();
          LOBYTE(v53[0]) = 45;
          uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v53, 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
          long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
          int v20 = *(char *)(a3 + 23);
          if (v20 >= 0) {
            uint64_t v21 = a3;
          }
          else {
            uint64_t v21 = *(void *)a3;
          }
          if (v20 >= 0) {
            uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v22 = *(void *)(a3 + 8);
          }
          long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          long long v24 = ".out";
          uint64_t v25 = 4;
        }
        else
        {
          ++_MergedGlobals_4;
          uint64_t v26 = (void *)std::ostream::operator<<();
          LOBYTE(v53[0]) = 45;
          uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v53, 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v28 = &__p;
          }
          else {
            unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
          uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
          int v32 = *(char *)(a3 + 23);
          if (v32 >= 0) {
            uint64_t v33 = a3;
          }
          else {
            uint64_t v33 = *(void *)a3;
          }
          if (v32 >= 0) {
            uint64_t v34 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v34 = *(void *)(a3 + 8);
          }
          long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          long long v24 = ".in";
          uint64_t v25 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        std::string::basic_string[abi:ne180100]<0>(v53, "sip.record");
        std::string::basic_string[abi:ne180100]<0>(v42, "");
        uint64_t v35 = ims::debug((uint64_t)v53, (uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Writing message to ", 19);
        *(unsigned char *)(v35 + 17) = 0;
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44 + 8, v40);
        (*(void (**)(uint64_t, void **))(*(void *)v35 + 32))(v35, v40);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v35 + 17) = 0;
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (SBYTE7(v54) < 0) {
          operator delete(v53[0]);
        }
        bzero(v53, 0x238uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44 + 8, v42);
        std::ofstream::basic_ofstream((uint64_t *)v53);
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if ((*((unsigned char *)v55 + *((void *)v53[0] - 3)) & 5) == 0)
        {
          int v36 = *(char *)(a2 + 23);
          uint64_t v37 = v36 >= 0 ? a2 : *(void *)a2;
          uint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v37, v38);
          if (!std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)v53 + *((void *)v53[0] - 3)), *(_DWORD *)((char *)v55 + *((void *)v53[0] - 3)) | 4);
          }
        }
        v53[0] = *(void **)MEMORY[0x1E4FBA400];
        *(void **)((char *)v53 + *((void *)v53[0] - 3)) = *(void **)(MEMORY[0x1E4FBA400] + 24);
        MEMORY[0x1C878DF90](&v53[1]);
        std::ostream::~ostream();
        MEMORY[0x1C878E270](v61);
        *(void *)&long long v44 = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v44 + *(void *)(v44 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        *((void *)&v44 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C878E270](v51);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C52AFB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x1C878DF80](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1C52AFD60(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1C878DF90](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1C878E270](a1 + 52);
  return a1;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  size_t v6 = *((unsigned __int8 *)a1 + 23);
  size_t v7 = (size_t)a1[1];
  a3[1] = 0;
  a3[2] = 0;
  if ((v6 & 0x80u) == 0) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  *a3 = 0;
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v8 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v10 = (char *)result;
  }
  else {
    unint64_t v10 = *(char **)result;
  }
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v8);
  }
  long long v12 = &v10[v8];
  *long long v12 = a2;
  v12[1] = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_SipRecorder_cpp()
{
  return __cxa_atexit(MEMORY[0x1E4FBA210], &SipRecorder::_recordingPath, &dword_1C51D1000);
}

uint64_t AnalyticsLogger::start(AnalyticsLogger *this)
{
  *((void *)this + 78) = 0;
  *((void *)this + 62) = time(0);
  *((void *)this + 63) = time(0);
  *((void *)this + 66) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((unsigned char *)this + 584) = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 80);
  *(_OWORD *)((char *)this + 632) = 0u;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = xpc_null_create();
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = (void *)*((void *)this + 81);
  *((void *)this + 81) = v3;
  xpc_release(v5);
  xpc_release(v4);
  *((_DWORD *)this + 155) = 0;
  *((void *)this + 20) = *((void *)this + 19);
  *((_DWORD *)this + 165) = 0;
  return 1;
}

{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

uint64_t non-virtual thunk to'AnalyticsLogger::start(AnalyticsLogger *this)
{
  return 1;
}

{
  return (*(uint64_t (**)(void))(*((void *)this - 13) + 80))();
}

uint64_t AnalyticsLogger::logSipRequest(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipRequest", 30);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logSipRequest(uint64_t a1)
{
  return AnalyticsLogger::logSipRequest(a1 - 136);
}

uint64_t AnalyticsLogger::logSipResponse(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipResponse", 31);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logSipResponse(uint64_t a1)
{
  return AnalyticsLogger::logSipResponse(a1 - 136);
}

uint64_t AnalyticsLogger::logSipRequestFromNonProxyDropped(_DWORD *a1)
{
  uint64_t v2 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"AnalyticsLogger::logSipRequestFromNonProxyDropped. Incrementing counter", 71);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  ++a1[165];
  return result;
}

uint64_t AnalyticsLogger::logRTPError(AnalyticsLogger *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logRTPError ", 29);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  *((_DWORD *)this + 65) = a2;
  return result;
}

void AnalyticsLogger::logRegistrationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationRequest", 39);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  long long v11 = 0uLL;
  size_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  unint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8.n128_f64[0] = ims::analytics::RegistrationAttemptEvent::createRegistrationAttempt(&v9, a3, a1[63], &v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  (*(void (**)(void, __n128))(*(void *)v11 + 32))(v11, v8);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_1C52B04AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logRegistrationRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void AnalyticsLogger::logWiFiHandover(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"AnalyticsLogger::logWiFiHandover - isValidHandover: ", 52);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (a4)
  {
    time_t v8 = time(0) - *(void *)(a1 + 624);
    unint64_t v10 = *(unint64_t **)(a1 + 160);
    unint64_t v9 = *(void *)(a1 + 168);
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v13 = *(void *)(a1 + 152);
      uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v9 - v13;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = v17 + 8 * v14;
      unint64_t v20 = v17 + 8 * v18;
      uint64_t v21 = 0x100000000;
      if (!a3) {
        uint64_t v21 = 0;
      }
      *(void *)unint64_t v19 = v21 & 0xFFFFFFFF00000000 | v8;
      long long v12 = (void *)(v19 + 8);
      long long v23 = *(unsigned char **)(a1 + 152);
      uint64_t v22 = *(unsigned char **)(a1 + 160);
      if (v22 != v23)
      {
        do
        {
          int v24 = *((_DWORD *)v22 - 2);
          v22 -= 8;
          char v25 = v22[4];
          *(_DWORD *)(v19 - 8) = v24;
          v19 -= 8;
          *(unsigned char *)(v19 + 4) = v25;
        }
        while (v22 != v23);
        uint64_t v22 = *(unsigned char **)(a1 + 152);
      }
      *(void *)(a1 + 152) = v19;
      *(void *)(a1 + 160) = v12;
      *(void *)(a1 + 168) = v20;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      uint64_t v11 = 0x100000000;
      if (!a3) {
        uint64_t v11 = 0;
      }
      *unint64_t v10 = v11 & 0xFFFFFFFF00000000 | v8;
      long long v12 = v10 + 1;
    }
    *(void *)(a1 + 160) = v12;
    *(unsigned char *)(a1 + 144) = a3;
    if ((a3 & 1) == 0) {
      ++*(_DWORD *)(a1 + 620);
    }
  }
}

void non-virtual thunk to'AnalyticsLogger::logWiFiHandover(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

void AnalyticsLogger::logRegistrationSuccess(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  time_t v7 = time(0);
  a1[70] = v7 - a1[62];
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"AnalyticsLogger::logRegistrationSuccess", 39);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (*(unsigned char *)(a3 + 144))
  {
    a1[72] += v7 - a1[66];
    a1[69] += v7 - a1[63];
  }
  else
  {
    a1[66] = v7;
    a1[72] = 0;
    a1[71] += v7 - a1[63];
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Time passed ", 12);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"AWD logging registration attempt took ", 38);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" ms", 3);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" exires in ", 11);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"ipTelephony up ", 15);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" totalRegTime ", 14);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" Current reg ", 13);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" un reg time is ", 16);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (*(_DWORD *)(v6 + 456)) {
    a1[63] = v7;
  }
  long long v16 = 0uLL;
  long long v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13.n128_f64[0] = ims::analytics::RegistrationResultEvent::createRegistrationSuccess(&v14, a3, &v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  (*(void (**)(void, __n128))(*(void *)v16 + 32))(v16, v13);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
}

void sub_1C52B0B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logRegistrationSuccess(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logRegistrationTerminated", 42);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  time_t v5 = time(0);
  *(void *)(a1 + 576) = v5 - *(void *)(a1 + 528);
  uint64_t v6 = *(void *)(a1 + 496);
  *(void *)(a1 + 552) += v5 - *(void *)(a1 + 504);
  *(void *)(a1 + 560) = v5 - v6;
  *(void *)(a1 + 504) = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ipTelephony up ", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" totalRegTime ", 14);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" Current reg ", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" un reg time is ", 16);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::RegistrationResultEvent::createRegistrationTerminated(&v9, *(unsigned int *)(a1 + 660), &v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  (*(void (**)(_anonymous_namespace_::RegistrationResultEventImpl *))(*(void *)v11 + 32))(v11);
  *(_DWORD *)(a1 + 660) = 0;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C52B0E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2)
{
}

void AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationTerminated", 42);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  *(void *)(a1 + 504) = time(0);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::RegistrationResultEvent::createRegistrationTerminated(&v8, a3, *(unsigned int *)(a1 + 660), &v10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  (*(void (**)(_anonymous_namespace_::RegistrationResultEventImpl *))(*(void *)v10 + 32))(v10);
  *(_DWORD *)(a1 + 660) = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C52B1008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logRegistrationTerminated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void AnalyticsLogger::logRegistrationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"AnalyticsLogger::logRegistrationError", 37);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (*(uint64_t **)(a3 + 72) == &SipResultDomain::_domain)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"registration failed with SIP response ", 38);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  long long v12 = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9.n128_f64[0] = ims::analytics::RegistrationResultEvent::createRegistrationError(&v10, a3, &v12);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  (*(void (**)(void, __n128))(*(void *)v12 + 32))(v12, v9);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_1C52B1254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logRegistrationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void AnalyticsLogger::logDeRegistration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logDeRegistration", 34);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  long long v9 = 0uLL;
  time_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6.n128_f64[0] = ims::analytics::RegistrationAttemptEvent::createDeregistrationAttempt(&v7, &v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  (*(void (**)(void, __n128))(*(void *)v9 + 32))(v9, v6);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1C52B13C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logDeRegistration(uint64_t a1, uint64_t *a2)
{
}

void AnalyticsLogger::logSessionRequestedEvent(unsigned char *a1, BambiCall **a2, char a3, char a4)
{
  uint64_t v8 = BambiCall::bambiClient(*a2);
  memset(&__str, 0, sizeof(__str));
  long long v9 = *a2;
  if (*((char *)*a2 + 519) < 0) {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v9 + 62), *((void *)v9 + 63));
  }
  else {
    std::string __str = *(std::string *)((char *)v9 + 496);
  }
  time_t v10 = time(0);
  a1[616] = a3;
  uint64_t v11 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"AnalyticsLogger::logSessionRequestedEvent MO/MT=", 48);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" hashed call Id is ", 19);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &__str);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  long long v12 = *a2;
  __n128 v13 = (std::__shared_weak_count *)*((void *)*a2 + 46);
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = *((void *)v12 + 45);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0;
LABEL_9:
  if (*(char *)(v15 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v15 + 4160);
  }
  uint64_t v16 = *(void *)(v8 + 152);
  if (v16)
  {
    unint64_t v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&__p.__r_.__value_.__l.__data_);
    if ((void **)(v16 + 320) == v17) {
      int v18 = 0;
    }
    else {
      int v18 = *((_DWORD *)v17 + 14);
    }
    BOOL v19 = v18 == 1;
  }
  else
  {
    BOOL v19 = 0;
  }
  a1[144] = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if ((unint64_t)BambiClient::callCountExcludingCall(v8, &__p) > 1)
  {
    char v20 = 1;
  }
  else
  {
    char v20 = 0;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    a1[492] = 0;
    *((_DWORD *)a1 + 82) = 0;
    *((_OWORD *)a1 + 21) = 0u;
    *((_OWORD *)a1 + 22) = 0u;
    *((_OWORD *)a1 + 23) = 0u;
    *((_DWORD *)a1 + 96) = 0;
    *((_DWORD *)a1 + 110) = 0;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *((_OWORD *)a1 + 28) = 0u;
    *((_OWORD *)a1 + 29) = 0u;
    *((void *)a1 + 60) = 0;
    *(_OWORD *)(a1 + 260) = xmmword_1C56CA680;
    *((_DWORD *)a1 + 64) = 0;
    *((_OWORD *)a1 + 14) = 0u;
    *((_OWORD *)a1 + 15) = 0u;
    *((_OWORD *)a1 + 12) = 0u;
    *((_OWORD *)a1 + 13) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *((void *)a1 + 64) = v10;
    *((void *)a1 + 65) = v10;
    *((void *)a1 + 67) = v10;
    *((void *)a1 + 68) = v10;
    *((void *)a1 + 20) = *((void *)a1 + 19);
    *((_DWORD *)a1 + 155) = 0;
  }
  a1[584] = v20;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (unint64_t)BambiClient::callCountExcludingCall(v8, &__p) < 2 || (a4)
  {
    std::string::operator=((std::string *)(a1 + 592), &__str);
  }
  else
  {
    uint64_t v21 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"call waiting  active call is ", 29);
    *(unsigned char *)(v21 + 17) = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    BambiClient::callCountExcludingCall(v8, &__p);
    std::ostream::operator<<();
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
  }
  *((void *)a1 + 78) = v10;
  uint64_t v22 = *a2;
  long long v23 = (std::__shared_weak_count *)*((void *)*a2 + 46);
  if (v23)
  {
    int v24 = std::__shared_weak_count::lock(v23);
    if (v24) {
      uint64_t v25 = *((void *)v22 + 45);
    }
    else {
      uint64_t v25 = 0;
    }
  }
  else
  {
    uint64_t v25 = 0;
    int v24 = 0;
  }
  if (*(char *)(v25 + 3255) < 0) {
    uint64_t v26 = *(void *)(v25 + 3240);
  }
  else {
    uint64_t v26 = *(unsigned __int8 *)(v25 + 3255);
  }
  uint64_t v27 = (ims::analytics::ActiveRatField *)(v25 + 3160);
  if (v26)
  {
    unint64_t v28 = (ims::analytics::ActiveRatField *)(v25 + 3232);
    if (*(char *)(v25 + 3279) < 0 ? *(void *)(v25 + 3264) : *(unsigned __int8 *)(v25 + 3279)) {
      uint64_t v27 = v28;
    }
  }
  ims::analytics::ActiveRatField::create(v27, &__p);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)a1 + 80);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v31 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"AnalyticsLogger::logSessionRequestedEvent", 41);
  *(unsigned char *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  if ((a4 & 1) == 0)
  {
    uint64_t v32 = *((void *)*a2 + 154);
    if (*((char *)*a2 + 1247) >= 0) {
      uint64_t v32 = *((unsigned __int8 *)*a2 + 1247);
    }
    a1[492] = v32 != 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C52B196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logSessionRequestedEvent(uint64_t a1, BambiCall **a2, char a3, char a4)
{
}

uint64_t AnalyticsLogger::logSessionProgressEvent(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"logSessionProgressEvent", 23);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 1232);
  if (*(char *)(*(void *)a2 + 1247) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(*(void *)a2 + 1247);
  }
  a1[492] = v6 != 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
  return AnalyticsLogger::logSessionProgressEvent((unsigned char *)(a1 - 136), a2);
}

uint64_t AnalyticsLogger::logRingingEvent(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"logRingingEvent", 15);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v6 = *(void *)(*(void *)a2 + 1232);
  if (*(char *)(*(void *)a2 + 1247) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(*(void *)a2 + 1247);
  }
  a1[492] = v6 != 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logRingingEvent(uint64_t a1, uint64_t a2)
{
  return AnalyticsLogger::logRingingEvent((unsigned char *)(a1 - 136), a2);
}

time_t AnalyticsLogger::logSessionConfirmedEvent(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"logSessionConfirmedEvent", 24);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  time_t result = time(0);
  a1[67] = result;
  a1[68] = result;
  return result;
}

time_t non-virtual thunk to'AnalyticsLogger::logSessionConfirmedEvent(uint64_t a1)
{
  return AnalyticsLogger::logSessionConfirmedEvent((void *)(a1 - 136));
}

uint64_t AnalyticsLogger::logCallStatusChange(AnalyticsLogger *this, BambiCallEvent *a2, const __CFString *a3)
{
  uint64_t v4 = (*(uint64_t (**)(AnalyticsLogger *, BambiCallEvent *, const __CFString *))(*(void *)this + 64))(this, a2, a3);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logCallStatusChange", 36);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logCallStatusChange(AnalyticsLogger *this, BambiCallEvent *a2, const __CFString *a3)
{
  return AnalyticsLogger::logCallStatusChange((AnalyticsLogger *)((char *)this - 136), a2, a3);
}

uint64_t AnalyticsLogger::logParticipantLeftConference(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"AnalyticsLogger::logParticipantLeftConference", 45);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logParticipantLeftConference(uint64_t a1)
{
  return AnalyticsLogger::logParticipantLeftConference(a1 - 136);
}

void AnalyticsLogger::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, BOOL a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"AnalyticsLogger::logLazuliRefer", 31);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v15 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  BOOL v19 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v17 = *(std::string *)a3;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string __p = *(std::string *)a7;
  }
  ims::analytics::LazuliReferEvent::create((uint64_t)&v18, (uint64_t)&v17, a4, a5, a6, (uint64_t)&__p, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1C52B2050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, BOOL a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
}

void AnalyticsLogger::logLazuliMessageSessionSetup(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL value)
{
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionSetup", 45);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v23 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v22 = *(std::string *)a6;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v21 = *(std::string *)a7;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v20 = *(std::string *)a8;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v19.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  ims::analytics::MessageSessionSetupEvent::create(a2, a3, a4, (uint64_t)&v23, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v19, &v24, value);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 32))(v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1C52B2340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v37 - 105) < 0) {
    operator delete(*(void **)(v37 - 128));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionSetup(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BOOL a10)
{
}

void AnalyticsLogger::logLazuliMessageSessionEnd(uint64_t a1, unsigned int a2, unsigned int a3, BOOL a4, BOOL a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionEnd", 43);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  uint64_t v20 = 0;
  std::string v21 = 0;
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v19 = *(std::string *)a7;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  ims::analytics::MessageSessionEndEvent::create(a2, a3, a4, a5, a6, (uint64_t)&v19, a8, (uint64_t)&__p, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1C52B25C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionEnd(uint64_t a1, unsigned int a2, unsigned int a3, BOOL a4, BOOL a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
}

void AnalyticsLogger::logLazuliMessageSessionSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, BOOL a7, BOOL a8, BOOL a9, int a10, int64_t a11)
{
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSessionSendReceive", 51);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v22 = *(std::string *)a5;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v21 = *(std::string *)a6;
  }
  LODWORD(value) = a10;
  ims::analytics::MessageSessionSendReceiveEvent::create(a2, a3, a4, (uint64_t)&v22, (uint64_t)&v21, a7, a8, a9, &v23, value);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v23 + 32))(v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1C52B2804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliMessageSessionSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, BOOL a7, BOOL a8, BOOL a9, int a10, int64_t a11)
{
}

void AnalyticsLogger::logLazuliMessageSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, BOOL a6, BOOL a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSendReceive", 44);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  uint64_t v21 = 0;
  std::string v22 = 0;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v20 = *(std::string *)a5;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v19 = *(std::string *)a8;
  }
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
  }
  ims::analytics::MessageSendReceiveEvent::create(a2, a3, a4, (uint64_t)&v20, a6, a7, (uint64_t)&v19, (uint64_t)&__p, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_1C52B2A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliMessageSendReceive(uint64_t a1, BOOL a2, unsigned int a3, unsigned int a4, uint64_t a5, BOOL a6, BOOL a7, uint64_t a8, uint64_t a9)
{
}

void AnalyticsLogger::logLazuliMessageSipOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logLazuliMessageSipOptions", 43);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  ims::analytics::MessageSipOptionsEvent::create(a2, &v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52B2C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliMessageSipOptions(uint64_t a1, uint64_t a2)
{
}

void AnalyticsLogger::logLazuliServerTermination(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AnalyticsLogger::logLazuliServerTermination", 43);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  ims::analytics::RCSServerTerminationEvent::create(a2, &v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C52B2D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'AnalyticsLogger::logLazuliServerTermination(uint64_t a1, unsigned int *a2)
{
}

void AnalyticsLogger::fillCallEndMetricFromEvent(AnalyticsLogger *this, awd::metrics::ATM_CallEndEvent *a2, const BambiCallSessionTerminationBaseEvent *a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 3);
  if (!v8)
  {
    time_t v10 = 0;
LABEL_6:
    uint64_t v11 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
    (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"AnalyticsLogger::fillCallEndMetricFromEvent - no call", 53);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v9 = 0;
    *(unsigned char *)(v11 + 17) = 0;
    goto LABEL_7;
  }
  uint64_t v9 = *((void *)a3 + 2);
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  time_t v10 = std::__shared_weak_count::lock(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v10 || !v9) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v12 = *((void *)this + 20);
  if (v12 == *((void *)this + 19))
  {
    BOOL v17 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v9 + 424);
    uint64_t v14 = *(unsigned int *)(v12 - 8);
    uint64_t v15 = *(std::__shared_weak_count **)(v9 + 368);
    if (v15)
    {
      uint64_t v15 = std::__shared_weak_count::lock(v15);
      uint64_t v16 = v15;
      if (v15) {
        uint64_t v15 = *(std::__shared_weak_count **)(v9 + 360);
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v18 = (ImsPrefs *)SipStack::prefs((SipStack *)v15);
    InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v18);
    BOOL v17 = a4 - (v13 + v14) < (int)ImsPrefs::intValue(v18, InactivityTimerRTPSecondsKey);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    *((void *)this + 20) = *((void *)this + 19);
  }
  std::string v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 368));
  char v21 = *(unsigned char *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(v9 + 360) + 144)) + 456);
  *((_DWORD *)a2 + 172) |= 0x10u;
  *((unsigned char *)a2 + 646) = v21;
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  switch(*((_DWORD *)a3 + 10))
  {
    case 0:
      int v26 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 7;
      *((_DWORD *)a2 + 169) = v26 | 0x30;
      int v27 = 1007;
      goto LABEL_49;
    case 1:
      int v28 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 8;
      *((_DWORD *)a2 + 169) = v28 | 0x30;
      int v27 = 1008;
      goto LABEL_49;
    case 2:
      int v29 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 15;
      *((_DWORD *)a2 + 169) = v29 | 0x30;
      int v27 = 1015;
      goto LABEL_49;
    case 3:
      int v30 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 16;
      *((_DWORD *)a2 + 169) = v30 | 0x30;
      int v27 = 1016;
      goto LABEL_49;
    case 4:
      int v31 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 10;
      *((_DWORD *)a2 + 169) = v31 | 0x30;
      int v27 = 1010;
      goto LABEL_49;
    case 5:
      int v32 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 11;
      *((_DWORD *)a2 + 169) = v32 | 0x30;
      int v27 = 1011;
      goto LABEL_49;
    case 6:
      *((_DWORD *)a2 + 169) |= 0x10u;
      int v33 = 33;
      goto LABEL_94;
    case 7:
      *((_DWORD *)a2 + 169) |= 0x10u;
      int v33 = 34;
      goto LABEL_94;
    case 8:
      int v34 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 14;
      *((unsigned char *)a2 + 236) = 1;
      *((_DWORD *)a2 + 169) = v34 | 0x70;
      int v27 = 1014;
      goto LABEL_49;
    case 9:
      int v35 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 32;
      *((_DWORD *)a2 + 169) = v35 | 0x30;
      int v27 = 1000;
      goto LABEL_49;
    case 0xA:
    case 0x26:
      int v25 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 13;
      *((_DWORD *)a2 + 169) = v25 | 0x30;
      *((_DWORD *)a2 + 48) = 1013;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0xB:
    case 0x1D:
    case 0x24:
      int v24 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 9;
      *((_DWORD *)a2 + 169) = v24 | 0x30;
      *((_DWORD *)a2 + 48) = 1009;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0xC:
      int v36 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 17;
      *((_DWORD *)a2 + 169) = v36 | 0x30;
      int v27 = 1017;
      goto LABEL_49;
    case 0xD:
      int v37 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 12;
      *((_DWORD *)a2 + 169) = v37 | 0x30;
      *((_DWORD *)a2 + 48) = 1012;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0xE:
      int v38 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 19;
      *((_DWORD *)a2 + 169) = v38 | 0x30;
      *((_DWORD *)a2 + 48) = 1019;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0xF:
      int v39 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 21;
      *((_DWORD *)a2 + 169) = v39 | 0x30;
      int v27 = 1021;
LABEL_49:
      *((_DWORD *)a2 + 48) = v27;
      goto LABEL_95;
    case 0x10:
      int v40 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 22;
      *((_DWORD *)a2 + 169) = v40 | 0x30;
      *((_DWORD *)a2 + 48) = 1022;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x11:
      int v41 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 23;
      *((_DWORD *)a2 + 169) = v41 | 0x30;
      *((_DWORD *)a2 + 48) = 1023;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x12:
    case 0x20:
    case 0x21:
    case 0x23:
      int v22 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 24;
      *((_DWORD *)a2 + 169) = v22 | 0x30;
      *((_DWORD *)a2 + 48) = 1024;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x13:
      if (v17)
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x405);
        uint64_t v42 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
        (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v42);
        char v43 = (unsigned char *)ImsOutStream::operator<<(v42, "media timeout after handover ");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v43[17] = 0;
      }
      else
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x401);
      }
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 25;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x14:
      if (v17)
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x405);
        uint64_t v44 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
        (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v44);
        long long v45 = (unsigned char *)ImsOutStream::operator<<(v44, "media timeout after handover ");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v45[17] = 0;
      }
      else
      {
        awd::metrics::ATM_CallEndEvent::set_status_code((uint64_t)a2, (awd::metrics *)0x402);
      }
      uint64_t v50 = *((void *)this + 68);
      if (v50 >= 1 && !*((unsigned char *)a3 + 56))
      {
        *((_DWORD *)a2 + 171) |= 0x1000u;
        *((_DWORD *)a2 + 138) = a4 - v50;
      }
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 26;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x15:
      int v46 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 27;
      *((_DWORD *)a2 + 169) = v46 | 0x30;
      *((_DWORD *)a2 + 48) = 1027;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x16:
      int v47 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 28;
      *((_DWORD *)a2 + 169) = v47 | 0x30;
      *((_DWORD *)a2 + 48) = 1028;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x17:
      int v48 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 30;
      *((_DWORD *)a2 + 169) = v48 | 0x230;
      *((void *)a2 + 24) = 0x100000406;
      goto LABEL_95;
    case 0x18:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 35;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x19:
      int v49 = *((_DWORD *)a2 + 169);
      *((_DWORD *)a2 + 45) = 31;
      *((_DWORD *)a2 + 169) = v49 | 0x30;
      *((_DWORD *)a2 + 48) = 1031;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x1A:
      *((_DWORD *)a2 + 169) |= 0x10u;
      int v33 = 36;
      goto LABEL_94;
    case 0x1B:
      *((_DWORD *)a2 + 169) |= 0x10u;
      int v33 = 37;
      goto LABEL_94;
    case 0x1C:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 38;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x1E:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 39;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 >= 1) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x1F:
      *((_DWORD *)a2 + 169) |= 0x10u;
      *((_DWORD *)a2 + 45) = 40;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void *)(v9 + 432);
      if (v23 < 1) {
        goto LABEL_111;
      }
LABEL_109:
      if (time(0) - v23 <= 10) {
LABEL_111:
      }
        int v51 = 1;
      else {
        int v51 = 2;
      }
      *((_DWORD *)a2 + 169) |= 0x200u;
      *((_DWORD *)a2 + 49) = v51;
      if (!v10) {
        return;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_114:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      return;
    case 0x22:
      *((_DWORD *)a2 + 169) |= 0x10u;
      int v33 = 41;
LABEL_94:
      *((_DWORD *)a2 + 45) = v33;
      goto LABEL_95;
    default:
LABEL_95:
      if (!v10) {
        return;
      }
      goto LABEL_114;
  }
}

void sub_1C52B3754(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AnalyticsLogger::logSessionTerminationEvent(AnalyticsLogger *this, const BambiCallSessionTerminationBaseEvent *a2, const uint64_t *a3, unsigned __int8 a4, int a5)
{
  uint64_t v9 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEvent", 43);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (!a2) {
    return 1013;
  }
  uint64_t v53 = time(0);
  int8x16_t v36 = 0u;
  xpc_object_t object = 0;
  long long v35 = 0u;
  xpc_object_t v10 = xpc_null_create();
  *(_OWORD *)object_8 = 0uLL;
  long long v39 = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v42 = 0u;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v45 = 0u;
  long long v46 = 0u;
  memset(v47, 0, sizeof(v47));
  long long v48 = 0u;
  long long v49 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  HIDWORD(v11) = *((_DWORD *)this + 122);
  LODWORD(v11) = HIDWORD(v11);
  int v12 = *((_DWORD *)this + 65);
  LODWORD(v35) = v11 >> 16;
  DWORD1(v35) = v12;
  BYTE8(v35) = *((unsigned char *)this + 144);
  int8x16_t v36 = vextq_s8(*((int8x16_t *)this + 32), *((int8x16_t *)this + 32), 8uLL);
  xpc_object_t v13 = (xpc_object_t)*((void *)this + 81);
  if (v13) {
    xpc_retain(*((xpc_object_t *)this + 81));
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_object_t object = v13;
  xpc_release(v10);
  if (&__p[1] != (void **)((char *)this + 152))
  {
    uint64_t v16 = (unsigned char *)*((void *)this + 19);
    uint64_t v15 = (unsigned char *)*((void *)this + 20);
    int64_t v17 = v15 - v16;
    uint64_t v18 = (v15 - v16) >> 3;
    if (v15 == v16)
    {
      std::string v19 = 0;
    }
    else
    {
      if (v17 < 0) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      std::string v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>((v15 - v16) >> 3);
      __p[1] = v19;
      *(void *)&long long v51 = v19;
      *((void *)&v51 + 1) = &v19[8 * v20];
      memmove(v19, v16, v17 - 3);
    }
    *(void *)&long long v51 = &v19[8 * v18];
  }
  long long v21 = *((_OWORD *)this + 21);
  *(_OWORD *)object_8 = *((_OWORD *)this + 20);
  long long v39 = v21;
  long long v40 = *((_OWORD *)this + 22);
  v41[0] = *((void *)this + 46);
  long long v22 = *((_OWORD *)this + 28);
  *(_OWORD *)&v41[1] = *((_OWORD *)this + 27);
  long long v42 = v22;
  long long v43 = *((_OWORD *)this + 29);
  long long v23 = *(_OWORD *)((char *)this + 264);
  long long v24 = *(_OWORD *)((char *)this + 280);
  long long v25 = *(_OWORD *)((char *)this + 296);
  uint64_t v26 = *((void *)this + 39);
  *(void *)uint64_t v44 = *((void *)this + 60);
  v47[0] = v26;
  long long v46 = v25;
  long long v45 = v24;
  *(_OWORD *)&v44[8] = v23;
  __p[0] = *((void **)this + 53);
  long long v27 = *(_OWORD *)((char *)this + 408);
  long long v28 = *(_OWORD *)((char *)this + 376);
  long long v48 = *(_OWORD *)((char *)this + 392);
  long long v49 = v27;
  *(_OWORD *)&v47[1] = v28;
  uint64_t v29 = *((void *)this + 79);
  uint64_t v30 = *((void *)this + 80);
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  int v31 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  *(void *)&long long v52 = v29;
  *((void *)&v52 + 1) = v30;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  int v33 = 0;
  int v34 = 0;
  ims::analytics::CallEndEvent::create(a2, (const BambiCallSessionTerminationBaseEvent *)&v53, a3, a5, *((unsigned char *)this + 584), (const AnalyticsLogger::AnalyticsData *)&v35, &v33);
  (*(void (**)(_anonymous_namespace_::CallEndEventImpl *))(*(void *)v33 + 32))(v33);
  uint64_t v14 = AnalyticsLogger::logSessionTerminationEventAwd((xpc_object_t *)this, a2, &v53, (int)a3, a5);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (__p[1])
  {
    *(void **)&long long v51 = __p[1];
    operator delete(__p[1]);
  }
  xpc_release(object);
  return v14;
}

void sub_1C52B3BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AnalyticsLogger::AnalyticsData::~AnalyticsData((AnalyticsLogger::AnalyticsData *)va);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsLogger::logSessionTerminationEventAwd(xpc_object_t *this, const BambiCallSessionTerminationBaseEvent *a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (!v6)
  {
    unint64_t v11 = 0;
LABEL_8:
    uint64_t v16 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEventAwd - no call", 56);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v17 = 13;
    goto LABEL_9;
  }
  uint64_t v10 = *((void *)a2 + 2);
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v11 = std::__shared_weak_count::lock(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v11 || !v10) {
    goto LABEL_8;
  }
  uint64_t v12 = BambiCall::bambiClient((BambiCall *)v10);
  xpc_object_t v13 = *(std::__shared_weak_count **)(v10 + 368);
  if (v13 && (uint64_t v14 = std::__shared_weak_count::lock(v13)) != 0)
  {
    uint64_t v15 = *(void *)(v10 + 360) + 208;
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  else
  {
    uint64_t v15 = 208;
  }
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(v10 + 519) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v10 + 496), *(void *)(v10 + 504));
  }
  else {
    std::string __str = *(std::string *)(v10 + 496);
  }
  uint64_t v19 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Current call count is ", 22);
  *(unsigned char *)(v19 + 17) = 0;
  int v206 = 0;
  uint64_t v207 = 0;
  BambiClient::callCountExcludingCall(v12, &v206);
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" SIP callID=", 12);
  *(unsigned char *)(v19 + 17) = 0;
  unsigned int v199 = (const std::string *)(v10 + 472);
  ObfuscatedString::ObfuscatedString((uint64_t)&v206, (const std::string *)(v10 + 472));
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 56))(v19, &v206);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" handover ", 10);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v211 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v208) < 0) {
    operator delete(v206);
  }
  uint64_t v200 = *((void *)a2 + 6);
  uint64_t v20 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"AnalyticsLogger::logSessionTerminationEvent", 43);
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  bzero(&v207, 0x2B0uLL);
  int v206 = &unk_1F20BA2D8;
  long long v236 = 0u;
  int v237 = 0;
  long long v265 = 0u;
  int v266 = 0;
  long long v268 = 0u;
  int v269 = 0;
  long long v270 = 0u;
  long long v272 = 0u;
  int v273 = 0;
  awd::metrics::ATM_CallEndEvent::SharedCtor((awd::metrics::ATM_CallEndEvent *)&v206);
  v295 |= 2u;
  if (v208 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v208, &__str);
  if (a5)
  {
    int v21 = DWORD2(v270);
    if (DWORD2(v270) == HIDWORD(v270))
    {
      wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve((uint64_t)&v270, DWORD2(v270) + 1);
      int v21 = DWORD2(v270);
    }
    DWORD2(v270) = v21 + 1;
    *(unsigned char *)(v270 + v21) = 1;
  }
  if (MEMORY[0x1C878F160](this[81]) == MEMORY[0x1E4F14590])
  {
    long long v22 = this + 81;
    v300.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v300.__r_.__value_.__l.__size_ = (std::string::size_type)"has_redialed";
    if (xpc_dictionary_get_value(this[81], "has_redialed"))
    {
      DWORD2(v270) = 0;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v300, &v306);
      char v23 = xpc::dyn_cast_or_default();
      int v24 = DWORD2(v270);
      if (DWORD2(v270) == HIDWORD(v270))
      {
        wireless_diagnostics::google::protobuf::RepeatedField<BOOL>::Reserve((uint64_t)&v270, DWORD2(v270) + 1);
        int v24 = DWORD2(v270);
      }
      DWORD2(v270) = v24 + 1;
      *(unsigned char *)(v270 + v24) = v23;
      xpc_release(v306.__r_.__value_.__l.__data_);
    }
    v300.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v300.__r_.__value_.__l.__size_ = (std::string::size_type)"is_branded_call";
    if (xpc_dictionary_get_value(*v22, "is_branded_call"))
    {
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v300, &v306);
      char v25 = xpc::dyn_cast_or_default();
      v296.i32[0] |= 0x800000u;
      char v232 = v25;
      xpc_release(v306.__r_.__value_.__l.__data_);
    }
    v300.__r_.__value_.__r.__words[0] = (std::string::size_type)(this + 81);
    v300.__r_.__value_.__l.__size_ = (std::string::size_type)"is_image_displayed";
    if (xpc_dictionary_get_value(*v22, "is_image_displayed"))
    {
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v300, &v306);
      char v26 = xpc::dyn_cast_or_default();
      v296.i32[0] |= 0x1000000u;
      char v233 = v26;
      xpc_release(v306.__r_.__value_.__l.__data_);
    }
  }
  char v27 = *(unsigned char *)(v15 + 1838);
  int v28 = v295 | 0x10;
  v295 |= 0x10u;
  BYTE5(__p) = v27;
  uint64_t v29 = *(void *)(v10 + 392);
  if (v29)
  {
    char v30 = SipPreconditions::preconditionsSatisfiedInAnyFork((SipPreconditions *)(v29 + 1432));
    int v28 = v295;
  }
  else
  {
    char v30 = 0;
  }
  int v295 = v28 | 0x20;
  BYTE6(__p) = v30;
  BambiCall::firstReportedAccessNetwork((BambiCall *)v10, (uint64_t)&v300);
  v295 |= 0x20000u;
  if (v213 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v213, &v300);
  if (v302 < 0) {
    operator delete(v301);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  int v31 = *(std::__shared_weak_count **)(v10 + 368);
  if (v31)
  {
    int v32 = std::__shared_weak_count::lock(v31);
    if (v32) {
      uint64_t v33 = *(void *)(v10 + 360);
    }
    else {
      uint64_t v33 = 0;
    }
  }
  else
  {
    uint64_t v33 = 0;
    int v32 = 0;
  }
  if (*(char *)(v33 + 3255) < 0) {
    uint64_t v34 = *(void *)(v33 + 3240);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v33 + 3255);
  }
  long long v35 = (const std::string *)(v33 + 3160);
  if (v34)
  {
    int8x16_t v36 = (const std::string *)(v33 + 3232);
    if (*(char *)(v33 + 3279) < 0 ? *(void *)(v33 + 3264) : *(unsigned __int8 *)(v33 + 3279)) {
      long long v35 = v36;
    }
  }
  v295 |= 0x10000u;
  if (v212 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v212, v35);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  char v38 = *(unsigned char *)(v15 + 1839);
  v295 |= 0x80u;
  char v214 = v38;
  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = 0uLL;
  int v39 = BambiClient::callCountExcludingCall(v12, &v300);
  v296.i32[0] |= 0x400u;
  int v225 = v39;
  long long v40 = *(std::__shared_weak_count **)(v10 + 368);
  if (v40
    && (int v41 = std::__shared_weak_count::lock(v40)) != 0
    && (uint64_t v42 = *(void *)(v10 + 360), std::__shared_weak_count::__release_shared[abi:ne180100](v41), v42))
  {
    long long v43 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v10 + 368));
    int v44 = *(_DWORD *)(*(void *)(v10 + 360) + 4100);
    v298 |= 0x20u;
    int v293 = v44;
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    long long v45 = *(std::__shared_weak_count **)(v10 + 368);
    if (v45)
    {
      long long v45 = std::__shared_weak_count::lock(v45);
      long long v46 = v45;
      if (v45) {
        long long v45 = *(std::__shared_weak_count **)(v10 + 360);
      }
    }
    else
    {
      long long v46 = 0;
    }
    char isMultisimEnabled = SipStack::isMultisimEnabled((SipStack *)v45);
    v298 |= 0x40u;
    char v290 = isMultisimEnabled;
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
  }
  else
  {
    int v293 = 0;
    v298 |= 0x60u;
    char v290 = 0;
  }
  if (*(unsigned char *)(v10 + 752) || *(unsigned char *)(v10 + 753))
  {
    int v47 = 3;
  }
  else if (*(void *)(v10 + 520) || (*(unsigned int (**)(uint64_t))(*(void *)v10 + 120))(v10))
  {
    int v47 = 2;
  }
  else
  {
    int v47 = 0;
  }
  v295 |= 0x108u;
  LODWORD(__p) = v47;
  int v210 = 1;
  if (a4 == 255)
  {
    uint64_t v48 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)" Conference terminated ", 23);
    *(unsigned char *)(v48 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v48 + 17) = 0;
    v295 |= 0x100u;
    int v210 = 2;
  }
  long long v49 = *(std::__shared_weak_count **)(v10 + 368);
  if (v49)
  {
    uint64_t v50 = std::__shared_weak_count::lock(v49);
    if (v50) {
      long long v51 = *(uint64_t **)(v10 + 360);
    }
    else {
      long long v51 = 0;
    }
  }
  else
  {
    long long v51 = 0;
    uint64_t v50 = 0;
  }
  LODWORD(v304[0]) = 0;
  v303[0] = 0;
  memset(&v306, 0, sizeof(v306));
  LODWORD(v304[0]) = ims::strToUint32(v51 + 467, 0);
  HIDWORD(v303[0]) = ims::strToUint32(v51 + 464, 0);
  long long v52 = (ims::AccessNetworks *)(v51 + 395);
  ims::AccessNetworks::cellular((ims::AccessNetworks *)(v51 + 395), (uint64_t)&v300);
  ims::AccessNetwork::extractCellularInfo(&v300, (int *)v303 + 1, (int *)v304, (int *)v303, (uint64_t)&v306);
  if (v302 < 0) {
    operator delete(v301);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  v295 |= 0xC00000u;
  int v217 = HIDWORD(v303[0]);
  int v218 = (int)v304[0];
  int v53 = v298;
  v298 |= 4u;
  int v292 = v303[0];
  BOOL isIwlanOverCellular = ims::AccessNetworks::isIwlanOverCellular(v52);
  int v298 = v53 | 0x84;
  BOOL v294 = isIwlanOverCellular;
  std::string::size_type size = HIBYTE(v306.__r_.__value_.__r.__words[2]);
  char v56 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
  if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v306.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v298 = v53 | 0x8C;
    if (v291 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v291, &v306);
    char v56 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
  }
  if (v56 < 0) {
    operator delete(v306.__r_.__value_.__l.__data_);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (*(unsigned char *)(v10 + 1496))
  {
    if (*(void *)(v10 + 1696))
    {
      uint64_t v57 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"Call setup delay is ", 20);
      *(unsigned char *)(v57 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v57 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)" ms", 3);
      *(unsigned char *)(v57 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)" reason is ", 11);
      *(unsigned char *)(v57 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v57 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v57 + 17) = 0;
      int v58 = *(_DWORD *)(v10 + 1696) - *(_DWORD *)(v10 + 1712);
      v296.i32[0] |= 0x2000u;
      int v227 = v58;
    }
    else
    {
      uint64_t v59 = *(void *)(v10 + 432);
      if (v59 >= 1)
      {
        int v60 = v59 - *(_DWORD *)(v10 + 424);
        v296.i32[0] |= 0x2000u;
        int v227 = v60;
        uint64_t v61 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
        (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"Call setup delay was ", 21);
        *(unsigned char *)(v61 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v61 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" ms", 3);
        *(unsigned char *)(v61 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" reason is ", 11);
        *(unsigned char *)(v61 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v61 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v61 + 17) = 0;
      }
    }
  }
  int v62 = *((unsigned __int16 *)this + 245);
  unsigned int v63 = *((unsigned __int16 *)this + 244);
  v295 |= 0x82000000;
  int v220 = v62;
  unsigned int v219 = v63;
  if (v63 >= 6) {
    __assert_rtn("set_codec", "CATM.pb.h", 15455, "::awd::metrics::enum_codec_type_IsValid(value)");
  }
  v296.i32[1] |= 0x2000000u;
  unsigned int v264 = v63;
  int v64 = *(std::__shared_weak_count **)(v10 + 368);
  if (v64)
  {
    int v64 = std::__shared_weak_count::lock(v64);
    int v65 = v64;
    if (v64) {
      int v64 = *(std::__shared_weak_count **)(v10 + 360);
    }
  }
  else
  {
    int v65 = 0;
  }
  int v66 = (ImsPrefs *)SipStack::prefs((SipStack *)v64);
  PacketAlignmentAMRNBKey = (void **)ImsPrefs::getPacketAlignmentAMRNBKey(v66);
  ImsPrefs::stringValue(v66, PacketAlignmentAMRNBKey);
  BOOL v68 = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v204) == 0;
  v296.i32[0] |= 1u;
  BOOL v216 = v68;
  if (v205 < 0) {
    operator delete(v204);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  BOOL v69 = *(std::__shared_weak_count **)(v10 + 368);
  if (v69)
  {
    BOOL v69 = std::__shared_weak_count::lock(v69);
    BOOL v70 = v69;
    if (v69) {
      BOOL v69 = *(std::__shared_weak_count **)(v10 + 360);
    }
  }
  else
  {
    BOOL v70 = 0;
  }
  BOOL v71 = (ImsPrefs *)SipStack::prefs((SipStack *)v69);
  uint64_t v72 = (void **)ImsPrefs::getPacketAlignmentAMRNBKey(v71);
  ImsPrefs::stringValue(v71, v72);
  BOOL v73 = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v202) == 0;
  v296.i32[1] |= 0x1000000u;
  BOOL v263 = v73;
  if (v203 < 0) {
    operator delete(v202);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  char v74 = *(unsigned char *)(v10 + 1496);
  int v75 = v295;
  v295 |= 4u;
  BYTE4(__p) = v74;
  char v76 = *((unsigned char *)this + 584);
  int v77 = v297;
  v297 |= 0x40u;
  char v261 = v76;
  if (*((unsigned char *)this + 144))
  {
    if (*((_DWORD *)this + 109))
    {
LABEL_117:
      int v78 = 1;
      goto LABEL_120;
    }
  }
  else if (*((_DWORD *)this + 95))
  {
    goto LABEL_117;
  }
  int v78 = 0;
LABEL_120:
  uint64_t v79 = *(void *)(v10 + 432);
  if (v79 >= 1)
  {
    uint64_t v80 = *a3;
    uint64_t v226 = *a3 - v79;
    int v295 = v75 | 0x1000004;
    char v215 = 1;
    int v267 = 1;
    int8x8_t v296 = vorr_s8(v296, (int8x8_t)0x1000000000001100);
    char v231 = 1;
    int v278 = v80 - *((_DWORD *)this + 136);
    int v81 = v80 - *((_DWORD *)this + 128);
    int v297 = v77 | 0xC0040;
    int v277 = v81;
    uint64_t v82 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"Call end times: duration is ", 28);
    *(unsigned char *)(v82 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)" time since of last recv ", 25);
    *(unsigned char *)(v82 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)" time sicne last send ", 22);
    *(unsigned char *)(v82 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)" seconds", 8);
    *(unsigned char *)(v82 + 17) = 0;
    if (v78) {
      BOOL v83 = " has ";
    }
    else {
      BOOL v83 = " no ";
    }
    if (v78) {
      uint64_t v84 = 5;
    }
    else {
      uint64_t v84 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)v83, v84);
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)" Remote RTCP in ", 16);
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"local hold is ", 14);
    *(unsigned char *)(v82 + 17) = 0;
    int v85 = *(_DWORD *)(v10 + 448);
    if (v85 == 3) {
      std::string v86 = " yes ";
    }
    else {
      std::string v86 = " no ";
    }
    if (v85 == 3) {
      uint64_t v87 = 5;
    }
    else {
      uint64_t v87 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)v86, v87);
    *(unsigned char *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)"remote hold is ", 15);
    *(unsigned char *)(v82 + 17) = 0;
    int v88 = *(_DWORD *)(v10 + 452);
    if (v88 <= 2) {
      long long v89 = " no ";
    }
    else {
      long long v89 = " yes ";
    }
    if (v88 <= 2) {
      uint64_t v90 = 4;
    }
    else {
      uint64_t v90 = 5;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v82 + 8), (uint64_t)v89, v90);
    *(unsigned char *)(v82 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v82 + 17) = 0;
    uint64_t v91 = *a3;
    xpc_object_t v92 = this[64];
    if (*a3 - (uint64_t)v92 > 9 || (xpc_object_t v93 = *(xpc_object_t *)(v10 + 432), v93 == v92))
    {
      xpc_object_t v94 = this[65];
      int v95 = 2;
      if (v91 - (uint64_t)v94 <= 9)
      {
        if (*(xpc_object_t *)(v10 + 432) == v94) {
          int v95 = 2;
        }
        else {
          int v95 = 3;
        }
      }
    }
    else if (!v78 || (v107 = this[65], int v95 = 4, v107 != v93) && v91 - (uint64_t)v107 < 10)
    {
LABEL_146:
      unsigned int v96 = *((_DWORD *)this + 95);
      if (v96)
      {
        uint64_t v97 = (unsigned int *)this + 95;
        int v279 = v91 - *((_DWORD *)this + 134);
        int v98 = v91 - *((_DWORD *)this + 130);
        v297 |= 0x120000u;
        int v276 = v98;
LABEL_154:
        unint64_t v100 = (unint64_t)this[35];
        if (v100)
        {
          unint64_t v101 = *((unsigned int *)this + 103) / v100;
          v296.i32[0] |= 0x40000u;
          int v234 = v101;
          uint64_t v102 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
          (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v102);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)" volteRtcpRemote.packetLost ", 28);
          *(unsigned char *)(v102 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v102 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)" volteRtcpLocal.senderCount = ", 30);
          *(unsigned char *)(v102 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v102 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v102 + 17) = 0;
          unsigned int v96 = *v97;
        }
        else
        {
          v295 |= 0x1000000u;
          char v215 = 0;
        }
        int v235 = *((_DWORD *)this + 100) / v96;
        __int32 v105 = v296.i32[0] | 0x180000;
        int v106 = *((_DWORD *)this + 94) / v96;
        goto LABEL_178;
      }
      goto LABEL_156;
    }
    v296.i32[1] |= 0x10000000u;
    int v267 = v95;
    goto LABEL_146;
  }
  uint64_t v99 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
  (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v99);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v99 + 8), (uint64_t)" Call ", 6);
  *(unsigned char *)(v99 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v300, v199);
  (*(void (**)(uint64_t, std::string *))(*(void *)v99 + 56))(v99, &v300);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v99 + 8), (uint64_t)" was not set up", 15);
  *(unsigned char *)(v99 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v99 + 17) = 0;
  if (v302 < 0) {
    operator delete(v301);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  v296.i32[0] |= 0x100u;
  char v231 = 0;
  unsigned int v96 = *((_DWORD *)this + 95);
  if (v96)
  {
    uint64_t v97 = (unsigned int *)this + 95;
    goto LABEL_154;
  }
LABEL_156:
  unsigned int v103 = *((_DWORD *)this + 67);
  if (!v103) {
    goto LABEL_179;
  }
  if (!this[39])
  {
    int v104 = 3;
    goto LABEL_174;
  }
  if (*((_DWORD *)this + 96) && !this[53])
  {
    int v104 = 4;
LABEL_174:
    v295 |= 0x1000000u;
    char v215 = 0;
    if (!this[35]) {
      int v104 = 2;
    }
    v296.i32[1] |= 0x10000000u;
    int v267 = v104;
  }
  __int32 v105 = v296.i32[0] | 0x100000;
  int v106 = *((_DWORD *)this + 66) / v103;
LABEL_178:
  v296.i32[0] = v105;
  int v238 = v106;
LABEL_179:
  unsigned int v109 = *((_DWORD *)this + 109);
  if (v109)
  {
    unint64_t v110 = (unint64_t)this[42];
    if (v110)
    {
      unint64_t v111 = *((unsigned int *)this + 117) / v110;
      v297 |= 0x800000u;
      int v282 = v111;
      uint64_t v112 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v112 + 8), (uint64_t)" volteRtcpRemote.packetLost ", 28);
      *(unsigned char *)(v112 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v112 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v112 + 8), (uint64_t)" volteRtcpLocal.senderCount = ", 30);
      *(unsigned char *)(v112 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v112 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v112 + 17) = 0;
      unsigned int v109 = *((_DWORD *)this + 109);
    }
    else
    {
      v295 |= 0x1000000u;
      char v215 = 0;
    }
    int v287 = *((_DWORD *)this + 114) / v109;
    int v115 = v297 | 0x3000000;
    int v116 = *((_DWORD *)this + 108) / v109;
    goto LABEL_194;
  }
  unsigned int v113 = *((_DWORD *)this + 81);
  if (!v113) {
    goto LABEL_195;
  }
  int v280 = *((_DWORD *)this + 89) / v113;
  int v281 = *((_DWORD *)this + 86) / v113;
  if (!this[46])
  {
    int v114 = 3;
    goto LABEL_190;
  }
  if (*((_DWORD *)this + 110) && !this[60])
  {
    int v114 = 4;
LABEL_190:
    v295 |= 0x1000000u;
    char v215 = 0;
    if (!this[42]) {
      int v114 = 2;
    }
    v296.i32[1] |= 0x10000000u;
    int v267 = v114;
  }
  int v115 = v297 | 0x2600000;
  int v116 = *((_DWORD *)this + 80) / v113;
LABEL_194:
  int v297 = v115;
  int v288 = v116;
LABEL_195:
  int v223 = 0;
  char v260 = *((unsigned char *)this + 492);
  v296.i32[0] |= 0x2000240u;
  char v230 = 0;
  v298 |= 2u;
  int v289 = 2;
  int v117 = *(_DWORD *)(v10 + 1816);
  if (v117) {
    int v289 = v117 != 2;
  }
  char v118 = (_OWORD *)((char *)a2 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v118;
    v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v119 = v300.__r_.__value_.__l.__size_;
    operator delete(v300.__r_.__value_.__l.__data_);
    if (!v119) {
      goto LABEL_236;
    }
  }
  else if (!*((unsigned char *)&v300.__r_.__value_.__s + 23))
  {
    goto LABEL_236;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v118;
    v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
  }
  v296.i32[0] |= 0x80u;
  if (v224 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v224, &v300);
  int v198 = v11;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  char v120 = v78;
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v118;
    v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
  }
  int64_t v121 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  int v122 = SHIBYTE(v300.__r_.__value_.__r.__words[2]);
  uint64_t v123 = (void *)v300.__r_.__value_.__r.__words[0];
  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    char v124 = &v300;
  }
  else
  {
    int64_t v121 = v300.__r_.__value_.__l.__size_;
    char v124 = (std::string *)v300.__r_.__value_.__r.__words[0];
  }
  if (v121 >= 16)
  {
    int v125 = (char *)v124 + v121;
    std::string v126 = v124;
    do
    {
      char v127 = (char *)memchr(v126, 82, v121 - 15);
      if (!v127) {
        break;
      }
      if (*(void *)v127 == 0x504354522D505452 && *((void *)v127 + 1) == 0x74756F656D695420)
      {
        if (v127 == v125 || v127 - (char *)v124 == -1 || (uint64_t)this[68] < 1) {
          break;
        }
        int v129 = *((unsigned __int8 *)a2 + 56);
        if (v122 < 0) {
          operator delete(v123);
        }
        LOBYTE(v78) = v120;
        unint64_t v11 = v198;
        if (!v129)
        {
          int v130 = *(_DWORD *)a3 - *((_DWORD *)this + 136);
          v297 |= 0x1000u;
          int v271 = v130;
        }
        goto LABEL_236;
      }
      std::string v126 = (std::string *)(v127 + 1);
      int64_t v121 = v125 - (char *)v126;
    }
    while (v125 - (char *)v126 >= 16);
  }
  if (v122 < 0) {
    operator delete(v123);
  }
  LOBYTE(v78) = v120;
  unint64_t v11 = v198;
LABEL_236:
  uint64_t v131 = *(void *)(v10 + 1736);
  if (v131)
  {
    LODWORD(v131) = *(_DWORD *)(v10 + 1744) - v131;
    v296.i32[0] |= 0x8000u;
    int v229 = v131;
    LOBYTE(v131) = 1;
  }
  v297 |= 0x200u;
  char v283 = v131;
  if (!v200)
  {
    uint64_t v134 = *(void *)(v10 + 432);
    if (v134 >= 1)
    {
      int v135 = v134 - *(_DWORD *)(v10 + 424);
      v296.i32[0] |= 0x4000u;
      int v228 = v135;
    }
    int v136 = *((_DWORD *)this + 44);
    if (v136)
    {
      v296.i32[0] |= 0x4000000u;
      int v239 = v136;
    }
    int v137 = *((_DWORD *)this + 45);
    if (v137)
    {
      v296.i32[0] |= 0x8000000u;
      int v240 = v137;
    }
    int v138 = *((_DWORD *)this + 46);
    if (v138)
    {
      v296.i32[0] |= 0x10000000u;
      int v241 = v138;
    }
    int v139 = *((_DWORD *)this + 47);
    if (v139)
    {
      v296.i32[0] |= 0x20000000u;
      int v242 = v139;
    }
    int v140 = *((_DWORD *)this + 48);
    if (v140)
    {
      v296.i32[0] |= 0x40000000u;
      int v243 = v140;
    }
    int v141 = *((_DWORD *)this + 49);
    if (v141)
    {
      v296.i32[0] |= 0x80000000;
      int v244 = v141;
    }
    int v142 = *((_DWORD *)this + 50);
    if (v142)
    {
      v296.i32[1] |= 1u;
      int v245 = v142;
    }
    int v143 = *((_DWORD *)this + 51);
    if (v143)
    {
      v296.i32[1] |= 2u;
      int v246 = v143;
    }
    int v144 = *((_DWORD *)this + 52);
    if (v144)
    {
      v296.i32[1] |= 4u;
      int v247 = v144;
    }
    int v145 = *((_DWORD *)this + 53);
    if (v145)
    {
      v296.i32[1] |= 8u;
      int v248 = v145;
    }
    int v146 = *((_DWORD *)this + 54);
    if (v146)
    {
      v296.i32[1] |= 0x10u;
      int v249 = v146;
    }
    int v147 = *((_DWORD *)this + 55);
    if (v147)
    {
      v296.i32[1] |= 0x20u;
      int v250 = v147;
    }
    int v148 = *((_DWORD *)this + 56);
    if (v148)
    {
      v296.i32[1] |= 0x40u;
      int v251 = v148;
    }
    int v149 = *((_DWORD *)this + 57);
    if (v149)
    {
      v296.i32[1] |= 0x80u;
      int v252 = v149;
    }
    int v150 = *((_DWORD *)this + 58);
    if (v150)
    {
      v296.i32[1] |= 0x100u;
      int v253 = v150;
    }
    int v151 = *((_DWORD *)this + 59);
    if (v151)
    {
      v296.i32[1] |= 0x200u;
      int v254 = v151;
    }
    int v152 = *((_DWORD *)this + 60);
    if (v152)
    {
      v296.i32[1] |= 0x400u;
      int v255 = v152;
    }
    int v153 = *((_DWORD *)this + 61);
    if (v153)
    {
      v296.i32[1] |= 0x800u;
      int v256 = v153;
    }
    int v154 = *((_DWORD *)this + 62);
    if (v154)
    {
      v296.i32[1] |= 0x1000u;
      int v257 = v154;
    }
    int v155 = *((_DWORD *)this + 63);
    if (v155)
    {
      v296.i32[1] |= 0x2000u;
      int v258 = v155;
    }
    int v156 = *((_DWORD *)this + 64);
    if (v156)
    {
      v296.i32[1] |= 0x4000u;
      int v259 = v156;
    }
    uint64_t v157 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v157);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v157 + 8), (uint64_t)" callend reason is  ", 20);
    *(unsigned char *)(v157 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v157 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v157 + 64))(v157, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v157 + 17) = 0;
    uint64_t v158 = (_OWORD *)((char *)a2 + 64);
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
    }
    else
    {
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v158;
      v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 10);
    }
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v163 = v300.__r_.__value_.__l.__size_;
      operator delete(v300.__r_.__value_.__l.__data_);
      if (!v163) {
        goto LABEL_314;
      }
    }
    else if (!*((unsigned char *)&v300.__r_.__value_.__s + 23))
    {
      goto LABEL_314;
    }
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
    }
    else
    {
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v158;
      v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 10);
    }
    v296.i32[0] |= 0x80u;
    if (v224 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v224, &v300);
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v300.__r_.__value_.__l.__data_);
    }
LABEL_314:
    int v164 = (_OWORD *)((char *)a2 + 88);
    if (*((char *)a2 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
    }
    else
    {
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v164;
      v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 13);
    }
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v165 = v300.__r_.__value_.__l.__size_;
      operator delete(v300.__r_.__value_.__l.__data_);
      if (!v165) {
        goto LABEL_347;
      }
    }
    else if (!*((unsigned char *)&v300.__r_.__value_.__s + 23))
    {
      goto LABEL_347;
    }
    uint64_t v166 = SDWORD2(v268);
    int v167 = HIDWORD(v268);
    if (SDWORD2(v268) >= SHIDWORD(v268))
    {
      if (HIDWORD(v268) == v269)
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v268);
        int v167 = HIDWORD(v268);
      }
      HIDWORD(v268) = v167 + 1;
      operator new();
    }
    ++DWORD2(v268);
    uint64_t v168 = *(void *)(v268 + 8 * v166);
    if (*((char *)a2 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
    }
    else
    {
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v164;
      v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 13);
    }
    *(_DWORD *)(v168 + 48) |= 1u;
    uint64_t v169 = *(std::string **)(v168 + 8);
    if (v169 == (std::string *)MEMORY[0x1E4FBA920]) {
      operator new();
    }
    std::string::operator=(v169, &v300);
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v300.__r_.__value_.__l.__data_);
    }
    int v170 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(v168 + 48) |= 2u;
    *(_DWORD *)(v168 + 40) = v170;
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
    }
    else
    {
      *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v158;
      v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 10);
    }
    if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((unsigned char *)&v300.__r_.__value_.__s + 23)) {
        goto LABEL_347;
      }
LABEL_340:
      if (*((char *)a2 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(&v300, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
      }
      else
      {
        *(_OWORD *)&v300.__r_.__value_.__l.__data_ = *v158;
        v300.__r_.__value_.__r.__words[2] = *((void *)a2 + 10);
      }
      *(_DWORD *)(v168 + 48) |= 4u;
      uint64_t v172 = *(std::string **)(v168 + 16);
      if (v172 == (std::string *)MEMORY[0x1E4FBA920]) {
        operator new();
      }
      std::string::operator=(v172, &v300);
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v300.__r_.__value_.__l.__data_);
      }
      goto LABEL_347;
    }
    std::string::size_type v171 = v300.__r_.__value_.__l.__size_;
    operator delete(v300.__r_.__value_.__l.__data_);
    if (v171) {
      goto LABEL_340;
    }
LABEL_347:
    long long v174 = (char *)this[19];
    uint64_t v173 = (char *)this[20];
    int v175 = *((_DWORD *)this + 155);
    v297 |= 0x14000u;
    int v275 = v175;
    int v274 = (unint64_t)(v173 - v174) >> 3;
    if (v173 > v174)
    {
      do
      {
        uint64_t v176 = SDWORD2(v272);
        int v177 = HIDWORD(v272);
        if (SDWORD2(v272) >= SHIDWORD(v272))
        {
          if (HIDWORD(v272) == v273)
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v272);
            int v177 = HIDWORD(v272);
          }
          HIDWORD(v272) = v177 + 1;
          operator new();
        }
        ++DWORD2(v272);
        uint64_t v178 = *(void *)(v272 + 8 * v176);
        int v179 = *(_DWORD *)(v178 + 20);
        *(_DWORD *)(v178 + 8) = *(_DWORD *)v174;
        char v180 = v174[4];
        *(_DWORD *)(v178 + 20) = v179 | 3;
        *(unsigned char *)(v178 + 12) = v180;
        uint64_t v181 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
        (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v181);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v181 + 8), (uint64_t)"Submitting handover to AWD ", 27);
        *(unsigned char *)(v181 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v181 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v181 + 8), (uint64_t)" toWiFi: ", 9);
        *(unsigned char *)(v181 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v181 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v181 + 64))(v181, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v181 + 17) = 0;
        uint64_t v173 = (char *)this[20];
        v174 += 8;
      }
      while (v174 < v173);
      long long v174 = (char *)this[19];
    }
    if (v173 != v174) {
      this[20] = v174;
    }
    AnalyticsLogger::fillCallEndMetricFromEvent((AnalyticsLogger *)this, (awd::metrics::ATM_CallEndEvent *)&v206, a2, *a3);
    int v182 = (awd::metrics *)*((unsigned int *)this + 65);
    if (!(v182 >> 16))
    {
      __int32 v183 = v296.i32[0];
      v296.i32[0] |= 0x10u;
      int v221 = 6;
      if (awd::metrics::RESPONSE_Code_IsValid(v182))
      {
        v296.i32[0] = v183 | 0x30;
        unsigned int v222 = v182;
      }
      uint64_t v184 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
      (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v184);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v184 + 8), (uint64_t)" reason rtp error code ", 23);
      *(unsigned char *)(v184 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v184 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v184 + 64))(v184, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v184 + 17) = 0;
    }
    goto LABEL_361;
  }
  if (*(_DWORD *)(v200 + 88))
  {
    uint64_t v132 = (*((uint64_t (**)(xpc_object_t *))*this + 8))(this);
    (*((void (**)(xpc_object_t *, uint64_t))*this + 2))(this, v132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v132 + 8), (uint64_t)" Call ", 6);
    *(unsigned char *)(v132 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v300, v199);
    (*(void (**)(uint64_t, std::string *))(*(void *)v132 + 56))(v132, &v300);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v132 + 8), (uint64_t)" IMS code ", 10);
    *(unsigned char *)(v132 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v132 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v132 + 8), (uint64_t)" event reason ", 14);
    *(unsigned char *)(v132 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v132 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v132 + 64))(v132, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v132 + 17) = 0;
    if (v302 < 0) {
      operator delete(v301);
    }
    if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v300.__r_.__value_.__l.__data_);
    }
    unsigned int v133 = *(_DWORD *)(v200 + 88);
    if (awd::metrics::RESPONSE_Code_IsValid((awd::metrics *)v133))
    {
      v296.i32[0] |= 0x20u;
      unsigned int v222 = v133;
    }
    else
    {
      v296.i32[1] |= 0x400000u;
      unsigned int v262 = v133;
    }
  }
  int v159 = (awd::metrics *)*((unsigned int *)this + 65);
  if (v159 >> 16)
  {
    AnalyticsLogger::fillCallEndMetricFromEvent((AnalyticsLogger *)this, (awd::metrics::ATM_CallEndEvent *)&v206, a2, *a3);
  }
  else
  {
    __int32 v160 = v296.i32[0];
    v296.i32[0] |= 0x10u;
    int v221 = 6;
    if (awd::metrics::RESPONSE_Code_IsValid(v159))
    {
      v296.i32[0] = v160 | 0x30;
      unsigned int v222 = v159;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v161 = *(void *)(v10 + 432);
    if (v161 < 1 || time(0) - v161 <= 10) {
      int v162 = 1;
    }
    else {
      int v162 = 2;
    }
    v296.i32[0] |= 0x200u;
    int v223 = v162;
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
LABEL_361:
  int v185 = *(std::__shared_weak_count **)(v10 + 368);
  if (v185)
  {
    int v185 = std::__shared_weak_count::lock(v185);
    int v186 = v185;
    if (v185) {
      int v185 = *(std::__shared_weak_count **)(v10 + 360);
    }
  }
  else
  {
    int v186 = 0;
  }
  unsigned int v187 = (ImsPrefs *)SipStack::prefs((SipStack *)v185);
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v187);
  int v189 = ImsPrefs::intValue(v187, RTCPIntervalSecondsKey);
  if (v186) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v186);
  }
  int v190 = *(std::__shared_weak_count **)(v10 + 368);
  if (v190)
  {
    int v190 = std::__shared_weak_count::lock(v190);
    v191 = v190;
    if (v190) {
      int v190 = *(std::__shared_weak_count **)(v10 + 360);
    }
  }
  else
  {
    v191 = 0;
  }
  int v192 = (ImsPrefs *)SipStack::prefs((SipStack *)v190);
  EnableRTCPExtendedReportsKey = (void **)ImsPrefs::getEnableRTCPExtendedReportsKey(v192);
  char v194 = ImsPrefs::BOOLValue(v192, EnableRTCPExtendedReportsKey);
  if (v191) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v191);
  }
  if (*((_DWORD *)this + 67) + *((_DWORD *)this + 95) + *((_DWORD *)this + 109) + *((_DWORD *)this + 81)) {
    BOOL v195 = v189 <= 0;
  }
  else {
    BOOL v195 = 1;
  }
  char v196 = !v195;
  char v284 = v196;
  char v285 = v194;
  v297 |= 0x38000000u;
  char v286 = v78;
  this[78] = 0;
  if (v222) {
    uint64_t v17 = v222;
  }
  else {
    uint64_t v17 = v262;
  }
  *(_OWORD *)((char *)v303 + 4) = 0uLL;
  *(void *)((char *)&v303[2] + 4) = 0;
  memset(&v300, 0, sizeof(v300));
  (*((void (**)(std::string *__return_ptr, void **))v206 + 2))(&v300, &v206);
  memset(&v306, 0, sizeof(v306));
  std::string::basic_string[abi:ne180100]<0>(v304, ".");
  ims::tokenize(&v300, (uint64_t *)&v306, (char *)v304);
  if (v305 < 0) {
    operator delete(v304[0]);
  }
  if (v306.__r_.__value_.__l.__size_ - v306.__r_.__value_.__r.__words[0] == 72)
  {
    if (*(char *)(v306.__r_.__value_.__r.__words[0] + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)v303 + 4), *(const std::string::value_type **)(v306.__r_.__value_.__r.__words[0] + 48), *(void *)(v306.__r_.__value_.__r.__words[0] + 56));
    }
    else
    {
      *(_OWORD *)((char *)v303 + 4) = *(_OWORD *)(v306.__r_.__value_.__r.__words[0] + 48);
      *(void *)((char *)&v303[2] + 4) = *(void *)(v306.__r_.__value_.__r.__words[0] + 64);
    }
  }
  else
  {
    *(std::string *)((char *)v303 + 4) = v300;
    memset(&v300, 0, sizeof(v300));
  }
  v304[0] = (void **)&v306;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v304);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  WISPostMetric();
  std::string::basic_string[abi:ne180100]<0>(&v300, "sendDiagnosticData");
  std::string::basic_string[abi:ne180100]<0>(&v306, "");
  uint64_t v197 = ims::debug((uint64_t)&v300, (uint64_t)&v306);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v197 + 8), (uint64_t)" Submitted ", 11);
  *(unsigned char *)(v197 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v197 + 32))(v197, (char *)v303 + 4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v197 + 64))(v197, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v197 + 17) = 0;
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v306.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  if (SBYTE3(v303[3]) < 0) {
    operator delete(*(void **)((char *)v303 + 4));
  }
  *((_DWORD *)this + 65) = 0x10000;
  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent((awd::metrics::ATM_CallEndEvent *)&v206);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_9:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v17;
}

void sub_1C52B63B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  awd::metrics::ATM_CallEndEvent::~ATM_CallEndEvent((awd::metrics::ATM_CallEndEvent *)va);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

void AnalyticsLogger::AnalyticsData::~AnalyticsData(AnalyticsLogger::AnalyticsData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  xpc_release(*((xpc_object_t *)this + 4));
  *((void *)this + 4) = 0;
}

uint64_t non-virtual thunk to'AnalyticsLogger::logSessionTerminationEvent(AnalyticsLogger *this, const BambiCallSessionTerminationBaseEvent *a2, const uint64_t *a3, unsigned __int8 a4, int a5)
{
  return AnalyticsLogger::logSessionTerminationEvent((AnalyticsLogger *)((char *)this - 136), a2, a3, 0, a5);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

__n128 BambiCall::firstReportedAccessNetwork@<Q0>(BambiCall *this@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)this + 1527) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 188), *((void *)this + 189));
  }
  else
  {
    *(_OWORD *)a2 = *((_OWORD *)this + 94);
    *(void *)(a2 + 16) = *((void *)this + 190);
  }
  uint64_t v4 = (std::string *)(a2 + 24);
  if (*((char *)this + 1551) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 191), *((void *)this + 192));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 1528);
    *(void *)(a2 + 40) = *((void *)this + 193);
  }
  __n128 result = *((__n128 *)this + 97);
  *(__n128 *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 64) = *((unsigned char *)this + 1568);
  return result;
}

void sub_1C52B688C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AnalyticsLogger::logRemoteRTCPRRPacket(AnalyticsLogger *this, const RTCPRRPacket *a2, int a3)
{
  *((void *)this + 67) = time(0);
  if (*((unsigned char *)this + 144)) {
    uint64_t v6 = (char *)this + 432;
  }
  else {
    uint64_t v6 = (char *)this + 376;
  }
  time_t v7 = AnalyticsLogger::processRTCPRRPacket(this, (uint64_t)a2, a3, (uint64_t)v6);
  if (!v7) {
    time_t v7 = *((void *)this + 65);
  }
  *((void *)this + 65) = v7;
  uint64_t v8 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" rtcp remote RR in ", 19);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  return result;
}

time_t AnalyticsLogger::processRTCPRRPacket(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  ++*(_DWORD *)(a4 + 4);
  uint64_t v6 = *(void *)(a2 + 32);
  if (-1227133513 * ((unint64_t)(*(void *)(a2 + 40) - v6) >> 2))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    time_t v11 = 0;
    do
    {
      if (!v9 && *(_DWORD *)(a4 + 4) == 1) {
        *(void *)(a4 + 40) = *(unsigned int *)(v6 + 12);
      }
      *(_DWORD *)(a4 + 36) += *(_DWORD *)(v6 + v9 + 8);
      unsigned int v12 = *(_DWORD *)(v6 + v9 + 16);
      if (*(_DWORD *)(a4 + 28) < v12) {
        *(_DWORD *)(a4 + 28) = v12;
      }
      if (*(_DWORD *)(a4 + 32) > v12) {
        *(_DWORD *)(a4 + 32) = v12;
      }
      *(_DWORD *)(a4 + 24) += v12;
      *(_DWORD *)a4 += a3;
      unint64_t v13 = *(unsigned int *)(v6 + v9 + 12);
      unint64_t v14 = *(void *)(a4 + 40);
      BOOL v15 = v13 > v14;
      unint64_t v16 = v13 - v14;
      if (v15 && *(void *)(a4 + 48) < v16)
      {
        *(void *)(a4 + 48) = v16;
        time_t v11 = time(0);
        uint64_t v17 = a1[79];
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      ++v10;
      uint64_t v6 = *(void *)(a2 + 32);
      v9 += 28;
    }
    while (v10 < -1227133513 * ((unint64_t)(*(void *)(a2 + 40) - v6) >> 2));
  }
  else
  {
    time_t v11 = 0;
  }
  uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" rtcp RR Count ", 15);
  *(unsigned char *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v18 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" packets ", 9);
  *(unsigned char *)(v18 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  return v11;
}

time_t AnalyticsLogger::logLocalRTCPRRPacket(AnalyticsLogger *this, const RTCPRRPacket *a2, int a3)
{
  *((void *)this + 68) = time(0);
  if (*((unsigned char *)this + 144)) {
    uint64_t v6 = (char *)this + 320;
  }
  else {
    uint64_t v6 = (char *)this + 264;
  }
  time_t result = AnalyticsLogger::processRTCPRRPacket(this, (uint64_t)a2, a3, (uint64_t)v6);
  if (!result) {
    time_t result = *((void *)this + 64);
  }
  *((void *)this + 64) = result;
  return result;
}

uint64_t AnalyticsLogger::processRTCPSRPacket(void *a1, uint64_t a2, uint64_t a3)
{
  ++*(_DWORD *)(a3 + 8);
  uint64_t v6 = a1[79];
  if (v6 && *(void *)(a3 + 16) < (unint64_t)*(unsigned int *)(a2 + 40)) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)(a3 + 16) = *(unsigned int *)(a2 + 40);
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" rtcp SR, packets Count ", 24);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  if (-1227133513 * ((unint64_t)(*(void *)(a2 + 56) - v9) >> 2))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a3 + 36) += *(_DWORD *)(v9 + v10 + 8);
      unsigned int v12 = *(_DWORD *)(v9 + v10 + 16);
      if (*(_DWORD *)(a3 + 28) < v12) {
        *(_DWORD *)(a3 + 28) = v12;
      }
      if (*(_DWORD *)(a3 + 32) > v12) {
        *(_DWORD *)(a3 + 32) = v12;
      }
      *(_DWORD *)(a3 + 24) += v12;
      uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
      (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v13);
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" SR localJitter ", 16);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" qosRtcp.SrCount ", 17);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"sender count", 12);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      ++v11;
      uint64_t v9 = *(void *)(a2 + 48);
      v10 += 28;
    }
    while (v11 < -1227133513 * ((unint64_t)(*(void *)(a2 + 56) - v9) >> 2));
  }
  return result;
}

uint64_t AnalyticsLogger::logRemoteRTCPSRPacket(AnalyticsLogger *this, const RTCPSRPacket *a2)
{
  *((void *)this + 67) = time(0);
  if (*((unsigned char *)this + 144)) {
    uint64_t v4 = (char *)this + 320;
  }
  else {
    uint64_t v4 = (char *)this + 264;
  }
  AnalyticsLogger::processRTCPSRPacket(this, (uint64_t)a2, (uint64_t)v4);
  uint64_t v5 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" rtcp remote SR in ", 19);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  return result;
}

void AnalyticsLogger::logSignalingReduction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  xpc_object_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::SignallingDeferralEvent::create(&v4, a3, &v6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C52B7104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AnalyticsLogger::addCallEndInfo(uint64_t a1, void *a2)
{
  uint64_t v4 = MEMORY[0x1C878F160](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "Ignoring null dictionary";
    uint64_t v9 = 24;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    return;
  }
  if (*a2 == *(void *)(a1 + 648))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "Skipping update to same dictionary";
    uint64_t v9 = 34;
    goto LABEL_3;
  }
  if (!*(unsigned char *)(a1 + 656))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    uint64_t v8 = "Ignoring call end info from CT.  No call being tracked in logger";
    uint64_t v9 = 64;
    goto LABEL_3;
  }
  uint64_t v10 = MEMORY[0x1C878F160]();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v11);
  unsigned int v12 = *(void **)(v11 + 8);
  if (v10 == v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Updating dict from CT", 21);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    unint64_t v14 = (void *)*a2;
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 0x40000000;
    applier[2] = ___ZN15AnalyticsLogger14addCallEndInfoEN3xpc4dictE_block_invoke;
    applier[3] = &__block_descriptor_tmp_1;
    applier[4] = a1;
    xpc_dictionary_apply(v14, applier);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Assigning dict ref from CT", 26);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    xpc_object_t v13 = (xpc_object_t)*a2;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t v13 = xpc_null_create();
    }
    BOOL v15 = *(void **)(a1 + 648);
    *(void *)(a1 + 648) = v13;
    xpc_release(v15);
  }
}

uint64_t ___ZN15AnalyticsLogger14addCallEndInfoEN3xpc4dictE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t v7 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  v6[0] = v4 + 648;
  v6[1] = a2;
  xpc::dict::object_proxy::operator=((uint64_t)v6, &v7, &objecta);
  xpc_release(objecta);
  xpc_object_t objecta = 0;
  xpc_release(v7);
  return 1;
}

void AnalyticsLogger::setCallActive(AnalyticsLogger *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
  (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Set call active ", 16);
  *(unsigned char *)(v4 + 17) = 0;
  std::to_string(&v9, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (!a2) {
      goto LABEL_7;
    }
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (!*((unsigned char *)this + 656))
  {
    uint64_t v5 = (*(uint64_t (**)(AnalyticsLogger *))(*(void *)this + 64))(this);
    (*(void (**)(AnalyticsLogger *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Resetting addendum", 18);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = (void *)*((void *)this + 81);
    *((void *)this + 81) = v6;
    xpc_release(v8);
    xpc_release(v7);
  }
LABEL_7:
  *((unsigned char *)this + 656) = a2;
}

void sub_1C52B7754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AnalyticsLogger::~AnalyticsLogger(AnalyticsLogger *this)
{
  AnalyticsLogger::~AnalyticsLogger(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(void *)this = &unk_1F20BB838;
  *((void *)this + 13) = &unk_1F20BB9C8;
  *((void *)this + 17) = &unk_1F20BB9F8;
  xpc_release(*((xpc_object_t *)this + 81));
  *((void *)this + 81) = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  xpc_object_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  *((void *)this + 13) = &unk_1F20B9188;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void *AnalyticsLogger::logPrefix(AnalyticsLogger *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ims_awd: ", 9);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

std::string *AnalyticsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

std::string *non-virtual thunk to'AnalyticsLogger::setDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t ImsSSLContextBase::readAppData(uint64_t a1, std::string *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  std::string::size_type __n = 1024;
  do
  {
    uint64_t v4 = (*(uint64_t (**)(void, std::string::value_type *, std::string::size_type *))(**(void **)(a1 + 104)
                                                                                                + 16))(*(void *)(a1 + 104), __s, &__n);
    if (!__n) {
      break;
    }
    std::string::append(a2, __s, __n);
    if (v4) {
      break;
    }
  }
  while (__n == 1024);
  if (v4 == -9803 || v4 == 0) {
    return 0;
  }
  return v4;
}

uint64_t ImsSSLContextBase::writeAppData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v3 < 0) {
    a2 = (uint64_t *)*a2;
  }
  uint64_t v5 = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 144))(a1, a2, &v5);
}

uint64_t ImsSSLContextBase::writeAppData(ImsSSLContextBase *this, const void *a2, unint64_t *a3)
{
  return (*(uint64_t (**)(void, const void *, unint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), a2, a3);
}

uint64_t ImsSSLContext::initialize(SSLContextRef *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v8 = SSLCreateContext((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kSSLClientSide, kSSLStreamType);
  a1[17] = v8;
  if (!v8)
  {
    uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Unable to create SSL tunnel", 27);
    goto LABEL_5;
  }
  if (SSLSetIOFuncs(v8, (SSLReadFunc)ImsSSLContext::_handleSSLReadCallback, (SSLWriteFunc)ImsSSLContext::_handleSSLWriteCallback))
  {
    uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SSLSetIOFuncs failed. Error:", 28);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
LABEL_5:
    uint64_t v10 = 4294957496;
    goto LABEL_9;
  }
  uint64_t v11 = SSLSetConnection(a1[17], a1);
  if (v11)
  {
    uint64_t v10 = v11;
    uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    unsigned int v12 = *(void **)(v9 + 8);
    xpc_object_t v13 = "SSLSetConnection failed. Error:";
    uint64_t v14 = 31;
  }
  else if (a2 && (uint64_t v16 = SSLSetCertificate(a1[17], *(CFArrayRef *)(a3 + 8)), v16))
  {
    uint64_t v10 = v16;
    uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    unsigned int v12 = *(void **)(v9 + 8);
    xpc_object_t v13 = "SSLSetCertificate failed. Error:";
    uint64_t v14 = 32;
  }
  else
  {
    uint64_t v17 = a4[23];
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *((void *)a4 + 1);
    }
    if (!v17) {
      goto LABEL_20;
    }
    uint64_t v18 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"SSLSetPeerDomainName attempt with domain ", 41);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v18 + 32))(v18, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (a4[23] < 0) {
      a4 = *(char **)a4;
    }
    size_t v19 = strlen(a4);
    uint64_t v20 = SSLSetPeerDomainName(a1[17], a4, v19);
    if (!v20)
    {
LABEL_20:
      uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
      (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Initialized SSL tunnel", 22);
      uint64_t v10 = 0;
      goto LABEL_9;
    }
    uint64_t v10 = v20;
    uint64_t v9 = (*((uint64_t (**)(SSLContextRef *))*a1 + 7))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v9);
    unsigned int v12 = *(void **)(v9 + 8);
    xpc_object_t v13 = "SSLSetPeerDomainName failed. Error:";
    uint64_t v14 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
LABEL_9:
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  return v10;
}

uint64_t ImsSSLContext::_handleSSLReadCallback(ImsSSLContext *this, const void *a2, void *a3, unint64_t *a4)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::spam((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ImsSSLContext : _handleSSLReadCallback static called", 52);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if (this) {
      goto LABEL_5;
    }
  }
  else if (this)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v13, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::spam((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ImsSSLContext : _handleSSLReadCallback static exit", 50);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    return (*(uint64_t (**)(void, const void *, void *))(**((void **)this + 13) + 16))(*((void *)this + 13), a2, a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "ImsSSL");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"_handleSSLReadCallback failed. NULL context:", 44);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return 4294957496;
}

void sub_1C52B8258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::_handleSSLWriteCallback(ImsSSLContext *this, const void *a2, const void *a3, unint64_t *a4)
{
  if (this)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 13) + 24);
    return v4();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "ImsSSL");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"_handleSSLWriteCallback failed. NULL context:", 45);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    return 4294957496;
  }
}

void sub_1C52B83B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::deinitialize(SSLContextRef *this)
{
  SSLClose(this[17]);
  CFRelease(this[17]);
  uint64_t v2 = (*((uint64_t (**)(SSLContextRef *))*this + 8))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deinitialized SSL tunnel", 24);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

BOOL ImsSSLContext::idle(SSLContextRef *this)
{
  SSLSessionState state = kSSLIdle;
  SSLGetSessionState(this[17], &state);
  return state == kSSLIdle;
}

BOOL ImsSSLContext::connected(SSLContextRef *this)
{
  SSLSessionState state = kSSLIdle;
  SSLGetSessionState(this[17], &state);
  return state == kSSLConnected;
}

uint64_t ImsSSLContext::handshake(SSLContextRef *this)
{
  uint64_t v2 = SSLHandshake(this[17]);
  uint64_t v3 = (*((uint64_t (**)(SSLContextRef *))*this + 8))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v3);
  uint64_t v4 = *(void **)(v3 + 8);
  if (v2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"SSLHandshake not yet completed. Errorcode:", 42);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"SSLHandshake succeeded", 22);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(SSLContextRef))(*(void *)this[13] + 32))(this[13]);
  }
  return v2;
}

uint64_t ImsSSLContext::readAppData(SSLContextRef *a1, std::string *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(data, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::spam((uint64_t)data, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"ImsSSLContext: readAppData called", 33);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(data[0]);
  }
  bzero(data, 0x400uLL);
  size_t bufferSize = 1024;
  size_t processed = 0;
  size_t v4 = 1024;
  do
  {
    if (v4 >= 0x400) {
      size_t v5 = 1024;
    }
    else {
      size_t v5 = v4;
    }
    uint64_t v6 = SSLRead(a1[17], data, v5, &processed);
    if (processed) {
      std::string::append(a2, (const std::string::value_type *)data, processed);
    }
    uint64_t v7 = (*((uint64_t (**)(SSLContextRef *))*a1 + 8))(a1);
    (*((void (**)(SSLContextRef *, uint64_t))*a1 + 2))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Reading App data from SSL tunnel. Max Buf = ", 44);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", Processed = ", 14);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    SSLGetBufferedReadSize(a1[17], &bufferSize);
    size_t v4 = bufferSize;
  }
  while (bufferSize);
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  uint64_t v8 = ims::spam((uint64_t)__p, (uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ImsSSLContext : readAppData exit", 32);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1C52B89BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsSSLContext::writeAppData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v3 < 0) {
    a2 = (uint64_t *)*a2;
  }
  uint64_t v5 = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 144))(a1, a2, &v5);
}

uint64_t ImsSSLContext::writeAppData(SSLContextRef *this, char *data, unint64_t *a3)
{
  size_t processed = 0;
  size_t v5 = *a3;
  do
  {
    uint64_t result = SSLWrite(this[17], data, v5, &processed);
    data += processed;
    v5 -= processed;
  }
  while (result == -9803);
  return result;
}

uint64_t ImsSSLContext::fetchNegotiatedCipher(SSLContextRef *this)
{
  SSLCipherSuite cipherSuite = 0;
  if (!SSLGetNegotiatedCipher(this[17], &cipherSuite)) {
    return cipherSuite;
  }
  uint64_t v2 = (*((uint64_t (**)(SSLContextRef *))*this + 7))(this);
  (*((void (**)(SSLContextRef *, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Failed to fetch TLS Cipher Suite - Failed to get negotiated cipher. Error code:", 79);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t result = 0;
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

void ImsSSLContextBase::~ImsSSLContextBase(void **this)
{
  ImsSSLContextBase::~ImsSSLContextBase(this);
  JUMPOUT(0x1C878E320);
}

{
  *this = &unk_1F20BBB58;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *ImsSSLContextBase::logPrefix(ImsSSLContextBase *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 112);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" :", 2);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t ImsSSLContextBase::initialize()
{
  return 0;
}

uint64_t ImsSSLContextBase::idle(ImsSSLContextBase *this)
{
  return 0;
}

uint64_t ImsSSLContextBase::connected(ImsSSLContextBase *this)
{
  return 1;
}

uint64_t ImsSSLContextBase::handshake(ImsSSLContextBase *this)
{
  return 0;
}

uint64_t ImsSSLContextBase::fetchNegotiatedCipher(ImsSSLContextBase *this)
{
  return 0;
}

void ImsSSLContext::~ImsSSLContext(void **this)
{
  ImsSSLContextBase::~ImsSSLContextBase(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SDPAudioSettingsBuilder::RemoteEVSOfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (this && *((_WORD *)this + 14) == 255)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    memset(v35, 0, sizeof(v35));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v35, (unsigned int *)a3 + 24);
    long long v33 = 0u;
    memset(v34, 0, sizeof(v34));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)&v33, (unsigned int *)a2 + 24);
    int v11 = DWORD2(v38);
    int v12 = *(_DWORD *)&v34[104];
    if (*(_DWORD *)&v34[104] == 2) {
      xpc_object_t v13 = (const SDPMediaFormatEVSParams *)&v33;
    }
    else {
      xpc_object_t v13 = 0;
    }
    if (DWORD2(v38) == 2)
    {
      uint64_t v14 = 0;
      if (DWORD1(v36) == 7) {
        goto LABEL_49;
      }
      if (v37 > 1u) {
        goto LABEL_49;
      }
      uint64_t v14 = 0;
      if (BYTE1(v37) > 1u || *((unsigned __int16 *)a3 + 45) > 1u) {
        goto LABEL_49;
      }
    }
    else if (*((unsigned __int16 *)a3 + 45) > 1u)
    {
      uint64_t v14 = 0;
LABEL_49:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v33);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v35);
      return v14;
    }
    *(_OWORD *)int v31 = 0u;
    memset(v32, 0, 88);
    long long v30 = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v30, *((_WORD *)a3 + 4));
    if (v12 == 2)
    {
      BYTE8(v30) = BYTE8(v33);
      BOOL v15 = std::string::operator=((std::string *)v31, (const std::string *)v34);
      *(_OWORD *)((char *)&v32[1] + 10) = *(_OWORD *)&v34[42];
      *(_OWORD *)((char *)&v32[2] + 10) = *(_OWORD *)&v34[58];
      *(_OWORD *)((char *)&v32[3] + 10) = *(_OWORD *)&v34[74];
      *(void *)((char *)&v32[4] + 10) = *(void *)&v34[90];
      *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)&v34[26];
      WORD4(v32[0]) = *((_WORD *)a3 + 4);
    }
    EVSHardBrLimitKey = (void **)ImsPrefs::getEVSHardBrLimitKey((ImsPrefs *)v15);
    ImsPrefs::stringValue(a5, EVSHardBrLimitKey);
    BOOL v17 = SDPParser::parseEVSBr((uint64_t)&v30, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    EVSHardBwLimitKey = (void **)ImsPrefs::getEVSHardBwLimitKey((ImsPrefs *)v17);
    ImsPrefs::stringValue(a5, EVSHardBwLimitKey);
    SDPParser::parseEVSBw((uint64_t)&v30, &v27);
    if (v28 < 0) {
      operator delete(v27);
    }
    if (isOpenOffer(a3))
    {
      if (v11 == 2) {
        uint64_t v20 = (const SDPMediaFormatEVSParams *)v35;
      }
      else {
        uint64_t v20 = (const SDPMediaFormatEVSParams *)&v30;
      }
      if (v12 == 2) {
        int v21 = (const SDPMediaFormatEVSParams *)&v33;
      }
      else {
        int v21 = (const SDPMediaFormatEVSParams *)&v30;
      }
      SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), v21, v20, a4, a5, v19);
    }
    else
    {
      uint64_t v22 = 84;
      if (v12 == 2) {
        uint64_t v22 = (uint64_t)&v34[68];
      }
      if (v11 == 2) {
        char v23 = (const SDPMediaFormatEVSParams *)v35;
      }
      else {
        char v23 = v13;
      }
      if (v11 == 2) {
        uint64_t v22 = (uint64_t)&v36 + 4;
      }
      int v24 = *(_DWORD *)v22;
      if (v24 > SDWORD1(v32[3]) && v24 <= 5 && ((1 << v24) & 0x2A) != 0) {
        goto LABEL_46;
      }
      uint64_t v25 = (uint64_t)&v34[40];
      if (v12 != 2) {
        uint64_t v25 = 56;
      }
      if (v11 == 2) {
        uint64_t v25 = (uint64_t)&v35[3] + 8;
      }
      if ((*((void *)&v32[1] + 1) & *(void *)v25) == 0)
      {
LABEL_46:
        uint64_t v14 = 0;
LABEL_47:
        *(void *)&long long v30 = &unk_1F20E5C78;
        if (SBYTE7(v32[0]) < 0) {
          operator delete(v31[0]);
        }
        goto LABEL_49;
      }
      SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), (const SDPMediaFormatEVSParams *)&v30, v23, a4, a5, v19);
    }
    uint64_t v14 = 1;
    goto LABEL_47;
  }
  return 0;
}

void sub_1C52B90DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned int a40)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a40);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v40 - 224));
  _Unwind_Resume(a1);
}

uint64_t SDPAudioSettingsBuilder::RemoteAMROfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(this, a2, a3, a4, 0, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteAMRWBOfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(this, a2, a3, a4, 1, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteDTMFOfferMatchHandler(_WORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a1[152] == 255)
  {
    __int16 v3 = *(_WORD *)(a3 + 8);
    a1[152] = v3;
    a1[153] = v3;
    __int16 v4 = *(_WORD *)(a2 + 88);
    if (!v4) {
      __int16 v4 = 8000;
    }
    a1[155] = v4;
  }
  return 0;
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t SDPAudioSettingsBuilder::RemoteEVSAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, const ImsPrefs *a5, const ImsPrefs *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!this || *((_WORD *)this + 14) != 255) {
    goto LABEL_14;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)int v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v23, (unsigned int *)a3 + 24);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  int v11 = (const SDPMediaFormatEVSParams *)v17;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v17, (unsigned int *)a2 + 24);
  int v12 = DWORD2(v22);
  if (DWORD2(v22) != 2) {
    int v11 = 0;
  }
  if (DWORD2(v29) == 2)
  {
    char v13 = 0;
    if (v28 > 1u || BYTE1(v28) > 1u)
    {
      BOOL v14 = 0;
    }
    else
    {
      BOOL v14 = 0;
      if (*((unsigned __int16 *)a3 + 45) <= 1u)
      {
        if ((isOpenOffer(a2) & 1) != 0
          || (isOpenOffer(a3) & 1) != 0
          || v12 == 2 && (*((void *)&v25 + 1) & ~*((void *)&v18 + 1)) == 0 && SDWORD1(v20) >= SDWORD1(v27))
        {
          SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(this, (SDPMediaAudioSettings *)LOWORD(v24[1]), v11, (const SDPMediaFormatEVSParams *)v23, a4, a5, v15);
          BOOL v14 = 0;
          char v13 = 1;
        }
        else
        {
          BOOL v14 = 1;
        }
      }
    }
  }
  else
  {
    char v13 = 0;
    BOOL v14 = *((unsigned __int16 *)a3 + 45) < 2u;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v17);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v23);
  if (v14) {
LABEL_14:
  }
    char v13 = 0;
  return v13 & 1;
}

void sub_1C52B93AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25)
{
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::RemoteAMRAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(this, a2, a3, a4, 0, a5, a7);
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::RemoteAMRWBAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, ImsPrefs *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  return SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(this, a2, a3, a4, 1, a5, a7);
}

uint64_t SDPAudioSettingsBuilder::RemoteDTMFAnswerMatchHandler(_WORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a1[152] == 255)
  {
    a1[152] = *(_WORD *)(a2 + 8);
    a1[153] = *(_WORD *)(a3 + 8);
    __int16 v3 = *(_WORD *)(a2 + 88);
    if (!v3) {
      __int16 v3 = 8000;
    }
    a1[155] = v3;
  }
  return 0;
}

ImsPrefs *SDPAudioSettingsBuilder::SDPAudioSettingsBuilder(ImsPrefs *a1, void *a2, ImsPrefs *a3)
{
  size_t v5 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  UseRemoteMediaOrderKey = (void **)ImsPrefs::getUseRemoteMediaOrderKey(a1);
  char v7 = ImsPrefs::BOOLValue(a3, UseRemoteMediaOrderKey);
  SDPSettingsBuilder::SDPSettingsBuilder((uint64_t)a1, v9, v7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)a1 = &unk_1F20BBCD8;
  return a1;
}

void sub_1C52B94C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPAudioSettingsBuilder::createAudioSettingsForOffer(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPMedia *a3@<X2>, unint64_t a4@<X8>)
{
  __int16 v4 = *(std::__shared_weak_count **)(a1 + 16);
  v7[0] = *(void *)(a1 + 8);
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v5 = *(atomic_ullong **)(a2 + 8);
  v6[0] = *(SDPModel **)a2;
  v6[1] = (SDPModel *)v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)v7, v6, a3, (uint64_t)&__block_literal_global_1, a4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C52B9588(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPAudioSettingsBuilder::createAudioSettings(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  for (uint64_t i = *((void *)*a3 + 52); i != *((void *)*a3 + 53); i += 200)
  {
    if (*(_DWORD *)(i + 12) == 2) {
      goto LABEL_6;
    }
  }
  uint64_t i = 0;
LABEL_6:
  for (uint64_t j = *(SDPMediaSettings **)(*(void *)a2 + 416);
        j != *(SDPMediaSettings **)(*(void *)a2 + 424);
        uint64_t j = (SDPMediaSettings *)((char *)j + 200))
  {
    if (*((_DWORD *)j + 3) == 2) {
      goto LABEL_11;
    }
  }
  uint64_t j = 0;
LABEL_11:
  if (!i)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.audiosettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v45, "");
    uint64_t v23 = ims::error((uint64_t)&__p, (uint64_t)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"SDPAudioSettingsBuilder::createAudioSettings Remote media is null", 65);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_31:
    *(unsigned char *)(v23 + 17) = 0;
    if (SHIBYTE(v47) < 0) {
      operator delete(v45);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 432) = 0;
    return;
  }
  if (!j)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.audiosettingbuilder");
    std::string::basic_string[abi:ne180100]<0>(&v45, "");
    uint64_t v23 = ims::error((uint64_t)&__p, (uint64_t)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"SDPAudioSettingsBuilder::createAudioSettings Local media is null", 64);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_31;
  }
  char v13 = (std::__shared_weak_count *)a3[1];
  long long v49 = *a3;
  uint64_t v50 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  isIPuint64_t v6 = SDPSettingsBuilder::isIPv6((uint64_t)&v49, (SDPMedia *)i);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  long long v45 = 0;
  long long v46 = &v45;
  uint64_t v47 = 0x2000000000;
  __int16 v48 = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(void *)(a6 + 432) = 0;
  std::string __p = 0;
  p_p = &__p;
  uint64_t v40 = 0x4002000000;
  int v41 = __Block_byref_object_copy_;
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v42 = __Block_byref_object_dispose_;
  long long v43 = v44;
  LOWORD(v52) = 8000;
  *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)&v43, 0x1F40u, &v52)+ 174) = 8000;
  LOWORD(v52) = 16000;
  *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, 0x3E80u, &v52)+ 174) = 16000;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 0x40000000;
  v36[2] = ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke;
  v36[3] = &unk_1E650F788;
  v36[4] = a5;
  v36[5] = &__p;
  BOOL v37 = isIPv6;
  v36[6] = &v45;
  v36[7] = a4;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 0x40000000;
  v35[2] = ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke_2;
  void v35[3] = &unk_1E650F7B0;
  v35[4] = &__p;
  _OWORD v35[5] = &v45;
  SDPSettingsBuilder::findRTPMatches(a1, (uint64_t)j + 40, i + 40, (uint64_t)v36, (uint64_t)v35);
  int v16 = *((unsigned __int16 *)v46 + 12);
  if (!*((_WORD *)v46 + 12)) {
    goto LABEL_42;
  }
  if (v16 == 16000) {
    unsigned __int16 v17 = 8000;
  }
  else {
    unsigned __int16 v17 = 16000;
  }
  LOWORD(v52) = v17;
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v16, (_WORD *)v46 + 12)+ 34) != 255&& *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v46 + 12), (_WORD *)v46 + 12)+ 172) != 255)
  {
    long long v25 = p_p;
    long long v26 = (SDPModel **)(v46 + 3);
    unsigned __int16 v17 = *((_WORD *)v46 + 12);
LABEL_41:
    long long v27 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v25 + 5, v17, v26);
    std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v27 + 5));
    goto LABEL_42;
  }
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52)+ 34) != 255&& *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52)+ 172) != 255)
  {
    long long v26 = &v52;
    long long v25 = p_p;
    goto LABEL_41;
  }
  int v18 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v46 + 12), (_WORD *)v46 + 12)+ 34);
  long long v19 = (uint64_t **)(p_p + 5);
  if (v18 == 255)
  {
    if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v19, v17, &v52)+ 34) == 255)goto LABEL_42; {
    long long v20 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52);
    }
    std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v20 + 5));
    if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v46 + 12), (_WORD *)v46 + 12)+ 172) == 255)goto LABEL_42; {
    *(_WORD *)(a6 + 304) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v46 + 12), (_WORD *)v46 + 12)+ 172);
    }
    *(_WORD *)(a6 + 306) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, *((_WORD *)v46 + 12), (_WORD *)v46 + 12)+ 173);
    long long v21 = p_p;
    long long v22 = (SDPModel **)(v46 + 3);
    unsigned __int16 v17 = *((_WORD *)v46 + 12);
    goto LABEL_38;
  }
  int v24 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v19, *((_WORD *)v46 + 12), (_WORD *)v46 + 12);
  std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>((SDPMediaAudioSettings *)a6, (SDPMediaAudioSettings *)(v24 + 5));
  if (*((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52)+ 172) != 255)
  {
    *(_WORD *)(a6 + 304) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52)+ 172);
    *(_WORD *)(a6 + 306) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)p_p + 5, v17, &v52)+ 173);
    long long v22 = &v52;
    long long v21 = p_p;
LABEL_38:
    *(_WORD *)(a6 + 310) = *((_WORD *)std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v21 + 5, v17, v22)+ 175);
  }
LABEL_42:
  if (*(unsigned char *)(a6 + 432))
  {
    SDPSettingsBuilder::copyGeneralMediaSettings((std::string *)a6, j, (SDPMedia *)i, a4, v15);
    *(_WORD *)(a6 + 312) = SDPMedia::packetizationTime((SDPMedia *)i);
    long long v28 = (ImsPrefs *)SDPMedia::maxPacketizationTime((SDPMedia *)i);
    if (v28)
    {
      __int16 v29 = SDPMedia::maxPacketizationTime((SDPMedia *)i);
    }
    else
    {
      MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v28);
      __int16 v29 = ImsPrefs::intValue(a4, MaxPacketizationTimeKey);
    }
    *(_WORD *)(a6 + 314) = v29;
    for (uint64_t k = *(void *)(i + 144); ; uint64_t k = *(void *)(k + 8))
    {
      if (k == i + 136)
      {
        BOOL v32 = 0;
        goto LABEL_52;
      }
      if (*(_DWORD *)(k + 136) == 5) {
        break;
      }
    }
    BOOL v32 = *(unsigned char *)(k + 56) != 0;
LABEL_52:
    *(unsigned char *)(a6 + 316) = v32;
    if (!*(unsigned char *)(a6 + 432)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v34 = *a3;
    long long v33 = (std::__shared_weak_count *)a3[1];
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      int v53 = v33;
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v53 = 0;
    }
    long long v52 = v34;
    SDPSettingsBuilder::copyRemoteMediaSettings(a6, &v52, (SDPMedia *)i);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    v51[0] = v34;
    v51[1] = (SDPModel *)v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SDPSettingsBuilder::generateBandwidthSpecifierInfo(a6, v51, i);
    if (v33)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  _Block_object_dispose(&__p, 8);
  std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(v44[0]);
  _Block_object_dispose(&v45, 8);
}

void sub_1C52B9CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *___ZNK23SDPAudioSettingsBuilder27createAudioSettingsForOfferENSt3__110shared_ptrI8SDPModelEERK8ImsPrefs_block_invoke(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = ims::getValueFromMap<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>((uint64_t)&_MergedGlobals_5, a2);
  if (result)
  {
    BOOL v15 = a2;
    BOOL v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&_MergedGlobals_5, a2, (long long **)&v15)[7];
    return (void *)v14(a3, a4, a5, a6, a7);
  }
  return result;
}

void *ims::getValueFromMap<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>(uint64_t a1, void **a2)
{
  __int16 v3 = (void **)(a1 + 8);
  __int16 v4 = *(void **)(a1 + 8);
  if (v4)
  {
    size_t v5 = (void **)(a1 + 8);
    do
    {
      char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a2);
      if (v6 >= 0) {
        char v7 = v4;
      }
      else {
        char v7 = v4 + 1;
      }
      if (v6 >= 0) {
        size_t v5 = (void **)v4;
      }
      __int16 v4 = (void *)*v7;
    }
    while (*v7);
    if (v5 != v3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
    {
      return v5[7];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"getValueFromMap", 15);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" Object not found [key=", 23);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return 0;
}

void sub_1C52B9FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPAudioSettingsBuilder::createAudioSettingsForOfferAnswer(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, SDPMedia *a4@<X3>, SDPMediaAudioSettings *a5@<X8>)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v17[0] = *a2;
  v17[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = *(atomic_ullong **)(a3 + 8);
  v16[0] = *(SDPModel **)a3;
  v16[1] = (SDPModel *)v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)v17, v16, a4, (uint64_t)&__block_literal_global_8, (unint64_t)v18);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if ((_BYTE)v19)
  {
    *(unsigned char *)a5 = 0;
    *((unsigned char *)a5 + 432) = 0;
    SDPMediaAudioSettings::SDPMediaAudioSettings(a5, (const SDPMediaAudioSettings *)v18);
    *((unsigned char *)a5 + 432) = 1;
  }
  else
  {
    char v11 = *(std::__shared_weak_count **)(a1 + 16);
    v15[0] = *(void *)(a1 + 8);
    v15[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v12 = *(SDPModel **)a3;
    char v13 = *(atomic_ullong **)(a3 + 8);
    v14[0] = v12;
    v14[1] = (SDPModel *)v13;
    if (v13) {
      atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
    }
    SDPAudioSettingsBuilder::createAudioSettings(a1, (uint64_t)v15, v14, a4, (uint64_t)&__block_literal_global_11, (unint64_t)a5);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if ((_BYTE)v19) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v18);
  }
}

void sub_1C52BA174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (a71) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(&a17);
  }
  _Unwind_Resume(a1);
}

void *___ZNK23SDPAudioSettingsBuilder33createAudioSettingsForOfferAnswerENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = ims::getValueFromMap<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>((uint64_t)&unk_1EBBDBD70, a2);
  if (result)
  {
    BOOL v15 = a2;
    BOOL v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&unk_1EBBDBD70, a2, (long long **)&v15)[7];
    return (void *)v14(a3, a4, a5, a6, a7);
  }
  return result;
}

void *___ZNK23SDPAudioSettingsBuilder33createAudioSettingsForOfferAnswerENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke_2(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = ims::getValueFromMap<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>((uint64_t)&unk_1EBBDBD70, a2);
  if (result)
  {
    BOOL v15 = a2;
    BOOL v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&unk_1EBBDBD70, a2, (long long **)&v15)[7];
    return (void *)v14(a3, a4, a5, a6, a7);
  }
  return result;
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  __int16 v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v14, (const SDPMediaRTPMap *)(a2 + 16));
  uint64_t v6 = *(void *)(a1 + 32);
  if (SBYTE7(v16) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v15, *((std::string::size_type *)&v15 + 1));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v15;
    v13.__r_.__value_.__r.__words[2] = v16;
  }
  char v7 = (uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (WORD4(v16)) {
    unsigned __int16 v8 = WORD4(v16);
  }
  else {
    unsigned __int16 v8 = 8000;
  }
  unsigned __int16 v12 = v8;
  uint64_t v9 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v7, v8, &v12);
  if ((*(unsigned int (**)(uint64_t, std::string *, uint64_t **, uint64_t, uint64_t, void, void))(v6 + 16))(v6, &v13, v9 + 5, a2, a3, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 56)))
  {
    int v10 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if (v10) {
        goto LABEL_17;
      }
    }
    else if (*(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      goto LABEL_17;
    }
    __int16 v11 = WORD4(v16);
    if (!WORD4(v16)) {
      __int16 v11 = 8000;
    }
    *(_WORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v11;
  }
  else if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
LABEL_17:
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)v14);
}

void sub_1C52BA4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
}

void ___ZNK23SDPAudioSettingsBuilder19createAudioSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefsU13block_pointerFbNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP21SDPMediaAudioSettingsR18SDPMediaFormatInfoSG_bS6_E_block_invoke_2(uint64_t a1, int a2)
{
  __int16 v4 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  __int16 v10 = 8000;
  uint64_t v5 = std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v4, 0x1F40u, &v10);
  if (*((_WORD *)v5 + 34) == 255 && (a2 | 8) == 8)
  {
    char v7 = v5;
    *((_WORD *)v5 + 34) = a2;
    *((_WORD *)v5 + 35) = a2;
    if (a2) {
      unsigned __int16 v8 = "PCMA";
    }
    else {
      unsigned __int16 v8 = "PCMU";
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, v8);
    std::string::operator=((std::string *)(v7 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    if (!*(_WORD *)(v9 + 24)) {
      *(_WORD *)(v9 + 24) = 8000;
    }
  }
}

void sub_1C52BA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SDPMediaAudioSettings *std::optional<SDPMediaAudioSettings>::operator=[abi:ne180100]<SDPMediaAudioSettings&,void>(SDPMediaAudioSettings *this, SDPMediaAudioSettings *a2)
{
  if (*((unsigned char *)this + 432))
  {
    SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
    std::string::operator=((std::string *)((char *)this + 280), (const std::string *)((char *)a2 + 280));
    uint64_t v4 = *((void *)a2 + 38);
    *(void *)((char *)this + 309) = *(void *)((char *)a2 + 309);
    *((void *)this + 38) = v4;
    long long v5 = *(_OWORD *)((char *)a2 + 344);
    *(_OWORD *)((char *)this + 328) = *(_OWORD *)((char *)a2 + 328);
    *(_OWORD *)((char *)this + 344) = v5;
    *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
    long long v7 = *(_OWORD *)((char *)a2 + 392);
    long long v6 = *(_OWORD *)((char *)a2 + 408);
    long long v8 = *(_OWORD *)((char *)a2 + 376);
    *((_WORD *)this + 212) = *((_WORD *)a2 + 212);
    *(_OWORD *)((char *)this + 392) = v7;
    *(_OWORD *)((char *)this + 408) = v6;
    *(_OWORD *)((char *)this + 376) = v8;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings(this, a2);
    *((unsigned char *)this + 432) = 1;
  }
  return this;
}

uint64_t isOpenOffer(SDPMediaFormatInfo *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 54);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, char *))off_1F20BBDC0[v1])(&v4, (char *)a1 + 96);
}

__n128 SDPAudioSettingsBuilder::copyEVSMediaFormatInfo(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, const SDPMediaFormatEVSParams *a3, const SDPMediaFormatEVSParams *a4, const SDPMediaFormatEVSParams *a5, const ImsPrefs *a6, const ImsPrefs *a7)
{
  if (a3 && a4)
  {
    int v9 = (int)a5;
    *((_WORD *)this + 14) = (_WORD)a2;
    *((_WORD *)this + 15) = *((_WORD *)a4 + 20);
    std::string::basic_string[abi:ne180100]<0>(&__p, "EVS");
    std::string::operator=((std::string *)((char *)this + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    SDPMediaEVSSettings::SDPMediaEVSSettings((SDPMediaEVSSettings *)v15, a3, a4, v9, a6);
    long long v12 = v15[3];
    *(_OWORD *)((char *)this + 392) = v15[2];
    *(_OWORD *)((char *)this + 408) = v12;
    *((_WORD *)this + 212) = v16;
    __n128 result = (__n128)v15[1];
    *(_OWORD *)((char *)this + 360) = v15[0];
    *(__n128 *)((char *)this + 376) = result;
  }
  return result;
}

void sub_1C52BA7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPAudioSettingsBuilder::genericRemoteAMROfferMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, int a5, ImsPrefs *a6, const ImsPrefs *a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!this || *((_WORD *)this + 14) != 255) {
    return 0;
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v37, 0, sizeof(v37));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v37, (unsigned int *)a3 + 24);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v30, (unsigned int *)a2 + 24);
  int v13 = DWORD2(v43);
  int v14 = DWORD2(v36);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  *(_OWORD *)std::string __p = 0u;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v26, *((_WORD *)a3 + 4), a5);
  int v15 = isOpenOffer(a3);
  char v17 = BYTE11(v38);
  char v18 = BYTE11(v28);
  if (v13 != 1) {
    char v17 = BYTE11(v28);
  }
  BOOL v19 = v17 != 0;
  if (v14 == 1) {
    char v18 = BYTE11(v31);
  }
  int v20 = v19 ^ (v18 != 0);
  if ((v20 & 1) == 0)
  {
    if (v13 == 1) {
      long long v21 = (const SDPMediaFormatAMRParams *)v37;
    }
    else {
      long long v21 = (const SDPMediaFormatAMRParams *)&v26;
    }
    long long v22 = (const SDPMediaFormatAMRParams *)v30;
    if (!v15) {
      long long v22 = v21;
    }
    if (v14 == 1) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = (const SDPMediaFormatAMRParams *)&v26;
    }
    SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(this, (SDPMediaAudioSettings *)*((unsigned __int16 *)a3 + 4), v23, v21, a4, a5, a6, v16);
  }
  uint64_t v24 = v20 ^ 1u;
  *(void *)&long long v26 = &unk_1F20E5C78;
  if (SBYTE7(v28) < 0) {
    operator delete(__p[0]);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v30);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v37);
  return v24;
}

void sub_1C52BA988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unsigned int a36)
{
}

double SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, const SDPMediaFormatAMRParams *a3, const SDPMediaFormatAMRParams *a4, const SDPMediaFormatAMRParams *a5, int a6, ImsPrefs *a7, const ImsPrefs *a8)
{
  int v10 = (int)a5;
  *((_WORD *)this + 14) = (_WORD)a2;
  *((_WORD *)this + 15) = *((_WORD *)a4 + 20);
  if (a6) {
    int v14 = "AMR-WB";
  }
  else {
    int v14 = "AMR";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v14);
  int v15 = std::string::operator=((std::string *)((char *)this + 280), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a6) {
      goto LABEL_6;
    }
LABEL_8:
    PreferredAMRNBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v15);
    goto LABEL_9;
  }
  if (!a6) {
    goto LABEL_8;
  }
LABEL_6:
  PreferredAMRNBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v15);
LABEL_9:
  __int16 v17 = ImsPrefs::intValue(a7, PreferredAMRNBModeKey);
  SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)v20, a3, a4, a6, v10, v17);
  *(_OWORD *)((char *)this + 328) = v21;
  double result = *(double *)&v22;
  *(_OWORD *)((char *)this + 344) = v22;
  return result;
}

void sub_1C52BAAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SDPAudioSettingsBuilder *SDPAudioSettingsBuilder::genericRemoteAMRAnswerMatchHandler(SDPAudioSettingsBuilder *this, SDPMediaAudioSettings *a2, SDPMediaFormatInfo *a3, SDPMediaFormatInfo *a4, int a5, ImsPrefs *a6, const ImsPrefs *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    long long v7 = this;
    if (*((_WORD *)this + 14) != 255) {
      return 0;
    }
    long long v37 = 0u;
    memset(v36, 0, sizeof(v36));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v36, (unsigned int *)a2 + 24);
    long long v35 = 0u;
    memset(v34, 0, sizeof(v34));
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v34, (unsigned int *)a3 + 24);
    int v13 = DWORD2(v35);
    int v14 = DWORD2(v37);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long v31 = 0u;
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v30, *((_WORD *)a3 + 4), a5);
    int v15 = isOpenOffer(a2);
    int v16 = isOpenOffer(a3);
    if (v13 == 1)
    {
      int v17 = v16;
      char v18 = (const SDPMediaFormatAMRParams *)v34;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v19 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"We don't have remote AMR format params. Setting default", 55);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      int v17 = 1;
      char v18 = (const SDPMediaFormatAMRParams *)&v30;
    }
    if (v14 == 1)
    {
      int v20 = (const SDPMediaFormatAMRParams *)v36;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v21 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"We don't have local AMR format params. Setting default", 54);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      int v15 = 1;
      int v20 = (const SDPMediaFormatAMRParams *)&v30;
    }
    if ((*((unsigned char *)v20 + 43) != 0) == (*((unsigned char *)v18 + 43) != 0)
      && (((v17 | v15) & 1) != 0 || *((unsigned __int16 *)v20 + 23) == *((unsigned __int16 *)v18 + 23)))
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio.settings");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v24 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Open offer/answer and params match.", 35);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      SDPAudioSettingsBuilder::copyAMRMediaFormatInfo(v7, (SDPMediaAudioSettings *)*((unsigned __int16 *)a2 + 4), v20, v18, a4, a5, a6, v25);
      char v23 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "sdp.audio.settings");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v22 = ims::debug((uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Offer/Answer not open. Local/remote params don't match ::", 57);
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" local params - octet: ", 23);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)", isOpen: ", 10);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)", modeset: ", 11);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" remote params - octet: ", 24);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)", isOpen: ", 10);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)", modeset: ", 11);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      char v23 = 1;
    }
    *(void *)&long long v30 = &unk_1F20E5C78;
    if (SBYTE7(v32) < 0) {
      operator delete(v31[0]);
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v34);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v36);
    return (SDPAudioSettingsBuilder *)((v23 & 1) == 0);
  }
  return this;
}

void sub_1C52BB064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned int a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(&a32);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v32 - 224));
  _Unwind_Resume(a1);
}

void SDPAudioSettingsBuilder::~SDPAudioSettingsBuilder(SDPAudioSettingsBuilder *this)
{
  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void SDPMediaAudioSettings::SDPMediaAudioSettings(SDPMediaAudioSettings *this, const SDPMediaAudioSettings *a2)
{
  SDPMediaSettings::SDPMediaSettings(this, a2);
  *uint64_t v4 = &unk_1F20B4C88;
  long long v5 = (std::string *)(v4 + 35);
  if (*((char *)a2 + 303) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 35), *((void *)a2 + 36));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 280);
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 37);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((void *)this + 38) = *((void *)a2 + 38);
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  *((unsigned char *)this + 316) = *((unsigned char *)a2 + 316);
  *((void *)this + 40) = &unk_1F20B3020;
  long long v7 = *(_OWORD *)((char *)a2 + 328);
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)((char *)a2 + 344);
  *(_OWORD *)((char *)this + 328) = v7;
  long long v9 = *(_OWORD *)((char *)a2 + 392);
  long long v8 = *(_OWORD *)((char *)a2 + 408);
  long long v10 = *(_OWORD *)((char *)a2 + 376);
  *((void *)this + 53) = *((void *)a2 + 53);
  *(_OWORD *)((char *)this + 392) = v9;
  *(_OWORD *)((char *)this + 408) = v8;
  *(_OWORD *)((char *)this + 376) = v10;
  *(_OWORD *)((char *)this + 360) = *(_OWORD *)((char *)a2 + 360);
}

void sub_1C52BB2C4(_Unwind_Exception *a1)
{
  SDPMediaSettings::~SDPMediaSettings(v1);
  _Unwind_Resume(a1);
}

void SDPMediaSettings::SDPMediaSettings(SDPMediaSettings *this, const SDPMediaSettings *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20E0618;
  *((void *)this + 3) = *((void *)a2 + 3);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(void *)((char *)this + 36) = *(void *)((char *)a2 + 36);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 11) = *((void *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v4;
  }
  *((void *)this + 12) = *((void *)a2 + 12);
  std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)((char *)this + 104), (const SDPMediaSettings *)((char *)a2 + 104));
  std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)((char *)this + 192), (const SDPMediaSettings *)((char *)a2 + 192));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 32))(&v8);
    long long v6 = v8;
    long long v8 = 0uLL;
    long long v7 = (std::__shared_weak_count *)*((void *)this + 2);
    *(_OWORD *)((char *)this + 8) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
}

void sub_1C52BB40C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

SDPMediaCrypto *std::__optional_copy_base<SDPMediaCrypto,false>::__optional_copy_base[abi:ne180100](SDPMediaCrypto *this, const SDPMediaCrypto *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    SDPMediaCrypto::SDPMediaCrypto(this, a2);
    *((unsigned char *)this + 80) = 1;
  }
  return this;
}

void sub_1C52BB4B0(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 80)) {
    SDPMediaCrypto::~SDPMediaCrypto(v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaCrypto::SDPMediaCrypto(SDPMediaCrypto *this, const SDPMediaCrypto *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20DBE20;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 7) - *((void *)a2 + 6));
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
}

void sub_1C52BB5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaRTPMap::SDPMediaRTPMap(SDPMediaRTPMap *this, const SDPMediaRTPMap *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20E7518;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  long long v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
}

void sub_1C52BB72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)uint64_t v14 = v16;
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaSettings::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v4 + 32))(&v8);
      long long v5 = v8;
      long long v8 = 0uLL;
      long long v6 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v5;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        if (*((void *)&v8 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
        }
      }
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(void *)(a1 + 36) = *(void *)(a2 + 36);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
    std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 192), (unsigned __int8 *)(a2 + 192));
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;

  long long v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
  std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>((SDPMediaCrypto *)(a1 + 192), (unsigned __int8 *)(a2 + 192));
  return a1;
}

void std::__optional_storage_base<SDPMediaCrypto,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<SDPMediaCrypto,false> const&>(SDPMediaCrypto *a1, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)a1 + 80) == a2[80])
  {
    if (*((unsigned char *)a1 + 80))
    {
      SDPMediaCrypto::operator=((uint64_t)a1, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)a1 + 80))
  {
    SDPMediaCrypto::~SDPMediaCrypto(a1);
    *(unsigned char *)(v2 + 80) = 0;
  }
  else
  {
    SDPMediaCrypto::SDPMediaCrypto(a1, (const SDPMediaCrypto *)a2);
    *(unsigned char *)(v3 + 80) = 1;
  }
}

uint64_t SDPMediaCrypto::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  if (a1 != a2) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

unsigned int *std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor(unsigned int *a1, unsigned int *a2)
{
  *(unsigned char *)a1 = 0;
  a1[30] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1C52BB980(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1> const&>(unsigned int *result, unsigned int *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[30];
  if (v4 != -1) {
    double result = (unsigned int *)(*(&off_1F20BBD60 + v4))((int)&v7, (SDPMediaFormatUnknownParams *)result);
  }
  v3[30] = -1;
  uint64_t v5 = a2[30];
  if (v5 != -1)
  {
    double result = (unsigned int *)off_1F20BBD90[v5]((int)&v6, (SDPMediaFormatUnknownParams *)v3, (SDPMediaFormatUnknownParams *)a2);
    v3[30] = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatUnknownParams *this, SDPMediaFormatUnknownParams *a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatAMRParams *this, SDPMediaFormatAMRParams *a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatEVSParams *this, SDPMediaFormatEVSParams *a3)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatParams *this, uint64_t a3)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(void *)uint64_t v4 = &unk_1F20E2998;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a3 + 44);
  *(void *)(v4 + 48) = *(void *)(a3 + 48);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS8_S9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, SDPMediaFormatParams *this, uint64_t a3)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(void *)uint64_t v4 = &unk_1F20E2A10;
  *(_WORD *)(v4 + 42) = *(_WORD *)(a3 + 42);
}

void SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(SDPMediaFormatUnknownParams *this, const SDPMediaFormatUnknownParams *a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, *((_WORD *)a2 + 20));
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3A68;
  uint64_t v4 = v3 + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 3);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C52BBB70(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20E5C78;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<isOpenOffer(SDPMediaFormatInfo &)::$_0,isOpenOffer(SDPMediaFormatInfo &)::$_1,isOpenOffer(SDPMediaFormatInfo &)::$_2,isOpenOffer(SDPMediaFormatInfo &)::$_3,isOpenOffer(SDPMediaFormatInfo &)::$_4,isOpenOffer(SDPMediaFormatInfo &)::$_5,isOpenOffer(SDPMediaFormatInfo &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
}

uint64_t std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100](uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    long long v5 = a2;
    char v6 = 0;
    char v7 = &a2[2 * a3];
    while (1)
    {
      uint64_t v16 = 0;
      if (*(void **)a1 == v4)
      {
        long long v9 = v4;
        if (v6) {
          goto LABEL_11;
        }
      }
      else
      {
        long long v8 = v4;
        if (v6)
        {
          do
          {
            long long v9 = v6;
            char v6 = (void *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            long long v9 = (void *)v8[2];
            BOOL v10 = *v9 == (void)v8;
            long long v8 = v9;
          }
          while (v10);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9 + 4, (void **)v5) & 0x80) == 0)
        {
          __int16 v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v16, (void **)v5);
          goto LABEL_12;
        }
        if (*v4)
        {
LABEL_11:
          uint64_t v16 = v9;
          __int16 v11 = (uint64_t **)(v9 + 1);
LABEL_12:
          if (*v11) {
            goto LABEL_20;
          }
          goto LABEL_16;
        }
      }
      uint64_t v16 = v4;
      __int16 v11 = (uint64_t **)v4;
LABEL_16:
      long long v12 = (uint64_t *)operator new(0x40uLL);
      int v13 = (std::string *)(v12 + 4);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v14 = *v5;
        v12[6] = *((void *)v5 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[7] = *((void *)v5 + 3);
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v12);
LABEL_20:
      v5 += 2;
      if (v5 == v7) {
        return a1;
      }
      char v6 = (void *)*v4;
    }
  }
  return a1;
}

void sub_1C52BBE38(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v12 = 0;
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  char v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    long long v8 = *a3;
    char v6 = (uint64_t *)operator new(0x40uLL);
    long long v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v6[6] = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_1C52BBF00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::destroy(a1[1]);
    SDPMediaAudioSettings::~SDPMediaAudioSettings(a1 + 5);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,SDPMediaAudioSettings>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SDPMediaAudioSettings>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SDPMediaAudioSettings>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  char v6 = a1 + 1;
  long long v5 = a1[1];
  char v7 = a1 + 1;
  long long v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 16);
        if (v9 <= a2) {
          break;
        }
        long long v5 = *v8;
        char v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        char v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12[2] = 1;
    long long v10 = (char *)operator new(0x1D8uLL);
    v12[1] = v6;
    *((_WORD *)v10 + 16) = *a3;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 216) = 0u;
    *(_OWORD *)(v10 + 232) = 0u;
    *(_OWORD *)(v10 + 248) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 296) = 0u;
    *(_OWORD *)(v10 + 312) = 0u;
    *(_OWORD *)(v10 + 328) = 0u;
    *(_OWORD *)(v10 + 344) = 0u;
    *(_OWORD *)(v10 + 360) = 0u;
    *(_OWORD *)(v10 + 376) = 0u;
    *(_OWORD *)(v10 + 392) = 0u;
    *(_OWORD *)(v10 + 408) = 0u;
    *(_OWORD *)(v10 + 424) = 0u;
    *(_OWORD *)(v10 + 440) = 0u;
    *(_OWORD *)(v10 + 456) = 0u;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_OWORD *)(v10 + 280) = 0u;
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)(v10 + 40));
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void SDPMediaAudioSettings::SDPMediaAudioSettings(SDPMediaAudioSettings *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0xFF00FF00000000;
  *((_WORD *)this + 16) = 0;
  *(void *)((char *)this + 36) = 0x100000001;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 272) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *(void *)this = &unk_1F20B4C88;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0x1F401F4000FF00FFLL;
  *((_DWORD *)this + 78) = 15728660;
  *((unsigned char *)this + 316) = 0;
  *((void *)this + 40) = &unk_1F20B3020;
  *((unsigned char *)this + 328) = 0;
  *(void *)((char *)this + 330) = 0x2000000000000;
  *((_WORD *)this + 169) = 2;
  *(void *)((char *)this + 340) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *(void *)((char *)this + 373) = 0;
  *((void *)this + 46) = 0;
  *((_OWORD *)this + 24) = xmmword_1C56CA700;
  *((_WORD *)this + 200) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 131074;
  *((_WORD *)this + 212) = 0;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,SDPMediaAudioSettings>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      SDPMediaAudioSettings::~SDPMediaAudioSettings(v1 + 5);
    }
    operator delete(v1);
  }
}

uint64_t _GLOBAL__sub_I_SDPAudioSettingsBuilder_cpp()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v3, "EVS");
  uint64_t v4 = SDPAudioSettingsBuilder::RemoteEVSOfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v5, "AMR");
  char v6 = SDPAudioSettingsBuilder::RemoteAMROfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v7, "AMR-WB");
  long long v8 = SDPAudioSettingsBuilder::RemoteAMRWBOfferMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v9, "telephone-event");
  long long v10 = SDPAudioSettingsBuilder::RemoteDTMFOfferMatchHandler;
  std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100]((uint64_t)&_MergedGlobals_5, &v3, 4);
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v9[i + 2]) < 0) {
      operator delete((void *)v9[i]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100], &_MergedGlobals_5, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "EVS");
  uint64_t v4 = SDPAudioSettingsBuilder::RemoteEVSAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v5, "AMR");
  char v6 = SDPAudioSettingsBuilder::RemoteAMRAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v7, "AMR-WB");
  long long v8 = SDPAudioSettingsBuilder::RemoteAMRWBAnswerMatchHandler;
  std::string::basic_string[abi:ne180100]<0>(v9, "telephone-event");
  long long v10 = SDPAudioSettingsBuilder::RemoteDTMFAnswerMatchHandler;
  std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::map[abi:ne180100]((uint64_t)&unk_1EBBDBD70, &v3, 4);
  for (uint64_t j = 0; j != -16; j -= 4)
  {
    if (SHIBYTE(v9[j + 2]) < 0) {
      operator delete((void *)v9[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(SDPMediaAudioSettings *,SDPMediaFormatInfo &,SDPMediaFormatInfo &,BOOL,ImsPrefs const&)>::~map[abi:ne180100], &unk_1EBBDBD70, &dword_1C51D1000);
}

void sub_1C52BC414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 119) < 0) {
      operator delete(*(void **)(v10 + v12 + 96));
    }
    v12 -= 32;
    if (v12 == -128) {
      _Unwind_Resume(exception_object);
    }
  }
}

void XcapCallWaitingManager::fetchCallWaiting()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C52BC5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1C878E320](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallWaitingManager16fetchCallWaitingEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentCommWaiting::XcapDocumentCommWaiting((XcapDocumentCommWaiting *)v10);
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7); {
  uint64_t v8 = *(void *)(a1 + 32);
  }
  ImsResult::ImsResult((ImsResult *)v9, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1C52BC6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallWaitingManager::setCallWaiting()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C52BC8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1C878E320](v27, 0x10B2C409DA9FE99);
  if (a26 < 0) {
    operator delete(__p);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallWaitingManager14setCallWaitingEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C52BC984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallWaitingManager::~XcapCallWaitingManager(void **this)
{
  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C878E320);
}

void XcapDocumentManagerBase::~XcapDocumentManagerBase(void **this)
{
  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C878E320);
}

void XcapConfig::~XcapConfig(void **this)
{
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  uint64_t v2 = this + 37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = this + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t SipPCellularNetworkInfoHeader::setAccessNetworkInfo(SipPCellularNetworkInfoHeader *this, std::string *a2, uint64_t a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BOOL v8 = SipPAccessNetworkInfoHeader::setAccessNetworkInfo((uint64_t)this, a2, (uint64_t)&__p, 0);
  BOOL v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9) {
      return 0;
    }
  }
  else if (!v8)
  {
    return 0;
  }
  *((void *)this + 17) = a2[2].__r_.__value_.__l.__size_;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 52) = 0;
  gmtime_r((const time_t *)this + 17, (tm *)((char *)this + 152));
  *((void *)this + 27) = a3;
  uint64_t v10 = (SipPCellularNetworkInfoHeader *)((char *)this + 216);
  *((_DWORD *)this + 56) = 0;
  *((_DWORD *)this + 72) = 0;
  gmtime_r((const time_t *)this + 27, (tm *)((char *)this + 232));
  if (!*((void *)this + 17) && (a4 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "default");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v11 = ims::debug((uint64_t)&__p, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Not setting P-CNI header with invalid timestamp", 47);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  ImsInternetDateTime::toString((SipPCellularNetworkInfoHeader *)((char *)this + 136), &__p);
  uint64_t v13 = (uint64_t **)((char *)this + 72);
  v16[0] = "cell-time";
  long long v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)"cell-time", (uint64_t)&std::piecewise_construct, (long long **)v16);
  std::string::operator=((std::string *)(v14 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ImsInternetDateTime::toString(v10, &__p);
  v16[0] = "reg-time";
  int v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (void **)"reg-time", (uint64_t)&std::piecewise_construct, (long long **)v16);
  std::string::operator=((std::string *)(v15 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C52BCDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipPCellularNetworkInfoHeader::~SipPCellularNetworkInfoHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPCellularNetworkInfoHeader::clone(SipPCellularNetworkInfoHeader *this)
{
}

void sub_1C52BD058(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4032491B5CLL);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaTitle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  std::string::operator=((std::string *)(a2 + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C52BD0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaConnection(char *a1, SDPMedia *a2, const std::string *a3)
{
  SDPParser::parseConnectionHelper(a3, a1, (uint64_t)v5);
  SDPMedia::addSDPConnection(a2, (const SDPConnection *)v5);
  v5[0] = &unk_1F20CB730;
  if (v6 < 0) {
    operator delete((void *)v5[3]);
  }
  return 1;
}

void sub_1C52BD180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseMediaBandwidth(int a1, uint64_t a2, std::string *this)
{
  std::string::size_type v5 = std::string::find(this, 58, 0);
  if (v5 != -1)
  {
    memset(&v26, 0, sizeof(v26));
    std::string::basic_string(&v26, this, 0, v5, (std::allocator<char> *)&v22);
    memset(&v25, 0, sizeof(v25));
    std::string::basic_string(&v25, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    uint64_t v6 = 0;
    uint64_t v7 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    long long v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    do
    {
      uint64_t v10 = (char *)&SDPBandwidth::bwTypeLookup + 24 * v6;
      int v11 = v10[23];
      if (size == (v11 & ~(v11 >> 31)))
      {
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)&SDPBandwidth::bwTypeLookup + 24 * v6;
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)v10;
        }
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp((const void *)v8, v12, *((size_t *)&v8 + 1))) {
            goto LABEL_18;
          }
        }
        else
        {
          if (!v7) {
            goto LABEL_18;
          }
          uint64_t v13 = &v26;
          uint64_t v14 = v7;
          while (v13->__r_.__value_.__s.__data_[0] == *v12)
          {
            uint64_t v13 = (std::string *)((char *)v13 + 1);
            ++v12;
            if (!--v14) {
              goto LABEL_18;
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != 6);
    LODWORD(v6) = 0;
LABEL_18:
    int v15 = (void *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v25;
    }
    else {
      uint64_t v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = atoll((const char *)v16);
    char v23 = 1;
    uint64_t v22 = &unk_1F20BAA28;
    *(_DWORD *)uint64_t v24 = v6;
    v24[4] = v17 != 0;
    *(void *)&v24[12] = v17;
    *(_DWORD *)&v24[20] = 2;
    *(_WORD *)&v24[24] = 5;
    char v18 = (char *)operator new(0x38uLL);
    v18[24] = 1;
    *(_OWORD *)(v18 + 28) = *(_OWORD *)v24;
    *(_OWORD *)(v18 + 38) = *(_OWORD *)&v24[10];
    uint64_t v20 = *(void *)(a2 + 112);
    uint64_t v19 = (void *)(a2 + 112);
    *((void *)v18 + 1) = v19;
    *((void *)v18 + 2) = &unk_1F20BAA28;
    *(void *)char v18 = v20;
    *(void *)(v20 + 8) = v18;
    *uint64_t v19 = v18;
    ++v19[2];
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  return v5 != -1;
}

void sub_1C52BD3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaEncryptionKey()
{
  std::string::basic_string[abi:ne180100]<0>(v4, "sdp.parse");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::error((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"SDP_MEDIA_ENCRYPTION_KEY_TAG NOT IMPLEMENTED", 44);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  return 1;
}

void sub_1C52BD4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaAttribute(int a1, uint64_t a2, std::string *this)
{
  std::string::size_type v5 = std::string::find(this, 58, 0);
  memset(&v22, 0, sizeof(v22));
  std::string::basic_string(&v22, this, 0, v5, (std::allocator<char> *)&v20);
  memset(&v21, 0, sizeof(v21));
  if (v5 != -1)
  {
    std::string::basic_string(&v20, this, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    std::string v21 = v20;
  }
  uint64_t v6 = qword_1EBBDB450;
  if (!qword_1EBBDB450) {
    goto LABEL_16;
  }
  uint64_t v7 = &qword_1EBBDB450;
  do
  {
    char v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v6 + 32), (void **)&v22.__r_.__value_.__l.__data_);
    if (v8 >= 0) {
      BOOL v9 = (uint64_t *)v6;
    }
    else {
      BOOL v9 = (uint64_t *)(v6 + 8);
    }
    if (v8 >= 0) {
      uint64_t v7 = (uint64_t *)v6;
    }
    uint64_t v6 = *v9;
  }
  while (*v9);
  if (v7 == &qword_1EBBDB450
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, (void **)v7 + 4) & 0x80) != 0)
  {
LABEL_16:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string v19 = v22;
    }
    char v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v21;
    }
    SDPUnsupportedAttribute::SDPUnsupportedAttribute((uint64_t)&v20, (uint64_t)&v19, (long long *)&__p);
    uint64_t v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPUnsupportedAttribute>(a2 + 136, 0, 0, (uint64_t)&v20);
    v14[1] = a2 + 136;
    uint64_t v15 = *(void *)(a2 + 136);
    void *v14 = v15;
    *(void *)(v15 + 8) = v14;
    *(void *)(a2 + 136) = v14;
    ++*(void *)(a2 + 152);
    SDPUnsupportedAttribute::~SDPUnsupportedAttribute((void **)&v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = 1;
    if (v13 < 0) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaAttributeParsers, &v23, (void **)&v22.__r_.__value_.__l.__data_);
    int v11 = *v10;
    if (!*v10)
    {
      v20.__r_.__value_.__r.__words[2] = 0;
      int v11 = (uint64_t *)operator new(0x40uLL);
      v20.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EBBDB450;
      v20.__r_.__value_.__s.__data_[16] = 0;
      uint64_t v12 = (std::string *)(v11 + 4);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        v11[6] = v22.__r_.__value_.__r.__words[2];
      }
      v11[7] = 0;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaAttributeParsers, v23, v10, v11);
    }
    uint64_t v16 = ((uint64_t (*)(uint64_t, std::string *))v11[7])(a2, &v21);
    if ((*((unsigned char *)&v21.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_27:
    }
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1C52BD794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v24, v23);
  if (*(char *)(v25 - 73) < 0) {
    operator delete(*(void **)(v25 - 96));
  }
  if (*(char *)(v25 - 41) < 0) {
    operator delete(*(void **)(v25 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t LazuliMessage::LazuliMessage(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20BBF20;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 72) = a3;
  uint64_t v4 = (std::string *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  return a1;
}

void sub_1C52BD8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v10 + 32);
  a10 = v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<LazuliHeader>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1C52BD9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void LazuliMessage::~LazuliMessage(void **this)
{
  *this = &unk_1F20BBF20;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)(this + 4));
  uint64_t v2 = this + 1;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

char *LazuliMessage::addHeader(uint64_t a1, long long *a2, char *a3, int a4)
{
  unint64_t v13 = a2;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 32, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v13);
  uint64_t v9 = *(void *)a3;
  uint64_t v8 = *((void *)a3 + 1);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 6);
  *((void *)v7 + 5) = v9;
  *((void *)v7 + 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = (uint64_t *)(a1 + 8);
  if (a4) {
    return std::vector<std::shared_ptr<LazuliHeader>>::insert(v11, *v11, a3);
  }
  else {
    return (char *)std::vector<std::shared_ptr<LazuliHeader>>::emplace_back<std::shared_ptr<LazuliHeader>&>(v11, (long long *)a3);
  }
}

char *std::vector<std::shared_ptr<LazuliHeader>>::insert(uint64_t *a1, uint64_t a2, char *a3)
{
  char v3 = a3;
  uint64_t v6 = *a1;
  unint64_t v5 = (char *)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if ((unint64_t)v5 >= v10)
  {
    unint64_t v15 = ((uint64_t)&v5[-v6] >> 4) + 1;
    if (v15 >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v6;
    if (v17 >> 3 > v15) {
      unint64_t v15 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    int v55 = a1 + 2;
    if (v18) {
      std::string v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), v18);
    }
    else {
      std::string v19 = 0;
    }
    long long v31 = &v19[16 * v8];
    long long v52 = v19;
    *(void *)&long long v53 = v31;
    *((void *)&v53 + 1) = v31;
    long long v54 = &v19[16 * v18];
    if (v8 == v18)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v7 >> 3;
        }
        uint64_t v59 = v11;
        long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v11, v33);
        uint64_t v36 = v53;
        uint64_t v37 = *((void *)&v53 + 1) - v53;
        if (*((void *)&v53 + 1) == (void)v53)
        {
          int64x2_t v42 = vdupq_n_s64(v53);
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2)];
        }
        else
        {
          uint64_t v38 = v37 >> 4;
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2) + (v37 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v40 = 16 * v38;
          long long v41 = &v34[16 * (v33 >> 2)];
          do
          {
            *(_OWORD *)long long v41 = *(_OWORD *)v36;
            v41 += 16;
            *(void *)uint64_t v36 = 0;
            *(void *)(v36 + 8) = 0;
            v36 += 16;
            v40 -= 16;
          }
          while (v40);
          int64x2_t v42 = (int64x2_t)v53;
        }
        long long v43 = v54;
        char v56 = v52;
        long long v52 = v34;
        *(void *)&long long v53 = &v34[16 * (v33 >> 2)];
        int64x2_t v57 = v42;
        *((void *)&v53 + 1) = v39;
        long long v54 = &v34[16 * v35];
        int v58 = v43;
        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(&v56);
        long long v31 = (char *)*((void *)&v53 + 1);
      }
      else
      {
        unint64_t v32 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v32 = v8 + 1;
        }
        v31 -= 16 * (v32 >> 1);
        *(void *)&long long v53 = v31;
        *((void *)&v53 + 1) = v31;
      }
    }
    *(void *)long long v31 = *(void *)v3;
    uint64_t v44 = *((void *)v3 + 1);
    *((void *)v31 + 1) = v44;
    if (v44)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      long long v31 = (char *)*((void *)&v53 + 1);
    }
    *((void *)&v53 + 1) = v31 + 16;
    uint64_t v45 = v53;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<LazuliHeader>>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>>(v11, (uint64_t)v9, v9, *a1, (void *)*a1, v53, v53);
    *(void *)&long long v53 = v46;
    uint64_t v47 = (char *)a1[1];
    __int16 v48 = (_OWORD *)*((void *)&v53 + 1);
    if (v47 != v9)
    {
      do
      {
        *v48++ = *(_OWORD *)v9;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        v9 += 16;
      }
      while (v9 != v47);
      uint64_t v46 = v53;
      uint64_t v9 = (char *)a1[1];
    }
    long long v49 = (void *)*a1;
    *a1 = v46;
    a1[1] = (uint64_t)v48;
    uint64_t v50 = a1[2];
    a1[2] = (uint64_t)v54;
    *((void *)&v53 + 1) = v9;
    long long v54 = (char *)v50;
    long long v52 = v49;
    *(void *)&long long v53 = v49;
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(&v52);
    return (char *)v45;
  }
  else if (v9 == v5)
  {
    long long v30 = *(_OWORD *)a3;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(v9 + 16);
  }
  else
  {
    uint64_t v12 = v9 + 16;
    unint64_t v13 = v5 - 16;
    uint64_t v14 = (_OWORD *)a1[1];
    while (v13 < v5)
    {
      *v14++ = *(_OWORD *)v13;
      *(void *)unint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      v13 += 16;
    }
    a1[1] = (uint64_t)v14;
    if (v5 != v12)
    {
      std::string v20 = (std::__shared_weak_count **)(v5 - 8);
      uint64_t v21 = v6 + 16 * v8 - 16;
      uint64_t v22 = 16 * ((v5 - v12) >> 4);
      do
      {
        uint64_t v23 = (void *)(v21 + v22);
        long long v24 = *(_OWORD *)(v21 + v22);
        *uint64_t v23 = 0;
        v23[1] = 0;
        uint64_t v25 = *v20;
        *(_OWORD *)(v20 - 1) = v24;
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        v20 -= 2;
        v22 -= 16;
      }
      while (v22);
    }
    if (v9 <= v3) {
      v3 += 16 * (a1[1] > (unint64_t)v3);
    }
    uint64_t v27 = *(void *)v3;
    uint64_t v26 = *((void *)v3 + 1);
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)uint64_t v9 = v27;
    uint64_t v28 = v6 + 16 * v8;
    char v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(void *)(v28 + 8) = v26;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  return v9;
}

void sub_1C52BDE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void *std::vector<std::shared_ptr<LazuliHeader>>::emplace_back<std::shared_ptr<LazuliHeader>&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)v4, v13);
    unint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<LazuliHeader>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1C52BDF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void LazuliMessage::messageId(LazuliMessage *this@<X0>, void *a2@<X8>)
{
  char v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 4, "Message-ID");
  if (!v3)
  {
    unint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)v3 + 5);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v6) {
      return;
    }
    goto LABEL_6;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if (!v6) {
    return;
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C52BE048(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL LazuliMessage::isFinal(LazuliMessage *this)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 4, "Byte-Range");
  if (!v1) {
    return 1;
  }
  uint64_t v2 = v1;
  char v3 = (const void *)*((void *)v1 + 5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3
  {
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    return 1;
  }
  unint64_t v6 = v5;
  if (!v4) {
    return v5[14] == v5[15];
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  BOOL v7 = v6[14] == v6[15];
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void LazuliMessage::encodeHeaders(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  char v3 = *(uint64_t **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v5 = *v2;
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 64))(v5, a2, 0);
      LoggableString::LoggableString((LoggableString *)__p, "\r\n");
      (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
      if (v8 < 0) {
        break;
      }
      if (v6) {
        goto LABEL_6;
      }
LABEL_7:
      v2 += 2;
      if (v2 == v3) {
        return;
      }
    }
    operator delete(__p[0]);
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_7;
  }
}

void sub_1C52BE254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliMessage::encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  LazuliMessage::encodeHeaders(a1, a2);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3);
    }
  }
  else if (!*(unsigned char *)(a1 + 127))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3);
  }
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1 + 104);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3);
}

void sub_1C52BE404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliMessage::encodeBody(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 127))
  {
    return;
  }
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
  uint64_t v4 = a1 + 104;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v4);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 40))(a2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C52BE534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliMessage::log(uint64_t a1, uint64_t a2)
{
  return a2;
}

void LazuliMessage::loggableName(LazuliMessage *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)this + 48))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C52BE5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliMessage::transactionId(LazuliMessage *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((void *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 12);
  }
}

uint64_t std::vector<std::shared_ptr<LazuliHeader>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<LazuliHeader>>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<LazuliHeader>>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  void v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<LazuliHeader>>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<LazuliHeader>>,std::reverse_iterator<std::shared_ptr<LazuliHeader>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1C52BEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliHeader>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x38uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *((unsigned char *)a4 + 16) = 1;
}

void sub_1C52BEAAC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaAcceptTypes::SDPMediaAcceptTypes(uint64_t a1, long long **a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "accept-types");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v6;
  }
  *(void *)a1 = &unk_1F20BBF90;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1C52BEBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptTypes::SDPMediaAcceptTypes(SDPMediaAcceptTypes *this, const SDPMediaAcceptTypes *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20BBF90;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
}

void sub_1C52BECF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptTypes::~SDPMediaAcceptTypes(void **this)
{
  *this = &unk_1F20BBF90;
  uint64_t v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SDPMediaAcceptTypes::value@<X0>(SDPMediaAcceptTypes *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v4 = *((void *)this + 6) - *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 / 24;
    unint64_t v8 = v7 - 1;
    if (v7 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v7;
    }
    do
    {
      uint64_t v10 = *((void *)this + 5) + v5;
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = *((void *)this + 5) + v5;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v12, v13);
      if (v6 < v8) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      }
      ++v6;
      v5 += 24;
    }
    while (v9 != v6);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(void *)&v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(*(void *)&v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v15[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v19);
}

void sub_1C52BEFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *SDPMediaAcceptTypes::key@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "accept-types");
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  int v11 = a2 - 24;
  uint64_t v12 = (void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2 - 3, v12) & 0x80) != 0)
          {
            long long v31 = v12[2];
            long long v29 = *(_OWORD *)v12;
            long long v27 = *(_OWORD *)v11;
            v12[2] = (void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            *(_OWORD *)int v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (void *)a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (void *)a2 - 3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, v12 + 9, (void *)a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    long long v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (void *)a2 - 3);
      uint64_t v19 = 3 * v17;
      uint64_t v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (void *)a2 - 6);
      unint64_t v21 = v12 + 6;
      size_t v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (void *)a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22);
      long long v30 = *(void **)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      uint64_t v18[2] = v30;
      *(_OWORD *)long long v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (void *)a2 - 3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void **)a1) & 0x80) == 0)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((void **)a1, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = (void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24);
    uint64_t v12 = v24 + 3;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v24 + 3), (void **)a2))
    {
      a4 = -v14;
      a2 = (char *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = v24 + 3;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, a2);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v17 = v2;
    uint64_t v18 = v3;
    char v6 = (void *)(a1 + 24);
    if ((void *)(a1 + 24) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (void *)a1;
      do
      {
        uint64_t v9 = (void **)v8;
        unint64_t v8 = v6;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, v9) & 0x80) != 0)
        {
          long long v15 = *(_OWORD *)v8;
          uint64_t v16 = v8[2];
          v8[1] = 0;
          uint64_t v8[2] = 0;
          *unint64_t v8 = 0;
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = a1 + v10;
            uint64_t v12 = (void **)(a1 + v10 + 24);
            if (*(char *)(a1 + v10 + 47) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
            *(void *)(a1 + v10 + 40) = *(void *)(v11 + 16);
            *(unsigned char *)(v11 + 23) = 0;
            *(unsigned char *)uint64_t v11 = 0;
            if (!v10)
            {
              uint64_t v14 = a1;
              goto LABEL_13;
            }
            v10 -= 24;
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, (void **)(v10 + a1)) & 0x80) != 0);
          int v13 = *(char *)(a1 + v10 + 47);
          uint64_t v14 = a1 + v10 + 24;
          if (v13 < 0) {
            operator delete(*(void **)v14);
          }
LABEL_13:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
        }
        char v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v16 = v2;
    uint64_t v17 = v3;
    char v5 = a1;
    char v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v7 = a1 - 3;
      do
      {
        unint64_t v8 = (void **)v5;
        char v5 = v6;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, v8) & 0x80) != 0)
        {
          long long v14 = *(_OWORD *)v5;
          long long v15 = (void *)v5[2];
          v5[1] = 0;
          v5[2] = 0;
          *char v5 = 0;
          uint64_t v9 = v7;
          do
          {
            uint64_t v10 = (void **)(v9 + 6);
            if (*((char *)v9 + 71) < 0) {
              operator delete(*v10);
            }
            *(_OWORD *)uint64_t v10 = *(_OWORD *)(v9 + 3);
            v9[8] = v9[5];
            *((unsigned char *)v9 + 47) = 0;
            *((unsigned char *)v9 + 24) = 0;
            char v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v9);
            v9 -= 3;
          }
          while (v11 < 0);
          int v12 = *((char *)v9 + 71);
          int v13 = (void **)(v9 + 6);
          if (v12 < 0) {
            operator delete(*v13);
          }
          *(_OWORD *)int v13 = v14;
          v13[2] = v15;
        }
        char v6 = v5 + 3;
        v7 += 3;
      }
      while (v5 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(void **a1, void **a2, void *a3)
{
  char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  int v7 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      unint64_t v21 = a1[2];
      long long v22 = *(_OWORD *)a1;
      long long v23 = (void *)a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
    }
    else
    {
      uint64_t v9 = a1[2];
      long long v10 = *(_OWORD *)a1;
      char v11 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v11;
      *(_OWORD *)a2 = v10;
      a2[2] = v9;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        int v12 = a2[2];
        long long v13 = *(_OWORD *)a2;
        long long v14 = (void *)a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v14;
        *(_OWORD *)a3 = v13;
        a3[2] = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0) {
      return 0;
    }
    long long v15 = a2[2];
    long long v16 = *(_OWORD *)a2;
    uint64_t v17 = (void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v17;
    *(_OWORD *)a3 = v16;
    a3[2] = v15;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
    {
      uint64_t v18 = a1[2];
      long long v19 = *(_OWORD *)a1;
      uint64_t v20 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v20;
      *(_OWORD *)a2 = v19;
      a2[2] = v18;
      return 2;
    }
  }
  return 1;
}

void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(void **a1, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v14 = *(_OWORD *)a1;
  long long v15 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)(a2 - 24)) & 0x80) != 0)
  {
    char v5 = a1;
    do
      v5 += 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v5) & 0x80) == 0);
  }
  else
  {
    uint64_t v4 = a1 + 3;
    do
    {
      char v5 = v4;
      if ((unint64_t)v4 >= v2) {
        break;
      }
      char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v4);
      uint64_t v4 = v5 + 3;
    }
    while ((v6 & 0x80) == 0);
  }
  if ((unint64_t)v5 < v2)
  {
    do
      v2 -= 24;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v2) & 0x80) != 0);
  }
  while ((unint64_t)v5 < v2)
  {
    long long v7 = *(_OWORD *)v5;
    uint64_t v17 = v5[2];
    long long v16 = v7;
    long long v8 = *(_OWORD *)v2;
    v5[2] = *(void **)(v2 + 16);
    *(_OWORD *)char v5 = v8;
    long long v9 = v16;
    *(void *)(v2 + 16) = v17;
    *(_OWORD *)unint64_t v2 = v9;
    do
      v5 += 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, v5) & 0x80) == 0);
    do
      v2 -= 24;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, (void **)v2) & 0x80) != 0);
  }
  long long v10 = v5 - 3;
  if (v5 - 3 == a1)
  {
    if (*((char *)v5 - 1) < 0) {
      operator delete(*a1);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*a1);
    }
    long long v11 = *(_OWORD *)v10;
    a1[2] = *(v5 - 1);
    *(_OWORD *)a1 = v11;
    *((unsigned char *)v5 - 1) = 0;
    *((unsigned char *)v5 - 24) = 0;
  }
  long long v12 = v14;
  *(v5 - 1) = v15;
  *(_OWORD *)long long v10 = v12;
  return v5;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, void *a2)
{
  uint64_t v4 = 0;
  long long v15 = *a1;
  uint64_t v16 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v4 += 24;
  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((long long *)((char *)a1 + v4), (void **)&v15) & 0x80) != 0);
  unint64_t v5 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v15) & 0x80) == 0);
  }
  else
  {
    do
      a2 -= 3;
    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v15) & 0x80) == 0);
  }
  if (v5 >= (unint64_t)a2)
  {
    long long v7 = (void *)((char *)a1 + v4);
  }
  else
  {
    char v6 = a2;
    long long v7 = (void *)((char *)a1 + v4);
    do
    {
      long long v17 = *(_OWORD *)v7;
      long long v8 = v17;
      uint64_t v18 = v7[2];
      uint64_t v9 = v18;
      uint64_t v10 = v6[2];
      *(_OWORD *)long long v7 = *(_OWORD *)v6;
      void v7[2] = v10;
      void v6[2] = v9;
      *(_OWORD *)char v6 = v8;
      do
        v7 += 3;
      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (void **)&v15) & 0x80) != 0);
      do
        v6 -= 3;
      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (void **)&v15) & 0x80) == 0);
    }
    while (v7 < v6);
  }
  long long v11 = (long long *)(v7 - 3);
  if (v7 - 3 == (void *)a1)
  {
    if (*((char *)v7 - 1) < 0) {
      operator delete(*(void **)a1);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *v11;
    *((void *)a1 + 2) = *(v7 - 1);
    *a1 = v12;
    *((unsigned char *)v7 - 1) = 0;
    *((unsigned char *)v7 - 24) = 0;
  }
  long long v13 = v15;
  *(v7 - 1) = v16;
  long long *v11 = v13;
  return v7 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = a2 - 3;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 - 3, (void **)a1) & 0x80) != 0)
      {
        long long v7 = *(void **)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)char v6 = v8;
        void v6[2] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, (void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), a2 - 3);
      return 1;
    default:
      uint64_t v10 = (void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, (void **)(a1 + 24), (void *)(a1 + 48));
      long long v11 = (void **)(a1 + 72);
      if ((void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v20 = *(_OWORD *)v11;
      unint64_t v21 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      long long *v11 = 0;
      uint64_t v14 = v12;
      do
      {
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (void **)(a1 + v14 + 72);
        if (*(char *)(a1 + v14 + 95) < 0) {
          operator delete(*v16);
        }
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v15 + 48);
        *(void *)(a1 + v14 + 88) = *(void *)(v15 + 64);
        *(unsigned char *)(v15 + 71) = 0;
        *(unsigned char *)(v15 + 48) = 0;
        if (v14 == -48)
        {
          uint64_t v19 = a1;
          goto LABEL_15;
        }
        char v17 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (void **)(a1 + v14 + 24));
        v14 -= 24;
      }
      while (v17 < 0);
      int v18 = *(char *)(a1 + v14 + 95);
      uint64_t v19 = a1 + v14 + 72;
      if (v18 < 0) {
        operator delete(*(void **)v19);
      }
LABEL_15:
      *(_OWORD *)uint64_t v19 = v20;
      *(void *)(v19 + 16) = v21;
      if (++v13 == 8) {
        return v11 + 3 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 3;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2, void **a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void **)a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    long long v11 = (void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
      {
        uint64_t v15 = *(void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, void **a2, void **a3, void **a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    long long v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    long long v13 = (void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        char v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a1) & 0x80) != 0)
        {
          long long v20 = *(void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          unint64_t v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

void *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if ((void *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)a1) & 0x80) != 0)
        {
          uint64_t v15 = v14[2];
          long long v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          void v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      uint64_t v19 = a2 - 3;
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (void *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *(_OWORD *)v19;
          *(void *)(v23 + 16) = v19[2];
          *(_OWORD *)uint64_t v23 = v25;
          *uint64_t v19 = v20;
          v19[1] = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1C52C00C8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    long long v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v12 = a1 + 24 * v11;
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 < a3
        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v11), (void **)(v12 + 24)) & 0x80u) != 0)
      {
        v12 += 24;
        uint64_t v11 = v13;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v12, (void **)v7) & 0x80) == 0)
      {
        __n128 v19 = *v7;
        unint64_t v20 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          uint64_t v15 = (__n128 *)v12;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v16 = *(__n128 *)v12;
          v7[1].n128_u64[0] = *(void *)(v12 + 16);
          *long long v7 = v16;
          *(unsigned char *)(v12 + 23) = 0;
          *(unsigned char *)uint64_t v12 = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = a1 + 24 * v17;
          uint64_t v18 = 2 * v11 + 2;
          if (v18 < a3
            && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v17), (void **)(v12 + 24)) & 0x80u) != 0)
          {
            v12 += 24;
            uint64_t v17 = v18;
          }
          long long v7 = v15;
          uint64_t v11 = v17;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v12, (void **)&v19) & 0x80) != 0)
          {
            if (v15[1].n128_i8[7] < 0) {
              operator delete((void *)v15->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v19;
        v15[1].n128_u64[0] = v20;
        *uint64_t v15 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 24 * v5 + 24;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v8, (void **)(v8 + 24)) & 0x80u) != 0)
    {
      v8 += 24;
      uint64_t v5 = v10;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v11 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    *(unsigned char *)(v8 + 23) = 0;
    *(unsigned char *)uint64_t v8 = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = (long long *)(a1 + 24 * v7);
    uint64_t v9 = (long long *)(a2 - 24);
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (void **)(a2 - 24)) & 0x80) != 0)
    {
      long long v13 = *v9;
      uint64_t v14 = *((void *)v9 + 2);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)uint64_t v9 = 0;
      while (1)
      {
        long long v11 = v8;
        if (*((char *)v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        long long v12 = *v8;
        *((void *)v9 + 2) = *((void *)v8 + 2);
        *uint64_t v9 = v12;
        *((unsigned char *)v8 + 23) = 0;
        *(unsigned char *)uint64_t v8 = 0;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 24 * v7);
        uint64_t v9 = v11;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (void **)&v13) & 0x80) == 0)
        {
          if (*((char *)v11 + 23) < 0) {
            operator delete(*(void **)v11);
          }
          break;
        }
      }
      double result = *(double *)&v13;
      long long *v11 = v13;
      *((void *)v11 + 2) = v14;
    }
  }
  return result;
}

void SipDialogManager::SipDialogManager(SipDialogManager *this, SipUserAgent *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F20B33E8;
  *((void *)this + 1) = &unk_1F20B3658;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 16, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *(void *)this = &unk_1F20BBFE8;
  *((void *)this + 1) = &unk_1F20BC058;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 2) = &unk_1F20BC0A0;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 44) = 1065353216;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = SipRequest::kMethodAck;
  __p.__r_.__value_.__r.__words[2] = 0x300000000000000;
  long long v7 = SipRequest::kMethodBye;
  uint64_t v8 = 0x300000000000000;
  long long v9 = *(_OWORD *)"CANCEL";
  uint64_t v10 = 0x600000000000000;
  uint64_t v12 = 0x400000000000000;
  long long v11 = *(_OWORD *)"INFO";
  uint64_t v14 = 0x600000000000000;
  long long v13 = *(_OWORD *)"INVITE";
  uint64_t v16 = 0x700000000000000;
  long long v15 = *(_OWORD *)"MESSAGE";
  long long v17 = *(_OWORD *)"NOTIFY";
  uint64_t v18 = 0x600000000000000;
  uint64_t v20 = 0x700000000000000;
  long long v19 = *(_OWORD *)"OPTIONS";
  long long v21 = *(_OWORD *)"PRACK";
  uint64_t v22 = 0x500000000000000;
  uint64_t v24 = 0x500000000000000;
  long long v23 = *(_OWORD *)"REFER";
  uint64_t v26 = 0x600000000000000;
  long long v25 = *(_OWORD *)"UPDATE";
  do
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)((char *)&__p.__r_.__value_.__l.__data_ + v4), (uint64_t)&__p + v4);
    v4 += 24;
  }
  while (v4 != 264);
  uint64_t v5 = 264;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v5 - 24));
    }
    v5 -= 24;
  }
  while (v5);
  *((void *)this + 17) = a2;
}

void sub_1C52C06F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::~SipDialogManager(SipDialogManager *this)
{
  *(void *)this = &unk_1F20BBFE8;
  *((void *)this + 1) = &unk_1F20BC058;
  *((void *)this + 2) = &unk_1F20BC0A0;
  SipDialogManager::deinitialize(this);
  std::__tree<std::string>::destroy((uint64_t)this + 184, *((char **)this + 24));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 144);
  int v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  SipDialogManager::~SipDialogManager(this);
  JUMPOUT(0x1C878E320);
}

void SipDialogManager::deinitialize(SipDialogManager *this)
{
  int v2 = (void *)((char *)this + 16);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"deinitializing bambi dialogs", 28);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v4 = (uint64_t *)v2[18];
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (long long *)(v4 + 2);
      if ((unint64_t)v5 >= v21)
      {
        uint64_t v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v19, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          long long v7 = *v6;
          v5->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        ++v5;
      }
      uint64_t v20 = v5;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
    for (uint64_t i = v19; (std::string *)i != v5; i += 24)
    {
      v16[0] = 0;
      v16[1] = 0;
      (*(void (**)(SipDialog **__return_ptr, SipDialogManager *, uint64_t))(*(void *)this + 24))(v16, this, i);
      if (v16[0])
      {
        SipDialog::forceDeinitialization(v16[0]);
      }
      else
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*v2 + 48))(v2);
        (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"dialog ", 7);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, i);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" disappeared during deinitialization", 36);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
      }
      if (v16[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16[1]);
      }
    }
  }
  uint64_t v10 = *((void *)this + 2);
  if (*((void *)this + 21))
  {
    uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v2);
    (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v11);
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" dialogs remaining after deinitialize.  Clearing.", 49);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v12 = v2 + 16;
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v18 = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    long long v17 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)v16, (uint64_t)v12);
    if (*((void *)this + 21))
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node((uint64_t)v12, *((void **)this + 20));
      *((void *)this + 20) = 0;
      uint64_t v13 = *((void *)this + 19);
      if (v13)
      {
        for (uint64_t j = 0; j != v13; ++j)
          *(void *)(*v12 + 8 * j) = 0;
      }
      *((void *)this + 21) = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)v16);
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(void *))(v10 + 64))(v2);
    (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"all bambi dialogs deinitialized", 31);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
  }
  v16[0] = (SipDialog *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
}

void sub_1C52C0CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialogManager::~SipDialogManager(SipDialogManager *this)
{
}

{
  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 16));
}

{
  uint64_t vars8;

  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

void SipDialogManager::initializeMobileOriginatedDialog(SipDialogManager *this, const SipUri *a2, const SipUri *a3)
{
  if (*((void *)a2 + 17))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 16);
    *(void *)&long long v12 = *((void *)a2 + 15);
    if (!v5 || (*((void *)&v12 + 1) = std::__shared_weak_count::lock(v5)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>(&v14, &v12);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
    long long v7 = v14;
    double v8 = SipDialog::initializeMobileOriginated((SipDialog *)v14, a3, (uint64_t)&v12);
    char v9 = (*(uint64_t (**)(void, void, double))(**((void **)&v12 + 1) + 24))(*((void *)&v12 + 1), v13, v8);
    ImsResult::~ImsResult((ImsResult *)&v12);
    if (v9)
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      uint64_t v10 = v15;
      v11[0] = v7;
      v11[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipDialogManager::addDialog((uint64_t)a2, v11);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      *(void *)this = v7;
      *((void *)this + 1) = v10;
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

void sub_1C52C0F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::addDialog(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"added [Dialog ", 14);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, *a2 + 1544);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"] to map", 8);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  char v9 = (unsigned __int8 *)(*a2 + 1544);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3 + 128, v9, (uint64_t)&std::piecewise_construct, (long long **)&v9);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  double v8 = (std::__shared_weak_count *)*((void *)v5 + 6);
  *((void *)v5 + 5) = v7;
  *((void *)v5 + 6) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void SipDialogManager::updateDialogMap(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__erase_unique<std::string>((void *)(a1 + 144), (unsigned __int8 *)a2);
  }
  long long v12 = a3;
  double v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v12);
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
  *((void *)v8 + 5) = v10;
  *((void *)v8 + 6) = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void SipDialogManager::initializeSession(SipDialogManager *this@<X0>, const SipUri *a2@<X1>, const BambiCallOptions *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v13, this, a2);
  uint64_t v7 = v13;
  if (v13)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    SipSession::create(v7 + 5, (SipSession **)a4);
    double v8 = *(SipSession **)a4;
    v12[0] = v7;
    v12[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSession::initializeWithOptions((uint64_t)v8, (uint64_t)v12, (uint64_t)a3);
  }
  uint64_t v10 = *((void *)this + 2);
  uint64_t v9 = (char *)this + 16;
  uint64_t v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
  (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"unable to initialize MO dialog", 30);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C52C1444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  long long v17 = *(std::__shared_weak_count **)(v14 + 8);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::initializeSession(SipDialogManager *this@<X0>, const SipUri *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  long long v29 = 0;
  long long v30 = 0;
  SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v29, this, a2);
  uint64_t v7 = v29;
  if (v29)
  {
    double v8 = (const char *)&a3[1];
    SipIdString::set((uint64_t)&v29[67].__r_.__value_.__r.__words[2], a3 + 1);
    uint64_t v9 = (const char *)&a3[2];
    SipIdString::set((uint64_t)&v7[70], a3 + 2);
    if (SHIBYTE(a3[3].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a3[3].__r_.__value_.__l.__size_) {
        goto LABEL_8;
      }
    }
    else if (!*((unsigned char *)&a3[3].__r_.__value_.__s + 23))
    {
LABEL_8:
      if (SHIBYTE(a3[5].__r_.__value_.__r.__words[2]) < 0)
      {
        if (!a3[5].__r_.__value_.__l.__size_) {
          goto LABEL_36;
        }
      }
      else if (!*((unsigned char *)&a3[5].__r_.__value_.__s + 23))
      {
        goto LABEL_36;
      }
      xpc_object_t v28 = 0;
      xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v14 = v13;
      if (v13)
      {
        xpc_object_t v28 = v13;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v28 = v14;
        if (!v14)
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v14 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x1C878F160](v14) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v14);
LABEL_20:
        xpc_release(v14);
        if (SHIBYTE(a3[1].__r_.__value_.__r.__words[2]) < 0) {
          double v8 = *(const char **)v8;
        }
        xpc_object_t v26 = xpc_string_create(v8);
        if (!v26) {
          xpc_object_t v26 = xpc_null_create();
        }
        uint64_t v24 = &v28;
        long long v25 = "kConversationId";
        xpc::dict::object_proxy::operator=((uint64_t)&v24, &v26, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v26);
        xpc_object_t v26 = 0;
        if (SHIBYTE(a3[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v9 = *(const char **)v9;
        }
        xpc_object_t v22 = xpc_string_create(v9);
        if (!v22) {
          xpc_object_t v22 = xpc_null_create();
        }
        uint64_t v24 = &v28;
        long long v25 = "kContributionId";
        xpc::dict::object_proxy::operator=((uint64_t)&v24, &v22, &v23);
        xpc_release(v23);
        xpc_object_t v23 = 0;
        xpc_release(v22);
        xpc_object_t v22 = 0;
        uint64_t v16 = (const char *)&a3[6];
        if (SHIBYTE(a3[6].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v16 = *(const char **)v16;
        }
        xpc_object_t v20 = xpc_string_create(v16);
        if (!v20) {
          xpc_object_t v20 = xpc_null_create();
        }
        uint64_t v24 = &v28;
        long long v25 = "kTransactionId";
        xpc::dict::object_proxy::operator=((uint64_t)&v24, &v20, &v21);
        xpc_release(v21);
        xpc_object_t v21 = 0;
        xpc_release(v20);
        xpc_object_t v19 = v28;
        xpc_object_t v20 = 0;
        if (v28) {
          xpc_retain(v28);
        }
        else {
          xpc_object_t v19 = xpc_null_create();
        }
        SipDialog::setGroupParams((uint64_t)v7, &v19);
        xpc_release(v19);
        xpc_object_t v19 = 0;
        xpc_release(v28);
        uint64_t v7 = v29;
LABEL_36:
        v7[75].__r_.__value_.__s.__data_[1] = a3[4].__r_.__value_.__s.__data_[16];
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        SipSession::create(v7 + 5, (SipSession **)a4);
        long long v17 = *(SipSession **)a4;
        v18[0] = v7;
        v18[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::initializeWithOptions((uint64_t)v17, (int)v18, a3);
      }
      xpc_object_t v15 = xpc_null_create();
LABEL_19:
      xpc_object_t v28 = v15;
      goto LABEL_20;
    }
    SipIdString::set((uint64_t)&v7[72].__r_.__value_.__l.__size_, a3 + 3);
    goto LABEL_8;
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v10 = (char *)this + 16;
  uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
  (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"unable to initialize MO dialog", 30);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1C52C19DC(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 - 72);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(exception_object);
}

void SipDialog::setGroupParams(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v4 = *(void **)(a1 + 1792);
  *(void *)(a1 + 1792) = v3;
  xpc_release(v4);
}

void SipDialogManager::initializeUssdSession(const SipUri *a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  SipUri::SipUri((SipUri *)v29);
  memset(&v28, 0, sizeof(v28));
  uint64_t v6 = *((void *)a1 + 17);
  uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
  SipUserAgent::publicDomain(*(SipUserAgent **)(*(void *)(v6 + 8) + 144), (uint64_t)&v28);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  memset(&v27, 0, sizeof(v27));
  uint64_t v8 = *((void *)a1 + 17);
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
  if (v9)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v9);
    uint64_t v10 = v9;
    if (v9) {
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  SipStack::phoneContext((SipStack *)v9, &v27);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  SipUri::setUser((uint64_t)v29, a2, (uint64_t)&v27);
  SipHost::SipHost((uint64_t)&__p, &v28);
  if (SHIBYTE(v31) < 0)
  {
    *(void *)&long long v31 = 3;
    uint64_t v11 = (char *)*((void *)&v30 + 1);
  }
  else
  {
    uint64_t v11 = (char *)&v30 + 8;
    HIBYTE(v31) = 3;
  }
  strcpy(v11, "sip");
  if (SBYTE7(v36) < 0)
  {
    *(unsigned char *)long long v35 = 0;
    *((void *)&v35 + 1) = 0;
  }
  else
  {
    LOBYTE(v35) = 0;
    BYTE7(v36) = 0;
  }
  if (SBYTE7(v39) < 0)
  {
    *(unsigned char *)long long v38 = 0;
    *((void *)&v38 + 1) = 0;
  }
  else
  {
    LOBYTE(v38) = 0;
    BYTE7(v39) = 0;
  }
  if (SHIBYTE(v40) < 0)
  {
    **((unsigned char **)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
  }
  else
  {
    BYTE8(v39) = 0;
    HIBYTE(v40) = 0;
  }
  if (SBYTE7(v42) < 0)
  {
    *(unsigned char *)long long v41 = 0;
    *((void *)&v41 + 1) = 0;
  }
  else
  {
    LOBYTE(v41) = 0;
    BYTE7(v42) = 0;
  }
  SipHost::operator=((uint64_t)v29 + 8, (uint64_t)&__p);
  LOBYTE(v44) = 0;
  SipHost::~SipHost((SipHost *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "user");
  std::string::basic_string[abi:ne180100]<0>(&__str, "dialstring");
  p_p = &__p;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v29[4] + 1, &__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::string::operator=((std::string *)(v12 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  long long v25 = 0;
  SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&__p, a1, (const SipUri *)v29);
  xpc_object_t v13 = (const std::string *)__p;
  if (!__p)
  {
    uint64_t v18 = *((void *)a1 + 2);
    long long v17 = (void *)((char *)a1 + 16);
    uint64_t v19 = (*(uint64_t (**)(void *))(v18 + 56))(v17);
    (*(void (**)(void *, uint64_t))(*v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    *a3 = 0;
    a3[1] = 0;
    xpc_object_t v15 = v25;
    if (!v25) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<SipUssdSession,std::allocator<SipUssdSession>,std::string const&,void>(a3, v13 + 5);
  uint64_t v14 = *a3;
  xpc_object_t v15 = v25;
  xpc_object_t v21 = v13;
  xpc_object_t v22 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, const std::string **))(*(void *)v14 + 80))(v14, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v16 = (*(uint64_t (**)(void *))(*((void *)a1 + 2) + 64))((void *)a1 + 2);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 2) + 16))((void *)a1 + 2, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"created ", 8);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(std::string::size_type *)((char *)v13->__r_.__value_.__r.__words
                                                                      + *(void *)(v13->__r_.__value_.__r.__words[0]
                                                                                  - 24))
                                          + 16))((char *)v13 + *(void *)(v13->__r_.__value_.__r.__words[0] - 24), v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" for USSD session", 17);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  v20[0] = v13;
  v20[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::addDialog((uint64_t)a1, v20);
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_36:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
LABEL_37:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  SipUri::~SipUri((SipUri *)v29);
}

void sub_1C52C1F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  long long v44 = *(std::__shared_weak_count **)(v41 + 8);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  SipUri::~SipUri((SipUri *)&a41);
  _Unwind_Resume(a1);
}

void SipDialogManager::subscribeToEventPackage(SipDialogManager *this@<X0>, SipEventPackage *a2@<X1>, const SipUri *a3@<X2>, void *a4@<X8>)
{
  xpc_object_t v15 = 0;
  uint64_t v16 = 0;
  SipDialogManager::initializeMobileOriginatedDialog((SipDialogManager *)&v15, this, a3);
  uint64_t v7 = v15;
  uint64_t v10 = *((void *)this + 2);
  uint64_t v9 = (char *)this + 16;
  uint64_t v8 = v10;
  if (v15)
  {
    uint64_t v11 = (*(uint64_t (**)(char *))(v8 + 64))(v9);
    (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"created ", 8);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(void *)&v7[*(void *)(*(void *)v7 - 24)] + 16))(&v7[*(void *)(*(void *)v7 - 24)], v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" for ", 5);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = (const std::string *)(*(uint64_t (**)(SipEventPackage *))(*(void *)a2 + 16))(a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" subscription", 13);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipDialog::subscribeToEventPackage((uint64_t)v7, a2, &__p, 0, (uint64_t)a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(char *))(v8 + 56))(v9);
    (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unable to initialize MO dialog", 30);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    *a4 = 0;
    a4[1] = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1C52C234C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::dialogWithCallId(void *a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 21), (uint64_t)a2);
  int8x8_t v7 = (int8x8_t)a1[19];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v12 = *(unsigned __int8 ***)(a1[18] + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v8 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 22), i + 16, (unsigned __int8 *)a2))
          {
            uint64_t v18 = *((void *)i + 5);
            uint64_t v19 = *((void *)i + 6);
            *a3 = v18;
            a3[1] = v19;
            if (v19) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
            }
            if (!v18)
            {
              uint64_t v21 = a1[2];
              xpc_object_t v20 = a1 + 2;
              uint64_t v22 = (*(uint64_t (**)(void *))(v21 + 64))(v20);
              (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"we have dialog weak reference. But dialog is gone ", 50);
              *(unsigned char *)(v22 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)v23, a2);
              (*(void (**)(uint64_t, void **))(*(void *)v22 + 56))(v22, v23);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v22 + 17) = 0;
              if (v26 < 0) {
                operator delete(__p);
              }
              if (v24 < 0) {
                operator delete(v23[0]);
              }
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = a1[2];
  xpc_object_t v15 = a1 + 2;
  uint64_t v17 = (*(uint64_t (**)(void *))(v16 + 64))(v15);
  (*(void (**)(void *, uint64_t))(*v15 + 16))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"no existing dialog with callId ", 31);
  *(unsigned char *)(v17 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v23, a2);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 56))(v17, v23);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_1C52C26C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogManager::dialogForRequest(SipDialogManager *this, const SipRequest *a2)
{
  xpc_object_t v3 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v3) {
    uint64_t v4 = (long long *)(v3 + 64);
  }
  else {
    uint64_t v4 = &ims::kEmptyString;
  }
  uint64_t v5 = *(uint64_t (**)(SipDialogManager *, long long *))(*(void *)this + 24);
  return v5(this, v4);
}

void SipDialogManager::handleAck(SipDialogManager *this, const SipRequest *a2)
{
  memset(&v20, 0, sizeof(v20));
  if (SipMessage::headerValueAsString((uint64_t)a2, "Call-ID"))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    (*(void (**)(SipDialog **__return_ptr, SipDialogManager *, const SipRequest *))(*(void *)this + 32))(&v18, this, a2);
    if (v18)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      SipDialog::sipSession(v18, &v13);
      if (v13)
      {
        (*(void (**)(void *, const SipRequest *))(*(void *)v13 + 256))(v13, a2);
      }
      else
      {
        uint64_t v11 = *((void *)this + 2);
        unint64_t v10 = (char *)this + 16;
        uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 32))(v10);
        (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"received ACK for dialog with no SIP session", 43);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    else
    {
      uint64_t v8 = *((void *)this + 2);
      int8x8_t v7 = (char *)this + 16;
      uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 32))(v7);
      (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"received ACK with unknown Call-ID ", 34);
      *(unsigned char *)(v9 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v13, &v20);
      (*(void (**)(uint64_t, void **))(*(void *)v9 + 56))(v9, &v13);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v17 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v13);
      }
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 2);
    uint64_t v4 = (char *)this + 16;
    uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 32))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"No Call-ID header in ACK", 24);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C52C2AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::createDialogForServerTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(const SipRequest **)(*(void *)a2 + 296);
  int8x8_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)v6 + 4, "Replaces");
  if (!v7 {
    || (uint64_t v8 = (const void *)*((void *)v7 + 5)) == 0
  }
  {
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  unint64_t v10 = (uint64_t *)(a1 + 16);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"found Replaces header in INVITE", 31);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  memset(&v35, 0, sizeof(v35));
  if (v9[127] < 0) {
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v9 + 13), *((void *)v9 + 14));
  }
  else {
    std::string v35 = *(std::string *)(v9 + 104);
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v9 + 72), (void **)"from-tag");
  uint64_t v22 = (long long *)(v21 + 7);
  if (v9 + 80 == (char *)v21) {
    uint64_t v22 = &ims::kEmptyString;
  }
  if (*((char *)v22 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v22, *((void *)v22 + 1));
  }
  else {
    std::string __str = *(std::string *)v22;
  }
  memset(&v50, 0, sizeof(v50));
  xpc_object_t v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v9 + 72), (void **)"to-tag");
  char v24 = (long long *)(v23 + 7);
  if (v9 + 80 == (char *)v23) {
    char v24 = &ims::kEmptyString;
  }
  if (*((char *)v24 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v24, *((void *)v24 + 1));
  }
  else {
    std::string v50 = *(std::string *)v24;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_36;
  }
  std::string::size_type v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
  }
  if (!v26) {
    goto LABEL_36;
  }
  std::string::size_type v27 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = v50.__r_.__value_.__l.__size_;
  }
  if (!v27)
  {
LABEL_36:
    uint64_t v12 = 0;
LABEL_37:
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*v10 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v10 + 16))(a1 + 16, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"can't find matching dialog for callId: ", 39);
    *(unsigned char *)(v29 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v39, &v35);
    (*(void (**)(uint64_t, void **))(*(void *)v29 + 56))(v29, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)", fromTag: ", 11);
    *(unsigned char *)(v29 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v36, &__str);
    (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 56))(v29, &v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)", toTag: ", 9);
    *(unsigned char *)(v29 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v43, &v50);
    (*(void (**)(uint64_t, long long *))(*(void *)v29 + 56))(v29, &v43);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    if (SHIBYTE(v45) < 0) {
      operator delete(*((void **)&v44 + 1));
    }
    if (SBYTE7(v44) < 0) {
      operator delete((void *)v43);
    }
    if (v38 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42[1]) < 0) {
      operator delete(v41);
    }
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    std::string v28 = 0;
    goto LABEL_50;
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)a1 + 24))(v39, a1, &v35);
  std::string v28 = (const std::string *)v39[0];
  uint64_t v12 = (std::__shared_weak_count *)v39[1];
  if (!v39[0]) {
    goto LABEL_37;
  }
LABEL_50:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = *v10;
  if (v28)
  {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(v30 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v10 + 16))(a1 + 16, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"replaces header matches dialog:", 31);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v39, "");
    long long v32 = (ImsOutStream *)ims::debug(a1 + 24, (uint64_t)v39);
    SipDialog::printDialogInfo(v28, v32);
    if (v40 < 0) {
      operator delete(v39[0]);
    }
  }
  else
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(v30 + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*v10 + 16))(a1 + 16, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"no matching dialog found for replaces header", 44);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
  }
LABEL_7:
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 128);
  v39[0] = *(void **)(a1 + 120);
  if (!v13 || (v39[1] = std::__shared_weak_count::lock(v13)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>(&v48, (long long *)v39);
  if (v39[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39[1]);
  }
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  unint64_t v14 = (SipDialog *)v48;
  SipDialog::initializeMobileTerminated((SipDialog *)v48, v6, (uint64_t)&v43);
  if (!(*(unsigned int (**)(void, void))(**((void **)&v43 + 1) + 24))(*((void *)&v43 + 1), v44))
  {
    uint64_t v19 = SipUserAgent::config(*(SipUserAgent **)(a1 + 136));
    std::string v20 = SipRequest::bestSenderIdentity((uint64_t)v6, *(_DWORD *)(v19 + 804));
    SipDialog::setSenderIdentity(v14, v20);
  }
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v15 = a1 + 16;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"unable to initialize MT dialog: ", 32);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(long long *, uint64_t))(v43 + 16))(&v43, v17);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  ImsResult::operator=(a3, (uint64_t)&v43);
  *a4 = 0;
  a4[1] = 0;
  uint64_t v18 = v49;
  ImsResult::~ImsResult((ImsResult *)&v43);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C52C3F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  LazuliSessionOptions::~LazuliSessionOptions(&a32);
  BambiCallOptions::~BambiCallOptions(&a56);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  ImsResult::~ImsResult((ImsResult *)(v58 - 256));
  int v60 = *(std::__shared_weak_count **)(v58 - 168);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(a1);
}

void BambiCallTerminationReason::~BambiCallTerminationReason(BambiCallTerminationReason *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t SipDialogManager::handleNewServerTransaction(void *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a2 + 296);
  long long v96 = 0uLL;
  (*(void (**)(long long *__return_ptr))(*a1 + 32))(&v96);
  uint64_t v5 = v96;
  if ((void)v96)
  {
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v94 = *a2;
    int v95 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipDialog::addServerTransaction(v5, &v94);
    if (v95) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v95);
    }
    goto LABEL_48;
  }
  int8x8_t v7 = (SipUriHeader *)SipMessage::header<SipToHeader>(v4);
  if (v7) {
    uint64_t v8 = SipUriHeader::tag(v7);
  }
  else {
    uint64_t v8 = &ims::kEmptyString;
  }
  uint64_t v9 = *((void *)v8 + 1);
  if (*((char *)v8 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)v8 + 23);
  }
  unint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 112);
  if (v9)
  {
    uint64_t v11 = (unsigned __int8 *)v10(v4);
    uint64_t v12 = v11[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v11[23];
    }
    else {
      uint64_t v13 = *((void *)v11 + 1);
    }
    if (v13 != 6) {
      goto LABEL_44;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "NOTIFY", *((void *)v11 + 1))) {
        goto LABEL_44;
      }
    }
    else if (v11[23])
    {
      unint64_t v14 = "NOTIFY";
      while (*v11 == *(unsigned __int8 *)v14)
      {
        ++v11;
        ++v14;
        if (!--v12) {
          goto LABEL_33;
        }
      }
      goto LABEL_44;
    }
LABEL_33:
    uint64_t v19 = SipMessage::header<SipSubscriptionStateHeader>(v4);
    if (v19)
    {
      uint64_t v20 = *((unsigned __int8 *)v19 + 127);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = v19[14];
      }
      if (v20 == 10)
      {
        char v24 = (char *)v19[13];
        uint64_t v22 = (char *)(v19 + 13);
        xpc_object_t v23 = v24;
        long long v25 = v21 >= 0 ? v22 : v23;
        uint64_t v26 = *(void *)v25;
        uint64_t v27 = *((unsigned __int16 *)v25 + 4);
        if (v26 == *(void *)"terminated" && v27 == *(unsigned __int16 *)"ed")
        {
          uint64_t v40 = a1[2];
          long long v39 = a1 + 2;
          uint64_t v41 = (*(uint64_t (**)(void *))(v40 + 64))(v39);
          (*(void (**)(void *, uint64_t))(*v39 + 16))(v39, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"received NOTIFY with state terminated for unknown dialog. Being nice and returning a 200 OK.", 92);
          *(unsigned char *)(v41 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v41 + 17) = 0;
          uint64_t v42 = *a2;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          SipServerTransaction::rejectTransactionWithStatus(v42, 200, (uint64_t)&__p);
          goto LABEL_45;
        }
      }
    }
LABEL_44:
    uint64_t v29 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipServerTransaction::rejectTransactionWithStatus(v29, 481, (uint64_t)&__p);
LABEL_45:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_48:
      uint64_t v31 = 1;
      goto LABEL_49;
    }
    uint64_t v30 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_47:
    operator delete(v30);
    goto LABEL_48;
  }
  uint64_t v15 = (unsigned __int8 *)v10(v4);
  uint64_t v16 = v15[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v15[23];
  }
  else {
    uint64_t v17 = *((void *)v15 + 1);
  }
  if (v17 != 6) {
    goto LABEL_53;
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v15, "INVITE", *((void *)v15 + 1)))
    {
LABEL_53:
      uint64_t v31 = 0;
      goto LABEL_49;
    }
  }
  else if (v15[23])
  {
    uint64_t v18 = "INVITE";
    while (*v15 == *(unsigned __int8 *)v18)
    {
      ++v15;
      ++v18;
      if (!--v16) {
        goto LABEL_54;
      }
    }
    goto LABEL_53;
  }
LABEL_54:
  uint64_t v33 = a1[17];
  long long v34 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v33 + 16));
  std::string v35 = v34;
  if (*(unsigned char *)(*(void *)(v33 + 8) + 2681))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  else
  {
    uint64_t v36 = a1[17];
    long long v37 = *(std::__shared_weak_count **)(v36 + 16);
    if (v37)
    {
      long long v37 = std::__shared_weak_count::lock(v37);
      char v38 = v37;
      if (v37) {
        long long v37 = *(std::__shared_weak_count **)(v36 + 8);
      }
    }
    else
    {
      char v38 = 0;
    }
    if (SipStack::registeredForVoice((SipStack *)v37))
    {
      BOOL v43 = 0;
    }
    else
    {
      uint64_t v44 = a1[17];
      long long v45 = *(std::__shared_weak_count **)(v44 + 16);
      if (v45 && (long long v46 = std::__shared_weak_count::lock(v45)) != 0)
      {
        BOOL v43 = *(unsigned char *)(*(void *)(v44 + 8) + 176) == 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      else
      {
        BOOL v43 = MEMORY[0xB0] == 0;
      }
    }
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (v43)
    {
      uint64_t v47 = (*(uint64_t (**)(void *))(a1[2] + 48))(a1 + 2);
      (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"unable to create new dialog for incoming ", 41);
      *(unsigned char *)(v47 + 17) = 0;
      long long v48 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
      LoggableString::LoggableString(&__p, v48);
      (*(void (**)(uint64_t, std::string *))(*(void *)v47 + 40))(v47, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)": stack is not registered for voice", 35);
      *(unsigned char *)(v47 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v47 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&v74, 0, sizeof(v74));
      uint64_t v49 = a1[17];
      std::string v50 = *(std::__shared_weak_count **)(v49 + 16);
      if (v50 && (long long v51 = std::__shared_weak_count::lock(v50)) != 0)
      {
        uint64_t v52 = *(void *)(v49 + 8) + 3160;
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      else
      {
        uint64_t v52 = 3160;
      }
      if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)v52))
      {
        uint64_t v65 = a1[17];
        int v66 = *(std::__shared_weak_count **)(v65 + 16);
        if (v66)
        {
          int v67 = std::__shared_weak_count::lock(v66);
          if (v67) {
            uint64_t v68 = *(void *)(v65 + 8);
          }
          else {
            uint64_t v68 = 0;
          }
        }
        else
        {
          uint64_t v68 = 0;
          int v67 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(v83, "NotVoiceRegisteredNonVoiceLTE");
        SipStack::callTerminationReason(v68, (uint64_t)v83, (BambiCallTerminationReason *)&__p);
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        int v69 = HIDWORD(v88);
        std::string::operator=(&v74, &v87);
        if (v93) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v93);
        }
        if (v92) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
        }
        if (v91 < 0) {
          operator delete(v90);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
      }
      else if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v52))
      {
        int v69 = 488;
      }
      else
      {
        uint64_t v70 = a1[17];
        BOOL v71 = *(std::__shared_weak_count **)(v70 + 16);
        if (v71)
        {
          uint64_t v72 = std::__shared_weak_count::lock(v71);
          if (v72) {
            uint64_t v73 = *(void *)(v70 + 8);
          }
          else {
            uint64_t v73 = 0;
          }
        }
        else
        {
          uint64_t v73 = 0;
          uint64_t v72 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(v83, "NotVoiceRegisteredNoLTE");
        SipStack::callTerminationReason(v73, (uint64_t)v83, (BambiCallTerminationReason *)&__p);
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        int v69 = HIDWORD(v88);
        std::string::operator=(&v74, &v87);
        BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)&__p);
      }
      SipServerTransaction::rejectTransactionWithStatus(*a2, v69, (uint64_t)&v74);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_48;
      }
      uint64_t v30 = (void *)v74.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
  __p.__r_.__value_.__r.__words[2] = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  memset(&v87, 0, sizeof(v87));
  long long v53 = (std::__shared_weak_count *)a2[1];
  uint64_t v81 = *a2;
  uint64_t v82 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string *__return_ptr, void *, uint64_t *, std::string *))(*a1 + 40))(&v74, a1, &v81, &__p);
  long long v54 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0uLL;
  int v55 = (std::__shared_weak_count *)*((void *)&v96 + 1);
  long long v96 = v54;
  if (v55)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    if (v74.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__r_.__value_.__l.__size_);
    }
  }
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  int64x2_t v57 = a1 + 2;
  uint64_t v56 = a1[2];
  if ((void)v96)
  {
    uint64_t v58 = (*(uint64_t (**)(void *))(v56 + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v57 + 16))(a1 + 2, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"created ", 8);
    *(unsigned char *)(v58 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)(v96 + *(void *)(*(void *)v96 - 24)) + 16))(v96 + *(void *)(*(void *)v96 - 24), v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)" for incoming ", 14);
    *(unsigned char *)(v58 + 17) = 0;
    uint64_t v59 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    LoggableString::LoggableString(&v74, v59);
    (*(void (**)(uint64_t, std::string *))(*(void *)v58 + 40))(v58, &v74);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v58 + 17) = 0;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    int v60 = (std::__shared_weak_count *)*((void *)&v96 + 1);
    long long v80 = v96;
    if (*((void *)&v96 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v96 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    SipDialogManager::addDialog((uint64_t)a1, &v80);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    uint64_t v61 = v96;
    int v62 = (std::__shared_weak_count *)a2[1];
    uint64_t v78 = *a2;
    uint64_t v79 = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipDialog::addServerTransaction(v61, &v78);
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v74.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v74.__r_.__value_.__r.__words[2]) = 0;
    uint64_t v31 = (*(unsigned int (**)(uint64_t *, void))(_bambiDomain + 24))(&_bambiDomain, 0) ^ 1;
    ImsResult::~ImsResult((ImsResult *)&v74);
  }
  else
  {
    uint64_t v63 = (*(uint64_t (**)(void *))(v56 + 48))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v57 + 16))(v57, v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)"unable to create new dialog for incoming ", 41);
    *(unsigned char *)(v63 + 17) = 0;
    int v64 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    LoggableString::LoggableString(&v74, v64);
    (*(void (**)(uint64_t, std::string *))(*(void *)v63 + 40))(v63, &v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v63 + 17) = 0;
    (*(void (**)(std::string *, uint64_t))(__p.__r_.__value_.__r.__words[0] + 16))(&__p, v63);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v63 + 17) = 0;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    SipServerTransaction::rejectTransactionWithResult((SipServerTransaction *)*a2, (ImsResult *)&__p);
    uint64_t v31 = 1;
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_49:
  if (*((void *)&v96 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
  }
  return v31;
}

void sub_1C52C4E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)&a34);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 72);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipSubscriptionStateHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Subscription-State");
  if (!v1) {
    return 0;
  }
  int v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t SipDialogManager::dialogTerminated(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (void *)(a1 + 144);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a1 + 144), a2);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(v4, v5, (uint64_t)v13);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v6 = a1 + 16;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 64))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"removed [Dialog ", 16);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = (unsigned char *)(v8 + 17);
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 32))(v8, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"] from map", 10);
    *(unsigned char *)(v8 + 17) = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v10 = a1 + 16;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"dialogTerminated called on unknown dialog ", 42);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = (unsigned char *)(v8 + 17);
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 32))(v8, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *uint64_t v9 = 0;
  return result;
}

uint64_t SipDialogManager::handleRequest(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*a2 + 112))(a2);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 5) {
    goto LABEL_12;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "REFER", *((void *)v6 + 1))) {
      goto LABEL_12;
    }
LABEL_17:
    uint64_t v14 = *a3;
    uint64_t v13 = (std::__shared_weak_count *)a3[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v53 = 0;
    long long v54 = 0;
    (*(void (**)(std::__shared_weak_count **__return_ptr, void *, void *))(*a1 + 32))(&v53, a1, a2);
    if (v53)
    {
      uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a2 + 4, "Refer-To");
      if (v15)
      {
        uint64_t v16 = (const void *)*((void *)v15 + 5);
        if (v16)
        {
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = (uint64_t)(v17 + 176);
            uint64_t v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v17 + 176), (void **)"method");
            int v21 = (void **)(v18 + 184);
            if (v18 + 184 == (char *)v20) {
              uint64_t v22 = &ims::kEmptyString;
            }
            else {
              uint64_t v22 = (long long *)(v20 + 7);
            }
            xpc_object_t v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19, (void **)"Replaces");
            if (v21 == v23) {
              char v24 = &ims::kEmptyString;
            }
            else {
              char v24 = (long long *)(v23 + 7);
            }
            long long v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19, (void **)"to-tag");
            if (v21 == v25) {
              uint64_t v26 = &ims::kEmptyString;
            }
            else {
              uint64_t v26 = (long long *)(v25 + 7);
            }
            uint64_t v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19, (void **)"from-tag");
            if (v21 == v27) {
              std::string v28 = &ims::kEmptyString;
            }
            else {
              std::string v28 = (long long *)(v27 + 7);
            }
            uint64_t v29 = *((unsigned __int8 *)v22 + 23);
            if ((v29 & 0x80u) == 0) {
              uint64_t v30 = *((unsigned __int8 *)v22 + 23);
            }
            else {
              uint64_t v30 = *((void *)v22 + 1);
            }
            if (v30 == 6)
            {
              if ((v29 & 0x80) == 0)
              {
                if (*((unsigned char *)v22 + 23))
                {
                  uint64_t v31 = "INVITE";
                  while (*(unsigned __int8 *)v22 == *(unsigned __int8 *)v31)
                  {
                    uint64_t v22 = (long long *)((char *)v22 + 1);
                    ++v31;
                    if (!--v29) {
                      goto LABEL_61;
                    }
                  }
                  goto LABEL_51;
                }
LABEL_61:
                uint64_t v52 = 0;
                memset(v51, 0, sizeof(v51));
                long long v50 = 0u;
                memset(v49, 0, sizeof(v49));
                SipUri::SipUri((SipUri *)v49, (const SipUri *)(v18 + 104));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v50 + 8, *(void **)&v51[0]);
                v51[0] = 0uLL;
                *((void *)&v50 + 1) = v51;
                uint64_t v34 = a1[17];
                std::string v35 = *(std::__shared_weak_count **)(v34 + 16);
                if (v35 && (uint64_t v36 = std::__shared_weak_count::lock(v35)) != 0)
                {
                  uint64_t v37 = *(void *)(*(void *)(*(void *)(v34 + 8) + 136) + 248);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                  if (!v37) {
                    goto LABEL_67;
                  }
                }
                else if (!*(void *)(MEMORY[0x88] + 248))
                {
LABEL_67:
                  BOOL v43 = v53;
                  uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(v14 + 296) + 112))(*(void *)(v14 + 296));
                  std::string::basic_string[abi:ne180100]<0>(&__str, "");
                  SipDialog::sendResponse(&__str, v43, v14 + 328, v44, 200, (ImsResult *)__p);
                  ImsResult::~ImsResult((ImsResult *)__p);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  SipUri::~SipUri((SipUri *)v49);
                  uint64_t v12 = 1;
LABEL_55:
                  if (v54) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                  }
                  if (!v13) {
                    return v12;
                  }
                  long long v32 = v13;
LABEL_59:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                  return v12;
                }
                uint64_t v38 = a1[17];
                uint64_t v39 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v38 + 16));
                uint64_t v40 = *(void *)(*(void *)(*(void *)(v38 + 8) + 136) + 248);
                uint64_t v41 = a1[17];
                uint64_t v42 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v41 + 16));
                (*(void (**)(uint64_t, void, _OWORD *, long long *, long long *, long long *))(*(void *)v40 + 40))(v40, *(void *)(*(void *)(v41 + 8) + 136), v49, v24, v28, v26);
                std::__shared_weak_count::__release_shared[abi:ne180100](v42);
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                goto LABEL_67;
              }
              if (!memcmp(*(const void **)v22, "INVITE", *((void *)v22 + 1))) {
                goto LABEL_61;
              }
            }
LABEL_51:
            std::string::basic_string[abi:ne180100]<0>(__p, "Only INVITE refers accepted");
            SipServerTransaction::sendResponse((void *)v14, 488, __p);
            goto LABEL_52;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Missing Refer-To header");
      SipServerTransaction::sendResponse((void *)v14, 400, __p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Dialog Does Not Exist");
      SipServerTransaction::sendResponse((void *)v14, 481, __p);
    }
LABEL_52:
    ImsResult::~ImsResult((ImsResult *)v49);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v12 = 0;
    goto LABEL_55;
  }
  if (!v6[23]) {
    goto LABEL_17;
  }
  uint64_t v9 = "REFER";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_17;
    }
  }
LABEL_12:
  v49[0] = 0uLL;
  (*(void (**)(_OWORD *__return_ptr, void *, void *))(*a1 + 32))(v49, a1, a2);
  uint64_t v10 = *(void *)&v49[0];
  if (*(void *)&v49[0])
  {
    uint64_t v11 = (std::__shared_weak_count *)a3[1];
    uint64_t v45 = *a3;
    long long v46 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v10 + 16))(v10, a2, &v45);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v32 = (std::__shared_weak_count *)*((void *)&v49[0] + 1);
  if (*((void *)&v49[0] + 1)) {
    goto LABEL_59;
  }
  return v12;
}

void sub_1C52C577C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  SipUri::~SipUri((SipUri *)&a29);
  std::string v35 = *(std::__shared_weak_count **)(v33 - 96);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipDialogManager::handleRequest(uint64_t a1, void *a2, uint64_t *a3)
{
  return SipDialogManager::handleRequest((void *)(a1 - 8), a2, a3);
}

uint64_t SipDialogManager::handleResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v11);
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = (std::__shared_weak_count *)a3[1];
    uint64_t v9 = *a3;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 24))(v5, a2, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v7;
}

void sub_1C52C5924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipDialogManager::handleResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return SipDialogManager::handleResponse(a1 - 8, a2, a3);
}

void SipDialogManager::handleTransactionError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v9);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = (std::__shared_weak_count *)a3[1];
    uint64_t v7 = *a3;
    uint64_t v8 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, a2, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C52C5A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipDialogManager::handleTransactionError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void SipDialogManager::transactionCompleted(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v7);
  uint64_t v3 = v7;
  if (v7)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v5 = *a2;
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 40))(v3, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C52C5AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipDialogManager::transactionCompleted(uint64_t a1, uint64_t *a2)
{
}

void SipDialogManager::transactionTerminated(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v7);
  uint64_t v3 = v7;
  if (v7)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v5 = *a2;
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C52C5BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipDialogManager::transactionTerminated(uint64_t a1, uint64_t *a2)
{
}

void SipDialogManager::getSubscription(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v10);
    if (v10)
    {
      SipDialog::subscriptionForEvent(v10, (void **)a2, a4, a5);
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
LABEL_9:
    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_1C52C5CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogManager::cancelAllSubscriptions(SipDialogManager *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"canceling all subscriptions", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v7, (uint64_t)(v1 + 128));
  for (uint64_t i = (void *)v8; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (std::__shared_weak_count *)i[5];
    uint64_t v5 = (std::__shared_weak_count *)i[6];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4) {
      SipDialog::cancelAllSubscriptions(v4);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v7);
}

void sub_1C52C5E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialogManager::printSubscriptions(SipDialogManager *this, ImsOutStream *a2)
{
  uint64_t v3 = (void *)*((void *)this + 20);
  if (!v3) {
    goto LABEL_14;
  }
  char v4 = 0;
  do
  {
    uint64_t v6 = (void *)v3[5];
    uint64_t v5 = (std::__shared_weak_count *)v3[6];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6 && v6[252])
    {
      if ((v4 & 1) == 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Subscriptions:", 14);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((unsigned char *)a2 + 17) = 0;
      }
      char v4 = 1;
      SipDialog::printSubscriptions(v6, a2, 1);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"No subscriptions", 16);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
}

void sub_1C52C5F88(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogManager::printDialogs(SipDialogManager *this, ImsOutStream *a2)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (!v2) {
    return;
  }
  while (1)
  {
    uint64_t v5 = (std::string *)v2[5];
    char v4 = (std::__shared_weak_count *)v2[6];
    if (!v4)
    {
      if (!v5) {
        return;
      }
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v5) {
      break;
    }
LABEL_6:
    std::string::size_type size = v5[77].__r_.__value_.__l.__size_;
    long long v7 = (std::__shared_weak_count *)v5[77].__r_.__value_.__r.__words[2];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (size)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Session ", 8);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(char *, ImsOutStream *))(*(std::string::size_type *)((char *)v5->__r_.__value_.__r.__words
                                                                                 + *(void *)(v5->__r_.__value_.__r.__words[0]
                                                                                             - 24))
                                                     + 16))((char *)v5 + *(void *)(v5->__r_.__value_.__r.__words[0] - 24), a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)":", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      std::string::size_type v8 = v5[77].__r_.__value_.__l.__size_;
      uint64_t v9 = (std::__shared_weak_count *)v5[77].__r_.__value_.__r.__words[2];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string::size_type, ImsOutStream *))(*(void *)v8 + 248))(v8, a2);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Non-session ", 12);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(char *, ImsOutStream *))(*(std::string::size_type *)((char *)v5->__r_.__value_.__r.__words
                                                                                 + *(void *)(v5->__r_.__value_.__r.__words[0]
                                                                                             - 24))
                                                     + 16))((char *)v5 + *(void *)(v5->__r_.__value_.__r.__words[0] - 24), a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)":", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      SipDialog::printDialogInfo(v5, a2);
    }
    if (v5[84].__r_.__value_.__r.__words[0])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Subscriptions:", 16);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      SipDialog::printSubscriptions(v5, a2, 0);
    }
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      return;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C52C6304(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *SipDialogManager::logPrefix(SipDialogManager *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 17);
  if (!v3) {
    goto LABEL_8;
  }
  char v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v3 + 8);
  if (!v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_8;
  }
  int v7 = *(unsigned __int8 *)(v6 + 176);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (!v7)
  {
LABEL_8:
    std::string::size_type v8 = (void *)*((void *)a2 + 1);
    uint64_t v9 = "DialogManager: ";
    uint64_t v10 = 15;
    goto LABEL_9;
  }
  std::string::size_type v8 = (void *)*((void *)a2 + 1);
  uint64_t v9 = "DialogManager(EMERGENCY): ";
  uint64_t v10 = 26;
LABEL_9:
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'SipDialogManager::logPrefix(SipDialogManager *this, ImsOutStream *a2)
{
  return SipDialogManager::logPrefix((SipDialogManager *)((char *)this - 16), a2);
}

uint64_t SipDialogManager::activeDialogCount(SipDialogManager *this)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v11, (uint64_t)this + 144);
  uint64_t v1 = (void *)v12;
  if ((void)v12)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = v1[5];
      char v4 = (std::__shared_weak_count *)v1[6];
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v3) {
        goto LABEL_16;
      }
      uint64_t v5 = *(void *)(v3 + 1856);
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 1864);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5)
      {
        uint64_t v7 = *(void *)(v3 + 1856);
        std::string::size_type v8 = *(std::__shared_weak_count **)(v3 + 1864);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 264))(v7) ^ 1;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (!v6)
        {
LABEL_21:
          if (!v9) {
            goto LABEL_16;
          }
LABEL_15:
          uint64_t v2 = (v2 + 1);
          goto LABEL_16;
        }
      }
      else
      {
        int v9 = 0;
        if (!v6) {
          goto LABEL_21;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v9) {
        goto LABEL_15;
      }
LABEL_16:
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      uint64_t v1 = (void *)*v1;
      if (!v1) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v2 = 0;
LABEL_24:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v11);
  return v2;
}

void sub_1C52C64E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (!v10)
    {
LABEL_3:
      if (!v9) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (!v9)
  {
LABEL_5:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  goto LABEL_5;
}

uint64_t SipDialogManager::checkTimers(SipDialogManager *this)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v5, (uint64_t)this + 144);
  for (uint64_t i = (void *)v6; i; uint64_t i = (void *)*i)
  {
    uint64_t v2 = (SipDialog *)i[5];
    uint64_t v3 = (std::__shared_weak_count *)i[6];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v2) {
      SipDialog::checkTimers(v2);
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v5);
}

void sub_1C52C65A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipDialogManager::determineIncomingMessageCategory(SipDialogManager *this, const SipRequest *a2, const SipResponse *a3)
{
  uint64_t v7 = 0;
  std::string::size_type v8 = 0;
  (*(void (**)(SipDialog **__return_ptr))(*(void *)this + 32))(&v7);
  if (v7) {
    uint64_t v5 = SipDialog::determineIncomingMessageCategory(v7, a2, a3);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

void sub_1C52C6650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipDialog>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1C52C66C8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipDialog>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v29 = 0;
  uint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v8;
  uint64_t v17 = (std::string *)(v16 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v16[4] = *(void *)(a3 + 16);
  }
  uint64_t v18 = *(void *)(a3 + 32);
  v16[5] = *(void *)(a3 + 24);
  v16[6] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  LOBYTE(v29) = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  long long v25 = *(void **)(*(void *)a1 + 8 * v12);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *long long v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_1C52C6998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>(std::__shared_weak_count **a1, long long *a2)
{
  char v4 = (std::__shared_weak_count *)operator new(0x868uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC168;
  uint64_t v5 = v4 + 1;
  long long v7 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  SipDialog::SipDialog((uint64_t)&v4[1], (const std::string **)&v7);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  *a1 = v5;
  a1[1] = v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[9].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[9].__shared_owners_ = (uint64_t)v5;
    v4[9].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[9].__shared_owners_ = (uint64_t)v5;
    v4[9].__shared_weak_owners_ = (uint64_t)v4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C52C6AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipDialog>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialog>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipDialog>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  long long v6 = *(void **)(*result + 8 * v4);
  do
  {
    long long v7 = v6;
    long long v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *long long v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v17 = *a4;
  uint64_t v31 = 0;
  uint64_t v18 = operator new(0x38uLL);
  v30[0] = v18;
  v30[1] = a1 + 16;
  *uint64_t v18 = 0;
  v18[1] = v9;
  float v19 = (std::string *)(v18 + 2);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v20 = *v17;
    v18[4] = *((void *)v17 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v18[5] = 0;
  v18[6] = 0;
  LOBYTE(v31) = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v26);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v13);
  if (v27)
  {
    *(void *)v30[0] = *v27;
    *uint64_t v27 = v30[0];
  }
  else
  {
    *(void *)v30[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v30[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v30[0])
    {
      unint64_t v28 = *(void *)(*(void *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10) {
          v28 %= v10;
        }
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v28) = v30[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v30[0];
  v30[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return i;
}

void sub_1C52C6FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipUssdSession,std::allocator<SipUssdSession>,std::string const&,void>(uint64_t *a1, const std::string *a2)
{
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x2C0uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC1B8;
  uint64_t v5 = SipUssdSession::SipUssdSession((uint64_t)&v4[1], a2);
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  long long v6 = (std::__shared_weak_count *)v4[9].__vftable;
  if (v6)
  {
    if (v6->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[8].__shared_weak_owners_ = v5;
    v4[9].__vftable = (std::__shared_weak_count_vtbl *)v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[8].__shared_weak_owners_ = v5;
    v4[9].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C52C7094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipUssdSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC1B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUssdSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC1B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipUssdSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipUserAgentConfig::initializeFromPrefs(SipUserAgentConfig *this, const ImsPrefs *a2)
{
  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(this);
  uint64_t v5 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, FeatureTagsEnabledKey);
  if (v5)
  {
    DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey(v5);
    uint64_t v5 = (ImsPrefs *)ImsPrefs::stringValue(a2, DeviceIMEIKey);
    long long v7 = (void **)((char *)this + 464);
    if (*((char *)this + 487) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)long long v7 = *(_OWORD *)__p;
    *((void *)this + 60) = v248;
  }
  UseDialogEventPackageKey = (void **)ImsPrefs::getUseDialogEventPackageKey(v5);
  unint64_t v9 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseDialogEventPackageKey);
  *((unsigned char *)this + 916) = (_BYTE)v9;
  DialogEventPackageSessionDescriptionKey = (void **)ImsPrefs::getDialogEventPackageSessionDescriptionKey(v9);
  uint8x8_t v11 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DialogEventPackageSessionDescriptionKey);
  *((unsigned char *)this + 917) = (_BYTE)v11;
  DefaultAuthAlgorithmKey = (void **)ImsPrefs::getDefaultAuthAlgorithmKey(v11);
  unint64_t v13 = (ImsPrefs *)ImsPrefs::stringValue(a2, DefaultAuthAlgorithmKey);
  uint64_t v14 = (void **)((char *)this + 1344);
  if (*((char *)this + 1367) < 0) {
    operator delete(*v14);
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
  *((void *)this + 170) = v248;
  AuthResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getAuthResponseTimeoutMillisecondsKey(v13);
  unint64_t v16 = (ImsPrefs *)ImsPrefs::intValue(a2, AuthResponseTimeoutMillisecondsKey);
  *((_DWORD *)this + 348) = v16;
  int v253 = 0;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  PreferredAuthQopListKey = (void **)ImsPrefs::getPreferredAuthQopListKey(v16);
  uint64_t v18 = (ImsPrefs *)ImsPrefs::stringValue(a2, PreferredAuthQopListKey);
  HoldResumeTimerMillisecondsKey = (void **)ImsPrefs::getHoldResumeTimerMillisecondsKey(v18);
  long long v20 = (ImsPrefs *)ImsPrefs::intValue(a2, HoldResumeTimerMillisecondsKey);
  *((_DWORD *)this + 6) = v20;
  float v21 = (void **)ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(v20);
  float v22 = (ImsPrefs *)ImsPrefs::intValue(a2, v21);
  *((_DWORD *)this + 7) = v22;
  if (!v22) {
    *((_DWORD *)this + 7) = *((_DWORD *)this + 6);
  }
  RingingTimerSecondsKey = (void **)ImsPrefs::getRingingTimerSecondsKey(v22);
  unint64_t v24 = (ImsPrefs *)ImsPrefs::intValue(a2, RingingTimerSecondsKey);
  *(_DWORD *)this = v24;
  RingbackTimerSecondsKey = (void **)ImsPrefs::getRingbackTimerSecondsKey(v24);
  size_t v26 = (ImsPrefs *)ImsPrefs::intValue(a2, RingbackTimerSecondsKey);
  *((_DWORD *)this + 1) = v26;
  WaitForRingingTimerMOSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerMOSecondsKey(v26);
  unint64_t v28 = (ImsPrefs *)ImsPrefs::intValue(a2, WaitForRingingTimerMOSecondsKey);
  *((_DWORD *)this + 2) = v28;
  WaitForRingingTimerMTSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerMTSecondsKey(v28);
  uint64_t v30 = (ImsPrefs *)ImsPrefs::intValue(a2, WaitForRingingTimerMTSecondsKey);
  *((_DWORD *)this + 3) = v30;
  TriggerCSFBOnWaitForRingingTimeoutKey = (void **)ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(v30);
  long long v32 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, TriggerCSFBOnWaitForRingingTimeoutKey);
  *((unsigned char *)this + 32) = (_BYTE)v32;
  LocalQoSTimeoutMOSecondsKey = (void **)ImsPrefs::getLocalQoSTimeoutMOSecondsKey(v32);
  uint64_t v34 = (ImsPrefs *)ImsPrefs::intValue(a2, LocalQoSTimeoutMOSecondsKey);
  *((_DWORD *)this + 4) = v34;
  LocalQoSTimeoutMTSecondsKey = (void **)ImsPrefs::getLocalQoSTimeoutMTSecondsKey(v34);
  uint64_t v36 = (ImsPrefs *)ImsPrefs::intValue(a2, LocalQoSTimeoutMTSecondsKey);
  *((_DWORD *)this + 5) = v36;
  TriggerCSFBOnLocalQoSTimeoutMOKey = (void **)ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(v36);
  uint64_t v38 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, TriggerCSFBOnLocalQoSTimeoutMOKey);
  *((unsigned char *)this + 33) = (_BYTE)v38;
  TriggerCSFBOnLocalQoSTimeoutMTKey = (void **)ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(v38);
  uint64_t v40 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, TriggerCSFBOnLocalQoSTimeoutMTKey);
  *((unsigned char *)this + 34) = (_BYTE)v40;
  StartLocalQosTimerOnSessionProgressKey = (void **)ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(v40);
  uint64_t v42 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, StartLocalQosTimerOnSessionProgressKey);
  *((unsigned char *)this + 35) = (_BYTE)v42;
  BOOL v43 = (void **)ImsPrefs::getCallSetupPingTimerMillisecondsKey(v42);
  uint64_t v44 = (ImsPrefs *)ImsPrefs::intValue(a2, v43);
  *((_DWORD *)this + 9) = v44;
  AlwaysPrack18xKey = (void **)ImsPrefs::getAlwaysPrack18xKey(v44);
  long long v46 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysPrack18xKey);
  *((unsigned char *)this + 40) = (_BYTE)v46;
  QueueUnreliableProvisionalResponsesKey = (void **)ImsPrefs::getQueueUnreliableProvisionalResponsesKey(v46);
  long long v48 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, QueueUnreliableProvisionalResponsesKey);
  *((unsigned char *)this + 41) = (_BYTE)v48;
  UseCompactHeadersKey = (void **)ImsPrefs::getUseCompactHeadersKey(v48);
  long long v50 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCompactHeadersKey);
  *((unsigned char *)this + 545) = (_BYTE)v50;
  AlwaysAddPrivacyHeaderKey = (void **)ImsPrefs::getAlwaysAddPrivacyHeaderKey(v50);
  uint64_t v52 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysAddPrivacyHeaderKey);
  *((unsigned char *)this + 613) = (_BYTE)v52;
  SendPreferredServiceInInviteKey = (void **)ImsPrefs::getSendPreferredServiceInInviteKey(v52);
  long long v54 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendPreferredServiceInInviteKey);
  *((unsigned char *)this + 548) = (_BYTE)v54;
  SendAcceptContactInInviteKey = (void **)ImsPrefs::getSendAcceptContactInInviteKey(v54);
  uint64_t v56 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendAcceptContactInInviteKey);
  *((unsigned char *)this + 546) = (_BYTE)v56;
  SendAcceptContactInSmsKey = (void **)ImsPrefs::getSendAcceptContactInSmsKey(v56);
  uint64_t v58 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendAcceptContactInSmsKey);
  *((unsigned char *)this + 547) = (_BYTE)v58;
  memset(&v252[1], 0, sizeof(std::string));
  AcceptContactParamsKey = (void **)ImsPrefs::getAcceptContactParamsKey(v58);
  int v60 = (ImsPrefs *)ImsPrefs::stringValue(a2, AcceptContactParamsKey);
  uint64_t v61 = (void **)ImsPrefs::getStrictCallFlowTimeoutKey(v60);
  int v62 = (ImsPrefs *)ImsPrefs::intValue(a2, v61);
  *((_DWORD *)this + 148) = v62;
  SupportPEarlyMediaHeaderKey = (void **)ImsPrefs::getSupportPEarlyMediaHeaderKey(v62);
  int v64 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SupportPEarlyMediaHeaderKey);
  *((unsigned char *)this + 608) = (_BYTE)v64;
  EarlyMediaNeedsHeaderKey = (void **)ImsPrefs::getEarlyMediaNeedsHeaderKey(v64);
  int v66 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EarlyMediaNeedsHeaderKey);
  *((unsigned char *)this + 609) = (_BYTE)v66;
  AlwaysSetPhoneContextKey = (void **)ImsPrefs::getAlwaysSetPhoneContextKey(v66);
  uint64_t v68 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysSetPhoneContextKey);
  *((unsigned char *)this + 610) = (_BYTE)v68;
  EnableForkingKey = (void **)ImsPrefs::getEnableForkingKey(v68);
  uint64_t v70 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableForkingKey);
  *((unsigned char *)this + 611) = (_BYTE)v70;
  EnableReasonHeaderInByeKey = (void **)ImsPrefs::getEnableReasonHeaderInByeKey(v70);
  uint64_t v72 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableReasonHeaderInByeKey);
  *((unsigned char *)this + 612) = (_BYTE)v72;
  AllowTelUriInReferToKey = (void **)ImsPrefs::getAllowTelUriInReferToKey(v72);
  std::string v74 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowTelUriInReferToKey);
  *((unsigned char *)this + 616) = (_BYTE)v74;
  SendReferToPeerKey = (void **)ImsPrefs::getSendReferToPeerKey(v74);
  long long v76 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendReferToPeerKey);
  *((unsigned char *)this + 617) = (_BYTE)v76;
  AlwaysSubscribeToConferenceEventsKey = (void **)ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(v76);
  uint64_t v78 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysSubscribeToConferenceEventsKey);
  *((unsigned char *)this + 618) = (_BYTE)v78;
  SendConferenceSubscribeInNewDialogKey = (void **)ImsPrefs::getSendConferenceSubscribeInNewDialogKey(v78);
  long long v80 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendConferenceSubscribeInNewDialogKey);
  *((unsigned char *)this + 619) = (_BYTE)v80;
  SendConferenceSubscribeAfterRefersKey = (void **)ImsPrefs::getSendConferenceSubscribeAfterRefersKey(v80);
  uint64_t v82 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendConferenceSubscribeAfterRefersKey);
  *((unsigned char *)this + 620) = (_BYTE)v82;
  TreatAllNotificationsAsPartialKey = (void **)ImsPrefs::getTreatAllNotificationsAsPartialKey(v82);
  char v84 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, TreatAllNotificationsAsPartialKey);
  *((unsigned char *)this + 621) = (_BYTE)v84;
  AddServicesToContactInConferenceSubscribeKey = (void **)ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(v84);
  uint64_t v86 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AddServicesToContactInConferenceSubscribeKey);
  *((unsigned char *)this + 622) = (_BYTE)v86;
  ConferenceParticipantJoinTimeoutMillisecondsKey = (void **)ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(v86);
  uint64_t v88 = (ImsPrefs *)ImsPrefs::intValue(a2, ConferenceParticipantJoinTimeoutMillisecondsKey);
  *((_DWORD *)this + 156) = v88;
  ConferenceWaitForHoldTimeoutMillisecondsKey = (void **)ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(v88);
  uint64_t v90 = (ImsPrefs *)ImsPrefs::intValue(a2, ConferenceWaitForHoldTimeoutMillisecondsKey);
  *((_DWORD *)this + 281) = v90;
  SendPreferredIdentityKey = (void **)ImsPrefs::getSendPreferredIdentityKey(v90);
  *((unsigned char *)this + 688) = ImsPrefs::BOOLValue(a2, SendPreferredIdentityKey);
  SipTimers::setTimersFromPrefs((SipUserAgentConfig *)((char *)this + 512), a2);
  UssdResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getUssdResponseTimeoutMillisecondsKey(v92);
  uint64_t v94 = (ImsPrefs *)ImsPrefs::intValue(a2, UssdResponseTimeoutMillisecondsKey);
  *((_DWORD *)this + 158) = v94;
  ReRegisterOnErrorCodesKey = (void **)ImsPrefs::getReRegisterOnErrorCodesKey(v94);
  ImsPrefs::stringValue(a2, ReRegisterOnErrorCodesKey);
  SipResponseCodeMap::fromString((uint64_t)this + 696, (uint64_t)__p);
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  long long v96 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  EmergencyErrorResponsesToTriggerCSFBKey = (void **)ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(v96);
  ImsPrefs::stringValue(a2, EmergencyErrorResponsesToTriggerCSFBKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 760, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  int v98 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  InviteErrorResponsesToTriggerCSFBKey = (void **)ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(v98);
  ImsPrefs::stringValue(a2, InviteErrorResponsesToTriggerCSFBKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 728, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  TriggerCSFBOnSDPErrorKey = (void **)ImsPrefs::getTriggerCSFBOnSDPErrorKey(v100);
  uint64_t v102 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, TriggerCSFBOnSDPErrorKey);
  *((unsigned char *)this + 914) = (_BYTE)v102;
  PrivacyHeaderValueKey = (void **)ImsPrefs::getPrivacyHeaderValueKey(v102);
  int v104 = (ImsPrefs *)ImsPrefs::stringValue(a2, PrivacyHeaderValueKey);
  __int32 v105 = (void **)((char *)this + 640);
  if (*((char *)this + 663) < 0) {
    operator delete(*v105);
  }
  *(_OWORD *)__int32 v105 = *(_OWORD *)__p;
  *((void *)this + 82) = v248;
  UserAgentHeaderValueKey = (void **)ImsPrefs::getUserAgentHeaderValueKey(v104);
  xpc_object_t v107 = (ImsPrefs *)ImsPrefs::stringValue(a2, UserAgentHeaderValueKey);
  uint64_t v108 = (void **)((char *)this + 664);
  if (*((char *)this + 687) < 0) {
    operator delete(*v108);
  }
  *(_OWORD *)uint64_t v108 = *(_OWORD *)__p;
  *((void *)this + 85) = v248;
  IgnoreDuplicateSDPKey = (void **)ImsPrefs::getIgnoreDuplicateSDPKey(v107);
  unint64_t v110 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreDuplicateSDPKey);
  *((unsigned char *)this + 689) = (_BYTE)v110;
  MaintainTransportForDurationOfSessionKey = (void **)ImsPrefs::getMaintainTransportForDurationOfSessionKey(v110);
  uint64_t v112 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, MaintainTransportForDurationOfSessionKey);
  *((unsigned char *)this + 792) = (_BYTE)v112;
  WaitForByeResponseTimeoutKey = (void **)ImsPrefs::getWaitForByeResponseTimeoutKey(v112);
  int v114 = (ImsPrefs *)ImsPrefs::intValue(a2, WaitForByeResponseTimeoutKey);
  *((_DWORD *)this + 149) = v114;
  WaitForCancelResponseTimeoutKey = (void **)ImsPrefs::getWaitForCancelResponseTimeoutKey(v114);
  int v116 = (ImsPrefs *)ImsPrefs::intValue(a2, WaitForCancelResponseTimeoutKey);
  *((_DWORD *)this + 150) = v116;
  int v117 = (void **)ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(v116);
  char v118 = (ImsPrefs *)ImsPrefs::intValue(a2, v117);
  *((_DWORD *)this + 151) = v118;
  AlwaysSendSessionProgressKey = (void **)ImsPrefs::getAlwaysSendSessionProgressKey(v118);
  char v120 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysSendSessionProgressKey);
  *((unsigned char *)this + 793) = (_BYTE)v120;
  PreferredSenderIdentityKey = (void **)ImsPrefs::getPreferredSenderIdentityKey(v120);
  ImsPrefs::stringValue(a2, PreferredSenderIdentityKey);
  int v122 = (ImsPrefs *)SipRequest::identityTypeFromString((uint64_t)__p);
  *((_DWORD *)this + 201) = v122;
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  PreferredSenderNameKey = (void **)ImsPrefs::getPreferredSenderNameKey(v122);
  char v124 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, PreferredSenderNameKey);
  if (v124)
  {
    int v125 = (void **)ImsPrefs::getPreferredSenderNameKey(v124);
    ImsPrefs::stringValue(a2, v125);
    char v124 = (ImsPrefs *)SipRequest::identityTypeFromString((uint64_t)__p);
    *((_DWORD *)this + 202) = v124;
    if (SBYTE7(v248) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_DWORD *)this + 202) = *((_DWORD *)this + 201);
  }
  IgnoreFromHeaderForSenderNameKey = (void **)ImsPrefs::getIgnoreFromHeaderForSenderNameKey(v124);
  char v127 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreFromHeaderForSenderNameKey);
  *((unsigned char *)this + 812) = (_BYTE)v127;
  SendInitialInviteAsInactiveKey = (void **)ImsPrefs::getSendInitialInviteAsInactiveKey(v127);
  int v129 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendInitialInviteAsInactiveKey);
  *((unsigned char *)this + 813) = (_BYTE)v129;
  SendResumeInviteAsSendRecvKey = (void **)ImsPrefs::getSendResumeInviteAsSendRecvKey(v129);
  uint64_t v131 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendResumeInviteAsSendRecvKey);
  *((unsigned char *)this + 814) = (_BYTE)v131;
  AlwaysUnsubscribeFromRegEventsKey = (void **)ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(v131);
  unsigned int v133 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysUnsubscribeFromRegEventsKey);
  *((unsigned char *)this + 815) = (_BYTE)v133;
  AllowIncomingUssdSessionsKey = (void **)ImsPrefs::getAllowIncomingUssdSessionsKey(v133);
  int v135 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowIncomingUssdSessionsKey);
  *((unsigned char *)this + 628) = (_BYTE)v135;
  AllowRemoteHoldForUnconfirmedCallsKey = (void **)ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(v135);
  int v137 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowRemoteHoldForUnconfirmedCallsKey);
  *((unsigned char *)this + 816) = (_BYTE)v137;
  TTYReinviteTimeoutMillisecondsKey = (void **)ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(v137);
  *((_DWORD *)this + 205) = ImsPrefs::intValue(a2, TTYReinviteTimeoutMillisecondsKey);
  int v139 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "UPDATE");
  KillForkOnUpdateErrorsKey = (void **)ImsPrefs::getKillForkOnUpdateErrorsKey(v139);
  ImsPrefs::stringValue(a2, KillForkOnUpdateErrorsKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 824, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  int v142 = (void **)ImsPrefs::getUseDummyImeiCheckDigitKey(v141);
  int v143 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v142);
  *((unsigned char *)this + 856) = (_BYTE)v143;
  EnableSessionIdKey = (void **)ImsPrefs::getEnableSessionIdKey(v143);
  int v145 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableSessionIdKey);
  *((unsigned char *)this + 857) = (_BYTE)v145;
  AlwaysAddSipInstanceKey = (void **)ImsPrefs::getAlwaysAddSipInstanceKey(v145);
  int v147 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AlwaysAddSipInstanceKey);
  *((unsigned char *)this + 614) = (_BYTE)v147;
  AddSipInstanceForWifiKey = (void **)ImsPrefs::getAddSipInstanceForWifiKey(v147);
  int v149 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AddSipInstanceForWifiKey);
  *((unsigned char *)this + 615) = (_BYTE)v149;
  UseCorrectAckConstructionKey = (void **)ImsPrefs::getUseCorrectAckConstructionKey(v149);
  int v151 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCorrectAckConstructionKey);
  *((unsigned char *)this + 858) = (_BYTE)v151;
  IgnoreRegNotificationContactExpiresKey = (void **)ImsPrefs::getIgnoreRegNotificationContactExpiresKey(v151);
  int v153 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreRegNotificationContactExpiresKey);
  *((unsigned char *)this + 859) = (_BYTE)v153;
  ConferenceServerKey = (void **)ImsPrefs::getConferenceServerKey(v153);
  ImsPrefs::stringValue(a2, ConferenceServerKey);
  int v155 = (ImsPrefs *)SipUri::fromString((uint64_t)this + 48, (std::string *)__p);
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  PrackErrorDelayKey = (void **)ImsPrefs::getPrackErrorDelayKey(v155);
  uint64_t v157 = (ImsPrefs *)ImsPrefs::intValue(a2, PrackErrorDelayKey);
  *((_DWORD *)this + 215) = v157;
  CountryOfOriginationFormatKey = (void **)ImsPrefs::getCountryOfOriginationFormatKey(v157);
  int v159 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, CountryOfOriginationFormatKey);
  if (v159)
  {
    __int32 v160 = (const ImsPrefsKeyEnum *)ImsPrefs::getCountryOfOriginationFormatKey(v159);
    ImsPrefs::stringValue(a2, v160, (std::string *)__p);
    uint64_t v161 = (void **)((char *)this + 864);
    if (*((char *)this + 887) < 0) {
      operator delete(*v161);
    }
    *(_OWORD *)uint64_t v161 = *(_OWORD *)__p;
    *((void *)this + 110) = v248;
  }
  LocationForShortCodeCallsKey = (void **)ImsPrefs::getLocationForShortCodeCallsKey(v159);
  std::string::size_type v163 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, LocationForShortCodeCallsKey);
  if (v163)
  {
    int v164 = (const ImsPrefsKeyEnum *)ImsPrefs::getLocationForShortCodeCallsKey(v163);
    ImsPrefs::stringValue(a2, v164, (std::string *)__p);
    std::string::size_type v165 = (void **)((char *)this + 888);
    if (*((char *)this + 911) < 0) {
      operator delete(*v165);
    }
    *(_OWORD *)std::string::size_type v165 = *(_OWORD *)__p;
    *((void *)this + 113) = v248;
  }
  UseCIDUrlInPIDFKey = (void **)ImsPrefs::getUseCIDUrlInPIDFKey(v163);
  int v167 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCIDUrlInPIDFKey);
  *((unsigned char *)this + 919) = (_BYTE)v167;
  UseTupleInPIDFKey = (void **)ImsPrefs::getUseTupleInPIDFKey(v167);
  uint64_t v169 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseTupleInPIDFKey);
  *((unsigned char *)this + 920) = (_BYTE)v169;
  AddContentDispositionInPIDFKey = (void **)ImsPrefs::getAddContentDispositionInPIDFKey(v169);
  std::string::size_type v171 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AddContentDispositionInPIDFKey);
  *((unsigned char *)this + 921) = (_BYTE)v171;
  MethodInPIDFKey = (void **)ImsPrefs::getMethodInPIDFKey(v171);
  uint64_t v173 = (ImsPrefs *)ImsPrefs::stringValue(a2, MethodInPIDFKey);
  long long v174 = (void **)((char *)this + 928);
  if (*((char *)this + 951) < 0) {
    operator delete(*v174);
  }
  *(_OWORD *)long long v174 = *(_OWORD *)__p;
  *((void *)this + 118) = v248;
  SendLocalTimeZoneInformationKey = (void **)ImsPrefs::getSendLocalTimeZoneInformationKey(v173);
  uint64_t v176 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendLocalTimeZoneInformationKey);
  *((unsigned char *)this + 913) = (_BYTE)v176;
  BlockSilentRedialOverCSKey = (void **)ImsPrefs::getBlockSilentRedialOverCSKey(v176);
  uint64_t v178 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, BlockSilentRedialOverCSKey);
  *((unsigned char *)this + 912) = (_BYTE)v178;
  int v179 = (void **)ImsPrefs::getKillCallOnHoldResumeErrorKey(v178);
  char v180 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v179);
  *((unsigned char *)this + 915) = (_BYTE)v180;
  ValidateSipMessageRecipientKey = (void **)ImsPrefs::getValidateSipMessageRecipientKey(v180);
  int v182 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ValidateSipMessageRecipientKey);
  *((unsigned char *)this + 918) = (_BYTE)v182;
  IgnoreErrorsInTerminatedForksKey = (void **)ImsPrefs::getIgnoreErrorsInTerminatedForksKey(v182);
  uint64_t v184 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreErrorsInTerminatedForksKey);
  *((unsigned char *)this + 952) = (_BYTE)v184;
  RestartRingbackTimerOn180Key = (void **)ImsPrefs::getRestartRingbackTimerOn180Key(v184);
  int v186 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RestartRingbackTimerOn180Key);
  *((unsigned char *)this + 953) = (_BYTE)v186;
  AccessNetworkRefreshMethodKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessNetworkRefreshMethodKey(v186);
  ImsPrefs::stringValue(a2, AccessNetworkRefreshMethodKey, (std::string *)__p);
  int v189 = (void **)((char *)this + 960);
  if (*((char *)this + 983) < 0) {
    operator delete(*v189);
  }
  *(_OWORD *)int v189 = *(_OWORD *)__p;
  *((void *)this + 122) = v248;
  AccessNetworkRefreshInHeldCallsKey = (void **)ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(v188);
  v191 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AccessNetworkRefreshInHeldCallsKey);
  *((unsigned char *)this + 984) = (_BYTE)v191;
  UseCampedAccessNetworkInPANIKey = (void **)ImsPrefs::getUseCampedAccessNetworkInPANIKey(v191);
  v193 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, UseCampedAccessNetworkInPANIKey);
  *((unsigned char *)this + 985) = (_BYTE)v193;
  SetCountryWithCampedPANIKey = (void **)ImsPrefs::getSetCountryWithCampedPANIKey(v193);
  *((unsigned char *)this + 986) = ImsPrefs::BOOLValue(a2, SetCountryWithCampedPANIKey);
  BOOL v195 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  AddLocationInInviteResponsesKey = (void **)ImsPrefs::getAddLocationInInviteResponsesKey(v195);
  ImsPrefs::stringValue(a2, AddLocationInInviteResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 992, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v197 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  ResponseCodesAllowedForSilentRedialKey = (void **)ImsPrefs::getResponseCodesAllowedForSilentRedialKey(v197);
  ImsPrefs::stringValue(a2, ResponseCodesAllowedForSilentRedialKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1024, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v199 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  ResponseCodesBlockedForSilentRedialNRSANonEmKey = (void **)ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(v199);
  ImsPrefs::stringValue(a2, ResponseCodesBlockedForSilentRedialNRSANonEmKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1056, (uint64_t)__p, v252);
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  DropRegistrationOnCSFBKey = (void **)ImsPrefs::getDropRegistrationOnCSFBKey(v201);
  char v203 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DropRegistrationOnCSFBKey);
  *((unsigned char *)this + 1120) = (_BYTE)v203;
  DropRegistrationOnSRVCCKey = (void **)ImsPrefs::getDropRegistrationOnSRVCCKey(v203);
  char v205 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, DropRegistrationOnSRVCCKey);
  *((unsigned char *)this + 1121) = (_BYTE)v205;
  DropRegistrationOnErrorCodesKey = (void **)ImsPrefs::getDropRegistrationOnErrorCodesKey(v205);
  ImsPrefs::stringValue(a2, DropRegistrationOnErrorCodesKey);
  SipResponseCodeMap::fromString((uint64_t)this + 1184, (uint64_t)__p);
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  int v208 = (void **)ImsPrefs::getResetCallIdOnAuthChallengeKey(v207);
  char v209 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v208);
  *((unsigned char *)this + 1122) = (_BYTE)v209;
  memset(v252, 0, 24);
  AcceptedSmsContentTypesKey = (void **)ImsPrefs::getAcceptedSmsContentTypesKey(v209);
  char v211 = (ImsPrefs *)ImsPrefs::stringValue(a2, AcceptedSmsContentTypesKey);
  std::string::size_type size = HIBYTE(v252[0].__r_.__value_.__r.__words[2]);
  if ((v252[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v252[0].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v248 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v251, ",");
    ims::tokenize(v252, (uint64_t *)__p, (char *)&v251);
    if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v251.__r_.__value_.__l.__data_);
    }
    unsigned int v213 = (void **)__p[0];
    for (uint64_t i = (void **)__p[1]; v213 != i; v213 += 3)
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)this + 141, (uint64_t)this + 1136, v213, (uint64_t)v213);
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
  }
  IgnoreSessionRefreshErrorsKey = (void **)ImsPrefs::getIgnoreSessionRefreshErrorsKey(v211);
  BOOL v216 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreSessionRefreshErrorsKey);
  *((unsigned char *)this + 1152) = (_BYTE)v216;
  IgnoreSessionTimerExpirationKey = (void **)ImsPrefs::getIgnoreSessionTimerExpirationKey(v216);
  int v218 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreSessionTimerExpirationKey);
  *((unsigned char *)this + 1153) = (_BYTE)v218;
  RejectSMSWithFakeTimeoutKey = (void **)ImsPrefs::getRejectSMSWithFakeTimeoutKey(v218);
  int v220 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RejectSMSWithFakeTimeoutKey);
  *((unsigned char *)this + 1154) = (_BYTE)v220;
  int v221 = (void **)ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(v220);
  unsigned int v222 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, v221);
  *((unsigned char *)this + 1155) = (_BYTE)v222;
  InternalDisableSipInstanceKey = (void **)ImsPrefs::getInternalDisableSipInstanceKey(v222);
  v224 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, InternalDisableSipInstanceKey);
  *((unsigned char *)this + 1156) = (_BYTE)v224;
  AdditionalContactParamsKey = (void **)ImsPrefs::getAdditionalContactParamsKey(v224);
  SipHeaderTemplateMap::initializeFromPref((uint64_t **)this + 145, a2, AdditionalContactParamsKey);
  ReRegisterOnInternalRequestTimeoutKey = (void **)ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(v226);
  int v228 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, ReRegisterOnInternalRequestTimeoutKey);
  *((unsigned char *)this + 987) = (_BYTE)v228;
  AllowInvalidTimestampInPCNIKey = (void **)ImsPrefs::getAllowInvalidTimestampInPCNIKey(v228);
  char v230 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, AllowInvalidTimestampInPCNIKey);
  *((unsigned char *)this + 1216) = (_BYTE)v230;
  memset(&v251, 0, sizeof(v251));
  CountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey = (void **)ImsPrefs::getCountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey(v230);
  ImsPrefs::stringValue(a2, CountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey);
  std::string::size_type v232 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
  if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v232 = v251.__r_.__value_.__l.__size_;
  }
  if (v232)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v248 = 0;
    ims::tokenize(&v251, (uint64_t *)__p, 0x2Cu);
    char v233 = (const char *)__p[0];
    for (uint64_t j = (const char *)__p[1]; v233 != j; v233 += 24)
    {
      LODWORD(v250.__r_.__value_.__l.__data_) = 0;
      int v235 = v233;
      if (v233[23] < 0) {
        int v235 = *(const char **)v233;
      }
      LODWORD(v250.__r_.__value_.__l.__data_) = strtoul(v235, 0, 10);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)this + 153, (unsigned int *)&v250, &v250);
    }
    v250.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  }
  long long v236 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  NonFatalReInviteResponsesKey = (void **)ImsPrefs::getNonFatalReInviteResponsesKey(v236);
  ImsPrefs::stringValue(a2, NonFatalReInviteResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1088, (uint64_t)__p, &v250);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  int v238 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  DisableMergeOnInviteErrorResponsesKey = (void **)ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(v238);
  ImsPrefs::stringValue(a2, DisableMergeOnInviteErrorResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1312, (uint64_t)__p, &v250);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v248) < 0) {
    operator delete(__p[0]);
  }
  int v241 = ImsPrefs::getSpamCallRiskLevelsKey(v240);
  int v242 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v241);
  if (v242) {
    int v243 = v242;
  }
  else {
    int v243 = (const ImsDictPref *)*((void *)v241 + 11);
  }
  if (v243)
  {
    SpamRiskMap::SpamRiskMap((SpamRiskMap *)__p, v243);
    *((unsigned char *)this + 1304) = v249;
    long long v244 = v248;
    *(_OWORD *)((char *)this + 1272) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1288) = v244;
  }
  int v245 = (void **)ImsPrefs::getSpamCallCategoryMappingKey(v242);
  int v246 = ImsPrefs::typedPrefWithKey<ImsArrayPref>(a2, v245);
  if (v246)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v248 = 0;
    ImsArrayPref::stringValues((uint64_t)v246, (std::vector<std::string> *)__p);
    SpamCategoryMap::SpamCategoryMap((uint64_t)&v250, (long long **)__p);
    if ((std::string *)((char *)this + 1248) != &v250) {
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)this + 156, v250.__r_.__value_.__l.__data_, &v250.__r_.__value_.__l.__size_);
    }
    std::__tree<std::string>::destroy((uint64_t)&v250, (char *)v250.__r_.__value_.__l.__size_);
    v250.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
  }
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v255) < 0) {
    operator delete(v253);
  }
}

void sub_1C52C80AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void **a17, char *a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::string>::destroy((uint64_t)&a17, a18);
  a17 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t SipUserAgentConfig::shouldCSFBOnInviteResponse(SipUserAgentConfig *this, unsigned int a2, int a3)
{
  if (a2 < 0x12C) {
    return 0;
  }
  uint64_t v6 = 728;
  if (a3) {
    uint64_t v6 = 760;
  }
  long long v7 = (char *)this + v6;
  char v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  BOOL v8 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v7, __p, a2, &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  BOOL v9 = (a2 & 0xFFFFFFFE) == 0x1E6 && v8;
  if (v9 && !v13) {
    return 0;
  }
  if (!(a3 ^ 1 | v8)) {
    return SipUserAgentConfig::shouldCSFBOnInviteResponse(this, a2, 0);
  }
  return v8;
}

void sub_1C52C8354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUserAgent::SipUserAgent(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  BOOL v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipStackLayer::SipStackLayer((void *)a1, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.ua");
  uint64_t v5 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
  }
  else {
    std::string v6 = *(std::string *)(v5 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 24, &__p, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20BC268;
  *(void *)(a1 + 24) = &unk_1F20BC290;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  SipMessageEncodingMap::SipMessageEncodingMap((SipMessageEncodingMap *)(a1 + 288));
}

void sub_1C52C8930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipMessageEncodingMap *a9, pthread_mutex_t *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  *BOOL v23 = &unk_1F20BC510;
  unint64_t v25 = (std::__shared_weak_count *)v23[2];
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(exception_object);
}

void *SipStackLayer::SipStackLayer(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20BC510;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    a1[1] = v3;
    a1[2] = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  return a1;
}

void SipUserAgent::~SipUserAgent(SipUserAgent *this)
{
  *(void *)this = &unk_1F20BC268;
  *((void *)this + 3) = &unk_1F20BC290;
  uint64_t v2 = (void *)((char *)this + 136);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  *((void *)this + 16) = v2;
  *((void *)this + 18) = 0;
  *uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 35);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v13 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 552), &v13, (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
  uint64_t v4 = *((void *)this + 68);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  ImsLock::~ImsLock(&v13);
  uint64_t v5 = *((void *)this + 81);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  SipUserAgent::clearAssociatedUris(this);
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((void *)this + 82);
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 552));
  SipRouteSet::~SipRouteSet((SipUserAgent *)((char *)this + 480));
  SipMessageEncodingMap::~SipMessageEncodingMap((std::__shared_weak_count **)this + 36);
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::unique_ptr<LazuliMessageEncodingMap>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  BOOL v9 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint8x8_t v11 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 152, *((char **)this + 20));
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  *(void *)this = &unk_1F20BC510;
  char v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  uint64_t vars8;

  SipUserAgent::~SipUserAgent(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipUserAgent::clearAssociatedUris(SipUserAgent *this)
{
  SipRouteSet::clear((void *)this + 60);
  uint64_t v2 = *((void *)this + 67);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 67) = 0;
  uint64_t result = *((void *)this + 77);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 77) = 0;
  return result;
}

void non-virtual thunk to'SipUserAgent::~SipUserAgent(SipUserAgent *this)
{
}

{
  uint64_t vars8;

  SipUserAgent::~SipUserAgent((SipUserAgent *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void SipUserAgent::deinitialize(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 1);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  SipUserAgent::clearAssociatedUris(this);
  SipDialogManager::deinitialize(*((SipDialogManager **)this + 22));
  SipMessageManager::deinitialize(*((SipMessageManager **)this + 24));
  if (v4 && *(unsigned char *)(v4 + 2681)) {
    SipLazuliManager::deinitialize(*((SipLazuliManager **)this + 26));
  }
  uint64_t v5 = (void *)*((void *)this + 29);
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(v5 + 26));
  std::string v6 = (void *)v5[24];
  v5 += 24;
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
  if (v4 && *(unsigned char *)(v4 + 1124))
  {
    long long v7 = (void *)*((void *)this + 31);
    uint64_t v8 = *((void *)this + 33);
    BOOL v9 = (std::__shared_weak_count *)*((void *)this + 34);
    unint64_t v10 = v8 + 104;
    if (!v8) {
      unint64_t v10 = 0;
    }
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      char v12 = v7 + 21;
      uint8x8_t v11 = (uint64_t *)v7[21];
      if (v11)
      {
        char v13 = v7 + 21;
        uint64_t v14 = (void *)v7[21];
        do
        {
          unint64_t v15 = v14[4];
          BOOL v16 = v15 >= v10;
          if (v15 >= v10) {
            uint64_t v17 = v14;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          if (v16) {
            char v13 = v14;
          }
          uint64_t v14 = (void *)*v17;
        }
        while (*v17);
        if (v13 != v12 && v13[4] <= v10)
        {
          uint64_t v18 = v7 + 21;
          float v19 = (void *)v7[21];
          do
          {
            unint64_t v20 = v19[4];
            BOOL v21 = v20 >= v10;
            if (v20 >= v10) {
              float v22 = v19;
            }
            else {
              float v22 = v19 + 1;
            }
            if (v21) {
              uint64_t v18 = v19;
            }
            float v19 = (void *)*v22;
          }
          while (*v22);
          if (v18 != v12 && v18[4] <= v10)
          {
            BOOL v23 = (uint64_t *)v18[1];
            if (v23)
            {
              do
              {
                unint64_t v24 = v23;
                BOOL v23 = (uint64_t *)*v23;
              }
              while (v23);
            }
            else
            {
              unint64_t v25 = v18;
              do
              {
                unint64_t v24 = (uint64_t *)v25[2];
                BOOL v26 = *v24 == (void)v25;
                unint64_t v25 = v24;
              }
              while (!v26);
            }
            if ((uint64_t *)v7[20] == v18) {
              v7[20] = v24;
            }
            --v7[22];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v18);
            uint64_t v27 = (std::__shared_weak_count *)v18[5];
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            }
            operator delete(v18);
          }
        }
      }
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  SipRegistrationClient::deinitialize(*((SipRegistrationClient **)this + 31));
  SipAuthClient::clear(*((SipAuthClient **)this + 35));
  uint64_t v28 = *((void *)this + 81);
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  *((void *)this + 81) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C52C90C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUserAgent::initialize(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 1);
      if (v5)
      {
        uint64_t v6 = v5 + 720;
        if (!SipTimers::isValid((SipTimers *)(v5 + 720)))
        {
          uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
          (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"invalid timer values ", 21);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v5 + 720, v7);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)".  Using default values.", 24);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          SipTimers::resetDefaults((char **)(v5 + 720));
        }
        uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"using SIP timers ", 17);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v5 + 720, v8);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        SipRegistrationClient::initialize(*((SipRegistrationClient **)this + 31));
        if (*(unsigned char *)(v5 + 1124))
        {
          uint64_t v9 = *((void *)this + 31);
          uint64_t v10 = *((void *)this + 33);
          uint8x8_t v11 = (std::__shared_weak_count *)*((void *)this + 34);
          if (v10) {
            unint64_t v12 = v10 + 104;
          }
          else {
            unint64_t v12 = 0;
          }
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v10)
          {
            uint64_t v14 = (uint64_t **)(v9 + 168);
            char v13 = *(uint64_t **)(v9 + 168);
            if (v13)
            {
              unint64_t v15 = (uint64_t **)(v9 + 168);
              BOOL v16 = *(void **)(v9 + 168);
              do
              {
                unint64_t v17 = v16[4];
                BOOL v18 = v17 >= v12;
                if (v17 >= v12) {
                  float v19 = v16;
                }
                else {
                  float v19 = v16 + 1;
                }
                if (v18) {
                  unint64_t v15 = (uint64_t **)v16;
                }
                BOOL v16 = (void *)*v19;
              }
              while (*v19);
              if (v15 == v14 || (unint64_t)v15[4] > v12)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v20 = (uint64_t **)v13;
                    unint64_t v21 = v13[4];
                    if (v21 <= v12) {
                      break;
                    }
                    char v13 = *v20;
                    uint64_t v14 = v20;
                    if (!*v20) {
                      goto LABEL_31;
                    }
                  }
                  if (v21 >= v12) {
                    break;
                  }
                  char v13 = v20[1];
                  if (!v13)
                  {
                    uint64_t v14 = v20 + 1;
                    goto LABEL_31;
                  }
                }
              }
            }
            else
            {
              unint64_t v20 = (uint64_t **)(v9 + 168);
LABEL_31:
              float v22 = (uint64_t *)operator new(0x30uLL);
              BOOL v23 = v22;
              v22[4] = v12;
              v22[5] = (uint64_t)v11;
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t *v22 = 0;
              v22[1] = 0;
              v22[2] = (uint64_t)v20;
              void *v14 = v22;
              uint64_t v24 = **(void **)(v9 + 160);
              if (v24)
              {
                *(void *)(v9 + 160) = v24;
                BOOL v23 = *v14;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v9 + 168), v23);
              ++*(void *)(v9 + 176);
            }
          }
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
        }
        uint64_t v25 = *((void *)this + 24);
        uint64_t v34 = (SipStack *)v5;
        std::string v35 = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        SipMessageManager::initialize(v25, &v34);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (*(unsigned char *)(v5 + 2681))
        {
          uint64_t v26 = *((void *)this + 26);
          if (!v26)
          {
            uint64_t v27 = (std::__shared_weak_count *)operator new(0x2F0uLL);
            v27->__shared_owners_ = 0;
            v27->__shared_weak_owners_ = 0;
            v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC468;
            uint64_t v28 = (std::__shared_weak_count_vtbl *)&v27[1];
            SipLazuliManager::SipLazuliManager((SipLazuliManager *)&v27[1], this);
            shared_owners = (std::__shared_weak_count *)v27[7].__shared_owners_;
            if (shared_owners)
            {
              if (shared_owners->__shared_owners_ != -1) {
                goto LABEL_47;
              }
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v27[7].__vftable = v28;
              v27[7].__shared_owners_ = (uint64_t)v27;
              std::__shared_weak_count::__release_weak(shared_owners);
            }
            else
            {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v27[7].__vftable = v28;
              v27[7].__shared_owners_ = (uint64_t)v27;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_47:
            uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 27);
            *((void *)this + 26) = v28;
            *((void *)this + 27) = v27;
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            operator new();
          }
          long long v32 = (SipStack *)v5;
          uint64_t v33 = v4;
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          SipLazuliManager::initialize(v26, &v32);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
        }
        SipAuthClient::initialize(*((SipAuthClient **)this + 35));
        *((unsigned char *)this + 416) = *(unsigned char *)(v5 + 753);
        uint64_t v31 = (const ImsPrefs *)SipStack::prefs((SipStack *)v5);
        SipMessageEncodingMap::initializeFromPrefs((SipUserAgent *)((char *)this + 288), v31);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C52C9590(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v2, 0x10A0C40E475C269);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipUserAgent::logPrefix(SipUserAgent *this, ImsOutStream *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 1)) == 0)
  {
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"UserAgent: ", 11);
    *((unsigned char *)a2 + 17) = 0;
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 104))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [UserAgent]: ", 14);
  *((unsigned char *)a2 + 17) = 0;
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52C970C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipUserAgent::logPrefix(SipUserAgent *this, ImsOutStream *a2)
{
}

void SipUserAgent::setThumperEnabled(SipUserAgent *this, int a2)
{
  *((unsigned char *)this + 672) = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 1);
      if (v7 && *(unsigned char *)(v7 + 1124))
      {
        char v8 = (SipDialogEventPackage **)*((void *)this + 33);
        uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 34);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipDialogEventClient::setThumperEnabled(v8, a2);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52C97F0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipUserAgent::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a2 + 296);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 184, v6);
  char v8 = (void **)(v5 + 192);
  if ((void **)(v5 + 192) == v7)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v15);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" requests aren't supported in dialogs. Seeing if we have an appropriate delegate.", 81);
    *(unsigned char *)(v15 + 17) = 0;
    char v13 = (unsigned char *)(v15 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v32 = *a2;
  uint64_t v33 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v32);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"incoming ", 9);
    *(unsigned char *)(v12 + 17) = 0;
    char v13 = (unsigned char *)(v12 + 17);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" didn't match an existing dialog. Seeing if we have an appropriate delegate.", 76);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *char v13 = 0;
    unint64_t v17 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    BOOL v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 128, v17);
    if ((void **)(a1 + 136) == v18 || (float v19 = v18[7]) == 0)
    {
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v21 = a1 + 24;
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(v22 + 56))(v21);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v23);
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 32))(v23, v24);
      uint64_t v25 = *(void **)(v23 + 8);
      if (v8 == v7)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" requests aren't supported", 26);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v23 + 17) = 0;
        uint64_t v27 = *a2;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_14_1);
        SipServerTransaction::rejectTransactionWithStatus(v27, 501, (uint64_t)__p);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" requests aren't supported outside dialogs", 42);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v23 + 17) = 0;
        uint64_t v26 = *a2;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_14_1);
        SipServerTransaction::rejectTransactionWithStatus(v26, 481, (uint64_t)__p);
      }
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      unint64_t v20 = (std::__shared_weak_count *)a2[1];
      uint64_t v30 = *a2;
      uint64_t v31 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t *))(*(void *)v19 + 16))(v19, &v30);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
}

void sub_1C52C9D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUserAgent::conferenceServerUri(std::__shared_weak_count **this@<X0>, uint64_t a2@<X8>)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = SipUserAgent::config((SipUserAgent *)this);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 175);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 160);
  }
  if (v5)
  {
    uint64_t v6 = (const SipUri *)(SipUserAgent::config((SipUserAgent *)this) + 48);
    SipUri::SipUri((SipUri *)a2, v6);
    return;
  }
  uint64_t v7 = this[2];
  if (v7 && (char v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = this[1];
    memset(&v28, 0, sizeof(v28));
    if (v10)
    {
      if (SHIBYTE(v10[160].__shared_owners_) < 0) {
        std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v10[159].__shared_weak_owners_, (std::string::size_type)v10[160].__vftable);
      }
      else {
        std::string v28 = *(std::string *)((char *)v10 + 3832);
      }
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        char v13 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
        UseDomainForConferenceServerKey = (void **)ImsPrefs::getUseDomainForConferenceServerKey(v13);
        if (ImsPrefs::BOOLValue(v13, UseDomainForConferenceServerKey)) {
          goto LABEL_36;
        }
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v9 = 0;
    memset(&v28, 0, sizeof(v28));
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, (char *)&str_14_1);
  std::string::size_type v11 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v28.__r_.__value_.__l.__size_;
  }
  if (v11) {
    goto LABEL_36;
  }
  uint64_t v10 = 0;
LABEL_22:
  std::operator+<char>();
  uint64_t v15 = std::string::append(&v25, ".mcc", 4uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int shared_owners_high = SHIBYTE(v10[155].__shared_owners_);
  if (shared_owners_high >= 0) {
    p_shared_weak_owners = (const std::string::value_type *)&v10[154].__shared_weak_owners_;
  }
  else {
    p_shared_weak_owners = (const std::string::value_type *)v10[154].__shared_weak_owners_;
  }
  if (shared_owners_high >= 0) {
    std::string::size_type v19 = HIBYTE(v10[155].__shared_owners_);
  }
  else {
    std::string::size_type v19 = (std::string::size_type)v10[155].__vftable;
  }
  unint64_t v20 = std::string::append(&v26, p_shared_weak_owners, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = std::string::append(&v27, ".3gppnetwork.org", 0x10uLL);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v29[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  v28.__r_.__value_.__r.__words[0] = v23;
  v28.__r_.__value_.__l.__size_ = v29[0];
  *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v29 + 7);
  *((unsigned char *)&v28.__r_.__value_.__s + 23) = v24;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
LABEL_36:
  *(void *)(a2 + 400) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  SipUri::SipUri((SipUri *)a2);
  SipUri::fromString(a2, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C52CA0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUserAgent::config(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 208;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 208;
  }
  uint64_t v4 = *((void *)this + 1) + 208;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void SipUserAgent::setAssociatedUris(SipUserAgent *this, const SipUri ***a2, const SipUri *a3)
{
  uint64_t v7 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 552), &v7, (uint64_t)v8);
  ImsResult::~ImsResult((ImsResult *)v8);
  SipUserAgent::clearAssociatedUris(this);
  uint64_t v6 = *((void *)this + 68);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  SipRouteSet::operator=((SipUserAgent *)((char *)this + 480), a2);
  if (a3) {
    operator new();
  }
  *((void *)this + 67) = 0;
  operator new();
}

void sub_1C52CA3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  MEMORY[0x1C878E320](v9, 0x10B3C4064E45795);
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::publicUri(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 1);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v5 = *((void *)this + 67);
  if (!v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 61);
    if (v6 == *((uint64_t **)this + 62) || (uint64_t v5 = *v6) == 0)
    {
      if (v4 && *(unsigned char *)(v4 + 176))
      {
        uint64_t v7 = *(void *)(v4 + 144);
        uint64_t v9 = *(void *)(v7 + 248);
        char v8 = *(std::__shared_weak_count **)(v7 + 256);
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          int v10 = *(_DWORD *)(v9 + 528);
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        else
        {
          int v10 = *(_DWORD *)(v9 + 528);
        }
        if (v10 != 2)
        {
          uint64_t v13 = *((void *)this + 3);
          uint64_t v12 = (char *)this + 24;
          uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 64))(v12);
          (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"not emergency registered, using anonymous public URI", 52);
          *(unsigned char *)(v14 + 17) = 0;
          uint64_t v15 = (SipUri *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v14 + 17) = 0;
          uint64_t v5 = SipUri::anonymousUri(v15);
          if (!v3) {
            return v5;
          }
          goto LABEL_17;
        }
      }
      uint64_t v5 = *((void *)this + 31) + 1184;
    }
  }
  if (v3) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void sub_1C52CA598(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUserAgent::setPublicGruu(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 648);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Saving pub-gruu: ", 17);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  operator new();
}

void sub_1C52CA70C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

void SipUserAgent::publicDomain(SipUserAgent *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = (SipUri *)*((void *)this + 67);
  if (v4 && SipUri::isSipUri(v4))
  {
    uint64_t v5 = *((void *)this + 67);
    if (*(char *)(v5 + 39) < 0)
    {
      if (*(void *)(v5 + 24)) {
        goto LABEL_9;
      }
    }
    else if (*(unsigned char *)(v5 + 39))
    {
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(v5 + 48);
    if (v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 88))(v6)) {
LABEL_9:
    }
      SipHost::asString();
  }
  uint64_t v7 = (SipUri **)*((void *)this + 61);
  char v8 = (SipUri **)*((void *)this + 62);
  while (v7 != v8)
  {
    uint64_t v9 = *v7;
    if (SipUri::isSipUri(*v7))
    {
      if (*((char *)v9 + 39) < 0)
      {
        if (*((void *)v9 + 3)) {
          goto LABEL_20;
        }
      }
      else if (*((unsigned char *)v9 + 39))
      {
        goto LABEL_20;
      }
      uint64_t v10 = *((void *)v9 + 6);
      if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 88))(v10)) {
LABEL_20:
      }
        SipHost::asString();
    }
    ++v7;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (!v11)
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v12 = (std::string *)(*((void *)this + 31) + 2000);
    long long v14 = 0u;
    SipUri::SipUri((uint64_t)&v14, v12);
    uint64_t v13 = BYTE7(v16);
    if (SBYTE7(v16) < 0) {
      uint64_t v13 = *((void *)&v15 + 1);
    }
    if ((v13 || (void)v17 && (*(unsigned int (**)(void))(*(void *)v17 + 88))(v17))
      && !SipUri::isBarred((SipUri *)&v14))
    {
      SipHost::asString();
    }
    SipUri::~SipUri((SipUri *)&v14);
  }
}

void sub_1C52CA938(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipUserAgent::lastPreferredPublicUriString(SipUserAgent *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 552), &v5, (uint64_t)v6);
  ImsResult::~ImsResult((ImsResult *)v6);
  uint64_t v4 = *((void *)this + 67);
  if (v4 || (uint64_t v4 = *((void *)this + 68)) != 0) {
    SipUri::asString(v4, a2);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_14_1);
  }
  ImsLock::~ImsLock(&v5);
}

void sub_1C52CA9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void SipUserAgent::clearLastPreferredPublicUri(SipUserAgent *this)
{
  uint64_t v4 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 552), &v4, (uint64_t)v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Clearing lastPreferredPublicUri ", 32);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((void *)this + 68);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 68) = 0;
  ImsLock::~ImsLock(&v4);
}

void sub_1C52CAB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

uint64_t SipUserAgent::setPreferredIdentityForAnonymousCalls(SipUserAgent *this, const SipUri *a2)
{
  uint64_t v4 = *((void *)this + 77);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const SipUri *))(*(void *)a2 + 16))(a2);
  *((void *)this + 77) = result;
  return result;
}

SipHeader *SipMessage::header<SipSupportedHeader>(SipMessage *a1)
{
  uint64_t result = SipMessage::headerWithName(a1, "Supported", 1);
  if (result)
  {
  }
  return result;
}

uint64_t *SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)(result + 8);
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v6 = (void **)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void **)v4[2];
          BOOL v8 = *v7 == v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

std::string *SipUserAgent::addUAHeaders(SipUserAgent *this, SipMessage *a2)
{
  uint64_t v4 = SipMessage::headerWithName(a2, "Allow", 1);
  if (v4) {
  else
  }
    uint64_t v5 = 0;
  uint64_t v7 = (char *)*((void *)v5 + 9);
  uint64_t v6 = (uint64_t **)(v5 + 72);
  std::__tree<std::string>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = (uint64_t *)v6;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v65 = 0;
  int v66 = 0;
  v67[0] = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v65, *((void *)this + 22) + 184);
  BOOL v8 = (SipUserAgent *)*((void *)this + 16);
  if (v8 != (SipUserAgent *)((char *)this + 136))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v65, (void **)v8 + 4, (uint64_t)v8 + 32);
      uint64_t v9 = (SipUserAgent *)*((void *)v8 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(SipUserAgent **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (SipUserAgent *)*((void *)v8 + 2);
          BOOL v11 = *(void *)v10 == (void)v8;
          BOOL v8 = v10;
        }
        while (!v11);
      }
      BOOL v8 = v10;
    }
    while (v10 != (SipUserAgent *)((char *)this + 136));
  }
  uint64_t v12 = (uint64_t *)v65;
  if (v65 != &v66)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v6 - 1, (void **)v12 + 4, (uint64_t)(v12 + 4));
      uint64_t v13 = (char *)v12[1];
      if (v13)
      {
        do
        {
          long long v14 = (char **)v13;
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (char **)v12[2];
          BOOL v11 = *v14 == (char *)v12;
          uint64_t v12 = (uint64_t *)v14;
        }
        while (!v11);
      }
      uint64_t v12 = (uint64_t *)v14;
    }
    while (v14 != &v66);
  }
  std::__tree<std::string>::destroy((uint64_t)&v65, v66);
  if (a2)
  {
    if (v15)
    {
      long long v16 = v15;
      if (!*(unsigned char *)(SipUserAgent::config(this) + 688)) {
        goto LABEL_129;
      }
      long long v17 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v18 = v17[23];
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = v17[23];
      }
      else {
        uint64_t v19 = *((void *)v17 + 1);
      }
      if (v19 == 3)
      {
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v17, &SipRequest::kMethodBye, *((void *)v17 + 1))) {
            goto LABEL_111;
          }
        }
        else
        {
          if (!v17[23]) {
            goto LABEL_111;
          }
          long long v20 = &SipRequest::kMethodBye;
          while (*v17 == *(unsigned __int8 *)v20)
          {
            ++v17;
            long long v20 = (long long *)((char *)v20 + 1);
            if (!--v18) {
              goto LABEL_111;
            }
          }
        }
      }
      long long v29 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v30 = v29[23];
      if ((v30 & 0x80u) == 0) {
        uint64_t v31 = v29[23];
      }
      else {
        uint64_t v31 = *((void *)v29 + 1);
      }
      if (v31 == 6)
      {
        if ((v30 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v29, "INVITE", *((void *)v29 + 1))) {
            goto LABEL_111;
          }
        }
        else
        {
          if (!v29[23]) {
            goto LABEL_111;
          }
          long long v32 = "INVITE";
          while (*v29 == *(unsigned __int8 *)v32)
          {
            ++v29;
            ++v32;
            if (!--v30) {
              goto LABEL_111;
            }
          }
        }
      }
      long long v33 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v34 = v33[23];
      if ((v34 & 0x80u) == 0) {
        uint64_t v35 = v33[23];
      }
      else {
        uint64_t v35 = *((void *)v33 + 1);
      }
      if (v35 == 7)
      {
        if ((v34 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v33, "OPTIONS", *((void *)v33 + 1))) {
            goto LABEL_111;
          }
        }
        else
        {
          if (!v33[23]) {
            goto LABEL_111;
          }
          long long v36 = "OPTIONS";
          while (*v33 == *(unsigned __int8 *)v36)
          {
            ++v33;
            ++v36;
            if (!--v34) {
              goto LABEL_111;
            }
          }
        }
      }
      long long v37 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v38 = v37[23];
      if ((v38 & 0x80u) == 0) {
        uint64_t v39 = v37[23];
      }
      else {
        uint64_t v39 = *((void *)v37 + 1);
      }
      if (v39 == 9)
      {
        if ((v38 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v37, "SUBSCRIBE", *((void *)v37 + 1))) {
            goto LABEL_111;
          }
        }
        else
        {
          if (!v37[23]) {
            goto LABEL_111;
          }
          uint64_t v40 = "SUBSCRIBE";
          while (*v37 == *(unsigned __int8 *)v40)
          {
            ++v37;
            ++v40;
            if (!--v38) {
              goto LABEL_111;
            }
          }
        }
      }
      uint64_t v41 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v42 = v41[23];
      if ((v42 & 0x80u) == 0) {
        uint64_t v43 = v41[23];
      }
      else {
        uint64_t v43 = *((void *)v41 + 1);
      }
      if (v43 == 6)
      {
        if ((v42 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v41, "NOTIFY", *((void *)v41 + 1))) {
            goto LABEL_111;
          }
        }
        else
        {
          if (!v41[23]) {
            goto LABEL_111;
          }
          uint64_t v44 = "NOTIFY";
          while (*v41 == *(unsigned __int8 *)v44)
          {
            ++v41;
            ++v44;
            if (!--v42) {
              goto LABEL_111;
            }
          }
        }
      }
      uint64_t v45 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
      uint64_t v46 = v45[23];
      if ((v46 & 0x80u) == 0) {
        uint64_t v47 = v45[23];
      }
      else {
        uint64_t v47 = *((void *)v45 + 1);
      }
      if (v47 != 5) {
        goto LABEL_100;
      }
      if ((v46 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v45, "REFER", *((void *)v45 + 1))) {
          goto LABEL_100;
        }
      }
      else if (v45[23])
      {
        long long v48 = "REFER";
        while (*v45 == *(unsigned __int8 *)v48)
        {
          ++v45;
          ++v48;
          if (!--v46) {
            goto LABEL_111;
          }
        }
LABEL_100:
        uint64_t v49 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)v16 + 112))(v16);
        uint64_t v50 = v49[23];
        if ((v50 & 0x80u) == 0) {
          uint64_t v51 = v49[23];
        }
        else {
          uint64_t v51 = *((void *)v49 + 1);
        }
        if (v51 != 7) {
          goto LABEL_129;
        }
        if ((v50 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v49, "MESSAGE", *((void *)v49 + 1))) {
            goto LABEL_129;
          }
        }
        else if (v49[23])
        {
          uint64_t v52 = "MESSAGE";
          while (*v49 == *(unsigned __int8 *)v52)
          {
            ++v49;
            ++v52;
            if (!--v50) {
              goto LABEL_111;
            }
          }
          goto LABEL_129;
        }
      }
LABEL_111:
      long long v53 = (SipUri *)*((void *)this + 67);
      if (!v53)
      {
        long long v54 = (SipUri **)*((void *)this + 61);
        if (v54 == *((SipUri ***)this + 62)) {
          long long v53 = 0;
        }
        else {
          long long v53 = *v54;
        }
      }
      int v55 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v55)
      {
        uint64_t v56 = std::__shared_weak_count::lock(v55);
        if (v56)
        {
          uint64_t v57 = *((void *)this + 1);
          if (v57)
          {
            if (*(unsigned char *)(v57 + 176))
            {
              if (v53 && !SipUri::isAnonymousUri(v53)) {
                goto LABEL_124;
              }
              long long v53 = (SipUri *)*((void *)this + 77);
            }
          }
        }
      }
      else
      {
        uint64_t v56 = 0;
      }
      if (v53)
      {
LABEL_124:
        uint64_t v58 = SipMessage::headerWithName(v16, "P-Preferred-Identity", 1);
        if (v58) {
        uint64_t v59 = (SipRouteSet *)(v58 + 8);
        }
        SipRouteSet::clear(v58 + 8);
        v67[0] = 0;
        v67[1] = 0;
        uint64_t v65 = (char **)&unk_1F20B37B0;
        int v66 = (char *)v67;
        __int16 v68 = 256;
        SipRouteSet::addHop(v59, v53, 0, 0, (const SipParameterMap *)&v65);
      }
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
LABEL_129:
      uint64_t v60 = SipUserAgent::config(this);
      SipMessage::addHeader(v16, (uint64_t)"Max-Forwards", *(_DWORD *)(v60 + 796), 0);
      uint64_t v61 = (uint64_t *)SipMessage::header<SipSupportedHeader>(v16);
      SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v61, *((void ***)this + 19), (void **)this + 20);
      goto LABEL_130;
    }
    if (v21)
    {
      long long v22 = v21;
      long long v23 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v23)
      {
        long long v23 = std::__shared_weak_count::lock(v23);
        long long v24 = v23;
        if (v23) {
          long long v23 = (std::__shared_weak_count *)*((void *)this + 1);
        }
      }
      else
      {
        long long v24 = 0;
      }
      if ((*((_DWORD *)v22 + 22) - 200) < 0x64
        || v23
        && (long long v25 = (ImsPrefs *)SipStack::prefs((SipStack *)v23),
            AddSupportedHeaderToAllResponsesKey = (void **)ImsPrefs::getAddSupportedHeaderToAllResponsesKey(v25),
            ImsPrefs::BOOLValue(v25, AddSupportedHeaderToAllResponsesKey)))
      {
        long long v27 = (uint64_t *)SipMessage::header<SipSupportedHeader>(v22);
        SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v27, *((void ***)this + 19), (void **)this + 20);
      }
      else if (SipMessage::firstHeaderWithName(v22, (uint64_t)"Supported", 0))
      {
        uint64_t v28 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"stripping Supported header from ", 32);
        *(unsigned char *)(v28 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v28 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" response", 9);
        *(unsigned char *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v28 + 17) = 0;
        SipMessage::removeHeadersWithName(v22, "Supported");
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
  }
LABEL_130:
  int v62 = (const std::string *)(SipUserAgent::config(this) + 664);
  uint64_t v63 = (std::string *)((char *)SipMessage::header<SipUserAgentHeader>(a2, 1) + 64);
  return std::string::operator=(v63, v62);
}

void sub_1C52CB5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v13, a12);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

void SipUserAgent::transportLayer(SipUserAgent *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = *((void *)this + 1);
    if (v6)
    {
      uint64_t v8 = *(void *)(v6 + 160);
      uint64_t v7 = *(void *)(v6 + 168);
      *a2 = v8;
      a2[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t SipUserAgent::transactionLayer(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 152);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void SipUserAgent::makeSipInstance(SipUserAgent *a1@<X0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v6 = SipUserAgent::config(a1);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 487);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(v6 + 472);
  }
  if (v7)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    SipUri::SipUri((SipUri *)v14);
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    *((void *)a3 + 7) = 0;
    *((void *)a3 + 8) = 0;
    *((void *)a3 + 5) = 0;
    *((void *)a3 + 6) = 0;
    *(void *)a3 = &unk_1F20B2680;
    *((void *)a3 + 1) = &_bambiDomain;
    *((void *)a3 + 4) = 0;
    if (*(unsigned char *)(SipUserAgent::config(a1) + 456))
    {
      uint64_t v8 = SipUserAgent::config(a1) + 464;
      uint64_t v9 = SipUserAgent::config(a1);
      uint64_t v10 = SipUserAgent::config(a1);
      ims::makeUrnFromImei(v8, v9 + 488, *(unsigned __int8 *)(v10 + 856), (uint64_t)v14, (uint64_t)v13);
    }
    else
    {
      uint64_t v11 = SipUserAgent::config(a1);
      ims::makeUrnFromUuid(v11 + 464, (uint64_t)v14, (uint64_t)v13);
    }
    ImsResult::operator=((uint64_t)a3, (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    if (((*(uint64_t (**)(void, void))(**((void **)a3 + 1) + 24))(*((void *)a3 + 1), *((unsigned int *)a3 + 4)) & 1) == 0)SipUri::asString((uint64_t)v14, a2); {
    SipUri::~SipUri((SipUri *)v14);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    memset((char *)&v14[1] + 8, 0, 48);
    *(void *)&v14[0] = &unk_1F20B2680;
    *((void *)&v14[0] + 1) = &_bambiDomain;
    LODWORD(v14[1]) = 1073741825;
    uint64_t v12 = (const std::string *)ImsResult::operator<<<char [12]>((uint64_t)v14, "no deviceId");
    ImsResult::ImsResult(a3, v12);
    ImsResult::~ImsResult((ImsResult *)v14);
  }
}

void sub_1C52CB928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult(v2);
  SipUri::~SipUri((SipUri *)va1);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::isAnonymousEmergencyCall(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 8);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v9 + 144);
  uint64_t v12 = *(void *)(v10 + 248);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 256);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    int v13 = *(_DWORD *)(v12 + 528);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  else
  {
    int v13 = *(_DWORD *)(v12 + 528);
  }
  if (v13 != 2) {
    uint64_t isEmergencyInvite = SipUserAgent::isEmergencyInvite(a1, a2, a3);
  }
  else {
LABEL_9:
  }
    uint64_t isEmergencyInvite = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return isEmergencyInvite;
}

uint64_t SipUserAgent::isEmergencyInvite(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9 && *(unsigned char *)(v9 + 176))
      {
        uint64_t v10 = a2[23];
        if ((v10 & 0x80u) == 0) {
          uint64_t v11 = a2[23];
        }
        else {
          uint64_t v11 = *((void *)a2 + 1);
        }
        if (v11 == 6)
        {
          if ((v10 & 0x80) != 0)
          {
            BOOL v22 = memcmp(*(const void **)a2, "INVITE", *((void *)a2 + 1)) == 0;
          }
          else
          {
            if (a2[23])
            {
              uint64_t v12 = v10 - 1;
              int v13 = "INVITE";
              do
              {
                int v15 = *a2++;
                int v14 = v15;
                int v17 = *(unsigned __int8 *)v13++;
                int v16 = v17;
                BOOL v19 = v12-- != 0;
              }
              while (v14 == v16 && v19);
              if (a3) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v14 == v16;
              }
              uint64_t v21 = v20;
              goto LABEL_31;
            }
            BOOL v22 = 1;
          }
        }
        else
        {
          BOOL v22 = 0;
        }
        if (a3) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v22;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
LABEL_31:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      return v21;
    }
  }
  return 0;
}

BOOL SipUserAgent::shouldAddSipInstanceForNetwork(SipUserAgent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 1);
  BOOL v6 = !v5
    || !ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v5 + 3160))
    || *(unsigned char *)(SipUserAgent::config(this) + 615) != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void SipUserAgent::fillContactForServicesAndMethod(SipUserAgent *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, long long *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (!v8)
  {
    int v13 = 0;
    goto LABEL_9;
  }
  int v13 = std::__shared_weak_count::lock(v8);
  if (!v13 || (int v27 = a5, (v14 = *((void *)a1 + 1)) == 0))
  {
LABEL_9:
    uint64_t v20 = *((void *)a1 + 3);
    BOOL v19 = (void *)((char *)a1 + 24);
    uint64_t v21 = (*(uint64_t (**)(void *))(v20 + 48))(v19);
    (*(void (**)(void *, uint64_t))(*v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"fillContactForServicesAndMethod: no stack or transport layer available", 70);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *(void *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 1073741826;
    if (!v13) {
      return;
    }
    goto LABEL_10;
  }
  int v16 = *(SipTransportLayer **)(v14 + 160);
  int v15 = *(std::__shared_weak_count **)(v14 + 168);
  if (!v15)
  {
    if (v16)
    {
      int v17 = 0;
      uint64_t v32 = 0;
      long long v31 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v28 = 0u;
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (!v16) {
    goto LABEL_9;
  }
  int v16 = *(SipTransportLayer **)(v14 + 160);
  int v17 = *(std::__shared_weak_count **)(v14 + 168);
  uint64_t v32 = 0;
  long long v31 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  if (!v17)
  {
LABEL_14:
    char v18 = 1;
    goto LABEL_15;
  }
  char v18 = 0;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_15:
  SipTransportLayer::fillContactHost(v16, (SipUri *)(a2 + 8), (uint64_t)&v28);
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!(*(unsigned int (**)(void, void))(**((void **)&v28 + 1) + 24))(*((void *)&v28 + 1), v29))
  {
    isWifuint64_t i = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v14 + 3160));
    int v23 = *(unsigned __int8 *)(v14 + 176);
    int v24 = *(unsigned __int8 *)(SipUserAgent::config(a1) + 456);
    uint64_t v25 = SipUserAgent::config(a1);
    if (v24) {
      int v26 = 1;
    }
    else {
      int v26 = 2;
    }
    SipHeaderTemplateMap::matchingHeaderTemplate(v25 + 1160, a4, v27, isWifi, v23, v26, a3);
  }
  ImsResult::ImsResult(a6, (uint64_t)&v28);
  ImsResult::~ImsResult((ImsResult *)&v28);
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1C52CC820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  ImsResult::~ImsResult((ImsResult *)&a32);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::getCallTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 264);
    if (v4)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      memset(v25, 0, sizeof(v25));
      std::string::basic_string[abi:ne180100]<0>(&v24, (char *)&str_14_1);
      std::string::basic_string[abi:ne180100]<0>(&v23, (char *)&str_14_1);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_14_1);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(v25, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        v25[0] = v24;
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v25[1], v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      }
      else {
        v25[1] = v23;
      }
      if (SHIBYTE(v22) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        BYTE8(v27) = 0;
        if (SHIBYTE(v22) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v26 = *(_OWORD *)__p;
        *(void *)&long long v27 = v22;
        BYTE8(v27) = 0;
      }
      uint64_t v7 = v4 + 152;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      BOOL v8 = SipDialogTable::fillReplacesHeaderData(v7, (void **)a2, (uint64_t)v25);
      char v9 = !v8;
      if (!a3) {
        char v9 = 1;
      }
      if ((v9 & 1) == 0)
      {
        memset(&__str, 0, sizeof(__str));
        if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__str, v25[0].__r_.__value_.__l.__data_, v25[0].__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = v25[0];
        }
        memset(&v19, 0, sizeof(v19));
        if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v19, v25[1].__r_.__value_.__l.__data_, v25[1].__r_.__value_.__l.__size_);
        }
        else {
          std::string v19 = v25[1];
        }
        memset(&v18, 0, sizeof(v18));
        if (SBYTE7(v27) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
        }
        else
        {
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v26;
          v18.__r_.__value_.__r.__words[2] = v27;
        }
        int v10 = BYTE8(v27);
        std::string::operator=((std::string *)(a3 + 104), &__str);
        std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v19.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)"to-tag";
          uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"to-tag", (uint64_t)&std::piecewise_construct, (long long **)&v17);
          std::string::operator=((std::string *)(v12 + 7), &v19);
        }
        std::string::size_type v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = v18.__r_.__value_.__l.__size_;
        }
        if (v13)
        {
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)"from-tag";
          uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"from-tag", (uint64_t)&std::piecewise_construct, (long long **)&v17);
          std::string::operator=((std::string *)(v14 + 7), &v18);
        }
        if (v10)
        {
          std::string::basic_string[abi:ne180100]<0>(&v17, (char *)&str_14_1);
          long long v28 = "early-only";
          int v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"early-only", (uint64_t)&std::piecewise_construct, (long long **)&v28);
          std::string::operator=((std::string *)(v15 + 7), &v17);
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      if (SBYTE7(v27) < 0) {
        operator delete((void *)v26);
      }
      if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v25[0].__r_.__value_.__l.__data_);
        if (v8) {
          return 1;
        }
      }
      else if (v8)
      {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1C52CCCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  SipLazuliManager::OutgoingMsrp::~OutgoingMsrp((void **)(v53 - 160));
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::getPreferredMedia(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x200000001;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 264);
    if (v5)
    {
      if (v4 < 0) {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v19 = *(std::string *)a2;
      }
      uint64_t v2 = (uint64_t)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 152, (void **)&v19.__r_.__value_.__l.__data_);
      uint64_t v6 = v5 + 160;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v6 == v2 || !*(unsigned char *)(v2 + 512)) {
        return 0x200000001;
      }
      *(_OWORD *)std::string __p = 0u;
      long long v18 = 0u;
      *(_OWORD *)int v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&v11, (const SipDialogParticipantInfo *)(v2 + 384));
      uint64_t v7 = v15[1];
      if (v15[1] == (void *)v16)
      {
LABEL_17:
        int v9 = 1;
      }
      else
      {
        BOOL v8 = v15[1];
        while (v8[1] != 3)
        {
          v8 += 3;
          if (v8 == (_DWORD *)v16) {
            goto LABEL_17;
          }
        }
        int v9 = 0;
        uint64_t v2 = *(void *)v8;
      }
      if (SHIBYTE(v18) < 0)
      {
        operator delete(__p[1]);
        uint64_t v7 = v15[1];
      }
      if (v7)
      {
        *(void *)&long long v16 = v7;
        operator delete(v7);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v14, *((void **)&v14 + 1));
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[1]);
      }
      uint64_t v20 = (void **)&v11;
      std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v20);
      if (v9) {
        return 0x200000001;
      }
    }
  }
  return v2;
}

void sub_1C52CCF64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUserAgent::determineIncomingMessageCategory(SipUserAgent *this, const SipRequest *a2, const SipResponse *a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 7) {
    goto LABEL_12;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "OPTIONS", *((void *)v6 + 1))) {
      goto LABEL_12;
    }
LABEL_22:
    long long v14 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v14)
    {
      int v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        long long v16 = v15;
        if (*((void *)this + 1))
        {
          std::string v17 = (std::__shared_weak_count *)*((void *)this + 2);
          if (v17 && (long long v18 = std::__shared_weak_count::lock(v17)) != 0)
          {
            int v19 = *(unsigned __int8 *)(*((void *)this + 1) + 2681);
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          else
          {
            int v19 = MEMORY[0xA79];
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          if (v19)
          {
            uint64_t v28 = 0;
            long long v29 = 0;
            uint64_t v22 = *((void *)this + 26);
            std::string v23 = (std::__shared_weak_count *)*((void *)this + 27);
            long long v27 = v23;
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v22)
            {
              uint64_t v28 = v22 + 8;
              long long v29 = v23;
              std::string v24 = &v26;
            }
            else
            {
              std::string v24 = &v28;
            }
            *std::string v24 = 0;
            v24[1] = 0;
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            }
            uint64_t v25 = v28;
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            if (v25) {
              return 3;
            }
          }
        }
        else
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
      }
    }
    return 0;
  }
  if (!v6[23]) {
    goto LABEL_22;
  }
  int v9 = "OPTIONS";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_22;
    }
  }
LABEL_12:
  int v10 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 == 8)
  {
    if ((v11 & 0x80) != 0)
    {
      uint64_t result = memcmp(*(const void **)v10, "REGISTER", *((void *)v10 + 1));
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    if (v10[23])
    {
      for (uint64_t i = "REGISTER"; *v10 == *(unsigned __int8 *)i; ++i)
      {
        ++v10;
        if (!--v11) {
          return 0;
        }
      }
      goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  uint64_t v21 = (SipDialogManager *)*((void *)this + 22);
  return SipDialogManager::determineIncomingMessageCategory(v21, a2, a3);
}

BOOL SipUserAgentConfig::countryOfOriginationAllowedInPANI(SipUserAgentConfig *this)
{
  uint64_t v2 = (char *)this + 864;
  std::string::basic_string[abi:ne180100]<0>(__p, "PANI");
  if (*((char *)this + 887) >= 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (const char *)*((void *)this + 108);
  }
  char v4 = v15;
  if (v15 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if (!strcasecmp(v3, (const char *)v5))
  {
    BOOL v10 = 1;
    if ((v4 & 0x80) == 0) {
      return v10;
    }
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 887) >= 0) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 108);
  }
  int v7 = v13;
  uint64_t v8 = (void *)v12[0];
  if (v13 >= 0) {
    int v9 = (const char *)v12;
  }
  else {
    int v9 = (const char *)v12[0];
  }
  BOOL v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0) {
    operator delete(v8);
  }
  if (v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v10;
}

void sub_1C52CD298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::countryOfOriginationAllowedInBody(SipUserAgentConfig *this)
{
  uint64_t v2 = (char *)this + 864;
  std::string::basic_string[abi:ne180100]<0>(__p, "PIDF");
  if (*((char *)this + 887) >= 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (const char *)*((void *)this + 108);
  }
  char v4 = v15;
  if (v15 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if (!strcasecmp(v3, (const char *)v5))
  {
    BOOL v10 = 1;
    if ((v4 & 0x80) == 0) {
      return v10;
    }
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 887) >= 0) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 108);
  }
  int v7 = v13;
  uint64_t v8 = (void *)v12[0];
  if (v13 >= 0) {
    int v9 = (const char *)v12;
  }
  else {
    int v9 = (const char *)v12[0];
  }
  BOOL v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0) {
    operator delete(v8);
  }
  if (v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v10;
}

void sub_1C52CD390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::latLongAllowedInShortCodeCall(SipUserAgentConfig *this)
{
  uint64_t v2 = (char *)this + 888;
  std::string::basic_string[abi:ne180100]<0>(__p, "LATLONG");
  if (*((char *)this + 911) >= 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (const char *)*((void *)this + 111);
  }
  char v4 = v15;
  if (v15 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if (!strcasecmp(v3, (const char *)v5))
  {
    BOOL v10 = 1;
    if ((v4 & 0x80) == 0) {
      return v10;
    }
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 911) >= 0) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 111);
  }
  int v7 = v13;
  uint64_t v8 = (void *)v12[0];
  if (v13 >= 0) {
    int v9 = (const char *)v12;
  }
  else {
    int v9 = (const char *)v12[0];
  }
  BOOL v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0) {
    operator delete(v8);
  }
  if (v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v10;
}

void sub_1C52CD488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::civicInfoAllowedInShortCodeCall(SipUserAgentConfig *this)
{
  uint64_t v2 = (char *)this + 888;
  std::string::basic_string[abi:ne180100]<0>(__p, "CIVIC");
  if (*((char *)this + 911) >= 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (const char *)*((void *)this + 111);
  }
  char v4 = v15;
  if (v15 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if (!strcasecmp(v3, (const char *)v5))
  {
    BOOL v10 = 1;
    if ((v4 & 0x80) == 0) {
      return v10;
    }
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 911) >= 0) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 111);
  }
  int v7 = v13;
  uint64_t v8 = (void *)v12[0];
  if (v13 >= 0) {
    int v9 = (const char *)v12;
  }
  else {
    int v9 = (const char *)v12[0];
  }
  BOOL v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0) {
    operator delete(v8);
  }
  if (v15 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v10;
}

void sub_1C52CD580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipStackLayer::~SipStackLayer(SipStackLayer *this)
{
  *(void *)this = &unk_1F20BC510;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20BC510;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x1C878E320](v2, 0x1000C40BDFB0063);
  }
  if (*a1) {
    MEMORY[0x1C878E320](*a1, 0x1000C4052888210);
  }
  return a1;
}

uint64_t *std::unique_ptr<LazuliMessageEncodingMap>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  SipHeader *result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 40);
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v2);
    JUMPOUT(0x1C878E320);
  }
  return result;
}

void std::__shared_ptr_emplace<SipDialogManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipDialogManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipMessageManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipMessageManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipMessageManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipOptionsManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOptionsManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipOptionsManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipDialogEventClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogEventClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipDialogEventClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__shared_ptr_emplace<SipLazuliManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipLazuliManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipLazuliManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C52CDC08(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::string>::erase(a1, (uint64_t)v3);
  return 1;
}

uint64_t *std::__tree<std::string>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t _GLOBAL__sub_I_SipUserAgent_cpp()
{
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
}

uint64_t IBIRTPStackController::IBIRTPStackController(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a4;
  int v7 = (std::__shared_weak_count *)a4[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20BC6F8;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v7;
  if (!v7)
  {
    *(_DWORD *)(a1 + 64) = 0;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 64) = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v6) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v6);
LABEL_10:
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_1F20BC530;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return a1;
}

void IBIRTPStackController::~IBIRTPStackController(IBIRTPStackController *this)
{
  *(void *)this = &unk_1F20BC530;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 13));
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*((void **)this + 10));
  RTPStackController::~RTPStackController(this);
}

{
  uint64_t vars8;

  IBIRTPStackController::~IBIRTPStackController(this);
  JUMPOUT(0x1C878E320);
}

void RTPStackController::~RTPStackController(RTPStackController *this)
{
  *(void *)this = &unk_1F20BC6F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void IBIRTPStackController::initialize(uint64_t a1, std::string::size_type a2, int a3)
{
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v42.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  v42.__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = a1 + 96;
  if ((void **)(a1 + 104) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 96, (void **)a2))
  {
    __p[0].__r_.__value_.__r.__words[0] = a2;
    if (std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (long long **)__p)[56] == a3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
      std::string::basic_string[abi:ne180100]<0>(&v39, "");
      uint64_t v7 = ims::warn((uint64_t)__p, (uint64_t)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"AppId : ", 8);
      *(unsigned char *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" is already initialized for ", 28);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, std::string::size_type))(*(void *)v7 + 32))(v7, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v41 < 0) {
        operator delete(v39);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_54:
        operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_58;
      }
      goto LABEL_58;
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = a2;
  std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (long long **)__p)[56] = a3;
  if (!*(void *)(a1 + 136))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&v39, "");
    uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Initializing for ", 17);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string::size_type))(*(void *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" with AppId : ", 14);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v41 < 0) {
      operator delete(v39);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    long long v10 = *(NSObject **)(*(void *)(a1 + 48) + 344);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    if (v10) {
      dispatch_retain(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)operator new(0x80uLL);
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC5F8;
    uint64_t v12 = v11 + 1;
    IBIRTPClient::IBIRTPClient((IBIRTPClient *)&v11[1], (dispatch_object_t *)__p);
    shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_23:
        long long v14 = *(std::__shared_weak_count **)(a1 + 144);
        *(void *)(a1 + 136) = v12;
        *(void *)(a1 + 144) = v11;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (__p[0].__r_.__value_.__r.__words[0]) {
          dispatch_release((dispatch_object_t)__p[0].__r_.__value_.__l.__data_);
        }
        uint64_t v15 = *(void *)(a1 + 136);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v39, (void *)(a1 + 8));
        long long v16 = v40;
        long long v36 = v39;
        long long v37 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        IBIRTPClient::registerClient(v15, (uint64_t *)&v36, (uint64_t)__p);
        ImsResult::operator=((uint64_t)&v42, (uint64_t)__p);
        ImsResult::~ImsResult((ImsResult *)__p);
        if (v37) {
          std::__shared_weak_count::__release_weak(v37);
        }
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        goto LABEL_33;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v11[1].__shared_owners_ = (uint64_t)v12;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v11[1].__shared_owners_ = (uint64_t)v12;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Already initialized, just updating AppId for ", 45);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string::size_type))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to : ", 6);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v41 < 0) {
    operator delete(v39);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  uint64_t v17 = *(void *)(a1 + 120);
  if (!v17) {
    goto LABEL_58;
  }
  long long v18 = *(RTPManager **)(a1 + 48);
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)(v17 + 24) + 176))();
  RTPManager::stackIdForSession(v18, v19, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
  }
  uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a2 + 8);
  }
  if (size != v21)
  {
    if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_58;
    }
    goto LABEL_54;
  }
  if (v22 >= 0) {
    std::string v23 = (const std::string::value_type *)a2;
  }
  else {
    std::string v23 = *(const std::string::value_type **)a2;
  }
  if ((*((unsigned char *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v28 = (void *)__p[0].__r_.__value_.__r.__words[0];
    int v29 = memcmp(__p[0].__r_.__value_.__l.__data_, v23, __p[0].__r_.__value_.__l.__size_);
    operator delete(v28);
    if (v29) {
      goto LABEL_58;
    }
  }
  else if (*((unsigned char *)&__p[0].__r_.__value_.__s + 23))
  {
    uint64_t v24 = 0;
    do
    {
      int v25 = __p[0].__r_.__value_.__s.__data_[v24];
      int v26 = v23[v24];
    }
    while (v25 == v26 && HIBYTE(__p[0].__r_.__value_.__r.__words[2]) - 1 != v24++);
    if (v25 != v26) {
      goto LABEL_58;
    }
  }
  long long v30 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
LABEL_58:
  __p[0].__r_.__value_.__r.__words[0] = a2;
  char v31 = std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (long long **)__p)[56];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  uint64_t v32 = ims::info((uint64_t)__p, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"IBI Stack Controller initialized!", 33);
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v32 + 17) = 0;
  if (v41 < 0) {
    operator delete(v39);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  memset(__p, 0, 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    __p[0] = *(std::string *)a2;
  }
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 1174405120;
  v33[2] = ___ZN21IBIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke;
  void v33[3] = &__block_descriptor_tmp_32;
  v33[4] = a1;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = __p[0];
  }
  v35[72] = v31;
  ImsResult::ImsResult((ImsResult *)v35, &v42);
  ims::performBlock((IMSClientManager *)v33);
  ImsResult::~ImsResult((ImsResult *)v35);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  ImsResult::~ImsResult((ImsResult *)&v42);
}

void sub_1C52CE6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,dispatch_object_t object,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  ImsResult::~ImsResult((ImsResult *)&object);
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  ImsResult::~ImsResult((ImsResult *)(v38 - 120));
  _Unwind_Resume(a1);
}

void ___ZN21IBIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    char v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (void (***)(void, uint64_t *, uint64_t, uint64_t, unsigned char *))v2[3];
      if (v6)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, v2 + 1);
        uint64_t v7 = *(unsigned __int8 *)(a1 + 136);
        ImsResult::ImsResult((ImsResult *)v8, (const std::string *)(a1 + 64));
        (**v6)(v6, &v9, a1 + 40, v7, v8);
        ImsResult::~ImsResult((ImsResult *)v8);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C52CE88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 64), (const std::string *)(a2 + 64));
}

void sub_1C52CE92C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void IBIRTPStackController::cleanup(void *a1, const void **a2)
{
  if (!a1[6]) {
    return;
  }
  long long v4 = (void *)a1[9];
  long long v75 = 0;
  uint64_t v76 = 0;
  std::string v74 = &v75;
  BOOL v71 = (uint64_t **)(a1 + 9);
  uint64_t v5 = a1 + 10;
  if (v4 == a1 + 10) {
    goto LABEL_89;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v75;
  while (1)
  {
    uint64_t v8 = (uint64_t ***)&v75;
    if (v7 == &v75) {
      goto LABEL_10;
    }
    uint64_t v9 = v6;
    long long v10 = &v75;
    if (v6)
    {
      do
      {
        uint64_t v8 = (uint64_t ***)v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v8 = (uint64_t ***)v10[2];
        BOOL v11 = *v8 == v10;
        long long v10 = (uint64_t **)v8;
      }
      while (v11);
    }
    unsigned int v12 = *((_DWORD *)v4 + 8);
    if (*((_DWORD *)v8 + 8) < v12)
    {
LABEL_10:
      if (v6) {
        char v13 = (uint64_t **)v8;
      }
      else {
        char v13 = &v75;
      }
      if (v6)
      {
        long long v14 = (uint64_t **)(v8 + 1);
      }
      else
      {
        uint64_t v8 = &v74;
        long long v14 = &v75;
      }
      if (v8[1]) {
        goto LABEL_31;
      }
LABEL_26:
      uint64_t v17 = (uint64_t *)operator new(0x38uLL);
      long long v18 = v17;
      *((_DWORD *)v17 + 8) = *((_DWORD *)v4 + 8);
      v17[5] = v4[5];
      uint64_t v19 = v4[6];
      v17[6] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      *uint64_t v17 = 0;
      v17[1] = 0;
      void v17[2] = (uint64_t)v13;
      std::__shared_weak_count *v14 = v17;
      if (*v74)
      {
        std::string v74 = (uint64_t **)*v74;
        long long v18 = *v14;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v75, v18);
      ++v76;
      goto LABEL_31;
    }
    long long v14 = &v75;
    char v13 = &v75;
    if (!v6) {
      goto LABEL_26;
    }
    uint64_t v15 = v6;
    while (1)
    {
      while (1)
      {
        char v13 = (uint64_t **)v15;
        unsigned int v16 = *((_DWORD *)v15 + 8);
        if (v16 <= v12) {
          break;
        }
        uint64_t v15 = *v13;
        long long v14 = v13;
        if (!*v13) {
          goto LABEL_26;
        }
      }
      if (v16 >= v12) {
        break;
      }
      uint64_t v15 = v13[1];
      if (!v15)
      {
        long long v14 = v13 + 1;
        goto LABEL_26;
      }
    }
LABEL_31:
    uint64_t v20 = (void *)v4[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (void *)v4[2];
        BOOL v11 = *v21 == (void)v4;
        long long v4 = v21;
      }
      while (!v11);
    }
    if (v21 == v5) {
      break;
    }
    uint64_t v7 = v74;
    uint64_t v6 = v75;
    long long v4 = v21;
  }
  int v22 = v74;
  if (v74 != &v75)
  {
    do
    {
      unsigned int v23 = *((_DWORD *)v22 + 8);
      uint64_t v24 = (IBISession *)v22[5];
      int v25 = (std::__shared_weak_count *)v22[6];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v24) {
        goto LABEL_81;
      }
      int v26 = (RTPManager *)a1[6];
      uint64_t v72 = v24;
      uint64_t v27 = (*(uint64_t (**)(void))(*((void *)v24 + 3) + 176))();
      RTPManager::stackIdForSession(v26, v27, &__s1);
      char v28 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v30 = *((unsigned __int8 *)a2 + 23);
      char v31 = a2;
      size_t v32 = (size_t)a2[1];
      if ((v30 & 0x80u) == 0) {
        long long v33 = (const void *)*((unsigned __int8 *)a2 + 23);
      }
      else {
        long long v33 = a2[1];
      }
      if ((const void *)size != v33) {
        goto LABEL_59;
      }
      if ((v30 & 0x80u) == 0) {
        std::string v34 = (unsigned __int8 *)v31;
      }
      else {
        std::string v34 = (unsigned __int8 *)*v31;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string __p = (void *)__s1.__r_.__value_.__r.__words[0];
        if (memcmp(__s1.__r_.__value_.__l.__data_, v34, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_59;
        }
        operator delete(__p);
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        uint64_t v36 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        while (p_s1->__r_.__value_.__s.__data_[0] == *v34)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v34;
          if (!--v36) {
            goto LABEL_79;
          }
        }
LABEL_59:
        if (v33 == (const void *)15)
        {
          a2 = v31;
          if ((v30 & 0x80) != 0)
          {
            BOOL v46 = memcmp(*v31, "kIBIAllSessions", v32) == 0;
            goto LABEL_72;
          }
          if (v30)
          {
            uint64_t v37 = v30 - 1;
            uint64_t v38 = "kIBIAllSessions";
            uint64_t v39 = v31;
            do
            {
              int v41 = *(unsigned __int8 *)v39;
              uint64_t v39 = (const void **)((char *)v39 + 1);
              int v40 = v41;
              int v43 = *(unsigned __int8 *)v38++;
              int v42 = v43;
              BOOL v44 = v37-- != 0;
              char v45 = v44;
              BOOL v46 = v40 == v42;
            }
            while (v40 == v42 && (v45 & 1) != 0);
LABEL_72:
            if (v28 < 0) {
LABEL_73:
            }
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          else
          {
            BOOL v46 = 1;
            if (v28 < 0) {
              goto LABEL_73;
            }
          }
        }
        else
        {
          BOOL v46 = 0;
          a2 = v31;
          if (v28 < 0) {
            goto LABEL_73;
          }
        }
        uint64_t v47 = v72;
        if (!v46) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }
LABEL_79:
      a2 = v31;
      uint64_t v47 = v72;
LABEL_80:
      IBISession::cleanup(v47, 1);
      std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>(v71, v23);
LABEL_81:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      long long v48 = v22[1];
      if (v48)
      {
        do
        {
          uint64_t v49 = (uint64_t **)v48;
          long long v48 = (uint64_t *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          uint64_t v49 = (uint64_t **)v22[2];
          BOOL v11 = *v49 == (uint64_t *)v22;
          int v22 = v49;
        }
        while (!v11);
      }
      int v22 = v49;
    }
    while (v49 != &v75);
  }
LABEL_89:
  uint64_t v50 = a1[15];
  if (!v50)
  {
    size_t v55 = *((unsigned __int8 *)a2 + 23);
    size_t v56 = (size_t)a2[1];
    goto LABEL_107;
  }
  uint64_t v51 = (RTPManager *)a1[6];
  uint64_t v52 = (*(uint64_t (**)(void))(*(void *)(v50 + 24) + 176))();
  RTPManager::stackIdForSession(v51, v52, &__s1);
  uint64_t v53 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = __s1.__r_.__value_.__l.__size_;
  }
  size_t v55 = *((unsigned __int8 *)a2 + 23);
  size_t v56 = (size_t)a2[1];
  if ((v55 & 0x80u) == 0) {
    uint64_t v57 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v57 = a2[1];
  }
  if ((const void *)v54 != v57)
  {
LABEL_107:
    if ((v55 & 0x80u) == 0) {
      size_t v60 = v55;
    }
    else {
      size_t v60 = v56;
    }
    if (v60 != 15)
    {
      BOOL v68 = 0;
      if (v50) {
        goto LABEL_129;
      }
      goto LABEL_124;
    }
    if ((v55 & 0x80) != 0)
    {
      BOOL v68 = memcmp(*a2, "kIBIAllSessions", v56) == 0;
    }
    else
    {
      if (!v55)
      {
        BOOL v68 = 1;
        if (v50) {
          goto LABEL_129;
        }
LABEL_124:
        if (v68) {
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      size_t v61 = v55 - 1;
      int v62 = "kIBIAllSessions";
      do
      {
        int v64 = *(unsigned __int8 *)a2;
        a2 = (const void **)((char *)a2 + 1);
        int v63 = v64;
        int v66 = *(unsigned __int8 *)v62++;
        int v65 = v66;
        BOOL v44 = v61-- != 0;
        char v67 = v44;
        BOOL v68 = v63 == v65;
      }
      while (v63 == v65 && (v67 & 1) != 0);
    }
    if (v50) {
      goto LABEL_129;
    }
    goto LABEL_124;
  }
  if ((v55 & 0x80u) == 0) {
    uint64_t v58 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v58 = (unsigned __int8 *)*a2;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v58, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_107;
    }
  }
  else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v59 = &__s1;
    while (v59->__r_.__value_.__s.__data_[0] == *v58)
    {
      uint64_t v59 = (std::string *)((char *)v59 + 1);
      ++v58;
      if (!--v53) {
        goto LABEL_127;
      }
    }
    goto LABEL_107;
  }
LABEL_127:
  LOBYTE(v68) = 1;
LABEL_129:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (v68)
  {
LABEL_132:
    int v69 = (std::__shared_weak_count *)a1[16];
    a1[15] = 0;
    a1[16] = 0;
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
  }
LABEL_134:
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(v75);
}

void sub_1C52CEEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

uint64_t IBIRTPStackController::cleanupAfterHandover(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, 0);
}

void IBIRTPStackController::createRTPSession(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, void **a6@<X5>, dispatch_object_t *a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = a1 + 96;
  if ((void **)(a1 + 104) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 96, a6))
  {
    char v18 = -1;
  }
  else
  {
    uint64_t v17 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v16, &v47, a6);
    if (!v17) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    char v18 = *(unsigned char *)(v17 + 56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v47, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Attempting to create new RTP session for ", 41);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" with AppId : ", 14);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p);
  }
  if (v49 < 0) {
    operator delete(v47);
  }
  uint64_t v20 = (std::__shared_weak_count *)a4[1];
  if (v20)
  {
    uint64_t v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      int v41 = a7;
      uint64_t v22 = *a4;
      if (*a4)
      {
        unsigned int v23 = *(std::__shared_weak_count **)(v22 + 128);
        if (v23 && (unsigned int v23 = std::__shared_weak_count::lock(v23)) != 0)
        {
          int v40 = v23;
          unsigned int v23 = *(std::__shared_weak_count **)(v22 + 120);
        }
        else
        {
          int v40 = 0;
        }
        uint64_t v38 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
        uint64_t v39 = a3;
        int v36 = a5;
        uint64_t v37 = a8;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, (void *)(a1 + 8));
        int v26 = v47;
        int v25 = v48;
        char v28 = *(void **)a2;
        uint64_t v27 = *(std::__shared_weak_count **)(a2 + 8);
        int v29 = (std::__shared_weak_count *)operator new(0x440uLL);
        v29->__shared_owners_ = 0;
        v29->__shared_weak_owners_ = 0;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC648;
        uint64_t v47 = v28;
        long long v48 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = *(std::__shared_weak_count **)(a1 + 56);
        std::string __p = *(void **)(a1 + 48);
        char v45 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v26;
        uint64_t v51 = v25;
        char v31 = v29 + 1;
        IBISession::IBISession((uint64_t)&v29[1], (uint64_t *)&v47, v39, (uint64_t *)&__p, v38, &v50, v18, (long long *)a6, v41);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if (v48) {
          std::__shared_weak_count::__release_weak(v48);
        }
        shared_weak_owners = (std::__shared_weak_count *)v29[1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          if (shared_weak_owners->__shared_owners_ != -1)
          {
LABEL_38:
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
            int v42 = v29 + 2;
            int v43 = v29;
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v33 = *(std::__shared_weak_count **)(v22 + 128);
            if (v33)
            {
              long long v33 = std::__shared_weak_count::lock(v33);
              std::string v34 = v33;
              if (v33) {
                long long v33 = *(std::__shared_weak_count **)(v22 + 120);
              }
            }
            else
            {
              std::string v34 = 0;
            }
            uint64_t v35 = (ImsPrefs *)SipStack::prefs((SipStack *)v33);
            MediaSessionStateMachine::create((uint64_t *)&v42, v35, v36 == 2, v37);
            if (v34) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
LABEL_49:
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            return;
          }
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v29[1].__shared_owners_ = (uint64_t)v31;
          v29[1].__shared_weak_owners_ = (uint64_t)v29;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
        else
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v29[1].__shared_owners_ = (uint64_t)v31;
          v29[1].__shared_weak_owners_ = (uint64_t)v29;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        goto LABEL_38;
      }
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v24 = ims::error((uint64_t)&v47, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"SDPSession expired.", 19);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  if (v46 < 0) {
    operator delete(__p);
  }
  if (v49 < 0) {
    operator delete(v47);
  }
  *a8 = 0;
  a8[1] = 0;
  if (v21) {
    goto LABEL_49;
  }
}

void sub_1C52CF388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24,void *__p,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  std::string v34 = *(std::__shared_weak_count **)(v32 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::stackError(void *a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"stackError", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [error=", 8);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const std::string *, uint64_t))(a2->__r_.__value_.__r.__words[0] + 16))(a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  (*(void (**)(void *, const char *, void))(*a1 + 24))(a1, "kIBIAllSessions", 0);
  uint64_t v8 = a1[17];
  if (v8)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 72);
    *(void *)(v8 + 64) = 0;
    *(void *)(v8 + 72) = 0;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  long long v10 = (std::__shared_weak_count *)a1[18];
  a1[17] = 0;
  a1[18] = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)a1[13]);
  a1[12] = a1 + 13;
  a1[14] = 0;
  a1[13] = 0;
  ImsResult::ImsResult((ImsResult *)v11, a2);
  RTPStackController::stackError(a1, v11);
  ImsResult::~ImsResult((ImsResult *)v11);
}

void sub_1C52CF6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void RTPStackController::stackError(void *a1, const std::string *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[3];
      if (v7)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, a1 + 1);
        ImsResult::ImsResult((ImsResult *)v8, a2);
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v7 + 8))(v7, &v9, v8);
        ImsResult::~ImsResult((ImsResult *)v8);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52CF7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::addSession(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v22, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"addSession", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" session=", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  BOOL v11 = (uint64_t **)(a1 + 80);
  long long v10 = *(char **)(a1 + 80);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v12 = v10;
        unsigned int v13 = *((_DWORD *)v10 + 8);
        if (v13 <= a2) {
          break;
        }
        long long v10 = *(char **)v12;
        BOOL v11 = (uint64_t **)v12;
        if (!*(void *)v12) {
          goto LABEL_14;
        }
      }
      if (v13 >= a2) {
        break;
      }
      long long v10 = (char *)*((void *)v12 + 1);
      if (!v10)
      {
        BOOL v11 = (uint64_t **)(v12 + 8);
        goto LABEL_14;
      }
    }
  }
  else
  {
    unsigned int v12 = (char *)(a1 + 80);
LABEL_14:
    long long v14 = v12;
    unsigned int v12 = (char *)operator new(0x38uLL);
    *((_DWORD *)v12 + 8) = a2;
    *((void *)v12 + 5) = 0;
    *((void *)v12 + 6) = 0;
    *(void *)unsigned int v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = v14;
    std::__shared_weak_count *v11 = (uint64_t *)v12;
    uint64_t v15 = **(void **)(a1 + 72);
    uint64_t v16 = (uint64_t *)v12;
    if (v15)
    {
      *(void *)(a1 + 72) = v15;
      uint64_t v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v16);
    ++*(void *)(a1 + 88);
  }
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v12 + 6);
  *((void *)v12 + 5) = v18;
  *((void *)v12 + 6) = v17;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_1C52CFA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::removeSession(uint64_t **this, unsigned int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"removeSession", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>(this + 9, a2);
}

void sub_1C52CFC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleMediaError(IBIRTPStackController *this, unsigned int a2, int a3, int a4)
{
  unsigned int v20 = a2;
  std::string::basic_string[abi:ne180100]<0>(v18, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  char v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleMediaError", 16);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" rtpTimeout=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" rtcpTimeout=", 13);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  long long v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v14, (uint64_t)this + 72, &v20, (uint64_t)&v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v14)
  {
    IBISession::handleMediaError(v14, a3, a4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::warn((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleMediaError", 16);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C52CFF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v6 = a2 + 8;
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  unsigned int v9 = *a3;
  uint64_t v10 = v6;
  do
  {
    unsigned int v11 = *(_DWORD *)(v7 + 32);
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      unsigned int v13 = (uint64_t *)v7;
    }
    else {
      unsigned int v13 = (uint64_t *)(v7 + 8);
    }
    if (v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= *(_DWORD *)(v10 + 32))
  {
    uint64_t v16 = *(void *)(v10 + 40);
    uint64_t v15 = *(void *)(v10 + 48);
    *a1 = v16;
    a1[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1C52D0140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleStartMediaResponse(IBIRTPStackController *this, int a2, int a3)
{
  int v19 = a3;
  std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStartMediaResponse", 24);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  BOOL v12 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v13, (uint64_t)this + 72, (unsigned int *)&v19, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v13)
  {
    IBISession::handleStartMediaResponse((int8x8_t *)v13, a2, a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleStartMediaResponse", 24);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C52D042C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleStopMediaResponse(IBIRTPStackController *this, int a2, int a3)
{
  int v20 = a3;
  std::string::basic_string[abi:ne180100]<0>(v18, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStopMediaResponse", 23);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v14, (uint64_t)this + 72, (unsigned int *)&v20, (uint64_t)&v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v14)
  {
    if (a2 == 2) {
      int v10 = 0;
    }
    else {
      int v10 = a2;
    }
    IBISession::handleStopMediaResponse((int8x8_t *)v14, v10, a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::warn((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleStopMediaResponse", 23);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C52D0774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleTerminateMediaSessionResponse(IBIRTPStackController *this, unsigned int a2, unsigned int a3)
{
  unsigned int v17 = a3;
  std::string::basic_string[abi:ne180100]<0>(v15, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v15, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v11, (uint64_t)this + 72, &v17, (uint64_t)&v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v11)
  {
    (*(void (**)(void))(*(void *)v11 + 152))();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::warn((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C52D0ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleStartDTMFCodeResponse(IBIRTPStackController *this, int a2, int a3)
{
  int v19 = a3;
  std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  unsigned int v13 = 0;
  char v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v13, (uint64_t)this + 72, (unsigned int *)&v19, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v13)
  {
    IBISession::handleStartDTMFCodeResponse(v13, a2, a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C52D0E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleStopDTMFCodeResponse(IBIRTPStackController *this, int a2, int a3)
{
  int v19 = a3;
  std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  unsigned int v13 = 0;
  char v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v13, (uint64_t)this + 72, (unsigned int *)&v19, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v13)
  {
    IBISession::handleStopDTMFCodeResponse(v13, a2, a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C52D1164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleCreateAudioMediaSessionResponse(IBIRTPStackController *this, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v15, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  uint64_t v10 = *((void *)this + 15);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 160))(v10, a2, a3);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::warn((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1C52D14A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleConfigureAudioMediaSessionResponse(IBIRTPStackController *this, int a2, int a3)
{
  int v19 = a3;
  std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse", 40);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  unsigned int v13 = 0;
  char v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v13, (uint64_t)this + 72, (unsigned int *)&v19, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v13)
  {
    IBISession::handleConfigureAudioMediaSessionResponse((int8x8_t *)v13, a2, a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::warn((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse", 40);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C52D1794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::sendAudioCallEvent(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v12, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)&v12);
  if (a1)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)(v2 + 8);
    size_t v5 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"sendAudioCallEvent", 18);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [event=", 8);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v13 < 0) {
      operator delete(v12);
    }
    if (SBYTE7(v7) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    *(_OWORD *)std::string __p = 0u;
    AriSdk::ARI_CsiIceAudCallEventReq_SDK::ARI_CsiIceAudCallEventReq_SDK((AriSdk::ARI_CsiIceAudCallEventReq_SDK *)__p);
    operator new();
  }
  __cxa_bad_typeid();
}

void sub_1C52D1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  char v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    if (!v42)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v42);
  if (!v41)
  {
LABEL_7:
    MEMORY[0x1C878D7B0](&a9);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  goto LABEL_7;
}

void IBIRTPStackController::reportAPSession(uint64_t a1, void *a2, void *a3, __int16 a4, __int16 a5)
{
  __int16 v22 = a4;
  __int16 v21 = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v27, "");
  uint64_t v7 = ims::debug((uint64_t)__p, (uint64_t)&v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"reportAPSession", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [localPort=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" remotePort=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" callActive=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" remoteAddress=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  if (*a3) {
    IpAddress::asString(v25);
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "0");
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" localAddress=", 14);
  *(unsigned char *)(v7 + 17) = 0;
  if (*a2) {
    IpAddress::asString(&v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "0");
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, &v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  AriSdk::ARI_IBICallPsRtpReq_SDK::ARI_IBICallPsRtpReq_SDK((AriSdk::ARI_IBICallPsRtpReq_SDK *)__p);
  memset(v8, 0, sizeof(v8));
  std::vector<unsigned char>::vector(v8, 0x10uLL);
  LODWORD(v27) = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
}

void sub_1C52D269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1C878D740](&a23);
  _Unwind_Resume(a1);
}

void ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  size_t v5 = v3 - *(void *)a2;
  uint64_t v8 = 0;
  __n128 __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v4, v3, v5);
  AriSdk::TlvArray<unsigned char,16ul>::operator=(a1, &__p, v6);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1C52D28AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>()
{
}

void IBIRTPStackController::startAudio(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"startAudio", 10);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (!IBISession::_activeAudio) {
    IBIRTPStackController::sendAudioCallEvent(a1);
  }
}

void sub_1C52D2A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::stopAudio(void *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stopAudio", 9);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (IBISession::_activeAudio)
  {
    if (!a1[11]) {
      IBIRTPStackController::sendAudioCallEvent(a1);
    }
  }
}

void sub_1C52D2C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

BOOL IBIRTPStackController::sessionExists(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = (void *)(a1 + 80);
  if (v3 == (void *)(a1 + 80)) {
    return 0;
  }
  do
  {
    uint64_t v6 = v3[5];
    char v7 = (std::__shared_weak_count *)v3[6];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(v6 + 24) + 176))();
    BOOL v9 = v8 == a3;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8 == a3) {
      break;
    }
    long long v10 = (void *)v3[1];
    if (v10)
    {
      do
      {
        long long v11 = v10;
        long long v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        long long v11 = (void *)v3[2];
        BOOL v12 = *v11 == (void)v3;
        uint64_t v3 = v11;
      }
      while (!v12);
    }
    uint64_t v3 = v11;
  }
  while (v11 != v4);
  return v9;
}

void sub_1C52D2D44(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

char *IBIRTPStackController::setAppId(char *result, long long *a2, int a3)
{
  if (a3 != 255)
  {
    void v6[3] = v3;
    v6[4] = v4;
    char v5 = a3;
    v6[0] = a2;
    uint64_t result = std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(result + 96), (void **)a2, v6);
    result[56] = v5;
  }
  return result;
}

BOOL RTPStackController::controllerInitialized(RTPStackController *this)
{
  return *((_DWORD *)this + 16) == 2;
}

uint64_t RTPStackController::setStackControllerState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

char *std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void **a2, long long **a3)
{
  uint64_t v15 = 0;
  char v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v15, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    char v7 = v5;
    uint64_t v8 = *a3;
    uint64_t v6 = (char *)operator new(0x40uLL);
    BOOL v9 = (std::string *)(v6 + 32);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      *((void *)v6 + 6) = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    uint64_t v11 = v15;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v11;
    *char v7 = v6;
    uint64_t v12 = **(void **)a1;
    long long v13 = (uint64_t *)v6;
    if (v12)
    {
      *(void *)a1 = v12;
      long long v13 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void sub_1C52D2EA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<IBIRTPClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBIRTPClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IBIRTPClient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>(uint64_t **a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    char v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 8);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = (uint64_t **)v6;
      }
      else {
        BOOL v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        char v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      long long v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          long long v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      long long v14 = (std::__shared_weak_count *)v5[6];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      operator delete(v5);
    }
  }
}

void std::__shared_ptr_emplace<IBISession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IBISession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_CsiIceAudCallEventReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    unsigned int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      BOOL v8 = v7;
      if (a1[4])
      {
        BOOL v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        uint64_t v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C52D31B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *ice::detail::wrapCallback<int>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  aBlock[3] = &unk_1E650F828;
  aBlock[4] = a1;
  uint64_t result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t AriSdk::TlvArray<unsigned char,16ul>::operator=(uint64_t a1, __n128 *a2, const char *a3)
{
  if (a2->n128_u64[1] - a2->n128_u64[0] < 0x11)
  {
    std::vector<unsigned char>::__move_assign(a1, a2);
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/9f16a0bb-a2ea-11ef-bacb-1e361567c031/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v9 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v5, v6, 360, a1, a2->n128_u64[1] - a2->n128_u64[0], 16);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1C52D336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C52D33E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<unsigned char>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk23ARI_IBICallPsRtpReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[4])
      {
        char v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        uint64_t v11 = a1[4];
        uint64_t v12 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v9(a2, a3, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1C52D34E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipProxyRequireHeader::~SipProxyRequireHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipProxyRequireHeader::clone(SipProxyRequireHeader *this)
{
}

void sub_1C52D3630(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void LazuliSuccessReportHeader::create(const std::string *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20BC8C0;
  char v5 = v4 + 24;
  LazuliStringHeader::LazuliStringHeader((std::string *)v4 + 1, &LazuliHeader::kHeaderSuccessReport, a1);
  v4[104] = 1;
  *((void *)v4 + 3) = &unk_1F20BC910;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  if (!v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    goto LABEL_5;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    std::__shared_weak_count::__release_weak(v6);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C52D3740(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliSuccessReportHeader::~LazuliSuccessReportHeader(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliSuccessReportHeader::clone@<D0>(LazuliSuccessReportHeader *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F20BC988;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  _OWORD v4[3] = &unk_1F20BC848;
  *((unsigned char *)v4 + 104) = 1;
  *(void *)&long long v6 = v4 + 3;
  *((void *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1C52D38DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC8C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC8C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BC988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliSuccessReportHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SDPRTCPXR::SDPRTCPXR(uint64_t a1, long long **a2, void *a3, long long *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "rtcp-xr");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v13;
  }
  *(void *)a1 = &unk_1F20BC9D8;
  *(void *)(a1 + 40) = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 56), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  char v9 = (std::string *)(a1 + 80);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 96) = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1C52D3C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v4 + 48);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)uint64_t v4 = v6;
  if (*(char *)(v4 + 39) < 0) {
    operator delete(*v5);
  }
  _Unwind_Resume(a1);
}

void SDPRTCPXR::toStream(SDPRTCPXR *this, ImsOutStream *a2)
{
  uint64_t v2 = (long long *)*((void *)this + 7);
  uint64_t v3 = (long long *)*((void *)this + 8);
  if (v2 != v3)
  {
    for (char i = 0; ; char i = 1)
    {
      memset(&v14, 0, sizeof(v14));
      if ((*((char *)v2 + 23) & 0x80000000) == 0) {
        break;
      }
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      if (i) {
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v8 = (void *)*((void *)a2 + 1);
      v13.__r_.__value_.__s.__data_[0] = 97;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
      *((unsigned char *)a2 + 17) = 0;
      char v9 = (void *)*((void *)a2 + 1);
      v13.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, SDPRTCPXR *))(*(void *)this + 32))(&v12, this);
      LoggableString::LoggableString(&v13, &v12);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v13);
      long long v10 = (void *)*((void *)a2 + 1);
      __p.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
      *((unsigned char *)a2 + 17) = 0;
      LoggableString::LoggableString(&__p, &v14);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
      if (v2 == v3) {
        return;
      }
    }
    long long v7 = *v2;
    v14.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    if ((i & 1) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
    goto LABEL_8;
  }
}

void sub_1C52D3E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void *SDPRTCPXR::value@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void *ims::toString<UacAccessResponse>@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 5) {
    char v5 = "Unknown";
  }
  else {
    char v5 = off_1E650F848[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void *ims::toString<UacCallStatus>@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 4) {
    char v5 = "Unknown";
  }
  else {
    char v5 = off_1E650F878[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t nas::barringTypeFromString(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
    return 2;
  if (!strcasecmp(v1, "SSAC")) {
    return 1;
  }
    return 4;
  if (!strcasecmp(v1, "BOTH")) {
    return 3;
  }
  return 0;
}

void IMSNasClient::notifyDelegates(void *a1, int a2, __int16 *a3, int a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    char v9 = (void (***)(void, unsigned char *, __int16 *))a1[1];
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v10 = std::__shared_weak_count::lock(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v10)
    {
      if (v9)
      {
        uint64_t v11 = (void *)a1[3];
        std::string v12 = a1 + 4;
        if (v11 != v12)
        {
          do
          {
            memset(v21, 0, sizeof(v21));
            if (*((char *)v11 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v21, (const std::string::value_type *)v11[4], v11[5]);
            }
            else
            {
              *(_OWORD *)__int16 v21 = *((_OWORD *)v11 + 2);
              *(void *)&v21[16] = v11[6];
            }
            *(void *)&v21[24] = v11[7];
            BOOL v13 = (*(_DWORD *)&v21[24] & a4) != 0 && *(_DWORD *)&v21[28] == a2;
            if (v13)
            {
              __int16 v16 = *a3;
              int v17 = *((_DWORD *)a3 + 1);
              char v18 = *((unsigned char *)a3 + 8);
              int v19 = *((_DWORD *)a3 + 3);
              char v20 = *((unsigned char *)a3 + 16);
              (**v9)(v9, v21, &v16);
            }
            if ((v21[23] & 0x80000000) != 0) {
              operator delete(*(void **)v21);
            }
            std::string v14 = (void *)v11[1];
            if (v14)
            {
              do
              {
                uint64_t v15 = v14;
                std::string v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                uint64_t v15 = (void *)v11[2];
                BOOL v13 = *v15 == (void)v11;
                uint64_t v11 = v15;
              }
              while (!v13);
            }
            uint64_t v11 = v15;
          }
          while (v15 != v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C52D41E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void IMSNasClient::notifyDelegates(void *a1, int a2, __int16 *a3, uint64_t a4, uint64_t a5)
{
  char v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    uint64_t v11 = a1[1];
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::string v12 = std::__shared_weak_count::lock(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v12)
    {
      if (v11)
      {
        BOOL v13 = (void *)a1[3];
        std::string v14 = a1 + 4;
        if (v13 != v14)
        {
          do
          {
            memset(v24, 0, sizeof(v24));
            if (*((char *)v13 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v24, (const std::string::value_type *)v13[4], v13[5]);
            }
            else
            {
              *(_OWORD *)uint64_t v24 = *((_OWORD *)v13 + 2);
              *(void *)&v24[16] = v13[6];
            }
            uint64_t v15 = v13[7];
            *(void *)&v24[24] = v15;
            if ((v15 & 4) != 0 && HIDWORD(v15) == a2)
            {
              __int16 v19 = *a3;
              int v20 = *((_DWORD *)a3 + 1);
              char v21 = *((unsigned char *)a3 + 8);
              int v22 = *((_DWORD *)a3 + 3);
              char v23 = *((unsigned char *)a3 + 16);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, __int16 *, uint64_t))(*(void *)v11 + 8))(v11, v24, a4, &v19, a5);
            }
            if ((v24[23] & 0x80000000) != 0) {
              operator delete(*(void **)v24);
            }
            __int16 v16 = (void *)v13[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                __int16 v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                int v17 = (void *)v13[2];
                BOOL v18 = *v17 == (void)v13;
                BOOL v13 = v17;
              }
              while (!v18);
            }
            BOOL v13 = v17;
          }
          while (v17 != v14);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C52D439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t IMSNasClient::computeBarringForInstance(IMSNasClient *this, uint64_t a2)
{
  uint64_t v4 = (void *)*((void *)this + 3);
  char v5 = (char *)this + 32;
  if (v4 == (void *)((char *)this + 32))
  {
    uint64_t v13 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
    do
    {
      *(_OWORD *)std::string __p = 0u;
      long long v16 = 0u;
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v4 + 2);
        *(void *)&long long v16 = v4[6];
      }
      uint64_t v8 = v4[7];
      *((void *)&v16 + 1) = v8;
      if (HIDWORD(v8) == a2)
      {
        ++v7;
        int v9 = v8;
      }
      else
      {
        int v9 = 0;
      }
      if (SBYTE7(v16) < 0) {
        operator delete(__p[0]);
      }
      long long v10 = (char *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (char *)v4[2];
          BOOL v12 = *(void *)v11 == (void)v4;
          uint64_t v4 = v11;
        }
        while (!v12);
      }
      v6 |= v9;
      uint64_t v4 = v11;
    }
    while (v11 != v5);
    if (v7) {
      uint64_t v13 = v6;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  return (*(uint64_t (**)(IMSNasClient *, uint64_t, uint64_t))(*(void *)this + 80))(this, a2, v13);
}

uint64_t IMSNasClient::addListener(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void IMSNasClient::addListener(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "nas");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Adding listener for ", 20);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" on instance ", 13);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" with barring for ", 18);
  unint64_t v7 = 0;
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  if (a4)
  {
    unint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, (long long *)"SSAC");
    unint64_t v13 = v7;
  }
  if ((a4 & 2) != 0)
  {
    if (v7 >= v14)
    {
    }
    else
    {
      *(void *)(v7 + 16) = 0x300000000000000;
      v7 += 24;
    }
    unint64_t v13 = v7;
  }
  if ((a4 & 4) != 0)
  {
    if (v7 >= v14)
    {
    }
    else
    {
      *(void *)(v7 + 16) = 0x300000000000000;
      uint64_t v8 = v7 + 24;
    }
    unint64_t v13 = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C52D4800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v33 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t IMSNasClient::removeListener(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void **IMSNasClient::removeListener(void ***a1, void **a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Removing listener for ", 22);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  unint64_t v7 = a1 + 3;
  double result = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 3), a2);
  if (a1 + 4 != (void ***)result)
  {
    int v9 = result;
    uint64_t v10 = *((unsigned int *)result + 15);
    BOOL v11 = (result[7] & ~a3) == 0;
    *((_DWORD *)result + 14) &= ~a3;
    if (v11)
    {
      uint64_t v12 = (void **)result[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (void **)*v12;
        }
        while (v12);
      }
      else
      {
        unint64_t v14 = result;
        do
        {
          unint64_t v13 = (void **)v14[2];
          BOOL v11 = *v13 == v14;
          unint64_t v14 = v13;
        }
        while (!v11);
      }
      if (*v7 == result) {
        *unint64_t v7 = v13;
      }
      uint64_t v15 = (uint64_t *)a1[4];
      a1[5] = (void **)((char *)a1[5] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, (uint64_t *)v9);
      if (*((char *)v9 + 55) < 0) {
        operator delete(v9[4]);
      }
      operator delete(v9);
    }
    return (void **)IMSNasClient::computeBarringForInstance((IMSNasClient *)a1, v10);
  }
  return result;
}

void sub_1C52D4A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasClient::bootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    char v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52D4B24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSNasDeviceClient::initializeNasClient(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count **a4, dispatch_object_t *a5, int a6)
{
  uint64_t v12 = (void **)(a1 + 48);
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>((void ***)(a1 + 48), (void **)a2);
  if (*(void *)(a1 + 8)) {
    goto LABEL_2;
  }
  if (!a6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v37 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"No baseband for architecture", 28);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    goto LABEL_114;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v14 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Creating NAS client.", 20);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (SHIBYTE(v58) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  RadioVendor = (capabilities::radio *)TelephonyRadiosGetRadioVendor();
  if (RadioVendor == 2)
  {
    long long v16 = (std::__shared_weak_count *)operator new(0x1A8uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCA68;
    char v17 = v16 + 1;
    IBINasClient::IBINasClient((IBINasClient *)&v16[1], a5);
    shared_weak_owners = (std::__shared_weak_count *)v16[14].__vftable;
    if (!shared_weak_owners)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v16[13].__shared_weak_owners_ = (uint64_t)v17;
      v16[14].__vftable = (std::__shared_weak_count_vtbl *)v16;
      goto LABEL_111;
    }
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_112;
    }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[13].__shared_weak_owners_ = (uint64_t)v17;
    v16[14].__vftable = (std::__shared_weak_count_vtbl *)v16;
LABEL_68:
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_111:
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    goto LABEL_112;
  }
  if (capabilities::radio::mav20Plus(RadioVendor))
  {
    long long v16 = (std::__shared_weak_count *)operator new(0x128uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCAB8;
    char v17 = v16 + 1;
    QMINasClient::QMINasClient((QMINasClient *)&v16[1], a5);
    shared_weak_owners = (std::__shared_weak_count *)v16[4].__vftable;
    if (!shared_weak_owners)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v16[3].__shared_weak_owners_ = (uint64_t)v17;
      v16[4].__vftable = (std::__shared_weak_count_vtbl *)v16;
      goto LABEL_111;
    }
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_112;
    }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[3].__shared_weak_owners_ = (uint64_t)v17;
    v16[4].__vftable = (std::__shared_weak_count_vtbl *)v16;
    goto LABEL_68;
  }
  if (TelephonyRadiosGetRadioVendor() == 1)
  {
    long long v16 = (std::__shared_weak_count *)operator new(0xD0uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCB08;
    char v17 = v16 + 1;
    LegacyQMINasClient::LegacyQMINasClient((LegacyQMINasClient *)&v16[1], a5);
    shared_weak_owners = (std::__shared_weak_count *)v16[3].__shared_weak_owners_;
    if (!shared_weak_owners)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v16[3].__shared_owners_ = (uint64_t)v17;
      v16[3].__shared_weak_owners_ = (uint64_t)v16;
      goto LABEL_111;
    }
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_112;
    }
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v16[3].__shared_owners_ = (uint64_t)v17;
    v16[3].__shared_weak_owners_ = (uint64_t)v16;
    goto LABEL_68;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "ims.nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v38 = ims::error((uint64_t)&v60, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Unknown radio vendor ", 21);
  *(unsigned char *)(v38 + 17) = 0;
  TelephonyRadiosGetRadioVendor();
  std::ostream::operator<<();
  *(unsigned char *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v38 + 17) = 0;
  if (SHIBYTE(v58) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  char v17 = 0;
  long long v16 = 0;
LABEL_112:
  uint64_t v47 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v16;
  if (v47)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
LABEL_114:
    char v17 = *(std::__shared_weak_count **)(a1 + 8);
  }
  if (!v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v49 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"No NAS client for architecture", 30);
    *(unsigned char *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v49 + 17) = 0;
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    uint64_t v50 = a4[1];
    if (v50)
    {
      uint64_t v51 = std::__shared_weak_count::lock(v50);
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v53 = *a4;
        if (*a4)
        {
          std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v54 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"go straight to nasSystemInitialized", 35);
          *(unsigned char *)(v54 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v54 + 17) = 0;
          if (SHIBYTE(v58) < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          ((void (*)(std::__shared_weak_count *, uint64_t))v53->__on_zero_shared)(v53, a2);
        }
        std::string::size_type size = v52;
        goto LABEL_133;
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v48 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Created NAS client for architecture", 35);
  *(unsigned char *)(v48 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v48 + 17) = 0;
  if (SHIBYTE(v58) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
LABEL_2:
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(void *)(a1 + 40))
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v13 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Bootstraping NAS client...", 26);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), a2, a3);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v28 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Initializing NAS client...", 26);
      *(unsigned char *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v28 + 17) = 0;
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v30 = *a4;
      char v31 = a4[1];
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(std::__shared_weak_count **)(v29 + 16);
      *(void *)(v29 + 8) = v30;
      *(void *)(v29 + 16) = v31;
      if (v32) {
        std::__shared_weak_count::__release_weak(v32);
      }
      if (v31) {
        std::__shared_weak_count::__release_weak(v31);
      }
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2, a3);
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 24), (void **)a2, a2);
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
    IPTelephonyManager::getInstance((uint64_t *)&__p);
    (*(void (**)(std::string *__return_ptr))(**((void **)__p + 21) + 192))(&v60);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v60.__r_.__value_.__r.__words[0])
    {
      uint64_t v33 = (BambiAccessBarring *)(v60.__r_.__value_.__r.__words[0] + 2928);
      uint64_t v34 = *(void *)(a1 + 8);
      uint64_t v35 = *(std::__shared_weak_count **)(a1 + 16);
      v55[0] = v34;
      v55[1] = (uint64_t)v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BambiAccessBarring::setDelegate(v33, v55);
      if (v35) {
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    std::string::size_type size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
    if (!v60.__r_.__value_.__l.__size_) {
      return;
    }
LABEL_133:
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v19 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Baseband is currently not available", 35);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v58) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  int v20 = a4[1];
  if (v20)
  {
    char v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      int v22 = v21;
      char v23 = *a4;
      if (!*a4)
      {
LABEL_107:
        std::string::size_type size = v22;
        goto LABEL_133;
      }
      if (!a6)
      {
LABEL_102:
        std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v46 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"go straight to nasSystemInitialized", 35);
        *(unsigned char *)(v46 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v46 + 17) = 0;
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        ((void (*)(std::__shared_weak_count *, uint64_t))v23->__on_zero_shared)(v23, a2);
        goto LABEL_107;
      }
      std::string::basic_string[abi:ne180100]<0>(&v60, "nas");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v24 = ims::debug((uint64_t)&v60, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Defer NasClient init as BB is not available.", 44);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (SHIBYTE(v58) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      LODWORD(__p) = a3;
      int v25 = *a4;
      char v26 = a4[1];
      uint64_t v57 = *a4;
      uint64_t v58 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = *a5;
      dispatch_object_t v59 = v27;
      if (v27) {
        dispatch_retain(v27);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v60 = *(std::string *)a2;
      }
      int v61 = a3;
      v62[0] = v25;
      v62[1] = v26;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      dispatch_object_t object = v27;
      if (v27) {
        dispatch_retain(v27);
      }
      int v40 = (char **)(a1 + 56);
      uint64_t v39 = *(char **)(a1 + 56);
      if (v39)
      {
        while (1)
        {
          while (1)
          {
            int v41 = (char **)v39;
            int v42 = v39 + 32;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v60, (void **)v39 + 4) & 0x80) == 0)break; {
            uint64_t v39 = *v41;
            }
            int v40 = v41;
            if (!*v41) {
              goto LABEL_87;
            }
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v42, (void **)&v60.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
          int v40 = v41 + 1;
          }
          uint64_t v39 = v41[1];
          if (!v39) {
            goto LABEL_87;
          }
        }
        if (*v40) {
          goto LABEL_92;
        }
      }
      else
      {
        int v41 = (char **)(a1 + 56);
      }
LABEL_87:
      uint64_t v43 = (char *)operator new(0x58uLL);
      *(std::string *)(v43 + 32) = v60;
      memset(&v60, 0, sizeof(v60));
      *((_DWORD *)v43 + 14) = v61;
      *((_OWORD *)v43 + 4) = *(_OWORD *)v62;
      v62[0] = 0;
      v62[1] = 0;
      BOOL v44 = object;
      *((void *)v43 + 10) = object;
      if (v44) {
        dispatch_retain(v44);
      }
      *(void *)uint64_t v43 = 0;
      *((void *)v43 + 1) = 0;
      *((void *)v43 + 2) = v41;
      *int v40 = v43;
      char v45 = (void *)**v12;
      if (v45)
      {
        *uint64_t v12 = v45;
        uint64_t v43 = *v40;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), (uint64_t *)v43);
      ++*(void *)(a1 + 64);
LABEL_92:
      if (object) {
        dispatch_release(object);
      }
      if (v62[1]) {
        std::__shared_weak_count::__release_weak(v62[1]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (v59) {
        dispatch_release(v59);
      }
      if (v58) {
        std::__shared_weak_count::__release_weak(v58);
      }
      goto LABEL_102;
    }
  }
}

void sub_1C52D5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  IMSNasDeviceClient::DeferredInit::~DeferredInit((IMSNasDeviceClient::DeferredInit *)&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,IMSNasDeviceClient::DeferredInit>::~pair(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void IMSNasDeviceClient::DeferredInit::~DeferredInit(IMSNasDeviceClient::DeferredInit *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void IMSNasDeviceClient::deinitializeNasClient(uint64_t a1, void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v10, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Deinitializing NAS client.", 26);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v10);
  }
  std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 24), a2);
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>((void ***)(a1 + 48), a2);
  if (!*(void *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
    }
  }
  uint64_t v10 = 0;
  BOOL v11 = 0;
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  (*(void (**)(void **__return_ptr))(**((void **)__p + 21) + 192))(&v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v10)
  {
    v6[0] = 0;
    v6[1] = 0;
    BambiAccessBarring::setDelegate((BambiAccessBarring *)((char *)v10 + 2928), v6);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C52D5BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::requestCurrentBarringInfo(IMSNasDeviceClient *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && *((unsigned char *)this + 72))
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 88);
    v3();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip requestCurrentBarringInfo", 99);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C52D5D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::reportCallStatus(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v14 = *(void (**)(void))(*(void *)v8 + 104);
    v14();
    return;
  }
  if (a3 == 2 && (a4 & 1) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Airplane mode is Enabled, but still reportCallStatus for call end", 65);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), a2, 2, a4, a5, a6, a7);
  }
  else
  {
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(v19, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip reportCallStatus", 90);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
}

void sub_1C52D5FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::requestVoiceSystemId(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 && *(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    uint64_t v11 = *a3;
    char v12 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 96))(v4, a2, &v11);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip requestVoiceSystemId", 94);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C52D6140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  int v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::setBasebandAvailable(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 72) = a2;
  if (a2)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      if (!*(void *)(a3 + 8)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a3 + 23))
    {
      return;
    }
    uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 48, (void **)a3);
    if ((void **)(a1 + 56) != v5)
    {
      uint64_t v6 = v5;
      std::string::basic_string[abi:ne180100]<0>(v13, "nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::debug((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Running deferred init for NasClient on stack ", 45);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a3);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      uint64_t v8 = *((unsigned int *)v6 + 14);
      char v9 = (std::__shared_weak_count *)v6[9];
      v10[0] = (std::__shared_weak_count *)v6[8];
      v10[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      IMSNasDeviceClient::initializeNasClient(a1, a3, v8, v10, (dispatch_object_t *)v6 + 10, 1);
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C52D630C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::~IMSNasDeviceClient(IMSNasDeviceClient *this)
{
  *(void *)this = &unk_1F20BCB58;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(*((void **)this + 7));
  std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  IMSNasDeviceClient::~IMSNasDeviceClient(this);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<IBINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCA68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IBINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<QMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<QMINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LegacyQMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LegacyQMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BCB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LegacyQMINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,IMSNasClient::NasEntry>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasClient::NasEntry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasClient::NasEntry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    char v10 = *a3;
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    char v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v8;
    *uint64_t v6 = v11;
    char v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      char v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  uint64_t v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_1C52D6710(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    uint64_t v4 = (uint64_t *)v3;
    uint64_t v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = v3;
      do
      {
        uint64_t v6 = (void **)v7[2];
        BOOL v8 = *v6 == v7;
        uint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    char v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void SipWarningHeader::~SipWarningHeader(void **this)
{
  *this = &unk_1F20BCCE0;
  uint64_t v2 = this + 8;
  std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader(this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1F20BCCE0;
  uint64_t v2 = this + 8;
  std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipWarningHeader::clone(SipWarningHeader *this)
{
}

void sub_1C52D6B04(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40038B74ABLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipWarning>::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (a1[9] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        uint64_t v7 = *(void **)(a2 + 8);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(unsigned char *)(a2 + 17) = 0;
        uint64_t v2 = a1[8];
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      uint64_t v2 = a1[8];
      v5 += 56;
    }
    while (v6 < 0x6DB6DB6DB6DB6DB7 * ((a1[9] - v2) >> 3));
  }
  return 1;
}

BOOL SipVectorHeader<SipWarning>::setValueFromString(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(int64x2_t *, uint64_t, uint64_t, void **, uint64_t))(a1->i64[0] + 128))(a1, a2, v4, v10, 44);
    if (v4 == -1) {
      break;
    }
    uint64_t v9 = 0;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v6 = 0u;
    if (((*(uint64_t (**)(int64x2_t *, void **, void **))(a1->i64[0] + 120))(a1, v10, v6) & 1) == 0)
    {
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(v6[1]);
      }
      break;
    }
    SipVectorHeader<SipWarning>::addItem(a1, (uint64_t)v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6[1]);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return v4 == -1;
}

void sub_1C52D6D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipWarning>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipWarning>::allowsMerging()
{
  return 1;
}

BOOL SipVectorHeader<SipWarning>::mergeHeader(int64x2_t *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3[8];
    uint64_t v6 = v3[9];
    while (v5 != v6)
    {
      SipVectorHeader<SipWarning>::addItem(a1, v5);
      v5 += 56;
    }
  }
  return v4 != 0;
}

uint64_t SipWarningHeader::itemToStream(SipWarningHeader *this, const SipWarning *a2, ImsOutStream *a3)
{
  uint64_t v5 = (char *)a2 + 32;
  std::ostream::operator<<();
  *((unsigned char *)a3 + 17) = 0;
  uint64_t v6 = (void *)*((void *)a3 + 1);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((unsigned char *)a3 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a3 + 32))(a3, (char *)a2 + 8);
  long long v7 = (void *)*((void *)a3 + 1);
  char v10 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
  *((unsigned char *)a3 + 17) = 0;
  return (*(uint64_t (**)(ImsOutStream *, char *))(*(void *)a3 + 32))(a3, v5);
}

uint64_t SipWarningHeader::itemFromString(uint64_t a1, std::string *a2, uint64_t a3)
{
  memset(&v13, 0, sizeof(v13));
  std::string::size_type v5 = ims::nextToken(a2, 0, &v13, 0x20u);
  if (v5 == -1
    || ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (uint64_t v6 = &v13)
      : (uint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0]),
        *(_DWORD *)a3 = strtoul((const char *)v6, 0, 10),
        std::string::size_type Token = ims::nextToken(a2, v5, (std::string *)(a3 + 8), 0x20u),
        Token == -1))
  {
    uint64_t v9 = 0;
  }
  else
  {
    std::string::basic_string(&__p, a2, Token, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    ims::removeQuotes((uint64_t)&__p, &v12);
    BOOL v8 = (void **)(a3 + 32);
    if (*(char *)(a3 + 55) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)BOOL v8 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    *(void *)(a3 + 48) = *((void *)&v12.__r_.__value_.__l + 2);
    *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = 1;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1C52D7054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t SipVectorHeader<SipWarning>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipWarning>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void std::__destroy_at[abi:ne180100]<SipWarning,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void SipWarning::~SipWarning(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<SipWarning,0>(v4);
      }
      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t SipVectorHeader<SipWarning>::addItem(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 5;
  unint64_t v5 = a1[5].u64[0];
  unint64_t v6 = a1[4].u64[1];
  if (v6 >= v5)
  {
    uint64_t v9 = a1[4].i64[0];
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v9) >> 3);
    if ((unint64_t)(v10 + 1) > 0x492492492492492) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - v9) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v12;
    }
    char v26 = v4;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SipWarning>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v23 = v13;
    v24.i64[0] = v13 + 56 * v10;
    v24.i64[1] = v24.i64[0];
    unint64_t v25 = v13 + 56 * v14;
    std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(v24.i64[0], a2);
    uint64_t v15 = v24.i64[0];
    uint64_t v8 = v24.i64[0] + 56;
    uint64_t v17 = a1[4].i64[0];
    unint64_t v16 = a1[4].u64[1];
    if (v16 == v17)
    {
      int64x2_t v21 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        int v18 = *(_DWORD *)(v16 - 56);
        v16 -= 56;
        *(_DWORD *)(v15 - 56) = v18;
        v15 -= 56;
        long long v19 = *(_OWORD *)(v16 + 8);
        *(void *)(v15 + 24) = *(void *)(v16 + 24);
        *(_OWORD *)(v15 + 8) = v19;
        *(void *)(v16 + 16) = 0;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + 8) = 0;
        long long v20 = *(_OWORD *)(v16 + 32);
        *(void *)(v15 + 48) = *(void *)(v16 + 48);
        *(_OWORD *)(v15 + 32) = v20;
        *(void *)(v16 + 40) = 0;
        *(void *)(v16 + 48) = 0;
        *(void *)(v16 + 32) = 0;
      }
      while (v16 != v17);
      int64x2_t v21 = a1[4];
    }
    a1[4].i64[0] = v15;
    a1[4].i64[1] = v8;
    int64x2_t v24 = v21;
    unint64_t v22 = a1[5].u64[0];
    a1[5].i64[0] = v25;
    unint64_t v25 = v22;
    unint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<SipWarning>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    uint64_t result = std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(a1[4].i64[1], a2);
    uint64_t v8 = v6 + 56;
    a1[4].i64[1] = v6 + 56;
  }
  a1[4].i64[1] = v8;
  return result;
}

void sub_1C52D73A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipWarning>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  unint64_t v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C52D7454(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipWarning>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__destroy_at[abi:ne180100]<SipWarning,0>(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SipCallInfoHeader::~SipCallInfoHeader(void **this)
{
  *this = &unk_1F20BCD78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  SipCallInfoHeader::~SipCallInfoHeader(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipCallInfoHeader::encodeValue(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t SipCallInfoHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return 1;
}

void SipCallInfoHeader::clone(SipCallInfoHeader *this)
{
}

void sub_1C52D7678(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40D8A9F79FLL);
  _Unwind_Resume(a1);
}

void SipServiceRouteHeader::~SipServiceRouteHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipServiceRouteHeader::clone(SipServiceRouteHeader *this)
{
}

void sub_1C52D77BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

uint64_t SipRouteSetHeader::allowsDuplicates(SipRouteSetHeader *this)
{
  return 1;
}

uint64_t SipRouteSetHeader::allowsMerging(SipRouteSetHeader *this)
{
  return 1;
}

void *SipClientTransaction::SipClientTransaction(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const std::string *a6)
{
  uint64_t result = (void *)SipTransaction::SipTransaction(a1, a2 + 1, a3, a5, a6);
  uint64_t v9 = *a2;
  void *result = *a2;
  result[9] = &unk_1F20BCF70;
  result[12] = a2[6];
  *(void *)((char *)result + *(void *)(v9 - SipUserAgent::~SipUserAgent((SipUserAgent *)((char *)this - 24)) = a2[7];
  result[22] = &unk_1F20BD020;
  result[37] = a4;
  result[71] = 0;
  return result;
}

void SipClientTransaction::~SipClientTransaction(SipClientTransaction *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *((void *)this + 9) = &unk_1F20BCF70;
  *((void *)this + 12) = a2[6];
  *(void *)((char *)this + *(void *)(v4 - SipUserAgent::~SipUserAgent((SipUserAgent *)((char *)this - 24)) = a2[7];
  *((void *)this + 22) = &unk_1F20BD020;
  (*(void (**)(char *))(*((void *)this + 9) + 48))((char *)this + 72);
  uint64_t v5 = *((void *)this + 71);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  SipTransaction::~SipTransaction(this, a2 + 1);
}

void SipClientTransaction::~SipClientTransaction(SipClientTransaction *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipClientTransaction::~SipClientTransaction(SipClientTransaction *this)
{
}

{
}

{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void SipClientTransaction::loggableName(SipClientTransaction *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C52D7DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v21 - 64));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipClientTransaction::loggableName(SipClientTransaction *this)
{
}

void SipClientTransaction::resendLastMessage(SipClientTransaction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void **)((char *)this + 176);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  ((void (*)(void **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"resending ", 10);
  *(unsigned char *)(v5 + 17) = 0;
  long long v6 = (const std::string *)(*(uint64_t (**)(void *))(*v4[15] + 112))(v4[15]);
  LoggableString::LoggableString(&__p, v6);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" request", 8);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *((void *)this + 40);
  uint64_t v8 = *((void *)this + 37);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, (void *)this + 35);
  SipTransactionLayer::sendMessageInTransaction(v7, v8, (uint64_t)&v9, a2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C52D7F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipClientTransaction::handleError(SipClientTransaction *this, const ImsResult *a2)
{
  uint64_t v4 = (SipTransportLayer **)((char *)this + 176);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*((void (**)(SipTransportLayer **, uint64_t))*v4 + 2))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipClientTransaction::handleError", 33);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v7 = (uint64_t)SipResultDomain::responseFromResult(a2, v6);
  uint64_t v8 = (SipUserAgent *)SipTransportLayer::userAgent(v4[18]);
  if (*(unsigned char *)(SipUserAgent::config(v8) + 987)) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || *((_DWORD *)a2 + 4) != 408) {
    goto LABEL_17;
  }
  uint64_t v10 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
  uint64_t v12 = *(void *)(v10 + 248);
  unint64_t v11 = *(std::__shared_weak_count **)(v10 + 256);
  if (!v11)
  {
    uint64_t v15 = *(void *)(v12 + 3632);
    if (!v15 || !*(unsigned char *)(v15 + 228)) {
      goto LABEL_17;
    }
LABEL_13:
    uint64_t v16 = (*(uint64_t (**)(SipTransportLayer **))(*((void *)this + 22) + 64))(v4);
    (*(void (**)(SipTransportLayer **, uint64_t))(*((void *)this + 22) + 16))(v4, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"triggering reregistration due to internal timeout", 49);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v17 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
    uint64_t v18 = *(void *)(v17 + 248);
    long long v19 = *(std::__shared_weak_count **)(v17 + 256);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v18 + 168))(v18, 5, 0, 0);
    goto LABEL_33;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = *(void *)(v12 + 3632);
  if (!v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_17;
  }
  int v14 = *(unsigned __int8 *)(v13 + 228);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v14) {
    goto LABEL_13;
  }
LABEL_17:
  long long v20 = (SipUserAgent *)SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
  uint64_t v21 = SipUserAgent::config(v20) + 696;
  unint64_t v22 = (void **)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
  if (SipResponseCodeMap::containsResponseCodeForMethod(v21, v22, *((_DWORD *)a2 + 4), 0))
  {
    uint64_t v23 = (*(uint64_t (**)(SipTransportLayer **))(*((void *)this + 22) + 64))(v4);
    (*(void (**)(SipTransportLayer **, uint64_t))(*((void *)this + 22) + 16))(v4, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"triggering reregistration due to ", 33);
    *(unsigned char *)(v23 + 17) = 0;
    int64x2_t v24 = (const std::string *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
    LoggableString::LoggableString(&__p, v24);
    (*(void (**)(uint64_t, std::string *))(*(void *)v23 + 40))(v23, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" error ", 7);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v23);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v7)
    {
      unint64_t v25 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>(v7);
      if (v25) {
        uint64_t v7 = v25[26];
      }
      else {
        uint64_t v7 = 0;
      }
    }
    uint64_t v33 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
    uint64_t v34 = *(void *)(v33 + 248);
    long long v19 = *(std::__shared_weak_count **)(v33 + 256);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v34 + 168))(v34, 5, v7, 0);
  }
  else
  {
    char v26 = (SipUserAgent *)SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
    uint64_t v27 = SipUserAgent::config(v26) + 1184;
    uint64_t v28 = (void **)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
    if (!SipResponseCodeMap::containsResponseCodeForMethod(v27, v28, *((_DWORD *)a2 + 4), 0)) {
      goto LABEL_35;
    }
    uint64_t v29 = (*(uint64_t (**)(SipTransportLayer **))(*((void *)this + 22) + 64))(v4);
    (*(void (**)(SipTransportLayer **, uint64_t))(*((void *)this + 22) + 16))(v4, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"dropping registration due to ", 29);
    *(unsigned char *)(v29 + 17) = 0;
    uint64_t v30 = (const std::string *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
    LoggableString::LoggableString(&__p, v30);
    (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 40))(v29, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" error ", 7);
    *(unsigned char *)(v29 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v29);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v31 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 40));
    uint64_t v32 = *(void *)(v31 + 248);
    long long v19 = *(std::__shared_weak_count **)(v31 + 256);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v32 + 168))(v32, 3, 0, 0);
  }
LABEL_33:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
LABEL_35:
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741840;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v35 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v35 == 1073741840) {
      return (*(uint64_t (**)(SipClientTransaction *))(*(void *)this + 136))(this);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  return SipTransaction::handleError(this, a2);
}

void sub_1C52D870C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::header<SipRetryAfterHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Retry-After");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

uint64_t non-virtual thunk to'SipClientTransaction::handleError(SipClientTransaction *this, const ImsResult *a2)
{
  return SipClientTransaction::handleError((SipClientTransaction *)((char *)this - 72), a2);
}

void *SipMessage::header<SipPAssertedIdentityHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "P-Asserted-Identity");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipClientTransaction::handleConnectionError(SipClientTransaction *this)
{
  if (!*((void *)this + 7)) {
    return;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (!v2)
  {
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  uint64_t v3 = *((void *)this + 10);
  atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v4 || !v3 || (*(unsigned int (**)(uint64_t))(*(void *)v3 + 72))(v3))
  {
LABEL_8:
    (*(void (**)(void))(**((void **)this + 7) + 80))(*((void *)this + 7));
    if (!v4) {
      return;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C52D8948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipClientTransaction::handleConnectionError(SipClientTransaction *this)
{
}

uint64_t SipClientTransaction::handleResponse(SipClientTransaction *this, const SipResponse *a2)
{
  memset(v81, 0, 48);
  uint64_t v4 = (void *)((char *)this + 280);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v77, (void *)this + 35);
  if (v77) {
    uint64_t v5 = v77 + 4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v79 = v5;
  long long v80 = size;
  long long v77 = 0;
  std::string::size_type size = 0;
  LoggableString::LoggableString((LoggableString *)__p, "handleResponse");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v81, &v79, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  long long v6 = (char *)this + 176;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*((void *)this + 22) + 16))((char *)this + 176, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipClientTransaction::handleResponse", 36);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = *((void *)this + 71);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 71) = (*(uint64_t (**)(const SipResponse *))(*(void *)a2 + 32))(a2);
  uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"received ", 9);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" response to ", 13);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v10 = (const std::string *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
  LoggableString::LoggableString(__p, v10);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" request", 8);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v11 = *((void *)this + 7);
  if (!v11 || !(*(unsigned int (**)(uint64_t, const SipResponse *))(*(void *)v11 + 88))(v11, a2)) {
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v81);
  }
  long long v77 = 0;
  std::string::size_type size = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, v4);
  if (__p[0].__r_.__value_.__r.__words[0]
  {
    long long v77 = v12;
    std::string::size_type size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    uint64_t v13 = __p;
  }
  else
  {
    uint64_t v13 = (std::string *)&v77;
  }
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  uint64_t v14 = *((void *)this + 44);
  if (v14 && v77)
  {
    long long v75 = v77;
    uint64_t v76 = size;
    if (size) {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, const SipResponse *, std::__shared_weak_count **))(*(void *)v14 + 24))(v14, a2, &v75);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"no TU to handle response", 24);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
  }
  unsigned int v17 = *((_DWORD *)a2 + 22);
  if (v17 < 0x12C) {
    goto LABEL_111;
  }
  if (v17 != 504) {
    goto LABEL_57;
  }
  uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
  uint64_t v19 = v18[23];
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v18[23];
  }
  else {
    uint64_t v20 = *((void *)v18 + 1);
  }
  if (v20 != 8) {
    goto LABEL_42;
  }
  if ((v19 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v18, "REGISTER", *((void *)v18 + 1))) {
      goto LABEL_42;
    }
LABEL_57:
    if (!SipRegistrationClient::isImsOutageResponse(a2, v15))
    {
      SipResultDomain::makeResult(a2, (uint64_t)__p);
      (*(void (**)(SipClientTransaction *, std::string *))(*(void *)this + 112))(this, __p);
      ImsResult::~ImsResult((ImsResult *)__p);
      goto LABEL_111;
    }
    long long v40 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
    uint64_t v41 = v40[23];
    if ((v41 & 0x80u) == 0) {
      uint64_t v42 = v40[23];
    }
    else {
      uint64_t v42 = *((void *)v40 + 1);
    }
    if (v42 == 8)
    {
      if ((v41 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v40, "REGISTER", *((void *)v40 + 1))) {
          goto LABEL_111;
        }
      }
      else
      {
        if (!v40[23]) {
          goto LABEL_111;
        }
        uint64_t v43 = "REGISTER";
        while (*v40 == *(unsigned __int8 *)v43)
        {
          ++v40;
          ++v43;
          if (!--v41) {
            goto LABEL_111;
          }
        }
      }
    }
    uint64_t v60 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)"received Service Unavailable (IMS Outage) response from P-CSCF.  Terminating registration.", 90);
    *(unsigned char *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v60 + 17) = 0;
    uint64_t v61 = *((void *)this + 40);
    int v62 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v61 + 16));
    uint64_t v63 = *(void *)(*(void *)(v61 + 8) + 144);
    uint64_t v64 = *(void *)(v63 + 248);
    int v65 = *(std::__shared_weak_count **)(v63 + 256);
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v64 + 280))(v64);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    int v66 = v62;
    goto LABEL_108;
  }
  if (!v18[23]) {
    goto LABEL_57;
  }
  uint64_t v21 = "REGISTER";
  while (*v18 == *(unsigned __int8 *)v21)
  {
    ++v18;
    ++v21;
    if (!--v19) {
      goto LABEL_57;
    }
  }
LABEL_42:
  uint64_t v22 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"checking for P-CSCF Restoration info in 504 response", 52);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  uint64_t v23 = SipMessage::header<SipPAssertedIdentityHeader>((uint64_t)a2);
  if (!v23)
  {
    uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Server Timeout response does not contain P-Asserted-Identity", 60);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_110;
  }
  uint64_t v24 = *((void *)this + 40);
  unint64_t v25 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v24 + 16));
  uint64_t v26 = *(void *)(v24 + 8);
  uint64_t v27 = *(void *)(v26 + 160);
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 168);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = (SipRouteSet *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  uint64_t v30 = *((void *)this + 40);
  uint64_t v31 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v30 + 16));
  uint64_t v32 = *(void *)(v30 + 8);
  uint64_t v33 = *(void *)(v32 + 160);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 168);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = (SipRouteSet *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 56))(v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  uint64_t v36 = v23[9];
  if (v23[10] == v36)
  {
LABEL_56:
    uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"P-Asserted-Identity from Server Timeout response not found in service route or path", 83);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_110:
    *(unsigned char *)(v39 + 17) = 0;
    goto LABEL_111;
  }
  unint64_t v37 = 0;
  while (1)
  {
    long long v38 = *(const SipUri **)(v36 + 8 * v37);
    if (SipRouteSet::containsUri(v29, v38) & 1) != 0 || (SipRouteSet::containsUri(v35, v38)) {
      break;
    }
    ++v37;
    uint64_t v36 = v23[9];
    if (v37 >= (v23[10] - v36) >> 3) {
      goto LABEL_56;
    }
  }
  uint64_t v44 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"found P-Asserted-Identity in service route", 42);
  *(unsigned char *)(v44 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v44 + 17) = 0;
  char v45 = SipMessage::bodyWithContentType((uint64_t)a2, Sip3gppImsInfoBody::kContentType);
  if (!v45
  {
    uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"no body in Server Timeout response", 34);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_110;
  }
  uint64_t v47 = (const void **)*((void *)v46 + 5);
  uint64_t v48 = (const void **)*((void *)v46 + 6);
  if (v47 == v48)
  {
LABEL_101:
    uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"no appropriate AlternativeService item found. This must not be a restoration response", 85);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_110;
  }
  while (1)
  {
    if (*v47)
    {
      if (v49) {
        break;
      }
    }
    uint64_t v55 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"not an AlternativeService item", 30);
LABEL_100:
    *(unsigned char *)(v55 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v55 + 17) = 0;
    if (++v47 == v48) {
      goto LABEL_101;
    }
  }
  uint64_t v50 = v49;
  uint64_t v51 = v49[31];
  if ((v51 & 0x80u) == 0) {
    uint64_t v52 = v49[31];
  }
  else {
    uint64_t v52 = *((void *)v49 + 2);
  }
  if (v52 != 11) {
    goto LABEL_87;
  }
  uint64_t v53 = (const void **)(v49 + 8);
  if ((v51 & 0x80) == 0)
  {
    if (!v49[31]) {
      goto LABEL_88;
    }
    uint64_t v54 = "restoration";
    while (*(unsigned __int8 *)v53 == *(unsigned __int8 *)v54)
    {
      uint64_t v53 = (const void **)((char *)v53 + 1);
      ++v54;
      if (!--v51) {
        goto LABEL_88;
      }
    }
    goto LABEL_87;
  }
  if (memcmp(*v53, "restoration", *((void *)v49 + 2)))
  {
LABEL_87:
    uint64_t v55 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"service type isn't restoration", 30);
    goto LABEL_100;
  }
LABEL_88:
  uint64_t v56 = v50[55];
  if ((v56 & 0x80u) == 0) {
    uint64_t v57 = v50[55];
  }
  else {
    uint64_t v57 = *((void *)v50 + 5);
  }
  if (v57 != 20) {
    goto LABEL_99;
  }
  uint64_t v58 = (const void **)(v50 + 32);
  if ((v56 & 0x80) == 0)
  {
    if (!v50[55]) {
      goto LABEL_114;
    }
    dispatch_object_t v59 = "initial-registration";
    while (*(unsigned __int8 *)v58 == *(unsigned __int8 *)v59)
    {
      uint64_t v58 = (const void **)((char *)v58 + 1);
      ++v59;
      if (!--v56) {
        goto LABEL_114;
      }
    }
    goto LABEL_99;
  }
  if (memcmp(*v58, "initial-registration", *((void *)v50 + 5)))
  {
LABEL_99:
    uint64_t v55 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"action isn't initial registration", 33);
    goto LABEL_100;
  }
LABEL_114:
  uint64_t v68 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v68);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"restarting registration due to server timeout response from P-CSCF", 66);
  *(unsigned char *)(v68 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v68 + 17) = 0;
  uint64_t v69 = *((void *)this + 40);
  uint64_t v70 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v69 + 16));
  uint64_t v71 = *(void *)(*(void *)(v69 + 8) + 144);
  uint64_t v72 = *(void *)(v71 + 248);
  uint64_t v73 = *(std::__shared_weak_count **)(v71 + 256);
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v72 + 168))(v72, 2, 0, 0);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  int v66 = v70;
LABEL_108:
  std::__shared_weak_count::__release_shared[abi:ne180100](v66);
LABEL_111:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v81);
}

void sub_1C52D9A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void *SipClientInviteTransaction::SipClientInviteTransaction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  *(void *)(a1 + 96) = &unk_1F20B2FA8;
  uint64_t result = SipClientTransaction::SipClientTransaction(a1, (uint64_t *)&off_1F20BD280, a2, a3, a4, a5);
  void *result = &unk_1F20BD0C8;
  result[9] = &unk_1F20BD178;
  result[12] = &unk_1F20BD1E0;
  result[22] = &unk_1F20BD228;
  result[72] = 0;
  return result;
}

void SipClientInviteTransaction::constructStateMachine(SipClientInviteTransaction *this)
{
  std::string::size_type v35 = 0;
  uint64_t v36 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, (void *)this + 35);
  std::string::size_type v3 = v35;
  uint64_t v2 = v36;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x100uLL);
  uint64_t v5 = v4;
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDBD8;
  long long v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(void *)&long long v37 = v3;
  *((void *)&v37 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteCallingTransactionState::SipClientInviteCallingTransactionState((uint64_t)&v4[1], (std::string::size_type *)&v37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_10:
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  (*(void (**)(SipClientInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::string::size_type v9 = v35;
  uint64_t v8 = v36;
  uint64_t v10 = (std::string *)operator new(0xF8uLL);
  uint64_t v11 = (std::__shared_weak_count *)v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BDC28;
  uint64_t v12 = (std::__shared_weak_count_vtbl *)&v10[1];
  *(void *)&long long v37 = v9;
  *((void *)&v37 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteProceedingTransactionState::SipClientInviteProceedingTransactionState(v10 + 1, (std::string::size_type *)&v37);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v13 = (std::__shared_weak_count *)v11[9].__shared_owners_;
  if (v13)
  {
    if (v13->__shared_owners_ != -1) {
      goto LABEL_21;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_21:
  uint64_t v31 = v12;
  uint64_t v32 = v11;
  (*(void (**)(SipClientInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::string::size_type v15 = v35;
  uint64_t v14 = v36;
  uint64_t v16 = (std::string *)operator new(0xF8uLL);
  unsigned int v17 = (std::__shared_weak_count *)v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BDC78;
  uint64_t v18 = (std::__shared_weak_count_vtbl *)&v16[1];
  *(void *)&long long v37 = v15;
  *((void *)&v37 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteCompletedTransactionState::SipClientInviteCompletedTransactionState(v16 + 1, (std::string::size_type *)&v37);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v19 = (std::__shared_weak_count *)v17[9].__shared_owners_;
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_32;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_32:
  uint64_t v29 = v18;
  uint64_t v30 = v17;
  (*(void (**)(SipClientInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::string::size_type v21 = v35;
  uint64_t v20 = v36;
  uint64_t v22 = (std::string *)operator new(0xF8uLL);
  uint64_t v23 = (std::__shared_weak_count *)v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BDCC8;
  uint64_t v24 = (std::__shared_weak_count_vtbl *)&v22[1];
  *(void *)&long long v37 = v21;
  *((void *)&v37 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientInviteTerminationPendingTransactionState::SipClientInviteTerminationPendingTransactionState(v22 + 1, (std::string::size_type *)&v37);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unint64_t v25 = (std::__shared_weak_count *)v23[9].__shared_owners_;
  if (v25)
  {
    if (v25->__shared_owners_ != -1) {
      goto LABEL_43;
    }
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v23[9].__vftable = v24;
    v23[9].__shared_owners_ = (uint64_t)v23;
    std::__shared_weak_count::__release_weak(v25);
  }
  else
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v23[9].__vftable = v24;
    v23[9].__shared_owners_ = (uint64_t)v23;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_43:
  uint64_t v27 = v24;
  uint64_t v28 = v23;
  (*(void (**)(SipClientInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v35, &v37);
  long long v26 = v37;
  long long v37 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, long long *))(*(void *)this + 48))(this, &v26);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_1C52DA0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 56);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void SipClientInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipClientInviteTransaction **a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipClientInviteTransaction,std::allocator<SipClientInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v7, &v6, a3, a4, a5);
  SipClientInviteTransaction::constructStateMachine(*a5);
}

void sub_1C52DA1C0(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipClientInviteTransaction::~SipClientInviteTransaction(SipClientInviteTransaction *this)
{
  *(void *)this = &unk_1F20BD0C8;
  *((void *)this + 9) = &unk_1F20BD178;
  *((void *)this + 12) = &unk_1F20BD1E0;
  *((void *)this + 22) = &unk_1F20BD228;
  uint64_t v2 = *((void *)this + 72);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipClientTransaction::~SipClientTransaction(this, (uint64_t *)&off_1F20BD280);
}

{
  uint64_t vars8;

  SipClientInviteTransaction::~SipClientInviteTransaction(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipClientInviteTransaction::~SipClientInviteTransaction(SipClientInviteTransaction *this)
{
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 96));
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 176));
}

{
  uint64_t vars8;

  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 72));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 96));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 176));
  JUMPOUT(0x1C878E320);
}

void SipClientInviteTransaction::initialize(SipClientInviteTransaction *this)
{
}

double SipClientInviteTransaction::sendAckForResponse@<D0>(SipClientInviteTransaction *this@<X0>, const SipResponse *a2@<X1>, uint64_t a3@<X8>)
{
  MatchingAckForResponse = (SipMessage *)*((void *)this + 72);
  if (MatchingAckForResponse
    || (MatchingAckForResponse = SipRequest::createMatchingAckForResponse(*((SipRequest **)this + 37), a2),
        (*((void *)this + 72) = MatchingAckForResponse) != 0))
  {
    uint64_t v6 = *((void *)this + 40);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 35);
    SipTransactionLayer::sendMessageInTransaction(v6, (uint64_t)MatchingAckForResponse, (uint64_t)&v8, a3);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
  }
  return result;
}

void sub_1C52DA4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *SipClientNonInviteTransaction::SipClientNonInviteTransaction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  *(void *)(a1 + 96) = &unk_1F20B2FA8;
  double result = SipClientTransaction::SipClientTransaction(a1, (uint64_t *)&off_1F20BD4A0, a2, a3, a4, a5);
  void *result = &unk_1F20BD2E8;
  result[9] = &unk_1F20BD398;
  result[12] = &unk_1F20BD400;
  result[22] = &unk_1F20BD448;
  return result;
}

void SipClientNonInviteTransaction::constructStateMachine(SipClientNonInviteTransaction *this)
{
  std::string::size_type v27 = 0;
  uint64_t v28 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, (void *)this + 35);
  std::string::size_type v3 = v27;
  uint64_t v2 = v28;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x100uLL);
  uint64_t v5 = v4;
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDD68;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(void *)&long long v29 = v3;
  *((void *)&v29 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteTryingTransactionState::SipClientNonInviteTryingTransactionState((uint64_t)&v4[1], (std::string::size_type *)&v29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[9].__vftable = v6;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_10:
  unint64_t v25 = v6;
  long long v26 = v5;
  (*(void (**)(SipClientNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::string::size_type v9 = v27;
  uint64_t v8 = v28;
  uint64_t v10 = (std::string *)operator new(0xF8uLL);
  uint64_t v11 = (std::__shared_weak_count *)v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BDDB8;
  uint64_t v12 = (std::__shared_weak_count_vtbl *)&v10[1];
  *(void *)&long long v29 = v9;
  *((void *)&v29 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteProceedingTransactionState::SipClientNonInviteProceedingTransactionState(v10 + 1, (std::string::size_type *)&v29);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v13 = (std::__shared_weak_count *)v11[9].__shared_owners_;
  if (v13)
  {
    if (v13->__shared_owners_ != -1) {
      goto LABEL_21;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[9].__vftable = v12;
    v11[9].__shared_owners_ = (uint64_t)v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_21:
  uint64_t v23 = v12;
  uint64_t v24 = v11;
  (*(void (**)(SipClientNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string::size_type v15 = v27;
  uint64_t v14 = v28;
  uint64_t v16 = (std::string *)operator new(0xF8uLL);
  unsigned int v17 = (std::__shared_weak_count *)v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BDE08;
  uint64_t v18 = (std::__shared_weak_count_vtbl *)&v16[1];
  *(void *)&long long v29 = v15;
  *((void *)&v29 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteCompletedTransactionState::SipClientNonInviteCompletedTransactionState(v16 + 1, (std::string::size_type *)&v29);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v19 = (std::__shared_weak_count *)v17[9].__shared_owners_;
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_32;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[9].__vftable = v18;
    v17[9].__shared_owners_ = (uint64_t)v17;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_32:
  uint64_t v21 = v18;
  uint64_t v22 = v17;
  (*(void (**)(SipClientNonInviteTransaction *, std::__shared_weak_count_vtbl **))(*(void *)this + 48))(this, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v27, &v29);
  long long v20 = v29;
  long long v29 = 0uLL;
  (*(void (**)(SipClientNonInviteTransaction *, long long *))(*(void *)this + 48))(this, &v20);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1C52DA950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 56);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipClientNonInviteTransaction **a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipClientNonInviteTransaction,std::allocator<SipClientNonInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v7, &v6, a3, a4, a5);
  SipClientNonInviteTransaction::constructStateMachine(*a5);
}

void sub_1C52DAA48(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteTransaction::initialize(SipClientNonInviteTransaction *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 36);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  SipTransaction::initialize(this);
}

void sub_1C52DAB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipClientNonInviteTransaction::handleTimer(SipTransaction *a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerF)
    && ((*(uint64_t (**)(SipTransaction *))(*(void *)a1 + 144))(a1) & 1) == 0)
  {
    SipTransaction::handleTimeout(a1);
  }
}

void SipClientNonInviteTransaction::~SipClientNonInviteTransaction(SipClientNonInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipClientTransaction::~SipClientTransaction(this, (uint64_t *)&off_1F20BD4A0);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipClientNonInviteTransaction::~SipClientNonInviteTransaction(SipClientNonInviteTransaction *this)
{
}

{
  uint64_t vars8;

  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 72), (uint64_t *)&off_1F20BD4A0);
  JUMPOUT(0x1C878E320);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 96), (uint64_t *)&off_1F20BD4A0);
}

{
  uint64_t vars8;

  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 96), (uint64_t *)&off_1F20BD4A0);
  JUMPOUT(0x1C878E320);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 176), (uint64_t *)&off_1F20BD4A0);
}

{
  uint64_t vars8;

  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 176), (uint64_t *)&off_1F20BD4A0);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDCC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDCC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<SipClientInviteTransaction,std::allocator<SipClientInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x260uLL);
  std::__shared_ptr_emplace<SipClientInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 38, (uint64_t)(v10 + 3));
}

void sub_1C52DB07C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipClientInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientInviteTransaction>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20BDD18;
  SipClientInviteTransaction::SipClientInviteTransaction((uint64_t)(a1 + 3), *a2, *a3, a4, a5);
  return a1;
}

void sub_1C52DB0E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipClientInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDD18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDD18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDD68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDD68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDE08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<SipClientNonInviteTransaction,std::allocator<SipClientNonInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x258uLL);
  std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientNonInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 38, (uint64_t)(v10 + 3));
}

void sub_1C52DB3E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientNonInviteTransaction>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20BDE58;
  SipClientNonInviteTransaction::SipClientNonInviteTransaction((uint64_t)(a1 + 3), *a2, *a3, a4, a5);
  return a1;
}

void sub_1C52DB448(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipClientNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BDE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BDEA8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BDEA8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20BDEA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BDEA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52DB740(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void ims::rtp::createMediaSessionStateMachine(uint64_t *a1@<X0>, ImsPrefs *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"createMediaSessionStateMachine", 30);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::size_type v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionStateMachine::create(&v10, a2, a3, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C52DB8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::parseV<audio::tlv::DtmfEvent>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  int v6 = *((unsigned __int8 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

void sub_1C52DB970(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C52DB95CLL);
}

ims::lazuli::Chat *ims::lazuli::Chat::Chat(ims::lazuli::Chat *this)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v3 = dispatch_queue_create("LazuliChat", v2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    dispatch_retain(v3);
    *((void *)this + 4) = 0;
    dispatch_release(v4);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_1F20BDFA0;
  return this;
}

void ims::lazuli::Chat::~Chat(ims::lazuli::Chat *this)
{
}

void *ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ims::lazuli::Chat::startChat(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1F20BE1E8;
  uint64_t v7 = *a1;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v9 = *a2;
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v10 = v6 + 24;
  ims::lazuli::Chat::Chat((ims::lazuli::Chat *)(v6 + 24));
  *((void *)v6 + 8) = &unk_1F20BE398;
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  if (*(char *)(v7 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else {
    std::string v25 = *(std::string *)(v7 + 24);
  }
  uint64_t v11 = v6 + 72;
  ImsLogContainer::ImsLogContainer((uint64_t)(v6 + 72), &__p, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1F20BE238;
  *((void *)v6 + 8) = &unk_1F20BE2D0;
  *((void *)v6 + 9) = &unk_1F20BE2F0;
  *((void *)v6 + 22) = v7;
  *((void *)v6 + 23) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v12 = object;
  *((void *)v6 + 24) = object;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *((void *)v6 + 24) = xpc_null_create();
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, &v24);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v24.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, &v24);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v24.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, &v24);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v24.__r_.__value_.__l.__data_);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, &v24);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v24.__r_.__value_.__l.__data_);
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 38) = 0;
  *((void *)v6 + 39) = 0;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 192);
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, &v24);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v24.__r_.__value_.__l.__data_);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  char v13 = (std::__shared_weak_count *)*((void *)v6 + 5);
  if (v13)
  {
    if (v13->__shared_owners_ != -1) {
      goto LABEL_35;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 2, 1uLL, memory_order_relaxed);
    *((void *)v6 + 4) = v10;
    *((void *)v6 + 5) = v6;
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 2, 1uLL, memory_order_relaxed);
    *((void *)v6 + 4) = v10;
    *((void *)v6 + 5) = v6;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
LABEL_35:
  uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v11 + 64))(v6 + 72);
  (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))(v6 + 72, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Chat conv ", 10);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v14 + 32))(v14, v6 + 320);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" stack ", 7);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, char *))(*(void *)v10 + 96))(&__p, v6 + 24);
  (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v15 = (std::__shared_weak_count *)*((void *)v6 + 5);
  if (!v15 || (std::string::size_type v16 = *((void *)v6 + 4), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v18 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  memset(&v24, 0, sizeof(v24));
  if (v6[343] < 0) {
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)v6 + 40), *((void *)v6 + 41));
  }
  else {
    std::string v24 = *(std::string *)(v6 + 320);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 24);
  __p.__r_.__value_.__l.__size_ = v16;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v24;
  }
  long long v26 = 0;
  uint64_t v19 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v19 = &unk_1F20BE168;
  *(std::string *)(v19 + 8) = __p;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  long long v20 = (std::string *)(v19 + 32);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    *((void *)v19 + 6) = *((void *)&v23.__r_.__value_.__l + 2);
  }
  long long v26 = v19;
  IMSClientManager::callOnMainQueue((IMSClientManager *)&v25);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v25);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v18);
  *a3 = v10;
  a3[1] = v6;
}

void sub_1C52DC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v33 = (std::__shared_weak_count *)v31[3];
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  operator delete(v31);
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v30);
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void ims::lazuli::ChatDelegate::~ChatDelegate(ims::lazuli::ChatDelegate *this)
{
}

ims::lazuli::ChatServices *ims::lazuli::ChatServices::ChatServices(ims::lazuli::ChatServices *this)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v3 = dispatch_queue_create("LazuliChatServices", v2);
  *((void *)this + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    dispatch_retain(v3);
    *((void *)this + 4) = 0;
    dispatch_release(v4);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_1F20BE028;
  return this;
}

void ims::lazuli::ChatServices::~ChatServices(ims::lazuli::ChatServices *this)
{
}

void ims::lazuli::ChatServices::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  int v5 = v4;
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE6B8;
  int v6 = &v4[1].__vftable;
  uint64_t v8 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::lazuli::ChatServices::ChatServices((ims::lazuli::ChatServices *)&v4[1]);
  std::string::basic_string[abi:ne180100]<0>(&v11, "laz.cht.svc");
  if (*(char *)(v8 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
  }
  else {
    std::string __p = *(std::string *)(v8 + 24);
  }
  ImsLogContainer::ImsLogContainer((uint64_t)&v5[2].__shared_weak_owners_, &v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE708;
  v5[2].__shared_weak_owners_ = (uint64_t)&unk_1F20BE740;
  v5[7].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v5[7].__shared_owners_ = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  shared_weak_owners = (std::__shared_weak_count *)v5[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_owners_ = (uint64_t)v6;
    v5[1].__shared_weak_owners_ = (uint64_t)v5;
    goto LABEL_16;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_owners_ = (uint64_t)v6;
    v5[1].__shared_weak_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *a2 = v6;
  a2[1] = v5;
}

void sub_1C52DC67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable(&v20[1].__shared_owners_);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ChatImpl::init(void)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE168;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE168;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_1F20BE168;
  return v2;
}

void sub_1C52DC87C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE168;
}

void std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4 && a1[2])
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v3 + 96))(__p, v3);
      IMSClientManager::lazuliDelegateForStack(__p, &v32);
      if (SBYTE7(v25[0]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v3 + 48;
      uint64_t v5 = *(void *)(v3 + 48);
      if (v32)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(v5 + 64))(v3 + 48);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v3 + 48, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Tracking Chat ", 14);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v3 + 296);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        uint64_t v8 = v32;
        if (*(char *)(v3 + 319) < 0) {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v3 + 296), *(void *)(v3 + 304));
        }
        else {
          std::string v34 = *(std::string *)(v3 + 296);
        }
        std::string v11 = *(std::__shared_weak_count **)(v3 + 16);
        if (!v11 || (uint64_t v12 = *(void *)(v3 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v14 = v13;
        v31[0] = v12;
        v31[1] = (uint64_t)v13;
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        LazuliDelegate::addChat(v8, (uint64_t)&v34, v31);
        std::__shared_weak_count::__release_weak(v14);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v3 + 48);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v3 + 48, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Unable to store Chat ", 21);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v3 + 296);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (*(char *)(v3 + 223) < 0)
      {
        if (!*(void *)(v3 + 208))
        {
LABEL_50:
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          return;
        }
      }
      else if (!*(unsigned char *)(v3 + 223))
      {
        goto LABEL_50;
      }
      long long v29 = 0u;
      long long v30 = 0u;
      long long v28 = 0u;
      memset(v27, 0, sizeof(v27));
      memset(v26, 0, sizeof(v26));
      *(_OWORD *)std::string __p = 0u;
      memset(v25, 0, sizeof(v25));
      uint64_t v15 = *(void *)(v3 + 152);
      if (*(char *)(v15 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v15 + 24), *(void *)(v15 + 32));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v15 + 24);
        *(void *)&v25[0] = *(void *)(v15 + 40);
      }
      std::string::size_type v16 = (_OWORD *)(v3 + 248);
      if (*(char *)(v3 + 271) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v25 + 8), *(const std::string::value_type **)(v3 + 248), *(void *)(v3 + 256));
      }
      else
      {
        *(_OWORD *)((char *)v25 + 8) = *v16;
        *((void *)&v25[1] + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = *(void *)(v3 + 264);
      }
      if (*(char *)(v3 + 199) < 0) {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)(v3 + 176), *(void *)(v3 + 184));
      }
      else {
        v26[0] = *(std::string *)(v3 + 176);
      }
      unsigned int v17 = (_OWORD *)(v3 + 296);
      if (*(char *)(v3 + 319) < 0)
      {
        std::string::__init_copy_ctor_external(&v26[1], *(const std::string::value_type **)(v3 + 296), *(void *)(v3 + 304));
        if (*(char *)(v3 + 319) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v27, *(const std::string::value_type **)(v3 + 296), *(void *)(v3 + 304));
          goto LABEL_41;
        }
      }
      else
      {
        *(_OWORD *)&v26[1].__r_.__value_.__l.__data_ = *v17;
        v26[1].__r_.__value_.__r.__words[2] = *(void *)(v3 + 312);
      }
      *(_OWORD *)uint64_t v27 = *v17;
      *(void *)&v27[16] = *(void *)(v3 + 312);
LABEL_41:
      uint64_t v18 = (long long *)(v3 + 200);
      memset(&v27[24], 0, 128);
      if (*(char *)(v3 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v27[152], *(const std::string::value_type **)(v3 + 200), *(void *)(v3 + 208));
      }
      else
      {
        long long v19 = *v18;
        *(void *)&v27[168] = *(void *)(v3 + 216);
        *(_OWORD *)&v27[152] = v19;
      }
      long long v20 = (long long *)(v3 + 224);
      if (*(char *)(v3 + 247) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v28, *(const std::string::value_type **)(v3 + 224), *(void *)(v3 + 232));
      }
      else
      {
        long long v21 = *v20;
        *(void *)&long long v29 = *(void *)(v3 + 240);
        long long v28 = v21;
      }
      *((void *)&v29 + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = 0;
      long long v30 = 0uLL;
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v3 + 48);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Creating Group Chat txn ", 24);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v22 + 32))(v22, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" subject '", 10);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v22 + 32))(v22, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"' xml ", 6);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v22 + 32))(v22, v18);
      std::string v23 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      IMSClientManager::instance(v23);
      IPTelephonyManager::getInstance(&v32);
      IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(v32 + 200), (const LazuliSendParams *)__p, 0, 0);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      LazuliSendParams::~LazuliSendParams(__p);
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  uint64_t v9 = ims::error((uint64_t)__p, (uint64_t)&v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, a1 + 4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v25[0]) < 0) {
    operator delete(__p[0]);
  }
  if (v4) {
    goto LABEL_50;
  }
}

void sub_1C52DD048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::init(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::init(void)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1C52DD2A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<anonymous namespace'::ChatImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ChatImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::ChatImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::ChatImpl::~ChatImpl(_anonymous_namespace_::ChatImpl *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F20BE238;
  *((void *)this + 5) = &unk_1F20BE2D0;
  *((void *)this + 6) = &unk_1F20BE2F0;
  memset(&v12, 0, sizeof(v12));
  uint64_t v2 = *((void *)this + 19);
  if (*(char *)(v2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else {
    std::string v12 = *(std::string *)(v2 + 24);
  }
  memset(&v11, 0, sizeof(v11));
  uint64_t v3 = (void **)((char *)this + 296);
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 37), *((void *)this + 38));
  }
  else
  {
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    v11.__r_.__value_.__r.__words[2] = *((void *)this + 39);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Destroying Chat instance for conv ", 34);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v4 + 32))(v4, (char *)this + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" client refcount ", 17);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v11;
  }
  uint64_t v15 = 0;
  long long v5 = (char *)operator new(0x38uLL);
  uint64_t v6 = v5;
  *(void *)long long v5 = &unk_1F20BE3B8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v5 + 8) = __p;
  }
  uint64_t v7 = (std::string *)(v6 + 32);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *((void *)v6 + 6) = *((void *)&v10.__r_.__value_.__l + 2);
  }
  uint64_t v15 = v6;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*v3);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  xpc_release(*((xpc_object_t *)this + 21));
  *((void *)this + 2ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = 0;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((void *)this + 6) = &unk_1F20C9CA0;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void sub_1C52DD7CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (v2[31] < 0) {
      operator delete(*v3);
    }
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ChatImpl::changeGroupChatInfo(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void anonymous namespace'::ChatImpl::sendMessage(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void anonymous namespace'::ChatImpl::addParticipant(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void anonymous namespace'::ChatImpl::removeParticipant(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void anonymous namespace'::ChatImpl::contributionId(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void anonymous namespace'::ChatImpl::conversationId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 37), *((void *)this + 38));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 296);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 39);
  }
}

uint64_t anonymous namespace'::ChatImpl::setContributionId(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 56))(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"deprecated-- setContributionId for ", 35);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v1 + 248);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

std::string *anonymous namespace'::ChatImpl::setConversationId(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = a1 + 48;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 56))(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"deprecated-- clobbering conversation ID ", 40);
  *(unsigned char *)(v4 + 17) = 0;
  long long v5 = (std::string *)(v3 + 248);
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" as ", 4);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  return std::string::operator=(v5, a2);
}

void anonymous namespace'::ChatImpl::chatId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 295) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 34), *((void *)this + 35));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 17);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 36);
  }
}

void anonymous namespace'::ChatImpl::stackId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 19);
  if (*(char *)(v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t anonymous namespace'::ChatImpl::status(_anonymous_namespace_::ChatImpl *this)
{
  return 0;
}

void anonymous namespace'::ChatImpl::leaveGroupChat(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

std::string *anonymous namespace'::ChatImpl::newRemoteUriAvailable(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = a1 + 48;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 64))(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Updating URI of conversation ", 29);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v3 + 248);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  return std::string::operator=((std::string *)(v3 + 128), a2);
}

void anonymous namespace'::ChatImpl::remoteUri(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

std::string *non-virtual thunk to'anonymous namespace'::ChatImpl::newRemoteUriAvailable(uint64_t a1, const std::string *a2)
{
}

void non-virtual thunk to'anonymous namespace'::ChatImpl::remoteUri(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
  }
}

void non-virtual thunk to'anonymous namespace'::ChatImpl::~ChatImpl(_anonymous_namespace_::ChatImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE3B8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE3B8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F20BE3B8;
  return v2;
}

void sub_1C52DE3DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BE3B8;
}

void std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  std::string v10 = 0;
  std::string v11 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 8), &v10);
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "laz.cht");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Removing Chat ", 14);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a1 + 32);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = (uint64_t **)v10;
    if (*(char *)(a1 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    }
    else {
      std::string v15 = *(std::string *)(a1 + 32);
    }
    std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__erase_unique<std::string>(v4 + 4, (void **)&v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  uint64_t v5 = ims::debug((uint64_t)__p, (uint64_t)&v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"terminate ", 10);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = a1 + 32;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" on ", 4);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v2);
  uint64_t v7 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v12 < 0) {
    operator delete(v10);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  IMSClientManager::instance(v7);
  IPTelephonyManager::getInstance((uint64_t *)&v10);
  uint64_t v8 = *((void *)v10 + 25);
  std::string::basic_string[abi:ne180100]<0>(__p, "TerminateChat");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v8, v6, (uint64_t)__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C52DE754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<anonymous namespace'::ChatImpl::~ChatImpl()::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::~ChatImpl()::$_0 const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C52DE8CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x1C878E320](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v18 = a1;
  long long v19 = v1;
  uint64_t v3 = *v1++;
  uint64_t v2 = v3;
  std::string v34 = 0;
  std::string::size_type v35 = 0;
  uint64_t v36 = 0;
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kBody";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v37);
  xpc::dyn_cast_or_default();
  xpc_release(v37[0]);
  memset(&v33, 0, sizeof(v33));
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kContentType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v37);
  xpc::dyn_cast_or_default();
  xpc_release(v37[0]);
  memset(&v32, 0, sizeof(v32));
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v37);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v37[0]);
  std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      v21[0] = *(std::string *)((char *)__p + 8);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    std::string v32 = v21[0];
    *((unsigned char *)&v21[0].__r_.__value_.__s + 23) = 0;
    v21[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v32);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"changing group chat info ", 25);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" on ", 4);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = *(void *)(v2 + 152);
  if (*(char *)(v8 + 47) < 0) {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
  }
  else {
    __p[0] = *(std::string *)(v8 + 24);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" type is ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" body length ", 13);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v9 || (std::string::size_type v10 = *(void *)(v2 + 8), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  uint64_t v13 = *(void *)(v2 + 152);
  if (*(char *)(v13 + 47) < 0) {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v13 + 24), *(void *)(v13 + 32));
  }
  else {
    v21[0] = *(std::string *)(v13 + 24);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21[1], v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  }
  else {
    v21[1] = v32;
  }
  if (*(char *)(v2 + 199) < 0) {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(v2 + 176), *(void *)(v2 + 184));
  }
  else {
    v22[0] = *(std::string *)(v2 + 176);
  }
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v22[1].__r_.__value_.__l.__data_ = *v7;
    v22[1].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
LABEL_31:
    *(_OWORD *)&v23[0].__r_.__value_.__l.__data_ = *v7;
    v23[0].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
    goto LABEL_32;
  }
  std::string::__init_copy_ctor_external(&v22[1], *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0) {
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
LABEL_32:
  memset(&v23[1], 0, 48);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v23[2].__r_.__value_.__r.__words, v34, (uint64_t)v35, v35 - (unsigned char *)v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23[3], v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    void v23[3] = v33;
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  __p[0].__r_.__value_.__r.__words[0] = v10;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v21);
  long long v38 = 0;
  char v14 = (char *)operator new(0x158uLL);
  std::string v15 = v14;
  long long v16 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(void *)char v14 = &unk_1F20BE438;
  *(_OWORD *)(v14 + 8) = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)v14 + 1, (long long *)&__p[0].__r_.__value_.__r.__words[2]);
  long long v38 = v15;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v37);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v37);
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  LazuliSendParams::~LazuliSendParams((void **)&v21[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v34)
  {
    std::string::size_type v35 = v34;
    operator delete(v34);
  }
}

void sub_1C52DF080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  std::__shared_weak_count::__release_weak(v74);
  if (*(char *)(v75 - 137) < 0) {
    operator delete(*(void **)(v75 - 160));
  }
  if (*(char *)(v75 - 113) < 0) {
    operator delete(*(void **)(v75 - 136));
  }
  long long v77 = *(void **)(v75 - 112);
  if (v77)
  {
    *(void *)(v75 - 104) = v77;
    operator delete(v77);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE438;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE438;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x158uLL);
  *uint64_t v2 = &unk_1F20BE438;
  return v2;
}

void sub_1C52DF43C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE438;
}

void std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    long long v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::changeLazuliGroupInfo(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    long long v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  uint64_t v5 = ims::error((uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 48);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v22 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    xpc_object_t v20 = 0;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (v6)
    {
      xpc_object_t v20 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v20 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
LABEL_18:
      xpc_release(v7);
      xpc_object_t v18 = xpc_BOOL_create(0);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      unsigned int v17 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v18, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v18);
      xpc_object_t v18 = 0;
      if (*(char *)(a1 + 119) >= 0) {
        uint64_t v9 = (const char *)(a1 + 96);
      }
      else {
        uint64_t v9 = *(const char **)(a1 + 96);
      }
      xpc_object_t v14 = xpc_string_create(v9);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      unsigned int v17 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_release(v14);
      xpc_object_t v14 = 0;
      if (*(char *)(a1 + 71) >= 0) {
        std::string::size_type v10 = (const char *)(a1 + 48);
      }
      else {
        std::string::size_type v10 = *(const char **)(a1 + 48);
      }
      xpc_object_t v12 = xpc_string_create(v10);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      unsigned int v17 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v12, &v13);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_release(v12);
      xpc_object_t v12 = 0;
      std::string v11 = (LazuliDelegate *)__p;
      xpc_object_t v16 = v20;
      if (v20) {
        xpc_retain(v20);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      LazuliDelegate::handleGroupChatUpdate(v11, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v20);
      goto LABEL_34;
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_17:
    xpc_object_t v20 = v8;
    goto LABEL_18;
  }
LABEL_34:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v4) {
    goto LABEL_37;
  }
}

void sub_1C52DF880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1C52DF9D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  std::string::size_type v35 = a1;
  uint64_t v36 = v1;
  uint64_t v3 = *v1++;
  uint64_t v2 = v3;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  object[0] = v1;
  object[1] = "kBody";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  memset(&v52, 0, sizeof(v52));
  object[0] = v1;
  object[1] = "kContentType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  object[0] = v1;
  object[1] = "kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  memset(&v49, 0, sizeof(v49));
  object[0] = v1;
  object[1] = "kContributionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  memset(&v48[1], 0, sizeof(std::string));
  object[0] = v1;
  object[1] = "kInReplyToContributionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  memset(v48, 0, 24);
  object[0] = v1;
  object[1] = "kMessageType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v56);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  xpc_release(v56[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kOriginalMessageSize";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, object);
  int v4 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(&__str, 0, sizeof(__str));
  p_str = &__str;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__str, v53, v54, v54 - v53);
  int v6 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  int64_t size = __str.__r_.__value_.__l.__size_;
  xpc_object_t v8 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (size >= 12)
  {
    uint64_t v9 = (char *)p_str + size;
    std::string::size_type v10 = p_str;
    do
    {
      std::string v11 = (char *)memchr(v10, 67, size - 11);
      if (!v11) {
        break;
      }
      if (*(void *)v11 == *(void *)"Content-Type"
        && *((_DWORD *)v11 + 2) == (unint64_t)*(unsigned int *)"Type")
      {
        if (v11 == v9 || v11 - (char *)p_str == -1) {
          break;
        }
        std::string::basic_string(&__p, &__str, 0, v11 - (char *)p_str, (std::allocator<char> *)object);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = __p;
        goto LABEL_22;
      }
      std::string::size_type v10 = (std::string *)(v11 + 1);
      int64_t size = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 12);
  }
  if (v6 < 0)
  {
    __str.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
    xpc_object_t v8 = &__str;
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
LABEL_22:
  uint64_t v13 = HIBYTE(v51);
  if (v51 < 0) {
    uint64_t v13 = *((void *)&v50 + 1);
  }
  if (!v13)
  {
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v38) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)object, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)xpc_object_t object = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(void *)&v40[0] = v38;
    }
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)v50);
    }
    long long v50 = *(_OWORD *)object;
    uint64_t v51 = *(void *)&v40[0];
    BYTE7(v40[0]) = 0;
    LOBYTE(object[0]) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 32))(v14, &v50);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  std::string::size_type v15 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v49.__r_.__value_.__l.__size_;
  }
  if (v15)
  {
    if (v4)
    {
LABEL_37:
      uint64_t v16 = v4;
      goto LABEL_57;
    }
  }
  else
  {
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v38) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)object, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)xpc_object_t object = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(void *)&v40[0] = v38;
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)object;
    v49.__r_.__value_.__r.__words[2] = *(void *)&v40[0];
    BYTE7(v40[0]) = 0;
    LOBYTE(object[0]) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"contributionId not provided, using uuid ", 40);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 32))(v17, &v49);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v4) {
      goto LABEL_37;
    }
  }
  uint64_t v16 = v54 - v53;
  std::string::size_type v18 = HIBYTE(v48[0].__r_.__value_.__r.__words[2]);
  if ((v48[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v18 = v48[0].__r_.__value_.__l.__size_;
  }
  if (v18 == 12)
  {
    long long v19 = v48;
    if ((v48[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v19 = (std::string *)v48[0].__r_.__value_.__r.__words[0];
    }
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
    uint64_t v21 = LODWORD(v19->__r_.__value_.__r.__words[1]);
    if (v20 == *(void *)"kMessageText" && v21 == *(unsigned int *)"Text")
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"original content size not provided for encoded user text, using encoded size", 76);
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v23 + 17) = 0;
    }
  }
LABEL_57:
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"sending trx ", 12);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v24 + 32))(v24, &v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" conversation ", 14);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 32))(v24, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" on ", 4);
  *(unsigned char *)(v24 + 17) = 0;
  uint64_t v25 = *(void *)(v2 + 152);
  if (*(char *)(v25 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v25 + 24), *(void *)(v25 + 32));
  }
  else {
    std::string __p = *(std::string *)(v25 + 24);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" type ", 6);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" length ", 8);
  *(unsigned char *)(v24 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v24 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" cpimHeaderLength=", 18);
  *(unsigned char *)(v24 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v26 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v26 || (std::string::size_type v27 = *(void *)(v2 + 8), (v28 = std::__shared_weak_count::lock(v26)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v29 = v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  memset(v46, 0, sizeof(v46));
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  memset(v41, 0, sizeof(v41));
  *(_OWORD *)xpc_object_t object = 0u;
  memset(v40, 0, sizeof(v40));
  uint64_t v30 = *(void *)(v2 + 152);
  if (*(char *)(v30 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)object, *(const std::string::value_type **)(v30 + 24), *(void *)(v30 + 32));
  }
  else
  {
    *(_OWORD *)xpc_object_t object = *(_OWORD *)(v30 + 24);
    *(void *)&v40[0] = *(void *)(v30 + 40);
  }
  if (SHIBYTE(v51) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v40 + 8), (const std::string::value_type *)v50, *((std::string::size_type *)&v50 + 1));
  }
  else
  {
    *(_OWORD *)((char *)v40 + 8) = v50;
    *((void *)&v40[1] + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = v51;
  }
  if (*(char *)(v2 + 199) < 0) {
    std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)(v2 + 176), *(void *)(v2 + 184));
  }
  else {
    v41[0] = *(std::string *)(v2 + 176);
  }
  if (*(char *)(v2 + 319) < 0) {
    std::string::__init_copy_ctor_external(&v41[1], *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
  }
  else {
    v41[1] = *(std::string *)(v2 + 296);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v42, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    v42[0] = v49;
  }
  if (SHIBYTE(v48[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v42[1], v48[1].__r_.__value_.__l.__data_, v48[1].__r_.__value_.__l.__size_);
  }
  else {
    v42[1] = v48[1];
  }
  memset(v43, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v43, v53, (uint64_t)v54, v54 - v53);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43[1], v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else {
    v43[1] = v52;
  }
  long long v44 = 0uLL;
  *(void *)&long long v45 = 0;
  *((void *)&v45 + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = v16;
  if (SHIBYTE(v48[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v46, v48[0].__r_.__value_.__l.__data_, v48[0].__r_.__value_.__l.__size_);
  }
  else {
    v46[0] = v48[0];
  }
  memset(&v46[1], 0, 48);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46[3], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    v46[3] = __str;
  }
  __p.__r_.__value_.__r.__words[0] = v27;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  LazuliSendParams::LazuliSendParams((std::string *)&__p.__r_.__value_.__r.__words[2], (const LazuliSendParams *)object);
  uint64_t v57 = 0;
  long long v31 = (char *)operator new(0x158uLL);
  std::string v32 = v31;
  long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)long long v31 = &unk_1F20BE4B8;
  *(_OWORD *)(v31 + 8) = v33;
  if (*((void *)&v33 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)v31 + 1, (long long *)&__p.__r_.__value_.__r.__words[2]);
  uint64_t v57 = v32;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v56);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v56);
  LazuliSendParams::~LazuliSendParams((void **)&__p.__r_.__value_.__r.__words[2]);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  LazuliSendParams::~LazuliSendParams(object);
  std::__shared_weak_count::__release_weak(v29);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_1C52E077C(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (*(char *)(v3 - 233) < 0) {
    operator delete(*(void **)(v3 - 256));
  }
  if (*(char *)(v3 - 209) < 0) {
    operator delete(*(void **)(v3 - 232));
  }
  if (*(char *)(v3 - 185) < 0) {
    operator delete(*(void **)(v3 - 208));
  }
  if (*(char *)(v3 - 153) < 0) {
    operator delete(*(void **)(v3 - 176));
  }
  if (*(char *)(v3 - 129) < 0) {
    operator delete(*(void **)(v3 - 152));
  }
  uint64_t v5 = *(void **)(v3 - 128);
  if (v5)
  {
    *(void *)(v3 - 120) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE4B8;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE4B8;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x158uLL);
  *uint64_t v2 = &unk_1F20BE4B8;
  return v2;
}

void sub_1C52E0CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE4B8;
}

void std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    int v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::sendLazuli(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
LABEL_42:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    int v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  uint64_t v5 = ims::error((uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 48);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v26 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v25 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    xpc_object_t v23 = 0;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (v6)
    {
      xpc_object_t v23 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v23 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
LABEL_18:
      xpc_release(v7);
      xpc_object_t v21 = xpc_BOOL_create(0);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_object_t v19 = &v23;
      std::string::size_type v20 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v19, &v21, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      if (*(char *)(a1 + 119) >= 0) {
        uint64_t v9 = (const char *)(a1 + 96);
      }
      else {
        uint64_t v9 = *(const char **)(a1 + 96);
      }
      xpc_object_t v17 = xpc_string_create(v9);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_object_t v19 = &v23;
      std::string::size_type v20 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v19, &v17, &v18);
      xpc_release(v18);
      xpc_object_t v18 = 0;
      xpc_release(v17);
      xpc_object_t v17 = 0;
      if (*(char *)(a1 + 143) >= 0) {
        std::string::size_type v10 = (const char *)(a1 + 120);
      }
      else {
        std::string::size_type v10 = *(const char **)(a1 + 120);
      }
      xpc_object_t v15 = xpc_string_create(v10);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v19 = &v23;
      std::string::size_type v20 = "kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v19, &v15, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v15);
      xpc_object_t v15 = 0;
      if (*(char *)(a1 + 71) >= 0) {
        std::string v11 = (const char *)(a1 + 48);
      }
      else {
        std::string v11 = *(const char **)(a1 + 48);
      }
      xpc_object_t v13 = xpc_string_create(v11);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_object_t v19 = &v23;
      std::string::size_type v20 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v19, &v13, &v14);
      xpc_release(v14);
      xpc_object_t v14 = 0;
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_object_t v12 = (LazuliDelegate *)__p;
      xpc_object_t v19 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v19 = xpc_null_create();
      }
      LazuliDelegate::handleMessageSend(v12, &v19);
      xpc_release(v19);
      xpc_object_t v19 = 0;
      xpc_release(v23);
      goto LABEL_39;
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_17:
    xpc_object_t v23 = v8;
    goto LABEL_18;
  }
LABEL_39:
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v4) {
    goto LABEL_42;
  }
}

void sub_1C52E1150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1C52E12AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  xpc_object_t v18 = a1;
  xpc_object_t v19 = v1;
  uint64_t v3 = *v1++;
  uint64_t v2 = v3;
  memset(&v27, 0, sizeof(v27));
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v28);
  xpc::dyn_cast_or_default();
  xpc_release(v28[0]);
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v28);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v28[0]);
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      v21[0] = *(std::string *)((char *)__p + 8);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::string v27 = v21[0];
    *((unsigned char *)&v21[0].__r_.__value_.__s + 23) = 0;
    v21[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v27);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"adding group participant trx ", 29);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" conversation ", 14);
  *(unsigned char *)(v6 + 17) = 0;
  xpc_object_t v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" on ", 4);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = *(void *)(v2 + 152);
  if (*(char *)(v8 + 47) < 0) {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
  }
  else {
    __p[0] = *(std::string *)(v8 + 24);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v9 || (std::string::size_type v10 = *(void *)(v2 + 8), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v12 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  uint64_t v13 = *(void *)(v2 + 152);
  if (*(char *)(v13 + 47) < 0) {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v13 + 24), *(void *)(v13 + 32));
  }
  else {
    v21[0] = *(std::string *)(v13 + 24);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21[1], v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    v21[1] = v27;
  }
  if (*(char *)(v2 + 199) < 0) {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(v2 + 176), *(void *)(v2 + 184));
  }
  else {
    v22[0] = *(std::string *)(v2 + 176);
  }
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v22[1].__r_.__value_.__l.__data_ = *v7;
    v22[1].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
LABEL_31:
    *(_OWORD *)&v23[0].__r_.__value_.__l.__data_ = *v7;
    v23[0].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
    goto LABEL_32;
  }
  std::string::__init_copy_ctor_external(&v22[1], *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0) {
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
LABEL_32:
  memset(&v23[1], 0, 72);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v24, (const std::string::value_type *)v25, *((std::string::size_type *)&v25 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v24 = v25;
    *(void *)&v24[16] = v26;
  }
  memset(&v24[24], 0, 104);
  __p[0].__r_.__value_.__r.__words[0] = v10;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v21);
  long long v29 = 0;
  xpc_object_t v14 = (char *)operator new(0x158uLL);
  xpc_object_t v15 = v14;
  long long v16 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(void *)xpc_object_t v14 = &unk_1F20BE538;
  *(_OWORD *)(v14 + 8) = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)v14 + 1, (long long *)&__p[0].__r_.__value_.__r.__words[2]);
  long long v29 = v15;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v28);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v28);
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  LazuliSendParams::~LazuliSendParams((void **)&v21[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1C52E1984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  std::__shared_weak_count::__release_weak(v74);
  if (*(char *)(v75 - 113) < 0) {
    operator delete(*(void **)(v75 - 136));
  }
  if (*(char *)(v75 - 89) < 0) {
    operator delete(*(void **)(v75 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE538;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE538;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x158uLL);
  *uint64_t v2 = &unk_1F20BE538;
  return v2;
}

void sub_1C52E1D08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE538;
}

void std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    int v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::addParticipant(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    int v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  uint64_t v5 = ims::error((uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 48);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v22 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    xpc_object_t v20 = 0;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (v6)
    {
      xpc_object_t v20 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v20 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
LABEL_18:
      xpc_release(v7);
      xpc_object_t v18 = xpc_BOOL_create(0);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v18, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v18);
      xpc_object_t v18 = 0;
      if (*(char *)(a1 + 119) >= 0) {
        uint64_t v9 = (const char *)(a1 + 96);
      }
      else {
        uint64_t v9 = *(const char **)(a1 + 96);
      }
      xpc_object_t v14 = xpc_string_create(v9);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_release(v14);
      xpc_object_t v14 = 0;
      if (*(char *)(a1 + 71) >= 0) {
        std::string::size_type v10 = (const char *)(a1 + 48);
      }
      else {
        std::string::size_type v10 = *(const char **)(a1 + 48);
      }
      xpc_object_t v12 = xpc_string_create(v10);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v12, &v13);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_release(v12);
      xpc_object_t v12 = 0;
      std::string v11 = (LazuliDelegate *)__p;
      xpc_object_t v16 = v20;
      if (v20) {
        xpc_retain(v20);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      LazuliDelegate::handleParticipantAdded(v11, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v20);
      goto LABEL_34;
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_17:
    xpc_object_t v20 = v8;
    goto LABEL_18;
  }
LABEL_34:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v4) {
    goto LABEL_37;
  }
}

void sub_1C52E214C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1C52E229C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  xpc_object_t v18 = a1;
  xpc_object_t v19 = v1;
  uint64_t v3 = *v1++;
  uint64_t v2 = v3;
  memset(&v27, 0, sizeof(v27));
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v28);
  xpc::dyn_cast_or_default();
  xpc_release(v28[0]);
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v21[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v21, v28);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v28[0]);
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      v21[0] = *(std::string *)((char *)__p + 8);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::string v27 = v21[0];
    *((unsigned char *)&v21[0].__r_.__value_.__s + 23) = 0;
    v21[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v27);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"removing group participant trx ", 31);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" from group conversation ", 25);
  *(unsigned char *)(v6 + 17) = 0;
  xpc_object_t v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" on ", 4);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = *(void *)(v2 + 152);
  if (*(char *)(v8 + 47) < 0) {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
  }
  else {
    __p[0] = *(std::string *)(v8 + 24);
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v9 || (std::string::size_type v10 = *(void *)(v2 + 8), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v12 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  uint64_t v13 = *(void *)(v2 + 152);
  if (*(char *)(v13 + 47) < 0) {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v13 + 24), *(void *)(v13 + 32));
  }
  else {
    v21[0] = *(std::string *)(v13 + 24);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21[1], v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    v21[1] = v27;
  }
  if (*(char *)(v2 + 199) < 0) {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(v2 + 176), *(void *)(v2 + 184));
  }
  else {
    v22[0] = *(std::string *)(v2 + 176);
  }
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v22[1].__r_.__value_.__l.__data_ = *v7;
    v22[1].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
LABEL_31:
    *(_OWORD *)&v23[0].__r_.__value_.__l.__data_ = *v7;
    v23[0].__r_.__value_.__r.__words[2] = *(void *)(v2 + 312);
    goto LABEL_32;
  }
  std::string::__init_copy_ctor_external(&v22[1], *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0) {
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
LABEL_32:
  memset(&v23[1], 0, 72);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v24, (const std::string::value_type *)v25, *((std::string::size_type *)&v25 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v24 = v25;
    *(void *)&v24[16] = v26;
  }
  memset(&v24[24], 0, 104);
  __p[0].__r_.__value_.__r.__words[0] = v10;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v21);
  long long v29 = 0;
  xpc_object_t v14 = (char *)operator new(0x158uLL);
  xpc_object_t v15 = v14;
  long long v16 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(void *)xpc_object_t v14 = &unk_1F20BE5B8;
  *(_OWORD *)(v14 + 8) = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)v14 + 1, (long long *)&__p[0].__r_.__value_.__r.__words[2]);
  long long v29 = v15;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v28);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v28);
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  LazuliSendParams::~LazuliSendParams((void **)&v21[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1C52E2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  std::__shared_weak_count::__release_weak(v74);
  if (*(char *)(v75 - 113) < 0) {
    operator delete(*(void **)(v75 - 136));
  }
  if (*(char *)(v75 - 89) < 0) {
    operator delete(*(void **)(v75 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE5B8;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE5B8;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x158uLL);
  *uint64_t v2 = &unk_1F20BE5B8;
  return v2;
}

void sub_1C52E2CF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE5B8;
}

void std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    int v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::removeParticipant(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
LABEL_37:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    int v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  uint64_t v5 = ims::error((uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" / ", 3);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 48);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v22 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    xpc_object_t v20 = 0;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (v6)
    {
      xpc_object_t v20 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v20 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
LABEL_18:
      xpc_release(v7);
      xpc_object_t v18 = xpc_BOOL_create(0);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v18, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v18);
      xpc_object_t v18 = 0;
      if (*(char *)(a1 + 119) >= 0) {
        uint64_t v9 = (const char *)(a1 + 96);
      }
      else {
        uint64_t v9 = *(const char **)(a1 + 96);
      }
      xpc_object_t v14 = xpc_string_create(v9);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_release(v14);
      xpc_object_t v14 = 0;
      if (*(char *)(a1 + 71) >= 0) {
        std::string::size_type v10 = (const char *)(a1 + 48);
      }
      else {
        std::string::size_type v10 = *(const char **)(a1 + 48);
      }
      xpc_object_t v12 = xpc_string_create(v10);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_object_t v16 = &v20;
      xpc_object_t v17 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v12, &v13);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_release(v12);
      xpc_object_t v12 = 0;
      std::string v11 = (LazuliDelegate *)__p;
      xpc_object_t v16 = v20;
      if (v20) {
        xpc_retain(v20);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      LazuliDelegate::handleParticipantRemoved(v11, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v20);
      goto LABEL_34;
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_17:
    xpc_object_t v20 = v8;
    goto LABEL_18;
  }
LABEL_34:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v4) {
    goto LABEL_37;
  }
}

void sub_1C52E313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1C52E328C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>(anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(void ***a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  xpc_object_t v13 = a1;
  xpc_object_t v14 = v1;
  uint64_t v2 = (std::__shared_weak_count **)*v1;
  uint64_t v3 = (uint64_t)*v1 + 48;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Leave Group Chat ", 17);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v4 + 32))(v4, v2 + 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" on stack ", 10);
  *(unsigned char *)(v4 + 17) = 0;
  ((void (*)(void **__return_ptr, std::__shared_weak_count **))(*v2)[4].__vftable)(__p, v2);
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = v2[2];
  if (!v5 || (xpc_object_t v6 = v2[1], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  memset(&v22, 0, sizeof(v22));
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count **))(*v2)[4].__vftable)(&v22, v2);
  memset(&v21, 0, sizeof(v21));
  if (*((char *)v2 + 319) < 0) {
    std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v2[37], (std::string::size_type)v2[38]);
  }
  else {
    std::string v21 = *(std::string *)(v2 + 37);
  }
  memset(&object[1], 0, 24);
  v23[0] = v1 + 1;
  v23[1] = "kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v23, object);
  __p[0] = 0;
  __p[1] = 0;
  xpc_object_t v16 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object[0]);
  __p[0] = v2;
  __p[1] = v6;
  xpc_object_t v16 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v21;
  }
  if (SHIBYTE(object[3]) < 0) {
    std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)object[1], (std::string::size_type)object[2]);
  }
  else {
    std::string v18 = *(std::string *)&object[1];
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v22;
  }
  uint64_t v24 = 0;
  uint64_t v9 = (char *)operator new(0x68uLL);
  std::string::size_type v10 = v9;
  *(void *)uint64_t v9 = &unk_1F20BE638;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)__p;
  *((void *)v9 + 3) = v16;
  __p[1] = 0;
  xpc_object_t v16 = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 32), v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v9 + 32) = v17;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 56), v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v10 + 56) = v18;
  }
  std::string v11 = (std::string *)(v10 + 80);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *((void *)v10 + 12) = *((void *)&v19.__r_.__value_.__l + 2);
  }
  uint64_t v24 = v10;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v23);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v23);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (SHIBYTE(object[3]) < 0) {
    operator delete(object[1]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void sub_1C52E3760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t object,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v45 + 79) < 0) {
    operator delete(*v47);
  }
  if (*(char *)(v45 + 55) < 0) {
    operator delete(*v46);
  }
  long long v50 = *(std::__shared_weak_count **)(v45 + 24);
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  operator delete((void *)v45);
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v48 - 105) < 0) {
    operator delete(*(void **)(v48 - 128));
  }
  std::__shared_weak_count::__release_weak(v44);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE638;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE638;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x68uLL);
  *uint64_t v2 = &unk_1F20BE638;
  return v2;
}

void sub_1C52E3A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE638;
}

void std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4 && *(void *)(a1 + 16))
    {
      memset(v21, 0, sizeof(v21));
      memset(v20, 0, sizeof(v20));
      *(_OWORD *)std::string __p = 0u;
      memset(v19, 0, sizeof(v19));
      uint64_t v5 = *(void *)(v3 + 152);
      if (*(char *)(v5 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 24);
        *(void *)&v19[0] = *(void *)(v5 + 40);
      }
      if (*(char *)(a1 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v19 + 8), *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)((char *)v19 + 8) = *(_OWORD *)(a1 + 56);
        *((void *)&v19[1] + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = *(void *)(a1 + 72);
      }
      if (*(char *)(v3 + 199) < 0) {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v3 + 176), *(void *)(v3 + 184));
      }
      else {
        v20[0] = *(std::string *)(v3 + 176);
      }
      std::string::size_type v10 = (_OWORD *)(v3 + 296);
      if (*(char *)(v3 + 319) < 0)
      {
        std::string::__init_copy_ctor_external(&v20[1], *(const std::string::value_type **)(v3 + 296), *(void *)(v3 + 304));
        std::string v11 = (IMSClientManager *)v21;
        if (*(char *)(v3 + 319) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v21, *(const std::string::value_type **)(v3 + 296), *(void *)(v3 + 304));
          goto LABEL_29;
        }
      }
      else
      {
        *(_OWORD *)&v20[1].__r_.__value_.__l.__data_ = *v10;
        v20[1].__r_.__value_.__r.__words[2] = *(void *)(v3 + 312);
        std::string v11 = (IMSClientManager *)v21;
      }
      *(_OWORD *)std::string v21 = *v10;
      *(void *)&v21[16] = *(void *)(v3 + 312);
LABEL_29:
      memset(&v21[24], 0, 200);
      IMSClientManager::instance(v11);
      IPTelephonyManager::getInstance((uint64_t *)&v29);
      IMSCallManager::leaveGroupChat(v29[25], (std::string *)__p);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      LazuliSendParams::~LazuliSendParams(__p);
LABEL_53:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v29, "");
  uint64_t v6 = ims::error((uint64_t)__p, (uint64_t)&v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 32);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v31 < 0) {
    operator delete(v29);
  }
  if (SBYTE7(v19[0]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 80), __p);
  if (__p[0])
  {
    long long v28 = 0;
    xpc_object_t v7 = (uint64_t ***)xpc_dictionary_create(0, 0, 0);
    xpc_object_t v8 = v7;
    if (v7)
    {
      long long v28 = v7;
    }
    else
    {
      xpc_object_t v8 = (uint64_t ***)xpc_null_create();
      long long v28 = v8;
      if (!v8)
      {
        uint64_t v9 = (uint64_t ***)xpc_null_create();
        xpc_object_t v8 = 0;
        goto LABEL_33;
      }
    }
    if (MEMORY[0x1C878F160](v8) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v8);
LABEL_34:
      xpc_release(v8);
      xpc_object_t v26 = xpc_BOOL_create(0);
      if (!v26) {
        xpc_object_t v26 = xpc_null_create();
      }
      long long v29 = (uint64_t ***)&v28;
      uint64_t v30 = (std::__shared_weak_count *)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v29, &v26, &v27);
      xpc_release(v27);
      xpc_object_t v27 = 0;
      xpc_release(v26);
      xpc_object_t v26 = 0;
      if (*(char *)(a1 + 55) >= 0) {
        xpc_object_t v12 = (const char *)(a1 + 32);
      }
      else {
        xpc_object_t v12 = *(const char **)(a1 + 32);
      }
      xpc_object_t v24 = xpc_string_create(v12);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      long long v29 = (uint64_t ***)&v28;
      uint64_t v30 = (std::__shared_weak_count *)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v29, &v24, &v25);
      xpc_release(v25);
      xpc_object_t v25 = 0;
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_object_t v15 = *(const char **)(a1 + 56);
      uint64_t v14 = a1 + 56;
      xpc_object_t v13 = v15;
      if (*(char *)(v14 + 23) >= 0) {
        xpc_object_t v16 = (const char *)v14;
      }
      else {
        xpc_object_t v16 = v13;
      }
      xpc_object_t v22 = xpc_string_create(v16);
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      long long v29 = (uint64_t ***)&v28;
      uint64_t v30 = (std::__shared_weak_count *)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v29, &v22, &v23);
      xpc_release(v23);
      xpc_object_t v23 = 0;
      xpc_release(v22);
      xpc_object_t v22 = 0;
      std::string v17 = (LazuliDelegate *)__p[0];
      long long v29 = v28;
      if (v28) {
        xpc_retain(v28);
      }
      else {
        long long v29 = (uint64_t ***)xpc_null_create();
      }
      LazuliDelegate::handleLeaveGroupChat(v17, (void **)&v29);
      xpc_release(v29);
      long long v29 = 0;
      xpc_release(v28);
      goto LABEL_50;
    }
    uint64_t v9 = (uint64_t ***)xpc_null_create();
LABEL_33:
    long long v28 = v9;
    goto LABEL_34;
  }
LABEL_50:
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v4) {
    goto LABEL_53;
  }
}

void sub_1C52E3FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v6;
  }
  xpc_object_t v7 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C52E423C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<anonymous namespace'::ChatServicesImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ChatServicesImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BE6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::ChatServicesImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::ChatServicesImpl::~ChatServicesImpl(_anonymous_namespace_::ChatServicesImpl *this)
{
  *(void *)this = &unk_1F20BE708;
  *((void *)this + 5) = &unk_1F20BE740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 5) = &unk_1F20C9CA0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20BE708;
  *((void *)this + 5) = &unk_1F20BE740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 5) = &unk_1F20C9CA0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1);
  JUMPOUT(0x1C878E320);
}

void anonymous namespace'::ChatServicesImpl::sendSpamReport(uint64_t a1, xpc_object_t *a2)
{
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void anonymous namespace'::ChatServicesImpl::getCapabilities(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'anonymous namespace'::ChatServicesImpl::~ChatServicesImpl(_anonymous_namespace_::ChatServicesImpl *this)
{
  *((void *)this - 5) = &unk_1F20BE708;
  *(void *)this = &unk_1F20BE740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this - 4);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *((void *)this - 5) = &unk_1F20BE708;
  *(void *)this = &unk_1F20BE740;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this - 4);
  JUMPOUT(0x1C878E320);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::ChatServices>::execute_wrapped<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>(anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0,dispatch_queue_s *::default_delete<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v45 = a1;
  uint64_t v46 = v1;
  uint64_t v4 = (void *)*v1;
  std::string::size_type v3 = (std::string::size_type)(v1 + 1);
  uint64_t v2 = v4;
  *(void *)std::string __p = v3;
  *(void *)&__p[8] = "kIsChatbot";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, &v83);
  char v5 = xpc::dyn_cast_or_default();
  xpc_release(v83.__r_.__value_.__l.__data_);
  memset(&v82, 0, sizeof(v82));
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v81);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  xpc_release(v81.__r_.__value_.__l.__data_);
  memset(&v81, 0, sizeof(v81));
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v80);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  xpc_release(v80.__r_.__value_.__l.__data_);
  memset(&v80, 0, sizeof(v80));
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kSpamReportingUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v79);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  xpc_release(v79.__r_.__value_.__l.__data_);
  memset(&v79, 0, sizeof(v79));
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &object);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  xpc_release(object);
  *(void *)std::string __p = v3;
  *(void *)&__p[8] = "kMessageIDList";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, &v83);
  xpc_object_t v6 = xpc_null_create();
  xpc_object_t v7 = (xpc_object_t)v83.__r_.__value_.__r.__words[0];
  uint64_t v8 = MEMORY[0x1E4F14568];
  if (v83.__r_.__value_.__r.__words[0] && MEMORY[0x1C878F160](v83.__r_.__value_.__r.__words[0]) == v8) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  if (MEMORY[0x1C878F160](v7) != v8)
  {
    if (v6)
    {
      xpc_retain(v6);
      xpc_object_t v9 = v6;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_release(v7);
    xpc_object_t v7 = v9;
  }
  xpc_release(v6);
  xpc_release(v83.__r_.__value_.__l.__data_);
  xpc_object_t object = 0;
  long long v77 = 0;
  uint64_t v78 = 0;
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kSpamContent";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v75);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  xpc_release(v75.__r_.__value_.__l.__data_);
  memset(&v75, 0, sizeof(v75));
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kSpamType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v72);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  xpc_release(v72);
  xpc_object_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  v83.__r_.__value_.__r.__words[0] = v3;
  v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kFreeText";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v83, &v71);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  xpc_release(v71.__r_.__value_.__l.__data_);
  memset(&v71, 0, sizeof(v71));
  std::string::basic_string[abi:ne180100]<0>(&v71, "");
  std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v79.__r_.__value_.__l.__size_;
  }
  BOOL v11 = size != 0;
  if (!size)
  {
    std::string::__assign_external(&v71, "Can't send a spam report for empty remoteUri", 0x2CuLL);
    xpc_object_t v12 = (unsigned char *)(*(uint64_t (**)(void *))(v2[5] + 56))(v2 + 5);
    (*(void (**)(void *, unsigned char *))(v2[5] + 16))(v2 + 5, v12);
    (*(void (**)(unsigned char *, std::string *))(*(void *)v12 + 32))(v12, &v71);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v12[17] = 0;
  }
  if (MEMORY[0x1C878F160](v7) != v8 || !xpc_array_get_count(v7))
  {
    std::string::__assign_external(&v71, "Can't send a spam report without any message IDs", 0x30uLL);
    xpc_object_t v13 = (unsigned char *)(*(uint64_t (**)(void *))(v2[5] + 56))(v2 + 5);
    (*(void (**)(void *, unsigned char *))(v2[5] + 16))(v2 + 5, v13);
    (*(void (**)(unsigned char *, std::string *))(*(void *)v13 + 32))(v13, &v71);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    BOOL v11 = 0;
    v13[17] = 0;
  }
  std::string::size_type v14 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v81.__r_.__value_.__l.__size_;
  }
  if (v14)
  {
    if (v5) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  ImsUuid::generate((ImsUuid *)__p);
  if ((__p[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
  }
  else {
    std::string v83 = *(std::string *)&__p[8];
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  std::string v81 = v83;
  *((unsigned char *)&v83.__r_.__value_.__s + 23) = 0;
  v83.__r_.__value_.__s.__data_[0] = 0;
  *(void *)std::string __p = &unk_1F20B3708;
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  uint64_t v15 = (*(uint64_t (**)(void *))(v2[5] + 56))(v2 + 5);
  (*(void (**)(void *, uint64_t))(v2[5] + 16))(v2 + 5, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, &v81);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if ((v5 & 1) == 0)
  {
LABEL_44:
    std::string::size_type v16 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v16 = v80.__r_.__value_.__l.__size_;
    }
    if (!v16)
    {
      std::string::__assign_external(&v71, "Can't send a spam report without valid Spam reporting URI", 0x39uLL);
      std::string v17 = (unsigned char *)(*(uint64_t (**)(void *))(v2[5] + 56))(v2 + 5);
      (*(void (**)(void *, unsigned char *))(v2[5] + 16))(v2 + 5, v17);
      (*(void (**)(unsigned char *, std::string *))(*(void *)v17 + 32))(v17, &v71);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      BOOL v11 = 0;
      v17[17] = 0;
    }
  }
LABEL_48:
  memset(&v70, 0, sizeof(v70));
  uint64_t v18 = v2[18];
  if (*(char *)(v18 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v18 + 24), *(void *)(v18 + 32));
  }
  else {
    std::string v70 = *(std::string *)(v18 + 24);
  }
  if (v11)
  {
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v75.__r_.__value_.__l.__size_ > 1)
      {
        std::string v19 = (std::string *)v75.__r_.__value_.__r.__words[0];
LABEL_60:
        if (v19->__r_.__value_.__s.__data_[0] == 107)
        {
          xpc_object_t v26 = std::string::basic_string(&v83, &v75, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v69);
          ims::lowerCase((uint64_t)v26, (std::string *)__p);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          std::string v75 = *(std::string *)__p;
          __p[23] = 0;
          __p[0] = 0;
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else if (HIBYTE(v75.__r_.__value_.__r.__words[2]) > 1u)
    {
      std::string v19 = &v75;
      goto LABEL_60;
    }
    uint64_t v27 = (*(uint64_t (**)(void *))(v2[5] + 64))(v2 + 5);
    (*(void (**)(void *, uint64_t))(v2[5] + 16))(v2 + 5, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"sending spam report message on ", 31);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" for trx ", 9);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" with spam type ", 16);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v75);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    long long v28 = (std::__shared_weak_count *)v2[2];
    if (!v28 || (uint64_t v29 = v2[1], (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v31 = v30;
    p_shared_weak_owners = &v30->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    *(void *)std::string __p = v29;
    *(void *)&__p[8] = v31;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&__p[16], v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&__p[16] = v81;
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v48, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
    }
    else {
      std::string v48 = v82;
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v49, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
    }
    else {
      std::string v49 = v70;
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v50, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    }
    else {
      std::string v50 = v79;
    }
    char v51 = v5;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v52, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
    }
    else {
      std::string v52 = v80;
    }
    xpc_object_t v53 = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t v53 = xpc_null_create();
    }
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v54, object, (uint64_t)v77, v77 - (unsigned char *)object);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v57, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    }
    else {
      std::string v57 = v75;
    }
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v58, v72, (uint64_t)v73, v73 - (unsigned char *)v72);
    char v84 = 0;
    long long v33 = (char *)operator new(0xE8uLL);
    std::string v34 = v33;
    *(void *)long long v33 = &unk_1F20BE7D8;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    *(_OWORD *)(v33 + 24) = *(_OWORD *)&__p[16];
    *((void *)v33 + 5) = *(void *)&__p[32];
    memset(&__p[16], 0, 24);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v33 + 2, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      *((std::string *)v33 + 2) = v48;
    }
    *((std::string *)v34 + 3) = v49;
    memset(&v49, 0, sizeof(v49));
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v34 + 4, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    }
    else {
      *((std::string *)v34 + 4) = v50;
    }
    v34[120] = v51;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)(v34 + 128), v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)(v34 + 128) = v52;
    }
    xpc_object_t v35 = v53;
    *((void *)v34 + 19) = v53;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      *((void *)v34 + 19) = xpc_null_create();
    }
    *((void *)v34 + 20) = 0;
    *((void *)v34 + 2ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = 0;
    *((void *)v34 + 22) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v34 + 20, v54, v55, v55 - (void)v54);
    *((void *)v34 + 26) = 0;
    *(std::string *)(v34 + 184) = v57;
    memset(&v57, 0, sizeof(v57));
    uint64_t v36 = v58;
    uint64_t v37 = v59;
    size_t v38 = v59 - (void)v58;
    *((void *)v34 + 27) = 0;
    *((void *)v34 + 28) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v34 + 26, v36, v37, v38);
    char v84 = v34;
    IMSClientManager::callOnMainQueue((IMSClientManager *)&v83);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v83);
    std::__shared_weak_count::__release_weak(v31);
    goto LABEL_130;
  }
  uint64_t v21 = v2[5];
  xpc_object_t v20 = v2 + 5;
  uint64_t v22 = (*(uint64_t (**)(void *))(v21 + 56))(v20);
  (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Can't send spam report message on ", 34);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, &v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" for trx ", 9);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, &v81);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  *(void *)std::string __p = 0;
  *(void *)&__p[8] = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&v70.__r_.__value_.__l.__data_, __p);
  if (*(void *)__p)
  {
    uint64_t v23 = (*(uint64_t (**)(void *))(*v20 + 56))(v20);
    (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Returning failure status.", 25);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    xpc_object_t v69 = 0;
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v25 = v24;
    if (v24)
    {
      xpc_object_t v69 = v24;
    }
    else
    {
      xpc_object_t v25 = xpc_null_create();
      xpc_object_t v69 = v25;
      if (!v25)
      {
        xpc_object_t v39 = xpc_null_create();
        xpc_object_t v25 = 0;
        goto LABEL_106;
      }
    }
    if (MEMORY[0x1C878F160](v25) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v25);
LABEL_107:
      xpc_release(v25);
      xpc_object_t v67 = xpc_BOOL_create(0);
      if (!v67) {
        xpc_object_t v67 = xpc_null_create();
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v83, &v67, &v68);
      xpc_release(v68);
      xpc_object_t v68 = 0;
      xpc_release(v67);
      xpc_object_t v67 = 0;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v40 = &v82;
      }
      else {
        long long v40 = (std::string *)v82.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v65 = xpc_string_create((const char *)v40);
      if (!v65) {
        xpc_object_t v65 = xpc_null_create();
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v83, &v65, &v66);
      xpc_release(v66);
      xpc_object_t v66 = 0;
      xpc_release(v65);
      xpc_object_t v65 = 0;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v81;
      }
      else {
        uint64_t v41 = (std::string *)v81.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v63 = xpc_string_create((const char *)v41);
      if (!v63) {
        xpc_object_t v63 = xpc_null_create();
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v83, &v63, &v64);
      xpc_release(v64);
      xpc_object_t v64 = 0;
      xpc_release(v63);
      xpc_object_t v63 = 0;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v42 = &v71;
      }
      else {
        uint64_t v42 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v61 = xpc_string_create((const char *)v42);
      if (!v61) {
        xpc_object_t v61 = xpc_null_create();
      }
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      v83.__r_.__value_.__l.__size_ = (std::string::size_type)"kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v83, &v61, &v62);
      xpc_release(v62);
      xpc_object_t v62 = 0;
      xpc_release(v61);
      xpc_object_t v61 = 0;
      uint64_t v43 = *(void *)__p;
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
      if (v69) {
        xpc_retain(v69);
      }
      else {
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v43 + 120))(v43, &v83);
      xpc_release(v83.__r_.__value_.__l.__data_);
      v83.__r_.__value_.__r.__words[0] = 0;
      xpc_release(v69);
      goto LABEL_128;
    }
    xpc_object_t v39 = xpc_null_create();
LABEL_106:
    xpc_object_t v69 = v39;
    goto LABEL_107;
  }
LABEL_128:
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
LABEL_130:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (object)
  {
    long long v77 = object;
    operator delete(object);
  }
  xpc_release(v7);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
}

void sub_1C52E5B4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0,std::default_delete<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    MEMORY[0x1C878E320](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}::~(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  std::string::size_type v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F20BE7D8;
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F20BE7D8;
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xE8uLL);
  *uint64_t v2 = &unk_1F20BE7D8;
  return v2;
}

void sub_1C52E62A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE7D8;
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::string::size_type v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    uint64_t v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&v30);
      uint64_t v5 = v30[26];
      int v6 = *(unsigned __int8 *)(a1 + 120);
      if (*(char *)(a1 + 151) < 0) {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
      }
      else {
        std::string v33 = *(std::string *)(a1 + 128);
      }
      IMSSMSManager::reportLazuliSpam(v5, a1 + 72, a1 + 24, (std::string *)(a1 + 96), v6 != 0, &v33, a1 + 48, (void **)(a1 + 152), (char **)(a1 + 160), a1 + 184, (char **)(a1 + 208));
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
LABEL_49:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  memset(&v33, 0, sizeof(v33));
  std::string::basic_string[abi:ne180100]<0>(&v33, "ChatServices instance is gone");
  xpc_object_t v7 = std::string::basic_string[abi:ne180100]<0>(&v30, "laz.cht.svc");
  uint64_t v8 = (unsigned char *)ims::error((uint64_t)v7, a1 + 72);
  (*(void (**)(unsigned char *, std::string *))(*(void *)v8 + 32))(v8, &v33);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v8[17] = 0;
  if (v32 < 0) {
    operator delete(v30);
  }
  uint64_t v30 = 0;
  char v31 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 72), &v30);
  if (v30)
  {
    xpc_object_t v29 = 0;
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v10 = v9;
    if (v9)
    {
      xpc_object_t v29 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v29 = v10;
      if (!v10)
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t v10 = 0;
        goto LABEL_22;
      }
    }
    if (MEMORY[0x1C878F160](v10) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v10);
LABEL_23:
      xpc_release(v10);
      xpc_object_t v27 = xpc_BOOL_create(0);
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_object_t v25 = &v29;
      xpc_object_t v26 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v25, &v27, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      if (*(char *)(a1 + 71) >= 0) {
        xpc_object_t v12 = (const char *)(a1 + 48);
      }
      else {
        xpc_object_t v12 = *(const char **)(a1 + 48);
      }
      xpc_object_t v23 = xpc_string_create(v12);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_object_t v25 = &v29;
      xpc_object_t v26 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v25, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v23 = 0;
      uint64_t v15 = *(const char **)(a1 + 24);
      uint64_t v14 = a1 + 24;
      xpc_object_t v13 = v15;
      if (*(char *)(v14 + 23) >= 0) {
        std::string::size_type v16 = (const char *)v14;
      }
      else {
        std::string::size_type v16 = v13;
      }
      xpc_object_t v21 = xpc_string_create(v16);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_object_t v25 = &v29;
      xpc_object_t v26 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v25, &v21, &v22);
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v17 = &v33;
      }
      else {
        std::string v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v19 = xpc_string_create((const char *)v17);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_object_t v25 = &v29;
      xpc_object_t v26 = "kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v25, &v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v19);
      xpc_object_t v19 = 0;
      uint64_t v18 = v30;
      xpc_object_t v25 = v29;
      if (v29) {
        xpc_retain(v29);
      }
      else {
        xpc_object_t v25 = xpc_null_create();
      }
      (*(void (**)(void *, xpc_object_t *))(*v18 + 120))(v18, &v25);
      xpc_release(v25);
      xpc_object_t v25 = 0;
      xpc_release(v29);
      goto LABEL_44;
    }
    xpc_object_t v11 = xpc_null_create();
LABEL_22:
    xpc_object_t v29 = v11;
    goto LABEL_23;
  }
LABEL_44:
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v4) {
    goto LABEL_49;
  }
}

void sub_1C52E6740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_object_t v22 = *(std::__shared_weak_count **)(v20 - 80);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v8;
  }
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 120), *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v9;
  }
  xpc_object_t v10 = *(void **)(a2 + 144);
  *(void *)(a1 + 144) = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)(a1 + 144) = xpc_null_create();
  }
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), *(void *)(a2 + 160) - *(void *)(a2 + 152));
  if (*(char *)(a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 176), *(const std::string::value_type **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), *(void *)(a2 + 208) - *(void *)(a2 + 200));
  return a1;
}

void sub_1C52E6A70(_Unwind_Exception *a1)
{
  long long v9 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 160) = v9;
    operator delete(v9);
  }
  xpc_release(*(xpc_object_t *)(v1 + 144));
  *(void *)(v1 + 144) = 0;
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  xpc_object_t v10 = *(std::__shared_weak_count **)(v1 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::ChatServices>::execute_wrapped<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>(anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0,std::default_delete<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  std::string::size_type v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(void **)v1;
  memset(&v23, 0, sizeof(v23));
  uint64_t v3 = v2[18];
  if (*(char *)(v3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v3 + 24), *(void *)(v3 + 32));
  }
  else {
    std::string v23 = *(std::string *)(v3 + 24);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[2];
  if (!v4 || (long long v5 = (void *)v2[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  memset(&v22, 0, sizeof(v22));
  ImsUuid::generate((ImsUuid *)&v18);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    uint64_t v18 = &unk_1F20B3708;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    std::string v22 = *(std::string *)__p;
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "laz.cht");
  uint64_t v8 = ims::debug((uint64_t)&v18, (uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"get capabilities transaction id ", 32);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v22);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if ((__p[15] & 0x80000000) != 0) {
    operator delete(v18);
  }
  uint64_t v18 = v5;
  *(void *)std::string __p = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&__p[8], v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&__p[8] = v22;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = v23;
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(v1 + 8);
    v21.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  }
  xpc_object_t v25 = 0;
  xpc_object_t v10 = (char *)operator new(0x60uLL);
  long long v11 = v10;
  xpc_object_t v13 = v18;
  uint64_t v12 = *(void *)__p;
  *(void *)xpc_object_t v10 = &unk_1F20BE858;
  *((void *)v10 + ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = v13;
  *((void *)v10 + 2) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v10 + 24) = *(_OWORD *)&__p[8];
  *((void *)v10 + 5) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  *((std::string *)v10 + 2) = v20;
  memset(&v20, 0, sizeof(v20));
  uint64_t v14 = (std::string *)(v10 + 72);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
    *((void *)v11 + 1ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((void *)this + 1) = *((void *)&v21.__r_.__value_.__l + 2);
  }
  xpc_object_t v25 = v11;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v24);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (*(void *)__p) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)__p);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1C52E6F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, std::__shared_weak_count *a13, void *a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v41 + 71) < 0) {
    operator delete(*v43);
  }
  if (*(char *)(v41 + 47) < 0) {
    operator delete(*v42);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v41 + 16);
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  operator delete((void *)v41);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a14);
  }
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::__shared_weak_count::__release_weak(v40);
  if (*(char *)(v44 - 89) < 0) {
    operator delete(*(void **)(v44 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0,std::default_delete<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x1C878E320](v2, 0x1032C402793DAF4);
  }
  return a1;
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE858;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20BE858;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = &unk_1F20BE858;
  return v2;
}

void sub_1C52E721C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20BE858;
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    uint64_t v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(void *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::getCapabilities(*((void *)__p + 26), (void **)(a1 + 48), a1 + 24, a1 + 72);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
LABEL_32:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  uint64_t v5 = ims::error((uint64_t)&__p, a1 + 48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ChatServices instance gone for ", 31);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a1 + 24);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  xpc_object_t v19 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 48), &__p);
  if (__p)
  {
    xpc_object_t v17 = 0;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v7 = v6;
    if (v6)
    {
      xpc_object_t v17 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v17 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v7);
LABEL_18:
      xpc_release(v7);
      xpc_object_t v15 = xpc_BOOL_create(0);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v13 = &v17;
      uint64_t v14 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v13, &v15, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v15);
      xpc_object_t v15 = 0;
      if (*(char *)(a1 + 47) >= 0) {
        long long v9 = (const char *)(a1 + 24);
      }
      else {
        long long v9 = *(const char **)(a1 + 24);
      }
      xpc_object_t v11 = xpc_string_create(v9);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_object_t v13 = &v17;
      uint64_t v14 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v13, &v11, &v12);
      xpc_release(v12);
      xpc_object_t v12 = 0;
      xpc_release(v11);
      xpc_object_t v11 = 0;
      xpc_object_t v10 = __p;
      xpc_object_t v13 = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      (*(void (**)(void *, xpc_object_t *))(*(void *)v10 + 96))(v10, &v13);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      xpc_release(v17);
      goto LABEL_29;
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_17:
    xpc_object_t v17 = v8;
    goto LABEL_18;
  }
LABEL_29:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v4) {
    goto LABEL_32;
  }
}

void sub_1C52E759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  xpc_object_t v7 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C52E776C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void SipReferredByHeader::~SipReferredByHeader(SipReferredByHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipReferredByHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipReferredByHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipReferredByHeader::clone(SipReferredByHeader *this)
{
}

void sub_1C52E79D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipRouteSetHeader::SipRouteSetHeader(SipRouteSetHeader *this, const SipRouteSetHeader *a2)
{
  SipHeader::SipHeader(this, a2);
  *uint64_t v3 = &unk_1F20BE9C0;
  SipRouteSet::SipRouteSet((SipRouteSet *)(v3 + 8), (const SipRouteSetHeader *)((char *)a2 + 64));
}

void sub_1C52E7A4C(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipRouteSetHeader::encodeValue(SipRouteSetHeader *this, ImsOutStream *a2)
{
  return 1;
}

BOOL SipRouteSetHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v4 = (void *)(a1 + 64);
  BOOL v5 = SipRouteSet::fromString((SipRouteSet *)(a1 + 64), a2);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Invalid URIs in ", 16);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" header: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    SipRouteSet::clear(v4);
  }
  return v5;
}

void sub_1C52E7BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRouteSetHeader::mergeHeader(SipRouteSetHeader *this, const SipHeader *lpsrc)
{
  if (v3) {
    SipRouteSet::addHops((SipRouteSetHeader *)((char *)this + 64), (const SipRouteSet *)(v3 + 64), 0, 0, 0);
  }
  return v3 != 0;
}

std::string::size_type SipRouteSetHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return -1;
  }
  std::string::size_type v4 = 0;
  while (1)
  {
    std::string::size_type v5 = std::string::find(this, 60, v4);
    if (v5 == -1) {
      break;
    }
    std::string::size_type v6 = std::string::find(this, 62, v5);
    if (v6 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v9 = ims::error((uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No matching close bracket in route set header: ", 47);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, this);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      return -1;
    }
    std::string::size_type v4 = v6 + 1;
    std::string::size_type v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v7 & 0x80u) != 0) {
      std::string::size_type v7 = this->__r_.__value_.__l.__size_;
    }
    if (v4 >= v7) {
      return -1;
    }
  }
  return std::string::find(this, 59, v4);
}

void sub_1C52E7E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LoggableString::~LoggableString(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t SipTransportInterface::SipTransportInterface(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 4SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 8)) = a2[2];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.tport");
  ImsLogContainer::ImsLogContainer(a1 + 80, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v7 - 4SipDialogManager::~SipDialogManager((SipDialogManager *)((char *)this - 8)) = a2[3];
  *(void *)(a1 + 80) = &unk_1F20BEE90;
  return a1;
}

void sub_1C52E807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  SipLockable::~SipLockable(v15, v16);
  _Unwind_Resume(a1);
}

void SipTcpConnection::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  char v4 = a3;
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<SipTcpConnection,std::allocator<SipTcpConnection>,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,void>((uint64_t)&v5, a1, a2, &v4);
}

void sub_1C52E8154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  char v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::~SipTcpConnection(int8x8_t *this)
{
  *this = (int8x8_t)&unk_1F20BEA80;
  uint64_t v2 = this + 10;
  this[10] = (int8x8_t)&unk_1F20BEB58;
  this[23] = (int8x8_t)&unk_1F20BEBB8;
  this[24] = (int8x8_t)&unk_1F20BEC08;
  uint64_t v3 = ImsLogContainer::debugStream((ImsLogContainer *)&this[10]);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipTcpConnection dtor", 21);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)&this[46]);
  if (this[43])
  {
    uint64_t v4 = (*(uint64_t (**)(int8x8_t *))(*(void *)v2 + 64))(v2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"deleting with ", 14);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" users still attached", 21);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    SipTcpConnection::removeAllTransactions((SipTcpConnection *)this, 0);
  }
  SipTcpConnection::clearTransportLock(this);
  char v5 = (SipMessageDecoder *)this[39];
  if (v5)
  {
    SipMessageDecoder::~SipMessageDecoder(v5);
    MEMORY[0x1C878E320]();
  }
  this[39] = 0;
  int8x8_t v6 = this[35];
  if (!*(void *)&v6)
  {
    uint64_t v8 = (*(uint64_t (**)(int8x8_t *))(*(void *)v2 + 64))(v2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"_sock is already null", 21);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(int8x8_t))(**(void **)&v6 + 56))(v6))
  {
    uint64_t v7 = (*(uint64_t (**)(int8x8_t *))(*(void *)v2 + 64))(v2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"closing connection", 18);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(**(void **)&this[35] + 72))(*(void *)&this[35]);
    goto LABEL_15;
  }
  uint64_t v9 = (std::__shared_weak_count *)this[38];
  if (v9) {
    xpc_object_t v10 = std::__shared_weak_count::lock(v9);
  }
  else {
    xpc_object_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64);
  if (this[64].i8[2])
  {
    uint64_t v12 = v11(v2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"resetting connection", 20);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(void))(**(void **)&this[35] + 80))(*(void *)&this[35]);
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v18 = v11(v2);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"NOT resetting connection", 24);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v10) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_15:
  char v13 = (std::__shared_weak_count *)this[70];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)&this[46]);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)&this[40]);
  uint64_t v14 = (std::__shared_weak_count *)this[38];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_object_t v15 = (std::__shared_weak_count *)this[36];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&this[29]);
  std::string::size_type v16 = (std::__shared_weak_count *)this[28];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  xpc_object_t v17 = (std::__shared_weak_count *)this[26];
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  SipTransportInterface::~SipTransportInterface((SipTransportInterface *)this, (uint64_t)&off_1F20BEC28);
}

{
  uint64_t vars8;

  SipTcpConnection::~SipTcpConnection(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTcpConnection::removeAllTransactions(SipTcpConnection *this, const ImsResult *a2)
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  LODWORD(v26) = *((_DWORD *)this + 88);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>((uint64_t)&v24, *((void *)this + 41));
  for (uint64_t i = (void *)*((void *)this + 42); i; uint64_t i = (void *)*i)
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>((uint64_t)&v24, i[2], i[2]);
  if (*((void *)this + 43))
  {
    char v5 = (void *)*((void *)this + 42);
    if (v5)
    {
      do
      {
        int8x8_t v6 = (void *)*v5;
        operator delete(v5);
        char v5 = v6;
      }
      while (v6);
    }
    *((void *)this + 42) = 0;
    uint64_t v7 = *((void *)this + 41);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*((void *)this + 40) + 8 * j) = 0;
    }
    *((void *)this + 43) = 0;
  }
  uint64_t v9 = (void *)v25;
  if ((void)v25)
  {
    xpc_object_t v10 = (char *)this + 80;
    while (1)
    {
      uint64_t v11 = v9[2];
      if (v11) {
        break;
      }
LABEL_35:
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_36;
      }
    }
    uint64_t v22 = 0;
    std::string v23 = 0;
    (*(void (**)(uint64_t *__return_ptr, SipTcpConnection *))(*(void *)this + 112))(&v22, this);
    if (!v22) {
      goto LABEL_22;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 176))(v22))
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 280))(v22)) {
        goto LABEL_20;
      }
      uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 80, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"group doesn't accept transactions", 33);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 80, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"group isn't initialized", 23);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v12 + 17) = 0;
    char v13 = v23;
    uint64_t v22 = 0;
    std::string v23 = 0;
    if (!v13) {
      goto LABEL_22;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_20:
    if (v22)
    {
      uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 80, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"switching user ", 15);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v11 + 16))(__p, v11);
      (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" to transport ", 14);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 104))(v22, v14);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_23:
      *(unsigned char *)(v14 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v18 = 0;
      xpc_object_t v19 = 0;
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v11 + 48))(v11, &v18, 0);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v16 = v22;
      xpc_object_t v17 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 48))(v11, &v16, 1);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (a2) {
        (*(void (**)(uint64_t, const ImsResult *))(*(void *)v11 + 24))(v11, a2);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      goto LABEL_35;
    }
LABEL_22:
    uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 80, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"removing myself from ", 21);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v11 + 16))(__p, v11);
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_23;
  }
LABEL_36:
  SipTcpConnection::clearTransportLock((int8x8_t *)this);
  return std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)&v24);
}

void sub_1C52E8DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
}

void SipTcpConnection::clearTransportLock(int8x8_t *this)
{
  SipTcpConnection::stopCrlfKeepAlive(this);
  uint64_t v2 = (std::__shared_weak_count *)this[28];
  this[27] = 0;
  this[28] = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void non-virtual thunk to'SipTcpConnection::~SipTcpConnection(int8x8_t *this)
{
}

{
  SipTcpConnection::~SipTcpConnection(this - 23);
}

{
  SipTcpConnection::~SipTcpConnection(this - 24);
}

{
  uint64_t vars8;

  SipTcpConnection::~SipTcpConnection(this - 10);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTcpConnection::~SipTcpConnection(this - 23);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTcpConnection::~SipTcpConnection(this - 24);
  JUMPOUT(0x1C878E320);
}

void SipTcpConnection::loggableName(SipTcpConnection *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C52E90A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

BOOL SipTcpConnection::addUser(SipTcpConnection *this, SipConnectionUser *a2)
{
  int v3 = *((unsigned __int8 *)this + 512);
  if (*((unsigned char *)this + 512))
  {
    uint64_t v4 = (char *)this + 80;
    uint64_t v5 = (*(uint64_t (**)(char *, SipConnectionUser *))(*((void *)this + 10) + 64))((char *)this + 80, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Don't add user to a connection that is shutting down.", 53);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  else
  {
    SipTimerContainer::cancelAllTimers((SipTcpConnection *)((char *)this + 368));
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>((uint64_t)this + 320, (unint64_t)a2, (uint64_t)a2);
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"now used by ", 12);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" transactions", 13);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (!*((void *)this + 27))
    {
      (*(void (**)(long long *__return_ptr, SipTcpConnection *))(*(void *)this + 112))(&v11, this);
      long long v8 = v11;
      long long v11 = 0uLL;
      uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 28);
      *(_OWORD *)((char *)this + 216) = v8;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        if (*((void *)&v11 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
        }
      }
    }
  }
  return v3 == 0;
}

void SipTcpConnection::removeUser(int8x8_t *this, unint64_t a2)
{
  int8x8_t v3 = this[41];
  if (!*(void *)&v3) {
    goto LABEL_47;
  }
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v3) {
      unint64_t v8 = v6 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v3 - 1) & v6;
  }
  int8x8_t v9 = this[40];
  xpc_object_t v10 = *(void ***)(*(void *)&v9 + 8 * v8);
  if (!v10) {
    goto LABEL_47;
  }
  long long v11 = (int8x8_t *)*v10;
  if (!*v10) {
    goto LABEL_47;
  }
  uint64_t v12 = *(void *)&v3 - 1;
  while (1)
  {
    unint64_t v13 = (unint64_t)v11[1];
    if (v13 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v3) {
        v13 %= *(void *)&v3;
      }
    }
    else
    {
      v13 &= v12;
    }
    if (v13 != v8) {
      goto LABEL_47;
    }
LABEL_17:
    long long v11 = (int8x8_t *)*v11;
    if (!v11) {
      goto LABEL_47;
    }
  }
  if (*(void *)&v11[2] != a2) {
    goto LABEL_17;
  }
  uint64_t v14 = (int8x8_t *)*v11;
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v3) {
      v6 %= *(void *)&v3;
    }
  }
  else
  {
    v6 &= v12;
  }
  xpc_object_t v15 = *(int8x8_t **)(*(void *)&v9 + 8 * v6);
  do
  {
    uint64_t v16 = v15;
    xpc_object_t v15 = (int8x8_t *)*v15;
  }
  while (v15 != v11);
  if (v16 == &this[42]) {
    goto LABEL_36;
  }
  int8x8_t v17 = v16[1];
  if (v7.u32[0] > 1uLL)
  {
    if (*(void *)&v17 >= *(void *)&v3) {
      *(void *)&v17 %= *(void *)&v3;
    }
  }
  else
  {
    *(void *)&v17 &= v12;
  }
  if (*(void *)&v17 == v6)
  {
LABEL_38:
    if (v14)
    {
      unint64_t v18 = (unint64_t)v14[1];
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v14) {
      goto LABEL_37;
    }
    unint64_t v18 = (unint64_t)v14[1];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v19 = (unint64_t)v14[1];
      if (v18 >= *(void *)&v3) {
        unint64_t v19 = v18 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v19 = v18 & v12;
    }
    if (v19 != v6)
    {
LABEL_37:
      *(void *)(*(void *)&v9 + 8 * v6) = 0;
      uint64_t v14 = (int8x8_t *)*v11;
      goto LABEL_38;
    }
LABEL_40:
    if (v7.u32[0] > 1uLL)
    {
      if (v18 >= *(void *)&v3) {
        v18 %= *(void *)&v3;
      }
    }
    else
    {
      v18 &= v12;
    }
    if (v18 != v6)
    {
      *(void *)(*(void *)&this[40] + 8 * v18) = v16;
      uint64_t v14 = (int8x8_t *)*v11;
    }
  }
  *uint64_t v16 = (int8x8_t)v14;
  int8x8_t *v11 = 0;
  --*(void *)&this[43];
  operator delete(v11);
LABEL_47:
  uint64_t v20 = (*(uint64_t (**)(int8x8_t *, unint64_t))(*(void *)&this[10] + 64))(this + 10, a2);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"being used by ", 14);
  *(unsigned char *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" transactions", 13);
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  SipTcpConnection::scheduleCrlfKeepAlive(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "sipTransactionsComplete");
  SipTcpConnection::isLazuliConnection((SipTcpConnection *)this);
  SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)this, v21, (uint64_t)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (!*(void *)&this[43])
  {
    LoggableString::LoggableString((LoggableString *)__p, "setIdleTimeout");
    uint64_t v22 = (std::__shared_weak_count *)this[26];
    if (!v22 || (uint64_t v23 = (uint64_t)this[25], (v24 = std::__shared_weak_count::lock(v22)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v26 = v23;
    xpc_object_t v27 = v24;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    _OWORD v25[2] = ___ZN16SipTcpConnection10removeUserEP17SipConnectionUser_block_invoke;
    void v25[3] = &__block_descriptor_tmp_4;
    void v25[4] = this;
    SipLockable::performBlock((uint64_t)this, (uint64_t)__p, &v26, (uint64_t)v25);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C52E96E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::scheduleCrlfKeepAlive(int8x8_t *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)this)) {
    return;
  }
  int v2 = SipTcpConnection::isOnWiFi((SipTcpConnection *)this);
  int8x8_t v3 = this + 69;
  int8x8_t v4 = this[69];
  if (v2)
  {
    if (v4) {
      goto LABEL_10;
    }
    uint64_t v5 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Creating WoW assertion", 22);
    *(unsigned char *)(v5 + 17) = 0;
    unint64_t v6 = (WakeOnWifiAssertion *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    WakeOnWifiAssertion::get(v6, (char **)&v18);
    long long v7 = v18;
    long long v18 = 0uLL;
    unint64_t v8 = (std::__shared_weak_count *)this[70];
    *(_OWORD *)v3->i8 = v7;
    if (!v8) {
      goto LABEL_10;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    int8x8_t v9 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (!*((void *)&v18 + 1)) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*(void *)&v4) {
      goto LABEL_10;
    }
    uint64_t v10 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Releasing WoW assertion", 23);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    int8x8_t v9 = (std::__shared_weak_count *)this[70];
    *int8x8_t v3 = 0;
    this[70] = 0;
    if (!v9) {
      goto LABEL_10;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_10:
  {
  }
  {
  }
  time_t v11 = time(0);
  unsigned __int32 v12 = this[66].u32[1];
  uint64_t v13 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"next keepalive event ", 21);
  *(unsigned char *)(v13 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(v11 + v12), v13, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  int8x8_t v16 = this[25];
  xpc_object_t v15 = (std::__shared_weak_count *)this[26];
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    this[67] = (int8x8_t)v11;
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    this[67] = (int8x8_t)v11;
  }
  uint64_t v20 = 0;
  int8x8_t v17 = operator new(0x20uLL);
  *int8x8_t v17 = &unk_1F20BEFC0;
  v17[1] = this;
  void v17[2] = v16;
  _OWORD v17[3] = v15;
  uint64_t v20 = v17;
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v19);
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_1C52E9AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::reportRescheduleEvent(SipTcpConnection *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = SipTcpConnection::crlfKeepAliveAllowed(a1);
  if (result)
  {
    uint64_t v7 = *((void *)a1 + 10);
    unint64_t v6 = (void *)((char *)a1 + 80);
    uint64_t v8 = (*(uint64_t (**)(void *))(v7 + 64))(v6);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"KeepaliveRescheduled due to ", 28);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
  return result;
}

uint64_t SipTcpConnection::isLazuliConnection(SipTcpConnection *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  SipTcpConnection::stack(this, &v4);
  uint64_t v2 = v4;
  if (v4) {
    BOOL v1 = *(unsigned char *)(v4 + 2681) != 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return (v2 != 0) & v1;
}

void ___ZN16SipTcpConnection10removeUserEP17SipConnectionUser_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL v1 = *(int8x8_t **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[38];
  if (v2)
  {
    int8x8_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = v1[37];
      if (!*(void *)&v5 || *(void *)&v1[43]) {
        goto LABEL_5;
      }
      if (!v1[64].i8[1])
      {
        SipTcpConnection::clearTransportLock(v1);
        goto LABEL_5;
      }
      if (v1[65].i8[4])
      {
        uint64_t v6 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v1[10] + 64))(v1 + 10);
        (*(void (**)(int8x8_t *, uint64_t))(*(void *)&v1[10] + 16))(v1 + 10, v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"A transaction timed out when using this connection.  closing connection.", 72);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        SipTcpConnection::closeIfUnused((SipTcpConnection *)v1);
LABEL_5:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      (*(void (**)(uint64_t *__return_ptr))(**(void **)&v5 + 32))(&v17);
      if (v18)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v18);
        if (v7) {
          uint64_t v8 = v17;
        }
        else {
          uint64_t v8 = 0;
        }
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        if (v8)
        {
          int v9 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) + 488);
          if (v9 == -1)
          {
            int8x8_t v11 = v1[10];
            uint64_t v10 = v1 + 10;
            uint64_t v12 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v11 + 64))(v10);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)v10 + 16))(v10, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Infinite idle timeout. Never close idle sockets.", 48);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
LABEL_30:
            if (v7) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v7);
            }
            goto LABEL_5;
          }
        }
        else
        {
          int v9 = 0;
        }
      }
      else
      {
        int v9 = 0;
        uint64_t v7 = 0;
      }
      int8x8_t v14 = v1[25];
      uint64_t v13 = (std::__shared_weak_count *)v1[26];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (v9)
        {
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_26:
          unint64_t v19 = 0;
          xpc_object_t v15 = operator new(0x20uLL);
          *xpc_object_t v15 = &unk_1F20BEF40;
          v15[1] = v1;
          void v15[2] = v14;
          void v15[3] = v13;
          unint64_t v19 = v15;
          SipTimerContainer::startTimer(v1 + 46, (uint64_t)"IdleTimeout");
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&v17);
          goto LABEL_28;
        }
      }
      else if (v9)
      {
        goto LABEL_26;
      }
      uint64_t v16 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v1[10] + 64))(v1 + 10);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)&v1[10] + 16))(v1 + 10, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"no idle timout set.  closing connection.", 40);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      SipTcpConnection::closeIfUnused((SipTcpConnection *)v1);
LABEL_28:
      if (v13)
      {
        std::__shared_weak_count::__release_weak(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_30;
    }
  }
}

void sub_1C52EA0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::transactionTimedOut(SipTcpConnection *this)
{
  BOOL v1 = (char *)this + 80;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Transaction timed out when using this connection.", 49);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  v1[444] = 1;
  return result;
}

void SipTcpConnection::closeIfUnused(SipTcpConnection *this)
{
  if (!*((void *)this + 43))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v2 || (uint64_t v3 = *((void *)this + 25), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int8x8_t v5 = v4;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 38);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *((void *)this + 37);
        if (v8)
        {
          uint64_t v13 = v3;
          int8x8_t v14 = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 64))(v8, &v13);
          if (v14)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            if (v9)
            {
LABEL_16:
              uint64_t v11 = v3;
              uint64_t v12 = v5;
              atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 56))(v8, &v11);
              if (v12) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v12);
              }
              goto LABEL_12;
            }
          }
          else if (v9)
          {
            goto LABEL_16;
          }
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    SipTcpConnection::shutdown(this, 1, (uint64_t)v10);
    ImsResult::~ImsResult((ImsResult *)v10);
    if (!v7)
    {
LABEL_13:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return;
    }
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_13;
  }
}

void sub_1C52EA340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

BOOL SipTcpConnection::crlfKeepAliveAllowed(SipTcpConnection *this)
{
  if (!*((_DWORD *)this + 133))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *((void *)this + 37);
        if (v5)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 32))(&v12);
          if (v13)
          {
            uint64_t v6 = std::__shared_weak_count::lock(v13);
            if (v6) {
              uint64_t v7 = v12;
            }
            else {
              uint64_t v7 = 0;
            }
            if (v13) {
              std::__shared_weak_count::__release_weak(v13);
            }
            if (v7)
            {
              uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 16);
              if (*((unsigned char *)this + 516)) {
                int v9 = (_DWORD *)(v8(v7) + 444);
              }
              else {
                int v9 = (_DWORD *)(v8(v7) + 448);
              }
              *((_DWORD *)this + 133) = *v9;
              unsigned int v10 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7) + 452);
              if (v10 > *((_DWORD *)this + 133)) {
                unsigned int v10 = 0;
              }
              *((_DWORD *)this + 132) = v10;
            }
            if (v6) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v6);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
    if (!*((_DWORD *)this + 133)) {
      return 0;
    }
  }
  if (SipTcpConnection::isLazuliConnection(this)) {
    return 1;
  }
  return *((unsigned char *)this + 516) != 0;
}

void sub_1C52EA4FC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::isOnWiFi(SipTcpConnection *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  SipTcpConnection::stack(this, &v4);
  uint64_t v2 = v4;
  if (v4) {
    isCampedOnWifuint64_t i = SipStack::isCampedOnWifi(v4);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return (v2 != 0) & isCampedOnWifi;
}

void sub_1C52EA584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::stopCrlfKeepAlive(int8x8_t *this)
{
  if (SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)this))
  {
    {
    }
    {
    }
    this[67] = 0;
    if (this[69])
    {
      uint64_t v2 = this + 69;
      int8x8_t v4 = this[10];
      uint64_t v3 = this + 10;
      uint64_t v5 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v4 + 64))(v3);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v3 + 16))(v3, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Releasing WoW assertion", 23);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      uint64_t v6 = (std::__shared_weak_count *)v3[60];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void SipTcpConnection::updateCrlfKeepAliveInterval(int8x8_t *this, __int32 a2, __int32 a3)
{
  if (this[66].i32[0] == a2 && this[66].i32[1] == a3)
  {
    uint64_t v6 = this + 10;
    uint64_t v7 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"CRLF-KeepAlive interval already at [", 36);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t v8 = *(void **)(v7 + 8);
    LOBYTE(__p[0]) = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    int v9 = *(void **)(v7 + 8);
    LOBYTE(__p[0]) = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  else
  {
    SipTcpConnection::stopCrlfKeepAlive(this);
    uint64_t v10 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Updating CRLF-KeepAlive interval to [", 37);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = *(void **)(v10 + 8);
    LOBYTE(__p[0]) = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v12 = *(void **)(v10 + 8);
    LOBYTE(__p[0]) = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__p, 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    this[66].i32[0] = a2;
    this[66].i32[1] = a3;
    this[68].i8[0] = 1;
    if (SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)this))
    {
      SipTcpConnection::scheduleCrlfKeepAlive(this);
      std::string::basic_string[abi:ne180100]<0>(__p, "update");
      SipTcpConnection::isLazuliConnection((SipTcpConnection *)this);
      SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)this, v13, (uint64_t)__p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C52EA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::updateCrlfKeepAliveNetwork(int8x8_t *this)
{
  SipTcpConnection::stopCrlfKeepAlive(this);
  SipTcpConnection::scheduleCrlfKeepAlive(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "handover");
  SipTcpConnection::isLazuliConnection((SipTcpConnection *)this);
  SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)this, v2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C52EAA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double SipTcpConnection::shutdown@<D0>(SipTcpConnection *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 512))
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else if (*((unsigned char *)this + 513))
  {
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    (*(void (**)(long long *__return_ptr))(**((void **)this + 35) + 64))(&v33);
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Connection shutdown attempted. Result = ", 40);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v33 + 16))(&v33, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    xpc_object_t v27 = &unk_1F20B2680;
    long long v28 = (std::__shared_weak_count *)&_bambiDomain;
    int v29 = 1073741834;
    BOOL v8 = *((uint64_t **)&v33 + 1) != &_bambiDomain || v34 != 1073741834;
    *((unsigned char *)this + 512) = v8;
    ImsResult::~ImsResult((ImsResult *)&v27);
    int v9 = (std::__shared_weak_count *)*((void *)this + 38);
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        uint64_t v11 = *((void *)this + 37);
        if (v11)
        {
          (*(void (**)(void **__return_ptr))(*(void *)v11 + 32))(&v27);
          if (v28)
          {
            uint64_t v12 = std::__shared_weak_count::lock(v28);
            if (v12) {
              uint64_t v13 = v27;
            }
            else {
              uint64_t v13 = 0;
            }
            if (v28) {
              std::__shared_weak_count::__release_weak(v28);
            }
            if (v13 && *((unsigned char *)this + 512))
            {
              (*(void (**)(void *))(*(void *)v13 + 16))(v13);
              uint64_t v15 = *((void *)this + 25);
              int8x8_t v14 = (std::__shared_weak_count *)*((void *)this + 26);
              if (v14)
              {
                atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              xpc_object_t v39 = 0;
              uint64_t v16 = operator new(0x20uLL);
              *uint64_t v16 = &unk_1F20BF040;
              v16[1] = this;
              v16[2] = v15;
              void v16[3] = v14;
              xpc_object_t v39 = v16;
              SipTimerContainer::startTimer((int8x8_t *)this + 46, (uint64_t)"ShutdownWait");
              std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v38);
              uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 26);
              if (!v17 || (uint64_t v18 = *((void *)this + 25), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
                std::__throw_bad_weak_ptr[abi:ne180100]();
              }
              uint64_t v25 = v18;
              uint64_t v26 = v19;
              SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 232, &v25);
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
              if (v14)
              {
                std::__shared_weak_count::__release_weak(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
          }
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    int v24 = *((unsigned char *)this + 512) == 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = v24 << 30;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    ImsResult::~ImsResult((ImsResult *)&v33);
  }
  else
  {
    uint64_t v21 = (char *)this + 80;
    uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 80, v22);
    uint64_t v23 = *(void **)(v22 + 8);
    if (a2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"We don't shutdown incoming connection. Mark it for reset on delete", 66);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)this + 514) = 1;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"We don't shutdown incoming connection. And we don't reset on delete", 67);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v22 + 17) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741834;
  }
  return result;
}

void sub_1C52EAFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  ImsResult::~ImsResult((ImsResult *)&a21);
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipLockable>::set(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  char v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTypedTerminationLock<SipLockable>::set(a1, &v3, (std::string *)(a1 + 8));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C52EB0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTcpConnection::handleTimer(SipTcpConnection *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 26);
  if (!v3 || (uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 25), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v18, 0, sizeof(v18));
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTimer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v18, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(*((void *)a1 + 10) + 64))((void *)a1 + 10);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 10) + 16))((void *)a1 + 10, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipTcpConnection::handleTimer", 29);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = a2[23];
  size_t v9 = *((void *)a2 + 1);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = a2[23];
  }
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v10 != 16)
  {
    if (v10 != 12)
    {
      if (v10 != 11) {
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "IdleTimeout", v9)) {
          return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
        }
      }
      else if (a2[23])
      {
        uint64_t v11 = "IdleTimeout";
        while (*a2 == *(unsigned __int8 *)v11)
        {
          ++a2;
          ++v11;
          if (!--v8) {
            goto LABEL_32;
          }
        }
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
      }
LABEL_32:
      SipTcpConnection::closeIfUnused(a1);
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "ShutdownWait", v9)) {
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
      }
    }
    else if (a2[23])
    {
      uint64_t v13 = "ShutdownWait";
      while (*a2 == *(unsigned __int8 *)v13)
      {
        ++a2;
        ++v13;
        if (!--v8) {
          goto LABEL_36;
        }
      }
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
    }
LABEL_36:
    SipTcpConnection::resetSocket((int8x8_t *)a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
  }
  if ((v8 & 0x80) != 0)
  {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
LABEL_34:
    (*(void (**)(SipTcpConnection *))(*(void *)a1 + 192))(a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
  }
  if (!a2[23]) {
    goto LABEL_34;
  }
  while (*a2 == v12->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    uint64_t v12 = (std::string *)((char *)v12 + 1);
    if (!--v8) {
      goto LABEL_34;
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
}

void sub_1C52EB364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTcpConnection::resetSocket(int8x8_t *this)
{
  int8x8_t v2 = this[35];
  if (*(void *)&v2 && ((*(uint64_t (**)(int8x8_t))(**(void **)&v2 + 56))(v2) & 1) == 0) {
    (*(void (**)(void))(**(void **)&this[35] + 80))(*(void *)&this[35]);
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)&this[29], &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return SipTcpConnection::removeFromTransport(this);
}

void sub_1C52EB448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTcpConnection::removeFromTransport(int8x8_t *this)
{
  int8x8_t v2 = (std::__shared_weak_count *)this[26];
  if (!v2 || (uint64_t v3 = (std::__shared_weak_count *)this[25], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v22, 0, sizeof(v22));
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  LoggableString::LoggableString((LoggableString *)&__p, "removeFromTransport");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v22, &v20, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v5 = this + 10;
  uint64_t v6 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipTcpConnection::removeFromTransport", 37);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (std::__shared_weak_count *)this[26];
  if (!v7 || (int8x8_t v8 = this[25], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  uint64_t v11 = (std::__shared_weak_count *)this[38];
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      int8x8_t v13 = this[37];
      if (v13)
      {
        IPTelephonyManager::getInstance((uint64_t *)&__p);
        uint64_t v14 = *(void *)(__p.__r_.__value_.__r.__words[0] + 168);
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (v14)
        {
          if (this[64].i8[3])
          {
            (*(void (**)(std::string *__return_ptr, int8x8_t))(**(void **)&v13 + 80))(&__p, v13);
            BambiClient::releaseKeepAliveAssertion(v14, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)this))
          {
            (*(void (**)(std::string *__return_ptr, int8x8_t))(**(void **)&v13 + 80))(&__p, v13);
            BambiClient::removeAssertions(v14, (uint64_t)&__p, this[45].u32[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)&this[46]);
        int8x8_t v17 = v8;
        uint64_t v18 = v10;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(int8x8_t, int8x8_t *))(**(void **)&v13 + 56))(v13, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        goto LABEL_25;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)v5 + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v5 + 16))(this + 10, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"already removed from transport", 30);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v12) {
LABEL_25:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  SipTcpConnection::clearTransportLock(this);
  this[64].i8[3] = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v22);
}

void sub_1C52EB7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::decodeMessage(uint64_t a1, const std::string::value_type *a2)
{
  int8x8_t v2 = a2;
  std::string::pointer v23 = 0;
  unsigned __int8 v22 = 0;
  if ((SipMessageDecoder::decode(*(std::string **)(a1 + 312), a2, &v23, &v22) & 1) == 0)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"decode failure on TCP connection", 32);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    SipTcpConnection::removeFromTransport((int8x8_t *)a1);
    return 0;
  }
  if (!v23) {
    return 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 304);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 296);
      if (v6)
      {
        std::string::pointer v7 = v23;
        uint64_t v8 = *((void *)v2 + 1);
        if (v2[23] >= 0)
        {
          uint64_t v9 = *((unsigned __int8 *)v2 + 23);
        }
        else
        {
          int8x8_t v2 = *(const std::string::value_type **)v2;
          uint64_t v9 = v8;
        }
        int v10 = v22;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 280) + 104))(&v20);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 208);
        uint64_t v18 = *(void *)(a1 + 200);
        if (v11)
        {
          unint64_t v19 = std::__shared_weak_count::lock(v11);
          if (v19)
          {
            (*(void (**)(uint64_t, std::string::pointer, const std::string::value_type *, uint64_t, BOOL, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, v7, v2, v9, v10 != 0, &v20, &v18);
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            uint64_t v12 = 1;
LABEL_22:
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
            return v12;
          }
        }
        else
        {
          unint64_t v19 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v15 = a1 + 80;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 64))(v15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"I was detached from my transport. Dropping incoming message:", 60);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(std::string::pointer, uint64_t))(*(void *)v23 + 16))(v23, v17);
  if (v23) {
    (*(void (**)(std::string::pointer))(*(void *)v23 + 8))(v23);
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v5) {
    goto LABEL_22;
  }
  return result;
}

void sub_1C52EBBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::processDataFromSocket(int8x8_t *a1, void *a2, size_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[26];
  if (!v4 || (std::string::pointer v7 = (std::__shared_weak_count *)a1[25], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v41, 0, sizeof(v41));
  xpc_object_t v39 = v7;
  uint64_t v40 = v8;
  LoggableString::LoggableString((LoggableString *)&__p, "processDataFromSocket");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v41, &v39, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v9 = a1 + 10;
  uint64_t v10 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[10] + 64))(a1 + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[10] + 16))(a1 + 10, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SipTcpConnection::processDataFromSocket", 39);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100](&__p, a2, a3);
  long long v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (a1[64].i8[3])
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v32 = p_p;
    long long v33 = (std::__shared_weak_count *)size;
    if (std::string_view::starts_with[abi:ne180100](&v32, "\r\n", 2uLL))
    {
      uint64_t v13 = (*(uint64_t (**)(int8x8_t *))(*(void *)v9 + 64))(a1 + 10);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v9 + 16))(a1 + 10, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Received CRLF pong", 18);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      a1[64].i8[3] = 0;
      if (SHIBYTE(v37) < 0)
      {
        uint64_t v36 = 13;
        uint64_t v15 = v35;
        uint64_t v14 = (char *)v35 + 13;
      }
      else
      {
        uint64_t v14 = (char *)&v36 + 5;
        HIBYTE(v37) = 13;
        uint64_t v15 = &v35;
      }
      qmemcpy(v15, "pong received", 13);
      goto LABEL_21;
    }
    if (a1[64].i8[3])
    {
      uint64_t v16 = (*(uint64_t (**)(int8x8_t *))(*(void *)v9 + 56))(a1 + 10);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v9 + 16))(a1 + 10, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Received unexpected payload while waiting for pong; size ",
        57);
      *(unsigned char *)(v16 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      a1[64].i8[3] = 0;
    }
  }
  if (SHIBYTE(v37) < 0)
  {
    uint64_t v36 = 7;
    uint64_t v17 = v35;
    uint64_t v14 = (char *)v35 + 7;
  }
  else
  {
    uint64_t v14 = (char *)&v35 + 7;
    HIBYTE(v37) = 7;
    uint64_t v17 = &v35;
  }
  *(_DWORD *)((char *)v17 + 3) = 1635017028;
  *uint64_t v17 = 1143821389;
LABEL_21:
  unsigned char *v14 = 0;
  SipTcpConnection::scheduleCrlfKeepAlive(a1);
  SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1);
  SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)a1, v18, (uint64_t)&v35);
  unint64_t v19 = (std::__shared_weak_count *)a1[38];
  if (v19)
  {
    uint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      int8x8_t v22 = a1[37];
      if (v22)
      {
        IPTelephonyManager::getInstance((uint64_t *)&v32);
        uint64_t v23 = *((void *)v32 + 21);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if (v23)
        {
          (*(void (**)(void **__return_ptr, int8x8_t))(**(void **)&v22 + 80))(&v32, v22);
          BambiClient::releaseKeepAliveAssertion(v23, (uint64_t)&v32);
          if (v34 < 0) {
            operator delete(v32);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  int8x8_t v24 = a1[39];
  if (!*(void *)(*(void *)&v24 + 24))
  {
    if (*(char *)(*(void *)&v24 + 23) < 0)
    {
      if (*(void *)(*(void *)&v24 + 8)) {
        goto LABEL_31;
      }
    }
    else if (*(unsigned char *)(*(void *)&v24 + 23))
    {
      goto LABEL_31;
    }
    ims::chomp(&__p, "\r\n", 1);
  }
LABEL_31:
  uint64_t v25 = (std::__shared_weak_count *)a1[38];
  if (v25)
  {
    uint64_t v26 = std::__shared_weak_count::lock(v25);
    if (v26) {
      int8x8_t v27 = a1[37];
    }
    else {
      int8x8_t v27 = 0;
    }
  }
  else
  {
    int8x8_t v27 = 0;
    uint64_t v26 = 0;
  }
  std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  if (v28)
  {
    int v29 = SipTcpConnection::decodeMessage((uint64_t)a1, (const std::string::value_type *)&__p);
    int v30 = *(void *)&v27 ? v29 : 0;
    if (v30 == 1)
    {
      while ((SipTcpConnection::decodeMessage((uint64_t)a1, (const std::string::value_type *)&ims::kEmptyString) & 1) != 0)
        ;
    }
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v41);
}

void sub_1C52EC16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipTcpConnection::processDataFromSocket(uint64_t a1, void *a2, size_t a3)
{
  return SipTcpConnection::processDataFromSocket((int8x8_t *)(a1 - 184), a2, a3);
}

uint64_t SipTcpConnection::handleSocketError(int8x8_t *this, const ImsResult *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)this[26];
  if (!v3 || (uint64_t v5 = (std::__shared_weak_count *)this[25], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v23, 0, sizeof(v23));
  uint64_t v21 = v5;
  int8x8_t v22 = v6;
  LoggableString::LoggableString((LoggableString *)&__p, "handleSocketError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v23, &v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::string::pointer v7 = this + 10;
  uint64_t v8 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"SipTcpConnection::handleSocketError", 35);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (this[64].i8[0])
  {
    uint64_t v9 = (*(uint64_t (**)(int8x8_t *))(*(void *)v7 + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v7 + 16))(this + 10, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Shutting down, ignore socket error: ", 36);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)&this[29], &v18);
    uint64_t v10 = v19;
    goto LABEL_18;
  }
  uint64_t v11 = (std::__shared_weak_count *)this[38];
  if (v11)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v11);
    if (v10)
    {
      int8x8_t v12 = this[37];
      if (v12)
      {
        uint64_t v13 = (std::__shared_weak_count *)this[26];
        int8x8_t v16 = this[25];
        if (v13)
        {
          uint64_t v17 = std::__shared_weak_count::lock(v13);
          if (v17)
          {
            (*(void (**)(int8x8_t, int8x8_t *, const ImsResult *))(**(void **)&v12 + 40))(v12, &v16, a2);
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_17:
  uint64_t v14 = (*(uint64_t (**)(int8x8_t *))(*(void *)v7 + 56))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v7 + 16))(this + 10, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"handling socket error: ", 23);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  SipTcpConnection::removeAllTransactions((SipTcpConnection *)this, a2);
  SipTcpConnection::removeFromTransport(this);
  SipTcpConnection::logPeerTermination((uint64_t)this, 1);
LABEL_18:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
}

void sub_1C52EC5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipTcpConnection::logPeerTermination(uint64_t a1, int a2)
{
  if (SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1)
    && SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)a1))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    SipTcpConnection::stack((SipTcpConnection *)a1, &v12);
    uint64_t v4 = v12;
    if (v12)
    {
      unint64_t v11 = 0;
      int v5 = *(_DWORD *)(a1 + 532);
      v9[0] = a2;
      v9[1] = v5;
      int v10 = 0;
      if (*(void *)(a1 + 536))
      {
        int v6 = time(0);
        unint64_t v11 = __PAIR64__(*(_DWORD *)(a1 + 532) + *(_DWORD *)(a1 + 536) - v6, v6 - *(_DWORD *)(a1 + 536));
      }
      LOBYTE(vSipTcpConnection::~SipTcpConnection(this - 10) = *(unsigned char *)(a1 + 544);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 136) + 104))(&v7);
      (*(void (**)(void, _DWORD *))(**(void **)(v7 + 120) + 224))(*(void *)(v7 + 120), v9);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
}

void sub_1C52EC788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipTcpConnection::handleSocketError(int8x8_t *this, const ImsResult *a2)
{
  return SipTcpConnection::handleSocketError(this - 23, a2);
}

uint64_t SipTcpConnection::handleConnectError(SipTcpConnection *this, const ImsResult *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v3
    || (int v5 = (std::__shared_weak_count *)*((void *)this + 25), (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v23, 0, sizeof(v23));
  uint64_t v21 = v5;
  int8x8_t v22 = v6;
  LoggableString::LoggableString((LoggableString *)&__p, "handleConnectError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v23, &v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v7 = (char *)this + 80;
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"SipTcpConnection::handleConnectError", 36);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (*((unsigned char *)this + 512))
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v7 + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 80, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Shutting down, ignore connect error: ", 37);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 232, &v18);
    int v10 = v19;
    goto LABEL_18;
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v11)
  {
    int v10 = std::__shared_weak_count::lock(v11);
    if (v10)
    {
      uint64_t v12 = *((void *)this + 37);
      if (v12)
      {
        uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
        uint64_t v16 = *((void *)this + 25);
        if (v13)
        {
          uint64_t v17 = std::__shared_weak_count::lock(v13);
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t *, const ImsResult *))(*(void *)v12 + 40))(v12, &v16, a2);
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
  }
  else
  {
    int v10 = 0;
  }
LABEL_17:
  uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v7 + 56))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 80, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"handling connect error: ", 24);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  SipTcpConnection::removeAllTransactions(this, a2);
LABEL_18:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
}

void sub_1C52ECB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipTcpConnection::handleConnectError(SipTcpConnection *this, const ImsResult *a2)
{
  return SipTcpConnection::handleConnectError((SipTcpConnection *)((char *)this - 184), a2);
}

uint64_t SipTcpConnection::handlePeerTermination(int8x8_t *this)
{
  int8x8_t v2 = (std::__shared_weak_count *)this[26];
  if (!v2 || (uint64_t v3 = (std::__shared_weak_count *)this[25], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v21, 0, sizeof(v21));
  unint64_t v19 = v3;
  uint64_t v20 = v4;
  LoggableString::LoggableString((LoggableString *)&__p, "handlePeerTermination");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v21, &v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  int v5 = this + 42;
  int v6 = this + 10;
  while (1)
  {
    int v5 = (int8x8_t *)*v5;
    if (!v5) {
      break;
    }
    int8x8_t v7 = v5[2];
    uint64_t v8 = (*(uint64_t (**)(int8x8_t *))(*(void *)v6 + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v6 + 16))(this + 10, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"report connection error to ", 27);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, int8x8_t))(**(void **)&v7 + 16))(&__p, v7);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(int8x8_t))(**(void **)&v7 + 32))(v7);
  }
  uint64_t v9 = (std::__shared_weak_count *)this[38];
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      int8x8_t v11 = this[37];
      if (v11)
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)&v11 + 32))(&__p);
        if (__p.__r_.__value_.__l.__size_)
        {
          uint64_t v12 = std::__shared_weak_count::lock((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          if (v12) {
            std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
          }
          else {
            std::string::size_type v13 = 0;
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if (!this[64].i8[0]
            && v13
            && *(unsigned char *)((*(uint64_t (**)(std::string::size_type))(*(void *)v13 + 16))(v13) + 573))
          {
            (*(void (**)(void))(**(void **)&this[35] + 80))(*(void *)&this[35]);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
    }
  }
  else
  {
    int v10 = 0;
  }
  SipTcpConnection::removeFromTransport(this);
  if (this[64].i8[0])
  {
    uint64_t v14 = (*(uint64_t (**)(int8x8_t *))(*(void *)v6 + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v6 + 16))(this + 10, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Connection closed by both sides. ", 33);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)&this[29], &v16);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v21);
}