void sub_1C55683AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransaction::terminationLocksReleased(SipTransaction *this)
{
}

uint64_t SipTransaction::retryEnabled(SipTransaction *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 10);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    v3 = 0;
  }
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*((void *)this + 22) + 16))((char *)this + 176, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" _retryEnabled: ", 16);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" transport->isReliable: ", 24);
  *(unsigned char *)(v5 + 17) = 0;
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 72))(v4)) {
      v6 = "true";
    }
    else {
      v6 = "false";
    }
  }
  else
  {
    v6 = "no transport";
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  int v8 = *((unsigned __int8 *)this + 368);
  int v9 = *((unsigned char *)this + 368) == 0;
  if (v4 && v8) {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v9 ^ 1u;
}

void sub_1C556861C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTransaction::transitionToState(SipTransaction *this, uint64_t a2)
{
  memset(v14, 0, sizeof(v14));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (void *)this + 35);
  if (v10) {
    uint64_t v4 = v10 + 4;
  }
  else {
    uint64_t v4 = 0;
  }
  v12 = v4;
  v13 = v11;
  v10 = 0;
  v11 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transitionToState");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v14, &v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*((void *)this + 22) + 16))((char *)this + 176, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"transitioning to state [", 24);
  *(unsigned char *)(v5 + 17) = 0;
  v6 = (const std::string *)(*(uint64_t (**)(SipTransaction *, uint64_t))(*(void *)this + 16))(this, a2);
  LoggableString::LoggableString(&__p, v6);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = SipTypedStateMachine<SipTransactionState>::transitionToState(this, a2);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v14);
  return v7;
}

void sub_1C5568838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t SipTypedStateMachine<SipTransactionState>::transitionToState(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[3];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    uint64_t v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v15 = a1[7];
            v14 = (std::__shared_weak_count *)a1[8];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v15)
            {
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, a2);
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v17 = i[3];
            uint64_t v18 = i[4];
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            v19 = (std::__shared_weak_count *)a1[8];
            a1[7] = v17;
            a1[8] = v18;
            if (v19)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              uint64_t v17 = a1[7];
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 56))(v17, v16);
            uint64_t v23 = v15;
            v24 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v20 = (std::__shared_weak_count *)a1[8];
            uint64_t v21 = a1[7];
            v22 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 56))(a1, &v23, &v21);
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    v12 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_1C5568C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTransaction::handleStateTransition(void *a1, uint64_t a2, uint64_t a3)
{
  memset(v18, 0, sizeof(v18));
  uint8x8_t v5 = a1 + 35;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, a1 + 35);
  if (v14) {
    unint64_t v6 = v14 + 4;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v16 = v6;
  uint64_t v17 = v15;
  v14 = 0;
  uint64_t v15 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transactionCompleted");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v18, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(a1[22] + 64))(a1 + 22);
  (*(void (**)(void *, uint64_t))(a1[22] + 16))(a1 + 22, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipTransaction::handleStateTransition", 37);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if ((*(unsigned int (**)(void))(**(void **)a3 + 48))() == 4)
  {
    uint64_t v8 = a1[44];
    if (v8)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, v5);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 40))(v8, &v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  else if ((*(unsigned int (**)(void))(**(void **)a3 + 48))() == 7)
  {
    uint64_t v9 = a1[70];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    a1[70] = 0;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
}

void sub_1C5568EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::abort(SipTransaction *this)
{
  v2 = (char *)this + 176;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"aborting transaction", 20);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  unint64_t v4 = *(uint64_t (**)(SipTransaction *, uint64_t))(*(void *)this + 32);
  return v4(this, 4);
}

char *SipTransaction::nameForStateId(SipTransaction *this, unsigned int a2)
{
  if (a2 <= 8) {
    return &stateNames[24 * a2];
  }
  else {
    return "Invalid";
  }
}

uint64_t SipTransaction::timerValue(uint64_t a1, const SipTimer *a2)
{
  uint64_t v4 = *(void *)(a1 + 320);
  uint8x8_t v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v4 + 16));
  if (*(void *)(*(void *)(v4 + 8) + 144))
  {
    uint64_t v6 = *(void *)(a1 + 320);
    uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
    uint64_t v8 = SipUserAgent::config(*(SipUserAgent **)(*(void *)(v6 + 8) + 144));
    uint64_t v9 = SipTimers::timerValue((SipTimers *)(v8 + 512), a2, 0);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v9;
}

void sub_1C55690D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::handleError(SipTransaction *this, const ImsResult *a2)
{
  memset(v21, 0, sizeof(v21));
  uint64_t v4 = (void *)((char *)this + 280);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (void *)this + 35);
  if (v17) {
    uint8x8_t v5 = v17 + 4;
  }
  else {
    uint8x8_t v5 = 0;
  }
  v19 = v5;
  v20 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v21, &v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v6 = (char *)this + 176;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 22) + 64))((char *)this + 176);
  (*(void (**)(char *, uint64_t))(*((void *)this + 22) + 16))((char *)this + 176, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipTransaction::handleError", 27);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  int v8 = (*(uint64_t (**)(SipTransaction *))(*(void *)this + 144))(this);
  uint64_t v9 = *((void *)this + 22);
  if (v8)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(v9 + 64))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"already completed.  Ignoring error ", 35);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v10);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(char *))(v9 + 56))((char *)this + 176);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 176, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"terminating due to error: ", 26);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v11);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = *((void *)this + 44);
    if (v12)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, v4);
      (*(void (**)(uint64_t, const ImsResult *, uint64_t *))(*(void *)v12 + 32))(v12, a2, &v14);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    (*(void (**)(SipTransaction *, uint64_t))(*(void *)this + 32))(this, 7);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v21);
}

void sub_1C55694B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipTransaction::handleError(SipTransaction *this, const ImsResult *a2)
{
  return SipTransaction::handleError((SipTransaction *)((char *)this - 72), a2);
}

void SipTransaction::handleTimeout(SipTransaction *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 10);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  SipTransaction::reportTimeoutToIRat(this);
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  v5[0] = &unk_1F20B2680;
  v5[1] = &SipResultDomain::_domain;
  int v6 = 408;
  (*(void (**)(SipTransaction *, void *))(*(void *)this + 112))(this, v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5569614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void SipTransaction::reportTimeoutToIRat(SipTransaction *this)
{
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = 0;
  uint64_t v2 = *((void *)this + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0;
LABEL_6:
  LOBYTE(v54) = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v5 + 3160));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v6 = *((void *)this + 40);
  long long v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7 && (long long v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v55 = *(unsigned int *)(*(void *)(v6 + 8) + 4100);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    uint64_t v55 = MEMORY[0x1004];
  }
  LODWORD(v56) = 0;
  uint64_t v9 = *((void *)this + 37);
  if (v9)
  {
    uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 112))(v9);
    uint64_t v11 = v10[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v10[23];
    }
    else {
      uint64_t v12 = *((void *)v10 + 1);
    }
    if (v12 != 8) {
      goto LABEL_24;
    }
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v10, "REGISTER", *((void *)v10 + 1))) {
        goto LABEL_24;
      }
    }
    else if (v10[23])
    {
      v13 = "REGISTER";
      while (*v10 == *(unsigned __int8 *)v13)
      {
        ++v10;
        ++v13;
        if (!--v11) {
          goto LABEL_34;
        }
      }
LABEL_24:
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
      uint64_t v15 = v14[23];
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = v14[23];
      }
      else {
        uint64_t v16 = *((void *)v14 + 1);
      }
      if (v16 != 7) {
        goto LABEL_37;
      }
      if ((v15 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v14, "MESSAGE", *((void *)v14 + 1))) {
          goto LABEL_37;
        }
      }
      else if (v14[23])
      {
        uint64_t v17 = "MESSAGE";
        while (*v14 == *(unsigned __int8 *)v17)
        {
          ++v14;
          ++v17;
          if (!--v15) {
            goto LABEL_47;
          }
        }
LABEL_37:
        v24 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
        uint64_t v25 = v24[23];
        if ((v25 & 0x80u) == 0) {
          uint64_t v26 = v24[23];
        }
        else {
          uint64_t v26 = *((void *)v24 + 1);
        }
        if (v26 == 6)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v24, "INVITE", *((void *)v24 + 1))) {
              goto LABEL_85;
            }
          }
          else
          {
            if (!v24[23]) {
              goto LABEL_85;
            }
            v27 = "INVITE";
            while (*v24 == *(unsigned __int8 *)v27)
            {
              ++v24;
              ++v27;
              if (!--v25) {
                goto LABEL_85;
              }
            }
          }
        }
        v29 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
        uint64_t v30 = v29[23];
        if ((v30 & 0x80u) == 0) {
          uint64_t v31 = v29[23];
        }
        else {
          uint64_t v31 = *((void *)v29 + 1);
        }
        if (v31 == 5)
        {
          if ((v30 & 0x80) == 0)
          {
            if (v29[23])
            {
              v32 = "PRACK";
              while (*v29 == *(unsigned __int8 *)v32)
              {
                ++v29;
                ++v32;
                if (!--v30) {
                  goto LABEL_85;
                }
              }
              goto LABEL_64;
            }
LABEL_85:
            int v28 = 4;
            goto LABEL_100;
          }
          if (!memcmp(*(const void **)v29, "PRACK", *((void *)v29 + 1))) {
            goto LABEL_85;
          }
        }
LABEL_64:
        v33 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
        uint64_t v34 = v33[23];
        if ((v34 & 0x80u) == 0) {
          uint64_t v35 = v33[23];
        }
        else {
          uint64_t v35 = *((void *)v33 + 1);
        }
        if (v35 != 3) {
          goto LABEL_75;
        }
        if ((v34 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v33, &SipRequest::kMethodAck, *((void *)v33 + 1))) {
            goto LABEL_75;
          }
        }
        else if (v33[23])
        {
          v36 = &SipRequest::kMethodAck;
          while (*v33 == *(unsigned __int8 *)v36)
          {
            ++v33;
            v36 = (long long *)((char *)v36 + 1);
            int v28 = 4;
            if (!--v34) {
              goto LABEL_100;
            }
          }
LABEL_75:
          v37 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
          uint64_t v38 = v37[23];
          if ((v38 & 0x80u) == 0) {
            uint64_t v39 = v37[23];
          }
          else {
            uint64_t v39 = *((void *)v37 + 1);
          }
          if (v39 == 6)
          {
            if ((v38 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v37, "CANCEL", *((void *)v37 + 1))) {
                goto LABEL_99;
              }
            }
            else
            {
              if (!v37[23]) {
                goto LABEL_99;
              }
              v40 = "CANCEL";
              while (*v37 == *(unsigned __int8 *)v40)
              {
                ++v37;
                ++v40;
                int v28 = 5;
                if (!--v38) {
                  goto LABEL_100;
                }
              }
            }
          }
          v41 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 37) + 112))(*((void *)this + 37));
          uint64_t v42 = v41[23];
          if ((v42 & 0x80u) == 0) {
            uint64_t v43 = v41[23];
          }
          else {
            uint64_t v43 = *((void *)v41 + 1);
          }
          if (v43 == 3)
          {
            if ((v42 & 0x80) == 0)
            {
              if (v41[23])
              {
                v44 = &SipRequest::kMethodBye;
                while (*v41 == *(unsigned __int8 *)v44)
                {
                  ++v41;
                  v44 = (long long *)((char *)v44 + 1);
                  if (!--v42) {
                    goto LABEL_99;
                  }
                }
                goto LABEL_98;
              }
LABEL_99:
              int v28 = 5;
              goto LABEL_100;
            }
            if (!memcmp(*(const void **)v41, &SipRequest::kMethodBye, *((void *)v41 + 1))) {
              goto LABEL_99;
            }
          }
LABEL_98:
          int v28 = 6;
          goto LABEL_100;
        }
        goto LABEL_85;
      }
LABEL_47:
      int v28 = 3;
LABEL_100:
      LODWORD(v56) = v28;
      goto LABEL_101;
    }
LABEL_34:
    uint64_t v18 = *((void *)this + 40);
    v19 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v18 + 16));
    uint64_t v20 = *(void *)(*(void *)(v18 + 8) + 144);
    uint64_t v22 = *(void *)(v20 + 248);
    uint64_t v21 = *(std::__shared_weak_count **)(v20 + 256);
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      int v23 = *(_DWORD *)(v22 + 532);
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    else
    {
      int v23 = *(_DWORD *)(v22 + 532);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (v23 == 3) {
      int v28 = 2;
    }
    else {
      int v28 = 1;
    }
    goto LABEL_100;
  }
LABEL_101:
  uint64_t v45 = *((void *)this + 40);
  v46 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v45 + 16));
  uint64_t v47 = *(void *)(*(void *)(v45 + 8) + 136);
  uint64_t v48 = *((void *)this + 40);
  v49 = *(std::__shared_weak_count **)(v48 + 16);
  if (v49)
  {
    v50 = std::__shared_weak_count::lock(v49);
    if (v50) {
      uint64_t v51 = *(void *)(v48 + 8);
    }
    else {
      uint64_t v51 = 0;
    }
  }
  else
  {
    uint64_t v51 = 0;
    v50 = 0;
  }
  if (*(char *)(v51 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v51 + 4160), *(void *)(v51 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v51 + 4160);
  }
  uint64_t v52 = *(void *)(v47 + 248);
  if (v52) {
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(void *)v52 + 136))(v52, &__p, &v54);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
}

void sub_1C5569C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

BOOL SipTransaction::completed(SipTransaction *this)
{
  return (*(unsigned int (**)(SipTransaction *))(*(void *)this + 24))(this) > 3;
}

BOOL non-virtual thunk to'SipTransaction::completed(SipTransaction *this)
{
  return (*(unsigned int (**)(void))(*((void *)this - 9) + 24))() > 3;
}

uint64_t SipTransaction::transactionMapKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v17, 0, sizeof(v17));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v7, v8);
  LOBYTE(v15) = 45;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v15, 1);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, &v15);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v16;
  *(void *)&v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(*(void *)&v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v17[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v21);
}

void sub_1C5569EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::messageEncoding(SipTransaction *this)
{
  v1 = (SipTransportLayer *)*((void *)this + 40);
  uint64_t result = SipTransportLayer::userAgent(v1);
  if (result) {
    return SipTransportLayer::userAgent(v1) + 288;
  }
  return result;
}

uint64_t SipSessionInterface::SipSessionInterface(uint64_t a1, uint64_t *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v8 = (void *)(ImsLogContainer::ImsLogContainer(a1, a3, a4) + 104);
  uint64_t v9 = a2[1];
  *uint64_t v8 = v9;
  *(void *)((char *)v8 + *(void *)(v9 - 48)) = a2[2];
  *(unsigned char *)(a1 + 116) = 1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  uint64_t v10 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 104) = a2[3];
  *(void *)(a1 + *(void *)(v10 - 24)) = a2[4];
  uint64_t v14 = 0;
  long long v15 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "MainLock");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)(a1 + 200), &v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 272));
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 416));
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = a1 + 568;
  *(void *)(a1 + 584) = a1 + 592;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  int v11 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(unsigned char *)(a1 + 264) = 1;
  *(void *)(a1 + 376) = a1 + *(void *)(*(void *)a1 - 24);
  std::string::operator=((std::string *)(a1 + 320), a3);
  std::string::operator=((std::string *)(a1 + 344), a4);
  *(void *)(a1 + 520) = a1 + *(void *)(*(void *)a1 - 24);
  std::string::operator=((std::string *)(a1 + 464), a3);
  std::string::operator=((std::string *)(a1 + 488), a4);
  return a1;
}

void sub_1C556A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  SipTimerContainer::~SipTimerContainer(v22);
  v24 = *(std::__shared_weak_count **)(v19 + 256);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v21);
  uint64_t v25 = *(std::__shared_weak_count **)(v19 + 192);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  SipLockable::~SipLockable(v20, a11);
  ImsLogContainer::~ImsLogContainer((void **)v19);
  _Unwind_Resume(a1);
}

void SipSessionInterface::~SipSessionInterface(SipSessionInterface *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  uint64_t v5 = (SipSessionInterface *)((char *)this + 104);
  *((void *)this + 13) = a2[3];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[4];
  int v6 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 584, *((void **)this + 74));
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 560, *((void **)this + 71));
  SipTimerContainer::~SipTimerContainer((SipSessionInterface *)((char *)this + 416));
  SipTimerContainer::~SipTimerContainer((SipSessionInterface *)((char *)this + 272));
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)this + 200);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  SipLockable::~SipLockable(v5, a2 + 1);
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void SipSessionInterface::initialize(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 25);
  uint64_t v5 = a1 + 23;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, a1 + 23);
  if (v12) {
    uint64_t v6 = v12 + 104;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v14 = v6;
  long long v15 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  SipTypedTerminationLock<SipLockable>::set(v4, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v8 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[32];
  a1[31] = v8;
  a1[32] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    uint64_t v8 = (void *)a1[31];
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, v5);
  SipDialog::attachSession(v8, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C556A4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::removeAllAckHandlers(SipSessionInterface *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"removing all ACK handlers", 25);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v3 = (void **)*((void *)this + 70);
  uint64_t v4 = (void **)((char *)this + 568);
  if (v3 != (void **)((char *)this + 568))
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (long long *)(v3 + 4);
      if ((unint64_t)v5 >= v43)
      {
        uint64_t v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v41, v6);
      }
      else
      {
        if (*((char *)v3 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v3[4], (std::string::size_type)v3[5]);
        }
        else
        {
          long long v7 = *v6;
          v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[6];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        ++v5;
      }
      uint64_t v42 = v5;
      uint64_t v8 = (void **)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void **)v3[2];
          BOOL v10 = *v9 == v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
    uint64_t v11 = (uint64_t)v41;
    if (v5 != v41)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 560, (void **)(v11 + v12));
        if (v4 != v14)
        {
          long long v15 = v14[7];
          uint64_t v16 = (std::__shared_weak_count *)v14[8];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v15)
          {
            uint64_t v17 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
            (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"forcing ", 8);
            *(unsigned char *)(v17 + 17) = 0;
            (*(void (**)(void *, uint64_t))(v15[16] + 16))(v15 + 16, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" to terminate its transaction", 29);
            *(unsigned char *)(v17 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v17 + 17) = 0;
            *((unsigned char *)v15 + 336) = 1;
            uint64_t v18 = v15[21];
            if (v18) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 7);
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        ++v13;
        uint64_t v11 = (uint64_t)v41;
        v12 += 24;
      }
      while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)v41) >> 3));
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v40 = 0;
  uint64_t v19 = (SipSessionInterface *)*((void *)this + 73);
  if (v19 != (SipSessionInterface *)((char *)this + 592))
  {
    long long v20 = 0;
    do
    {
      if (v20 >= v40)
      {
        uint64_t v21 = v38;
        uint64_t v22 = ((char *)v20 - (char *)v38) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = (char *)v40 - (char *)v38;
        if (((char *)v40 - (char *)v38) >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)&v40, v25);
          uint64_t v21 = v38;
          long long v20 = v39;
        }
        else
        {
          uint64_t v26 = 0;
        }
        v27 = (void **)&v26[4 * v22];
        *(_DWORD *)v27 = *((_DWORD *)v19 + 8);
        int v28 = (void **)((char *)v27 + 4);
        while (v20 != v21)
        {
          int v29 = *((_DWORD *)v20 - 1);
          long long v20 = (void **)((char *)v20 - 4);
          *((_DWORD *)v27 - 1) = v29;
          v27 = (void **)((char *)v27 - 4);
        }
        uint64_t v38 = v27;
        uint64_t v39 = v28;
        v40 = (void **)&v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
        long long v20 = v28;
      }
      else
      {
        *(_DWORD *)long long v20 = *((_DWORD *)v19 + 8);
        long long v20 = (void **)((char *)v20 + 4);
      }
      uint64_t v39 = v20;
      uint64_t v30 = (SipSessionInterface *)*((void *)v19 + 1);
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = *(SipSessionInterface **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v31 = (SipSessionInterface *)*((void *)v19 + 2);
          BOOL v10 = *(void *)v31 == (void)v19;
          uint64_t v19 = v31;
        }
        while (!v10);
      }
      uint64_t v19 = v31;
    }
    while (v31 != (SipSessionInterface *)((char *)this + 592));
    if (v20 == v38) {
      goto LABEL_60;
    }
    unint64_t v32 = 0;
    long long v20 = v38;
    do
    {
      v36 = 0;
      v37 = 0;
      SipSessionInterface::ackReceiveHandlerForCseq(&v36, (uint64_t)this, *((_DWORD *)v20 + v32));
      v33 = v36;
      if (v36)
      {
        uint64_t v34 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
        (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"forcing ", 8);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(void *, uint64_t))(*v33 + 16))(v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" to terminate its transaction", 29);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v34 + 17) = 0;
        uint64_t v35 = v33[18];
        if (v35) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 7);
        }
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      ++v32;
      long long v20 = v38;
    }
    while (v32 < ((char *)v39 - (char *)v38) >> 2);
    if (v38)
    {
LABEL_60:
      uint64_t v39 = v20;
      operator delete(v20);
    }
  }
  uint64_t v38 = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
}

void sub_1C556AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  std::string __p = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *SipSessionInterface::ackReceiveHandlerForCseq(void *this, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 592);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = a2 + 592;
  do
  {
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 >= a3;
    if (v5 >= a3) {
      long long v7 = (uint64_t *)v3;
    }
    else {
      long long v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != a2 + 592 && *(_DWORD *)(v4 + 32) <= a3)
  {
    uint64_t v9 = *(void *)(v4 + 40);
    uint64_t v8 = *(void *)(v4 + 48);
    *this = v9;
    this[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *this = 0;
    this[1] = 0;
  }
  return this;
}

void SipSessionInterface::addAckRetransmitHandlerForClientTransaction(uint64_t a1, uint64_t a2, const SipResponse *a3, int a4)
{
  if (!*(void *)a2
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"can't add ACK retransmit handler for non-invite transaction ", 60);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = *(void *)a2 + *(void *)(**(void **)a2 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v14);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    return;
  }
  uint64_t v9 = (uint64_t)v8;
  BOOL v10 = *(std::__shared_weak_count **)(a2 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"adding ACK retransmit handler for transaction ", 46);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + *(void *)(*(void *)v9 - 24)) + 16))(v9 + *(void *)(*(void *)v9 - 24), v11);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (a4)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(&__p, a1);
    unint64_t v13 = __p;
    uint64_t v12 = v38;
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v34, (void *)(a1 + 184));
  uint64_t v16 = operator new(0x170uLL);
  uint64_t v17 = (std::__shared_weak_count *)v16;
  v16[1] = 0;
  v16[2] = 0;
  *uint64_t v16 = &unk_1F20DC188;
  uint64_t v18 = (int8x8_t *)(v16 + 3);
  uint64_t v19 = v35;
  std::string __p = v34;
  uint64_t v38 = v35;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v36[0] = v9;
  v36[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipAckRetransmitHandler::SipAckRetransmitHandler((uint64_t)(v16 + 3), (uint64_t)&__p, v36);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v20 = (std::__shared_weak_count *)v17[7].__vftable;
  if (!v20)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[6].__shared_weak_owners_ = (uint64_t)v18;
    v17[7].__vftable = (std::__shared_weak_count_vtbl *)v17;
    goto LABEL_21;
  }
  if (v20->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[6].__shared_weak_owners_ = (uint64_t)v18;
    v17[7].__vftable = (std::__shared_weak_count_vtbl *)v17;
    std::__shared_weak_count::__release_weak(v20);
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  unint64_t v32 = v13;
  v33 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v21 = SipAckRetransmitHandler::initialize(v18, a3, &v32);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v21)
  {
    uint64_t v22 = *(void **)(a1 + 568);
    unint64_t v23 = (void *)(a1 + 568);
    uint64_t v24 = (void *)(a1 + 568);
    if (!v22) {
      goto LABEL_38;
    }
    unint64_t v23 = (void *)(a1 + 568);
    while (1)
    {
      while (1)
      {
        uint64_t v24 = v22;
        unint64_t v25 = v22 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v9 + 328), (void **)v22 + 4) & 0x80) == 0)break; {
        uint64_t v22 = (void *)*v24;
        }
        unint64_t v23 = v24;
        if (!*v24) {
          goto LABEL_38;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)(v9 + 328)) & 0x80) == 0) {
        break;
      }
      unint64_t v23 = v24 + 1;
      uint64_t v22 = (void *)v24[1];
      if (!v22) {
        goto LABEL_38;
      }
    }
    uint64_t v26 = (void *)*v23;
    if (!*v23)
    {
LABEL_38:
      uint64_t v39 = 0;
      v27 = operator new(0x48uLL);
      std::string __p = v27;
      uint64_t v38 = (std::__shared_weak_count *)(a1 + 568);
      LOBYTE(v39) = 0;
      int v28 = (std::string *)(v27 + 4);
      if (*(char *)(v9 + 351) < 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)(v9 + 328), *(void *)(v9 + 336));
      }
      else
      {
        long long v29 = *(_OWORD *)(v9 + 328);
        v27[6] = *(void *)(v9 + 344);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      v27[7] = 0;
      v27[8] = 0;
      LOBYTE(v39) = 1;
      void *v27 = 0;
      v27[1] = 0;
      v27[2] = v24;
      *unint64_t v23 = v27;
      uint64_t v30 = **(void **)(a1 + 560);
      if (v30)
      {
        *(void *)(a1 + 560) = v30;
        v27 = (void *)*v23;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 568), v27);
      ++*(void *)(a1 + 576);
      uint64_t v26 = __p;
      std::string __p = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v31 = (std::__shared_weak_count *)v26[8];
    v26[7] = v18;
    v26[8] = v17;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    (*(void (**)(void **__return_ptr, int8x8_t *))(*(void *)v18 + 72))(&__p, v18);
    (*(void (**)(uint64_t, void **))(*(void *)(a1 + 104) + 32))(a1 + 104, &__p);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C556B1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeAckRetransmitHandler(uint64_t **a1, std::string *a2)
{
  uint64_t v4 = a1 + 70;
  unsigned int v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 70), (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 71 != (uint64_t **)v5)
  {
    BOOL v6 = (uint64_t *)v5;
    uint64_t v7 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"removing ACK retransmit handler for transaction ", 48);
    *(unsigned char *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v14, a2);
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 56))(v7, v14);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    uint64_t v9 = v6[7];
    uint64_t v8 = (std::__shared_weak_count *)v6[8];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v10 = (uint64_t *)v6[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        BOOL v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      uint64_t v12 = v6;
      do
      {
        uint64_t v11 = (uint64_t *)v12[2];
        BOOL v13 = *v11 == (void)v12;
        uint64_t v12 = v11;
      }
      while (!v13);
    }
    if (*v4 == v6) {
      *uint64_t v4 = v11;
    }
    a1[72] = (uint64_t *)((char *)a1[72] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(a1[71], v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 72))(v14, v9);
    ((void (*)(uint64_t **, void **))a1[13][5])(a1 + 13, v14);
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C556B4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::addAckReceiveHandlerForServerTransaction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = SipMessage::header<SipCSeqHeader>(*(void *)(*a2 + 296));
  if (v6) {
    unsigned int v7 = v6[15];
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"adding ACK receive handler for transaction ", 43);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = *a2 + *(void *)(*(void *)*a2 - 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" with cseq ", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, (void *)(a1 + 184));
  BOOL v10 = operator new(0x158uLL);
  uint64_t v11 = (std::__shared_weak_count *)v10;
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1F20DC1D8;
  uint64_t v12 = (int8x8_t *)(v10 + 3);
  BOOL v13 = v28;
  __p[0] = v27;
  __p[1] = v28;
  v27 = 0;
  int v28 = 0;
  uint64_t v14 = *a2;
  uint64_t v15 = (std::__shared_weak_count *)a2[1];
  v29[0] = v14;
  v29[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipAckReceiveHandler::SipAckReceiveHandler((uint64_t)(v10 + 3), (uint64_t)__p, v29, a3);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v16 = (std::__shared_weak_count *)v11[6].__vftable;
  if (v16)
  {
    if (v16->__shared_owners_ != -1) {
      goto LABEL_15;
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[5].__shared_weak_owners_ = (uint64_t)v12;
    v11[6].__vftable = (std::__shared_weak_count_vtbl *)v11;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v11[5].__shared_weak_owners_ = (uint64_t)v12;
    v11[6].__vftable = (std::__shared_weak_count_vtbl *)v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_15:
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SipAckReceiveHandler::initialize(v12))
  {
    char v17 = *(uint64_t **)(a1 + 592);
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v18 = (uint64_t **)v17;
          unsigned int v19 = *((_DWORD *)v17 + 8);
          if (v19 <= v7) {
            break;
          }
          char v17 = *v18;
          long long v20 = v18;
          if (!*v18) {
            goto LABEL_26;
          }
        }
        if (v19 >= v7) {
          break;
        }
        char v17 = v18[1];
        if (!v17)
        {
          long long v20 = v18 + 1;
          goto LABEL_26;
        }
      }
      char v21 = v18;
    }
    else
    {
      long long v20 = (uint64_t **)(a1 + 592);
      uint64_t v18 = (uint64_t **)(a1 + 592);
LABEL_26:
      char v21 = operator new(0x38uLL);
      *((_DWORD *)v21 + 8) = v7;
      *((void *)v21 + 5) = 0;
      *((void *)v21 + 6) = 0;
      *(void *)char v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = v18;
      std::__shared_weak_count *v20 = (uint64_t *)v21;
      uint64_t v22 = **(void **)(a1 + 584);
      unint64_t v23 = (uint64_t *)v21;
      if (v22)
      {
        *(void *)(a1 + 584) = v22;
        unint64_t v23 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 592), v23);
      ++*(void *)(a1 + 600);
    }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)v21 + 6);
    *((void *)v21 + 5) = v12;
    *((void *)v21 + 6) = v11;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    (*(void (**)(void **__return_ptr, int8x8_t *))(*(void *)v12 + 24))(__p, v12);
    (*(void (**)(uint64_t, void **))(*(void *)(a1 + 104) + 32))(a1 + 104, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1C556B8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeAckReceiveHandler(SipSessionInterface *this, unsigned int a2)
{
  uint64_t v2 = (char *)*((void *)this + 74);
  if (v2)
  {
    uint64_t v4 = (char *)this + 592;
    do
    {
      unsigned int v5 = *((_DWORD *)v2 + 8);
      BOOL v6 = v5 >= a2;
      if (v5 >= a2) {
        unsigned int v7 = (char **)v2;
      }
      else {
        unsigned int v7 = (char **)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != (char *)this + 592 && *((_DWORD *)v4 + 8) <= a2)
    {
      uint64_t v8 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
      (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"removing ACK receive handler for cseq ", 38);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      uint64_t v10 = *((void *)v4 + 5);
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v4 + 6);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (char *)*((void *)v4 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        BOOL v13 = v4;
        do
        {
          uint64_t v12 = (char *)*((void *)v13 + 2);
          BOOL v14 = *(void *)v12 == (void)v13;
          BOOL v13 = v12;
        }
        while (!v14);
      }
      if (*((char **)this + 73) == v4) {
        *((void *)this + 73) = v12;
      }
      --*((void *)this + 75);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 74), (uint64_t *)v4);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v4 + 6);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      operator delete(v4);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v17 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 24))(__p, v10);
      (*(void (**)(char *, void **))(*((void *)this + 13) + 40))((char *)this + 104, __p);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[0]);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
}

void sub_1C556BB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::sendAck(uint64_t a1@<X0>, SipRequest *a2@<X1>, void *a3@<X2>, char a4@<W3>, ImsResult *a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 248);
  if (*(void *)(v7 + 2064) != 1)
  {
    uint64_t v12 = 0;
LABEL_15:
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    v24[0] = &unk_1F20B2680;
    v24[1] = &_bambiDomain;
    int v25 = 1073741826;
    uint64_t v17 = ImsResult::operator<<<char [32]>((uint64_t)v24, "sendAck called when dialog has ");
    uint64_t v23 = *(void *)(*(void *)(a1 + 248) + 2064);
    uint64_t v18 = ImsResult::operator<<<unsigned long>(v17);
    unsigned int v19 = (const std::string *)ImsResult::operator<<<char [7]>(v18, " forks");
    ImsResult::ImsResult(a5, v19);
    ImsResult::~ImsResult((ImsResult *)v24);
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v7 + 2048);
  uint64_t v11 = *(void *)(v10 + 56);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 64);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11) {
    goto LABEL_15;
  }
  if ((a4 & 1) == 0)
  {
    BOOL v13 = *(SipOfferAnswer **)(v11 + 656);
    BOOL v14 = *(std::__shared_weak_count **)(v11 + 664);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipOfferAnswer::updateWithOutgoingMessage(v13, (uint64_t)a2, (std::string *)(*a3 + 328), (uint64_t)v22);
    ImsResult::~ImsResult((ImsResult *)v22);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  uint64_t v15 = *(void **)(a1 + 248);
  uint64_t v16 = (std::__shared_weak_count *)a3[1];
  uint64_t v20 = *a3;
  char v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialog::sendAck(v15, a2, (uint64_t)&v20, a5);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
LABEL_16:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C556BCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipSessionInterface::handleAck(SipSessionInterface *this, const SipRequest *a2)
{
  uint64_t v4 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v4) {
    unsigned int v5 = v4[15];
  }
  else {
    unsigned int v5 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  SipSessionInterface::ackReceiveHandlerForCseq(&v9, (uint64_t)this, v5);
  BOOL v6 = v9;
  if (v9)
  {
    SipAckReceiveHandler::handleAck(v9, a2);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 32))(this);
    (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"no handler for incoming ACK with CSeq ", 38);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" (maybe a dup?)", 15);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v6 != 0;
}

void sub_1C556BE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSessionInterface::handleResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (char *)SipMessage::header<SipCSeqHeader>(a2);
  uint64_t v7 = (long long *)(v6 + 64);
  if (!v6) {
    uint64_t v7 = &ims::kEmptyString;
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *((unsigned __int8 *)v7 + 23);
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 != 6) {
    return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, "INVITE", *((void *)v7 + 1))) {
      return 0;
    }
  }
  else if (*((unsigned char *)v7 + 23))
  {
    uint64_t v10 = "INVITE";
    while (*(unsigned __int8 *)v7 == *(unsigned __int8 *)v10)
    {
      uint64_t v7 = (long long *)((char *)v7 + 1);
      ++v10;
      if (!--v8) {
        goto LABEL_14;
      }
    }
    return 0;
  }
LABEL_14:
  if ((*(_DWORD *)(a2 + 88) - 200) <= 0x63)
  {
    uint64_t v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 560, (void **)(*(void *)a3 + 328));
    if ((void **)(a1 + 568) != v11)
    {
      BOOL v13 = (SipAckRetransmitHandler *)v11[7];
      uint64_t v12 = (std::__shared_weak_count *)v11[8];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v13) {
        SipAckRetransmitHandler::retransmitAck(v13);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v13) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1C556BFCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::sendResponseInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 248);
  unsigned int v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialog::sendQueuedResponseInTransaction(v4, a2, &v6, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C556C038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::removeClientTransaction(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  uint64_t v5 = v4[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v4[23];
  }
  else {
    uint64_t v6 = *((void *)v4 + 1);
  }
  if (v6 != 6) {
    return;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "INVITE", *((void *)v4 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!v4[23])
  {
LABEL_12:
    uint64_t v8 = *a2;
    if (*(char *)(*a2 + 351) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 328), *(void *)(v8 + 336));
    }
    else {
      std::string __p = *(std::string *)(v8 + 328);
    }
    SipSessionInterface::removeAckRetransmitHandler(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v7 = "INVITE";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5) {
      goto LABEL_12;
    }
  }
}

void sub_1C556C158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::removeServerTransaction(SipSessionInterface *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 296) + 112))(*(void *)(*(void *)a2 + 296));
  uint64_t v5 = v4[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v4[23];
  }
  else {
    uint64_t v6 = *((void *)v4 + 1);
  }
  if (v6 != 6) {
    return;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "INVITE", *((void *)v4 + 1))) {
      return;
    }
    goto LABEL_13;
  }
  if (!v4[23])
  {
LABEL_13:
    uint64_t v8 = SipMessage::header<SipCSeqHeader>(*(void *)(*(void *)a2 + 296));
    if (v8) {
      unsigned int v9 = v8[15];
    }
    else {
      unsigned int v9 = 0;
    }
    SipSessionInterface::removeAckReceiveHandler(a1, v9);
    return;
  }
  uint64_t v7 = "INVITE";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5) {
      goto LABEL_13;
    }
  }
}

void SipSessionInterface::terminationLocksReleased(SipSessionInterface *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipSessionInterface::terminationLocksReleased()", 47);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v5 = (SipDialog *)*((void *)this + 31);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  uint64_t v3 = (void *)((char *)this + 248);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 32);
    void *v3 = 0;
    *((void *)this + 32) = 0;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    void *v3 = 0;
    *((void *)this + 32) = 0;
  }
  SipDialog::detachSession(v5);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C556C394(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipSessionInterface::terminationLocksReleased(SipSessionInterface *this)
{
}

void SipSessionInterface::deinitialize(SipSessionInterface *this)
{
  v1 = (char *)this + 200;
  (*(void (**)(SipSessionInterface *))(*(void *)this + 88))(this);
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)v1, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C556C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::logPrefix(std::__shared_weak_count *this, ImsOutStream *a2)
{
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  SipSessionInterface::stack(this, &v8);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 104))(v6);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t *))(this[4].__shared_owners_ + 24))(__p, &this[4].__shared_owners_);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
    *((unsigned char *)a2 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t *))(this[4].__shared_owners_ + 24))(v6, &this[4].__shared_owners_);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C556C5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *SipSessionInterface::stack@<X0>(std::__shared_weak_count *this@<X0>, void *a2@<X8>)
{
  uint64_t shared_owners = this[10].__shared_owners_;
  if (shared_owners && (uint64_t v4 = *(void *)(shared_owners + 216)) != 0 && (v5 = *(void *)(v4 + 136)) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    this = *(std::__shared_weak_count **)(v5 + 16);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      a2[1] = this;
      if (this) {
        *a2 = *(void *)(v5 + 8);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t SipSessionInterface::setPreferredTransportGroup(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    a1[76] = v3;
    uint64_t v6 = (std::__shared_weak_count *)a1[77];
    a1[77] = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"set preferred transport to ", 27);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v7);
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)a1[77];
    *((_OWORD *)a1 + 38) = 0u;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"cleared preferred transport", 27);
    *(unsigned char *)(v7 + 17) = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  return result;
}

void SipSessionInterface::terminationReason(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  SipSessionInterface::stack(a1, &v6);
  SipStack::callTerminationReason(v6, a2, a3);
  uint64_t v5 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C556C8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SipAckRetransmitHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAckRetransmitHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipAckRetransmitHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipAckReceiveHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAckReceiveHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipAckReceiveHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SipSecurityMechanism::SipSecurityMechanism(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20CDEC0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1F20B37B0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1C556CAC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4, *(void **)(v1 + 48));
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

double SipSecurityMechanism::preference(SipSecurityMechanism *this)
{
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 40, (void **)&SipSecurityMechanism::kParameterPreference);
  if ((void **)((char *)this + 48) == v2) {
    uint64_t v3 = &ims::kEmptyString;
  }
  else {
    uint64_t v3 = (long long *)(v2 + 7);
  }
  if (*((char *)v3 + 23) < 0)
  {
    if (!*((void *)v3 + 1)) {
      return 0.0;
    }
    uint64_t v3 = *(long long **)v3;
  }
  else if (!*((unsigned char *)v3 + 23))
  {
    return 0.0;
  }
  return strtod((const char *)v3, 0);
}

uint64_t SipSecurityMechanism::fromString(std::string *a1)
{
  memset(&__s1, 0, sizeof(__s1));
  if (ims::nextToken(a1, 0, &__s1, 0x3Bu) != -1)
  {
    ims::chomp(&__s1, "\r\n\t ", 3);
    uint64_t v1 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    if (size != 10) {
      goto LABEL_14;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, "ipsec-3gpp", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_14;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v4 = "ipsec-3gpp";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v4)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v4;
        if (!--v1) {
          goto LABEL_15;
        }
      }
LABEL_14:
      operator new();
    }
LABEL_15:
    operator new();
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C556CCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C878E320](v15, 0x10B3C40D6137D5ALL);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipGenericSecurityMechanism::~SipGenericSecurityMechanism(SipGenericSecurityMechanism *this)
{
  SipSecurityMechanism::~SipSecurityMechanism(this);
  JUMPOUT(0x1C878E320);
}

void SipGenericSecurityMechanism::clone(SipGenericSecurityMechanism *this)
{
}

void sub_1C556CE74(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40D6137D5ALL);
  _Unwind_Resume(a1);
}

uint64_t SipGenericSecurityMechanism::matches(SipGenericSecurityMechanism *this, const SipSecurityMechanism *a2)
{
  return 0;
}

void SipGeoPrivShapeCircle::SipGeoPrivShapeCircle(SipGeoPrivShapeCircle *this, double a2, double a3, double a4)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v7 = (void **)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_1F20DC2C8;
  *((void *)this + 7) = 0;
  uint64_t v8 = (void **)((char *)this + 56);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::to_string(&v10, a2);
  if (*((char *)this + 31) < 0) {
    operator delete(*v7);
  }
  *(std::string *)uint64_t v7 = v10;
  std::to_string(&v10, a3);
  unsigned int v9 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)unsigned int v9 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *((void *)this + 6) = *((void *)&v10.__r_.__value_.__l + 2);
  std::to_string(&v10, a4);
  if (*((char *)this + 79) < 0) {
    operator delete(*v8);
  }
  *(std::string *)uint64_t v8 = v10;
}

void sub_1C556CFBC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  SipWarning::~SipWarning((void **)v1);
  _Unwind_Resume(a1);
}

void SipGeoPrivShapeCircle::~SipGeoPrivShapeCircle(void **this)
{
  *this = &unk_1F20DC2C8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  SipWarning::~SipWarning(this);
}

{
  uint64_t vars8;

  SipGeoPrivShapeCircle::~SipGeoPrivShapeCircle(this);
  JUMPOUT(0x1C878E320);
}

std::string *SipGeoPrivShapeCircle::format@<X0>(SipGeoPrivShapeCircle *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
LABEL_3:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    uint64_t v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "<gs:Circle srsName=\"urn:ogc:def:crs:EPSG::4326\">\r\n<gml:pos>");
    int v5 = *((char *)this + 31);
    if (v5 >= 0) {
      uint64_t v6 = (char *)this + 8;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)*((void *)this + 1);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *((unsigned __int8 *)this + 31);
    }
    else {
      std::string::size_type v7 = *((void *)this + 2);
    }
    std::string::append(v4, v6, v7);
    std::string::append(a2, " ", 1uLL);
    int v8 = *((char *)this + 55);
    if (v8 >= 0) {
      unsigned int v9 = (char *)this + 32;
    }
    else {
      unsigned int v9 = (const std::string::value_type *)*((void *)this + 4);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)this + 55);
    }
    else {
      std::string::size_type v10 = *((void *)this + 5);
    }
    std::string::append(a2, v9, v10);
    std::string::append(a2, "</gml:pos>\r\n<gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x38uLL);
    BOOL v13 = (const std::string::value_type *)*((void *)this + 7);
    uint64_t v12 = (char *)this + 56;
    uint64_t v11 = v13;
    int v14 = v12[23];
    if (v14 >= 0) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v11;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = v12[23];
    }
    else {
      std::string::size_type v16 = *((void *)v12 + 1);
    }
    std::string::append(a2, v15, v16);
    return std::string::append(a2, "</gs:radius>\r\n</gs:Circle>\r\n", 0x1CuLL);
  }
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1C556D1AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipGeoPrivShapeCircle::clone(SipGeoPrivShapeCircle *this)
{
}

void sub_1C556D268(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  SipWarning::~SipWarning((void **)v1);
  MEMORY[0x1C878E320]();
  _Unwind_Resume(a1);
}

void SipGeoPrivShapeEllipsoid::SipGeoPrivShapeEllipsoid(SipGeoPrivShapeEllipsoid *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  BOOL v13 = (char *)this + 8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_1F20DC2F8;
  *(_OWORD *)((char *)this + 56) = 0u;
  int v14 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v15 = (char *)this + 104;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  std::string::size_type v16 = (char *)this + 80;
  uint64_t v17 = (char *)this + 128;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  toStringPrecision(a2, &v19, 5);
  if (*((char *)this + 31) < 0) {
    operator delete(*(void **)v13);
  }
  *(_OWORD *)BOOL v13 = v19;
  *((void *)v13 + 2) = v20;
  toStringPrecision(a3, &v19, 5);
  uint64_t v18 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = v19;
  *((void *)this + 6) = v20;
  toStringPrecision(a4, &v19, 1);
  if (*((char *)this + 79) < 0) {
    operator delete(*(void **)v14);
  }
  *(_OWORD *)int v14 = v19;
  *((void *)v14 + 2) = v20;
  toStringPrecision(a5, &v19, 1);
  if (*((char *)this + 103) < 0) {
    operator delete(*(void **)v16);
  }
  *(_OWORD *)std::string::size_type v16 = v19;
  *((void *)v16 + 2) = v20;
  toStringPrecision(a6, &v19, 1);
  if (*((char *)this + 127) < 0) {
    operator delete(*(void **)v15);
  }
  *(_OWORD *)uint64_t v15 = v19;
  *((void *)v15 + 2) = v20;
  toStringPrecision(a7, &v19, 1);
  if (*((char *)this + 151) < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)uint64_t v17 = v19;
  *((void *)v17 + 2) = v20;
}

void sub_1C556D480(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  SipWarning::~SipWarning((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t toStringPrecision(double a1, void *a2, int a3)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v5 = *(void *)&v8[0];
  if (a3 >= 15) {
    uint64_t v6 = 15;
  }
  else {
    uint64_t v6 = a3;
  }
  *(void *)((char *)&v8[1] + *(void *)(*(void *)&v8[0] - 24)) = v6;
  *(_DWORD *)((char *)v8 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8 + 8, a2);
  *(void *)&v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v8[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v12);
}

void sub_1C556D6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipGeoPrivShapeEllipsoid::~SipGeoPrivShapeEllipsoid(void **this)
{
  *this = &unk_1F20DC2F8;
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  SipWarning::~SipWarning(this);
}

{
  uint64_t vars8;

  SipGeoPrivShapeEllipsoid::~SipGeoPrivShapeEllipsoid(this);
  JUMPOUT(0x1C878E320);
}

std::string *SipGeoPrivShapeEllipsoid::format@<X0>(SipGeoPrivShapeEllipsoid *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
LABEL_3:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    uint64_t v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "<gs:Ellipsoid srsName=\"urn:ogc:def:crs:EPSG::4979\">\r\n<gml:pos>");
    int v5 = *((char *)this + 31);
    if (v5 >= 0) {
      uint64_t v6 = (char *)this + 8;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)*((void *)this + 1);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *((unsigned __int8 *)this + 31);
    }
    else {
      std::string::size_type v7 = *((void *)this + 2);
    }
    std::string::append(v4, v6, v7);
    std::string::append(a2, " ", 1uLL);
    int v8 = *((char *)this + 55);
    if (v8 >= 0) {
      unsigned int v9 = (char *)this + 32;
    }
    else {
      unsigned int v9 = (const std::string::value_type *)*((void *)this + 4);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)this + 55);
    }
    else {
      std::string::size_type v10 = *((void *)this + 5);
    }
    std::string::append(a2, v9, v10);
    std::string::append(a2, " ", 1uLL);
    int v11 = *((char *)this + 127);
    if (v11 >= 0) {
      uint64_t v12 = (char *)this + 104;
    }
    else {
      uint64_t v12 = (const std::string::value_type *)*((void *)this + 13);
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *((unsigned __int8 *)this + 127);
    }
    else {
      std::string::size_type v13 = *((void *)this + 14);
    }
    std::string::append(a2, v12, v13);
    std::string::append(a2, "</gml:pos>\r\n<gs:semiMajorAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x3FuLL);
    int v14 = *((char *)this + 79);
    if (v14 >= 0) {
      uint64_t v15 = (char *)this + 56;
    }
    else {
      uint64_t v15 = (const std::string::value_type *)*((void *)this + 7);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)this + 79);
    }
    else {
      std::string::size_type v16 = *((void *)this + 8);
    }
    std::string::append(a2, v15, v16);
    std::string::append(a2, "</gs:semiMajorAxis>\r\n<gs:semiMinorAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x48uLL);
    int v17 = *((char *)this + 103);
    if (v17 >= 0) {
      uint64_t v18 = (char *)this + 80;
    }
    else {
      uint64_t v18 = (const std::string::value_type *)*((void *)this + 10);
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *((unsigned __int8 *)this + 103);
    }
    else {
      std::string::size_type v19 = *((void *)this + 11);
    }
    std::string::append(a2, v18, v19);
    std::string::append(a2, "</gs:semiMinorAxis>\r\n<gs:verticalAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x47uLL);
    uint64_t v22 = (const std::string::value_type *)*((void *)this + 16);
    char v21 = (char *)this + 128;
    uint64_t v20 = v22;
    int v23 = v21[23];
    if (v23 >= 0) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v20;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = v21[23];
    }
    else {
      std::string::size_type v25 = *((void *)v21 + 1);
    }
    std::string::append(a2, v24, v25);
    return std::string::append(a2, "</gs:verticalAxis>\r\n<gs:orientation uom=\"urn:ogc:def:uom:EPSG::9102\">0</gs:orientation>\r\n</gs:Ellipsoid>\r\n", 0x6AuLL);
  }
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1C556D97C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipGeoPrivShapeEllipsoid::clone(SipGeoPrivShapeEllipsoid *this)
{
}

void sub_1C556DA80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  SipWarning::~SipWarning((void **)v1);
  MEMORY[0x1C878E320]();
  _Unwind_Resume(a1);
}

uint64_t SipGeoLocationBody::SipGeoLocationBody(uint64_t a1, uint64_t a2, const std::string *a3, const std::string *a4, int a5, char a6, char a7, char a8)
{
  *(void *)a1 = &unk_1F20DC328;
  uint64_t v16 = a1 + 16;
  SipUri::SipUri((SipUri *)(a1 + 16));
  int v17 = (void **)(a1 + 424);
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(unsigned char *)(a1 + 8) = a6;
  *(unsigned char *)(a1 + 9) = a7;
  *(unsigned char *)(a1 + 10) = a8;
  SipUri::operator=(v18, a2);
  SipUri::asString(v16, &v22);
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)int v17 = v22;
  *(void *)(a1 + 440) = v23;
  if (*(char *)(a1 + 471) < 0)
  {
    *(void *)(a1 + 456) = 4;
    std::string::size_type v19 = *(char **)(a1 + 448);
  }
  else
  {
    *(unsigned char *)(a1 + 471) = 4;
    std::string::size_type v19 = (char *)(a1 + 448);
  }
  strcpy(v19, "Wifi");
  if (*(char *)(a1 + 495) < 0)
  {
    *(void *)(a1 + 480) = 0;
    uint64_t v20 = *(unsigned char **)(a1 + 472);
  }
  else
  {
    *(unsigned char *)(a1 + 495) = 0;
    uint64_t v20 = (unsigned char *)(a1 + 472);
  }
  unsigned char *v20 = 0;
  std::string::operator=((std::string *)(a1 + 592), a3);
  *(_DWORD *)(a1 + 656) = a5;
  std::string::operator=((std::string *)(a1 + 616), a4);
  return a1;
}

void sub_1C556DC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13)
{
  int v17 = *(std::__shared_weak_count **)(v14 + 648);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(char *)(v14 + 639) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v14 + 615) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v14 + 591) < 0) {
    operator delete(*(void **)(v14 + 568));
  }
  if (*(char *)(v14 + 567) < 0) {
    operator delete(*(void **)(v14 + 544));
  }
  if (*(char *)(v14 + 543) < 0) {
    operator delete(*(void **)(v14 + 520));
  }
  if (*(char *)(v14 + 519) < 0) {
    operator delete(*(void **)(v14 + 496));
  }
  if (*(char *)(v14 + 495) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v14 + 471) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v14 + 447) < 0) {
    operator delete(*v15);
  }
  SipUri::~SipUri(v13);
  _Unwind_Resume(a1);
}

std::string *SipGeoLocationBody::_timeStamp(std::string *this, uint64_t a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(this, "<dm:timestamp>");
  int v5 = *(char *)(a2 + 495);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)(a2 + 472);
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)(a2 + 472);
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(a2 + 495);
  }
  else {
    std::string::size_type v7 = *(void *)(a2 + 480);
  }
  std::string::append(v4, v6, v7);
  return std::string::append(this, "</dm:timestamp>\r\n", 0x11uLL);
}

void sub_1C556DD9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double SipGeoLocationBody::setCountry(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 496), a2);
  if (*(char *)(a1 + 495) < 0)
  {
    if (*(void *)(a1 + 480)) {
      return result;
    }
  }
  else if (*(unsigned char *)(a1 + 495))
  {
    return result;
  }
  uint64_t v4 = (void **)(a1 + 472);
  uint64_t v8 = 0;
  memset(&v7[1], 0, 64);
  v7[0] = time(0);
  gmtime_r(v7, (tm *)&v7[2]);
  ImsInternetDateTime::toString((ImsInternetDateTime *)v7, &v5);
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v4 = v5;
  *(void *)(a1 + 488) = v6;
  return result;
}

double SipGeoLocationBody::setTimestamp(SipGeoLocationBody *this, double a2)
{
  if (a2 == 0.0) {
    time_t v3 = time(0);
  }
  else {
    time_t v3 = (uint64_t)a2;
  }
  uint64_t v9 = 0;
  memset(&v8[1], 0, 64);
  v8[0] = v3;
  gmtime_r(v8, (tm *)&v8[2]);
  ImsInternetDateTime::toString((ImsInternetDateTime *)v8, &v6);
  uint64_t v4 = (void **)((char *)this + 472);
  if (*((char *)this + 495) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v6;
  *(_OWORD *)uint64_t v4 = v6;
  *((void *)this + 61) = v7;
  return result;
}

void SipGeoLocationBody::setEllipsoid()
{
}

void sub_1C556DF8C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C4055A416EELL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(&v2, a2);
}

void SipGeoLocationBody::setCircle(SipGeoLocationBody *this, double a2, double a3, double a4, double a5)
{
}

void sub_1C556E088(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeCircle,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeCircle,void>(&v2, a2);
}

std::string *SipGeoLocationBody::setFullCivic(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5)
{
  SipGeoLocationBody::setCountry(a1, a2);
  std::string::operator=((std::string *)(a1 + 520), a3);
  std::string::operator=((std::string *)(a1 + 544), a4);
  return std::string::operator=((std::string *)(a1 + 568), a5);
}

void SipGeoLocationBody::encode(SipGeoLocationBody *this, ImsOutStream *a2)
{
  memset(&v65, 0, sizeof(v65));
  std::string::basic_string[abi:ne180100]<0>(&v65, "<?xml version=\"1.0\"?>\r\n");
  memset(&v69, 0, sizeof(v69));
  uint64_t v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<presence xmlns=\"urn:ietf:params:xml:ns:pidf\" xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\" xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"");
  if (*((char *)this + 519) < 0)
  {
    if (!*((void *)this + 63)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*((unsigned char *)this + 519)) {
LABEL_5:
  }
    std::string::append(v4, " xmlns:cl=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"", 0x3BuLL);
LABEL_6:
  uint64_t v5 = *((void *)this + 80);
  if (!v5) {
    goto LABEL_12;
  }
  if (*(char *)(v5 + 31) < 0)
  {
    if (!*(void *)(v5 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (*(unsigned char *)(v5 + 31)) {
LABEL_11:
  }
    std::string::append(&v69, " xmlns:con=\"urn:ietf:params:xml:ns:geopriv:conf\"", 0x30uLL);
LABEL_12:
  std::string::append(&v69, " entity=\"", 9uLL);
  int v6 = *((char *)this + 447);
  if (v6 >= 0) {
    uint64_t v7 = (char *)this + 424;
  }
  else {
    uint64_t v7 = (const std::string::value_type *)*((void *)this + 53);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *((unsigned __int8 *)this + 447);
  }
  else {
    std::string::size_type v8 = *((void *)this + 54);
  }
  std::string::append(&v69, v7, v8);
  std::string::append(&v69, "\">\r\n", 4uLL);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v69;
  }
  else {
    uint64_t v9 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v65, (const std::string::value_type *)v9, size);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)this + 9))
  {
    memset(&v69, 0, sizeof(v69));
    int v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<tuple id=\"");
    int v12 = *((char *)this + 471);
    if (v12 >= 0) {
      std::string::size_type v13 = (char *)this + 448;
    }
    else {
      std::string::size_type v13 = (const std::string::value_type *)*((void *)this + 56);
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *((unsigned __int8 *)this + 471);
    }
    else {
      std::string::size_type v14 = *((void *)this + 57);
    }
    std::string::append(v11, v13, v14);
    std::string::append(&v69, "\">\r\n<status>\r\n", 0xEuLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v69;
    }
    else {
      uint64_t v15 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v69.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    memset(&v69, 0, sizeof(v69));
    int v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<dm:device id=\"");
    int v18 = *((char *)this + 471);
    if (v18 >= 0) {
      std::string::size_type v19 = (char *)this + 448;
    }
    else {
      std::string::size_type v19 = (const std::string::value_type *)*((void *)this + 56);
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *((unsigned __int8 *)this + 471);
    }
    else {
      std::string::size_type v20 = *((void *)this + 57);
    }
    std::string::append(v17, v19, v20);
    std::string::append(&v69, "\">\r\n", 4uLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v69;
    }
    else {
      uint64_t v15 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = v69.__r_.__value_.__l.__size_;
    }
  }
  std::string::append(&v65, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  memset(&v64, 0, sizeof(v64));
  std::string::basic_string[abi:ne180100]<0>(&v64, "<gp:geopriv>\r\n<gp:location-info>\r\n");
  uint64_t v21 = *((void *)this + 80);
  if (!v21) {
    goto LABEL_70;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)v21 + 24))(&v69);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v22 = &v69;
  }
  else {
    long long v22 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v64, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = *((void *)this + 80);
  if (!v24) {
    goto LABEL_70;
  }
  if (*(char *)(v24 + 31) < 0)
  {
    if (*(void *)(v24 + 16)) {
      goto LABEL_65;
    }
LABEL_70:
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    goto LABEL_71;
  }
  if (!*(unsigned char *)(v24 + 31)) {
    goto LABEL_70;
  }
LABEL_65:
  std::to_string(&v68, *((_DWORD *)this + 164));
  std::string::size_type v25 = std::string::insert(&v68, 0, "<con:confidence pdf=\"normal\">", 0x1DuLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  long long v27 = std::string::append(&v69, "</con:confidence>\r\n", 0x13uLL);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  int64_t v67 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_71:
  if (v67 >= 0) {
    long long v29 = __p;
  }
  else {
    long long v29 = (void **)__p[0];
  }
  if (v67 >= 0) {
    std::string::size_type v30 = HIBYTE(v67);
  }
  else {
    std::string::size_type v30 = (std::string::size_type)__p[1];
  }
  std::string::append(&v64, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 519)) {
      goto LABEL_81;
    }
LABEL_91:
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    goto LABEL_123;
  }
  if (!*((void *)this + 63)) {
    goto LABEL_91;
  }
LABEL_81:
  memset(&v69, 0, sizeof(v69));
  uint64_t v31 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<cl:civicAddress>\r\n<cl:country>");
  int v32 = *((char *)this + 519);
  if (v32 >= 0) {
    v33 = (char *)this + 496;
  }
  else {
    v33 = (const std::string::value_type *)*((void *)this + 62);
  }
  if (v32 >= 0) {
    std::string::size_type v34 = *((unsigned __int8 *)this + 519);
  }
  else {
    std::string::size_type v34 = *((void *)this + 63);
  }
  std::string::append(v31, v33, v34);
  std::string::append(&v69, "</cl:country>\r\n", 0xFuLL);
  if (*((char *)this + 543) < 0)
  {
    if (!*((void *)this + 66)) {
      goto LABEL_100;
    }
  }
  else if (!*((unsigned char *)this + 543))
  {
    goto LABEL_100;
  }
  std::string::append(&v69, "<cl:A1>", 7uLL);
  int v35 = *((char *)this + 543);
  if (v35 >= 0) {
    v36 = (char *)this + 520;
  }
  else {
    v36 = (const std::string::value_type *)*((void *)this + 65);
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *((unsigned __int8 *)this + 543);
  }
  else {
    std::string::size_type v37 = *((void *)this + 66);
  }
  std::string::append(&v69, v36, v37);
  std::string::append(&v69, "</cl:A1>\r\n", 0xAuLL);
LABEL_100:
  if (*((char *)this + 567) < 0)
  {
    if (!*((void *)this + 69)) {
      goto LABEL_111;
    }
  }
  else if (!*((unsigned char *)this + 567))
  {
    goto LABEL_111;
  }
  std::string::append(&v69, "<cl:A3>", 7uLL);
  int v38 = *((char *)this + 567);
  if (v38 >= 0) {
    uint64_t v39 = (char *)this + 544;
  }
  else {
    uint64_t v39 = (const std::string::value_type *)*((void *)this + 68);
  }
  if (v38 >= 0) {
    std::string::size_type v40 = *((unsigned __int8 *)this + 567);
  }
  else {
    std::string::size_type v40 = *((void *)this + 69);
  }
  std::string::append(&v69, v39, v40);
  std::string::append(&v69, "</cl:A3>\r\n", 0xAuLL);
LABEL_111:
  if ((*((char *)this + 591) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 591)) {
      goto LABEL_122;
    }
LABEL_115:
    std::string::append(&v69, "<cl:PC>", 7uLL);
    int v41 = *((char *)this + 591);
    if (v41 >= 0) {
      uint64_t v42 = (char *)this + 568;
    }
    else {
      uint64_t v42 = (const std::string::value_type *)*((void *)this + 71);
    }
    if (v41 >= 0) {
      std::string::size_type v43 = *((unsigned __int8 *)this + 591);
    }
    else {
      std::string::size_type v43 = *((void *)this + 72);
    }
    std::string::append(&v69, v42, v43);
    std::string::append(&v69, "</cl:PC>\r\n", 0xAuLL);
    goto LABEL_122;
  }
  if (*((void *)this + 72)) {
    goto LABEL_115;
  }
LABEL_122:
  std::string::append(&v69, "</cl:civicAddress>\r\n", 0x14uLL);
LABEL_123:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v44 = &v69;
  }
  else {
    v44 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v64, (const std::string::value_type *)v44, v45);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  std::string::append(&v64, "</gp:location-info>\r\n", 0x15uLL);
  if (*((char *)this + 639) < 0)
  {
    if (!*((void *)this + 78)) {
      goto LABEL_146;
    }
  }
  else if (!*((unsigned char *)this + 639))
  {
    goto LABEL_146;
  }
  uint64_t v46 = *((void *)this + 80);
  if (!v46) {
    goto LABEL_146;
  }
  if (*(char *)(v46 + 31) < 0)
  {
    if (*(void *)(v46 + 16)) {
      goto LABEL_138;
    }
LABEL_146:
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    goto LABEL_147;
  }
  if (!*(unsigned char *)(v46 + 31)) {
    goto LABEL_146;
  }
LABEL_138:
  memset(&v69, 0, sizeof(v69));
  uint64_t v47 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<gp:method>");
  int v48 = *((char *)this + 639);
  if (v48 >= 0) {
    v49 = (char *)this + 616;
  }
  else {
    v49 = (const std::string::value_type *)*((void *)this + 77);
  }
  if (v48 >= 0) {
    std::string::size_type v50 = *((unsigned __int8 *)this + 639);
  }
  else {
    std::string::size_type v50 = *((void *)this + 78);
  }
  std::string::append(v47, v49, v50);
  std::string::append(&v69, "</gp:method>\r\n", 0xEuLL);
LABEL_147:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v51 = &v69;
  }
  else {
    uint64_t v51 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v64, (const std::string::value_type *)v51, v52);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  std::string::append(&v64, "<gp:usage-rules/>\r\n</gp:geopriv>\r\n", 0x22uLL);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v53 = &v64;
  }
  else {
    v53 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = v64.__r_.__value_.__l.__size_;
  }
  std::string::append(&v65, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)this + 9))
  {
    memset(&v68, 0, sizeof(v68));
    std::string::basic_string[abi:ne180100]<0>(&v68, "</status>\r\n");
    SipGeoLocationBody::_timeStamp(&v69, (uint64_t)this);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v55 = &v69;
    }
    else {
      uint64_t v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v56 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v56 = v69.__r_.__value_.__l.__size_;
    }
    std::string::append(&v68, (const std::string::value_type *)v55, v56);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    std::string::append(&v68, "</tuple>\r\n", 0xAuLL);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v57 = &v68;
    }
    else {
      v57 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v58 = v68.__r_.__value_.__l.__size_;
    }
    std::string::append(&v65, (const std::string::value_type *)v57, v58);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      v59 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_188:
      operator delete(v59);
    }
  }
  else
  {
    memset(&v69, 0, sizeof(v69));
    SipGeoLocationBody::_timeStamp(&v69, (uint64_t)this);
    std::string::append(&v69, "</dm:device>\r\n", 0xEuLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v60 = &v69;
    }
    else {
      v60 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v61 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v69.__r_.__value_.__l.__size_;
    }
    std::string::append(&v65, (const std::string::value_type *)v60, v61);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      v59 = (void *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_188;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v69, "</presence>\r\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v62 = &v69;
  }
  else {
    v62 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v65, (const std::string::value_type *)v62, v63);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &v65);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
}

void sub_1C556E9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SipGeoLocationBody::contentLength(SipGeoLocationBody *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C556EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipGeoLocationBody::decode()
{
  return 1;
}

{
  return 1;
}

void SipGeoLocationBody::addedToPart(SipGeoLocationBody *this, SipBodyPart *a2)
{
  uint64_t v4 = (char *)this + 16;
  if (*((unsigned char *)this + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "Content-ID");
    SipUri::getContentIdString();
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "Content-ID");
  SipUri::asString((uint64_t)v4, &__p);
  SipBodyPart::setHeader((unint64_t *)a2, (uint64_t)v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (*((unsigned char *)this + 10)) {
    SipBodyPart::setHeader((unint64_t *)a2, (uint64_t)"Content-Disposition", &SipGeoLocationBody::kContentDisposition);
  }
}

void sub_1C556ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SipGeoLocationBody::~SipGeoLocationBody(SipGeoLocationBody *this)
{
  SipGeoLocationBody::~SipGeoLocationBody(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1F20DC328;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  SipUri::~SipUri((SipGeoLocationBody *)((char *)this + 16));
}

void SipGeoLocationBody::clone(SipGeoLocationBody *this)
{
}

void sub_1C556EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12)
{
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  long long v22 = *(std::__shared_weak_count **)(v12 + 648);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(char *)(v12 + 639) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v12 + 615) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v12 + 591) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v12 + 567) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v12 + 543) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v12 + 519) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v12 + 495) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v12 + 471) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v12 + 447) < 0) {
    operator delete(*v14);
  }
  SipUri::~SipUri(v13);
  MEMORY[0x1C878E320](v12, 0x10B3C4094684CABLL);
  _Unwind_Resume(a1);
}

const char *SipGeoLocationBody::contentType(SipGeoLocationBody *this)
{
  return "application/pidf+xml";
}

void std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C556F264(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeCircle,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C556F3B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_SipGeoLocationBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipGeoLocationBody::kContentDisposition, "render; handling=optional");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipGeoLocationBody::kContentDisposition, &dword_1C51D1000);
}

void LazuliToPathHeader::LazuliToPathHeader(LazuliToPathHeader *this, const LazuliRouteSet *a2)
{
  time_t v3 = LazuliHeader::LazuliHeader((std::string *)this, (const std::string *)"To-Path");
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DC588;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v3[2].__r_.__value_.__r.__words[1], a2);
}

void sub_1C556F554(_Unwind_Exception *a1)
{
  LazuliHeader::~LazuliHeader(v1);
  _Unwind_Resume(a1);
}

void LazuliToPathHeader::create(void *a1@<X8>)
{
  time_t v3 = (char *)operator new(0x88uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)time_t v3 = &unk_1F20DC608;
  uint64_t v4 = v3 + 24;
  LazuliHeader::LazuliHeader((std::string *)v3 + 1, (const std::string *)"To-Path");
  *((void *)v3 + 10) = &unk_1F20E7F48;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *((void *)v3 + 3) = &unk_1F20DC658;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 + 5);
  if (!v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    goto LABEL_5;
  }
  if (v5->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    std::__shared_weak_count::__release_weak(v5);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  *a1 = v4;
  a1[1] = v3;
}

void sub_1C556F674(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliToPathHeader::encodeValue(LazuliToPathHeader *this, ImsOutStream *a2)
{
  return 1;
}

BOOL LazuliToPathHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v2 = (void *)(a1 + 56);
  BOOL v3 = LazuliRouteSet::fromString((LazuliRouteSet *)(a1 + 56), a2);
  if (!v3) {
    LazuliRouteSet::clear(v2);
  }
  return v3;
}

std::string::size_type LazuliToPathHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type v3 = 0;
  while (1)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if (v3 >= size) {
      return -1;
    }
    std::string::size_type v5 = std::string::find(this, 60, v3);
    if (v5 == -1) {
      break;
    }
    std::string::size_type v6 = std::string::find(this, 62, v5);
    std::string::size_type v3 = v6 + 1;
    if (v6 == -1) {
      return -1;
    }
  }
  return std::string::find(this, 59, v3);
}

void LazuliToPathHeader::~LazuliToPathHeader(void **this)
{
  *this = &unk_1F20DC588;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20DC588;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliToPathHeader::clone@<D0>(LazuliToPathHeader *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0x88uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C2790;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D7EA8;
  std::string::size_type v5 = v4 + 2;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4[2].__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
  v4[3].__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 48);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DC588;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v4[3].__r_.__value_.__r.__words[1], (LazuliToPathHeader *)((char *)this + 56));
  *(void *)&long long v7 = v4 + 1;
  *((void *)&v7 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1C556F94C(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliToPathHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  *a1 = &unk_1F20DC588;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F20DC588;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTcpTransport::SipTcpTransport(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  long long v7 = (std::__shared_weak_count *)a2[1];
  v19[0] = *a2;
  v19[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    SipTransport::SipTransport((void *)a1, v19, a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    SipTransport::SipTransport((void *)a1, v19, a3);
  }
  *(void *)(a1 + 32) = &unk_1F20CA658;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.tport");
  ImsLogContainer::ImsLogContainer(a1 + 40, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_1F20DC6D8;
  *(void *)(a1 + 32) = &unk_1F20DC770;
  *(void *)(a1 + 40) = &unk_1F20DC798;
  *(void *)(a1 + 144) = &unk_1F20DC7F8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 240) = 1;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 208);
  *(_DWORD *)(a1 + 304) = a4;
  if (v9)
  {
    std::string::size_type v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      int v11 = v10;
      uint64_t v12 = *(void *)(v8 + 200);
      if (v12)
      {
        memset(&__p, 0, sizeof(__p));
        std::string::size_type v13 = *(std::__shared_weak_count **)(v12 + 16);
        if (v13)
        {
          std::string::size_type v14 = std::__shared_weak_count::lock(v13);
          if (v14) {
            uint64_t v15 = *(void *)(v12 + 8);
          }
          else {
            uint64_t v15 = 0;
          }
        }
        else
        {
          uint64_t v15 = 0;
          std::string::size_type v14 = 0;
        }
        if (*(char *)(v15 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
        }
        else {
          std::string __p = *(std::string *)(v15 + 4160);
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v17 = __p;
        }
        std::string::operator=((std::string *)(a1 + 72), &v17);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return a1;
}

void sub_1C556FD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (*(char *)(v21 + 303) < 0) {
    operator delete(*(void **)(v21 + 280));
  }
  long long v26 = *(std::__shared_weak_count **)(v21 + 272);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  long long v27 = *(std::__shared_weak_count **)(v21 + 256);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table(v23);
  long long v28 = *(std::__shared_weak_count **)(v21 + 192);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  long long v29 = *(std::__shared_weak_count **)(v21 + 176);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::string::size_type v30 = *(std::__shared_weak_count **)(v21 + 160);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  ImsLogContainer::~ImsLogContainer(v22);
  *(void *)uint64_t v21 = &unk_1F20C1C30;
  uint64_t v31 = *(std::__shared_weak_count **)(v21 + 16);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  _Unwind_Resume(a1);
}

void SipTcpTransport::~SipTcpTransport(SipTcpTransport *this)
{
  *(void *)this = &unk_1F20DC6D8;
  *((void *)this + 4) = &unk_1F20DC770;
  *((void *)this + 5) = &unk_1F20DC798;
  *((void *)this + 18) = &unk_1F20DC7F8;
  SipTcpTransport::close((std::__shared_weak_count **)this);
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string::size_type v3 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table((uint64_t)this + 200);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::size_type v5 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *((void *)this + 5) = &unk_1F20C9CA0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F20C1C30;
  long long v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  uint64_t vars8;

  SipTcpTransport::~SipTcpTransport(this);
  JUMPOUT(0x1C878E320);
}

void SipTcpTransport::close(std::__shared_weak_count **this)
{
  SipTcpTransport::removeConnections((SipTcpTransport *)this, 0, 0, 1);
  uint64_t v2 = this[21];
  if (v2)
  {
    p_shared_weak_owners = &v2[4].__shared_weak_owners_;
    uint64_t v4 = (std::__shared_weak_count *)v2[5].__vftable;
    if (v4)
    {
      std::string::size_type v5 = std::__shared_weak_count::lock(v4);
      if (!v5 || (uint64_t v6 = *p_shared_weak_owners, std::__shared_weak_count::__release_shared[abi:ne180100](v5), !v6))
      {
        long long v7 = (std::__shared_weak_count *)v2[5].__vftable;
        uint64_t *p_shared_weak_owners = 0;
        v2[5].__vftable = 0;
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      uint64_t *p_shared_weak_owners = 0;
      v2[5].__vftable = 0;
    }
    if (this[33])
    {
      SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress(this[21], &__p);
      if (!v15) {
        goto LABEL_17;
      }
      uint64_t v8 = std::__shared_weak_count::lock(v15);
      if (!v8)
      {
        if (v15) {
          std::__shared_weak_count::__release_weak(v15);
        }
LABEL_17:
        std::string __p = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        IpAddress::asString();
      }
      uint64_t v9 = __p;
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      if (!v9) {
        goto LABEL_17;
      }
    }
  }
  std::string::size_type v10 = this[22];
  this[21] = 0;
  this[22] = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v11 = this[24];
  this[23] = 0;
  this[24] = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = this[32];
  this[31] = 0;
  this[32] = 0;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string::size_type v13 = this[34];
  this[33] = 0;
  this[34] = 0;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5570198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTcpTransport::~SipTcpTransport(SipTcpTransport *this)
{
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 40));
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 144));
}

{
  uint64_t vars8;

  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 40));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 144));
  JUMPOUT(0x1C878E320);
}

void *SipTcpTransport::logPrefix(SipTcpTransport *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipTcpTransport: ", 17);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'SipTcpTransport::logPrefix(SipTcpTransport *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"SipTcpTransport: ", 17);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipTcpTransport::handleIncomingConnection(uint64_t a1, uint64_t *a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)(a1 + 152));
  if (v6) {
    uint64_t v3 = v6 + 144;
  }
  else {
    uint64_t v3 = 0;
  }
  v8[0] = v3;
  v8[1] = v7;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v4 = a2[1];
  v5[0] = *a2;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  SipTcpConnection::create(v8, v5, 0, &v9);
}

void sub_1C55703E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpTransport::addConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  LoggableString::LoggableString((LoggableString *)__p, "Transport");
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, __p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = v6 + 1;
  *(_DWORD *)(v5 + 360) = v6;
  uint64_t v7 = *(void *)(v5 + 280);
  if (v7)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 104))(__p);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
  }
  IpAddress::asString();
}

void sub_1C5570790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTcpTransport::handleIncomingConnection(uint64_t a1, uint64_t *a2)
{
}

void SipTcpTransport::initialize(SipTcpTransport *this@<X0>, std::string *__str@<X3>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*((void *)this + 21)) {
    SipTcpTransport::close((std::__shared_weak_count **)this);
  }
  std::string::operator=((std::string *)((char *)this + 280), __str);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, (void *)this + 19);
  int v11 = operator new(0xA8uLL);
  uint64_t v12 = v11;
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = &unk_1F20DC8D8;
  std::string::size_type v13 = v11 + 3;
  uint64_t v14 = (std::__shared_weak_count *)__p[1];
  uint64_t v15 = (std::__shared_weak_count *)((char *)__p[0] + 32);
  if (!__p[0]) {
    uint64_t v15 = 0;
  }
  v61[0] = v15;
  v61[1] = (std::__shared_weak_count *)__p[1];
  __p[0] = 0;
  __p[1] = 0;
  SipListenSocketMultiplexer::SipListenSocketMultiplexer(v11 + 3, (uint64_t *)v61);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 22);
  *((void *)this + 21) = v13;
  *((void *)this + 22) = v12;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr, SipTcpTransport *))(*(void *)this + 104))(v61, this);
  if (!v61[1])
  {
    std::string v17 = 0;
LABEL_31:
    int v19 = 104;
LABEL_32:
    uint64_t v23 = 0;
    *(void *)(a6 + 64) = 0;
    long long v25 = 0uLL;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
LABEL_33:
    long long v64 = v25;
    long long v65 = v25;
    long long v66 = v25;
    v61[0] = (std::__shared_weak_count *)&unk_1F20B2680;
    v61[1] = (std::__shared_weak_count *)&_bambiDomain;
    int v62 = 0x40000000;
    long long v27 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v61, "NetworkManager un-available");
    ImsResult::ImsResult((ImsResult *)a6, v27);
    ImsResult::~ImsResult((ImsResult *)v61);
    uint64_t v24 = 0;
    goto LABEL_34;
  }
  std::string v17 = std::__shared_weak_count::lock(v61[1]);
  if (v17) {
    int v18 = v61[0];
  }
  else {
    int v18 = 0;
  }
  if (v61[1]) {
    std::__shared_weak_count::__release_weak(v61[1]);
  }
  if (!v18) {
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count **__return_ptr, std::__shared_weak_count *))v18->__vftable[5].~__shared_weak_count)(v61, v18);
  int v19 = (int)v61[0];
  ((void (*)(std::__shared_weak_count **__return_ptr, std::__shared_weak_count *))v18->__vftable[4].__on_zero_shared)(v61, v18);
  std::string::size_type v20 = v61[0];
  if (v61[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61[1]);
  }
  if (!v20) {
    goto LABEL_32;
  }
  ((void (*)(void **__return_ptr, std::__shared_weak_count *))v18->__vftable[4].__on_zero_shared)(__p, v18);
  uint64_t v21 = __p[0];
  long long v22 = (std::__shared_weak_count *)*((void *)this + 22);
  v67[2] = *((void *)this + 21);
  std::string v68 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr))(*(void *)v21 + 120))(v61);
  uint64_t v24 = v61[0];
  uint64_t v23 = v61[1];
  v61[0] = 0;
  v61[1] = 0;
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  *(void *)(a6 + 64) = 0;
  long long v25 = 0uLL;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if (!v24) {
    goto LABEL_33;
  }
  long long v26 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    __p[0] = (void *)sImsDispatchQueue;
LABEL_81:
    dispatch_retain(v26);
    goto LABEL_82;
  }
  long long v26 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
  sImsDispatchQueue = (uint64_t)v26;
  __p[0] = v26;
  if (v26) {
    goto LABEL_81;
  }
LABEL_82:
  v67[0] = &unk_1F20B3050;
  v67[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v61, "");
  ((void (*)(std::__shared_weak_count *, uint64_t, void **, uint64_t, void, void *, std::__shared_weak_count **, std::string *, char))v24->__on_zero_shared)(v24, a3, __p, a4, 0, v67, v61, __str, 1);
  if (v63 < 0) {
    operator delete(v61[0]);
  }
  ims::CFType::~CFType((ims::CFType *)v67);
  if (__p[0]) {
    dispatch_release((dispatch_object_t)__p[0]);
  }
LABEL_34:
  if ((*(unsigned int (**)(void, void))(**(void **)(a6 + 8) + 24))(*(void *)(a6 + 8), *(unsigned int *)(a6 + 16)))
  {
    uint64_t v28 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"unable to initialize TCP transport: ", 36);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, v28);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    long long v29 = (std::__shared_weak_count *)*((void *)this + 22);
    *((void *)this + 21) = 0;
    *((void *)this + 22) = 0;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    goto LABEL_75;
  }
  uint64_t v30 = *((void *)this + 21);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v30 + 136);
  *(void *)(v30 + 128) = v24;
  *(void *)(v30 + 136) = v23;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v32 = *((void *)this + 21);
  uint64_t v33 = *(void *)(v32 + 128);
  std::string::size_type v34 = *(std::__shared_weak_count **)(v32 + 136);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v33 + 56))(__p);
  (*(void (**)(std::__shared_weak_count **__return_ptr))(*(void *)__p[0] + 32))(v61);
  long long v35 = *(_OWORD *)v61;
  v61[0] = 0;
  v61[1] = 0;
  v36 = (std::__shared_weak_count *)*((void *)this + 32);
  *(_OWORD *)((char *)this + 248) = v35;
  if (v36)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    if (v61[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61[1]);
    }
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v37 = *((void *)this + 21);
  uint64_t v38 = *(void *)(v37 + 128);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 + 136);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void))(*(void *)v38 + 48))(v38, *((unsigned int *)this + 76));
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if ((*(unsigned int (**)(void))(**(void **)a3 + 56))() == a5)
  {
LABEL_74:
    uint64_t v52 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"outgoing connections will use port ", 35);
    *(unsigned char *)(v52 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v52 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 31) + 64))(*((void *)this + 31), a5);
    goto LABEL_75;
  }
  uint64_t v59 = 0;
  v60 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a3 + 32))(&v59);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 64))(v59, a5);
  std::string::size_type v40 = (char *)this + 40;
  uint64_t v41 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Opening listener socket for outgoing connection: ", 49);
  *(unsigned char *)(v41 + 17) = 0;
  uint64_t v42 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v59 + 40))(v59, v41);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v42[17] = 0;
  std::string::size_type v43 = operator new(0xA0uLL);
  v43[1] = 0;
  v43[2] = 0;
  *std::string::size_type v43 = &unk_1F20B9BC0;
  v61[0] = 0;
  v61[1] = 0;
  ImsListenSocket::ImsListenSocket((uint64_t)(v43 + 3), (uint64_t *)v61, v19);
  __p[0] = v43 + 3;
  __p[1] = v43;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)__p, v43 + 4, (uint64_t)(v43 + 3));
  long long v44 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v45 = (std::__shared_weak_count *)*((void *)this + 24);
  *(_OWORD *)((char *)this + 184) = v44;
  if (v45)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v46 = *((void *)this + 23);
  uint64_t v47 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    uint64_t v47 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v47;
    dispatch_object_t object = v47;
    if (!v47) {
      goto LABEL_64;
    }
  }
  dispatch_retain(v47);
LABEL_64:
  v57[0] = &unk_1F20B3050;
  v57[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  LOBYTE(v53) = 1;
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, uint64_t, void, void *, void **, std::string *, int))(*(void *)v46 + 40))(v61, v46, &v59, &object, a4, 0, v57, __p, __str, v53);
  ImsResult::operator=(a6, (uint64_t)v61);
  ImsResult::~ImsResult((ImsResult *)v61);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  ims::CFType::~CFType((ims::CFType *)v57);
  if (object) {
    dispatch_release(object);
  }
  int v48 = (*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 24))(*(void *)(a6 + 8), *(unsigned int *)(a6 + 16));
  char v49 = v48;
  if (v48)
  {
    uint64_t v50 = (*(uint64_t (**)(char *))(*(void *)v40 + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(void *)v40 + 16))((char *)this + 40, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"Unable to open listener socket: ", 32);
    *(unsigned char *)(v50 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, v50);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v50 + 17) = 0;
    SipTcpTransport::close((std::__shared_weak_count **)this);
    uint64_t v51 = (std::__shared_weak_count *)*((void *)this + 22);
    *((void *)this + 21) = 0;
    *((void *)this + 22) = 0;
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if ((v49 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_75:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1C5571314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, dispatch_object_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)(v29 - 120));
  if (object) {
    dispatch_release(object);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void SipTcpTransport::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(*(void *)a2 + 168))
  {
    std::string::operator=((std::string *)(a1 + 280), (const std::string *)(*(void *)a2 + 280));
    uint64_t v8 = *(void *)(*(void *)a2 + 168);
    uint64_t v9 = *(void *)(*(void *)a2 + 176);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 176);
    *(void *)(a1 + 168) = v8;
    *(void *)(a1 + 176) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      uint64_t v8 = *(void *)(a1 + 168);
    }
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(*(void *)a2 + 304);
    uint64_t v11 = *(void *)(v8 + 128);
    uint64_t v12 = *(std::__shared_weak_count **)(v8 + 136);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 56))(&v16);
    (*(void (**)(long long *__return_ptr))(*(void *)v16 + 32))(&v18);
    long long v13 = v18;
    long long v18 = 0uLL;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 256);
    *(_OWORD *)(a1 + 248) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 248) + 64))(*(void *)(a1 + 248), a3);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)&long long v18 = &unk_1F20B2680;
    *((void *)&v18 + 1) = &_bambiDomain;
    int v19 = 1073741825;
    uint64_t v15 = (const std::string *)ImsResult::operator<<<char [30]>((uint64_t)&v18, "old transport not initialized");
    ImsResult::ImsResult((ImsResult *)a4, v15);
    ImsResult::~ImsResult((ImsResult *)&v18);
  }
}

void sub_1C5571678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpTransport::removeConnections(SipTcpTransport *this, int a2, int a3, int a4)
{
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  long long v35 = 0;
  v36 = 0;
  uint64_t v37 = 0;
  uint64_t v5 = (void *)*((void *)this + 27);
  if (v5)
  {
    char v6 = a3;
    uint64_t v8 = (char *)this + 40;
    if (a3) {
      uint64_t v9 = (unint64_t *)&v38;
    }
    else {
      uint64_t v9 = (unint64_t *)&v35;
    }
    do
    {
      for (i = (void *)v5[7]; i; i = (void *)*i)
      {
        uint64_t v11 = i + 2;
        if (a2)
        {
          uint64_t v12 = *v11 + 336;
          while (1)
          {
            uint64_t v12 = *(void *)v12;
            if (!v12) {
              break;
            }
            if (((*(uint64_t (**)(void))(**(void **)(v12 + 16) + 40))(*(void *)(v12 + 16)) & 1) == 0)
            {
              uint64_t v13 = (*(uint64_t (**)(char *))(*(void *)v8 + 64))((char *)this + 40);
              (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))((char *)this + 40, v13);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"keeping ", 8);
              *(unsigned char *)(v13 + 17) = 0;
              uint64_t v14 = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 104))(*v11, v13);
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v14[17] = 0;
              goto LABEL_12;
            }
          }
        }
        std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100](v9, (long long *)i + 1);
LABEL_12:
        ;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    uint64_t v15 = v38;
    for (j = v39; v15 != j; v15 += 2)
    {
      uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)v8 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))((char *)this + 40, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"forceReset for ", 15);
      *(unsigned char *)(v17 + 17) = 0;
      long long v18 = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v15 + 104))(*v15, v17);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v18[17] = 0;
      uint64_t v19 = *v15;
      *(unsigned char *)(v19 + 514) = v6;
      uint64_t v33 = v19;
      long long v20 = (std::__shared_weak_count *)v15[1];
      std::string::size_type v34 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(SipTcpTransport *, uint64_t *))(*(void *)this + 80))(this, &v33);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
  }
  long long v21 = v35;
  long long v22 = v36;
  if (v35 != v36)
  {
    uint64_t v23 = (char *)this + 40;
    if (a4) {
      uint64_t v24 = "resetOnDelete for ";
    }
    else {
      uint64_t v24 = "no resetOnDelete for ";
    }
    if (a4) {
      uint64_t v25 = 18;
    }
    else {
      uint64_t v25 = 21;
    }
    do
    {
      uint64_t v26 = (*(uint64_t (**)(char *))(*(void *)v23 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v23 + 16))((char *)this + 40, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"shutdown with ", 14);
      *(unsigned char *)(v26 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)v24, v25);
      *(unsigned char *)(v26 + 17) = 0;
      long long v27 = (unsigned char *)(*(uint64_t (**)(void *, uint64_t))(*(void *)*v21 + 104))(*v21, v26);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v27[17] = 0;
      SipTcpConnection::shutdown((SipTcpConnection *)*v21, a4, (uint64_t)v32);
      ImsResult::~ImsResult((ImsResult *)v32);
      uint64_t v30 = (SipTcpConnection *)*v21;
      uint64_t v28 = (std::__shared_weak_count *)v21[1];
      uint64_t v31 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(SipTcpTransport *, SipTcpConnection **))(*(void *)this + 80))(this, &v30);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  uint64_t v41 = &v35;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  long long v35 = (void **)&v38;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_1C5571B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void **a23)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v23 - 96) = &a23;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  a23 = (void **)(v23 - 120);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

double SipTcpTransport::setRemoteOutboundAddress@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 168))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v7);
    long long v4 = v7;
    long long v7 = 0uLL;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 272);
    *(_OWORD *)(a1 + 264) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
    }
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (void *)(a1 + 152));
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::addDelegateForRemoteAddress();
  }
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741827;
  return result;
}

void sub_1C5571D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::addDelegateForRemoteAddress()
{
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  IpAddress::asString();
}

void sub_1C5571E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipTcpTransport::printConnectionMap(ImsOutStream *this, ImsOutStream *a2)
{
  if (*((void *)this + 28))
  {
    for (i = (void *)*((void *)this + 27); i; i = (void *)*i)
    {
      for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
        this = SipTcpConnection::printDebugInfo((SipTcpConnection *)j[2], a2);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"no connections", 14);
    *((unsigned char *)a2 + 17) = 0;
    this = (ImsOutStream *)(*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  return this;
}

void SipTcpTransport::removeConnection(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 104))(&__p);
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v10);
  if (v3) {
    long long v4 = __p;
  }
  else {
    long long v4 = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)v4[2];
    if (v5 && (char v6 = std::__shared_weak_count::lock(v5)) != 0)
    {
      int v7 = *(unsigned __int8 *)(v4[1] + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (!v7) {
        goto LABEL_14;
      }
    }
    else if (!MEMORY[0xA79])
    {
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t, void))(*v4 + 192))(v4, 24, 0);
  }
LABEL_14:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
LABEL_16:
  uint64_t v8 = *(void *)(*(void *)a2 + 280);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 104))(&__p);
  }
  else
  {
    std::string __p = 0;
    std::string::size_type v10 = 0;
  }
  IpAddress::asString();
}

void sub_1C55724F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTcpTransport::removeConnection(uint64_t a1, uint64_t a2)
{
}

void SipTcpTransport::setServiceClass(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    while (1)
    {
      long long v4 = (void *)v2[7];
      if (v4) {
        break;
      }
LABEL_15:
      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return;
      }
    }
    while (1)
    {
      uint64_t v5 = v4[2];
      if (!v5 || !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 176))(v5)) {
        goto LABEL_14;
      }
      uint64_t v6 = v4[2];
      uint64_t v8 = *(void *)(v6 + 280);
      int v7 = *(std::__shared_weak_count **)(v6 + 288);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if (v8)
        {
          uint64_t v9 = v4[2];
          uint64_t v8 = *(void *)(v9 + 280);
          std::string::size_type v10 = *(std::__shared_weak_count **)(v9 + 288);
          if (!v10) {
            goto LABEL_11;
          }
          char v11 = 0;
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_12;
        }
      }
      else if (v8)
      {
        std::string::size_type v10 = 0;
LABEL_11:
        char v11 = 1;
LABEL_12:
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 160))(v8, a2);
        if ((v11 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
LABEL_14:
      long long v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_15;
      }
    }
  }
}

void sub_1C5572668(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpTransport::updateCrlfKeepAliveInterval(SipTcpTransport *this, __int32 a2, __int32 a3)
{
  for (i = (void *)*((void *)this + 27); i; i = (void *)*i)
  {
    for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
    {
      int v7 = j[2];
      if (v7)
      {
        if ((*(unsigned int (**)(uint64_t *))(*v7 + 176))(v7)) {
          SipTcpConnection::updateCrlfKeepAliveInterval((int8x8_t *)j[2], a2, a3);
        }
      }
    }
  }
}

void SipTcpTransport::updateCrlfKeepAliveNetwork(SipTcpTransport *this)
{
  for (i = (void *)*((void *)this + 27); i; i = (void *)*i)
  {
    for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
    {
      uint64_t v3 = j[2];
      if (v3)
      {
        if ((*(unsigned int (**)(uint64_t *))(*v3 + 176))(v3)) {
          SipTcpConnection::updateCrlfKeepAliveNetwork((int8x8_t *)j[2]);
        }
      }
    }
  }
}

uint64_t SipTcpTransport::handleKeepAliveWake(SipTcpTransport *this)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  std::unordered_map<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>::unordered_map((uint64_t)&v5, (uint64_t)this + 200);
  for (i = (void *)v6; i; i = (void *)*i)
  {
    for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
    {
      uint64_t v3 = j[2];
      if (v3 && (*(unsigned int (**)(uint64_t *))(*v3 + 176))(v3)) {
        SipTcpConnection::handleKeepAliveWake((SipTcpConnection *)j[2]);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table((uint64_t)&v5);
}

void sub_1C557282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipTcpTransport::localAddress(SipTcpTransport *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    long long v4 = *(std::__shared_weak_count **)(v2 + 136);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1C55728C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpTransport::send(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 88))())
  {
    v15[1] = &_bambiDomain;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[2] = 0x40000000;
    if (!a3 || (uint64_t v8 = *(int8x8_t **)a3) == 0)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      IpAddress::asString();
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a3 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v9;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    SipTcpConnection::sendData(v8, a4);
    ImsResult::~ImsResult((ImsResult *)v15);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = a1 + 40;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"invalid address specified in send: ", 35);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = (unsigned char *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v12);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 1073741825;
  }
}

void sub_1C55731F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void SipTcpTransport::sendMessageFromConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v6);
  if (!v9 || (uint64_t v10 = *(void *)(a1 + 8)) == 0)
  {
LABEL_6:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0x40000000;
    if (!v9) {
      return;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 120))(v10, a2, a3);
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C55733D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTcpTransport::sendMessageFromConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t SipTcpTransport::shouldResetConnection()
{
  return 0;
}

uint64_t non-virtual thunk to'SipTcpTransport::shouldResetConnection()
{
  return 0;
}

void SipTcpTransport::triggerSocketErrors(SipTcpTransport *this, const ImsResult *a2)
{
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      for (i = (uint64_t *)v2[7]; i; i = (uint64_t *)*i)
      {
        if (v3 >= v24)
        {
          unint64_t v6 = v23;
          uint64_t v7 = (uint64_t)&v3[-v23] >> 4;
          unint64_t v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 60) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v9 = (uint64_t)&v24[-v23];
          if ((uint64_t)&v24[-v23] >> 3 > v8) {
            unint64_t v8 = v9 >> 3;
          }
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v10 = v8;
          }
          uint64_t v28 = &v24;
          if (v10 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v11 = (char *)operator new(16 * v10);
          uint64_t v12 = &v11[16 * v7];
          long long v13 = *((_OWORD *)i + 1);
          *(_OWORD *)uint64_t v12 = v13;
          if (*((void *)&v13 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
            uint64_t v3 = (char *)*((void *)&v23 + 1);
          }
          if (v3 == (char *)v6)
          {
            int64x2_t v16 = vdupq_n_s64(v6);
            uint64_t v14 = &v11[16 * v7];
          }
          else
          {
            uint64_t v14 = &v11[16 * v7];
            do
            {
              long long v15 = *((_OWORD *)v3 - 1);
              v3 -= 16;
              *((_OWORD *)v14 - 1) = v15;
              v14 -= 16;
              *(void *)uint64_t v3 = 0;
              *((void *)v3 + 1) = 0;
            }
            while (v3 != (char *)v6);
            int64x2_t v16 = (int64x2_t)v23;
          }
          uint64_t v3 = v12 + 16;
          *(void *)&long long v23 = v14;
          *((void *)&v23 + 1) = v12 + 16;
          int64x2_t v26 = v16;
          long long v17 = v24;
          uint64_t v24 = &v11[16 * v10];
          long long v27 = v17;
          uint64_t v25 = (void **)v16.i64[0];
          std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v25);
        }
        else
        {
          *(void *)uint64_t v3 = i[2];
          uint64_t v5 = i[3];
          *((void *)v3 + 1) = v5;
          if (v5) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
          }
          v3 += 16;
        }
        *((void *)&v23 + 1) = v3;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
    for (j = (char *)v23; j != v3; j += 16)
    {
      uint64_t v19 = *(void *)j;
      uint64_t v21 = *(void *)(*(void *)j + 280);
      uint64_t v20 = *(std::__shared_weak_count **)(*(void *)j + 288);
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (v21)
        {
          uint64_t v19 = *(void *)j;
LABEL_30:
          (*(void (**)(uint64_t, const ImsResult *))(*(void *)v19 + 144))(v19, a2);
        }
      }
      else if (v21)
      {
        goto LABEL_30;
      }
    }
  }
  uint64_t v25 = (void **)&v23;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_1C5573604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void SipTcpTransport::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    unint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 8);
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55736BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTcpTransport::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void SipTcpTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = (std::__shared_weak_count *)a7[1];
  v8[0] = *a7;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransport::processIncomingMessage(a1, a2, a3, a4, a5, a6, v8);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C5573744(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTcpTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
}

char *SipTcpTransport::name(SipTcpTransport *this)
{
  return &SipTransport::kTransportTCP;
}

uint64_t SipTcpTransport::group@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

void SipTcpTransport::transportLayer(SipTcpTransport *this@<X0>, void *a2@<X8>)
{
  SipTransport::transportLayer(this, v4);
  uint64_t v3 = (std::__shared_weak_count *)v4[1];
  *a2 = v4[0];
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t SipTcpTransport::messageEncoding(SipTcpTransport *this)
{
  return *((void *)this + 3);
}

void SipTcpTransport::stackId(SipTcpTransport *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

uint64_t non-virtual thunk to'SipTcpTransport::group@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this - 128);
  *a2 = *(void *)(this - 136);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

void non-virtual thunk to'SipTcpTransport::transportLayer(SipTcpTransport *this@<X0>, void *a2@<X8>)
{
}

uint64_t non-virtual thunk to'SipTcpTransport::messageEncoding(SipTcpTransport *this)
{
  return *((void *)this - 15);
}

void non-virtual thunk to'SipTcpTransport::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_emplace<SipListenSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipListenSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DC8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipListenSocketMultiplexer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5573BAC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::__emplace_unique_key_args<std::shared_ptr<SipTcpConnection>,std::shared_ptr<SipTcpConnection> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v9;
    }
    long long v13 = *(void **)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (i = (void *)*v13; i; i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int64x2_t v16 = operator new(0x20uLL);
  *int64x2_t v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v16[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
      else {
        unint64_t v12 = v9;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v12);
  if (v24)
  {
    *int64x2_t v16 = *v24;
LABEL_40:
    void *v24 = v16;
    goto LABEL_41;
  }
  *int64x2_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v12) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void sub_1C5573E64(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::unordered_map<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1C5573F38(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v29 = v6;
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    long long v13 = *(char ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(char **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int64x2_t v16 = (void *)(a1 + 16);
  uint64_t v31 = 0;
  float v17 = (char *)operator new(0x50uLL);
  i = v17;
  v30[0] = v17;
  v30[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + 1) = v8;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v17 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
    *((void *)v17 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(i + 40) = 0u;
  *(_OWORD *)(i + 56) = 0u;
  *((_DWORD *)i + 18) = *(_DWORD *)(a3 + 56);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>((uint64_t)(i + 40), *(void *)(a3 + 32));
  for (j = *(void **)(a3 + 40); j; j = (void *)*j)
    std::__hash_table<std::shared_ptr<SipTcpConnection>,std::hash<std::shared_ptr<SipTcpConnection>>,std::equal_to<std::shared_ptr<SipTcpConnection>>,std::allocator<std::shared_ptr<SipTcpConnection>>>::__emplace_unique_key_args<std::shared_ptr<SipTcpConnection>,std::shared_ptr<SipTcpConnection> const&>((uint64_t)(i + 40), j[2], j[2], j[3]);
  LOBYTE(v31) = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  int64x2_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)i = *v26;
LABEL_43:
    *int64x2_t v26 = i;
    goto LABEL_44;
  }
  *(void *)i = *v16;
  *int64x2_t v16 = i;
  *(void *)(v25 + 8 * v12) = v16;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    int64x2_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_43;
  }
LABEL_44:
  v30[0] = 0;
  ++*v29;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return i;
}

void sub_1C5574220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this)
{
  uint64_t v1 = SipHeader::SipHeader((uint64_t)this, (const std::string *)"Authorization");
  *(void *)(v1 + 64) = 0;
  *(void *)uint64_t v1 = &unk_1F20DC928;
  std::string::operator=((std::string *)(v1 + 8), (const std::string *)"Proxy-Authorization");
}

void sub_1C55742B8(_Unwind_Exception *a1)
{
  SipAuthorizationHeader::~SipAuthorizationHeader(v1);
  _Unwind_Resume(a1);
}

void SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this, const SipAuthenticateHeader *a2)
{
  uint64_t v2 = SipAuthorizationHeader::SipAuthorizationHeader(this, a2);
  *(void *)uint64_t v2 = &unk_1F20DC928;
  std::string::operator=((std::string *)((char *)v2 + 8), (const std::string *)"Proxy-Authorization");
}

void sub_1C557431C(_Unwind_Exception *a1)
{
  SipAuthorizationHeader::~SipAuthorizationHeader(v1);
  _Unwind_Resume(a1);
}

void SipProxyAuthorizationHeader::~SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this)
{
  SipAuthorizationHeader::~SipAuthorizationHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipProxyAuthorizationHeader::clone(SipProxyAuthorizationHeader *this)
{
}

void sub_1C55743E0(_Unwind_Exception *a1)
{
  SipAuthorizationHeader::~SipAuthorizationHeader(v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void BambiConferenceCallStateMachine::setCall(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[12];
  a1[11] = v5;
  a1[12] = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    uint64_t v9 = v7 + 1824;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v10 = (std::__shared_weak_count *)a1[10];
  a1[9] = v9;
  a1[10] = v8;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void BambiConferenceCallStateMachine::stateMachineName(BambiConferenceCallStateMachine *this@<X0>, LoggableString *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 11)) == 0)
  {
LABEL_6:
    LoggableString::LoggableString(a2, "Unknown Conference");
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C5574564(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::constructStateMachine(BambiConferenceCall *this)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v33, (void *)this + 23);
  std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceCall,BambiCall>((void **)&v31, &v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v2 = (void *)((char *)this + 1896);
  uint64_t v4 = (void *)v31;
  uint64_t v3 = (std::__shared_weak_count *)v32;
  v30[0] = v31;
  v30[1] = v32;
  if (v32)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    BambiConferenceCallStateMachine::setCall(v2, v30);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    BambiConferenceCallStateMachine::setCall(v2, v30);
  }
  uint64_t v5 = (std::__shared_weak_count *)operator new(0xF8uLL);
  uint64_t v6 = v5;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF00;
  uint64_t v7 = (std::__shared_weak_count_vtbl *)&v5[1];
  uint64_t v33 = v4;
  std::string::size_type v34 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallWaitingForHoldState::BambiConferenceCallWaitingForHoldState((SipState *)&v5[1], &v33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t shared_owners = (std::__shared_weak_count *)v6[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      goto LABEL_15;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[9].__vftable = v7;
    v6[9].__shared_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[9].__vftable = v7;
    v6[9].__shared_owners_ = (uint64_t)v6;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_15:
  v29[0] = v7;
  v29[1] = v6;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v2, v29);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  uint64_t v9 = (std::__shared_weak_count *)operator new(0xF8uLL);
  uint8x8_t v10 = v9;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF50;
  unint64_t v11 = (std::__shared_weak_count_vtbl *)&v9[1];
  uint64_t v33 = v4;
  std::string::size_type v34 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallSessionRequestedState::BambiConferenceCallSessionRequestedState((SipState *)&v9[1], &v33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v12 = (std::__shared_weak_count *)v10[9].__shared_owners_;
  if (v12)
  {
    if (v12->__shared_owners_ != -1) {
      goto LABEL_24;
    }
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[9].__vftable = v11;
    v10[9].__shared_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[9].__vftable = v11;
    v10[9].__shared_owners_ = (uint64_t)v10;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_24:
  v28[0] = v11;
  v28[1] = v10;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v2, v28);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  long long v13 = (std::__shared_weak_count *)operator new(0xF8uLL);
  uint64_t v14 = v13;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFA0;
  unint64_t v15 = (std::__shared_weak_count_vtbl *)&v13[1];
  uint64_t v33 = v4;
  std::string::size_type v34 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallSessionConfirmedState::BambiConferenceCallSessionConfirmedState((SipState *)&v13[1], &v33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int64x2_t v16 = (std::__shared_weak_count *)v14[9].__shared_owners_;
  if (v16)
  {
    if (v16->__shared_owners_ != -1) {
      goto LABEL_33;
    }
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v14[9].__vftable = v15;
    v14[9].__shared_owners_ = (uint64_t)v14;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v14[9].__vftable = v15;
    v14[9].__shared_owners_ = (uint64_t)v14;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_33:
  v27[0] = v15;
  v27[1] = v14;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v2, v27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  float v17 = (std::__shared_weak_count *)operator new(0xF8uLL);
  float v18 = v17;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFF0;
  float v19 = (std::__shared_weak_count_vtbl *)&v17[1];
  uint64_t v33 = v4;
  std::string::size_type v34 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallWaitToResumeConfirmedSessionState::BambiConferenceCallWaitToResumeConfirmedSessionState((SipState *)&v17[1], &v33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  float v20 = (std::__shared_weak_count *)v18[9].__shared_owners_;
  if (v20)
  {
    if (v20->__shared_owners_ != -1) {
      goto LABEL_42;
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v18[9].__vftable = v19;
    v18[9].__shared_owners_ = (uint64_t)v18;
    std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v18[9].__vftable = v19;
    v18[9].__shared_owners_ = (uint64_t)v18;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_42:
  v26[0] = v19;
  v26[1] = v18;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v2, v26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  BOOL v21 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v22 = v21;
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD040;
  unint64_t v23 = (std::__shared_weak_count_vtbl *)&v21[1];
  uint64_t v33 = v4;
  std::string::size_type v34 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCallSessionTerminatedState::BambiConferenceCallSessionTerminatedState((SipState *)&v21[1], &v33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v24 = (std::__shared_weak_count *)v22[9].__shared_owners_;
  if (v24)
  {
    if (v24->__shared_owners_ != -1) {
      goto LABEL_51;
    }
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v22[9].__vftable = v23;
    v22[9].__shared_owners_ = (uint64_t)v22;
    std::__shared_weak_count::__release_weak(v24);
  }
  else
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v22[9].__vftable = v23;
    v22[9].__shared_owners_ = (uint64_t)v22;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_51:
  v25[0] = v23;
  v25[1] = v22;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v2, v25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5574A18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceCall,BambiCall>(void **a1, void **a2)
{
  double result = *a2;
  if (*a2 {
    && (uint64_t v4 = a2,
  }
  {
    uint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    uint64_t v4 = a1;
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

void SipTypedStateMachine<BambiConferenceCallState>::addState(uint64_t a1, void *a2)
{
  if (!*a2) {
    return;
  }
  unsigned int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
  unsigned int v5 = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v7 <= v4) {
        unint64_t v9 = v4 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v4;
    }
    uint8x8_t v10 = *(void ***)(*(void *)(a1 + 16) + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(void **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v4)
        {
          if (*((_DWORD *)i + 4) == v4) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v13 = (void *)(a1 + 32);
  i = operator new(0x28uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v6;
  *((_DWORD *)i + 4) = v5;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v15 = *(float *)(a1 + 48);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v9;
    goto LABEL_65;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 24);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_61;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 24);
      goto LABEL_61;
    }
    if (!*(void *)&prime)
    {
      uint64_t v38 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (v38) {
        operator delete(v38);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 24) = 0;
      goto LABEL_61;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float v20 = operator new(8 * *(void *)&prime);
  BOOL v21 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(void *)(*(void *)(a1 + 16) + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  unint64_t v23 = (void *)*v13;
  if (*v13)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v24) = v13;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          uint64_t v31 = *(void *)(a1 + 16);
          if (!*(void *)(v31 + 8 * v30))
          {
            *(void *)(v31 + 8 * v30) = v23;
            goto LABEL_57;
          }
          *unint64_t v23 = *v29;
          void *v29 = **(void **)(*(void *)(a1 + 16) + 8 * v30);
          **(void **)(*(void *)(a1 + 16) + 8 * v30) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_57:
        unint64_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_61:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_65:
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void **)(v32 + 8 * v6);
  if (v33)
  {
    *(void *)i = *v33;
  }
  else
  {
    *(void *)i = *v13;
    void *v13 = i;
    *(void *)(v32 + 8 * v6) = v13;
    if (!*(void *)i) {
      goto LABEL_74;
    }
    unint64_t v34 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    uint64_t v33 = (void *)(*(void *)(a1 + 16) + 8 * v34);
  }
  void *v33 = i;
LABEL_74:
  ++*(void *)(a1 + 40);
LABEL_75:
  uint64_t v36 = *a2;
  uint64_t v35 = a2[1];
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = (std::__shared_weak_count *)*((void *)i + 4);
  *((void *)i + 3) = v36;
  *((void *)i + 4) = v35;
  if (v37)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1C5574F74(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, BambiConferenceCall **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiConferenceCall,std::allocator<BambiConferenceCall>,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,void>(a1, a2, a3);
  BambiConferenceCall::constructStateMachine(*a3);
}

void sub_1C5574FD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::terminationLocksReleased(BambiConferenceCall *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 1872);
  uint64_t v3 = (void *)*((void *)this + 234);
  for (i = (void *)*((void *)this + 235); v3 != i; v3 += 2)
  {
    unsigned int v5 = *(std::__shared_weak_count **)(*v3 + 152);
    if (v5)
    {
      uint64_t v6 = *(void *)(*v3 + 144);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v7 = std::__shared_weak_count::lock(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v7)
      {
        if (v6)
        {
          uint64_t v8 = *v3;
          unint64_t v9 = (std::__shared_weak_count *)v3[1];
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(void *)(v6 + 1480) == v8)
          {
            uint8x8_t v10 = *(std::__shared_weak_count **)(v6 + 1488);
            *(void *)(v6 + 1480) = 0;
            *(void *)(v6 + 1488) = 0;
            if (v10) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](v2);
  uint64_t v11 = *((void *)this + 244);
  if (v11)
  {
    (*(void (**)(uint64_t, void))(*(void *)v11 + 64))(v11, 0);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 245);
    *((_OWORD *)this + 122) = 0u;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  BambiCall::terminationLocksReleased(this);
}

void **std::vector<std::shared_ptr<BambiCall>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v13);
    float v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    _OWORD v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)float v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<BambiCall>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1C557522C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BambiConferenceCall::addCalls(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 1952);
  if (!v4 || (*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4) != 5)
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    *(_DWORD *)(a1 + 2004) = 0;
    *(_DWORD *)(a1 + 2000) += (unint64_t)(v7 - v8) >> 4;
    if (v7 == v8)
    {
LABEL_33:
      unint64_t v13 = *(std::__shared_weak_count ****)(a1 + 1872);
      float v14 = *(std::__shared_weak_count ****)(a1 + 1880);
      while (v13 != v14)
      {
        float v15 = *v13;
        v13 += 2;
        BambiConferenceParticipant::start(v15);
      }
      return 1;
    }
    while (1)
    {
      uint64_t v10 = *(void **)v8;
      unint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v20 = 0;
      BOOL v21 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (void *)(a1 + 184));
      std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceCall,BambiCall>(&v20, &__p);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v10 && (unint64_t v11 = v20) != 0)
      {
        long long v16 = 0uLL;
        std::string __p = v10;
        unint64_t v18 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v21;
        unint64_t v23 = v11;
        unint64_t v24 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiConferenceParticipant::create((uint64_t *)&__p, (uint64_t *)&v23, (uint64_t)v10 + 1048, &v16);
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100]((char **)(a1 + 1872), &v16);
        if (!v12) {
          goto LABEL_25;
        }
      }
      else
      {
        long long v16 = 0uLL;
        uint64_t v12 = v21;
        if (!v21) {
          goto LABEL_25;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_25:
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v8 += 16;
      if (v8 == v7) {
        goto LABEL_33;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v5 = ims::debug((uint64_t)&v20, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Can't add calls to a terminated conference", 42);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v20);
  }
  return 0;
}

void sub_1C55754A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::currentStateId(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void **BambiConferenceCall::weakParticipants@<X0>(void **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this[234];
  uint64_t v3 = this[235];
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a2 + 2;
    do
    {
      long long v7 = *(_OWORD *)v2;
      uint64_t v8 = v2[1];
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        uint64_t v5 = (void *)a2[1];
      }
      if ((unint64_t)v5 >= *v6)
      {
        long long v16 = v7;
        uint64_t v9 = ((uint64_t)v5 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - *a2;
        uint64_t v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        _OWORD v17[4] = v6;
        unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)v6, v12);
        float v14 = &v13[16 * v9];
        v17[0] = v13;
        v17[1] = v14;
        v17[3] = &v13[16 * v15];
        *(_OWORD *)float v14 = v16;
        v17[2] = v14 + 16;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(a2, v17);
        uint64_t v5 = (void *)a2[1];
        this = std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(v17);
      }
      else
      {
        *uint64_t v5 = v7;
        v5[1] = v8;
        v5 += 2;
        a2[1] = (uint64_t)v5;
      }
      a2[1] = (uint64_t)v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_1C5575690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer((void **)va);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v26 = result;
    float v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(result, v13);
    long long v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)long long v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v16 + 16;
    char v19 = *a1;
    unint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
        *(void *)unint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v9;
    int64x2_t v24 = v21;
    char v22 = a1[2];
    a1[2] = &v14[16 * v15];
    uint8x8_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

uint64_t BambiConferenceCall::removeParticipant(uint64_t a1, uint64_t *a2, int a3)
{
  memset(v30, 0, sizeof(v30));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, (void *)(a1 + 184));
  long long v29 = v27;
  long long v27 = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "removeParticipant");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v30, (std::__shared_weak_count **)&v29, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"BambiConferenceCall::removeParticipant", 38);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (!*(void *)(a1 + 392))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    uint64_t v9 = ims::error((uint64_t)__p, (uint64_t)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"removeParticipant: no SIP session", 33);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_19;
  }
  uint64_t v7 = *a2;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    uint64_t v9 = ims::error((uint64_t)__p, (uint64_t)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"removeParticipant: can't remove unknown participant", 51);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_19:
    *(unsigned char *)(v9 + 17) = 0;
LABEL_20:
    if (v28 < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  for (i = *(void **)(a1 + 1872); ; i += 2)
  {
    if (i == *(void **)(a1 + 1880))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&v27, "");
      uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"removeParticipant: ", 19);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*a2 + 264) + 40))(*a2 + 264, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" is not a participant in call ", 30);
      *(unsigned char *)(v10 + 17) = 0;
      uint64_t v11 = *(void *)(a1 + 392);
      uint64_t v12 = *(void *)(v11 + 248);
      unint64_t v13 = *(std::__shared_weak_count **)(v11 + 256);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 + 1512) + 16))(v12 + 1512, v10);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      goto LABEL_20;
    }
    if (*i == v7) {
      break;
    }
  }
  if (a3) {
    uint64_t v16 = 9;
  }
  else {
    uint64_t v16 = 7;
  }
  BambiCallParticipant::setState(v7, v16, 1);
  *(unsigned char *)(a1 + 2034) = a3;
  if (a3) {
    goto LABEL_33;
  }
  if (*(void *)(a1 + 1880) - *(void *)(a1 + 1872) == 16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
    (*(void (**)(void *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 80))(v26, a1, __p);
    ImsResult::~ImsResult((ImsResult *)v26);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
LABEL_33:
    uint64_t v14 = 1;
    goto LABEL_25;
  }
  *(void *)&long long v27 = 0;
  long long v17 = *(uint64_t **)(a1 + 392);
  unint64_t v18 = (std::__shared_weak_count *)a2[1];
  v24[0] = *a2;
  v24[1] = (uint64_t)v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSession::refer(v17, v24, (ImsResult *)__p);
  int v19 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v14 = v19 ^ 1u;
  uint64_t v20 = *a2;
  uint64_t v21 = v27;
  uint64_t v22 = *(void *)(v20 + 232);
  if (v22)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(v22 + 48);
    *(void *)(v22 + 40) = 0;
    *(void *)(v22 + 48) = 0;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(void *)(v20 + 232) = v21;
LABEL_25:
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
  return v14;
}

void sub_1C5575D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v17 - 96);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::setParticipantState(BambiCall *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 24);
  uint64_t v4 = (void *)((char *)this + 184);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = BambiCall::bambiClient(this);
  LoggableString::LoggableString((LoggableString *)v10, "setParticipantState");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, v4);
  v9[0] = v7;
  v9[1] = v8;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BambiClient::performBlock(v5, (uint64_t)v10, (uint64_t)v9);
}

void sub_1C5575F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (*(char *)(v23 - 65) < 0) {
    operator delete(*(void **)(v23 - 88));
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19BambiConferenceCall19setParticipantStateENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = *(void *)(a1 + 56);
        if (v6)
        {
          for (i = *(void **)(v3 + 1872); ; i += 2)
          {
            if (i == *(void **)(v3 + 1880))
            {
              std::string::basic_string[abi:ne180100]<0>(v11, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Can't set state for unknown participant", 39);
              *(unsigned char *)(v8 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_11;
            }
            if (*i == v6) {
              break;
            }
          }
          BambiCallParticipant::setState(v6, *(unsigned int *)(a1 + 72), 1);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v11, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Can't set state for NULL participant", 36);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_11:
          *(unsigned char *)(v8 + 17) = 0;
          if (v10 < 0) {
            operator delete(__p[0]);
          }
          if (v12 < 0) {
            operator delete(v11[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C55761AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c54_ZTSNSt3__110shared_ptrI26BambiConferenceParticipantEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c54_ZTSNSt3__110shared_ptrI26BambiConferenceParticipantEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

BOOL BambiConferenceCall::start(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    uint64_t v32 = ims::error((uint64_t)v41, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Can't start a conference call with no participants", 50);
    *(unsigned char *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v32 + 17) = 0;
    if (v47.i8[15] < 0) {
      operator delete(v46);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  else
  {
    uint64_t v35 = *a2;
    uint64_t v34 = a2[1];
    SipTypedStateMachine<BambiConferenceCallState>::transitionToState((void *)(a1 + 1896), 1);
    if (a3)
    {
      uint64_t v8 = *a2;
      uint64_t v7 = a2[1];
      if (*a2 != v7)
      {
        uint64_t v38 = (int64x2_t *)(a1 + 1848);
        uint64_t v9 = "";
        uint64_t v37 = a2[1];
        do
        {
          uint64_t v10 = *(void *)v8;
          SipUri::SipUri((SipUri *)v41, (const SipUri *)(*(void *)v8 + 1048));
          if (*(char *)(v10 + 495) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 472), *(void *)(v10 + 480));
          }
          else {
            std::string __p = *(std::string *)(v10 + 472);
          }
          unint64_t v11 = *(void *)(a1 + 1856);
          unint64_t v12 = *(void *)(a1 + 1864);
          if (v11 >= v12)
          {
            unint64_t v14 = 0x84BDA12F684BDA13 * ((uint64_t)(v11 - v38->i64[0]) >> 4);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0x97B425ED097B42) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v16 = 0x84BDA12F684BDA13 * ((uint64_t)(v12 - v38->i64[0]) >> 4);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x4BDA12F684BDA1) {
              unint64_t v17 = 0x97B425ED097B42;
            }
            else {
              unint64_t v17 = v15;
            }
            uint64_t v49 = a1 + 1864;
            if (v17)
            {
              if (v17 > 0x97B425ED097B42) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v18 = (std::string *)operator new(432 * v17);
            }
            else
            {
              unint64_t v18 = 0;
            }
            int v19 = v9;
            uint64_t v46 = v18;
            v47.i64[0] = (uint64_t)(v18 + 18 * v14);
            v47.i64[1] = v47.i64[0];
            int v48 = &v18[18 * v17];
            SipUri::SipUri((SipUri *)v47.i64[0], (const SipUri *)v41);
            v18[18 * v14 + 17] = __p;
            memset(&__p, 0, sizeof(__p));
            uint64_t v20 = v47.i64[0];
            uint64_t v21 = v47.i64[1] + 432;
            v47.i64[1] += 432;
            unint64_t v22 = *(void *)(a1 + 1856);
            uint64_t v23 = *(void *)(a1 + 1848);
            if (v22 == v23)
            {
              int64x2_t v28 = vdupq_n_s64(v22);
            }
            else
            {
              uint64_t v24 = 0;
              do
              {
                SipUri::SipUri((SipUri *)(v20 + v24 - 432), (const SipUri *)(v22 + v24 - 432));
                uint8x8_t v25 = (std::string *)(v20 + v24 - 24);
                uint64_t v26 = (const std::string::value_type **)(v22 + v24 - 24);
                if (*(char *)(v22 + v24 - 1) < 0)
                {
                  std::string::__init_copy_ctor_external(v25, *v26, *(void *)(v22 + v24 - 16));
                }
                else
                {
                  long long v27 = *(_OWORD *)v26;
                  *(void *)(v20 + v24 - 8) = *(void *)(v22 + v24 - 8);
                  *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v27;
                }
                v24 -= 432;
              }
              while (v22 + v24 != v23);
              int64x2_t v28 = *v38;
              uint64_t v21 = v47.i64[1];
              v20 += v24;
              uint64_t v7 = v37;
            }
            *(void *)(a1 + 1848) = v20;
            *(void *)(a1 + 1856) = v21;
            int64x2_t v47 = v28;
            long long v29 = *(std::string **)(a1 + 1864);
            *(void *)(a1 + 1864) = v48;
            int v48 = v29;
            uint64_t v46 = (std::string *)v28.i64[0];
            std::__split_buffer<std::pair<SipUri,std::string>>::~__split_buffer((uint64_t)&v46);
            int v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            *(void *)(a1 + 1856) = v21;
            uint64_t v9 = v19;
            if (v30 < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            SipUri::SipUri(*(SipUri **)(a1 + 1856), (const SipUri *)v41);
            long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v11 + 424) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)(v11 + 408) = v13;
            memset(&__p, 0, sizeof(__p));
            *(void *)(a1 + 1856) = v11 + 432;
          }
          SipUri::~SipUri((SipUri *)v41);
          std::string::basic_string[abi:ne180100]<0>(&v46, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(v39, v9);
          uint64_t v31 = ims::debug((uint64_t)&v46, (uint64_t)v39);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Adding initial invitee (", 24);
          *(unsigned char *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)v8 + 1048) + 40))(*(void *)v8 + 1048, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)", ", 2);
          *(unsigned char *)(v31 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v41, (const std::string *)(*(void *)v8 + 472));
          (*(void (**)(uint64_t, void **))(*(void *)v31 + 56))(v31, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)")", 1);
          *(unsigned char *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v31 + 17) = 0;
          if (v44 < 0) {
            operator delete(v43);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          if (v40 < 0) {
            operator delete(v39[0]);
          }
          if (v47.i8[15] < 0) {
            operator delete(v46);
          }
          v8 += 16;
        }
        while (v8 != v7);
      }
    }
    BambiConferenceCall::addCalls(a1, a2);
    uint64_t v4 = v34;
    uint64_t v3 = v35;
  }
  return v3 != v4;
}

void sub_1C55767C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::transitionToState(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[3];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    uint64_t v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v15 = a1[7];
            unint64_t v14 = (std::__shared_weak_count *)a1[8];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v15)
            {
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, a2);
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v17 = i[3];
            uint64_t v18 = i[4];
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            int v19 = (std::__shared_weak_count *)a1[8];
            a1[7] = v17;
            a1[8] = v18;
            if (v19)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              uint64_t v17 = a1[7];
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 56))(v17, v16);
            uint64_t v23 = v15;
            uint64_t v24 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v20 = (std::__shared_weak_count *)a1[8];
            uint64_t v21 = a1[7];
            unint64_t v22 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 56))(a1, &v23, &v21);
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    unint64_t v12 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_1C5576C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<SipUri,std::string>::~pair(void **this)
{
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  SipUri::~SipUri((SipUri *)this);
}

uint64_t BambiConferenceCall::startSessionWithConferenceServer(BambiConferenceCall *this)
{
  BambiCall::internalStart(this, (uint64_t)v3);
  *((unsigned char *)this + 2032) = (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)v3);
  return *((unsigned __int8 *)this + 2032);
}

void sub_1C5576D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL BambiConferenceCall::supportsConferenceEvents(BambiConferenceCall *this)
{
  uint64_t v1 = *((void *)this + 49);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 248);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 216)) != 0) {
    unsigned int v5 = *(SipUserAgent **)(v4 + 136);
  }
  else {
    unsigned int v5 = 0;
  }
  if (*(unsigned char *)(SipUserAgent::config(v5) + 618)) {
    return 1;
  }
  uint64_t v7 = *((void *)this + 49);
  uint64_t v8 = *(void *)(v7 + 248);
  unint64_t v9 = *(std::__shared_weak_count **)(v7 + 256);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = SipDialog::remoteSideAllowsEvent(v8, (uint64_t)"conference");
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_1C5576DC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::subscribeToConferenceEvents(BambiConferenceCall *this)
{
  uint64_t v2 = (SipSession *)*((void *)this + 49);
  if (!v2 || (SipSession::confirmed(v2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Invalid session, don't send subscribe", 37);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  if (*((char *)this + 2031) < 0)
  {
    if (*((void *)this + 252)) {
      goto LABEL_5;
    }
  }
  else if (*((unsigned char *)this + 2031))
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Already subscribed to Conference Events", 39);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
    *(unsigned char *)(v3 + 17) = 0;
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    return;
  }
  uint64_t v4 = *((void *)this + 49);
  uint64_t v5 = *(void *)(v4 + 248);
  BOOL v6 = *(std::__shared_weak_count **)(v4 + 256);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v7 = SipDialog::remoteSideAllowsEvent(v5, (uint64_t)"conference");
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Conference server supports conference events.  Great!", 53);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_25:
    *(unsigned char *)(v8 + 17) = 0;
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    int v30 = 0;
    uint64_t v31 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v34, (void *)this + 23);
    std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceCall,BambiCall>(&v30, &v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    uint64_t v12 = *(void *)(*((void *)this + 49) + 248);
    if (v12 && (uint64_t v13 = *(void *)(v12 + 216)) != 0) {
      unint64_t v14 = *(SipUserAgent **)(v13 + 136);
    }
    else {
      unint64_t v14 = 0;
    }
    if (!*(unsigned char *)(SipUserAgent::config(v14) + 619) || *((unsigned char *)this + 2033))
    {
      uint64_t v15 = *(void *)(*((void *)this + 49) + 256);
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v16 = *((void *)this + 49);
    uint64_t v18 = *(void *)(v16 + 248);
    uint64_t v17 = *(std::__shared_weak_count **)(v16 + 256);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      if (*(void *)(v18 + 2064) == 1)
      {
        uint64_t v19 = *(void *)(v18 + 2048);
        uint64_t v21 = *(void *)(v19 + 56);
        uint64_t v20 = *(std::__shared_weak_count **)(v19 + 64);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    else if (*(void *)(v18 + 2064) == 1)
    {
      uint64_t v23 = *(void *)(v18 + 2048);
      uint64_t v21 = *(void *)(v23 + 56);
      uint64_t v20 = *(std::__shared_weak_count **)(v23 + 64);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 46);
    if (v24)
    {
      uint8x8_t v25 = std::__shared_weak_count::lock(v24);
      if (v25)
      {
        if (v21)
        {
          uint64_t v26 = *((void *)this + 45);
          if (v26)
          {
            uint64_t v27 = *(void *)(*(void *)(v26 + 144) + 184);
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
            }
            operator new();
          }
        }
      }
    }
    else
    {
      uint8x8_t v25 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v28 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
    long long v29 = (unsigned char *)ImsOutStream::operator<<(v28, "No active fork. Can't subscribe");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v29[17] = 0;
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v34);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    (*(void (**)(BambiConferenceCall *))(*(void *)this + 168))(this);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    return;
  }
  uint64_t v9 = *(void *)(*((void *)this + 49) + 248);
  if (v9 && (uint64_t v10 = *(void *)(v9 + 216)) != 0) {
    uint64_t v11 = *(SipUserAgent **)(v10 + 136);
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(unsigned char *)(SipUserAgent::config(v11) + 618))
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Local override to always Subscribe.", 35);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v22 = ims::debug((uint64_t)&v34, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Conference server doesn't say it supports conference events. No Local override either.", 86);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (v33 < 0) {
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(v34);
  }
  (*(void (**)(BambiConferenceCall *))(*(void *)this + 168))(this);
}

void sub_1C55775BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void BambiConferenceCall::handleSubscribeFailed(std::__shared_weak_count **this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&v19, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Failed to subscribe to conference event", 39);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v21 < 0) {
    operator delete(v19);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)this, 0);
  if (*((unsigned char *)this + 2033))
  {
    uint64_t v4 = this[23];
    uint64_t v3 = this[24];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = BambiCall::bambiClient((BambiCall *)this);
    LoggableString::LoggableString((LoggableString *)__p, "setParticipantState");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, this + 23);
    v18[0] = v19;
    v18[1] = v20;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v11 = MEMORY[0x1E4F143A8];
    uint64_t v12 = 1174405120;
    uint64_t v13 = ___ZN19BambiConferenceCall21handleSubscribeFailedEv_block_invoke;
    unint64_t v14 = &__block_descriptor_tmp_26_1;
    uint64_t v15 = (BambiConferenceCall *)this;
    uint64_t v16 = v4;
    uint64_t v17 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    BambiClient::performBlock(v5, (uint64_t)__p, (uint64_t)v18);
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  BambiConferenceCall::weakParticipants((void **)this, (uint64_t *)v6);
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 3, v6);
  uint64_t v19 = (void **)v6;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v19);
  ((void (*)(std::__shared_weak_count **, void **))(*this)[2].__shared_owners_)(this, __p);
  __p[0] = &unk_1F20C3488;
  uint64_t v19 = (void **)v9 + 1;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v19);
  __p[0] = &unk_1F20B8640;
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_1C55779A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
}

void BambiConferenceCall::clearConferenceEventSubscription(BambiConferenceCall *this, int a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 45);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  if (*((char *)this + 2031) < 0)
  {
    if (!*((void *)this + 252)) {
      goto LABEL_29;
    }
  }
  else if (!*((unsigned char *)this + 2031))
  {
    goto LABEL_29;
  }
  uint64_t v20 = 0;
  char v21 = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 144);
    uint64_t v9 = *(void *)(v7 + 176);
    long long v8 = *(std::__shared_weak_count **)(v7 + 184);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    SipDialogManager::getSubscription(v9, (uint64_t)"conference", (uint64_t)this + 2008, __p, &v20);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v10 = v20;
    if (v20)
    {
      if (a2)
      {
        uint64_t v11 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 46));
        uint64_t v12 = SipUserAgent::config(*(SipUserAgent **)(*((void *)this + 45) + 144));
        int v13 = SipTimers::timerValue((SipTimers *)(v12 + 512), (const SipTimer *)&SipTimers::kTimerT1, 0);
        SipSubscription::scheduleTermination(v10, 2 * v13, *((unsigned char *)this + 2034));
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        uint64_t v10 = v20;
      }
      unint64_t v14 = (const void *)v10[32];
      if (v14)
      {
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = v15[5];
          v16[4] = 0;
          v16[5] = 0;
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  if (*((char *)this + 2031) < 0)
  {
    **((unsigned char **)this + 251) = 0;
    *((void *)this + 252) = 0;
  }
  else
  {
    *((unsigned char *)this + 2008) = 0;
    *((unsigned char *)this + 2031) = 0;
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
LABEL_29:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5577C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    if (!v17) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  goto LABEL_4;
}

void ___ZN19BambiConferenceCall21handleSubscribeFailedEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BambiConferenceCall *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(v9, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Try Subscribe in dialog.", 24);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (v10 < 0) {
          operator delete(v9[0]);
        }
        BambiConferenceCall::subscribeToConferenceEvents(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5577D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiConferenceCall::handleSubscribeFailed(std::__shared_weak_count **this)
{
}

void BambiConferenceCall::handleSubscribeSuccess(void **this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Successfully subscribed to conference event", 43);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SBYTE7(v5) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  BambiConferenceCall::weakParticipants(this, (uint64_t *)v3);
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 4, v3);
  v8[0] = (void **)v3;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v8);
  (*((void (**)(void **, void **))*this + 7))(this, __p);
  __p[0] = &unk_1F20C3488;
  v8[0] = (void **)v6 + 1;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v8);
  __p[0] = &unk_1F20B8640;
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1C5577F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void non-virtual thunk to'BambiConferenceCall::handleSubscribeSuccess(void **this)
{
}

uint64_t BambiConferenceCall::processCallEvent(uint64_t **this, BambiCallEvent *lpsrc)
{
  int v4 = *((_DWORD *)lpsrc + 2);
  if (v4 == 15)
  {
    BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)this, 1);
    if (v8)
    {
      char v9 = v8;
      std::string::basic_string[abi:ne180100]<0>(v38, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v36, "");
      uint64_t v10 = ims::debug((uint64_t)v38, (uint64_t)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Saving termination reason : ", 28);
      *(unsigned char *)(v10 + 17) = 0;
      int v11 = v9[10];
      if (v11 > 37) {
        int v11 = 10;
      }
      LoggableString::LoggableString(&__p, (const std::string *)(reasonStrings + 24 * v11));
      (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      uint64_t v12 = this[234];
      int v13 = this[235];
      if (v12 != v13)
      {
        int v14 = v9[10];
        do
        {
          uint64_t v15 = *v12;
          v12 += 2;
          *(_DWORD *)(v15 + 1292) = v14;
        }
        while (v12 != v13);
      }
    }
    uint64_t v16 = this + 237;
    uint64_t v17 = 5;
    goto LABEL_28;
  }
  if (v4 == 9)
  {
    uint64_t v5 = this[49][31];
    if (v5 && (uint64_t v6 = *(void *)(v5 + 216)) != 0) {
      uint64_t v7 = *(SipUserAgent **)(v6 + 136);
    }
    else {
      uint64_t v7 = 0;
    }
    if (!*(unsigned char *)(SipUserAgent::config(v7) + 620)) {
      BambiConferenceCall::subscribeToConferenceEvents((BambiConferenceCall *)this);
    }
    if (*((_DWORD *)this + 113) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v38, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v36, "");
      uint64_t v32 = ims::debug((uint64_t)v38, (uint64_t)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Call is confirmed, but media is not active. Waiting for Media to get activated.", 79);
      *(unsigned char *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v32 + 17) = 0;
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      goto LABEL_29;
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    uint64_t v18 = ims::debug((uint64_t)v38, (uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Call is confirmed, and media is active. Moving to SessionConfirmed state.", 73);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v37 < 0) {
      operator delete(v36[0]);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    uint64_t v16 = this + 237;
    uint64_t v17 = 3;
LABEL_28:
    SipTypedStateMachine<BambiConferenceCallState>::transitionToState(v16, v17);
LABEL_29:
    int v4 = *((_DWORD *)lpsrc + 2);
  }
  if ((v4 & 0xFFFFFFFE) == 0xE)
  {
    if (v19)
    {
      uint64_t v20 = v19;
      if (!*((unsigned char *)v19 + 145))
      {
        if (v19[6])
        {
          char v21 = this[49];
          if (v21)
          {
            uint64_t v22 = v21[31];
            if (v22)
            {
              uint64_t v23 = *(void *)(v22 + 216);
              if (v23)
              {
                uint64_t v24 = *(SipUserAgent **)(v23 + 136);
                if (v24)
                {
                  uint64_t v25 = SipUserAgent::config(v24);
                  *((unsigned char *)this + 2035) = SipResponseCodeMap::containsResponseCodeForMethod(v25 + 1312, (void **)"INVITE", *(_DWORD *)(v20[6] + 88), 0);
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v26) {
    return BambiCall::processCallEvent((BambiCall *)this, lpsrc);
  }
  uint64_t v27 = v26;
  if (v26[16] != 2) {
    return BambiCall::processCallEvent((BambiCall *)this, lpsrc);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v33, this + 23);
  uint64_t v29 = v33;
  uint64_t v28 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v30 = (std::__shared_weak_count *)*((void *)v27 + 3);
  *((void *)v27 + 2) = v29;
  *((void *)v27 + 3) = v28;
  if (v30)
  {
    std::__shared_weak_count::__release_weak(v30);
    uint64_t v28 = v34;
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return (*(uint64_t (**)(uint64_t *, _DWORD *))(*this[51] + 16))(this[51], v27);
}

void sub_1C55784C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::handleConferenceNotification(BambiConferenceCall *this, const SipConferenceInfo *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"BambiConferenceCall::handleConferenceNotification", 49);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v75) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v103) < 0) {
    operator delete((void *)v102);
  }
  uint64_t v5 = *(void *)(*((void *)this + 49) + 248);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 216)) != 0) {
    uint64_t v7 = *(SipUserAgent **)(v6 + 136);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = SipUserAgent::config(v7);
  int v9 = *((_DWORD *)a2 + 104);
  if (*(unsigned char *)(v8 + 621))
  {
    if (v9 == 2) {
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  switch(v9)
  {
    case 3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v100, "");
      uint64_t v57 = ims::debug((uint64_t)&__p, (uint64_t)v100);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"Received conference notification with state deleted", 51);
      *(unsigned char *)(v57 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v57 + 17) = 0;
      if (v101 < 0) {
        operator delete(v100[0]);
      }
      if (SBYTE7(v75) < 0) {
        operator delete((void *)__p);
      }
      unsigned int v58 = *((_DWORD *)a2 + 105);
      if (v58 <= *((_DWORD *)this + 509))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(v100, "");
        uint64_t v59 = ims::debug((uint64_t)&__p, (uint64_t)v100);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"Stale notification (version = ", 30);
        *(unsigned char *)(v59 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v59 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"), ignoring it.", 15);
        *(unsigned char *)(v59 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v59 + 17) = 0;
        if (v101 < 0) {
          operator delete(v100[0]);
        }
      }
      else
      {
        *((_DWORD *)this + 509) = v58;
        std::string::basic_string[abi:ne180100]<0>(&__p, "EmptyConference");
        (*(void (**)(long long *__return_ptr, BambiConferenceCall *, long long *))(*(void *)this + 80))(&v102, this, &__p);
        ImsResult::~ImsResult((ImsResult *)&v102);
      }
      if ((SBYTE7(v75) & 0x80000000) == 0) {
        return;
      }
      v60 = (void *)__p;
      goto LABEL_157;
    case 2:
LABEL_64:
      std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v29 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Received conference notification with state partial", 51);
      *(unsigned char *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_66;
    case 1:
      std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v10 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Received conference notification with state Full", 48);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SBYTE7(v75) < 0) {
        operator delete((void *)__p);
      }
      if (SBYTE7(v103) < 0) {
        operator delete((void *)v102);
      }
      unsigned int v11 = *((_DWORD *)a2 + 105);
      if (v11 > *((_DWORD *)this + 509))
      {
        *((_DWORD *)this + 509) = v11;
        uint64_t v12 = *((void *)a2 + 55);
        uint64_t v62 = *((void *)a2 + 56);
        std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v13 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Users in the NOTIFY = ", 22);
        uint64_t v14 = v62 - v12;
        *(unsigned char *)(v13 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        if (SBYTE7(v75) < 0) {
          operator delete((void *)__p);
        }
        if (SBYTE7(v103) < 0) {
          operator delete((void *)v102);
        }
        v70 = 0;
        v71 = 0;
        uint64_t v72 = 0;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>(&v70, *((void **)this + 234), *((void **)this + 235), (uint64_t)(*((void *)this + 235) - *((void *)this + 234)) >> 4);
        uint64_t v15 = (uint64_t *)v70;
        uint64_t v16 = v71;
        if (v70 != v71)
        {
          if ((unint64_t)(v14 >> 3) <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = v14 >> 3;
          }
          do
          {
            uint64_t v127 = 0;
            long long v125 = 0u;
            long long v126 = 0u;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v105 = 0u;
            long long v106 = 0u;
            long long v103 = 0u;
            long long v104 = 0u;
            long long v102 = 0u;
            SipUri::SipUri((SipUri *)&v102);
            uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 46);
            if (v18)
            {
              uint64_t v18 = std::__shared_weak_count::lock(v18);
              char v19 = v18;
              if (v18) {
                uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 45);
              }
            }
            else
            {
              char v19 = 0;
            }
            SipStack::makeOutgoingSipUri((SipStack *)v18, (const SipUri *)(*v15 + 264), (SipUri *)&v102, (uint64_t)v100);
            ImsResult::~ImsResult((ImsResult *)v100);
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            uint64_t v99 = 0;
            long long v97 = 0u;
            long long v98 = 0u;
            long long v95 = 0u;
            long long v96 = 0u;
            long long v93 = 0u;
            long long v94 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long __p = 0u;
            SipUri::SipUri((SipUri *)&__p);
            if (v62 == v12)
            {
LABEL_47:
              uint64_t MatchingEndpointStatus = 9;
            }
            else
            {
              unint64_t v20 = 0;
              while (1)
              {
                uint64_t v21 = *((void *)a2 + 55);
                uint64_t v22 = v20 >= (*((void *)a2 + 56) - v21) >> 3 ? 0 : *(void *)(v21 + 8 * v20);
                SipUri::clear((SipUri *)&__p);
                uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 46);
                if (v23)
                {
                  uint64_t v23 = std::__shared_weak_count::lock(v23);
                  uint64_t v24 = v23;
                  if (v23) {
                    uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 45);
                  }
                }
                else
                {
                  uint64_t v24 = 0;
                }
                SipStack::makeOutgoingSipUri((SipStack *)v23, (const SipUri *)(v22 + 8), (SipUri *)&__p, (uint64_t)v73);
                ImsResult::~ImsResult((ImsResult *)v73);
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                }
                if (SipUri::userMatch((SipUri *)&v102, (const SipUri *)&__p)) {
                  break;
                }
                if (v17 == ++v20) {
                  goto LABEL_47;
                }
              }
              uint64_t MatchingEndpointStatus = BambiConferenceCall::findMatchingEndpointStatus((BambiConferenceCall *)v22, v25);
            }
            if (*(int *)(*v15 + 240) <= 5 && MatchingEndpointStatus == 9)
            {
              std::string::basic_string[abi:ne180100]<0>(v68, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(v66, "");
              uint64_t v27 = ims::debug((uint64_t)v68, (uint64_t)v66);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Participant ", 12);
              *(unsigned char *)(v27 + 17) = 0;
              (*(void (**)(long long *, uint64_t))(v102 + 40))(&v102, v27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" has not yet joined, so ignoring disconnected notification", 58);
              *(unsigned char *)(v27 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v27 + 17) = 0;
              if (v67 < 0) {
                operator delete(v66[0]);
              }
              if (v69 < 0) {
                operator delete(v68[0]);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v68, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(v66, "");
              uint64_t v28 = ims::debug((uint64_t)v68, (uint64_t)v66);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Participant ", 12);
              *(unsigned char *)(v28 + 17) = 0;
              (*(void (**)(long long *, uint64_t))(v102 + 40))(&v102, v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)", status = ", 11);
              *(unsigned char *)(v28 + 17) = 0;
              SipConferenceEndpoint::statusAsString(MatchingEndpointStatus, v64);
              (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, v64);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v28 + 17) = 0;
              if (v65 < 0) {
                operator delete(v64[0]);
              }
              if (v67 < 0) {
                operator delete(v66[0]);
              }
              if (v69 < 0) {
                operator delete(v68[0]);
              }
              BambiConferenceParticipant::handleConferenceNotification(*v15, MatchingEndpointStatus, (SipUri *)&__p);
            }
            SipUri::~SipUri((SipUri *)&__p);
            SipUri::~SipUri((SipUri *)&v102);
            v15 += 2;
          }
          while (v15 != v16);
        }
        *(void *)&long long v102 = &v70;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v61 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"Stale notification (version = ", 30);
      *(unsigned char *)(v61 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v61 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"), ignoring it.", 15);
      *(unsigned char *)(v61 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v61 + 17) = 0;
      if (SBYTE7(v75) < 0) {
        operator delete((void *)__p);
      }
      if ((SBYTE7(v103) & 0x80000000) == 0) {
        return;
      }
      v60 = (void *)v102;
LABEL_157:
      operator delete(v60);
      return;
  }
LABEL_65:
  std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v29 = ims::debug((uint64_t)&v102, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Treating notification as Partial.", 33);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_66:
  *(unsigned char *)(v29 + 17) = 0;
  if (SBYTE7(v75) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v103) < 0) {
    operator delete((void *)v102);
  }
  uint64_t v31 = *((void *)a2 + 55);
  uint64_t v30 = *((void *)a2 + 56);
  std::string::basic_string[abi:ne180100]<0>(&v102, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v32 = ims::info((uint64_t)&v102, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Users in the NOTIFY = ", 22);
  uint64_t v33 = v30 - v31;
  *(unsigned char *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v32 + 17) = 0;
  if (SBYTE7(v75) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v103) < 0) {
    operator delete((void *)v102);
  }
  if (v30 != v31)
  {
    unint64_t v35 = 0;
    char v36 = (char *)this + 80;
    if ((unint64_t)(v33 >> 3) <= 1) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = v33 >> 3;
    }
    uint64_t v63 = v37;
    do
    {
      uint64_t v38 = *((void *)a2 + 55);
      if (v35 >= (*((void *)a2 + 56) - v38) >> 3) {
        char v39 = 0;
      }
      else {
        char v39 = *(_DWORD **)(v38 + 8 * v35);
      }
      if (v39[104] == 3)
      {
        uint64_t v40 = 9;
      }
      else
      {
        uint64_t v40 = BambiConferenceCall::findMatchingEndpointStatus((BambiConferenceCall *)v39, v34);
        if (!v40) {
          goto LABEL_102;
        }
      }
      uint64_t v127 = 0;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v102 = 0u;
      SipUri::SipUri((SipUri *)&v102);
      uint64_t v41 = (std::__shared_weak_count *)*((void *)this + 46);
      if (v41)
      {
        uint64_t v41 = std::__shared_weak_count::lock(v41);
        char v42 = v41;
        if (v41) {
          uint64_t v41 = (std::__shared_weak_count *)*((void *)this + 45);
        }
      }
      else
      {
        char v42 = 0;
      }
      SipStack::makeOutgoingSipUri((SipStack *)v41, (const SipUri *)(v39 + 2), (SipUri *)&v102, (uint64_t)v100);
      ImsResult::~ImsResult((ImsResult *)v100);
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      std::string::size_type v43 = (uint64_t *)*((void *)this + 234);
      char v44 = (uint64_t *)*((void *)this + 235);
      while (1)
      {
        if (v43 == v44)
        {
          SipUri::~SipUri((SipUri *)&v102);
          goto LABEL_102;
        }
        uint64_t v99 = 0;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long __p = 0u;
        SipUri::SipUri((SipUri *)&__p);
        std::string::size_type v45 = (std::__shared_weak_count *)*((void *)this + 46);
        if (v45)
        {
          std::string::size_type v45 = std::__shared_weak_count::lock(v45);
          uint64_t v46 = v45;
          if (v45) {
            std::string::size_type v45 = (std::__shared_weak_count *)*((void *)this + 45);
          }
        }
        else
        {
          uint64_t v46 = 0;
        }
        SipStack::makeOutgoingSipUri((SipStack *)v45, (const SipUri *)(*v43 + 264), (SipUri *)&__p, (uint64_t)v73);
        ImsResult::~ImsResult((ImsResult *)v73);
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        if (SipUri::userMatch((SipUri *)&__p, (const SipUri *)&v102)) {
          break;
        }
        SipUri::~SipUri((SipUri *)&__p);
        v43 += 2;
      }
      BOOL v53 = v40 == 9 && *(_DWORD *)(*v43 + 240) <= 5;
      char v54 = !v53;
      if (v53)
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(v68, "");
        uint64_t v56 = ims::debug((uint64_t)&v70, (uint64_t)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"Participant ", 12);
        *(unsigned char *)(v56 + 17) = 0;
        (*(void (**)(long long *, uint64_t))(__p + 40))(&__p, v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)" has not yet joined, so ignoring disconnected notification", 58);
        *(unsigned char *)(v56 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v56 + 17) = 0;
        if (v69 < 0) {
          operator delete(v68[0]);
        }
        if (SHIBYTE(v72) < 0) {
          operator delete(v70);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v70, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(v68, "");
        uint64_t v55 = ims::debug((uint64_t)&v70, (uint64_t)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"Participant ", 12);
        *(unsigned char *)(v55 + 17) = 0;
        (*(void (**)(long long *, uint64_t))(__p + 40))(&__p, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)", status = ", 11);
        *(unsigned char *)(v55 + 17) = 0;
        SipConferenceEndpoint::statusAsString(v40, v66);
        (*(void (**)(uint64_t, void **))(*(void *)v55 + 32))(v55, v66);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v55 + 17) = 0;
        if (v67 < 0) {
          operator delete(v66[0]);
        }
        if (v69 < 0) {
          operator delete(v68[0]);
        }
        if (SHIBYTE(v72) < 0) {
          operator delete(v70);
        }
        BambiConferenceParticipant::handleConferenceNotification(*v43, v40, (SipUri *)&v102);
      }
      SipUri::~SipUri((SipUri *)&__p);
      SipUri::~SipUri((SipUri *)&v102);
      if (v54) {
        goto LABEL_139;
      }
LABEL_102:
      int64x2_t v47 = (const SipUri *)(v39 + 2);
      int v48 = (SipUri *)*((void *)this + 231);
      uint64_t v49 = (SipUri *)*((void *)this + 232);
      while (1)
      {
        if (v48 == v49)
        {
          uint64_t v50 = (*(uint64_t (**)(char *))(*(void *)v36 + 64))((char *)this + 80);
          (*(void (**)(char *, uint64_t))(*(void *)v36 + 16))((char *)this + 80, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"User (", 6);
          *(unsigned char *)(v50 + 17) = 0;
          (*(void (**)(const SipUri *, uint64_t))(*(void *)v47 + 40))(v47, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)") is not a participant", 22);
          *(unsigned char *)(v50 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v50 + 17) = 0;
          goto LABEL_139;
        }
        if (SipUri::equals(v48, v47, 1)) {
          break;
        }
        int v48 = (SipUri *)((char *)v48 + 432);
      }
      uint64_t v51 = (*(uint64_t (**)(char *))(*(void *)v36 + 64))((char *)this + 80);
      (*(void (**)(char *, uint64_t))(*(void *)v36 + 16))((char *)this + 80, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"adding initial invitee ", 23);
      *(unsigned char *)(v51 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(void *)v47 + 40))(v47, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)" as a participant", 17);
      *(unsigned char *)(v51 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v51 + 17) = 0;
      v73[0] = 0uLL;
      long long v102 = 0uLL;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (void *)this + 23);
      std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceCall,BambiCall>((void **)&v102, (void **)&__p);
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
      v73[0] = 0uLL;
      if ((void)v102)
      {
        long long __p = 0uLL;
        uint64_t v52 = (std::__shared_weak_count *)*((void *)&v102 + 1);
        *(_OWORD *)v100 = v102;
        if (*((void *)&v102 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v102 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        BambiConferenceParticipant::create((uint64_t *)&__p, (uint64_t *)v100, (uint64_t)v47, v73);
        if (v100[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v100[1]);
        }
        if (*((void *)&__p + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
        }
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100]((char **)this + 234, v73);
        if (!v52) {
          goto LABEL_118;
        }
LABEL_117:
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        goto LABEL_118;
      }
      uint64_t v52 = (std::__shared_weak_count *)*((void *)&v102 + 1);
      if (*((void *)&v102 + 1)) {
        goto LABEL_117;
      }
LABEL_118:
      if (*((void *)&v73[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73[0] + 1));
      }
LABEL_139:
      ++v35;
    }
    while (v35 != v63);
  }
}

void sub_1C557978C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiConferenceCall::handleConferenceNotification(BambiConferenceCall *this, const SipConferenceInfo *a2)
{
}

uint64_t BambiConferenceCall::findMatchingEndpointStatus(BambiConferenceCall *this, const SipConferenceUser *a2)
{
  uint64_t v3 = *((void *)this + 57);
  uint64_t v2 = *((void *)this + 58);
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(v15, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"No matching endpoint in the notify ", 35);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    return 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = (BambiConferenceCall *)((char *)this + 8);
    if ((unint64_t)(v4 >> 3) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v4 >> 3;
    }
    while (1)
    {
      uint64_t v9 = *(void *)(*((void *)this + 57) + 8 * v6);
      int v10 = SipUri::equals((SipUri *)(v9 + 8), v7, 1);
      if (v4 == 8 || v10) {
        return *(unsigned int *)(v9 + 448);
      }
      if (v8 == ++v6) {
        goto LABEL_8;
      }
    }
  }
}

void sub_1C5579B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 80;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"BambiConferenceCall::handleParticipantStateChange", 49);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (*(void *)a2)
  {
    if (v10)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v10 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 1952);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 1960);
  if (!v13)
  {
    if (!v12) {
      goto LABEL_20;
    }
    char v14 = 0;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (!v12) {
    goto LABEL_20;
  }
  char v14 = *(std::__shared_weak_count **)(a1 + 1960);
  uint64_t v12 = *(void *)(a1 + 1952);
  if (!v14)
  {
LABEL_13:
    char v15 = 1;
    goto LABEL_14;
  }
  char v15 = 0;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_14:
  uint64_t v51 = v10;
  uint64_t v52 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v12 + 72))(v12, &v51, a3, a4);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
LABEL_20:
  if ((a4 - 8) <= 2)
  {
    uint64_t v16 = *(void *)(a1 + 1872);
    uint64_t v17 = *(void **)(a1 + 1880);
    if ((void *)v16 != v17)
    {
      uint64_t v18 = -v16;
      while (*(void **)v16 != v10)
      {
        v16 += 16;
        v18 -= 16;
        if ((void *)v16 == v17) {
          goto LABEL_50;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v49, "");
      uint64_t v19 = ims::debug((uint64_t)__p, (uint64_t)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"removing participant ", 21);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(void *, uint64_t))(v10[33] + 40))(v10 + 33, v19);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v50 < 0) {
        operator delete(v49[0]);
      }
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v20 = 16 - v18;
      uint64_t v21 = *(void *)(a1 + 1880);
      if (16 - v18 == v21)
      {
        uint64_t v24 = -v18;
      }
      else
      {
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
          uint64_t v23 = *(std::__shared_weak_count **)(v20 - 8);
          *(_OWORD *)(v20 - 16) = v22;
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          v20 += 16;
        }
        while (v20 != v21);
        uint64_t v24 = v20 - 16;
        uint64_t v20 = *(void *)(a1 + 1880);
      }
      while (v20 != v24)
      {
        uint64_t v25 = *(std::__shared_weak_count **)(v20 - 8);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        v20 -= 16;
      }
      *(void *)(a1 + 1880) = v24;
      uint64_t v26 = *(std::__shared_weak_count **)(*(void *)a2 + 152);
      if (v26)
      {
        uint64_t v27 = *(void *)(*(void *)a2 + 144);
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v28 = std::__shared_weak_count::lock(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (v28)
        {
          if (v27)
          {
            uint64_t v29 = *(std::__shared_weak_count **)(v27 + 1488);
            *(_OWORD *)(v27 + 1480) = 0u;
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      uint64_t v30 = *(std::__shared_weak_count **)(a2 + 8);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v11)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        uint64_t v11 = 0;
      }
    }
LABEL_50:
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v49, "");
    uint64_t v31 = ims::debug((uint64_t)__p, (uint64_t)v49);
    std::ostream::operator<<();
    *(unsigned char *)(v31 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)" participants remaining", 23);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SBYTE7(v45) < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4 != 6)
  {
    if (a4 != 10) {
      goto LABEL_68;
    }
    ++*(_DWORD *)(a1 + 2004);
  }
  int v32 = *(_DWORD *)(a1 + 2000);
  if (v32)
  {
    int v33 = v32 - 1;
    *(_DWORD *)(a1 + 2000) = v33;
    if (v33)
    {
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"still waiting for ", 18);
      *(unsigned char *)(v34 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v34 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" participant", 12);
      *(unsigned char *)(v34 + 17) = 0;
      int v35 = *(_DWORD *)(a1 + 2000);
      if (v35 == 1) {
        char v36 = "";
      }
      else {
        char v36 = "s";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)v36, v35 != 1);
      *(unsigned char *)(v34 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v34 + 17) = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 2004))
      {
        uint64_t v48 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v45 = 0u;
        BambiConferenceCall::weakParticipants((void **)a1, (uint64_t *)v42);
        BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 2, v42);
        v49[0] = (void **)v42;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v49);
        (*(void (**)(uint64_t, void **))(*(void *)a1 + 56))(a1, __p);
        *(_DWORD *)(a1 + 2004) = 0;
      }
      else
      {
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"everyone joined", 15);
        *(unsigned char *)(v37 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v37 + 17) = 0;
        uint64_t v48 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v45 = 0u;
        BambiConferenceCall::weakParticipants((void **)a1, (uint64_t *)v43);
        BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 1, v43);
        v49[0] = (void **)v43;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v49);
        (*(void (**)(uint64_t, void **))(*(void *)a1 + 56))(a1, __p);
      }
      __p[0] = &unk_1F20C3488;
      v49[0] = (void **)&v46 + 1;
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v49);
      __p[0] = &unk_1F20B8640;
      if (*((void *)&v45 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
      }
    }
  }
LABEL_68:
  if (*(void *)(a1 + 1872) == *(void *)(a1 + 1880))
  {
    uint64_t v38 = *(void *)(a1 + 1952);
    if (v38 && (*(unsigned int (**)(uint64_t))(*(void *)v38 + 48))(v38) == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v49, "");
      uint64_t v39 = ims::debug((uint64_t)__p, (uint64_t)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"All participants left, ending the conference call", 49);
      *(unsigned char *)(v39 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v49, "");
      uint64_t v39 = ims::error((uint64_t)__p, (uint64_t)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"All participants failed to join, ending the conference call", 59);
      *(unsigned char *)(v39 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v39 + 17) = 0;
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SBYTE7(v45) < 0) {
      operator delete(__p[0]);
    }
    if (*(unsigned char *)(a1 + 2034))
    {
      BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)a1, 1);
      BambiCall::silentHangUp(a1, 8, (ImsResult *)v41);
      ImsResult::~ImsResult((ImsResult *)v41);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
      (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)a1 + 80))(v40, a1, __p);
      ImsResult::~ImsResult((ImsResult *)v40);
      if (SBYTE7(v45) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C557A538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)&__p);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::currentState@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 64);
  *a2 = *(void *)(result + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void non-virtual thunk to'BambiConferenceCall::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t BambiConferenceCall::conferenceCallActivated(BambiConferenceCall *this)
{
  uint64_t result = *((void *)this + 244);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    if (result == 4)
    {
      uint64_t v3 = (void *)((char *)this + 1896);
      uint64_t v5 = *((void *)this + 10);
      uint64_t v4 = (char *)this + 80;
      uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 64))(v4);
      (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Back to confirmed state", 23);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      return SipTypedStateMachine<BambiConferenceCallState>::transitionToState(v3, 3);
    }
  }
  return result;
}

void BambiConferenceCall::resumeConferenceCall(BambiConferenceCall *this)
{
  if ((*((_DWORD *)this + 112) & 0xFFFFFFFE) == 2)
  {
    uint64_t v2 = (char *)this + 80;
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Resume the conference call", 26);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    BambiCall::performLocalResume(this);
  }
}

void BambiConferenceCall::cleanupOnTimeout(void **this)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  long long v7 = 0u;
  long long v6 = 0u;
  BambiConferenceCall::weakParticipants(this, (uint64_t *)v5);
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)&v6, 2, v5);
  __p[0] = v5;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  (*((void (**)(void **, long long *))*this + 7))(this, &v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
  (*((void (**)(void *__return_ptr, void **, void **))*this + 10))(v4, this, __p);
  ImsResult::~ImsResult((ImsResult *)v4);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v6 = &unk_1F20C3488;
  __p[0] = &v8[8];
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)&long long v6 = &unk_1F20B8640;
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_1C557A9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)(v15 - 96));
  _Unwind_Resume(a1);
}

void BambiConferenceCall::loggableName(BambiConferenceCall *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C557AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a18);
  _Unwind_Resume(a1);
}

uint64_t BambiConferenceCall::nameForStateId(BambiConferenceCall *this, unsigned int a2)
{
  if (a2 <= 6) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = 0;
  }
  return (uint64_t)&stateNames + 24 * v2;
}

uint64_t non-virtual thunk to'BambiConferenceCall::nameForStateId(BambiConferenceCall *this, unsigned int a2)
{
  if (a2 <= 6) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = 0;
  }
  return (uint64_t)&stateNames + 24 * v2;
}

void BambiConferenceCall::handleStateTransition(BambiConferenceCall *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)this + 80;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"state transition [", 18);
  *(unsigned char *)(v6 + 17) = 0;
  v5 += 1816;
  long long v7 = (const std::string *)SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId((uint64_t)v5, a2);
  LoggableString::LoggableString(&v10, v7);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" --> ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = (const std::string *)SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId((uint64_t)v5, a3);
  LoggableString::LoggableString(&__p, v8);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1C557AD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3) {
    return "Unknown";
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return "Unknown";
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  }
  else {
    uint64_t v8 = "Unknown";
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C557AE38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiConferenceCall::handleStateTransition(BambiConferenceCall *this, uint64_t a2, uint64_t a3)
{
}

void BambiConferenceCall::prepareInvite(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v9[0] = &unk_1F20B2680;
  v9[1] = &_bambiDomain;
  _OWORD v9[2] = 0;
  if ((*(uint64_t (**)(uint64_t *, void))(_bambiDomain + 24))(&_bambiDomain, 0)) {
    goto LABEL_13;
  }
  uint64_t v6 = a2[23];
  uint64_t v7 = (v6 & 0x80u) == 0 ? a2[23] : *((void *)a2 + 1);
  if (v7 != 13) {
    goto LABEL_13;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, "InitialInvite", *((void *)a2 + 1))) {
      goto LABEL_15;
    }
LABEL_13:
    ImsResult::ImsResult(a3, (uint64_t)v9);
    goto LABEL_14;
  }
  if (a2[23])
  {
    uint64_t v8 = "InitialInvite";
    while (*a2 == *(unsigned __int8 *)v8)
    {
      ++a2;
      ++v8;
      if (!--v6) {
        goto LABEL_15;
      }
    }
    goto LABEL_13;
  }
LABEL_15:
  if (*(void *)(a1 + 1848) != *(void *)(a1 + 1856)) {
    operator new();
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
LABEL_14:
  ImsResult::~ImsResult((ImsResult *)v9);
}

void sub_1C557B550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a29);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::deferredEndWithReason(BambiConferenceCall *a1, uint64_t a2)
{
  BambiConferenceCall::clearConferenceEventSubscription(a1, 1);
  BambiCall::deferredEndWithReason(a1, a2);
}

void BambiConferenceCall::handleMediaSessionActivated(BambiConferenceCall *this)
{
  unsigned int v2 = (SipSession *)*((void *)this + 49);
  if (v2)
  {
    if (SipSession::confirmed(v2))
    {
      uint64_t v3 = *((void *)this + 244);
      if (v3)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3) == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v7, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Media is active and call is confirmed, Moving to SessionConfirmed state.", 72);
          *(unsigned char *)(v4 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v4 + 17) = 0;
          if (v6 < 0) {
            operator delete(__p[0]);
          }
          if (v8 < 0) {
            operator delete(v7[0]);
          }
          SipTypedStateMachine<BambiConferenceCallState>::transitionToState((void *)this + 237, 3);
        }
      }
    }
  }
  BambiCall::handleMediaSessionActivated(this);
}

void sub_1C557B7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallStateMachine::~BambiConferenceCallStateMachine(BambiConferenceCallStateMachine *this)
{
  *(void *)this = &unk_1F20DCC38;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20DCC38;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C878E320);
}

void SipSimpleStateMachine<BambiConferenceCallState>::handleStateTransition(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      char v8 = v7;
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (*a2) {
          uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a3 + 48))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v10, v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C557B9A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::~BambiConferenceCall(BambiConferenceCall *this)
{
  BambiConferenceCall::~BambiConferenceCall(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;

  *(void *)this = &unk_1F20DC9E0;
  *((void *)this + 10) = &unk_1F20DCAB0;
  *((void *)this + 228) = &unk_1F20DCB10;
  *((void *)this + 229) = &unk_1F20DCB40;
  *((void *)this + BambiConferenceCall::handleSubscribeSuccess(this - 230) = &unk_1F20DCB68;
  if (*((char *)this + 2031) < 0) {
    operator delete(*((void **)this + 251));
  }
  *((void *)this + 237) = &unk_1F20DCC38;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 249);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this + 1896);
  char v6 = (void **)((char *)this + 1872);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (void **)*((void *)this + 231);
  if (v3)
  {
    uint64_t v4 = (void **)*((void *)this + 232);
    uint64_t v5 = (void *)*((void *)this + 231);
    if (v4 != v3)
    {
      do
      {
        v4 -= 54;
        std::pair<SipUri,std::string>::~pair(v4);
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 231);
    }
    *((void *)this + 232) = v3;
    operator delete(v5);
  }
  BambiCall::~BambiCall(this, (uint64_t *)off_1F20DCBA0);
}

uint64_t BambiConferenceCall::isConferenceCall(BambiConferenceCall *this)
{
  return 1;
}

uint64_t BambiConferenceCall::canJoinConference(BambiConferenceCall *this)
{
  return 0;
}

void non-virtual thunk to'BambiConferenceCall::~BambiConferenceCall(BambiConferenceCall *this)
{
}

{
  uint64_t vars8;

  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1824));
}

{
  uint64_t vars8;

  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1824));
  JUMPOUT(0x1C878E320);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1832));
}

{
  uint64_t vars8;

  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1832));
  JUMPOUT(0x1C878E320);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1840));
}

{
  uint64_t vars8;

  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1840));
  JUMPOUT(0x1C878E320);
}

void SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(uint64_t a1)
{
  *(void *)a1 = &unk_1F20DCE50;
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = &unk_1F20DCEA8;
  if (*(void *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
    }
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
  char v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<SipUri,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 432;
    std::pair<SipUri,std::string>::~pair((void **)(i - 432));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DCFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<BambiConferenceCall,std::allocator<BambiConferenceCall>,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x810uLL);
  std::__shared_ptr_emplace<BambiConferenceCall>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,std::allocator<BambiConferenceCall>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 26, (uint64_t)(v6 + 3));
}

void sub_1C557C144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BambiConferenceCall>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,std::allocator<BambiConferenceCall>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DD090;
  std::construct_at[abi:ne180100]<BambiConferenceCall,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,BambiConferenceCall*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C557C1A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiConferenceCall>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCall>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCall>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<BambiConferenceCall,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,BambiConferenceCall*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v11 = v4;
  long long v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::BambiCall(a1, (uint64_t *)off_1F20DCBA0, &v11, &v9, 0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)a1 = &unk_1F20DC9E0;
  *(void *)(a1 + 80) = &unk_1F20DCAB0;
  *(void *)(a1 + 1824) = &unk_1F20DCB10;
  *(void *)(a1 + 1832) = &unk_1F20DCB40;
  *(void *)(a1 + 1840) = &unk_1F20DCB68;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(void *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_DWORD *)(a1 + 1944) = 1065353216;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(void *)(a1 + 1896) = &unk_1F20DCC38;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(void *)(a1 + 2032) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void sub_1C557C434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    if (!v13)
    {
LABEL_5:
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v13)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (!v12) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  goto LABEL_7;
}

void __cxx_global_array_dtor_4()
{
  for (uint64_t i = 0; i != -144; i -= 24)
  {
    if (*((char *)&stateNames + i + 143) < 0) {
      operator delete(*(void **)((char *)&stateNames + i + 120));
    }
  }
}

uint64_t _GLOBAL__sub_I_BambiConferenceCall_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(stateNames, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&stateNames[3], "WaitingForHold");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB858, "SessionRequested");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB870, "SessionConfirmed");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB888, "WaitToResumeConfirmedSession");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB8A0, "SessionTerminated");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_4, 0, &dword_1C51D1000);
}

void sub_1C557C5A0(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*(char *)(v2 - 1) < 0) {
      operator delete(*(void **)(v2 - 24));
    }
    v2 -= 24;
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t SipSubscription::SipSubscription(uint64_t a1, const std::string **a2, const std::string *a3)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.sub");
  ImsLogContainer::ImsLogContainer(a1, &__p, *a2 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 116) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)a1 = &unk_1F20DD0E8;
  *(void *)(a1 + 104) = &unk_1F20DD190;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = &unk_1F20B37B0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 256;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 264));
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  char v8 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = v6;
  *(void *)(a1 + 248) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (char *)(a1 + 424);
  std::string::operator=((std::string *)(a1 + 456), a3);
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.sub");
  uint64_t v10 = *a2;
  std::string::operator=((std::string *)(a1 + 312), &__p);
  std::string::operator=((std::string *)(a1 + 336), v10 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 368) = a1 + *(void *)(*(void *)a1 - 24);
  *(unsigned char *)(a1 + 448) = 1;
  if (*(char *)(a1 + 447) < 0)
  {
    *(void *)(a1 + 432) = 7;
    uint64_t v9 = *(char **)(a1 + 424);
  }
  else
  {
    *(unsigned char *)(a1 + 447) = 7;
  }
  strcpy(v9, "unknown");
  *(_WORD *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 482) = 0;
  return a1;
}

void sub_1C557C810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 479) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v15 + 447) < 0) {
    operator delete(*v21);
  }
  SipTimerContainer::~SipTimerContainer(v19);
  uint64_t v23 = *(std::__shared_weak_count **)(v15 + 248);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *(void *)(v15 + 200) = v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v18, *(void **)(v15 + 216));
  uint64_t v24 = *(std::__shared_weak_count **)(v15 + 192);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  SipLockable::~SipLockable(v16, (uint64_t *)off_1F20DD1D0);
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void SipSubscription::initializeEventPackage(SipSubscription *this, SipEventPackage *a2)
{
  *((void *)this + 32) = a2;
  if (a2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
    uint64_t v5 = v8;
    uint64_t v4 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 3);
    *((void *)a2 + 2) = v5;
    *((void *)a2 + 3) = v4;
    if (v6)
    {
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v4 = v9;
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v7 = *(const SipParameterMap **)(*((void *)this + 32) + 8);
    if (v7) {
      SipParameterMap::addParameters((std::string *)((char *)this + 200), v7);
    }
  }
  *((unsigned char *)this + 483) = 1;
}

void SipSubscription::create(uint64_t a1@<X0>, SipEventPackage *a2@<X1>, const std::string *a3@<X2>, SipSubscription **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<SipSubscription,std::allocator<SipSubscription>,std::shared_ptr<SipDialog> &,std::string const&,void>(a1, a3, a4);
  SipSubscription::initializeEventPackage(*a4, a2);
}

void sub_1C557C9A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipSubscription::~SipSubscription(SipSubscription *this)
{
  *(void *)this = &unk_1F20DD0E8;
  uint64_t v2 = (SipSubscription *)((char *)this + 104);
  *((void *)this + 13) = &unk_1F20DD190;
  uint64_t v3 = ImsLogContainer::debugStream(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipSubscription::deinitializeEventPackage()", 43);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (!*((unsigned char *)this + 483)) {
    goto LABEL_29;
  }
  SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 264));
  uint64_t v4 = (void *)((char *)this + 240);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 31);
    *uint64_t v4 = 0;
    *((void *)this + 31) = 0;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    *uint64_t v4 = 0;
    *((void *)this + 31) = 0;
  }
  uint64_t v7 = (char *)this + 424;
  uint64_t v8 = *((unsigned __int8 *)this + 447);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 54);
  }
  if (v8 == 10)
  {
    if (v9 < 0) {
      uint64_t v7 = *(char **)v7;
    }
    uint64_t v15 = *(void *)v7;
    int v16 = *((unsigned __int16 *)v7 + 4);
    if (v15 == 0x74616E696D726574 && v16 == 25701) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v8 != 7) {
    goto LABEL_24;
  }
  if (v9 < 0) {
    uint64_t v7 = *(char **)v7;
  }
  int v10 = *(_DWORD *)v7;
  int v11 = *(_DWORD *)(v7 + 3);
  if (v10 != 1852534389 || v11 != 1853321070)
  {
LABEL_24:
    (*(void (**)(void, void))(**((void **)this + 32) + 32))(*((void *)this + 32), 0);
    goto LABEL_25;
  }
  uint64_t v13 = *((void *)this + 32);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  v21[0] = &unk_1F20B2680;
  v21[1] = &_bambiDomain;
  int v22 = 0x40000000;
  uint64_t v14 = ImsResult::operator<<<char [28]>((uint64_t)v21, "destructed in unknown state");
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 40))(v13, v14, 0);
  ImsResult::~ImsResult((ImsResult *)v21);
LABEL_25:
  uint64_t v18 = *((void *)this + 32);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  *((unsigned char *)this + 483) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
LABEL_29:
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  SipTimerContainer::~SipTimerContainer((SipSubscription *)((char *)this + 264));
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *((void *)this + 25) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  SipLockable::~SipLockable(v2, (uint64_t *)off_1F20DD1D0);
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  SipSubscription::~SipSubscription(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipSubscription::~SipSubscription(SipSubscription *this)
{
}

{
  uint64_t vars8;

  SipSubscription::~SipSubscription((SipSubscription *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

void SipSubscription::loggableName(SipSubscription *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C557D020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a21);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipSubscription::loggableName(SipSubscription *this)
{
}

void SipSubscription::logPrefix(SipSubscription *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 112))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C557D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSubscription::handleTerminate(SipSubscription *this, const SipResponse *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipSubscription::handleTerminate", 32);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (char *)this + 424;
  uint64_t v8 = *((unsigned __int8 *)this + 447);
  int v9 = (char)v8;
  std::string::size_type v10 = *((void *)this + 54);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 54);
  }
  if (v8 == 10)
  {
    int v11 = *(char **)v7;
    if (v9 >= 0) {
      int v11 = (char *)this + 424;
    }
    uint64_t v12 = *(void *)v11;
    int v13 = *((unsigned __int16 *)v11 + 4);
    if (v12 == 0x74616E696D726574 && v13 == 25701)
    {
      uint64_t v15 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v15);
      int v16 = *(void **)(v15 + 8);
      uint64_t v17 = "handleTerminate called when we're already terminated";
      uint64_t v18 = 52;
LABEL_18:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      return;
    }
  }
  if (*((unsigned char *)this + 481))
  {
    if (v9 < 0)
    {
      *((void *)this + 54) = 18;
      uint64_t v7 = (char *)*((void *)this + 53);
    }
    else
    {
      *((unsigned char *)this + 447) = 18;
    }
    strcpy(v7, "terminationPending");
    uint64_t v15 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v15);
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = "delaying termination until NOTIFY handler completes";
    uint64_t v18 = 51;
    goto LABEL_18;
  }
  memset(&v35, 0, sizeof(v35));
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 53), v10);
    if (*((char *)this + 447) < 0)
    {
      *((void *)this + 54) = 10;
      uint64_t v7 = (char *)*((void *)this + 53);
      goto LABEL_21;
    }
  }
  else
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v35.__r_.__value_.__r.__words[2] = *((void *)this + 55);
  }
  *((unsigned char *)this + 447) = 10;
LABEL_21:
  strcpy(v7, "terminated");
  SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 264));
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (size != 7) {
    goto LABEL_30;
  }
  uint64_t v20 = &v35;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  int data = (int)v20->__r_.__value_.__l.__data_;
  int v22 = *(_DWORD *)((char *)v20->__r_.__value_.__r.__words + 3);
  if (data == 1852534389 && v22 == 1853321070)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    v31[0] = &unk_1F20B2680;
    v31[1] = &_bambiDomain;
    v31[2] = 0x40000000;
    if (a2)
    {
      uint64_t v26 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
      if (v26) {
        uint64_t v27 = v26[26];
      }
      else {
        uint64_t v27 = 0;
      }
      SipResultDomain::makeResult(a2, (uint64_t)v30);
      ImsResult::operator=((uint64_t)v31, (uint64_t)v30);
      ImsResult::~ImsResult((ImsResult *)v30);
    }
    else
    {
      uint64_t v27 = 0;
    }
    (*(void (**)(void, void *, uint64_t))(**((void **)this + 32) + 40))(*((void *)this + 32), v31, v27);
    ImsResult::~ImsResult((ImsResult *)v31);
  }
  else
  {
LABEL_30:
    (*(void (**)(void, uint64_t))(**((void **)this + 32) + 32))(*((void *)this + 32), a3);
  }
  long long v24 = (void *)*((void *)this + 30);
  if (v24)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v28, (void *)this + 23);
    SipDialog::subscriptionTerminated(v24, &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  else
  {
    uint64_t v25 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"no dialog to notify of our termination", 38);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_1C557D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  if (*(char *)(v3 - 41) < 0) {
    operator delete(*(void **)(v3 - 64));
  }
  _Unwind_Resume(a1);
}

void SipSubscription::updateResubscribeTimer(SipSubscription *this, unsigned int a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  time_t v6 = time(0);
  time_t v7 = v6 + a2;
  if (v7 != *((void *)this + 51) || a3 != 0)
  {
    *((void *)this + 51) = v7;
    if (a2)
    {
      if (a2 <= 0x4B0) {
        uint64_t v9 = a2 >> 1;
      }
      else {
        uint64_t v9 = a2 - 600;
      }
      *((void *)this + 52) = v6 + v9;
      uint64_t v11 = *((void *)this + 23);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 24);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 32))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"subscription expires ", 21);
      *(unsigned char *)(v12 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 51), v12, v13);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      uint64_t v14 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 32))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"will resubscribe ", 17);
      *(unsigned char *)(v14 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 52), v14, v15);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionRenewalTimer");
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v22 = 0;
      int v16 = operator new(0x20uLL);
      *int v16 = &unk_1F20DD310;
      v16[1] = this;
      v16[2] = v11;
      v16[3] = v10;
      int v22 = v16;
      SipTimerContainer::startTimer((int8x8_t *)this + 33, (uint64_t)&__p);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionExpirationTimer");
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = 0;
      uint64_t v17 = operator new(0x20uLL);
      *uint64_t v17 = &unk_1F20DD310;
      v17[1] = this;
      v17[2] = v11;
      v17[3] = v10;
      uint64_t v20 = v17;
      SipTimerContainer::startTimer((int8x8_t *)this + 33, (uint64_t)&__p);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10)
      {
        std::__shared_weak_count::__release_weak(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionTimer");
      SipTimerContainer::cancelTimer((int8x8_t *)this + 33, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C557DA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSubscription::handleSubscribeResponse(char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)a1 + 64))(a1);
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SipSubscription::handleSubscribeResponse", 40);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  unsigned int v13 = 0;
  unsigned int v5 = *(_DWORD *)(a2 + 88);
  if (v5 - 200 > 0x63)
  {
    if (v5 == 423)
    {
      int v12 = 0;
      if (SipMessage::headerValueAsUint32(a2, "Min-Expires", &v12))
      {
        uint64_t v8 = (SipDialog *)*((void *)a1 + 30);
        if (v8) {
          SipDialog::resetIfNecessary(v8);
        }
        uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)a1 + 64))(a1);
        (*(void (**)(char *, uint64_t))(*(void *)a1 + 16))(a1, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"retrying subscription using Min-Expires = ", 42);
        *(unsigned char *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        SipSubscription::subscribeWithExpiration((SipSubscription *)a1);
      }
      else
      {
        uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)a1 + 64))(a1);
        (*(void (**)(char *, uint64_t))(*(void *)a1 + 16))(a1, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"couldn't get Min-Expires value from 423 response", 48);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
      }
    }
    else if (v5 >= 0x12C)
    {
      (*(void (**)(char *, uint64_t, BOOL))(*(void *)a1 + 80))(a1, a2, a1[480] == 0);
    }
  }
  else
  {
    SipMessage::headerValueAsUint32(a2, "Expires", &v13);
    unsigned int v6 = v13;
    if (v13)
    {
      if (a1[447] < 0)
      {
        *((void *)a1 + 54) = 6;
        time_t v7 = (char *)*((void *)a1 + 53);
      }
      else
      {
        time_t v7 = a1 + 424;
        a1[447] = 6;
      }
      strcpy(v7, "active");
    }
    SipSubscription::updateResubscribeTimer((SipSubscription *)a1, v6, 0);
    (*(void (**)(void))(**((void **)a1 + 32) + 48))(*((void *)a1 + 32));
  }
  return 1;
}

uint64_t SipSubscription::subscribeWithExpiration(SipSubscription *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipSubscription::subscribeWithExpiration", 40);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (*((void *)this + 30))
  {
    SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 264));
    SipDialog::createRequestInDialog(*((void *)this + 30));
  }
  uint64_t v3 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 56))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"can't subscribe if we don't have a dialog", 41);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  return 0;
}

void sub_1C557E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipSubscription::handleTransactionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipSubscription::handleTransactionResponse", 42);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  time_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a3 + 296) + 112))(*(void *)(*(void *)a3 + 296));
  uint64_t v8 = v7[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v7[23];
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 == 9)
  {
    if ((v8 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v7, "SUBSCRIBE", *((void *)v7 + 1))) {
        goto LABEL_23;
      }
    }
    else
    {
      if (!v7[23]) {
        goto LABEL_23;
      }
      uint64_t v10 = "SUBSCRIBE";
      while (*v7 == *(unsigned __int8 *)v10)
      {
        ++v7;
        ++v10;
        if (!--v8) {
          goto LABEL_23;
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)a3 + 296) + 112))(*(void *)(*(void *)a3 + 296));
  uint64_t v12 = *(unsigned __int8 *)(result + 23);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v13 = *(void *)(result + 8);
  }
  if (v13 != 5) {
    return result;
  }
  if ((v12 & 0x80) != 0)
  {
    uint64_t result = memcmp(*(const void **)result, "REFER", *(void *)(result + 8));
    if (result) {
      return result;
    }
    goto LABEL_23;
  }
  if (!*(unsigned char *)(result + 23))
  {
LABEL_23:
    uint64_t v15 = *(uint64_t **)(a2 + 8);
    if (v15 == &SipResultDomain::_domain)
    {
      uint64_t v16 = *(void *)(a1 + 240);
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 216);
        if (v17)
        {
          if (*(void *)(v17 + 136)) {
            operator new();
          }
        }
      }
      uint64_t v15 = &SipResultDomain::_domain;
    }
    if ((*(unsigned int (**)(uint64_t *, void))(*v15 + 24))(v15, *(unsigned int *)(a2 + 16))) {
      return (*(uint64_t (**)(uint64_t, void, BOOL))(*(void *)a1 + 80))(a1, 0, *(unsigned char *)(a1 + 480) == 0);
    }
    else {
      return (*(uint64_t (**)(void))(**(void **)(a1 + 256) + 48))(*(void *)(a1 + 256));
    }
  }
  uint64_t v14 = "REFER";
  while (*(unsigned __int8 *)result == *(unsigned __int8 *)v14)
  {
    ++result;
    ++v14;
    if (!--v12) {
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t SipSubscription::terminateWithoutUnsubscribing(SipSubscription *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipSubscription::terminateWithoutUnsubscribing", 46);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((unsigned __int8 *)this + 447);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)this + 54);
  }
  if (v3 == 18
    && (v4 >= 0 ? (unsigned int v5 = (char *)this + 424) : (unsigned int v5 = (char *)*((void *)this + 53)),
        (v6 = *(void *)v5, uint64_t v7 = *((void *)v5 + 1), v8 = *((unsigned __int16 *)v5 + 8), v6 == 0x74616E696D726574)
      ? (BOOL v9 = v7 == 0x69646E65506E6F69)
      : (BOOL v9 = 0),
        v9 ? (BOOL v10 = v8 == 26478) : (BOOL v10 = 0),
        v10))
  {
    uint64_t v12 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"terminateWithoutUnsubscribing: termination is already pending", 61);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t result = 0;
    *(unsigned char *)(v12 + 17) = 0;
  }
  else
  {
    (*(void (**)(SipSubscription *, void, void))(*(void *)this + 80))(this, 0, 0);
    return 1;
  }
  return result;
}

uint64_t SipSubscription::unsubscribe(SipSubscription *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipSubscription::unsubscribe", 28);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (char **)((char *)this + 424);
  uint64_t v4 = *((unsigned __int8 *)this + 447);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)this + 54);
  }
  if (v4 == 18)
  {
    if (v5 >= 0) {
      uint64_t v11 = (char *)this + 424;
    }
    else {
      uint64_t v11 = *v3;
    }
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *((void *)v11 + 1);
    int v8 = *((unsigned __int16 *)v11 + 8);
    BOOL v9 = v12 == 0x74616E696D726574 && v13 == 0x69646E65506E6F69;
    int v10 = 26478;
  }
  else
  {
    if (v4 != 10) {
      goto LABEL_20;
    }
    if (v5 >= 0) {
      uint64_t v6 = (char *)this + 424;
    }
    else {
      uint64_t v6 = *v3;
    }
    uint64_t v7 = *(void *)v6;
    int v8 = *((unsigned __int16 *)v6 + 4);
    BOOL v9 = v7 == 0x74616E696D726574;
    int v10 = 25701;
  }
  if (v9 && v8 == v10)
  {
    uint64_t v18 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"unsubscribe: already in state ", 30);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v18 + 32))(v18, (char *)this + 424);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    return 1;
  }
LABEL_20:
  if (*((unsigned char *)this + 480))
  {
    uint64_t v15 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"unsubscribe already in progress", 31);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    return 1;
  }
  *((unsigned char *)this + 480) = 1;
  uint64_t v16 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"canceling subscription", 22);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  return SipSubscription::subscribeWithExpiration(this);
}

uint64_t SipSubscription::handleNotification(SipSubscription *this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipSubscription::handleNotification", 35);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (char *)SipMessage::header<SipSubscriptionStateHeader>((uint64_t)a2);
  if (v7)
  {
    int v8 = v7;
    memset(&__p, 0, sizeof(__p));
    if (v7[127] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v7 + 13), *((void *)v7 + 14));
    }
    else {
      std::string __p = *(std::string *)(v7 + 104);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size != 10) {
      goto LABEL_17;
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v13 = p_p->__r_.__value_.__r.__words[0];
    int v14 = LOWORD(p_p->__r_.__value_.__r.__words[1]);
    if (v13 == 0x74616E696D726574 && v14 == 25701)
    {
      if (*((char *)this + 447) < 0)
      {
        *((void *)this + 54) = 18;
        uint64_t v17 = (char *)*((void *)this + 53);
      }
      else
      {
        uint64_t v17 = (char *)this + 424;
        *((unsigned char *)this + 447) = 18;
      }
      strcpy(v17, "terminationPending");
      uint64_t v18 = *(void *)this;
      if (*((unsigned char *)this + 480))
      {
        uint64_t v19 = (*(uint64_t (**)(SipSubscription *))(v18 + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unsubscribe completed", 21);
        *(unsigned char *)(v19 + 17) = 0;
        uint64_t v20 = (unsigned char *)(v19 + 17);
      }
      else
      {
        uint64_t v19 = (*(uint64_t (**)(SipSubscription *))(v18 + 32))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"subscription terminated by network.  Expected expiration was ", 61);
        *(unsigned char *)(v19 + 17) = 0;
        uint64_t v20 = (unsigned char *)(v19 + 17);
        ims::formatTimeAndIntervalFromNow(*((ims **)this + 51), v19, v21);
      }
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      unsigned char *v20 = 0;
    }
    else
    {
LABEL_17:
      std::string::operator=((std::string *)((char *)this + 424), &__p);
      if (v8 + 80 != (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v8 + 72), (void **)"expires"))
      {
        unsigned int v16 = SipParameterMap::uintParameter((uint64_t)(v8 + 64), (void **)"expires", 0);
        SipSubscription::updateResubscribeTimer(this, v16, 0);
      }
    }
    *((unsigned char *)this + 481) = 1;
    uint64_t v10 = (*(uint64_t (**)(void, const SipRequest *, SipResponse *))(**((void **)this + 32) + 24))(*((void *)this + 32), a2, a3);
    *((unsigned char *)this + 481) = 0;
    uint64_t v22 = *((unsigned __int8 *)this + 447);
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)this + 54);
    }
    if (v22 == 18)
    {
      long long v24 = v23 >= 0 ? (SipSubscription *)((char *)this + 424) : (SipSubscription *)*((void *)this + 53);
      uint64_t v25 = *(void *)v24;
      uint64_t v26 = *((void *)v24 + 1);
      int v27 = *((unsigned __int16 *)v24 + 8);
      BOOL v28 = v25 == 0x74616E696D726574 && v26 == 0x69646E65506E6F69;
      if (v28 && v27 == 26478)
      {
        uint64_t v30 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"done with NOTIFY, moving from ", 30);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v30 + 32))(v30, (char *)this + 424);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" to ", 4);
        *(unsigned char *)(v30 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"terminated", 10);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(SipSubscription *, void, BOOL))(*(void *)this + 80))(this, 0, *((unsigned char *)this + 480) == 0);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 48))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"NOTIFY request has no Subscription-State header", 47);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Missing Subscription-State header");
    *((_DWORD *)a3 + 22) = 400;
    std::string::operator=((std::string *)a3 + 4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  return v10;
}

void sub_1C557F39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSubscription::scheduleTermination(int8x8_t *this, unsigned int a2, __int8 a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  this[60].i8[2] = a3;
  time_t v5 = time(0);
  this[51] = (int8x8_t)v5;
  int8x8_t v7 = this[23];
  uint64_t v6 = (std::__shared_weak_count *)this[24];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"subscription terminates at ", 27);
  *(unsigned char *)(v8 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(v5 + a2 / 0x3E8uLL), v8, v9);
  if (this[60].i8[2]) {
    uint64_t v10 = " silently";
  }
  else {
    uint64_t v10 = "";
  }
  if (this[60].i8[2]) {
    uint64_t v11 = 9;
  }
  else {
    uint64_t v11 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v10, v11);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "DelayedTerminationTimer");
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v16 = 0;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = &unk_1F20DD390;
  v12[1] = this;
  v12[2] = v7;
  v12[3] = v6;
  unsigned int v16 = v12;
  SipTimerContainer::startTimer(this + 33, (uint64_t)__p);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C557F5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

SipSubscription *SipSubscription::handleTimer(SipSubscription *this, uint64_t a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  switch(v3)
  {
    case 23:
      if (v4 >= 0) {
        uint64_t v12 = (uint64_t *)a2;
      }
      else {
        uint64_t v12 = *(uint64_t **)a2;
      }
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = *(uint64_t *)((char *)v12 + 15);
      if (v13 == 0x54646579616C6544 && v14 == 0x6974616E696D7265 && v15 == 0x72656D69546E6F69)
      {
        if (*((unsigned char *)this + 482))
        {
          return (SipSubscription *)SipSubscription::terminateWithoutUnsubscribing(this);
        }
        else
        {
          uint64_t v28 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
          (*(void (**)(SipSubscription *, uint64_t))(*(void *)v2 + 16))(v2, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"ending subscription", 19);
          *(unsigned char *)(v28 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v28 + 17) = 0;
          return (SipSubscription *)SipSubscription::unsubscribe(v2);
        }
      }
      break;
    case 27:
      if (v4 >= 0) {
        uint64_t v18 = (uint64_t *)a2;
      }
      else {
        uint64_t v18 = *(uint64_t **)a2;
      }
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v22 = *(uint64_t *)((char *)v18 + 19);
      if (v19 == 0x7069726373627553
        && v20 == 0x697078456E6F6974
        && v21 == 0x69546E6F69746172
        && v22 == 0x72656D69546E6F69)
      {
        uint64_t v26 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(void *)v2 + 16))(v2, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"subscription expired", 20);
        *(unsigned char *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v26 + 17) = 0;
        int v27 = *(uint64_t (**)(SipSubscription *, void, uint64_t))(*(void *)v2 + 80);
        return (SipSubscription *)v27(v2, 0, 1);
      }
      break;
    case 24:
      time_t v5 = v4 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      uint64_t v8 = v5[2];
      BOOL v9 = v6 == 0x7069726373627553 && v7 == 0x656E65526E6F6974;
      BOOL v10 = v9 && v8 == 0x72656D69546C6177;
      if (v10 && *((unsigned char *)this + 448))
      {
        uint64_t v11 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(void *)v2 + 16))(v2, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"renewing subscription", 21);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(void *))(**((void **)v2 + 32) + 56))(*((void **)v2 + 32));
        return (SipSubscription *)SipSubscription::subscribeWithExpiration(v2);
      }
      break;
  }
  return this;
}

void SipSubscription::checkTimers(SipSubscription *this)
{
  uint64_t v2 = (int8x8_t *)((char *)this + 264);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionExpirationTimer");
  SipTimerContainer::cancelTimer(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionRenewalTimer");
  SipTimerContainer::cancelTimer(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((void *)this + 51))
  {
    uint64_t v3 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"checkTimers: no expiration time", 31);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
  }
  time_t v4 = time(0);
  if (v4 >= *((void *)this + 51))
  {
    uint64_t v7 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 48))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"oops, missed my expiration time", 31);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(SipSubscription *, void, uint64_t))(*(void *)this + 80))(this, 0, 1);
  }
  else
  {
    int v5 = v4;
    if (*((unsigned char *)this + 448) && v4 >= *((void *)this + 52) - 10)
    {
      uint64_t v8 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"I'm supposed to renew at ", 25);
      *(unsigned char *)(v8 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 52), v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)". Doing it now.", 15);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(void))(**((void **)this + 32) + 56))(*((void *)this + 32));
      SipSubscription::subscribeWithExpiration(this);
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"restarting expiration timer", 27);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      SipSubscription::updateResubscribeTimer(this, *((_DWORD *)this + 102) - v5, 1);
    }
  }
}

void sub_1C557FEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipSubscription::printSubscriptionInfo(SipSubscription *this, ImsOutStream *a2, int a3)
{
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Event:      ", 16);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v6 = (const std::string *)(*(uint64_t (**)(void))(**((void **)this + 32) + 16))(*((void *)this + 32));
  LoggableString::LoggableString(&__p, v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 479) < 0)
  {
    if (!*((void *)this + 58)) {
      goto LABEL_8;
    }
  }
  else if (!*((unsigned char *)this + 479))
  {
    goto LABEL_8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Id:         ", 16);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)this + 19);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
LABEL_8:
  if (!a3) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = (void *)*((void *)a2 + 1);
  if (*((void *)this + 30))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    CallId:     ", 16);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)(*((void *)this + 30) + 1512) + 16))(*((void *)this + 30) + 1512, a2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    CallId:     ???", 19);
    *((unsigned char *)a2 + 17) = 0;
  }
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    State:      ", 16);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 424));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Expiration: ", 16);
  *((unsigned char *)a2 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 51), (uint64_t)a2, v8);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    AutoRenew:  ", 16);
  *((unsigned char *)a2 + 17) = 0;
  if (*((unsigned char *)this + 448)) {
    BOOL v9 = "on";
  }
  else {
    BOOL v9 = "off";
  }
  if (*((unsigned char *)this + 448)) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v9, v10);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v11 = (const void *)*((void *)this + 32);
  if (v11)
  {
    if (v12)
    {
      uint64_t v13 = v12;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    RCS group:  ", 16);
      *((unsigned char *)a2 + 17) = 0;
      if (v13[48]) {
        uint64_t v14 = "yes";
      }
      else {
        uint64_t v14 = "no";
      }
      if (v13[48]) {
        uint64_t v15 = 3;
      }
      else {
        uint64_t v15 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v14, v15);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
    }
  }
  return a2;
}

void sub_1C55803B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSubscription::determineIncomingMessageCategory(SipSubscription *this, const SipRequest *a2, unint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SipSubscription::determineIncomingMessageCategory - ", 52);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "Response";
  }
  else {
    uint64_t v7 = "Request";
  }
  if (a3) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (!(a3 | (unint64_t)SipMessage::header<SipSubscriptionStateHeader>((uint64_t)a2)))
  {
    uint64_t v12 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v12);
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = "Request has no Subscription-State header";
    uint64_t v15 = 40;
LABEL_14:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    return 0;
  }
  uint64_t v9 = *((void *)this + 32);
  if (!v9)
  {
    uint64_t v12 = (*(uint64_t (**)(SipSubscription *))(*(void *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(void *)this + 16))(this, v12);
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = "We don't have an associated event package";
    uint64_t v15 = 41;
    goto LABEL_14;
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 72);
  return v10();
}

void std::allocate_shared[abi:ne180100]<SipSubscription,std::allocator<SipSubscription>,std::shared_ptr<SipDialog> &,std::string const&,void>(uint64_t a1@<X1>, const std::string *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x200uLL);
  std::__shared_ptr_emplace<SipSubscription>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::string const&,std::allocator<SipSubscription>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 26, (uint64_t)(v6 + 3));
}

void sub_1C55806C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipSubscription>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::string const&,std::allocator<SipSubscription>,0>(void *a1, uint64_t a2, const std::string *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DD2C0;
  std::construct_at[abi:ne180100]<SipSubscription,std::shared_ptr<SipDialog> &,std::string const&,SipSubscription*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C558071C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD2C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD2C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSubscription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<SipSubscription,std::shared_ptr<SipDialog> &,std::string const&,SipSubscription*>(uint64_t a1, uint64_t a2, const std::string *a3)
{
  time_t v4 = *(std::string **)(a2 + 8);
  v6[0] = *(const std::string **)a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v4->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  SipSubscription::SipSubscription(a1, v6, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  return a1;
}

void sub_1C5580828(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD310;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD310;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DD310;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DD310;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 104))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5580A88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD390;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD390;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DD390;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DD390;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 104))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5580D30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void SipReferEventPackage::SipReferEventPackage(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F20DD410;
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    a1[5] = v3;
    a1[6] = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    a1[6] = 0;
    a1[5] = v3;
  }
  operator new();
}

void sub_1C5580E4C(_Unwind_Exception *a1)
{
  if (*v2) {
    std::__shared_weak_count::__release_weak(*v2);
  }
  SipEventPackage::~SipEventPackage(v1);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::~SipReferEventPackage(SipReferEventPackage *this)
{
  *(void *)this = &unk_1F20DD410;
  uint64_t v2 = (SipMessageDecoder *)*((void *)this + 4);
  if (v2)
  {
    SipMessageDecoder::~SipMessageDecoder(v2);
    MEMORY[0x1C878E320]();
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipEventPackage::~SipEventPackage(this);
}

{
  uint64_t vars8;

  SipReferEventPackage::~SipReferEventPackage(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipReferEventPackage::decodeSipFragmentResponseCodeFromNotify(SipReferEventPackage *this, const SipRequest *a2, SipMessageEncodingMap *a3)
{
  uint64_t v3 = (unsigned int *)SipReferEventPackage::decodeSipFragmentFromNotify(this, a2, a3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3[22];
  (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  return v4;
}

void *SipReferEventPackage::decodeSipFragmentFromNotify(SipReferEventPackage *this, const SipRequest *a2, SipMessageEncodingMap *a3)
{
  uint64_t v3 = (const void *)*((void *)this + 9);
  if (!v3) {
    return 0;
  }
  if (!v5) {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  if (v5[31] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v5 + 1), *((void *)v5 + 2));
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    __str.__r_.__value_.__r.__words[2] = *((void *)v5 + 3);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  ims::chomp(&__str, "\r\n\t ", 3);
  std::string::append(&__str, "\n", 1uLL);
  lpsrc = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = 0;
  uint64_t v15 = a2;
  BOOL v8 = SipMessageDecoder::decodeSipfrag((uint64_t)v13, (const std::string::value_type *)&__str, (std::string::pointer *)&lpsrc);
  uint64_t v9 = lpsrc;
  if (lpsrc) {
    BOOL v10 = v8;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = *(void *)lpsrc;
    if (!v7) {
      (*(void (**)(void *))(v11 + 8))(v9);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C5581118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)&a9);
  if (*(char *)(v9 - 41) < 0) {
    operator delete(*(void **)(v9 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::handleNotification(SipReferEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4)
  {
    long long v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 5);
      if (v7)
      {
        BOOL v8 = (const void *)*((void *)a2 + 9);
        if (v8
        {
          std::string::pointer v23 = 0;
          memset(&__str, 0, sizeof(__str));
          BOOL v10 = (long long *)(v9 + 8);
          if (v9[31] < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v9 + 1), *((void *)v9 + 2));
          }
          else
          {
            long long v11 = *v10;
            __str.__r_.__value_.__r.__words[2] = *((void *)v9 + 3);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
          }
          ims::chomp(&__str, "\r\n\t ", 3);
          std::string::append(&__str, "\n", 1uLL);
          BOOL v16 = SipMessageDecoder::decodeSipfrag(*((void *)this + 4), (const std::string::value_type *)&__str, &v23);
          std::string::pointer v17 = v23;
          if (v23) {
            BOOL v18 = v16;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18)
          {
            (*(void (**)(uint64_t, std::string::pointer))(*(void *)v7 + 24))(v7, v23);
            (*(void (**)(std::string::pointer))(*(void *)v17 + 8))(v17);
LABEL_27:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_29:
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
            return 1;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "sip.refer");
          std::string::basic_string[abi:ne180100]<0>(v21, "");
          uint64_t v20 = ims::error((uint64_t)__p, (uint64_t)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"SipReferEventPackage: unable to decode message from sipfrag: ", 61);
          *(unsigned char *)(v20 + 17) = 0;
          (*(void (**)(uint64_t, long long *))(*(void *)v20 + 32))(v20, v10);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v20 + 17) = 0;
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "sip.refer");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v13 = ims::debug((uint64_t)&__str, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Ignoring refer notification of type ", 36);
          *(unsigned char *)(v13 + 17) = 0;
          uint64_t v14 = *((void *)a2 + 9);
          if (v14) {
            uint64_t v15 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14);
          }
          else {
            uint64_t v15 = &SipBody::kGenericContentType;
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v13 + 32))(v13, v15);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
        }
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    long long v6 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.refer");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::debug((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SipReferEventPackage: no delegate to handle notification", 56);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v6) {
    goto LABEL_29;
  }
  return 1;
}

void sub_1C5581544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::desiredExpirationInterval(SipReferEventPackage *this)
{
  return 0;
}

void SipReferEventPackage::acceptedContentTypes(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "message/sipfrag");
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= v3)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a2) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a2) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v9) {
      BOOL v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v9);
    }
    else {
      BOOL v10 = 0;
    }
    long long v11 = v10 + v6;
    __v.__first_ = v10;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = &v10[v9];
    long long v12 = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = v16;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    __p[1] = 0;
    std::string::size_type v16 = 0;
    __p[0] = 0;
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v13 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v14 = SHIBYTE(v16);
    *(void *)(a2 + 8) = v13;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v16;
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(a2 + 8) = v4 + 24;
  }
}

void sub_1C5581730(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void SipReferEventPackage::handleSubscriptionFailed(SipReferEventPackage *this, ImsResult *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      long long v5 = v4;
      uint64_t v6 = *((void *)this + 5);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C55817DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::handleSubscriptionTerminated(SipReferEventPackage *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 5);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5581870(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::handleSubscriptionSuccess(SipReferEventPackage *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 5);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5581904(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::determineIncomingMessageCategory(SipReferEventPackage *this, const SipRequest *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

void sub_1C5581998(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

const char *SipReferEventPackage::name(SipReferEventPackage *this)
{
  return "refer";
}

void ImsNetworkReachabilityMonitor::~ImsNetworkReachabilityMonitor(CFTypeRef *this)
{
  ImsNetworkReachabilityMonitor::stopMonitoring(this);
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ImsNetworkReachabilityMonitor::stopMonitoring(CFTypeRef *this)
{
  uint64_t v2 = (const __SCNetworkReachability *)*this;
  if (v2)
  {
    SCNetworkReachabilitySetDispatchQueue(v2, 0);
    CFRelease(*this);
    *this = 0;
  }
  unint64_t v3 = (std::__shared_weak_count *)this[4];
  this[3] = 0;
  this[4] = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)this[2];
  this[1] = 0;
  this[2] = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

const __SCNetworkReachability *ImsNetworkReachabilityMonitor::setDelegate(const __SCNetworkReachability **this, ImsNetworkReachabilityDelegate *a2)
{
  unint64_t v4 = *this;
  if (*this)
  {
    uint64_t v5 = this[6];
    if (a2)
    {
      if (v5) {
        goto LABEL_9;
      }
      uint64_t v6 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        uint64_t v6 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v6;
      }
    }
    else
    {
      if (!v5) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
    }
    SCNetworkReachabilitySetDispatchQueue(v4, v6);
  }
LABEL_9:
  this[6] = a2;
  return ImsNetworkReachabilityMonitor::updateInfo((ImsNetworkReachabilityMonitor *)this);
}

const __SCNetworkReachability *ImsNetworkReachabilityMonitor::updateInfo(ImsNetworkReachabilityMonitor *this)
{
  SCNetworkReachabilityFlags flags = 0;
  uint64_t result = *(const __SCNetworkReachability **)this;
  if (result)
  {
    uint64_t result = (const __SCNetworkReachability *)SCNetworkReachabilityGetFlags(result, &flags);
    if (result) {
      ImsNetworkReachabilityMonitor::reachabilityChanged(this, flags);
    }
  }
  return result;
}

const __SCNetworkReachability *ImsNetworkReachabilityMonitor::getReachability(void *a1, uint64_t a2)
{
  unint64_t v3 = (const sockaddr *)(*(uint64_t (**)(void))(*(void *)*a1 + 72))(*a1);
  unint64_t v4 = (const sockaddr *)(*(uint64_t (**)(void))(**(void **)a2 + 72))();
  uint64_t result = SCNetworkReachabilityCreateWithAddressPair(0, v3, v4);
  if (result)
  {
    uint64_t v6 = result;
    SCNetworkReachabilityFlags flags = 0;
    int v7 = SCNetworkReachabilityGetFlags(result, &flags);
    CFRelease(v6);
    if (v7) {
      return (const __SCNetworkReachability *)((flags >> 1) & 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL ImsNetworkReachabilityMonitor::_startMonitoring(ImsNetworkReachabilityMonitor *this)
{
  *((_DWORD *)this + 10) = 0;
  uint64_t v1 = *(const __SCNetworkReachability **)this;
  if (*(void *)this)
  {
    v6.version = 0;
    memset(&v6.retain, 0, 24);
    v6.info = this;
    SCNetworkReachabilitySetCallback(v1, (SCNetworkReachabilityCallBack)ImsNetworkReachabilityMonitor::callback, &v6);
    if (*((void *)this + 6))
    {
      unint64_t v3 = *(const __SCNetworkReachability **)this;
      unint64_t v4 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        unint64_t v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v4;
      }
      SCNetworkReachabilitySetDispatchQueue(v3, v4);
      ImsNetworkReachabilityMonitor::updateInfo(this);
    }
  }
  return v1 != 0;
}

SCNetworkReachabilityRef ImsNetworkReachabilityMonitor::startMonitoring(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ImsNetworkReachabilityMonitor::stopMonitoring((CFTypeRef *)a1);
  SCNetworkReachabilityContext v6 = (const sockaddr *)(*(uint64_t (**)(void))(**(void **)a2 + 72))();
  int v7 = (const sockaddr *)(*(uint64_t (**)(void))(**(void **)a3 + 72))();
  SCNetworkReachabilityRef result = SCNetworkReachabilityCreateWithAddressPair(0, v6, v7);
  *(void *)a1 = result;
  if (result)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v13);
    long long v9 = v13;
    long long v13 = 0uLL;
    BOOL v10 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    (*(void (**)(long long *__return_ptr))(**(void **)a3 + 32))(&v13);
    long long v11 = v13;
    long long v13 = 0uLL;
    long long v12 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*((void *)&v13 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
      }
    }
    return (SCNetworkReachabilityRef)ImsNetworkReachabilityMonitor::_startMonitoring((ImsNetworkReachabilityMonitor *)a1);
  }
  return result;
}

void ImsNetworkReachabilityMonitor::callback(ImsNetworkReachabilityMonitor *this, const __SCNetworkReachability *a2, ImsNetworkReachabilityMonitor *a3, void *a4)
{
  if (a3) {
    ImsNetworkReachabilityMonitor::reachabilityChanged(a3, (int)a2);
  }
}

void ImsNetworkReachabilityMonitor::reachabilityChanged(ImsNetworkReachabilityMonitor *this, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "net.reach");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  uint64_t v4 = ims::debug((uint64_t)v8, (uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Reachability for ", 17);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" is (", 5);
  unint64_t v5 = 0;
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  if (a2)
  {
    unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"transient");
    unint64_t v11 = v5;
  }
  if ((a2 & 2) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"reachable");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"reachable";
      *(void *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 4) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"connection required");
    }
    else
    {
      strcpy((char *)v5, "connection required");
      *(_DWORD *)(v5 + 20) = unk_1C56C5C1C;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 8) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"on traffic");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"on traffic";
      *(void *)(v5 + 16) = 0xA00000000000000;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 0x10) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"intervention required");
    }
    else
    {
      strcpy((char *)v5, "intervention required");
      *(_WORD *)(v5 + 22) = unk_1C56C5C96;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 0x20) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"on demand");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"on demand";
      *(void *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 0x10000) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"local address");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"local address";
      *(void *)(v5 + 16) = 0xD00000000000000;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 0x20000) != 0)
  {
    if (v5 >= v12)
    {
      unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"is direct");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"is direct";
      *(void *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    unint64_t v11 = v5;
  }
  if ((a2 & 8) != 0)
  {
    if (v5 >= v12)
    {
      uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v10, (long long *)"automatic");
    }
    else
    {
      *(_OWORD *)unint64_t v5 = *(_OWORD *)"automatic";
      *(void *)(v5 + 16) = 0x900000000000000;
      uint64_t v6 = v5 + 24;
    }
    unint64_t v11 = v6;
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, ",");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C55822F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<unsigned int,std::string>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t SipResponse::SipResponse(uint64_t a1, int a2, std::string *__str, uint64_t a4)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a4;
  *(void *)a1 = &unk_1F20DD488;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 88) = a2;
  std::string::operator=((std::string *)(a1 + 96), __str);
  return a1;
}

void sub_1C5582450(_Unwind_Exception *a1)
{
  if (v1[119] < 0) {
    operator delete(*v2);
  }
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::SipResponse(SipResponse *this, int a2, const SipRequest *a3)
{
  uint64_t v4 = (void *)*((void *)a3 + 10);
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v4;
  *(void *)this = &unk_1F20DD488;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 22) = a2;
  if (v4)
  {
    SipMessageEncodingMap::copyHeadersFromRequestToResponse(v4, a3, this, 0);
    uint64_t v5 = *((void *)this + 10);
    if (v5)
    {
      uint64_t v6 = *(std::__shared_weak_count **)(v5 + 184);
      if (v6)
      {
        int v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          uint64_t v8 = *(void *)(v5 + 176);
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          if (v8) {
            SipMessageEncodingMap::initializeResponseFromTemplate(*((SipMessageEncodingMap **)this + 10), this);
          }
        }
      }
    }
  }
}

void sub_1C5582534(_Unwind_Exception *a1)
{
  if (v1[119] < 0) {
    operator delete(*v2);
  }
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::SipResponse(SipResponse *this, const std::string *a2)
{
  SipMessage::SipMessage(this, (const SipMessage *)a2);
  *(void *)(v3 + 96) = 0;
  *(void *)uint64_t v3 = &unk_1F20DD488;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 88) = a2[3].__r_.__value_.__r.__words[2];
  std::string::operator=((std::string *)(v3 + 96), a2 + 4);
}

void sub_1C55825C8(_Unwind_Exception *a1)
{
  if (v1[119] < 0) {
    operator delete(*v2);
  }
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::encodeStartLine(const std::string *this, ImsOutStream *a2)
{
  LoggableString::LoggableString((LoggableString *)&__p, "SIP/2.0 ");
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(this[4].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[4].__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  else if (*((unsigned char *)&this[4].__r_.__value_.__s + 23))
  {
LABEL_5:
    LoggableString::LoggableString(&__p, this + 4);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    goto LABEL_22;
  }
  uint64_t v4 = qword_1EBBDAF88;
  if (qword_1EBBDAF88)
  {
    unsigned int v5 = this[3].__r_.__value_.__r.__words[2];
    uint64_t v6 = &qword_1EBBDAF88;
    do
    {
      unsigned int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (v8) {
        uint64_t v6 = (uint64_t *)v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    uint64_t v10 = (const std::string *)&ims::kEmptyString;
    if (v6 != &qword_1EBBDAF88)
    {
      unsigned int v11 = *((_DWORD *)v6 + 8);
      unint64_t v12 = (const std::string *)(v6 + 5);
      if (v11 <= v5) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = (const std::string *)&ims::kEmptyString;
  }
  LoggableString::LoggableString(&__p, v10);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5582788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipResponse::debugStr@<X0>(void *a1@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5[1] + 8, a1);
  *(void *)&v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v5[1] = v3;
  *((void *)&v5[1] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C878E270](v9);
}

void sub_1C558294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SipResponse::longDebugStr@<X0>(SipResponse *this@<X0>, void *a2@<X8>)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v4 = (void *)std::ostream::operator<<();
  unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  uint64_t v6 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  long long v7 = (long long *)(v6 + 64);
  if (!v6) {
    long long v7 = &ims::kEmptyString;
  }
  int v8 = *((char *)v7 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = *(void *)v7;
  }
  if (v8 >= 0) {
    uint64_t v10 = *((unsigned __int8 *)v7 + 23);
  }
  else {
    uint64_t v10 = *((void *)v7 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  *(void *)&v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(*(void *)&v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v12[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v16);
}

void sub_1C5582B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *SipResponse::nextHop(SipResponse *this)
{
  SCNetworkReachabilityRef result = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)this);
  if (result)
  {
    uint64_t v2 = result[8];
    if (v2 == result[9]) {
      return 0;
    }
    else {
      return *(void **)v2;
    }
  }
  return result;
}

SipHeader *SipMessage::header<SipRSeqHeader>(SipMessage *a1, int a2)
{
  SCNetworkReachabilityRef result = SipMessage::headerWithName(a1, "RSeq", a2);
  if (result)
  {
  }
  return result;
}

SipRouteSet *SipResponse::associatedUris(SipResponse *this, SipRouteSet *a2)
{
  SCNetworkReachabilityRef result = (SipRouteSet *)SipMessage::header<SipPAssociatedUriHeader>((uint64_t)this);
  if (result)
  {
    return SipRouteSet::addHops(a2, (SipRouteSet *)((char *)result + 64), 0, 0, 0);
  }
  return result;
}

void *SipMessage::header<SipPAssociatedUriHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "P-Associated-URI");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

BOOL SipResponse::requiresPrack(SipResponse *this)
{
  if ((*((_DWORD *)this + 22) - 101) > 0x62) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
  BOOL v2 = SipMessage::requiresOption((uint64_t)this, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1C5582D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipResponse::setStatusFromImsResult(SipResponse *this, const ImsResult *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
  uint64_t v5 = *((unsigned int *)a2 + 4);
  if (v4 == &SipResultDomain::_domain)
  {
    *((_DWORD *)this + 22) = v5;
    ImsResult::description(a2, &__str);
    std::string::operator=((std::string *)this + 4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t *, uint64_t))(*v4 + 24))(v4, v5)) {
      int v6 = 500;
    }
    else {
      int v6 = 200;
    }
    *((_DWORD *)this + 22) = v6;
  }
}

void sub_1C5582DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipResponse::clone(SipResponse *this)
{
}

void sub_1C5582EC8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C409A54A9F4);
  _Unwind_Resume(a1);
}

uint64_t SipMessage::canUpdateOutboundViaHeader(SipMessage *this)
{
  return 0;
}

double SipMessage::updateInboundViaHeader@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t SipMessage::needsDefaultRoute(SipMessage *this)
{
  return 0;
}

uint64_t _GLOBAL__sub_I_SipResponse_cpp()
{
  v129[3] = *MEMORY[0x1E4F143B8];
  v18[0] = 100;
  std::string::basic_string[abi:ne180100]<0>(v19, "Trying");
  int v20 = 180;
  std::string::basic_string[abi:ne180100]<0>(v21, "Ringing");
  int v22 = 181;
  std::string::basic_string[abi:ne180100]<0>(v23, "Call Is Being Forwarded");
  int v24 = 182;
  std::string::basic_string[abi:ne180100]<0>(v25, "Queued");
  int v26 = 183;
  std::string::basic_string[abi:ne180100]<0>(v27, "Session Progress");
  int v28 = 200;
  std::string::basic_string[abi:ne180100]<0>(v29, "OK");
  int v30 = 202;
  std::string::basic_string[abi:ne180100]<0>(v31, "Accepted");
  int v32 = 300;
  std::string::basic_string[abi:ne180100]<0>(v33, "Multiple Choices");
  int v34 = 301;
  std::string::basic_string[abi:ne180100]<0>(v35, "Moved Permanently");
  int v36 = 302;
  std::string::basic_string[abi:ne180100]<0>(v37, "Moved Temporarily");
  int v38 = 305;
  std::string::basic_string[abi:ne180100]<0>(v39, "Use Proxy");
  int v40 = 380;
  std::string::basic_string[abi:ne180100]<0>(v41, "Alternative Service");
  int v42 = 400;
  std::string::basic_string[abi:ne180100]<0>(v43, "Bad Request");
  int v44 = 401;
  std::string::basic_string[abi:ne180100]<0>(v45, "Unauthorized");
  int v46 = 402;
  std::string::basic_string[abi:ne180100]<0>(v47, "Payment Required");
  int v48 = 403;
  std::string::basic_string[abi:ne180100]<0>(v49, "Forbidden");
  int v50 = 404;
  std::string::basic_string[abi:ne180100]<0>(v51, "Not Found");
  int v52 = 405;
  std::string::basic_string[abi:ne180100]<0>(v53, "Not Allowed");
  int v54 = 406;
  std::string::basic_string[abi:ne180100]<0>(v55, "Not Acceptable");
  int v56 = 407;
  std::string::basic_string[abi:ne180100]<0>(v57, "Authentication Required");
  int v58 = 408;
  std::string::basic_string[abi:ne180100]<0>(v59, "Request Timeout");
  int v60 = 410;
  std::string::basic_string[abi:ne180100]<0>(v61, "Gone");
  int v62 = 413;
  std::string::basic_string[abi:ne180100]<0>(v63, "Request Entity Too Large");
  int v64 = 414;
  std::string::basic_string[abi:ne180100]<0>(v65, "Request Uri Too Large");
  int v66 = 415;
  std::string::basic_string[abi:ne180100]<0>(v67, "Unsupported Media Type");
  int v68 = 416;
  std::string::basic_string[abi:ne180100]<0>(v69, "Unsupported Uri Scheme");
  int v70 = 420;
  std::string::basic_string[abi:ne180100]<0>(v71, "Bad Extension");
  int v72 = 421;
  std::string::basic_string[abi:ne180100]<0>(v73, "Extension Required");
  int v74 = 422;
  std::string::basic_string[abi:ne180100]<0>(v75, "Session Interval Too Small");
  int v76 = 423;
  std::string::basic_string[abi:ne180100]<0>(v77, "Interval Too Brief");
  int v78 = 478;
  std::string::basic_string[abi:ne180100]<0>(v79, "Unresolveable Destination");
  int v80 = 480;
  std::string::basic_string[abi:ne180100]<0>(v81, "Temporarily Unavailable");
  int v82 = 481;
  std::string::basic_string[abi:ne180100]<0>(v83, "Transaction Does Not Exist");
  int v84 = 482;
  std::string::basic_string[abi:ne180100]<0>(v85, "Loop Detected");
  int v86 = 483;
  std::string::basic_string[abi:ne180100]<0>(v87, "Too Many Hops");
  int v88 = 484;
  std::string::basic_string[abi:ne180100]<0>(v89, "Address Incomplete");
  int v90 = 485;
  std::string::basic_string[abi:ne180100]<0>(v91, "Ambiguous");
  int v92 = 486;
  std::string::basic_string[abi:ne180100]<0>(v93, "Busy Here");
  int v94 = 487;
  std::string::basic_string[abi:ne180100]<0>(v95, "Request Terminated");
  int v96 = 488;
  std::string::basic_string[abi:ne180100]<0>(v97, "Not Acceptable Here");
  int v98 = 489;
  std::string::basic_string[abi:ne180100]<0>(v99, "Bad Event");
  int v100 = 491;
  std::string::basic_string[abi:ne180100]<0>(v101, "Request Pending");
  int v102 = 493;
  std::string::basic_string[abi:ne180100]<0>(v103, "Undecipherable");
  int v104 = 500;
  std::string::basic_string[abi:ne180100]<0>(v105, "Server Internal Error");
  int v106 = 501;
  std::string::basic_string[abi:ne180100]<0>(v107, "Not Implemented");
  int v108 = 502;
  std::string::basic_string[abi:ne180100]<0>(v109, "Bad Gateway");
  int v110 = 503;
  std::string::basic_string[abi:ne180100]<0>(v111, "Service Unavailable");
  int v112 = 504;
  std::string::basic_string[abi:ne180100]<0>(v113, "Server Timeout");
  int v114 = 505;
  std::string::basic_string[abi:ne180100]<0>(v115, "SIP Version Not Supported");
  int v116 = 513;
  std::string::basic_string[abi:ne180100]<0>(v117, "Message Too Large");
  int v118 = 580;
  std::string::basic_string[abi:ne180100]<0>(v119, "Precondition Failure");
  int v120 = 600;
  std::string::basic_string[abi:ne180100]<0>(v121, "Busy Everywhere");
  int v122 = 603;
  std::string::basic_string[abi:ne180100]<0>(v123, "Decline");
  int v124 = 604;
  std::string::basic_string[abi:ne180100]<0>(v125, "Does Not Exist Anywhere");
  int v126 = 606;
  std::string::basic_string[abi:ne180100]<0>(v127, "Not Acceptable");
  int v128 = 607;
  std::string::basic_string[abi:ne180100]<0>(v129, "Do not send to voicemail");
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_1EBBDAF88 = 0;
  BOOL v2 = &qword_1EBBDAF88;
  qword_1EBBDAF90 = 0;
  _statusTextMap = (uint64_t)&qword_1EBBDAF88;
  while (1)
  {
    uint64_t v3 = &v18[8 * v1];
    unsigned int v4 = *v3;
    if (v2 == &qword_1EBBDAF88)
    {
      int v6 = &qword_1EBBDAF88;
LABEL_10:
      if (v0)
      {
        uint64_t v9 = v6 + 1;
        if (v6[1]) {
          goto LABEL_28;
        }
      }
      else
      {
LABEL_21:
        uint64_t v9 = &qword_1EBBDAF88;
        int v6 = &qword_1EBBDAF88;
      }
LABEL_22:
      unint64_t v12 = (char *)operator new(0x40uLL);
      *((_DWORD *)v12 + 8) = v4;
      long long v13 = (std::string *)(v12 + 40);
      long long v14 = &v18[8 * v1];
      long long v15 = (const std::string::value_type **)(v14 + 2);
      if (*((char *)v3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *v15, *((void *)v14 + 2));
      }
      else
      {
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v15;
        *((void *)v12 + 7) = *((void *)v14 + 3);
      }
      *(void *)unint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v6;
      *uint64_t v9 = (uint64_t)v12;
      if (*(void *)_statusTextMap)
      {
        _statusTextMap = *(void *)_statusTextMap;
        unint64_t v12 = (char *)*v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDAF88, (uint64_t *)v12);
      ++qword_1EBBDAF90;
      goto LABEL_28;
    }
    uint64_t v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        int v6 = v5;
        uint64_t v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      long long v7 = &qword_1EBBDAF88;
      do
      {
        int v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        long long v7 = v6;
      }
      while (v8);
    }
    if (*((_DWORD *)v6 + 8) < v4) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v10 = v0;
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t *)v10;
        unsigned int v11 = *(_DWORD *)(v10 + 32);
        if (v11 <= v4) {
          break;
        }
        uint64_t v10 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
      if (v11 >= v4) {
        break;
      }
      uint64_t v10 = v6[1];
      if (!v10)
      {
        uint64_t v9 = v6 + 1;
        goto LABEL_22;
      }
    }
LABEL_28:
    if (++v1 == 56) {
      break;
    }
    BOOL v2 = (uint64_t *)_statusTextMap;
    uint64_t v0 = qword_1EBBDAF88;
  }
  uint64_t v16 = 448;
  do
  {
    if (SHIBYTE(v18[v16 - 1]) < 0) {
      operator delete(*(void **)&v18[v16 - 6]);
    }
    v16 -= 8;
  }
  while (v16 * 4);
  return __cxa_atexit((void (*)(void *))std::map<unsigned int,std::string>::~map[abi:ne180100], &_statusTextMap, &dword_1C51D1000);
}

void sub_1C55837E8(_Unwind_Exception *exception_object)
{
}

uint64_t SipAlternativeService::parseChild(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == 6)
  {
    if (v3 >= 0) {
      uint64_t v5 = (int *)a2;
    }
    else {
      uint64_t v5 = (int *)*a2;
    }
    if (*v5 == 1769235297 && *((_WORD *)v5 + 2) == 28271) {
      return (*(uint64_t (**)(void))(*(void *)result + 72))();
    }
    int v7 = *v5;
    int v8 = *((unsigned __int16 *)v5 + 2);
    if (v7 == 1935762802 && v8 == 28271) {
      return (*(uint64_t (**)(void))(*(void *)result + 72))();
    }
  }
  else if (v2 == 4)
  {
    unsigned int v4 = v3 >= 0 ? a2 : (uint64_t *)*a2;
    if (*(_DWORD *)v4 == 1701869940) {
      return (*(uint64_t (**)(void))(*(void *)result + 72))();
    }
  }
  return result;
}

std::string *SipServiceInfo::setText(uint64_t a1, int a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a1 + 8), __str);
}

uint64_t Sip3gppImsInfo::createChild(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == 12)
  {
    if (v3 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (v11 == 0x2D65636976726573 && v12 == 1868983913) {
      operator new();
    }
  }
  else if (v2 == 19)
  {
    if (v3 >= 0) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = (uint64_t *)*a2;
    }
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = *(uint64_t *)((char *)v4 + 11);
    if (v5 == 0x74616E7265746C61 && v6 == 0x767265732D657669 && v7 == 0x656369767265732DLL) {
      operator new();
    }
  }
  return 0;
}

void Sip3gppImsInfo::Sip3gppImsInfo(Sip3gppImsInfo *this, const Sip3gppImsInfo *a2)
{
  *((void *)this + 1) = 0;
  int v3 = (char **)((char *)this + 8);
  *(void *)this = &unk_1F20DD538;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  for (uint64_t i = *((void *)a2 + 2); v4 != i; v4 += 8)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v4 + 96))();
    uint64_t v7 = v6;
    uint64_t v9 = (uint64_t *)*((void *)this + 2);
    unint64_t v8 = *((void *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - *v3) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v8 - (void)*v3;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (uint64_t *)(v14 + 8 * v11);
      *uint64_t v16 = v7;
      uint64_t v10 = v16 + 1;
      BOOL v18 = (char *)*((void *)this + 1);
      uint64_t v17 = (char *)*((void *)this + 2);
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *--uint64_t v16 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = *v3;
      }
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v10;
      *((void *)this + 3) = v14 + 8 * v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v9 = v6;
      uint64_t v10 = v9 + 1;
    }
    *((void *)this + 2) = v10;
  }
}

void sub_1C5583D2C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void Sip3gppImsInfo::~Sip3gppImsInfo(Sip3gppImsInfo *this)
{
  *(void *)this = &unk_1F20DD538;
  uint64_t v2 = (void *)*((void *)this + 1);
  int v3 = (void *)*((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  Sip3gppImsInfo::~Sip3gppImsInfo(this);
  JUMPOUT(0x1C878E320);
}

unsigned __int8 *Sip3gppImsInfo::alternativeServiceWithServiceType(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    char v4 = *((unsigned char *)a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v5 = a2[1];
    }
    if (v4 >= 0) {
      uint64_t v6 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    do
    {
      if (*v2)
      {
        if (v7)
        {
          unint64_t v8 = v7;
          uint64_t v9 = v7[31];
          uint64_t v10 = (v9 & 0x80u) == 0 ? (unsigned __int8 *)v7[31] : (unsigned __int8 *)*((void *)v7 + 2);
          if (v10 == v5)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp(*((const void **)v7 + 1), v6, *((void *)v7 + 2))) {
                return v8;
              }
            }
            else
            {
              if (!v7[31]) {
                return v8;
              }
              uint64_t v11 = 0;
              while (v7[v11 + 8] == v6[v11])
              {
                if (v9 == ++v11) {
                  return v8;
                }
              }
            }
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

void SipAlternativeService::~SipAlternativeService(void **this)
{
  *this = &unk_1F20DD5C0;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20DD5C0;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipAlternativeService::clone(SipAlternativeService *this)
{
}

void sub_1C5584138(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x1C878E320](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void SipServiceInfo::~SipServiceInfo(void **this)
{
  *this = &unk_1F20DD638;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20DD638;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipServiceInfo::clone(SipServiceInfo *this)
{
}

void sub_1C55842D0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::SipDialogFork(uint64_t a1, const std::string **a2)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer(v4, &__p, *a2 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)a1 = &unk_1F20DD6E0;
  *(void *)(a1 + 8) = &unk_1F20DD740;
  *(void *)(a1 + 112) = &unk_1F20DD7A0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_DWORD *)(a1 + 180) = 1;
  SipUri::SipUri((SipUri *)(a1 + 184));
  *(void *)(a1 + 592) = &unk_1F20E5228;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 672) = a1 + 680;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 704));
  *(_DWORD *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 852) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = a1 + 864;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v5->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v5;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)(a1 + 808) = a1;
  unint64_t v8 = *a2;
  std::string::operator=((std::string *)(a1 + 752), (const std::string *)(a1 + 16));
  std::string::operator=((std::string *)(a1 + 776), v8 + 5);
  *(_DWORD *)(a1 + 180) = (*a2)[77].__r_.__value_.__l.__data_;
  return a1;
}

void sub_1C55844D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::string>::destroy(v16 + 672, *(char **)(v16 + 680));
  int v20 = *(std::__shared_weak_count **)(v16 + 664);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  SipRouteSet::~SipRouteSet(v18);
  SipUri::~SipUri(v17);
  if (*(char *)(v16 + 175) < 0) {
    operator delete(*(void **)(v16 + 152));
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v16 + 144);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  int v22 = *(std::__shared_weak_count **)(v16 + 128);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipDialogFork::initialize(SipDialogFork *this)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v4, (void *)this + 15);
  std::allocate_shared[abi:ne180100]<SipOfferAnswer,std::allocator<SipOfferAnswer>,std::shared_ptr<SipDialogFork>,void>(&v4, &v6);
  long long v2 = v6;
  long long v6 = 0uLL;
  int v3 = (std::__shared_weak_count *)*((void *)this + 83);
  *((_OWORD *)this + 41) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C55845E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogFork::create(uint64_t a1@<X0>, SipDialogFork **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipDialogFork,std::allocator<SipDialogFork>,std::shared_ptr<SipDialog> &,void>(a1, a2);
  SipDialogFork::initialize(*a2);
}

void sub_1C5584640(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogFork::~SipDialogFork(SipDialogFork *this)
{
  *(void *)this = &unk_1F20DD6E0;
  *((void *)this + 1) = &unk_1F20DD740;
  *((void *)this + 14) = &unk_1F20DD7A0;
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*((void **)this + 108));
  SipTimerContainer::~SipTimerContainer((SipDialogFork *)((char *)this + 704));
  std::__tree<std::string>::destroy((uint64_t)this + 672, *((char **)this + 85));
  long long v2 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  SipRouteSet::~SipRouteSet((SipDialogFork *)((char *)this + 592));
  SipUri::~SipUri((SipDialogFork *)((char *)this + 184));
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  SipDialogFork::~SipDialogFork(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipDialogFork::~SipDialogFork(SipDialogFork *this)
{
}

{
  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 112));
}

{
  uint64_t vars8;

  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

double SipDialogFork::initializeMobileTerminated@<D0>(SipDialogFork *this@<X0>, const SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v5) {
    long long v6 = SipUriHeader::tag(v5);
  }
  else {
    long long v6 = &ims::kEmptyString;
  }
  std::string::operator=((std::string *)((char *)this + 152), (const std::string *)v6);
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void SipDialogFork::initializeMobileOriginated(uint64_t a1@<X0>, const SipMessage *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
  if (v8) {
    uint64_t v9 = SipUriHeader::tag(v8);
  }
  else {
    uint64_t v9 = &ims::kEmptyString;
  }
  memset(&__str, 0, sizeof(__str));
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    __str.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=((std::string *)(a1 + 152), &__str);
    SipDialogFork::updateRouteSet((SipDialogFork *)a1, a2, 1);
    SipDialogFork::handleTargetRefresh((SipDialogFork *)a1, a2);
    SipOfferAnswer::updateWithOutgoingMessage(*(SipOfferAnswer **)(a1 + 656), *(void *)(*(void *)a3 + 296), (std::string *)(*(void *)a3 + 328), (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    v14[0] = &unk_1F20B2680;
    v14[1] = &_bambiDomain;
    int v15 = 1073741825;
    uint64_t v12 = (const std::string *)ImsResult::operator<<<char [25]>((uint64_t)v14, "empty to tag in response");
    ImsResult::ImsResult((ImsResult *)a4, v12);
    ImsResult::~ImsResult((ImsResult *)v14);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5584A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v10 - 41) < 0) {
    operator delete(*(void **)(v10 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::handleTargetRefresh(SipDialogFork *this, const SipMessage *a2)
{
  uint64_t result = (uint64_t)SipMessage::header<SipContactHeader>((uint64_t)a2);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 72);
    if (v4 && v4 != *(void *)(result + 80))
    {
      uint64_t v6 = v4 + 8;
      uint64_t v7 = (SipDialogFork *)((char *)this + 184);
      uint64_t result = SipUri::equals((SipUri *)(v4 + 8), (SipDialogFork *)((char *)this + 184), 1);
      if ((result & 1) == 0)
      {
        if (*((char *)this + 311) < 0) {
          uint64_t v8 = *((void *)this + 37);
        }
        else {
          uint64_t v8 = *((unsigned __int8 *)this + 311);
        }
        uint64_t v10 = *((void *)this + 1);
        uint64_t v9 = (char *)this + 8;
        uint64_t v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
        (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))(v9, v11);
        uint64_t v12 = *(void **)(v11 + 8);
        if (v8)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"updating remote contact from ", 29);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(SipUri *, uint64_t))(*(void *)v7 + 40))(v7, v11);
          uint64_t v12 = *(void **)(v11 + 8);
          uint64_t v13 = " to ";
          uint64_t v14 = 4;
        }
        else
        {
          uint64_t v13 = "setting remote contact to ";
          uint64_t v14 = 26;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v11);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        return (uint64_t)SipUri::operator=(v7, v6);
      }
    }
  }
  return result;
}

void SipDialogFork::logPrefix(SipDialogFork *this, ImsOutStream *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 17);
      if (v6)
      {
        SipDialog::stack(*((std::__shared_weak_count **)this + 17), &v12);
        uint64_t v7 = v12;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (v7)
        {
          SipDialog::stack(v6, &v10);
          (*(void (**)(void **__return_ptr))(*(void *)v10 + 104))(&v12);
          (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, &v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
          *((unsigned char *)a2 + 17) = 0;
          (*(void (**)(void **__return_ptr, SipDialogFork *))(*(void *)this + 24))(__p, this);
          (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
          *((unsigned char *)a2 + 17) = 0;
          if (v9 < 0) {
            operator delete(__p[0]);
          }
          if (v14 < 0) {
            operator delete(v12);
          }
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  (*(void (**)(void **__return_ptr, SipDialogFork *))(*(void *)this + 24))(&v12, this);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, &v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v14 < 0) {
    operator delete(v12);
  }
  if (v5) {
    goto LABEL_17;
  }
}

void sub_1C5584E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialogFork::logPrefix(SipDialogFork *this, ImsOutStream *a2)
{
}

void SipDialogFork::loggableName(SipDialogFork *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C55850EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a18);
  _Unwind_Resume(a1);
}

uint64_t *SipDialogFork::fillCommonRequestHeaders(SipDialogFork *this, SipRequest *a2)
{
  if (*((char *)this + 311) < 0)
  {
    if (*((void *)this + 37)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 311))
  {
LABEL_3:
    SipUri::operator=((SipRequest *)((char *)a2 + 112), (uint64_t)this + 184);
    goto LABEL_4;
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      char v9 = v8;
      uint64_t v10 = *((void *)this + 17);
      if (v10) {
        SipUri::operator=((SipRequest *)((char *)a2 + 112), v10 + 232);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
LABEL_4:
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 175)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*((void *)this + 20))
  {
LABEL_6:
    uint64_t v4 = SipMessage::header<SipToHeader>(a2, 1);
    SipUriHeader::setTag((uint64_t)v4, (uint64_t)this + 152);
  }
LABEL_7:
  uint64_t result = SipMessage::removeHeadersWithName(a2, "Route");
  if (*((void *)this + 75) != *((void *)this + 76))
  {
    uint64_t v6 = (SipHeader *)((char *)SipMessage::header<SipRouteHeader>(a2, 1) + 64);
    return (uint64_t *)SipRouteSet::addHops(v6, (SipDialogFork *)((char *)this + 592), 0, 0, 0);
  }
  return result;
}

void sub_1C5585280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *SipDialogFork::verifyAndUpdateRemoteCSeq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a1 + 176))
  {
LABEL_13:
    long long v16 = SipMessage::header<SipCSeqHeader>(a2);
    if (v16) {
      int v17 = v16[15];
    }
    else {
      int v17 = 0;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    long long v18 = (_DWORD *)(a1 + 8);
    v18[42] = v17;
    uint64_t v20 = (*(uint64_t (**)(_DWORD *))(v19 + 64))(v18);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v18 + 16))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"updated remote cseq to ", 23);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    return (std::__shared_weak_count *)1;
  }
  uint64_t v6 = SipMessage::header<SipCSeqHeader>(a2);
  if (v6) {
    unsigned int v7 = v6[15];
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 >= *(_DWORD *)(a1 + 176))
  {
    uint64_t v10 = SipMessage::header<SipCSeqHeader>(a2);
    if (v10) {
      int v11 = v10[15];
    }
    else {
      int v11 = 0;
    }
    if (v11 == *(_DWORD *)(a1 + 176))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v12 = a1 + 8;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 64))(v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"ignoring duplicate ", 19);
      *(unsigned char *)(v14 + 17) = 0;
      int v15 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      LoggableString::LoggableString((std::string *)__p, v15);
      (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" request", 8);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (SBYTE7(v29) < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
    goto LABEL_13;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 64))(a1 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"received out of order ", 22);
  *(unsigned char *)(v8 + 17) = 0;
  char v9 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  LoggableString::LoggableString((std::string *)__p, v9);
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" request (expecting > ", 22);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" but got ", 9);
  *(unsigned char *)(v8 + 17) = 0;
  SipMessage::header<SipCSeqHeader>(a2);
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *(std::__shared_weak_count **)(a1 + 144);
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    if (result)
    {
      int v22 = result;
      uint64_t v23 = *(void *)(a1 + 136);
      if (v23)
      {
        uint64_t v35 = 0;
        long long v33 = 0u;
        *(_OWORD *)int v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        *(_OWORD *)std::string __p = 0u;
        std::string::basic_string[abi:ne180100]<0>(&__str, "Request received out of order");
        uint64_t v24 = *(void *)(v23 + 216);
        char v25 = *(std::__shared_weak_count **)(v23 + 224);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipResponse::SipResponse((uint64_t)__p, 500, &__str, *(void *)(v24 + 136) + 288);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        (*(void (**)(void *__return_ptr))(**(void **)a3 + 168))(v26);
        ImsResult::~ImsResult((ImsResult *)v26);
        __p[0] = &unk_1F20DD488;
        if (SHIBYTE(v35) < 0) {
          operator delete(v34[0]);
        }
        SipMessage::~SipMessage((SipMessage *)__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      return 0;
    }
  }
  return result;
}

void sub_1C55857E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  SipResponse::~SipResponse(&a24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void SipDialogFork::updateRouteSet(SipDialogFork *this, const SipMessage *a2, char a3)
{
  uint64_t v5 = this;
  uint64_t v6 = (SipDialogFork *)((char *)this + 592);
  SipRouteSet::clear((void *)this + 74);
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  if (v7 == v8)
  {
    char v9 = 0;
LABEL_41:
    uint64_t v32 = *((void *)v5 + 1);
    long long v31 = (char *)v5 + 8;
    uint64_t v33 = (*(uint64_t (**)(char *))(v32 + 64))(v31);
    (*(void (**)(char *, uint64_t))(*(void *)v31 + 16))(v31, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"no Record-Route headers.  Clearing route set.", 45);
    *(unsigned char *)(v33 + 17) = 0;
    int v34 = (unsigned char *)(v33 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_48;
  }
  char v39 = a3;
  int v40 = v6;
  uint64_t v41 = v5;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  do
  {
    int v15 = *(unsigned __int8 **)(v8 + 8 * v13);
    if ((char)v15[31] < 0)
    {
      long long v16 = (const void *)*((void *)v15 + 1);
      unint64_t v17 = *((void *)v15 + 2);
    }
    else
    {
      long long v16 = v15 + 8;
      unint64_t v17 = v15[31];
    }
    if (v17 >= 0xC) {
      size_t v18 = 12;
    }
    else {
      size_t v18 = v17;
    }
    if (!memcmp(v16, "Record-Route", v18) && v17 == 12)
    {
      uint64_t v21 = v20;
      if (v12 >= v11)
      {
        uint64_t v22 = (v12 - v9) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        if ((v11 - v9) >> 2 > v23) {
          unint64_t v23 = (v11 - v9) >> 2;
        }
        if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v25 = (char *)operator new(8 * v24);
        }
        else
        {
          char v25 = 0;
        }
        int v26 = &v25[8 * v22];
        *(void *)int v26 = v21;
        uint64_t v10 = v26 + 8;
        while (v12 != v9)
        {
          uint64_t v27 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v26 - 1) = v27;
          v26 -= 8;
        }
        int v11 = &v25[8 * v24];
        if (v9) {
          operator delete(v9);
        }
        char v9 = v26;
      }
      else
      {
        *(void *)uint64_t v12 = v20;
        uint64_t v10 = v12 + 8;
      }
      uint64_t v8 = *((void *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 2);
      uint64_t v12 = v10;
    }
    uint64_t v13 = ++v14;
  }
  while (v14 < (unint64_t)((v7 - v8) >> 3));
  if (v9 == v12)
  {
    uint64_t v5 = v41;
    goto LABEL_41;
  }
  if (v39)
  {
    uint64_t v28 = ((unint64_t)(v10 - v9) >> 3);
    long long v29 = v40;
    while ((int)v28 >= 1)
    {
      uint64_t v30 = v28 - 1;
      SipRouteSet::addHops(v40, (const SipRouteSet *)(*(void *)&v9[8 * v28 - 8] + 64), 1, 0, 0);
      uint64_t v28 = v30;
    }
  }
  else
  {
    long long v29 = v40;
    if (v10 != v9)
    {
      uint64_t v35 = 0;
      if ((unint64_t)((v10 - v9) >> 3) <= 1) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = (v10 - v9) >> 3;
      }
      do
        SipRouteSet::addHops(v40, (const SipRouteSet *)(*(void *)&v9[8 * v35++] + 64), 0, 0, 0);
      while (v36 != v35);
    }
  }
  uint64_t v37 = *((void *)v41 + 1);
  *((unsigned char *)v41 + 648) = 1;
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(v37 + 64))((uint64_t)v41 + 8);
  (*(void (**)(uint64_t, uint64_t))(*((void *)v41 + 1) + 16))((uint64_t)v41 + 8, v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"updated route set: ", 19);
  *(unsigned char *)(v38 + 17) = 0;
  int v34 = (unsigned char *)(v38 + 17);
  SipRouteSet::toStream(v29, (ImsOutStream *)v38);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_48:
  *int v34 = 0;
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_1C5585C6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogFork::printForkInfo(SipDialogFork *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Local cseq:     ", 20);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Remote cseq:    ", 20);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Remote contact: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = *((void *)this + 23);
  this = (SipDialogFork *)((char *)this + 184);
  (*(void (**)(SipDialogFork *, ImsOutStream *))(v4 + 40))(this, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Route set:      ", 20);
  *((unsigned char *)a2 + 17) = 0;
  SipRouteSet::toStream((SipDialogFork *)((char *)this + 408), a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Offer/Answer:   ", 20);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(void, ImsOutStream *))(**((void **)this + 59) + 16))(*((void *)this + 59), a2);
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipDialogFork::handleRemoteSdpOffer(void *a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)a1[18];
  if (v6)
  {
    char v9 = std::__shared_weak_count::lock(v6);
    if (v9)
    {
      uint64_t v10 = (SipDialog *)a1[17];
      if (v10)
      {
        uint64_t v43 = 0;
        int v44 = 0;
        SipDialog::sipSession(v10, &v43);
        uint64_t v11 = v43;
        if (!v43)
        {
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v45 = &unk_1F20B2680;
          int v46 = &_bambiDomain;
          int v47 = 1073741826;
          uint64_t v20 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v45, "no session to handle SDP offer");
          uint64_t v21 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v20);
          ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v21);
          goto LABEL_31;
        }
        if (*(unsigned char *)(v43 + 1352))
        {
          uint64_t v12 = *(void *)(v43 + 1144);
          uint64_t v13 = *(std::__shared_weak_count **)(v43 + 1152);
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          if (v12)
          {
            *(void *)(a4 + 64) = 0;
            *(_OWORD *)(a4 + 32) = 0u;
            *(_OWORD *)(a4 + 48) = 0u;
            *(_OWORD *)a4 = 0u;
            *(_OWORD *)(a4 + 16) = 0u;
            unsigned int v14 = *(void **)(v11 + 1144);
            int v15 = *(std::__shared_weak_count **)(v11 + 1152);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v16 = (std::__shared_weak_count *)a2[1];
            uint64_t v41 = *a2;
            int v42 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v17 = *a3;
            xpc_object_t object = v17;
            if (v17) {
              xpc_retain(v17);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            LazuliSession::handleSdpOfferInFork(v14, (uint64_t)&v41, &object, a4);
            xpc_release(object);
            xpc_object_t object = 0;
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            if ((*(unsigned int (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)))
            {
              uint64_t v32 = a1[1];
              long long v31 = a1 + 1;
              uint64_t v33 = (*(uint64_t (**)(void *))(v32 + 56))(v31);
              (*(void (**)(void *, uint64_t))(*v31 + 16))(v31, v33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"media layer rejected SDP offer: ", 32);
              *(unsigned char *)(v33 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v33);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v33 + 17) = 0;
              goto LABEL_44;
            }
            ImsResult::~ImsResult((ImsResult *)a4);
            goto LABEL_40;
          }
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v45 = &unk_1F20B2680;
          int v46 = &_bambiDomain;
          int v47 = 1073741826;
          long long v29 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v45, "no lazuli session to handle SDP offer");
          uint64_t v30 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v29);
          ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v30);
LABEL_31:
          ImsResult::~ImsResult((ImsResult *)&v45);
          goto LABEL_44;
        }
        uint64_t v22 = *(std::__shared_weak_count **)(v43 + 784);
        if (v22)
        {
          uint64_t v23 = *(void *)(v43 + 776);
          atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          unint64_t v24 = std::__shared_weak_count::lock(v22);
          std::__shared_weak_count::__release_weak(v22);
          if (v24 && v23)
          {
            *(void *)(a4 + 64) = 0;
            *(_OWORD *)(a4 + 32) = 0u;
            *(_OWORD *)(a4 + 48) = 0u;
            *(_OWORD *)a4 = 0u;
            *(_OWORD *)(a4 + 16) = 0u;
            char v25 = (std::__shared_weak_count *)a2[1];
            uint64_t v38 = *a2;
            char v39 = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v36, a1 + 15);
            BambiCall::handleSdpOfferInFork(v23, &v38, &v36, a4);
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            if (!(*(unsigned int (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)))
            {
              ImsResult::~ImsResult((ImsResult *)a4);
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_40:
              *(_OWORD *)(a4 + 24) = 0u;
              *(_OWORD *)(a4 + 40) = 0u;
              *(_OWORD *)(a4 + 56) = 0u;
              *(void *)a4 = &unk_1F20B2680;
              *(void *)(a4 + 8) = &_bambiDomain;
              *(_DWORD *)(a4 + 16) = 0;
              goto LABEL_44;
            }
            uint64_t v27 = a1[1];
            int v26 = a1 + 1;
            uint64_t v28 = (*(uint64_t (**)(void *))(v27 + 56))(v26);
            (*(void (**)(void *, uint64_t))(*v26 + 16))(v26, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"media layer rejected SDP offer: ", 32);
            *(unsigned char *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v28);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v28 + 17) = 0;
LABEL_43:
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_44:
            if (v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            }
            goto LABEL_46;
          }
        }
        else
        {
          unint64_t v24 = 0;
        }
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v45 = &unk_1F20B2680;
        int v46 = &_bambiDomain;
        int v47 = 1073741826;
        int v34 = (ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&v45, "no call to handle SDP offer");
        uint64_t v35 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v34);
        ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v35);
        ImsResult::~ImsResult((ImsResult *)&v45);
        if (!v24) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
    }
  }
  else
  {
    char v9 = 0;
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v45 = &unk_1F20B2680;
  int v46 = &_bambiDomain;
  int v47 = 1073741826;
  size_t v18 = (ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&v45, "no dialog to handle SDP offer");
  uint64_t v19 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v18);
  ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v19);
  ImsResult::~ImsResult((ImsResult *)&v45);
  if (v9) {
LABEL_46:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C55864EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialogFork::handleRemoteSdpOffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
}

void SipDialogFork::handleRemoteSdpAnswer(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[18];
  if (v7)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v7);
    if (v11)
    {
      uint64_t v12 = (SipDialog *)a1[17];
      if (v12)
      {
        uint64_t v51 = 0;
        int v52 = 0;
        SipDialog::sipSession(v12, &v51);
        uint64_t v13 = v51;
        if (!v51)
        {
          long long v56 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          BOOL v53 = &unk_1F20B2680;
          int v54 = &_bambiDomain;
          int v55 = 1073741826;
          uint64_t v23 = (ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&v53, "no session to handle SDP answer");
          unint64_t v24 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v23);
          ImsResult::ImsResult((ImsResult *)a5, (const std::string *)v24);
          goto LABEL_37;
        }
        if (*(unsigned char *)(v51 + 1352))
        {
          uint64_t v14 = *(void *)(v51 + 1144);
          int v15 = *(std::__shared_weak_count **)(v51 + 1152);
          if (v15)
          {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          if (v14)
          {
            *(void *)(a5 + 64) = 0;
            *(_OWORD *)(a5 + 32) = 0u;
            *(_OWORD *)(a5 + 48) = 0u;
            *(_OWORD *)a5 = 0u;
            *(_OWORD *)(a5 + 16) = 0u;
            long long v16 = *(void **)(v13 + 1144);
            unint64_t v17 = *(std::__shared_weak_count **)(v13 + 1152);
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            size_t v18 = (std::__shared_weak_count *)a2[1];
            uint64_t v49 = *a2;
            long long v50 = v18;
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v19 = (std::__shared_weak_count *)a3[1];
            uint64_t v47 = *a3;
            long long v48 = v19;
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v20 = *a4;
            xpc_object_t object = v20;
            if (v20) {
              xpc_retain(v20);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            LazuliSession::handleSdpAnswerInFork(v16, &v49, &v47, &object, a5);
            xpc_release(object);
            xpc_object_t object = 0;
            if (v48) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            }
            if (v50) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v50);
            }
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            if ((*(unsigned int (**)(void, void))(**(void **)(a5 + 8) + 24))(*(void *)(a5 + 8), *(unsigned int *)(a5 + 16)))
            {
              uint64_t v36 = a1[1];
              uint64_t v35 = a1 + 1;
              uint64_t v37 = (*(uint64_t (**)(void *))(v36 + 56))(v35);
              (*(void (**)(void *, uint64_t))(*v35 + 16))(v35, v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"media layer rejected SDP answer: ", 33);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 16))(a5, v37);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v37 + 17) = 0;
              goto LABEL_52;
            }
            ImsResult::~ImsResult((ImsResult *)a5);
            goto LABEL_48;
          }
          long long v56 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          BOOL v53 = &unk_1F20B2680;
          int v54 = &_bambiDomain;
          int v55 = 1073741826;
          uint64_t v33 = (ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)&v53, "no lazuli session to handle SDP answer");
          int v34 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v33);
          ImsResult::ImsResult((ImsResult *)a5, (const std::string *)v34);
LABEL_37:
          ImsResult::~ImsResult((ImsResult *)&v53);
          goto LABEL_52;
        }
        char v25 = *(std::__shared_weak_count **)(v51 + 784);
        if (v25)
        {
          uint64_t v26 = *(void *)(v51 + 776);
          atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v27 = std::__shared_weak_count::lock(v25);
          std::__shared_weak_count::__release_weak(v25);
          if (v27 && v26)
          {
            *(void *)(a5 + 64) = 0;
            *(_OWORD *)(a5 + 32) = 0u;
            *(_OWORD *)(a5 + 48) = 0u;
            *(_OWORD *)a5 = 0u;
            *(_OWORD *)(a5 + 16) = 0u;
            uint64_t v28 = (std::__shared_weak_count *)a2[1];
            uint64_t v44 = *a2;
            long long v45 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v29 = (std::__shared_weak_count *)a3[1];
            uint64_t v42 = *a3;
            uint64_t v43 = v29;
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v40, a1 + 15);
            BambiCall::handleSdpAnswerInFork(v26, &v44, &v42, a5);
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
            if (!(*(unsigned int (**)(void, void))(**(void **)(a5 + 8) + 24))(*(void *)(a5 + 8), *(unsigned int *)(a5 + 16)))
            {
              ImsResult::~ImsResult((ImsResult *)a5);
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_48:
              *(_OWORD *)(a5 + 24) = 0u;
              *(_OWORD *)(a5 + 40) = 0u;
              *(_OWORD *)(a5 + 56) = 0u;
              *(void *)a5 = &unk_1F20B2680;
              *(void *)(a5 + 8) = &_bambiDomain;
              *(_DWORD *)(a5 + 16) = 0;
              goto LABEL_52;
            }
            uint64_t v31 = a1[1];
            uint64_t v30 = a1 + 1;
            uint64_t v32 = (*(uint64_t (**)(void *))(v31 + 56))(v30);
            (*(void (**)(void *, uint64_t))(*v30 + 16))(v30, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"media layer rejected SDP answer: ", 33);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 16))(a5, v32);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v32 + 17) = 0;
LABEL_51:
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_52:
            if (v52) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            }
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v27 = 0;
        }
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        BOOL v53 = &unk_1F20B2680;
        int v54 = &_bambiDomain;
        int v55 = 1073741826;
        uint64_t v38 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&v53, "no call to handle SDP answer");
        char v39 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v38);
        ImsResult::ImsResult((ImsResult *)a5, (const std::string *)v39);
        ImsResult::~ImsResult((ImsResult *)&v53);
        if (!v27) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  BOOL v53 = &unk_1F20B2680;
  int v54 = &_bambiDomain;
  int v55 = 1073741826;
  uint64_t v21 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v53, "no dialog to handle SDP answer");
  uint64_t v22 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v21);
  ImsResult::ImsResult((ImsResult *)a5, (const std::string *)v22);
  ImsResult::~ImsResult((ImsResult *)&v53);
  if (v11) {
LABEL_54:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1C5586C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialogFork::handleRemoteSdpAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t SipDialogFork::preconditionsSatisfied(SipDialogFork *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (!v2) {
    return 0;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (SipDialog *)*((void *)this + 17);
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    SipDialog::sipSession(v5, &v10);
    if (v10)
    {
      uint64_t v6 = (void **)(v10 + 1432);
      uint64_t v7 = (void **)((char *)this + 152);
      if (SipPreconditions::preconditionsActiveInFork((void **)(v10 + 1432), v7)) {
        uint64_t v8 = SipPreconditions::preconditionsSatisfiedInFork(v6, v7);
      }
      else {
        uint64_t v8 = 1;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v8;
}

void sub_1C5586E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipDialogFork::handleOfferAnswerStateUpdated(SipDialogFork *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (SipDialog *)*((void *)this + 17);
      if (v5
        && SipOfferAnswer::satisfied(*((SipOfferAnswer **)this + 82))
        && SipDialogFork::preconditionsSatisfied(this))
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 15);
        SipDialog::setActiveFork(v5, &v6, 0);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5586EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipDialogFork::handleOfferAnswerStateUpdated(SipDialogFork *this)
{
}

uint64_t SipDialogFork::hasOutstandingPracks(SipDialogFork *this)
{
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (!v2) {
    goto LABEL_11;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 17);
  if (v5)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, (void *)this + 15);
    SipDialog::currentClientTransactions(v5, &v12, "PRACK", (uint64_t *)&v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  unint64_t v6 = v12;
  if (v13 != v12)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      int v9 = (*(uint64_t (**)(void))(**(void **)(v6 + v7) + 144))(*(void *)(v6 + v7));
      if ((v9 & 1) == 0) {
        break;
      }
      ++v8;
      unint64_t v6 = v12;
      v7 += 16;
    }
    while (v8 < (uint64_t)(v13 - v12) >> 4);
    uint64_t v10 = v9 ^ 1u;
  }
  else
  {
LABEL_11:
    uint64_t v10 = 0;
  }
  int v15 = (void **)&v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v15);
  return v10;
}

void sub_1C5586FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SipDialogFork::handleTimer(SipDialogFork *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = qword_1EBBDB9E0;
  if (byte_1EBBDB9EF >= 0) {
    uint64_t v4 = byte_1EBBDB9EF;
  }
  if (v3 != v4) {
    return;
  }
  if (byte_1EBBDB9EF >= 0) {
    unint64_t v6 = &kPreconditionUpdateTimerName;
  }
  else {
    unint64_t v6 = (uint64_t *)kPreconditionUpdateTimerName;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_16;
  }
  if (!a2[23])
  {
LABEL_16:
    SipDialogFork::sendPreconditionUpdate(a1, 0, (uint64_t)v7);
    ImsResult::~ImsResult((ImsResult *)v7);
    return;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    unint64_t v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2) {
      goto LABEL_16;
    }
  }
}

void SipDialogFork::sendPreconditionUpdate(SipDialogFork *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 17);
      if (v8)
      {
        uint64_t v71 = 0;
        int v72 = 0;
        SipDialog::sipSession((SipDialog *)v8, &v71);
        uint64_t v9 = v71;
        if (v71)
        {
          uint64_t v10 = (long long *)(v71 + 1432);
          uint64_t v11 = (std::string *)((char *)this + 152);
          if (SipPreconditions::needToSendUpdateInFork(v71 + 1432, (void **)this + 19))
          {
            if (*(unsigned char *)(v8 + 1928) || *(unsigned char *)(v9 + 864))
            {
              if (SipSession::hasOutstandingResponseSdp((SipSession *)v9))
              {
                uint64_t v13 = *((void *)this + 1);
                unint64_t v12 = (char *)this + 8;
                uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 64))(v12);
                (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v14);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"sendPreconditionUpdate: we still have outstanding response SDP awaiting a PRACK", 79);
                *(unsigned char *)(v14 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                uint64_t v18 = *((void *)this + 82);
                uint64_t v19 = *(void *)(v18 + 152);
                uint64_t v20 = *(void *)(v19 + 16);
                uint64_t v21 = *(std::__shared_weak_count **)(v19 + 24);
                if (v21) {
                  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (*(void *)(v20 + 40) && *(void *)(v20 + 56))
                {
                  BOOL v22 = 1;
                }
                else
                {
                  uint64_t v23 = *(void *)(v18 + 152);
                  unint64_t v24 = *(SipOfferAnswerExchange **)(v23 + 16);
                  char v25 = *(std::__shared_weak_count **)(v23 + 24);
                  if (v25) {
                    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  BOOL v22 = SipOfferAnswerExchange::empty(v24) || SipOfferAnswerExchange::localAnswerPending(v24);
                  if (v25) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                  }
                  uint64_t v10 = (long long *)(v9 + 1432);
                }
                if (v21) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                }
                if (v22)
                {
                  if (!SipDialogFork::hasOutstandingPracks(this))
                  {
                    if (!a2
                      || *(unsigned char *)(v8 + 1928)
                      || (SipPreconditions::preconditionsSatisfiedInFork((void **)v10, (void **)this + 19) & 1) != 0)
                    {
                      uint64_t v33 = (char *)this + 8;
                      uint64_t v34 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
                      (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v34);
                      uint64_t v35 = (unsigned char *)ImsOutStream::operator<<(v34, "sending precondition update in fork ");
                      ObfuscatedString::ObfuscatedString((uint64_t)v63, (const std::string *)((char *)this + 152));
                      (*(void (**)(unsigned char *, void **))(*(void *)v35 + 56))(v35, v63);
                      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      v35[17] = 0;
                      ims::AccessNetwork::~AccessNetwork(v63);
                      char v69 = 0;
                      int v70 = 0;
                      SipDialogFork::createSdpOffer(this, "UPDATE", SipSession::kUpdateTypePreconditions, &v69);
                      uint64_t v36 = v69;
                      if (v69)
                      {
                        uint64_t v37 = *(void *)(v8 + 216);
                        if (v37) {
                          uint64_t v38 = *(SipUserAgent **)(v37 + 136);
                        }
                        else {
                          uint64_t v38 = 0;
                        }
                        if (*(unsigned char *)(SipUserAgent::config(v38) + 813)) {
                          SDPModel::setDirectionForSessionAndMedia(v36, 1);
                        }
                        *(void *)(a3 + 64) = 0;
                        *(_OWORD *)(a3 + 32) = 0u;
                        *(_OWORD *)(a3 + 48) = 0u;
                        *(_OWORD *)a3 = 0u;
                        *(_OWORD *)(a3 + 16) = 0u;
                        uint64_t v41 = v70;
                        uint64_t v61 = v36;
                        int v62 = v70;
                        if (v70) {
                          atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v59, (void *)this + 15);
                        memset(v56, 0, 24);
                        v57[0] = 0;
                        v57[1] = 0;
                        v56[3] = &unk_1F20B37B0;
                        v56[4] = v57;
                        __int16 v58 = 256;
                        SipSession::sendUpdateWithSdpInFork((uint64_t *)v9, (ImsResult *)a3);
                        SipReason::~SipReason((SipReason *)v56);
                        if (v60) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
                        }
                        if (v62) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
                        }
                        if ((*(unsigned int (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16)))
                        {
                          uint64_t v42 = (*(uint64_t (**)(char *))(*(void *)v33 + 56))((char *)this + 8);
                          (*(void (**)(char *, uint64_t))(*(void *)v33 + 16))(v33, v42);
                          uint64_t v43 = ImsOutStream::operator<<(v42, "couldn't send precondition UPDATE in fork ");
                          (*(void (**)(uint64_t, std::string *))(*(void *)v43 + 32))(v43, v11);
                          uint64_t v44 = (unsigned char *)ImsOutStream::operator<<(v43, ": ");
                          (*(void (**)(uint64_t, unsigned char *))(*(void *)a3 + 16))(a3, v44);
                          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                          v44[17] = 0;
                          SipPreconditions::setNeedToSendUpdateInFork(v10, v11, 1);
                        }
                      }
                      else
                      {
                        *(_OWORD *)std::string __p = 0u;
                        long long v67 = 0u;
                        long long v68 = 0u;
                        v63[0] = &unk_1F20B2680;
                        v63[1] = &_bambiDomain;
                        int v64 = 1073741826;
                        char v39 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v63, "sendPreconditionUpdate: unable to create SDP to send");
                        uint64_t v40 = ImsLogContainer::logResult((SipDialogFork *)((char *)this + 8), v39);
                        ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v40);
                        ImsResult::~ImsResult((ImsResult *)v63);
                        uint64_t v41 = v70;
                      }
                      if (v41) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                      }
                    }
                    else
                    {
                      uint64_t v46 = *((void *)this + 15);
                      long long v45 = (std::__shared_weak_count *)*((void *)this + 16);
                      if (v45)
                      {
                        atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                      }
                      int v47 = *(_DWORD *)(v9 + 856);
                      long long v48 = (char *)this + 8;
                      uint64_t v49 = *(uint64_t (**)(char *))(*((void *)this + 1) + 64);
                      if (v47)
                      {
                        uint64_t v50 = v49((char *)this + 8);
                        (*(void (**)(char *, uint64_t))(*(void *)v48 + 16))((char *)this + 8, v50);
                        uint64_t v51 = ImsOutStream::operator<<(v50, "sendPreconditionUpdate: waiting ");
                        std::ostream::operator<<();
                        *(unsigned char *)(v51 + 17) = 0;
                        int v52 = (unsigned char *)ImsOutStream::operator<<(v51, "ms for UPDATE from MO");
                        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v52[17] = 0;
                        if (v45) {
                          atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        }
                        int v74 = 0;
                        BOOL v53 = operator new(0x20uLL);
                        void *v53 = &unk_1F20DD910;
                        v53[1] = this;
                        v53[2] = v46;
                        void v53[3] = v45;
                        int v74 = v53;
                        SipTimerContainer::startTimer((int8x8_t *)this + 88, (uint64_t)&kPreconditionUpdateTimerName);
                        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v73);
                      }
                      else
                      {
                        uint64_t v54 = v49((char *)this + 8);
                        (*(void (**)(char *, uint64_t))(*(void *)v48 + 16))(v48, v54);
                        int v55 = (unsigned char *)ImsOutStream::operator<<(v54, "waiting indefinitely for UPDATE from MO");
                        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        v55[17] = 0;
                      }
                      *(_OWORD *)(a3 + 24) = 0u;
                      *(_OWORD *)(a3 + 40) = 0u;
                      *(_OWORD *)(a3 + 56) = 0u;
                      *(void *)a3 = &unk_1F20B2680;
                      *(void *)(a3 + 8) = &_bambiDomain;
                      *(_DWORD *)(a3 + 16) = 1073741838;
                      if (v45)
                      {
                        std::__shared_weak_count::__release_weak(v45);
                        std::__shared_weak_count::__release_weak(v45);
                      }
                    }
                    goto LABEL_40;
                  }
                  uint64_t v30 = *((void *)this + 1);
                  long long v29 = (char *)this + 8;
                  uint64_t v31 = (*(uint64_t (**)(char *))(v30 + 64))(v29);
                  (*(void (**)(char *, uint64_t))(*(void *)v29 + 16))(v29, v31);
                  uint64_t v32 = (unsigned char *)ImsOutStream::operator<<(v31, "sendPreconditionUpdate: still have outstanding PRACKs in fork ");
                  ObfuscatedString::ObfuscatedString((uint64_t)v63, v11);
                  (*(void (**)(unsigned char *, void **))(*(void *)v32 + 56))(v32, v63);
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v32[17] = 0;
                  ims::AccessNetwork::~AccessNetwork(v63);
                  goto LABEL_39;
                }
                uint64_t v14 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
                (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v14);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"sendPreconditionUpdate: can't send SDP right now. Current O/A state: ", 69);
                *(unsigned char *)(v14 + 17) = 0;
                (*(void (**)(void, uint64_t))(**((void **)this + 82) + 16))(*((void *)this + 82), v14);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              *(unsigned char *)(v14 + 17) = 0;
LABEL_39:
              *(_OWORD *)(a3 + 24) = 0u;
              *(_OWORD *)(a3 + 40) = 0u;
              *(_OWORD *)(a3 + 56) = 0u;
              *(void *)a3 = &unk_1F20B2680;
              *(void *)(a3 + 8) = &_bambiDomain;
              *(_DWORD *)(a3 + 16) = 1073741838;
LABEL_40:
              if (v72) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v72);
              }
              goto LABEL_42;
            }
            uint64_t v27 = *((void *)this + 1);
            uint64_t v26 = (char *)this + 8;
            uint64_t v28 = (*(uint64_t (**)(char *))(v27 + 64))(v26);
            (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"sendPreconditionUpdate: not sending UPDATE from MT", 50);
            *(unsigned char *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v28 + 17) = 0;
          }
          else
          {
            uint64_t v16 = *((void *)this + 1);
            int v15 = (char *)this + 8;
            uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
            (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"sendPreconditionUpdate: don't need to send UPDATE in fork ", 58);
            *(unsigned char *)(v17 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)v63, v11);
            (*(void (**)(uint64_t, void **))(*(void *)v17 + 56))(v17, v63);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v17 + 17) = 0;
            if (SBYTE7(v67) < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v63[0]);
            }
          }
        }
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
        goto LABEL_40;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7) {
LABEL_42:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C5587D9C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v3 - 128));
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 136);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double SipDialogFork::setBearer(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v12 = a2;
  unint64_t v8 = __PAIR64__(a4, a2);
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  char v11 = 1;
  uint64_t v13 = &v12;
  uint64_t v5 = std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 856), &v12, (uint64_t)&std::piecewise_construct, &v13);
  _OWORD v5[5] = (uint64_t *)v8;
  unint64_t v6 = v5[6];
  if (v6)
  {
    v5[7] = v6;
    operator delete(v6);
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
  }
  double result = *(double *)&v9;
  *((_OWORD *)v5 + 3) = v9;
  v5[8] = v10;
  *((unsigned char *)v5 + 72) = v11;
  return result;
}

void sub_1C5587F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogFork::getBearerPortCount(SipDialogFork *this, unsigned int a2)
{
  uint64_t v2 = (char *)*((void *)this + 108);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (char *)this + 864;
  do
  {
    unsigned int v4 = *((_DWORD *)v2 + 8);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      unint64_t v6 = (char **)v2;
    }
    else {
      unint64_t v6 = (char **)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != (char *)this + 864 && *((_DWORD *)v3 + 8) <= a2) {
    return (uint64_t)(*((void *)v3 + 7) - *((void *)v3 + 6)) >> 1;
  }
  else {
    return 0;
  }
}

void SipDialogFork::handlePreconditionsSatisfied(SipDialogFork *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      BOOL v5 = (SipDialog *)*((void *)this + 17);
      if (v5
        && SipOfferAnswer::satisfied(*((SipOfferAnswer **)this + 82))
        && SipDialogFork::preconditionsSatisfied(this))
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 15);
        SipDialog::setActiveFork(v5, &v6, 0);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5588064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipDialogFork::createSdpOffer(SipDialogFork *this@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a2[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  if (v8 != 6) {
    goto LABEL_12;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "INVITE", *((void *)a2 + 1))) {
      goto LABEL_12;
    }
  }
  else if (a2[23])
  {
    long long v9 = "INVITE";
    while (*a2 == *(unsigned __int8 *)v9)
    {
      ++a2;
      ++v9;
      if (!--v7) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 18);
    if (v10)
    {
      char v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        unsigned int v12 = v11;
        uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 17);
        if (v13)
        {
          SipDialog::stack(v13, &v37);
          uint64_t v14 = (ImsPrefs *)SipStack::prefs(v37);
          UseSDPTemplateForUpdatesKey = (void **)ImsPrefs::getUseSDPTemplateForUpdatesKey(v14);
          int v16 = ImsPrefs::BOOLValue(v14, UseSDPTemplateForUpdatesKey);
          goto LABEL_31;
        }
        goto LABEL_34;
      }
    }
    goto LABEL_33;
  }
LABEL_16:
  uint64_t v17 = a3[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = a3[23];
  }
  else {
    uint64_t v18 = *((void *)a3 + 1);
  }
  if (v18 != 21)
  {
LABEL_27:
    BOOL v22 = (std::__shared_weak_count *)*((void *)this + 18);
    if (v22)
    {
      uint64_t v23 = std::__shared_weak_count::lock(v22);
      if (v23)
      {
        unsigned int v12 = v23;
        unint64_t v24 = (std::__shared_weak_count *)*((void *)this + 17);
        if (v24)
        {
          SipDialog::stack(v24, &v37);
          char v25 = (ImsPrefs *)SipStack::prefs(v37);
          UseSDPTemplateForAllInvitesKey = (void **)ImsPrefs::getUseSDPTemplateForAllInvitesKey(v25);
          int v16 = ImsPrefs::BOOLValue(v25, UseSDPTemplateForAllInvitesKey);
LABEL_31:
          int v21 = v16;
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          goto LABEL_35;
        }
LABEL_34:
        int v21 = 0;
LABEL_35:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        goto LABEL_36;
      }
    }
LABEL_33:
    int v21 = 0;
    goto LABEL_36;
  }
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a3, "InviteTypeTTYReinvite", *((void *)a3 + 1))) {
      goto LABEL_27;
    }
  }
  else if (a3[23])
  {
    uint64_t v19 = "InviteTypeTTYReinvite";
    uint64_t v20 = a3;
    int v21 = 1;
    while (*v20 == *(unsigned __int8 *)v19)
    {
      ++v20;
      ++v19;
      if (!--v17) {
        goto LABEL_36;
      }
    }
    goto LABEL_27;
  }
  int v21 = 1;
LABEL_36:
  uint64_t v27 = a3[23];
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = a3[23];
  }
  else {
    uint64_t v28 = *((void *)a3 + 1);
  }
  uint64_t v29 = qword_1EBBDB7D8;
  if (byte_1EBBDB7E7 >= 0) {
    uint64_t v29 = byte_1EBBDB7E7;
  }
  if (v28 == v29)
  {
    if (byte_1EBBDB7E7 >= 0) {
      uint64_t v30 = &SipSession::kInviteTypeSessionRefresh;
    }
    else {
      uint64_t v30 = (uint64_t *)SipSession::kInviteTypeSessionRefresh;
    }
    if ((v27 & 0x80) != 0)
    {
      BOOL v35 = memcmp(*(const void **)a3, v30, *((void *)a3 + 1)) != 0;
    }
    else if (a3[23])
    {
      uint64_t v31 = v27 - 1;
      do
      {
        int v33 = *a3++;
        int v32 = v33;
        int v34 = *(unsigned __int8 *)v30;
        uint64_t v30 = (uint64_t *)((char *)v30 + 1);
        BOOL v35 = v32 != v34;
      }
      while (v32 == v34 && v31-- != 0);
    }
    else
    {
      BOOL v35 = 0;
    }
  }
  else
  {
    BOOL v35 = 1;
  }
  SipDialogFork::createSdpToSend(this, v21, v35, a4);
}

void sub_1C5588304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipDialogFork::outstandingResponseSdpPracked(SipDialogFork *this)
{
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"all outstanding response SDP has been PRACKed", 45);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipDialogFork::sendPreconditionUpdate(this, 1, (uint64_t)v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void SipDialogFork::handleClientTransactionCompleted(SipDialogFork *a1, uint64_t a2)
{
  unsigned int v4 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a2 + 296) + 112))(*(void *)(*(void *)a2 + 296));
  uint64_t v5 = v4[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v4[23];
  }
  else {
    uint64_t v6 = *((void *)v4 + 1);
  }
  if (v6 != 5) {
    return;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "PRACK", *((void *)v4 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!v4[23])
  {
LABEL_12:
    uint64_t v8 = *(void *)(*(void *)a2 + 568);
    if (v8)
    {
      if ((*(_DWORD *)(v8 + 88) - 200) <= 0x63)
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*((void *)a1 + 1) + 64))((void *)a1 + 1);
        (*(void (**)(void *, uint64_t))(*((void *)a1 + 1) + 16))((void *)a1 + 1, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"client PRACK transaction completed successfully. Seeing if we need to send an update.", 85);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        SipDialogFork::sendPreconditionUpdate(a1, 1, (uint64_t)v10);
        ImsResult::~ImsResult((ImsResult *)v10);
      }
    }
    return;
  }
  uint64_t v7 = "PRACK";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5) {
      goto LABEL_12;
    }
  }
}

uint64_t SipDialogFork::incrementSdpVersion(SipDialogFork *this)
{
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"incrementing sdp version to ", 28);
  *(unsigned char *)(v2 + 17) = 0;
  ++v1[86];
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return v1[86];
}

void SipDialogFork::createSdpToSend(SipDialogFork *this@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 18);
  if (!v6 || (uint64_t v9 = std::__shared_weak_count::lock(v6)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v10 = v9;
  char v11 = (SipDialog *)*((void *)this + 17);
  if (v11)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    SipDialog::sipSession(v11, &v28);
    unsigned int v12 = v28;
    if (!v28)
    {
      *a4 = 0;
      a4[1] = 0;
LABEL_44:
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      goto LABEL_46;
    }
    SipOfferAnswer::remote(*((SipOfferAnswer **)this + 82), &v26);
    uint64_t v14 = *v26;
    uint64_t v13 = (std::__shared_weak_count *)v26[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    if (a2)
    {
      SipSession::localTemplateSdp(v12, (uint64_t *)&v26);
      if (!v26)
      {
        if (!v14) {
          goto LABEL_36;
        }
LABEL_17:
        v23[0] = v14;
        v23[1] = (uint64_t)v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::createLocalSdpForFork((uint64_t)v12, v23, &v24);
        int v16 = v24;
        int v15 = v25;
        unint64_t v24 = 0;
        char v25 = 0;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (a3) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (v14) {
        goto LABEL_17;
      }
      (*(void (**)(uint64_t **__return_ptr, SipSession *))(*(void *)v12 + 128))(&v26, v12);
      if (!v26)
      {
LABEL_36:
        *a4 = 0;
        a4[1] = 0;
        goto LABEL_40;
      }
    }
    std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&v26, &v24);
    int v16 = v24;
    int v15 = v25;
    if (a3)
    {
LABEL_22:
      uint64_t v17 = SipDialogFork::incrementSdpVersion(this);
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v17 = *((void *)this + 87);
LABEL_26:
    v16[18] = v17;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)v12 + 98);
    if (v18
      && (uint64_t v19 = (void *)*((void *)v12 + 97),
          atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed),
          uint64_t v20 = std::__shared_weak_count::lock(v18),
          std::__shared_weak_count::__release_weak(v18),
          v20))
    {
      if (v19)
      {
        int v21 = v16;
        BOOL v22 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiCall::setDirectionForSdpBasedOnHoldState(v19, &v21);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        *a4 = v16;
        a4[1] = v15;
        int v15 = 0;
      }
      else
      {
        *a4 = 0;
        a4[1] = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v15) {
        goto LABEL_40;
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      if (!v15) {
        goto LABEL_40;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_40:
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    goto LABEL_44;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_46:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C5588904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::setSdpVersion(SipDialogFork *this, uint64_t a2)
{
  uint64_t v3 = (char *)this + 8;
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 87) = a2;
  uint64_t v4 = (*(uint64_t (**)(char *))(v2 + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"initial SDP version is ", 23);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  return result;
}

void SipDialogFork::stackId(SipDialogFork *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

void non-virtual thunk to'SipDialogFork::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

void std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::allocate_shared[abi:ne180100]<SipOfferAnswer,std::allocator<SipOfferAnswer>,std::shared_ptr<SipDialogFork>,void>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC8uLL);
  std::__shared_ptr_emplace<SipOfferAnswer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialogFork>,std::allocator<SipOfferAnswer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 17, (uint64_t)(v4 + 3));
}

void sub_1C5588B8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipOfferAnswer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialogFork>,std::allocator<SipOfferAnswer>,0>(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DD858;
  std::construct_at[abi:ne180100]<SipOfferAnswer,std::shared_ptr<SipDialogFork>,SipOfferAnswer*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C5588BE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipOfferAnswer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipOfferAnswer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<SipOfferAnswer,std::shared_ptr<SipDialogFork>,SipOfferAnswer*>(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (*a2) {
    uint64_t v4 = *a2 + 112;
  }
  else {
    uint64_t v4 = 0;
  }
  v6[0] = v4;
  v6[1] = v3;
  *a2 = 0;
  a2[1] = 0;
  SipOfferAnswer::SipOfferAnswer(a1, v6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1C5588CF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<SipDialogFork,std::allocator<SipDialogFork>,std::shared_ptr<SipDialog> &,void>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x388uLL);
  std::__shared_ptr_emplace<SipDialogFork>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::allocator<SipDialogFork>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 18, (uint64_t)(v4 + 3));
}

void sub_1C5588D68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipDialogFork>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::allocator<SipDialogFork>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DD8A8;
  std::construct_at[abi:ne180100]<SipDialogFork,std::shared_ptr<SipDialog> &,SipDialogFork*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C5588DC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipDialogFork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogFork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DD8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipDialogFork>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<SipDialogFork,std::shared_ptr<SipDialog> &,SipDialogFork*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::string **)(a2 + 8);
  v5[0] = *(const std::string **)a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v3->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  SipDialogFork::SipDialogFork(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  return a1;
}

void sub_1C5588ED0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    char v11 = (char *)operator new(0x50uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 9) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::erase((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unsigned int v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (void *)a2[6];
  if (v4)
  {
    a2[7] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

void *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD910;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DD910;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DD910;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DD910;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    BOOL v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55892AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipDialogFork_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kPreconditionUpdateTimerName, "PreconditionUpdateTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kPreconditionUpdateTimerName, &dword_1C51D1000);
}

std::string *SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  BOOL v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DD990;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20DDA10;
  return a1;
}

void sub_1C5589404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipClientNonInviteTryingTransactionState::SipClientNonInviteTryingTransactionState(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState((std::string *)a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_1F20DDA40;
  *(void *)(a1 + 8) = &unk_1F20DDAC8;
  *(_DWORD *)(a1 + 224) = 1;
  return a1;
}

void sub_1C55894BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteTryingTransactionState::enterState(int8x8_t *this)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  this[28].i32[0] = 1;
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      std::string::size_type v5 = (SipTransaction *)this[26];
      if (v5 && SipTransaction::retryEnabled(v5))
      {
        int8x8_t v7 = this[24];
        BOOL v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v8 = operator new(0x20uLL);
        *unsigned int v8 = &unk_1F20DDCC8;
        v8[1] = this;
        uint64_t v8[2] = v7;
        v8[3] = v6;
        void v9[3] = v8;
        SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerE, (uint64_t)v9, this[28].i32[0]);
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v9);
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55895E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::handleTimer(int8x8_t *a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[27];
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      int8x8_t v7 = (SipTransaction *)a1[26];
      if (v7 && operator==(a2, (uint64_t)&SipTimers::kTimerE) && SipTransaction::retryEnabled(v7))
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*((void *)v7 + 22) + 64))((uint64_t)v7 + 176);
        (*(void (**)(uint64_t, uint64_t))(*((void *)v7 + 22) + 16))((uint64_t)v7 + 176, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"resending request", 17);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(void *__return_ptr, SipTransaction *))(*(void *)v7 + 128))(v12, v7);
        ImsResult::~ImsResult((ImsResult *)v12);
        int8x8_t v10 = a1[24];
        uint64_t v9 = (std::__shared_weak_count *)a1[25];
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          a1[28].i32[0] *= 2;
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          a1[28].i32[0] *= 2;
        }
        uint64_t v14 = 0;
        char v11 = operator new(0x20uLL);
        void *v11 = &unk_1F20DDD48;
        v11[1] = a1;
        v11[2] = v10;
        v11[3] = v9;
        uint64_t v14 = v11;
        SipTimerContainer::startSipTimer(a1 + 3, (uint64_t)&SipTimers::kTimerE, (uint64_t)v13, a1[28].i32[0]);
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
        if (v9)
        {
          std::__shared_weak_count::__release_weak(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C558985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

BOOL SipClientNonInviteTryingTransactionState::handleResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (!v3) {
    return 0;
  }
  std::string::size_type v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  uint64_t v7 = *(void *)(a1 + 208);
  BOOL v8 = v7 != 0;
  if (v7)
  {
    if ((*(_DWORD *)(a2 + 88) - 100) < 0x64) {
      uint64_t v9 = 3;
    }
    else {
      uint64_t v9 = 4;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C5589944(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::handleConnectionError(int8x8_t *this)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = this[24];
  uint64_t v2 = (std::__shared_weak_count *)this[25];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    this[28].i32[0] = 1;
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    this[28].i32[0] = 1;
  }
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_1F20DDDC8;
  v4[1] = this;
  void v4[2] = v3;
  v4[3] = v2;
  v5[3] = v4;
  SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerE, (uint64_t)v5, this[28].i32[0]);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C5589A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

std::string *SipClientNonInviteProceedingTransactionState::SipClientNonInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DDAF8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20DDB80;
  return a1;
}

void sub_1C5589B18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteProceedingTransactionState::enterState(SipClientNonInviteProceedingTransactionState *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    int8x8_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      std::string::size_type v5 = (SipTransaction *)*((void *)this + 26);
      if (v5 && SipTransaction::retryEnabled(v5))
      {
        uint64_t v7 = *((void *)this + 24);
        BOOL v6 = (std::__shared_weak_count *)*((void *)this + 25);
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (byte_1EBBDB5E0[23] < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB5E0, *(std::string::size_type *)&byte_1EBBDB5E0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_1EBBDB5E0;
        }
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        char v11 = 0;
        BOOL v8 = operator new(0x20uLL);
        *BOOL v8 = &unk_1F20DDE48;
        v8[1] = this;
        uint64_t v8[2] = v7;
        v8[3] = v6;
        char v11 = v8;
        SipTimers::timerValue(*((SipTimers **)this + 20), (const SipTimer *)&SipTimers::kTimerT2, 0);
        SipTimerContainer::startTimer((int8x8_t *)this + 3, (uint64_t)&__p);
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5589CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void SipClientNonInviteProceedingTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      uint64_t v7 = *(SipTransaction **)(a1 + 208);
      if (v7 && operator==(a2, (uint64_t)&SipTimers::kTimerE) && SipTransaction::retryEnabled(v7))
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*((void *)v7 + 22) + 64))((uint64_t)v7 + 176);
        (*(void (**)(uint64_t, uint64_t))(*((void *)v7 + 22) + 16))((uint64_t)v7 + 176, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"resending request", 17);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(void *__return_ptr, SipTransaction *))(*(void *)v7 + 128))(v13, v7);
        ImsResult::~ImsResult((ImsResult *)v13);
        uint64_t v10 = *(void *)(a1 + 192);
        uint64_t v9 = *(std::__shared_weak_count **)(a1 + 200);
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (byte_1EBBDB5E0[23] < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB5E0, *(std::string::size_type *)&byte_1EBBDB5E0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_1EBBDB5E0;
        }
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = 0;
        char v11 = operator new(0x20uLL);
        void *v11 = &unk_1F20DDEC8;
        v11[1] = a1;
        v11[2] = v10;
        v11[3] = v9;
        uint64_t v15 = v11;
        SipTimers::timerValue(*(SipTimers **)(a1 + 160), (const SipTimer *)&SipTimers::kTimerT2, 0);
        SipTimerContainer::startTimer((int8x8_t *)(a1 + 24), (uint64_t)&__p);
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v9)
        {
          std::__shared_weak_count::__release_weak(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5589F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t SipClientNonInviteProceedingTransactionState::handleResponse(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 88) - 100) < 0x64) {
    return 1;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (!v4) {
    return 0;
  }
  std::string::size_type v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  uint64_t v7 = *(void *)(a1 + 208);
  BOOL v2 = v7 != 0;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 4);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v2;
}

void sub_1C558A080(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipClientNonInviteCompletedTransactionState::SipClientNonInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (std::string::size_type)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DDBB0;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20DDC38;
  return a1;
}

void sub_1C558A12C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteCompletedTransactionState::enterState(int8x8_t *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    int8x8_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[26];
      if (!*(void *)&v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      int8x8_t v7 = this[24];
      BOOL v6 = (std::__shared_weak_count *)this[25];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(*(void *)&v5 + 88);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)&v5 + 80);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = std::__shared_weak_count::lock(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v10 && v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 72))(v9))
        {
          if (byte_1EBBDB6A0[23] < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB6A0, *(std::string::size_type *)&byte_1EBBDB6A0[8]);
          }
          else {
            std::string __p = *(std::string *)byte_1EBBDB6A0;
          }
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = 0;
          uint64_t v12 = operator new(0x20uLL);
          void *v12 = &unk_1F20DDF48;
          v12[1] = this;
          v12[2] = v7;
          v12[3] = v6;
          uint64_t v16 = v12;
          SipTimerContainer::startTimer(this + 3, (uint64_t)&__p);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_16:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_17:
          if (v6)
          {
            std::__shared_weak_count::__release_weak(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v11 = operator new(0x20uLL);
      void *v11 = &unk_1F20DDF48;
      v11[1] = this;
      v11[2] = v7;
      v11[3] = v6;
      void v14[3] = v11;
      SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerK, (uint64_t)v14, 0);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
}

void sub_1C558A384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void SipClientNonInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerK))
  {
    int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        int8x8_t v5 = v4;
        uint64_t v6 = *(void *)(a1 + 208);
        if (v6) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 7);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C558A4C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipClientNonInviteCompletedTransactionState::handleResponse(SipClientNonInviteCompletedTransactionState *this, const SipResponse *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int8x8_t v5 = v4;
      uint64_t v6 = *((void *)this + 26);
      if (v6)
      {
        uint64_t v8 = *(void *)(v6 + 176);
        uint64_t v7 = v6 + 176;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ignoring response", 17);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return 0;
}

void sub_1C558A5D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::~SipClientNonInviteTryingTransactionState(SipClientNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientNonInviteTryingTransactionState::id(SipClientNonInviteTryingTransactionState *this)
{
  return 1;
}

void non-virtual thunk to'SipClientNonInviteTryingTransactionState::~SipClientNonInviteTryingTransactionState(SipClientNonInviteTryingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientNonInviteTryingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientNonInviteProceedingTransactionState::~SipClientNonInviteProceedingTransactionState(SipClientNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientNonInviteProceedingTransactionState::id(SipClientNonInviteProceedingTransactionState *this)
{
  return 3;
}

void non-virtual thunk to'SipClientNonInviteProceedingTransactionState::~SipClientNonInviteProceedingTransactionState(SipClientNonInviteProceedingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientNonInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientNonInviteCompletedTransactionState::~SipClientNonInviteCompletedTransactionState(SipClientNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipClientNonInviteCompletedTransactionState::id(SipClientNonInviteCompletedTransactionState *this)
{
  return 4;
}

void non-virtual thunk to'SipClientNonInviteCompletedTransactionState::~SipClientNonInviteCompletedTransactionState(SipClientNonInviteCompletedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientNonInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipClientNonInviteTransactionState::~SipClientNonInviteTransactionState(SipClientNonInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipClientNonInviteTransactionState::~SipClientNonInviteTransactionState(SipClientNonInviteTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipClientNonInviteTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDCC8;
  BOOL v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDCC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDCC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDCC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558AA44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDD48;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDD48;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDD48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDD48;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558ACEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDDC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDDC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDDC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDDC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558AF94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDE48;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDE48;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDE48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDE48;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558B23C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDEC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDEC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDEC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDEC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558B4E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDF48;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DDF48;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20DDF48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DDF48;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C558B78C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapDocumentSimservs::XcapDocumentSimservs(XcapDocumentSimservs *this)
{
  unsigned __int8 v3 = 0;
  uint64_t v4 = (char *)&v3;
  uint64_t v2 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(void *)this = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)"simservs", v2);
  *((void *)this + 8) = "simservs";
  *((void *)this + 9) = v2;
  *((unsigned char *)this + 80) = 1;
  *(void *)this = &unk_1F20DDFC8;
  *((void *)this + 1) = &unk_1F20DE060;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
}

void XcapDocumentSimservs::~XcapDocumentSimservs(XcapDocumentSimservs *this)
{
  *(void *)this = &unk_1F20DDFC8;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20DE060;
  unsigned __int8 v3 = (void *)*((void *)this + 11);
  uint64_t v4 = (char *)this + 96;
  if (v3 != (void *)((char *)this + 96))
  {
    do
    {
      *(_OWORD *)std::string __p = 0u;
      long long v10 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v3 + 2);
        *(void *)&long long v10 = v3[6];
      }
      uint64_t v5 = v3[7];
      *((void *)&v10 + 1) = v5;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      if (SBYTE7(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = (char *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)v3[2];
          BOOL v8 = *(void *)v7 == (void)v3;
          unsigned __int8 v3 = v7;
        }
        while (!v8);
      }
      unsigned __int8 v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 12));
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  uint64_t vars8;

  XcapDocumentSimservs::~XcapDocumentSimservs(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapDocumentSimservs::~XcapDocumentSimservs(XcapDocumentSimservs *this)
{
}

{
  uint64_t vars8;

  XcapDocumentSimservs::~XcapDocumentSimservs((XcapDocumentSimservs *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

uint64_t XcapDocumentSimservs::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size != 8) {
    goto LABEL_12;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, "simservs", __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v13 = a1;
    goto LABEL_98;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
    goto LABEL_22;
  }
  p_s1 = &__s1;
  uint64_t v6 = "simservs";
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v6)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    ++v6;
    if (!--v3) {
      goto LABEL_22;
    }
  }
LABEL_12:
  memset(&__p, 0, sizeof(__p));
  XcapNs::stripXcapNs((uint64_t)&__s1, &__p);
  uint64_t v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size_t v8 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  if (v9 != 21) {
    goto LABEL_24;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, "communication-waiting", __p.__r_.__value_.__l.__size_)) {
      goto LABEL_24;
    }
LABEL_36:
    operator new();
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_36;
  }
  p_p = &__p;
  char v11 = "communication-waiting";
  uint64_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  while (p_p->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    p_p = (std::string *)((char *)p_p + 1);
    ++v11;
    if (!--v12) {
      goto LABEL_36;
    }
  }
LABEL_24:
  uint64_t v14 = qword_1EBBDB360;
  if (byte_1EBBDB36F >= 0) {
    uint64_t v14 = byte_1EBBDB36F;
  }
  if (v9 != v14) {
    goto LABEL_38;
  }
  if (byte_1EBBDB36F >= 0) {
    uint64_t v15 = &XcapDocumentCommDiversion::kName;
  }
  else {
    uint64_t v15 = (uint64_t *)XcapDocumentCommDiversion::kName;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v15, v8)) {
      goto LABEL_38;
    }
LABEL_50:
    operator new();
  }
  if (!v7) {
    goto LABEL_50;
  }
  uint64_t v16 = &__p;
  uint64_t v17 = v7;
  while (v16->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
  {
    uint64_t v16 = (std::string *)((char *)v16 + 1);
    uint64_t v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v17) {
      goto LABEL_50;
    }
  }
LABEL_38:
  uint64_t v18 = qword_1EBBDB0B8;
  if (byte_1EBBDB0C7 >= 0) {
    uint64_t v18 = byte_1EBBDB0C7;
  }
  if (v9 != v18) {
    goto LABEL_52;
  }
  if (byte_1EBBDB0C7 >= 0) {
    uint64_t v19 = &XcapDocumentOIP::kName;
  }
  else {
    uint64_t v19 = (uint64_t *)XcapDocumentOIP::kName;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v19, v8)) {
      goto LABEL_52;
    }
LABEL_64:
    operator new();
  }
  if (!v7) {
    goto LABEL_64;
  }
  uint64_t v20 = &__p;
  uint64_t v21 = v7;
  while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
  {
    uint64_t v20 = (std::string *)((char *)v20 + 1);
    uint64_t v19 = (uint64_t *)((char *)v19 + 1);
    if (!--v21) {
      goto LABEL_64;
    }
  }
LABEL_52:
  uint64_t v22 = qword_1EBBDB0D0;
  if (byte_1EBBDB0DF >= 0) {
    uint64_t v22 = byte_1EBBDB0DF;
  }
  if (v9 != v22) {
    goto LABEL_66;
  }
  if (byte_1EBBDB0DF >= 0) {
    uint64_t v23 = &XcapDocumentOIR::kName;
  }
  else {
    uint64_t v23 = (uint64_t *)XcapDocumentOIR::kName;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v23, v8)) {
      goto LABEL_66;
    }
LABEL_78:
    operator new();
  }
  if (!v7) {
    goto LABEL_78;
  }
  unint64_t v24 = &__p;
  uint64_t v25 = v7;
  while (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
  {
    unint64_t v24 = (std::string *)((char *)v24 + 1);
    uint64_t v23 = (uint64_t *)((char *)v23 + 1);
    if (!--v25) {
      goto LABEL_78;
    }
  }
LABEL_66:
  uint64_t v26 = qword_1EBBDB318;
  if (byte_1EBBDB327 >= 0) {
    uint64_t v26 = byte_1EBBDB327;
  }
  if (v9 != v26) {
    goto LABEL_80;
  }
  if (byte_1EBBDB327 >= 0) {
    uint64_t v27 = &XcapDocumentCallBarring::kNameIncoming;
  }
  else {
    uint64_t v27 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v27, v8)) {
      goto LABEL_80;
    }
LABEL_92:
    operator new();
  }
  if (!v7) {
    goto LABEL_92;
  }
  uint64_t v28 = &__p;
  uint64_t v29 = v7;
  while (v28->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
  {
    uint64_t v28 = (std::string *)((char *)v28 + 1);
    uint64_t v27 = (uint64_t *)((char *)v27 + 1);
    if (!--v29) {
      goto LABEL_92;
    }
  }
LABEL_80:
  uint64_t v30 = qword_1EBBDB330;
  if (byte_1EBBDB33F >= 0) {
    uint64_t v30 = byte_1EBBDB33F;
  }
  if (v9 == v30)
  {
    if (byte_1EBBDB33F >= 0) {
      uint64_t v31 = &XcapDocumentCallBarring::kNameOutgoing;
    }
    else {
      uint64_t v31 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
    }
    if ((v7 & 0x80) == 0)
    {
      if (v7)
      {
        int v32 = &__p;
        while (v32->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v31)
        {
          int v32 = (std::string *)((char *)v32 + 1);
          uint64_t v31 = (uint64_t *)((char *)v31 + 1);
          if (!--v7) {
            goto LABEL_95;
          }
        }
        goto LABEL_94;
      }
LABEL_95:
      operator new();
    }
    if (!memcmp(__p.__r_.__value_.__l.__data_, v31, v8)) {
      goto LABEL_95;
    }
  }
LABEL_94:
  uint64_t v13 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_98:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C558BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x1C878E320](v20, 0x10F3C40CDEF8A80);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void XcapDocumentSimservs::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __s1.__r_.__value_.__l.__size_;
  }
  if (v9 == 21)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        goto LABEL_86;
      }
      p_s1 = &__s1;
      uint64_t v14 = "communication-waiting";
      uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v14;
        if (!--v15) {
          goto LABEL_86;
        }
      }
      goto LABEL_21;
    }
    uint64_t v16 = (const void *)__s1.__r_.__value_.__r.__words[0];
    uint64_t v17 = "communication-waiting";
LABEL_20:
    if (!memcmp(v16, v17, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_86;
    }
    goto LABEL_21;
  }
  if (v9 != 8) {
    goto LABEL_21;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v16 = (const void *)__s1.__r_.__value_.__r.__words[0];
    uint64_t v17 = "simservs";
    goto LABEL_20;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
    goto LABEL_86;
  }
  long long v10 = &__s1;
  char v11 = "simservs";
  uint64_t v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (v10->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    long long v10 = (std::string *)((char *)v10 + 1);
    ++v11;
    if (!--v12) {
      goto LABEL_86;
    }
  }
LABEL_21:
  uint64_t v18 = qword_1EBBDB360;
  if (byte_1EBBDB36F >= 0) {
    uint64_t v18 = byte_1EBBDB36F;
  }
  if (v9 == v18)
  {
    if (byte_1EBBDB36F >= 0) {
      uint64_t v19 = &XcapDocumentCommDiversion::kName;
    }
    else {
      uint64_t v19 = (uint64_t *)XcapDocumentCommDiversion::kName;
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v19, size)) {
        goto LABEL_86;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_86;
      }
      uint64_t v20 = &__s1;
      uint64_t v21 = v6;
      while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
      {
        uint64_t v20 = (std::string *)((char *)v20 + 1);
        uint64_t v19 = (uint64_t *)((char *)v19 + 1);
        if (!--v21) {
          goto LABEL_86;
        }
      }
    }
  }
  uint64_t v22 = qword_1EBBDB0B8;
  if (byte_1EBBDB0C7 >= 0) {
    uint64_t v22 = byte_1EBBDB0C7;
  }
  if (v9 == v22)
  {
    if (byte_1EBBDB0C7 >= 0) {
      uint64_t v23 = &XcapDocumentOIP::kName;
    }
    else {
      uint64_t v23 = (uint64_t *)XcapDocumentOIP::kName;
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v23, size)) {
        goto LABEL_86;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_86;
      }
      unint64_t v24 = &__s1;
      uint64_t v25 = v6;
      while (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
      {
        unint64_t v24 = (std::string *)((char *)v24 + 1);
        uint64_t v23 = (uint64_t *)((char *)v23 + 1);
        if (!--v25) {
          goto LABEL_86;
        }
      }
    }
  }
  uint64_t v26 = qword_1EBBDB0D0;
  if (byte_1EBBDB0DF >= 0) {
    uint64_t v26 = byte_1EBBDB0DF;
  }
  if (v9 == v26)
  {
    if (byte_1EBBDB0DF >= 0) {
      uint64_t v27 = &XcapDocumentOIR::kName;
    }
    else {
      uint64_t v27 = (uint64_t *)XcapDocumentOIR::kName;
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v27, size)) {
        goto LABEL_86;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_86;
      }
      uint64_t v28 = &__s1;
      uint64_t v29 = v6;
      while (v28->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
      {
        uint64_t v28 = (std::string *)((char *)v28 + 1);
        uint64_t v27 = (uint64_t *)((char *)v27 + 1);
        if (!--v29) {
          goto LABEL_86;
        }
      }
    }
  }
  uint64_t v30 = qword_1EBBDB330;
  if (byte_1EBBDB33F >= 0) {
    uint64_t v30 = byte_1EBBDB33F;
  }
  if (v9 == v30)
  {
    if (byte_1EBBDB33F >= 0) {
      uint64_t v31 = &XcapDocumentCallBarring::kNameOutgoing;
    }
    else {
      uint64_t v31 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
    }
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v31, size)) {
        goto LABEL_86;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_86;
      }
      int v32 = &__s1;
      uint64_t v33 = v6;
      while (v32->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v31)
      {
        int v32 = (std::string *)((char *)v32 + 1);
        uint64_t v31 = (uint64_t *)((char *)v31 + 1);
        if (!--v33) {
          goto LABEL_86;
        }
      }
    }
  }
  uint64_t v34 = qword_1EBBDB318;
  if (byte_1EBBDB327 >= 0) {
    uint64_t v34 = byte_1EBBDB327;
  }
  if (v9 != v34) {
    goto LABEL_87;
  }
  if (byte_1EBBDB327 >= 0) {
    BOOL v35 = &XcapDocumentCallBarring::kNameIncoming;
  }
  else {
    BOOL v35 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
  }
  if ((v7 & 0x80) == 0)
  {
    if (v7)
    {
      uint64_t v36 = &__s1;
      while (v36->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v35)
      {
        uint64_t v36 = (std::string *)((char *)v36 + 1);
        BOOL v35 = (uint64_t *)((char *)v35 + 1);
        if (!--v6) {
          goto LABEL_86;
        }
      }
LABEL_87:
      if ((v7 & 0x80) == 0) {
        return;
      }
      goto LABEL_88;
    }
LABEL_86:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    LOBYTE(v7) = *((unsigned char *)&__s1.__r_.__value_.__s + 23);
    goto LABEL_87;
  }
  if (!memcmp(__s1.__r_.__value_.__l.__data_, v35, size)) {
    goto LABEL_86;
  }
LABEL_88:
  operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1C558C3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentSimservs::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C558C550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'XcapDocumentSimservs::constructTree(void *a1@<X8>)
{
}

uint64_t XcapDocumentSimservs::asString@<X0>(XcapDocumentSimservs *this@<X0>, void *a2@<X8>)
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  memset(v21, 0, sizeof(v21));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"*** SIMSERVS DOCUMENT ***", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(v19, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(v19);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v6 = (void *)*((void *)this + 11);
  int v7 = (char *)this + 96;
  if (v6 != (void *)((char *)this + 96))
  {
    size_t v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      *(_OWORD *)&v19[0].__locale_ = 0u;
      long long v20 = 0u;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v19, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)&v19[0].__locale_ = *((_OWORD *)v6 + 2);
        *(void *)&long long v20 = v6[6];
      }
      *((void *)&v20 + 1) = v6[7];
      (*(void (**)(void **__return_ptr))(**((void **)&v20 + 1) + 104))(__p);
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        uint64_t v10 = v18;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v9, v10);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      uint64_t v12 = std::locale::use_facet(&v27, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v20) < 0) {
        operator delete(v19[0].__locale_);
      }
      uint64_t v13 = (char *)v6[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (char *)v6[2];
          BOOL v15 = *(void *)v14 == (void)v6;
          uint64_t v6 = v14;
        }
        while (!v15);
      }
      uint64_t v6 = v14;
    }
    while (v14 != v7);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21 + 8, a2);
  *(void *)&v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(*(void *)&v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v21[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v25);
}

void sub_1C558C920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

void XcapDocumentSimservs::clone(XcapDocumentSimservs *this)
{
}

void sub_1C558CBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = v15;
  std::string __p = v16;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MEMORY[0x1C878E320](v14, 0x10F3C40D88640EDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,XcapDocumentBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,XcapDocumentBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,XcapDocumentBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    size_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    char v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    void *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    BOOL v15 = v11;
    if (v14)
    {
      *a1 = v14;
      BOOL v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      size_t v8 = (uint64_t **)v5;
      std::string::size_type v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  char v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_1C558CD30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void IMSXcapManager::~IMSXcapManager(IMSXcapManager *this)
{
  *(void *)this = &unk_1F20DE0F0;
  *((void *)this + 1) = &unk_1F20DE138;
  uint64_t v2 = (char *)this + 32;
  uint64_t v3 = (void *)*((void *)this + 4);
  uint64_t v4 = (char *)this + 40;
  if (v3 != (void *)((char *)this + 40))
  {
    do
    {
      *(_OWORD *)long long v20 = 0u;
      long long v21 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v20, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)long long v20 = *((_OWORD *)v3 + 2);
        *(void *)&long long v21 = v3[6];
      }
      *((void *)&v21 + 1) = v3[7];
      uint64_t v5 = ims::getValueFromMap<std::string,XcapCarrierHandle *>((uint64_t)v2, v20, 0);
      uint64_t v6 = v5;
      if (v5)
      {
        int v7 = v5 + 52;
        for (uint64_t i = v5[53]; (uint64_t *)i != v7; uint64_t i = *(void *)(i + 8))
        {
          std::string::size_type v9 = *(uint64_t **)(i + 16);
          if (v9)
          {
            uint64_t v10 = AuthQueueItem<BambiClient>::~AuthQueueItem(v9);
            MEMORY[0x1C878E320](v10, 0x1032C403FAF6B48);
          }
        }
        if (v6[54])
        {
          uint64_t v12 = v6[52];
          char v11 = (uint64_t *)v6[53];
          uint64_t v13 = *v11;
          *(void *)(v13 + 8) = *(void *)(v12 + 8);
          **(void **)(v12 + 8) = v13;
          v6[54] = 0;
          if (v11 != v7)
          {
            do
            {
              uint64_t v14 = (uint64_t *)v11[1];
              operator delete(v11);
              char v11 = v14;
            }
            while (v14 != v7);
          }
        }
        (*(void (**)(void))(*(void *)*v6 + 32))();
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v24, "xcap");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v15 = ims::error((uint64_t)v24, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Unable to deinitialize unknown stack ID ", 40);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, v20);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
      }
      if (**((void **)&v21 + 1)) {
        (*(void (**)(void))(***((void ***)&v21 + 1) + 8))(**((void **)&v21 + 1));
      }
      if (SBYTE7(v21) < 0) {
        operator delete(v20[0]);
      }
      uint64_t v16 = (char *)v3[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (char *)v3[2];
          BOOL v18 = *(void *)v17 == (void)v3;
          uint64_t v3 = v17;
        }
        while (!v18);
      }
      uint64_t v3 = v17;
    }
    while (v17 != v4);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 5));
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

{
  uint64_t vars8;

  IMSXcapManager::~IMSXcapManager(this);
  JUMPOUT(0x1C878E320);
}

void sub_1C558D040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void non-virtual thunk to'IMSXcapManager::~IMSXcapManager(IMSXcapManager *this)
{
}

{
  uint64_t vars8;

  IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void IMSXcapManager::initialize(uint64_t a1, uint64_t a2, uint64_t a3, ImsPrefs *a4)
{
  size_t v8 = (ImsPrefs *)ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, (void **)a3, 0);
  std::string::size_type v9 = v8;
  if (!v8) {
    operator new();
  }
  ImpiKey = (void **)ImsPrefs::getImpiKey(v8);
  ImsPrefs::stringValue(a4, ImpiKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v125, a2 + 32);
  uint64_t v12 = (void **)((char *)v9 + 40);
  if (*((char *)v9 + 63) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
  *((void *)v9 + 7) = v115;
  BYTE7(v115) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if ((ImsPrefs *)((char *)v9 + 8) != (ImsPrefs *)a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v9 + 16), *(std::string **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  DomainKey = (void **)ImsPrefs::getDomainKey(v11);
  ImsPrefs::stringValue(a4, DomainKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v125, a2 + 56);
  uint64_t v15 = (void **)((char *)v9 + 64);
  if (*((char *)v9 + 87) < 0) {
    operator delete(*v15);
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
  *((void *)v9 + 10) = v115;
  BYTE7(v115) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey(v14);
  ImsPrefs::stringValue(a4, DeviceIMEIKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v125, a2 + 80);
  BOOL v18 = (void **)((char *)v9 + 88);
  if (*((char *)v9 + 111) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)BOOL v18 = *(_OWORD *)__p;
  *((void *)v9 + 13) = v115;
  BYTE7(v115) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)v9 + 200) = *(unsigned char *)(a2 + 192);
  XcapUtInterfaceTypeKey = (void **)ImsPrefs::getXcapUtInterfaceTypeKey(v17);
  long long v20 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapUtInterfaceTypeKey);
  long long v21 = (void *)BYTE7(v115);
  int v22 = SBYTE7(v115);
  if (SBYTE7(v115) < 0) {
    long long v21 = __p[1];
  }
  if (v21 == (void *)3)
  {
    char v25 = (void **)__p[0];
    if ((SBYTE7(v115) & 0x80u) == 0) {
      char v25 = __p;
    }
    if (*(unsigned __int16 *)v25 ^ 0x6D49 | *((unsigned __int8 *)v25 + 2) ^ 0x73) {
      int v24 = 2;
    }
    else {
      int v24 = 1;
    }
  }
  else if (v21 == (void *)4)
  {
    uint64_t v26 = (unsigned int *)__p[0];
    if ((SBYTE7(v115) & 0x80u) == 0) {
      uint64_t v26 = (unsigned int *)__p;
    }
    unsigned int v27 = bswap32(*v26);
    BOOL v28 = v27 >= 0x54657374;
    int v29 = v27 > 0x54657374;
    int v30 = !v28;
    if (v29 == v30) {
      int v24 = 3;
    }
    else {
      int v24 = 2;
    }
  }
  else if (v21 == (void *)8)
  {
    char v23 = (void **)__p[0];
    if ((SBYTE7(v115) & 0x80u) == 0) {
      char v23 = __p;
    }
    int v24 = 2 * (*v23 != (void *)0x74656E7265746E49);
  }
  else
  {
    int v24 = 2;
  }
  *((_DWORD *)v9 + 2) = v24;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  XcapImeiHeaderNameInBsfRequestKey = (void **)ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(v20);
  ImsPrefs::stringValue(a4, XcapImeiHeaderNameInBsfRequestKey);
  int v32 = std::string::operator=((std::string *)((char *)v9 + 176), (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  XcapAuidKey = (void **)ImsPrefs::getXcapAuidKey((ImsPrefs *)v32);
  ImsPrefs::stringValue(a4, XcapAuidKey);
  uint64_t v34 = std::string::operator=((std::string *)v9 + 10, (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  XcapContentTypeKey = (void **)ImsPrefs::getXcapContentTypeKey((ImsPrefs *)v34);
  ImsPrefs::stringValue(a4, XcapContentTypeKey);
  uint64_t v36 = std::string::operator=((std::string *)v9 + 11, (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  XcapRequestTimeoutValueKey = (void **)ImsPrefs::getXcapRequestTimeoutValueKey((ImsPrefs *)v36);
  uint64_t v38 = (ImsPrefs *)ImsPrefs::intValue(a4, XcapRequestTimeoutValueKey);
  *((_DWORD *)v9 + 72) = v38;
  XcapUnsolicitedRequestDelayKey = (void **)ImsPrefs::getXcapUnsolicitedRequestDelayKey(v38);
  uint64_t v40 = (ImsPrefs *)ImsPrefs::intValue(a4, XcapUnsolicitedRequestDelayKey);
  *((_DWORD *)v9 + 73) = v40;
  XcapReuseAuthCredentialsKey = (void **)ImsPrefs::getXcapReuseAuthCredentialsKey(v40);
  uint64_t v42 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapReuseAuthCredentialsKey);
  *((unsigned char *)v9 + 296) = (_BYTE)v42;
  XcapHttpVersionKey = (void **)ImsPrefs::getXcapHttpVersionKey(v42);
  ImsPrefs::stringValue(a4, XcapHttpVersionKey);
  std::string::operator=((std::string *)v9 + 14, (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v44 = std::string::operator=((std::string *)((char *)v9 + 208), (const std::string *)(a2 + 200));
  XcapNafUseSecureTransportKey = (void **)ImsPrefs::getXcapNafUseSecureTransportKey((ImsPrefs *)v44);
  uint64_t v46 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapNafUseSecureTransportKey);
  if (v46) {
    XcapUseSecureTransportKey = (void **)ImsPrefs::getXcapNafUseSecureTransportKey(v46);
  }
  else {
    XcapUseSecureTransportKey = (void **)ImsPrefs::getXcapUseSecureTransportKey(0);
  }
  long long v48 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapUseSecureTransportKey);
  *((unsigned char *)v9 + 140) = (_BYTE)v48;
  XcapNafHostKey = (void **)ImsPrefs::getXcapNafHostKey(v48);
  ImsPrefs::stringValue(a4, XcapNafHostKey);
  uint64_t v50 = std::string::operator=((std::string *)((char *)v9 + 112), (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  XcapNafPortKey = (void **)ImsPrefs::getXcapNafPortKey((ImsPrefs *)v50);
  int v52 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapNafPortKey);
  if (v52)
  {
    BOOL v53 = (void **)ImsPrefs::getXcapNafPortKey(v52);
    uint64_t v54 = ImsPrefs::intValue(a4, v53);
  }
  else if (*((unsigned char *)v9 + 140))
  {
    uint64_t v54 = 443;
  }
  else
  {
    uint64_t v54 = 80;
  }
  *((_DWORD *)v9 + 34) = v54;
  XcapBsfUseSecureTransportKey = (void **)ImsPrefs::getXcapBsfUseSecureTransportKey((ImsPrefs *)v54);
  long long v56 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapBsfUseSecureTransportKey);
  if (v56) {
    long long v57 = (void **)ImsPrefs::getXcapBsfUseSecureTransportKey(v56);
  }
  else {
    long long v57 = (void **)ImsPrefs::getXcapUseSecureTransportKey(0);
  }
  __int16 v58 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, v57);
  *((unsigned char *)v9 + 172) = (_BYTE)v58;
  XcapBsfHostKey = (void **)ImsPrefs::getXcapBsfHostKey(v58);
  ImsPrefs::stringValue(a4, XcapBsfHostKey);
  int v60 = std::string::operator=((std::string *)v9 + 6, (const std::string *)__p);
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  XcapBsfPortKey = (void **)ImsPrefs::getXcapBsfPortKey((ImsPrefs *)v60);
  int v62 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapBsfPortKey);
  if (v62)
  {
    uint64_t v63 = (void **)ImsPrefs::getXcapBsfPortKey(v62);
    uint64_t v64 = ImsPrefs::intValue(a4, v63);
  }
  else if (*((unsigned char *)v9 + 172))
  {
    uint64_t v64 = 443;
  }
  else
  {
    uint64_t v64 = 80;
  }
  *((_DWORD *)v9 + 42) = v64;
  long long v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  XcapPreferredGbaModeKey = (void **)ImsPrefs::getXcapPreferredGbaModeKey((ImsPrefs *)v64);
  int v66 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapPreferredGbaModeKey);
  *((_DWORD *)v9 + 58) = *((unsigned char *)v9 + 200) == 0;
  int v108 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  XcapImpuRankKey = (void **)ImsPrefs::getXcapImpuRankKey(v66);
  ImsPrefs::stringValue(a4, XcapImpuRankKey);
  uint64_t v122 = 0;
  long long v120 = 0u;
  memset(v121, 0, sizeof(v121));
  long long v118 = 0u;
  long long v119 = 0u;
  long long v116 = 0u;
  *(_OWORD *)long long v117 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v115 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"MDN@domain", 10);
  char v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
  int v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"MDN@other", 9);
  uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)",", 1);
  int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"IMSI@domain", 11);
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)",", 1);
  int v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"IMSI@3gpp", 9);
  uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)",", 1);
  int v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"IMSI@other", 10);
  long long v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)",", 1);
  int v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"sip:other@domain", 16);
  long long v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"sip:other", 9);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v125);
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v119) < 0) {
    operator delete(*((void **)&v118 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  uint64_t v80 = MEMORY[0x1C878E270](v121);
  if (!SipImpuRank::_setRanksFromString(v80, (int **)v9 + 46, (uint64_t)&v125)) {
    SipImpuRank::resetNormalRanksToDefault((ImsPrefs *)((char *)v9 + 368));
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v9 + 38);
  long long v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  XcapForbiddenHttpErrorCodesKey = (void **)ImsPrefs::getXcapForbiddenHttpErrorCodesKey(v81);
  long long v83 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapForbiddenHttpErrorCodesKey);
  XcapDisableOnNetworkErrorKey = (void **)ImsPrefs::getXcapDisableOnNetworkErrorKey(v83);
  long long v85 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapDisableOnNetworkErrorKey);
  *((unsigned char *)v9 + 328) = (_BYTE)v85;
  AllCDIVRulesKey = (void **)ImsPrefs::getXcapFetchAllCDIVRulesKey(v85);
  long long v87 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, AllCDIVRulesKey);
  *((unsigned char *)v9 + 360) = (_BYTE)v87;
  XcapServeMultipleCDIVRulesPerRequestKey = (void **)ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(v87);
  long long v89 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapServeMultipleCDIVRulesPerRequestKey);
  *((unsigned char *)v9 + 361) = (_BYTE)v89;
  XcapCFErasureSupportKey = (void **)ImsPrefs::getXcapCFErasureSupportKey(v89);
  long long v91 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapCFErasureSupportKey);
  *((unsigned char *)v9 + 362) = (_BYTE)v91;
  XcapCFMediaTagSupportKey = (void **)ImsPrefs::getXcapCFMediaTagSupportKey(v91);
  long long v93 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapCFMediaTagSupportKey);
  *((unsigned char *)v9 + 363) = (_BYTE)v93;
  XcapCBSupportKey = (void **)ImsPrefs::getXcapCBSupportKey(v93);
  long long v95 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, XcapCBSupportKey);
  *((unsigned char *)v9 + 364) = (_BYTE)v95;
  XcapCBMediaTagSupportKey = (void **)ImsPrefs::getXcapCBMediaTagSupportKey(v95);
  *((unsigned char *)v9 + 365) = ImsPrefs::BOOLValue(a4, XcapCBMediaTagSupportKey);
  std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
  std::string::basic_string[abi:ne180100]<0>(&v125, "");
  uint64_t v97 = ims::info((uint64_t)__p, (uint64_t)&v125);
  IMSXcapManager::printConfig(v97, v97, (uint64_t)v9);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v115) < 0) {
    operator delete(__p[0]);
  }
  if ((*(uint64_t (**)(void, void *))(**(void **)v9 + 24))(*(void *)v9, (void *)v9 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v125, "");
    uint64_t v98 = ims::info((uint64_t)__p, (uint64_t)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v98 + 8), (uint64_t)"Successfully initialized XCAP client. Ready to process requests", 63);
    *(unsigned char *)(v98 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v98 + 17) = 0;
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v115) < 0) {
      operator delete(__p[0]);
    }
    memset(&v125, 0, sizeof(v125));
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v125 = *(std::string *)a3;
    }
    if (*((_DWORD *)v9 + 73))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
      std::string::basic_string[abi:ne180100]<0>(v123, "");
      uint64_t v101 = ims::debug((uint64_t)__p, (uint64_t)v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v101 + 8), (uint64_t)"Schedule unsolicited CF request [in ", 36);
      *(unsigned char *)(v101 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v101 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v101 + 8), (uint64_t)" seconds] to fetch all Rule Ids", 31);
      *(unsigned char *)(v101 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v101 + 17) = 0;
      if (v124 < 0) {
        operator delete(v123[0]);
      }
      if (SBYTE7(v115) < 0) {
        operator delete(__p[0]);
      }
      dispatch_time_t v102 = dispatch_time(0, 1000000 * (1000 * *((_DWORD *)v9 + 73)));
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)1174405120;
      *(void *)&long long v115 = ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
      *((void *)&v115 + 1) = &__block_descriptor_tmp_127_0;
      *(void *)&long long v116 = a1;
      *((void *)&v116 + 1) = v9;
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v117, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)long long v117 = *(_OWORD *)&v125.__r_.__value_.__l.__data_;
        *(void *)&long long v118 = *((void *)&v125.__r_.__value_.__l + 2);
      }
      dispatch_after(v102, MEMORY[0x1E4F14428], __p);
      if (SBYTE7(v118) < 0) {
        operator delete(v117[0]);
      }
    }
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    memset(&v125, 0, sizeof(v125));
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v125 = *(std::string *)a3;
    }
    if (*((unsigned char *)v9 + 364) && *((_DWORD *)v9 + 73))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
      std::string::basic_string[abi:ne180100]<0>(v123, "");
      uint64_t v103 = ims::debug((uint64_t)__p, (uint64_t)v123);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v103 + 8), (uint64_t)"Schedule unsolicited CB request [in ", 36);
      *(unsigned char *)(v103 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v103 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v103 + 8), (uint64_t)" seconds] to fetch all Rule Ids", 31);
      *(unsigned char *)(v103 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v103 + 17) = 0;
      if (v124 < 0) {
        operator delete(v123[0]);
      }
      if (SBYTE7(v115) < 0) {
        operator delete(__p[0]);
      }
      dispatch_time_t v104 = dispatch_time(0, 1000000 * (1000 * *((_DWORD *)v9 + 73)));
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)1174405120;
      *(void *)&long long v115 = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
      *((void *)&v115 + 1) = &__block_descriptor_tmp_138;
      *(void *)&long long v116 = a1;
      *((void *)&v116 + 1) = v9;
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v117, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)long long v117 = *(_OWORD *)&v125.__r_.__value_.__l.__data_;
        *(void *)&long long v118 = *((void *)&v125.__r_.__value_.__l + 2);
      }
      dispatch_after(v104, MEMORY[0x1E4F14428], __p);
      if (SBYTE7(v118) < 0) {
        operator delete(v117[0]);
      }
    }
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    {
      int v100 = (void *)v125.__r_.__value_.__r.__words[0];
      goto LABEL_119;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v125, "");
    uint64_t v99 = ims::error((uint64_t)__p, (uint64_t)&v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v99 + 8), (uint64_t)"Failed to initialize Bambi Xcap Client", 38);
    *(unsigned char *)(v99 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v99 + 17) = 0;
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v115) < 0)
    {
      int v100 = __p[0];
LABEL_119:
      operator delete(v100);
    }
  }
  if (SHIBYTE(v107) < 0) {
    operator delete(v105);
  }
  if (SHIBYTE(v110) < 0) {
    operator delete(v108);
  }
  if (SHIBYTE(v113) < 0) {
    operator delete(v111);
  }
}

void sub_1C558E11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *ims::getValueFromMap<std::string,XcapCarrierHandle *>(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  int v7 = (void **)(a1 + 8);
  do
  {
    char v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6 + 4, a2);
    if (v8 >= 0) {
      std::string::size_type v9 = v6;
    }
    else {
      std::string::size_type v9 = v6 + 1;
    }
    if (v8 >= 0) {
      int v7 = (void **)v6;
    }
    uint64_t v6 = (void *)*v9;
  }
  while (*v9);
  if (v7 != v5
    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v7 + 4) & 0x80) == 0)
  {
    return v7[7];
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::debug((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"getValueFromMap", 15);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" Object not found [key=", 23);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return (void *)a3;
}

void sub_1C558E464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void stringOrDefault(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3) {
    a3 = a2;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a1->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
}

uint64_t IMSXcapManager::printConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"****************** XCAP Config ***************", 46);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"SIM Type: ", 10);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 200)) {
    uint64_t v5 = "ISIM";
  }
  else {
    uint64_t v5 = "USIM";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v5, 4);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"IMPI: ", 6);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 40);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"DOMAIN: ", 8);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 64);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"IMEI: ", 6);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 88);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"AUID: ", 6);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 240);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Content Type: ", 14);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 264);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Connection Service Type: ", 25);
  *(unsigned char *)(a2 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6511B28[*(int *)(a3 + 8)]);
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 32))(a2, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"GBA Mode: ", 10);
  *(unsigned char *)(a2 + 17) = 0;
  int v6 = *(_DWORD *)(a3 + 232);
  if (v6) {
    int v7 = "GBA_ME";
  }
  else {
    int v7 = "GBA_U";
  }
  if (v6) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Reuse Auth Credentials ? ", 25);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 296)) {
    std::string::size_type v9 = "Yes";
  }
  else {
    std::string::size_type v9 = "No";
  }
  if (*(unsigned char *)(a3 + 296)) {
    uint64_t v10 = 3;
  }
  else {
    uint64_t v10 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v9, v10);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"NAF: ", 5);
  *(unsigned char *)(a2 + 17) = 0;
  char v11 = (const std::string::value_type **)(a3 + 112);
  if (*(char *)(a3 + 135) < 0)
  {
    std::string::size_type v12 = *(void *)(a3 + 120);
    if (v12)
    {
      std::string::__init_copy_ctor_external(&__p, *v11, v12);
      goto LABEL_24;
    }
  }
  else if (*(unsigned char *)(a3 + 135))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a3 + 128);
    goto LABEL_24;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "<DEFAULT>");
LABEL_24:
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 140)) {
    char v13 = "Secure";
  }
  else {
    char v13 = "Insecure";
  }
  if (*(unsigned char *)(a3 + 140)) {
    uint64_t v14 = 6;
  }
  else {
    uint64_t v14 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v13, v14);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"BSF: ", 5);
  *(unsigned char *)(a2 + 17) = 0;
  char v15 = (const std::string::value_type **)(a3 + 144);
  if (*(char *)(a3 + 167) < 0)
  {
    std::string::size_type v16 = *(void *)(a3 + 152);
    if (v16)
    {
      std::string::__init_copy_ctor_external(&__p, *v15, v16);
      goto LABEL_38;
    }
  }
  else if (*(unsigned char *)(a3 + 167))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a3 + 160);
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "<DEFAULT>");
LABEL_38:
  (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)":", 1);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 172)) {
    uint64_t v17 = "Secure";
  }
  else {
    uint64_t v17 = "Insecure";
  }
  if (*(unsigned char *)(a3 + 172)) {
    uint64_t v18 = 6;
  }
  else {
    uint64_t v18 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v17, v18);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Request Timeout: ", 17);
  *(unsigned char *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" seconds", 8);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  uint64_t v19 = *(void **)(a2 + 8);
  if (*(_DWORD *)(a3 + 292))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unsolicited Requests: ON, Delay: ", 33);
    *(unsigned char *)(a2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(a2 + 17) = 0;
    uint64_t v19 = *(void **)(a2 + 8);
    long long v20 = " seconds";
    uint64_t v21 = 8;
  }
  else
  {
    long long v20 = "Unsolicited Requests: OFF";
    uint64_t v21 = 25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  if ((*(char *)(a3 + 199) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 199)) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (*(void *)(a3 + 184))
  {
LABEL_51:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"IMEI Header name: ", 18);
    *(unsigned char *)(a2 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 176);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(a2 + 17) = 0;
  }
LABEL_52:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"IMPU ranking:", 13);
  *(unsigned char *)(a2 + 17) = 0;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  SipImpuRank::logRanks(v22, a2, (uint64_t *)(a3 + 368), 1);
  if (*(void *)(a3 + 312) != *(void *)(a3 + 304))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Forbidden Http Error Codes: ", 28);
    *(unsigned char *)(a2 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v38, ", ");
    ims::join<std::__wrap_iter<std::string *>>();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"Disable on network error: ", 26);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 328)) {
    char v23 = "True";
  }
  else {
    char v23 = "False";
  }
  if (*(unsigned char *)(a3 + 328)) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v23, v24);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CDIV: All Rules - ", 18);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 360)) {
    char v25 = "True";
  }
  else {
    char v25 = "False";
  }
  if (*(unsigned char *)(a3 + 360)) {
    uint64_t v26 = 4;
  }
  else {
    uint64_t v26 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v25, v26);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CDIV: Allowed rules per PUT Request - ", 38);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 361)) {
    unsigned int v27 = "Multiple";
  }
  else {
    unsigned int v27 = "Single";
  }
  if (*(unsigned char *)(a3 + 361)) {
    uint64_t v28 = 8;
  }
  else {
    uint64_t v28 = 6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v27, v28);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CDIV: Supports Target Erasure - ", 32);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 362)) {
    int v29 = "True";
  }
  else {
    int v29 = "False";
  }
  if (*(unsigned char *)(a3 + 362)) {
    uint64_t v30 = 4;
  }
  else {
    uint64_t v30 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v29, v30);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CDIV: Supports Media Tag - ", 27);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 363)) {
    uint64_t v31 = "True";
  }
  else {
    uint64_t v31 = "False";
  }
  if (*(unsigned char *)(a3 + 363)) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v31, v32);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CB: Unsolicited Request Support - ", 34);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 364)) {
    uint64_t v33 = "True";
  }
  else {
    uint64_t v33 = "False";
  }
  if (*(unsigned char *)(a3 + 364)) {
    uint64_t v34 = 4;
  }
  else {
    uint64_t v34 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v33, v34);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"CB: Supports Media Tag - ", 25);
  *(unsigned char *)(a2 + 17) = 0;
  if (*(unsigned char *)(a3 + 365)) {
    BOOL v35 = "True";
  }
  else {
    BOOL v35 = "False";
  }
  if (*(unsigned char *)(a3 + 365)) {
    uint64_t v36 = 4;
  }
  else {
    uint64_t v36 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v35, v36);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"HTTP: HTTP Version ", 19);
  *(unsigned char *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 + 336);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"*********************************************", 45);
  *(unsigned char *)(a2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(a2 + 17) = 0;
  return result;
}

void sub_1C558F2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *IMSXcapManager::initialized(uint64_t a1, void **a2)
{
  uint64_t result = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)result + 16);
    return (void *)v3();
  }
  return result;
}

void IMSXcapManager::handleRequest(uint64_t a1, uint64_t a2, ctu::cf *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v65, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"XCAP Request Dictionary: ", 25);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v61) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v65);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v65, (uint64_t)__p);
  uint64_t v8 = &v77;
  ctu::cf::show((uint64_t *)&v77, a3, v9);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v77.__r_.__value_.__r.__words[0];
  }
  size_t v10 = strlen((const char *)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v65);
  }
  *(_OWORD *)std::string __p = 0u;
  LOBYTE(__p[1]) = 1;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long v63 = 0uLL;
  lpsrc = 0;
  if (CapSuppServicesInfo::deserialize((CapSuppServicesInfo *)__p, a3))
  {
    char v11 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, (void **)a2, 0);
    if (v11)
    {
      if ((*(uint64_t (**)(void))(**(void **)v11 + 16))())
      {
        switch(BYTE9(v63))
        {
          case 0:
            if (lpsrc) {
            else
            }
              std::string::size_type v12 = 0;
            int v21 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v77 = *(std::string *)a2;
            }
            if (!v21)
            {
              uint64_t v44 = *(void *)v11;
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              long long v68 = &__block_descriptor_tmp_67_1;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, void **))(*(void *)v44 + 72))(v44, &v65);
              goto LABEL_160;
            }
            if (v12)
            {
              uint64_t v26 = *(void *)v11;
              int v27 = v12[8];
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_68;
              long long v68 = &__block_descriptor_tmp_71_4;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, BOOL, void **))(*(void *)v26 + 80))(v26, v27 != 0, &v65);
              goto LABEL_160;
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
            std::string::basic_string[abi:ne180100]<0>(v75, "");
            uint64_t v48 = ims::warn((uint64_t)&v65, (uint64_t)v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Invalid CW request", 18);
            *(unsigned char *)(v48 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v48 + 17) = 0;
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(v65);
            }
            IMSXcapManager::_sendGenericFailureResponse(v21, 0, a2);
            goto LABEL_163;
          case 1:
            if (lpsrc) {
            else
            }
              uint64_t v17 = 0;
            int v22 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v77 = *(std::string *)a2;
            }
            if (v17)
            {
              uint64_t v28 = (unsigned char *)v17[2];
              if (v28 != (unsigned char *)v17[3])
              {
                unint64_t v29 = v28[1];
                if (v29 >= 6) {
                  unsigned __int8 v30 = 1;
                }
                else {
                  unsigned __int8 v30 = 0x60503020100uLL >> (8 * v29);
                }
                if (v22)
                {
                  if (*v28)
                  {
                    int v31 = v28[2];
                    if (v28[2] || v11[362])
                    {
                      uint64_t v32 = *(void *)v11;
                      uint64_t v33 = *((unsigned int *)v17 + 3);
                      char v65 = (void *)MEMORY[0x1E4F143A8];
                      uint64_t v66 = 1174405120;
                      long long v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_87;
                      long long v68 = &__block_descriptor_tmp_90_2;
                      uint64_t v69 = a1;
                      int v70 = v11;
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v71 = v77;
                      }
                      (*(void (**)(uint64_t, BOOL, void, unsigned char *, uint64_t, void **))(*(void *)v32 + 96))(v32, v31 != 0, v30, v28 + 8, v33, &v65);
                    }
                    else
                    {
                      std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
                      std::string::basic_string[abi:ne180100]<0>(v75, "");
                      uint64_t v58 = ims::info((uint64_t)&v65, (uint64_t)v75);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"CF Erasure not supported. Perform deactivation instead", 54);
                      *(unsigned char *)(v58 + 17) = 0;
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(unsigned char *)(v58 + 17) = 0;
                      if (v76 < 0) {
                        operator delete(v75[0]);
                      }
                      if (SHIBYTE(v67) < 0) {
                        operator delete(v65);
                      }
                      uint64_t v59 = *(void *)v11;
                      char v65 = (void *)MEMORY[0x1E4F143A8];
                      uint64_t v66 = 1174405120;
                      long long v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_83;
                      long long v68 = &__block_descriptor_tmp_86_3;
                      uint64_t v69 = a1;
                      int v70 = v11;
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v71 = v77;
                      }
                      (*(void (**)(uint64_t, void, void, void **))(*(void *)v59 + 104))(v59, 0, v30, &v65);
                    }
                  }
                  else
                  {
                    uint64_t v55 = *(void *)v11;
                    int v56 = v28[2];
                    char v65 = (void *)MEMORY[0x1E4F143A8];
                    uint64_t v66 = 1174405120;
                    long long v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_78;
                    long long v68 = &__block_descriptor_tmp_81_0;
                    uint64_t v69 = a1;
                    int v70 = v11;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v71 = v77;
                    }
                    (*(void (**)(uint64_t, BOOL, void, void **))(*(void *)v55 + 104))(v55, v56 != 0, v30, &v65);
                  }
                }
                else
                {
                  uint64_t v53 = *(void *)v11;
                  char v65 = (void *)MEMORY[0x1E4F143A8];
                  uint64_t v66 = 1174405120;
                  long long v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
                  long long v68 = &__block_descriptor_tmp_77;
                  uint64_t v69 = a1;
                  int v70 = v11;
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v71 = v77;
                  }
                  (*(void (**)(uint64_t, void, void **))(*(void *)v53 + 88))(v53, v30, &v65);
                }
                goto LABEL_160;
              }
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              uint64_t v45 = ims::warn((uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"No ruleset to fetch call fwd info", 33);
              *(unsigned char *)(v45 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              uint64_t v45 = ims::warn((uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Invalid CDIV request", 20);
              *(unsigned char *)(v45 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(unsigned char *)(v45 + 17) = 0;
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(v65);
            }
            IMSXcapManager::_sendGenericFailureResponse(v22, 1, a2);
            goto LABEL_163;
          case 2:
            if (lpsrc) {
            else
            }
              uint64_t v18 = 0;
            int v23 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v77 = *(std::string *)a2;
            }
            if (!v23)
            {
              uint64_t v46 = *(void *)v11;
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              long long v68 = &__block_descriptor_tmp_93_0;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, void **))(*(void *)v46 + 112))(v46, &v65);
              goto LABEL_160;
            }
            if (v18)
            {
              uint64_t v34 = *(void *)v11;
              int v35 = v18[8];
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_94;
              long long v68 = &__block_descriptor_tmp_97;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, BOOL, void **))(*(void *)v34 + 120))(v34, v35 != 0, &v65);
              goto LABEL_160;
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
            std::string::basic_string[abi:ne180100]<0>(v75, "");
            uint64_t v49 = ims::warn((uint64_t)&v65, (uint64_t)v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"Invalid OIP request", 19);
            *(unsigned char *)(v49 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v49 + 17) = 0;
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(v65);
            }
            IMSXcapManager::_sendGenericFailureResponse(v23, 2, a2);
            goto LABEL_163;
          case 3:
            if (lpsrc) {
            else
            }
              uint64_t v19 = 0;
            int v24 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v77 = *(std::string *)a2;
            }
            if (v24)
            {
              if (!v19)
              {
                std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
                std::string::basic_string[abi:ne180100]<0>(v75, "");
                uint64_t v50 = ims::warn((uint64_t)&v65, (uint64_t)v75);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"Invalid OIR request", 19);
                *(unsigned char *)(v50 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v50 + 17) = 0;
                if (v76 < 0) {
                  operator delete(v75[0]);
                }
                if (SHIBYTE(v67) < 0) {
                  operator delete(v65);
                }
                IMSXcapManager::_sendGenericFailureResponse(v24, 3, a2);
                goto LABEL_163;
              }
              uint64_t v36 = *(void *)v11;
              int v37 = v19[8];
              int v38 = v19[9];
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_102;
              long long v68 = &__block_descriptor_tmp_105_1;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, BOOL, BOOL, void **))(*(void *)v36 + 136))(v36, v37 != 0, v38 != 0, &v65);
            }
            else
            {
              uint64_t v47 = *(void *)v11;
              char v65 = (void *)MEMORY[0x1E4F143A8];
              uint64_t v66 = 1174405120;
              long long v67 = ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              long long v68 = &__block_descriptor_tmp_101_0;
              uint64_t v69 = a1;
              int v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              }
              else {
                std::string v71 = v77;
              }
              (*(void (**)(uint64_t, void **))(*(void *)v47 + 128))(v47, &v65);
            }
LABEL_160:
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_163;
            }
            long long v57 = (void *)v71.__r_.__value_.__r.__words[0];
            goto LABEL_162;
          case 4:
            if (lpsrc) {
            else
            }
              long long v20 = 0;
            int v25 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v77 = *(std::string *)a2;
            }
            if (v20)
            {
              char v39 = (char *)v20[2];
              if (v39 != (char *)v20[3])
              {
                char v40 = *v39;
                char v41 = v39[2];
                if ((v41 - 1) > 7u) {
                  uint64_t v42 = 0;
                }
                else {
                  uint64_t v42 = qword_1C56D9EA0[(char)(v41 - 1)];
                }
                char v51 = v39[1];
                if (v25)
                {
                  uint64_t v52 = *(void *)v11;
                  if (v51)
                  {
                    char v65 = (void *)MEMORY[0x1E4F143A8];
                    uint64_t v66 = 1174405120;
                    long long v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_112;
                    long long v68 = &__block_descriptor_tmp_115;
                    uint64_t v69 = a1;
                    int v70 = v11;
                    char v72 = v40;
                    char v73 = v51;
                    char v74 = v41;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v71 = v77;
                    }
                    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, void **))(*(void *)v52 + 152))(v52, v42, (v40 & 1) == 0, 1, &v65);
                  }
                  else
                  {
                    char v65 = (void *)MEMORY[0x1E4F143A8];
                    uint64_t v66 = 1174405120;
                    long long v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_116;
                    long long v68 = &__block_descriptor_tmp_119;
                    uint64_t v69 = a1;
                    int v70 = v11;
                    char v72 = v40;
                    char v73 = v51;
                    char v74 = v41;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v71 = v77;
                    }
                    (*(void (**)(uint64_t, uint64_t, void, void **))(*(void *)v52 + 160))(v52, v42, 0, &v65);
                  }
                }
                else
                {
                  uint64_t v54 = *(void *)v11;
                  char v65 = (void *)MEMORY[0x1E4F143A8];
                  uint64_t v66 = 1174405120;
                  long long v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
                  long long v68 = &__block_descriptor_tmp_111_1;
                  uint64_t v69 = a1;
                  int v70 = v11;
                  char v72 = v40;
                  char v73 = v51;
                  char v74 = v41;
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v71 = v77;
                  }
                  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v54 + 144))(v54, v42, &v65);
                }
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                {
                  long long v57 = (void *)v71.__r_.__value_.__r.__words[0];
LABEL_162:
                  operator delete(v57);
                }
LABEL_163:
                if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_164;
                }
                char v15 = (void *)v77.__r_.__value_.__r.__words[0];
LABEL_25:
                operator delete(v15);
                goto LABEL_164;
              }
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              uint64_t v43 = ims::warn((uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"No ruleset to fetch call barring info", 37);
              *(unsigned char *)(v43 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              uint64_t v43 = ims::warn((uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Invalid CB request", 18);
              *(unsigned char *)(v43 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(unsigned char *)(v43 + 17) = 0;
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(v65);
            }
            IMSXcapManager::_sendGenericFailureResponse(v25, 4, a2);
            goto LABEL_163;
          default:
            goto LABEL_164;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
      std::string::basic_string[abi:ne180100]<0>(&v77, "");
      uint64_t v16 = ims::error((uint64_t)&v65, (uint64_t)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Bambi Xcap client is not initialized. Cannot send Xcap request", 62);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v65);
      }
      IMSXcapManager::_sendGenericFailureResponse(BYTE8(v63), SBYTE9(v63), a2);
      goto LABEL_164;
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v77, "");
    uint64_t v14 = ims::error((uint64_t)&v65, (uint64_t)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to handle request for unknown stack ID ", 46);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v77, "");
    uint64_t v13 = ims::error((uint64_t)&v65, (uint64_t)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Unable to deserialize xcap data", 31);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67) < 0)
  {
    char v15 = v65;
    goto LABEL_25;
  }
LABEL_164:
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)__p);
}

void sub_1C5590A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&a9);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_sendGenericFailureResponse(unsigned __int8 a1, char a2, uint64_t a3)
{
  long long v6 = 0u;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  LOBYTE(v6) = 1;
  uint64_t v10 = a1;
  BYTE8(v6) = 0;
  BYTE1(v10) = a2;
  CFTypeRef cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v6, &cf);
  uint64_t v4 = (ctu::cf *)cf;
  if (cf) {
    CFRetain(cf);
  }
  IMSXcapManager::_notifyClient(&v4, a3);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v4);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v6);
}

void sub_1C5590C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, char a11)
{
}

void IMSXcapManager::handleAuthChallengeResponse(uint64_t a1, void **a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v29, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v27, "");
  uint64_t v6 = ims::debug((uint64_t)&v29, (uint64_t)v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleAuthChallengeResponse: Context: ", 38);
  *(unsigned char *)(v6 + 17) = 0;
  if (*(unsigned char *)(a3 + 8)) {
    uint64_t v7 = "XCAP";
  }
  else {
    uint64_t v7 = "SIP";
  }
  std::string::basic_string[abi:ne180100]<0>(v25, v7);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", Mode: ", 8);
  *(unsigned char *)(v6 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v23, off_1E6511B48[*(char *)(a3 + 9)]);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", Result: ", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E6511B68[*(int *)(a3 + 12)]);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
  uint64_t v8 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = *(unsigned __int8 *)(a3 + 9);
    if (v10 == 1 || v10 == 3)
    {
      uint64_t v13 = v8[54];
      if (v13)
      {
        uint64_t v14 = (uint64_t *)v8[53];
        char v15 = (SipAkaAuthChallenge **)v14[2];
        uint64_t v16 = *v14;
        *(void *)(v16 + 8) = v14[1];
        *(void *)v14[1] = v16;
        v9[54] = v13 - 1;
        operator delete(v14);
        int v17 = *(_DWORD *)(a3 + 12);
        switch(v17)
        {
          case 3:
            SipAkaAuthChallenge::createFailureResponse(*v15);
          case 2:
            SipAkaAuthChallenge::createSyncFailureResponse();
          case 1:
            SipAkaAuthChallenge::createSuccessResponse();
        }
        if (v15)
        {
          long long v20 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v15);
          MEMORY[0x1C878E320](v20, 0x1032C403FAF6B48);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v29, "xcap");
        std::string::basic_string[abi:ne180100]<0>(v27, "");
        uint64_t v19 = ims::error((uint64_t)&v29, (uint64_t)v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Empty auth queue. Cannot process auth challenge response.", 57);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v19 + 17) = 0;
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v29);
        }
      }
      if (v9[54]) {
        AuthQueueItem<BambiXcapClient>::sendChallenge(*(void **)(v9[53] + 16));
      }
      return;
    }
    if (v10 == 2)
    {
      uint64_t v11 = *v8;
      if (*(_DWORD *)(a3 + 12) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 64))(v11, a3 + 88);
        return;
      }
      unint64_t v29 = 0;
      unsigned __int8 v30 = 0;
      uint64_t v31 = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 64))(v11, &v29);
      uint64_t v18 = v29;
      if (v29)
      {
        unsigned __int8 v30 = v29;
        goto LABEL_31;
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "xcap");
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    std::string::size_type v12 = (unsigned char *)ims::error((uint64_t)&v29, (uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v12 + 1), (uint64_t)"Mode not handled in XCAP", 24);
    v12[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "xcap");
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    std::string::size_type v12 = (unsigned char *)ims::error((uint64_t)&v29, (uint64_t)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v12 + 1), (uint64_t)"Uknown stackID given: ", 22);
    v12[17] = 0;
    (*(void (**)(unsigned char *, void **))(*(void *)v12 + 32))(v12, a2);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v12[17] = 0;
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v31) < 0)
  {
    uint64_t v18 = v29;
LABEL_31:
    operator delete(v18);
  }
}

void sub_1C55912A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  int v35 = *(void **)(v33 - 56);
  if (v35)
  {
    *(void *)(v33 - 48) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void AuthQueueItem<BambiXcapClient>::sendChallenge(void *a1)
{
  uint64_t v13 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)int v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  long long v6 = 0u;
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v5[1], (char *)(v2 + 184), (char *)(v2 + 200), 0x10uLL);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v7, (char *)(v3 + 200), (char *)(v3 + 216), 0x10uLL);
  LODWORD(v13) = *((_DWORD *)a1 + 6);
  uint64_t v4 = IMSClientManager::delegateForStack((void **)a1 + 4);
  (*(void (**)(void))(*(void *)(v4 + 8) + 96))();
  if (__p[1])
  {
    *(void **)&long long v12 = __p[1];
    operator delete(__p[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v8[1])
  {
    *(void **)&long long v9 = v8[1];
    operator delete(v8[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5[1])
  {
    *(void **)&long long v6 = v5[1];
    operator delete(v5[1]);
  }
}

void sub_1C55914B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IMSXcapManager::handleDigestAuthChallenge(uint64_t a1, void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::warn((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Standard Digest Challenge not supported yet", 43);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t v5 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (v5)
  {
    (*(void (**)(void))(*(void *)*v5 + 40))(*v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Unable to handle digewst auth challenge due to unknown stack ID ", 64);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C55916B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *IMSXcapManager::handleAkaAuthChallenge(uint64_t a1, void **a2)
{
  uint64_t result = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (result) {
    operator new();
  }
  return result;
}

void sub_1C5591848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1C878E320](v14, 0x1032C403FAF6B48);
  _Unwind_Resume(a1);
}

void IMSXcapManager::fetchKsExtNaf(uint64_t a1, void **a2, char **a3, char **a4, uint64_t a5, uint64_t a6)
{
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v21 = 0u;
  *(_OWORD *)char v22 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  long long v20 = 0u;
  LOWORD(v19[0]) = 513;
  if (&v22[1] != (void **)a3) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v22[1], *a3, a3[1], a3[1] - *a3);
  }
  if (&v19[1] != (void **)a4) {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v19[1], *a4, a4[1], a4[1] - *a4);
  }
  int v10 = *(char *)(a5 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (char *)a5;
  }
  else {
    uint64_t v11 = *(char **)a5;
  }
  if (v10 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    size_t v12 = *(void *)(a5 + 8);
  }
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v17, v11, &v11[v12], v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v17;
  v25[0] = v18;
  int v13 = *(char *)(a6 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (char *)a6;
  }
  else {
    uint64_t v14 = *(char **)a6;
  }
  if (v13 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    size_t v15 = *(void *)(a6 + 8);
  }
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v17, v14, &v14[v15], v15);
  if (v25[1])
  {
    void v25[2] = v25[1];
    operator delete(v25[1]);
  }
  *(_OWORD *)&v25[1] = v17;
  void v25[3] = v18;
  uint64_t v16 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(void))(*(void *)(v16 + 8) + 96))();
  if (v25[1])
  {
    void v25[2] = v25[1];
    operator delete(v25[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[1])
  {
    *(void **)&long long v23 = v22[1];
    operator delete(v22[1]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if (v19[1])
  {
    *(void **)&long long v20 = v19[1];
    operator delete(v19[1]);
  }
}

void sub_1C5591A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ims::aka::Request::~Request((ims::aka::Request *)va);
  _Unwind_Resume(a1);
}

void IMSXcapManager::fetchPreferredImpu(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v49, 0, sizeof(v49));
  memset(&v48, 0, sizeof(v48));
  memset(&v47, 0, sizeof(v47));
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(void **)(*(void *)(a1 + 16) + 168) + 192))(&v45);
  if (!v45)
  {
LABEL_10:
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    uint64_t v7 = (char *)ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
    char v8 = v7;
    if (v7)
    {
      if (v49.__begin_ == v49.__end_)
      {
        if (&v49 != (std::vector<std::string> *)(v7 + 16)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v49, *((std::string **)v7 + 2), *((long long **)v7 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v7 + 3) - *((void *)v7 + 2)) >> 3));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
        std::string::basic_string[abi:ne180100]<0>(&v44, "");
        uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Picking IMPU from list of IMPUs sent to us by SD (read from SIM Config)", 71);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
        std::string::basic_string[abi:ne180100]<0>(&v44, "");
        uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Picking IMPU from list of IMPUs received in the 200 (OK) response during last successful registration", 101);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v9 + 17) = 0;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v19) < 0) {
        operator delete(__p[0]);
      }
      SipImpuRank::preferredImpu((void *)v8 + 46, (uint64_t *)&v49, (unsigned __int8 *)v8 + 64, (unsigned __int8 *)&v47, (uint64_t)&v48, a3);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
      std::string::basic_string[abi:ne180100]<0>(&v44, "");
      uint64_t v10 = ims::error((uint64_t)__p, (uint64_t)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Preferred IMPU is empty!", 24);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v19) < 0) {
        operator delete(__p[0]);
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    goto LABEL_28;
  }
  memset(&v44, 0, sizeof(v44));
  SipUserAgent::lastPreferredPublicUriString(*((SipUserAgent **)v45 + 18), &v44);
  std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_8:
    SipStack::getAssociatedUris(v45, (uint64_t *)__p);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v49, (std::string *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
    v16[0] = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
    std::string::operator=(&v48, (const std::string *)((char *)v45 + 3760));
    std::string::operator=(&v47, (const std::string *)((char *)v45 + 3784));
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    goto LABEL_10;
  }
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)std::string __p = 0u;
  SipUri::SipUri((uint64_t)__p, &v44);
  if (!SipUri::isValidUri((SipUri *)__p) || SipUri::isAnonymousUri((SipUri *)__p))
  {
LABEL_7:
    SipUri::~SipUri((SipUri *)__p);
    goto LABEL_8;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  SipUri::asString((uint64_t)__p, (void *)a3);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  if (!v11)
  {
    if (v12 < 0) {
      operator delete(*(void **)a3);
    }
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v14, "");
  uint64_t v13 = ims::debug((uint64_t)v16, (uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Using IMPU received in the 200 (OK) response during last successful registration", 80);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  SipUri::~SipUri((SipUri *)__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
LABEL_28:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  __p[0] = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C5591F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  SipUri::~SipUri((SipUri *)&a21);
  if (*(char *)(v27 - 121) < 0) {
    operator delete(*(void **)(v27 - 144));
  }
  long long v29 = *(std::__shared_weak_count **)(v27 - 112);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v27 - 81) < 0) {
    operator delete(*(void **)(v27 - 104));
  }
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  a21 = (void *)(v27 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_handleServiceCallWaitingResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11 = 0u;
  BYTE8(v11) = 1;
  __p[0] = 0;
  __p[1] = 0;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  LOBYTE(v11) = 1;
  BYTE8(v13) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v11) = (_WORD)cf;
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v9;
  *(void *)&long long v13 = v10;
  BYTE9(v13) = 0;
  if (a4) {
    operator new();
  }
  CFTypeRef cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v11, &cf);
  uint64_t v7 = (ctu::cf *)cf;
  if (cf) {
    CFRetain(cf);
  }
  IMSXcapManager::_notifyClient(&v7, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v7);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v11);
}

void sub_1C55921E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)va);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_fromImsResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v7 = (*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16));
  *(unsigned char *)a1 = v7 ^ 1;
  if ((v7 ^ 1)) {
    goto LABEL_10;
  }
  if (*(uint64_t **)(a3 + 8) != &SipResultDomain::_domain) {
    goto LABEL_3;
  }
  uint64_t v11 = *(void *)(a2 + 304);
  uint64_t v10 = *(void *)(a2 + 312);
  if (v11 == v10) {
    goto LABEL_3;
  }
  do
  {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v11 + 8);
    }
    if (v13 == 1)
    {
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v11, IMSXcapManager::_fromImsResult(XcapCarrierHandle *,ImsResult const&)::kWildcardErrorCode, *(void *)(v11 + 8)))goto LABEL_31; {
      }
        }
      else
      {
        if (!*(unsigned char *)(v11 + 23)) {
          goto LABEL_31;
        }
        uint64_t v14 = 0;
        while (*(unsigned __int8 *)(v11 + v14) == IMSXcapManager::_fromImsResult(XcapCarrierHandle *,ImsResult const&)::kWildcardErrorCode[v14])
        {
          if (v12 == ++v14) {
            goto LABEL_31;
          }
        }
      }
    }
    v11 += 24;
  }
  while (v11 != v10);
  uint64_t v11 = v10;
LABEL_31:
  if (v11 != v10)
  {
    *(unsigned char *)(a1 + 1) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    uint64_t v15 = ims::debug((uint64_t)__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"ForbiddenHttpErrorCode [*] matched", 34);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_3;
  }
  uint64_t v45 = 0;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  *(_OWORD *)long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::ostream::operator<<();
  uint64_t v16 = *(long long **)(a2 + 304);
  char v17 = *(long long **)(a2 + 312);
  if (v16 == v17) {
    goto LABEL_75;
  }
  while (1)
  {
    memset(&v46, 0, sizeof(v46));
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v16, *((void *)v16 + 1));
    }
    else
    {
      long long v18 = *v16;
      v46.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v35);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    unint64_t v20 = v36;
    int v21 = (char)v36;
    if ((v36 & 0x80u) != 0) {
      unint64_t v20 = (unint64_t)v35[1];
    }
    if (size != v20)
    {
      BOOL v31 = 0;
      if (((char)v36 & 0x80000000) == 0) {
        goto LABEL_62;
      }
LABEL_59:
      operator delete(v35[0]);
      goto LABEL_62;
    }
    if ((v36 & 0x80u) == 0) {
      long long v22 = v35;
    }
    else {
      long long v22 = (void **)v35[0];
    }
    if ((*((unsigned char *)&v46.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      BOOL v31 = memcmp(v46.__r_.__value_.__l.__data_, v22, v46.__r_.__value_.__l.__size_) == 0;
      goto LABEL_61;
    }
    if (*((unsigned char *)&v46.__r_.__value_.__s + 23))
    {
      uint64_t v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]) - 1;
      long long v24 = &v46;
      do
      {
        int v26 = v24->__r_.__value_.__s.__data_[0];
        long long v24 = (std::string *)((char *)v24 + 1);
        int v25 = v26;
        int v28 = *(unsigned __int8 *)v22;
        long long v22 = (void **)((char *)v22 + 1);
        int v27 = v28;
        BOOL v30 = v23-- != 0;
        BOOL v31 = v25 == v27;
      }
      while (v25 == v27 && v30);
LABEL_61:
      if (v21 < 0) {
        goto LABEL_59;
      }
      goto LABEL_62;
    }
    BOOL v31 = 1;
    if ((char)v36 < 0) {
      goto LABEL_59;
    }
LABEL_62:
    if (v31) {
      break;
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = (long long *)((char *)v16 + 24);
    if (v16 == v17) {
      goto LABEL_75;
    }
  }
  *(unsigned char *)(a1 + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>(v35, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  uint64_t v32 = ims::debug((uint64_t)v35, (uint64_t)v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"ForbiddenHttpErrorCode [", 24);
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 32))(v32, &v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"] matched", 9);
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v32 + 17) = 0;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
LABEL_75:
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v44);
LABEL_3:
  if (*(unsigned char *)(a2 + 328) && *(uint64_t **)(a3 + 8) == &_posixDomain)
  {
    *(unsigned char *)(a1 + 1) = 2;
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    uint64_t v8 = ims::debug((uint64_t)__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"DisableOnNetworkError matched", 29);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
  }
  ImsResult::description((ImsResult *)a3, __p);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(v6 + 16) = v38;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
  std::string::basic_string[abi:ne180100]<0>(&v46, "");
  uint64_t v9 = ims::debug((uint64_t)__p, (uint64_t)&v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"XCAP Result - ", 14);
  *(unsigned char *)(v9 + 17) = 0;
  CapSuppServicesInfo::Result::asString((CapSuppServicesInfo::Result *)a1, v35);
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, v35);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5592904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_notifyClient(ctu::cf **a1, uint64_t a2)
{
  if (*a1) {
    uint64_t v2 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"XCAP Response Dictionary: ", 26);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v17, (uint64_t)__p);
    int v7 = v13;
    ctu::cf::show((uint64_t *)v13, *a1, v8);
    if (v14 < 0) {
      int v7 = (void **)v13[0];
    }
    size_t v9 = strlen((const char *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    memset(&v17, 0, sizeof(v17));
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v17 = *(std::string *)a2;
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    void v10[2] = ___ZNK14IMSXcapManager13_notifyClientEN3ctu2cf11CFSharedRefIK14__CFDictionaryEERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke;
    void v10[3] = &__block_descriptor_tmp_55;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v11, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string v11 = v17;
    }
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v12, (const void **)a1);
    dispatch_async(MEMORY[0x1E4F14428], v10);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v12);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5592CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_handleServiceCallForwardResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = 0u;
  BYTE8(v9) = 1;
  __p[0] = 0;
  __p[1] = 0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  LOBYTE(v9) = 1;
  BYTE8(v11) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)cf, a1, a3);
  WORD4(v9) = cf[0];
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)&cf[1];
  *(const void **)&long long v11 = cf[3];
  BYTE9(v11) = 1;
  if (a4) {
    operator new();
  }
  cf[0] = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v9, cf);
  int v7 = (ctu::cf *)cf[0];
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  IMSXcapManager::_notifyClient(&v7, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v7);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v9);
}

void sub_1C5592F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

void IMSXcapManager::_handleServiceOIPResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11 = 0u;
  BYTE8(v11) = 1;
  __p[0] = 0;
  __p[1] = 0;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  LOBYTE(v11) = 1;
  BYTE8(v13) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v11) = (_WORD)cf;
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v9;
  *(void *)&long long v13 = v10;
  BYTE9(v13) = 2;
  if (a4) {
    operator new();
  }
  CFTypeRef cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v11, &cf);
  int v7 = (ctu::cf *)cf;
  if (cf) {
    CFRetain(cf);
  }
  IMSXcapManager::_notifyClient(&v7, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v7);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v11);
}

void sub_1C5593110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)va);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_handleServiceOIRResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11 = 0u;
  BYTE8(v11) = 1;
  __p[0] = 0;
  __p[1] = 0;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  LOBYTE(v11) = 1;
  BYTE8(v13) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v11) = (_WORD)cf;
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v9;
  *(void *)&long long v13 = v10;
  BYTE9(v13) = 3;
  if (a4) {
    operator new();
  }
  CFTypeRef cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v11, &cf);
  int v7 = (ctu::cf *)cf;
  if (cf) {
    CFRetain(cf);
  }
  IMSXcapManager::_notifyClient(&v7, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v7);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v11);
}

void sub_1C559327C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)va);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_handleServiceCallBarringResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = 0u;
  BYTE8(v12) = 1;
  __p[0] = 0;
  __p[1] = 0;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  LOBYTE(v12) = 1;
  BYTE8(v14) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v12) = (_WORD)cf;
  if (SBYTE7(v14) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v10;
  *(void *)&long long v14 = v11;
  BYTE9(v14) = 4;
  if (a4) {
    operator new();
  }
  CFTypeRef cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v12, &cf);
  uint64_t v8 = (ctu::cf *)cf;
  if (cf) {
    CFRetain(cf);
  }
  IMSXcapManager::_notifyClient(&v8, a6);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)&v12);
}

void sub_1C5593578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CapSuppServicesInfo::~CapSuppServicesInfo((CapSuppServicesInfo *)va);
  _Unwind_Resume(a1);
}

const void **___ZNK14IMSXcapManager13_notifyClientEN3ctu2cf11CFSharedRefIK14__CFDictionaryEERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = IMSClientManager::delegateForStack((void **)(a1 + 32));
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v4, (const void **)(a1 + 56));
  (*(void (**)(uint64_t, const void **))(*(void *)(v2 + 56) + 16))(v2 + 56, &v4);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v4);
}

void sub_1C5593628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)(a1 + 56), (const void **)(a2 + 56));
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallWaitingResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C55937B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_68(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallWaitingResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C55938C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_78(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_83(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_87(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIPResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_94(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIPResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIRResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_102(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIRResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5593F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, *(unsigned __int8 *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5594018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_112(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, *(unsigned __int8 *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C55940EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_116(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, *(unsigned __int8 *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C55941C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  void v4[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_124_1;
  v4[4] = v1;
  v4[5] = v2;
  if (*(char *)(a1 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else {
    std::string __p = *(std::string *)(a1 + 48);
  }
  (*(void (**)(uint64_t, void, void *))(*(void *)v3 + 88))(v3, 0, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C55942B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5594390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v2;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  void v10[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2;
  void v10[3] = &__block_descriptor_tmp_131;
  void v10[4] = v3;
  v10[5] = v2;
  long long v5 = (_OWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *v5;
    v11.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
  }
  (*(void (**)(uint64_t, void, void *))(*(void *)v4 + 144))(v4, 0, v10);
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  uint64_t v7 = *v6;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  uint64_t v8[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_132;
  v8[3] = &__block_descriptor_tmp_135;
  _OWORD v8[4] = v3;
  v8[5] = v6;
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
  }
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 144))(v7, 1, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C5594548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, 6, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5594640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_132(uint64_t a1, const std::string *a2, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    long long v5 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, 3, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1C5594714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t IMSXcapManager::handleAuthResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a4);
  }
  return result;
}

uint64_t non-virtual thunk to'IMSXcapManager::handleAuthResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a4);
  }
  return result;
}

void IMSXcapManager::internalDumpState(IMSXcapManager *this, ImsOutStream *a2)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  uint64_t v3 = (char *)this + 40;
  if (v2 != (void *)((char *)this + 40))
  {
    do
    {
      *(_OWORD *)std::string __p = 0u;
      long long v11 = 0u;
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v2 + 2);
        *(void *)&long long v11 = v2[6];
      }
      *((void *)&v11 + 1) = v2[7];
      uint64_t v6 = IMSXcapManager::initialized((uint64_t)this, __p);
      if (v6) {
        IMSXcapManager::printConfig((uint64_t)v6, (uint64_t)a2, *((uint64_t *)&v11 + 1));
      }
      if (SBYTE7(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = (char *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)v2[2];
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1C5594874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C55948E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CapSuppServicesInfo::CallForward::Rule>::__construct_one_at_end[abi:ne180100]<CapSuppServicesInfo::CallForward::Rule const&>(uint64_t a1, __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  __int16 v4 = *a2;
  *(unsigned char *)(v3 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t v3 = v4;
  long long v5 = (std::string *)(v3 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 4);
    *(void *)(v3 + 24) = *((void *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 8) = v3 + 32;
}

void sub_1C5594970(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CapSuppServicesInfo::CallForward::Rule>::__push_back_slow_path<CapSuppServicesInfo::CallForward::Rule const&>(uint64_t *a1, __int16 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v20 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  long long v18 = v11;
  long long v19 = &v10[32 * v9];
  __int16 v12 = *a2;
  v11[2] = *((unsigned char *)a2 + 2);
  *(_WORD *)long long v11 = v12;
  long long v13 = (std::string *)(v11 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    long long v11 = v18;
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 4);
    *((void *)v11 + 3) = *((void *)a2 + 3);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  long long v18 = v11 + 32;
  std::vector<CapSuppServicesInfo::CallForward::Rule>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1C5594A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CapSuppServicesInfo::CallForward::Rule>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      __int16 v8 = *(_WORD *)(a3 - 32);
      a3 -= 32;
      *(unsigned char *)(v7 - 30) = *(unsigned char *)(a3 + 2);
      *(_WORD *)(v7 - 32) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallBarring::Rule>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(3 * a2);
}

void BambiCallHandler::BambiCallHandler(BambiCallHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20E1B48;
}

void sub_1C5594D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::~BambiStrictCallHandler(BambiStrictCallHandler *this)
{
  *(void *)this = &unk_1F20DE558;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 13);
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  BambiStrictCallHandler::~BambiStrictCallHandler(this);
  JUMPOUT(0x1C878E320);
}

void *BambiStrictCallHandler::deinitialize(BambiStrictCallHandler *this)
{
  uint64_t v1 = (void *)((char *)this + 104);
  for (uint64_t i = (void *)*((void *)this + 14); i != v1; uint64_t i = (void *)i[1])
  {
    uint64_t v3 = i[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return std::__list_imp<unsigned long long>::clear(v1);
}

void BambiStrictCallHandler::startCallFromAction(ImsLogContainer *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCallHandler::startCall(a1, (uint64_t)&v4, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5594F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::holdCallFromAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(BambiCall **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    BambiCall::performLocalHoldFromHandler(v2);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5594FB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::resumeCallFromAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(BambiCall **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    BambiCall::performLocalResumeFromHandler(v2);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C559502C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::answerCallFromAction(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(BambiCall **)a1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::answerFromHandler(v2, a2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C559509C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::prepareCallFromAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2 && !v2[465]) {
    (*(void (**)(unsigned char *))(*(void *)v2 + 112))(v2);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5595138(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::startCall(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[2] = 0;
  a2[3] = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *a2 = &unk_1F20B2680;
  a2[1] = &_bambiDomain;
  a2[4] = 0;
  operator new();
}

void sub_1C5595544(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  ImsResult::~ImsResult(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiStrictCallHandler::performLocalHold(uint64_t a1, void *a2)
{
  if (*a2 && (*(_DWORD *)(*a2 + 448) & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = a2[1];
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"No active call to hold", 22);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);
  return v4(a1);
}

void sub_1C5595A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  ImsResult::~ImsResult((ImsResult *)&a9);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiStrictCallHandler::performLocalResume(uint64_t a1, void *a2)
{
  if (*a2 && (*(_DWORD *)(*a2 + 448) & 0xFFFFFFFE) == 2)
  {
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"No held call to resume", 22);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 144);
  return v5(a1);
}

void sub_1C5595FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  ImsResult::~ImsResult((ImsResult *)&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::answerCall(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[2] = 0;
  a2[3] = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *a2 = &unk_1F20B2680;
  a2[1] = &_bambiDomain;
  a2[4] = 0;
  operator new();
}

void sub_1C55963F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  ImsResult::~ImsResult(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::localHoldCompleted(BambiStrictCallHandler *this)
{
  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::performNextCallAction(BambiStrictCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  memset(&v13[2], 0, 56);
  v13[0] = &unk_1F20B2680;
  v13[1] = &_bambiDomain;
  uint64_t v4 = *((void *)this + 16);
  if (!v4)
  {
    uint64_t v5 = *((void *)this + 15);
    if (!v5)
    {
      uint64_t v11 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(void *)this + 64))(this);
      (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(void *)this + 16))(this, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"no pending call activities", 26);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)a2 = &unk_1F20B2680;
      *(void *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 0;
      goto LABEL_11;
    }
    uint64_t v6 = (uint64_t *)*((void *)this + 14);
    *((void *)this + 16) = v6[2];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = v6[1];
    *(void *)v6[1] = v7;
    *((void *)this + 15) = v5 - 1;
    operator delete(v6);
    uint64_t v8 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(void *)this + 64))(this);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(void *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"starting new activity for ", 26);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v4 = *((void *)this + 16);
  }
  if (*(unsigned char *)(v4 + 176) && !*(void *)(v4 + 128))
  {
    uint64_t v9 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(void *)this + 64))(this);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(void *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"finished current activity", 25);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v10 = *((void *)this + 16);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *((void *)this + 16) = 0;
    BambiStrictCallHandler::performNextCallAction(v12, this);
    ImsResult::operator=((uint64_t)v13, (uint64_t)v12);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(v12);
    ImsResult::operator=((uint64_t)v13, (uint64_t)v12);
  }
  ImsResult::~ImsResult((ImsResult *)v12);
  ImsResult::ImsResult(a2, (uint64_t)v13);
LABEL_11:
  ImsResult::~ImsResult((ImsResult *)v13);
}

void sub_1C559686C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void BambiStrictCallHandler::localResumeCompleted(BambiStrictCallHandler *this)
{
  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::prepareCompleted(BambiStrictCallHandler *this)
{
  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::handleCallInvalidated(BambiStrictCallHandler *this, uint64_t *a2)
{
  uint64_t v4 = *((void *)this + 16);
  if (v4)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 160);
    if (v5)
    {
      uint64_t v6 = *(void *)(v4 + 152);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = std::__shared_weak_count::lock(v5);
      if (!v7) {
        uint64_t v6 = 0;
      }
      std::__shared_weak_count::__release_weak(v5);
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    if (v6 == *a2)
    {
      uint64_t v18 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(void *)this + 64))(this);
      (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(void *)this + 16))(this, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"removing current activity ", 26);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(void, uint64_t))(**((void **)this + 16) + 16))(*((void *)this + 16), v18);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      uint64_t v19 = *((void *)this + 16);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      *((void *)this + 16) = 0;
      if (v7) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v8 = (void *)*((void *)this + 16);
      uint64_t v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v21 = *a2;
      long long v22 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BambiCallActivity::invalidateCall(v8, &v21);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v7) {
LABEL_13:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v10 = (BambiStrictCallHandler *)*((void *)this + 14);
  if (v10 != (BambiStrictCallHandler *)((char *)this + 104))
  {
    while (1)
    {
      __int16 v12 = (BambiStrictCallHandler *)*((void *)v10 + 1);
      uint64_t v11 = (void *)*((void *)v10 + 2);
      long long v13 = (std::__shared_weak_count *)v11[20];
      if (v13)
      {
        uint64_t v14 = v11[19];
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = std::__shared_weak_count::lock(v13);
        if (!v15) {
          uint64_t v14 = 0;
        }
        std::__shared_weak_count::__release_weak(v13);
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
      }
      if (v14 == *a2) {
        break;
      }
      if (v15) {
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v10 = v12;
      if (v12 == (BambiStrictCallHandler *)((char *)this + 104)) {
        goto LABEL_27;
      }
    }
    uint64_t v16 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(void *)this + 64))(this);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(void *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"removing queued activity ", 25);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v17 = *(void *)v10;
    *(void *)(v17 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v17;
    --*((void *)this + 15);
    operator delete(v10);
    (*(void (**)(void *))(*v11 + 8))(v11);
    if (!v15) {
      goto LABEL_23;
    }
LABEL_22:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    goto LABEL_23;
  }
LABEL_27:
  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v20);
  ImsResult::~ImsResult((ImsResult *)v20);
}

void sub_1C5596CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void *BambiStrictCallHandler::logPrefix(BambiStrictCallHandler *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"StrictCallHandler: ", 19);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t BambiStrictCallHandler::isStrict(BambiStrictCallHandler *this)
{
  return 1;
}

void std::__shared_ptr_emplace<BambiCallStartAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallStartAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCallStartAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *BambiCallRequireCallsHeldAction::BambiCallRequireCallsHeldAction(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCallAction::BambiCallAction((uint64_t)a1, v7, a4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = &unk_1F20BFDF8;
  a1[1] = &unk_1F20BFE58;
  return a1;
}

void sub_1C5596E48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<BambiCallResumeAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallResumeAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCallResumeAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiCallAnswerAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallAnswerAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DE6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCallAnswerAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void RTCPSenderInfo::packetize(RTCPSenderInfo *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::resize(a2, 5uLL);
  std::vector<unsigned int>::pointer begin = a2->__begin_;
  *std::vector<unsigned int>::pointer begin = bswap32(*(_DWORD *)this);
  begin[1] = bswap32(*((_DWORD *)this + 1));
  begin[2] = bswap32(*((_DWORD *)this + 2));
  begin[3] = bswap32(*((_DWORD *)this + 3));
  begin[4] = bswap32(*((_DWORD *)this + 4));
}

void sub_1C5597010(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPSenderInfo::toStream(RTCPSenderInfo *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Low NTP: ", 10);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" RTP timestamp: ", 16);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Sender's Packet Count: ", 24);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Sender's Octet Count: ", 23);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void XcapCDNoReplyTimer::XcapCDNoReplyTimer(XcapCDNoReplyTimer *this)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v2 = (char *)this + 8;
  unsigned __int8 v4 = 0;
  uint64_t v5 = (char *)&v4;
  uint64_t v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v4, (uint64_t)&std::piecewise_construct, &v5);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)"NoReplyTimer", (long long *)(v3 + 5));
  *(void *)this = &unk_1F20DE728;
  *((void *)this + 1) = &unk_1F20DE7A0;
  *((_DWORD *)this + 16) = 0;
}

void XcapCDNoReplyTimer::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  char v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size == 12)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "NoReplyTimer", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_18;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v8 = "NoReplyTimer";
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v8)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v8;
        if (!--v9) {
          goto LABEL_12;
        }
      }
      goto LABEL_16;
    }
LABEL_12:
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v11 = (const char *)a3;
    }
    else {
      uint64_t v11 = *(const char **)a3;
    }
    *(_DWORD *)(a1 + 64) = atoi(v11);
  }
LABEL_16:
  if ((v5 & 0x80) == 0) {
    return;
  }
  uint64_t v10 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_18:
  operator delete(v10);
}

void XcapCDNoReplyTimer::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C55974A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  unint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapCDNoReplyTimer::constructTree(void *a1@<X8>)
{
}

void XcapCDNoReplyTimer::~XcapCDNoReplyTimer(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapCDNoReplyTimer::~XcapCDNoReplyTimer(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

void SipPathHeader::~SipPathHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPathHeader::clone(SipPathHeader *this)
{
}

void sub_1C55976E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

void SipLockable::~SipLockable(SipLockable *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 4IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8)) = a2[1];
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

void SipLockable::~SipLockable(SipLockable *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void SipLockable::useBlockQueue(SipLockable *this)
{
  _ZNSt3__115allocate_sharedB8ne180100I13ImsBlockQueueNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v4);
  long long v2 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t SipLockable::acquireTerminationLock(SipLockable *this, const LoggableString *a2)
{
  if (*((unsigned char *)this + 12))
  {
    ++*((_DWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v4 = ims::spam((uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": acquired lock [", 17);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, const LoggableString *))(*(void *)v4 + 40))(v4, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"] (count=", 9);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    v13[0] = a2;
    char v5 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)a2, (long long **)v13);
    ++*((_DWORD *)v5 + 14);
    return *((unsigned int *)this + 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v7 = ims::error((uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, const LoggableString *))(*(void *)v7 + 40))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" tried to lock a dead object", 28);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v8 = ims::error((uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": I was killed by ", 18);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v8 + 40))(v8, (char *)this + 40);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    return 0;
  }
}

void sub_1C5597CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLockable::releaseTerminationLock(SipLockable *this, std::string *a2)
{
  if (*((unsigned char *)this + 12))
  {
    int v4 = *((_DWORD *)this + 2);
    uint64_t v5 = (v4 - 1);
    *((_DWORD *)this + 2) = v5;
    uint64_t v6 = (char **)((char *)this + 16);
    v29[0] = a2;
    uint64_t v7 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)&a2->__r_.__value_.__l.__data_, (long long **)v29);
    int v8 = *((_DWORD *)v7 + 14) - 1;
    *((_DWORD *)v7 + 14) = v8;
    if (v8)
    {
      v29[0] = a2;
      if ((std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)&a2->__r_.__value_.__l.__data_, (long long **)v29)[7] & 0x80000000) == 0)
      {
LABEL_44:
        std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
        std::string::basic_string[abi:ne180100]<0>(&v33, "");
        uint64_t v21 = ims::spam((uint64_t)v29, (uint64_t)&v33);
        (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
        (*(void (**)(uint64_t, void **))(*(void *)v21 + 40))(v21, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)": released lock [", 17);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"] (", 3);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" remaining", 10);
        *(unsigned char *)(v21 + 17) = 0;
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v30) < 0) {
          operator delete(v29[0]);
        }
        if (v4 > 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          uint64_t v24 = ims::spam((uint64_t)v29, (uint64_t)&v33);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v30) < 0) {
            operator delete(v29[0]);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)":", 1);
          *(unsigned char *)(v24 + 17) = 0;
          int v25 = (SipLockable *)*((void *)this + 2);
          if (v25 != (SipLockable *)((char *)this + 24))
          {
            do
            {
              *(_OWORD *)long long v29 = 0u;
              long long v30 = 0u;
              if (*((char *)v25 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v29, *((const std::string::value_type **)v25 + 4), *((void *)v25 + 5));
              }
              else
              {
                *(_OWORD *)long long v29 = *((_OWORD *)v25 + 2);
                *(void *)&long long v30 = *((void *)v25 + 6);
              }
              DWORD2(v30) = *((_DWORD *)v25 + 14);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" [", 2);
              *(unsigned char *)(v24 + 17) = 0;
              LoggableString::LoggableString(&v33, (const std::string *)v29);
              (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 40))(v24, &v33);
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              if (SDWORD2(v30) >= 2)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" (", 2);
                *(unsigned char *)(v24 + 17) = 0;
                std::ostream::operator<<();
                *(unsigned char *)(v24 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)")", 1);
                *(unsigned char *)(v24 + 17) = 0;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v24 + 17) = 0;
              if (SBYTE7(v30) < 0) {
                operator delete(v29[0]);
              }
              uint64_t v26 = (SipLockable *)*((void *)v25 + 1);
              if (v26)
              {
                do
                {
                  int v27 = v26;
                  uint64_t v26 = *(SipLockable **)v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  int v27 = (SipLockable *)*((void *)v25 + 2);
                  BOOL v19 = *(void *)v27 == (void)v25;
                  int v25 = v27;
                }
                while (!v19);
              }
              int v25 = v27;
            }
            while (v27 != (SipLockable *)((char *)this + 24));
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)")", 1);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          uint64_t v22 = ims::spam((uint64_t)v29, (uint64_t)&v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)")", 1);
          *(unsigned char *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v22 + 17) = 0;
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v30) < 0) {
            operator delete(v29[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          uint64_t v23 = ims::spam((uint64_t)v29, (uint64_t)&v33);
          (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
          (*(void (**)(uint64_t, void **))(*(void *)v23 + 40))(v23, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)": terminationLocksReleased", 26);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v33.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v30) < 0) {
            operator delete(v29[0]);
          }
          *((unsigned char *)this + 12) = 0;
          std::string::operator=((std::string *)((char *)this + 40), a2);
          (*(void (**)(SipLockable *))(*(void *)this + 48))(this);
        }
        return v5;
      }
      std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
      std::string::basic_string[abi:ne180100]<0>(&v33, "");
      uint64_t v9 = ims::error((uint64_t)v29, (uint64_t)&v33);
      (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
      (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": overrelease of lock [", 23);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    char v10 = (void *)*((void *)this + 3);
    if (v10)
    {
      uint64_t v11 = (char *)this + 24;
      do
      {
        char v12 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, (void **)&a2->__r_.__value_.__l.__data_);
        if (v12 >= 0) {
          long long v13 = v10;
        }
        else {
          long long v13 = v10 + 1;
        }
        if (v12 >= 0) {
          uint64_t v11 = (char *)v10;
        }
        char v10 = (void *)*v13;
      }
      while (*v13);
      if (v11 != (char *)this + 24
        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v11 + 4) & 0x80) == 0)
      {
        char v14 = (char *)*((void *)v11 + 1);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            char v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          uint64_t v18 = v11;
          do
          {
            uint64_t v15 = (char *)*((void *)v18 + 2);
            BOOL v19 = *(void *)v15 == (void)v18;
            uint64_t v18 = v15;
          }
          while (!v19);
        }
        if (*v6 == v11) {
          uint64_t *v6 = v15;
        }
        unint64_t v20 = (uint64_t *)*((void *)this + 3);
        --*((void *)this + 4);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, (uint64_t *)v11);
        if (v11[55] < 0) {
          operator delete(*((void **)v11 + 4));
        }
        operator delete(v11);
      }
    }
    goto LABEL_44;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  uint64_t v16 = ims::error((uint64_t)v29, (uint64_t)&v33);
  (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
  (*(void (**)(uint64_t, void **))(*(void *)v16 + 40))(v16, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 40))(v16, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" tried to release a dead object", 31);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  uint64_t v17 = ims::error((uint64_t)v29, (uint64_t)&v33);
  (*(void (**)(void **__return_ptr, SipLockable *))(*(void *)this + 24))(__p, this);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)": I was killed by ", 18);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v17 + 40))(v17, (char *)this + 40);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  return 0;
}

void sub_1C55987E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SipLockable::loggableName(LoggableString *a1@<X8>)
{
}

void SipLockable::printLocks(SipLockable *this, ImsOutStream *a2)
{
  long long v2 = (void *)*((void *)this + 2);
  uint64_t v3 = (char *)this + 24;
  if (v2 != (void *)((char *)this + 24))
  {
    do
    {
      memset(v9, 0, sizeof(v9));
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v9, (const std::string::value_type *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)uint64_t v9 = *((_OWORD *)v2 + 2);
        *(void *)&v9[16] = v2[6];
      }
      *(_DWORD *)&v9[24] = *((_DWORD *)v2 + 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
      *((unsigned char *)a2 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)v9);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(int *)&v9[24] >= 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
        *((unsigned char *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]", 1);
      *((unsigned char *)a2 + 17) = 0;
      if ((v9[23] & 0x80000000) != 0) {
        operator delete(*(void **)v9);
      }
      uint64_t v5 = (char *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)v2[2];
          BOOL v7 = *(void *)v6 == (void)v2;
          long long v2 = v6;
        }
        while (!v7);
      }
      long long v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_1C5598A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void SipLockable::performBlock(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"performing block ", 17);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" on SipLockable's block queue", 29);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = a3[1];
    uint64_t v14 = *a3;
    uint64_t v15 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(v8, a2);
  }
  uint64_t v10 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN11SipLockable12performBlockERK14LoggableStringNSt3__110shared_ptrIS_EEU13block_pointerFvvE_block_invoke;
  v12[3] = &unk_1F20DE948;
  v12[5] = v10;
  long long v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void v12[4] = a4;
  ims::performBlock((IMSClientManager *)v12);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C5598C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11SipLockable12performBlockERK14LoggableStringNSt3__110shared_ptrIS_EEU13block_pointerFvvE_block_invoke(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      if (a1[5]) {
        (*(void (**)(void))(a1[4] + 16))();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5598D58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11SipLockableEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11SipLockableEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipThreadSafeLockable::SipThreadSafeLockable(SipThreadSafeLockable *this, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  *(void *)this = v2;
  *(void *)((char *)this + *(void *)(v2 - 4IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8)) = a2[2];
  *((unsigned char *)this + 12) = 1;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 4IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8)) = a2[3];
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), 0);
}

void sub_1C5598F00(_Unwind_Exception *a1)
{
  SipLockable::~SipLockable(v1, v2);
  _Unwind_Resume(a1);
}

void SipThreadSafeLockable::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t SipThreadSafeLockable::acquireTerminationLock(SipThreadSafeLockable *this, const LoggableString *a2)
{
  uint64_t v6 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 80), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  uint64_t v4 = SipLockable::acquireTerminationLock(this, a2);
  ImsLock::~ImsLock(&v6);
  return v4;
}

void sub_1C5598F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

uint64_t SipThreadSafeLockable::releaseTerminationLock(SipThreadSafeLockable *this, std::string *a2)
{
  uint64_t v6 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 80), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  uint64_t v4 = SipLockable::releaseTerminationLock(this, a2);
  ImsLock::~ImsLock(&v6);
  return v4;
}

void sub_1C5599004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    char v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_DWORD *)v11 + 14) = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    pthread_mutex_t *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      uint64_t v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  uint64_t v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_1C559912C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SipParameterMap::operator==(void *a1, uint64_t a2)
{
  if (a1[3] == *(void *)(a2 + 24))
  {
    uint64_t v2 = (void *)a1[1];
    uint64_t v3 = a1 + 2;
    if (v2 == a1 + 2) {
      return 1;
    }
    uint64_t v4 = a2 + 8;
    uint64_t v5 = (void **)(a2 + 16);
    while (1)
    {
      uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4, (void **)v2 + 4);
      if (v5 == v6) {
        break;
      }
      uint64_t v7 = *((unsigned __int8 *)v6 + 79);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = (void *)*((unsigned __int8 *)v6 + 79);
      }
      else {
        uint64_t v8 = v6[8];
      }
      uint64_t v9 = (void *)*((unsigned __int8 *)v2 + 79);
      int v10 = (char)v9;
      if ((char)v9 < 0) {
        uint64_t v9 = (void *)v2[8];
      }
      if (v8 != v9) {
        break;
      }
      uint64_t v11 = (const void **)(v6 + 7);
      if (v10 >= 0) {
        char v12 = (unsigned __int8 *)(v2 + 7);
      }
      else {
        char v12 = (unsigned __int8 *)v2[7];
      }
      if ((v7 & 0x80) != 0)
      {
        if (memcmp(*v11, v12, (size_t)v6[8])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v6 + 79))
      {
        while (*(unsigned __int8 *)v11 == *v12)
        {
          uint64_t v11 = (const void **)((char *)v11 + 1);
          ++v12;
          if (!--v7) {
            goto LABEL_20;
          }
        }
        return 0;
      }
LABEL_20:
      long long v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v15);
      }
      uint64_t v2 = v14;
      if (v14 == v3) {
        return 1;
      }
    }
  }
  return 0;
}

std::string *SipParameterMap::setParameter(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v6 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

uint64_t SipParameterMap::setParameter(uint64_t a1, long long *a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9 + 8, &v7);
  BOOL v15 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (void **)a2, (uint64_t)&std::piecewise_construct, &v15);
  uint64_t v5 = v4 + 7;
  if (*((char *)v4 + 79) < 0) {
    operator delete((void *)*v5);
  }
  *(_OWORD *)uint64_t v5 = v7;
  std::string::size_type v5[2] = v8;
  *(void *)&v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(*(void *)&v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v9[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v13);
}

void sub_1C5599468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipParameterMap::clearParameter(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

std::string *SipParameterMap::addParameters(std::string *this, const SipParameterMap *a2)
{
  uint64_t v2 = (char *)*((void *)a2 + 1);
  uint64_t v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    p_std::string::size_type size = (uint64_t **)&this->__r_.__value_.__l.__size_;
    do
    {
      uint64_t v9 = (long long *)(v2 + 32);
      uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_size, (void **)v2 + 4, (uint64_t)&std::piecewise_construct, &v9);
      this = std::string::operator=((std::string *)(v5 + 7), (const std::string *)(v2 + 56));
      uint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return this;
}

unint64_t SipParameterMap::uintParameter(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2);
  if ((void **)(a1 + 16) == v5) {
    uint64_t v6 = &ims::kEmptyString;
  }
  else {
    uint64_t v6 = (long long *)(v5 + 7);
  }
  if ((*((char *)v6 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v6 + 23)) {
      return a3;
    }
    return strtoul((const char *)v6, 0, 10);
  }
  if (*((void *)v6 + 1))
  {
    uint64_t v6 = *(long long **)v6;
    return strtoul((const char *)v6, 0, 10);
  }
  return a3;
}

ImsOutStream *SipParameterMap::toStream(SipParameterMap *this, ImsOutStream *a2, int a3, const __CFString *a4, const __CFString *a5, char a6)
{
  long long v7 = (void *)*((void *)this + 1);
  BOOL v8 = (char *)this + 16;
  if (v7 != (void *)((char *)this + 16))
  {
    int v14 = 0;
    do
    {
      if (a3)
      {
        if (v14)
        {
          BOOL v15 = (void *)*((void *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 38;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v40, 1);
          *((unsigned char *)a2 + 17) = 0;
        }
      }
      else
      {
        if (v14 || (a6 & 1) == 0)
        {
          uint64_t v16 = (void *)*((void *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 59;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v40, 1);
          *((unsigned char *)a2 + 17) = 0;
        }
        if (!*((unsigned char *)this + 32))
        {
          LoggableString::LoggableString(&v40, (const std::string *)(v7 + 4));
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v40);
          goto LABEL_16;
        }
      }
      memset(&v40, 0, sizeof(v40));
      if (*((char *)v7 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v7[4], v7[5]);
      }
      else {
        std::string v40 = *(std::string *)(v7 + 4);
      }
      ims::addPercentEscapes((uint64_t)&v40, a4, a5);
      LoggableString::LoggableString(&__p, &v40);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_16:
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (*((char *)v7 + 79) < 0)
      {
        if (v7[8])
        {
LABEL_22:
          char v17 = (void *)*((void *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 61;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v40, 1);
          *((unsigned char *)a2 + 17) = 0;
          memset(&__p, 0, sizeof(__p));
          if (*((char *)v7 + 79) < 0) {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v7[7], v7[8]);
          }
          else {
            std::string __p = *(std::string *)(v7 + 7);
          }
          if (*((unsigned char *)this + 32) || a3) {
            ims::addPercentEscapes((uint64_t)&__p, a4, a5);
          }
          if (!*((unsigned char *)this + 33) || !ImsOutStream::isRedacting(a2)) {
            goto LABEL_80;
          }
          uint64_t v18 = (unsigned __int16 *)(v7 + 4);
          uint64_t v19 = *((unsigned __int8 *)v7 + 55);
          int v20 = (char)v19;
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = v7[5];
          }
          if (v19 <= 7)
          {
            if (v19 == 3)
            {
              if (v20 < 0) {
                uint64_t v18 = *(unsigned __int16 **)v18;
              }
              int v35 = *v18;
              int v29 = *((unsigned __int8 *)v18 + 2);
              BOOL v30 = v35 == 24948;
              int v31 = 103;
            }
            else
            {
              if (v19 != 6) {
                goto LABEL_80;
              }
              if (v20 < 0) {
                uint64_t v18 = *(unsigned __int16 **)v18;
              }
              if (*(_DWORD *)v18 == 1752458605 && v18[2] == 25711) {
                goto LABEL_72;
              }
              if (*(_DWORD *)v18 == 1851880034 && v18[2] == 26723) {
                goto LABEL_90;
              }
              int v28 = *(_DWORD *)v18;
              int v29 = v18[2];
              BOOL v30 = v28 == 1949134708;
              int v31 = 26465;
            }
            if (!v30 || v29 != v31) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v19 != 8)
            {
              if (v19 != 16)
              {
                if (v19 != 18) {
                  goto LABEL_80;
                }
                if (v20 < 0) {
                  uint64_t v18 = *(unsigned __int16 **)v18;
                }
                uint64_t v21 = *(void *)v18;
                uint64_t v22 = *((void *)v18 + 1);
                int v23 = v18[8];
                BOOL v24 = v21 == 0x2E707067332E672BLL && v22 == 0x7974737365636361;
                if (!v24 || v23 != 25968) {
                  goto LABEL_80;
                }
LABEL_72:
                LoggableString::LoggableString(&v40, &__p);
                (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v40);
LABEL_92:
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v40.__r_.__value_.__l.__data_);
                }
LABEL_81:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_83;
              }
              if (v20 < 0) {
                uint64_t v18 = *(unsigned __int16 **)v18;
              }
              uint64_t v33 = *(void *)v18;
              uint64_t v32 = *((void *)v18 + 1);
              if (v33 == 0x2E707067332E672BLL && v32 == 0x6665722D69736369) {
                goto LABEL_72;
              }
LABEL_80:
              (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
              goto LABEL_81;
            }
            if (v20 < 0) {
              uint64_t v18 = *(unsigned __int16 **)v18;
            }
            if (*(void *)v18 != 0x736563616C706552 && *(void *)v18 != 0x6761742D6D6F7266) {
              goto LABEL_80;
            }
          }
LABEL_90:
          ObfuscatedString::ObfuscatedString((uint64_t)&v40, &__p);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 56))(a2, &v40);
          if (v42 < 0) {
            operator delete(v41);
          }
          goto LABEL_92;
        }
      }
      else if (*((unsigned char *)v7 + 79))
      {
        goto LABEL_22;
      }
LABEL_83:
      long long v37 = (char *)v7[1];
      if (v37)
      {
        do
        {
          long long v38 = v37;
          long long v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          long long v38 = (char *)v7[2];
          BOOL v24 = *(void *)v38 == (void)v7;
          long long v7 = v38;
        }
        while (!v24);
      }
      ++v14;
      long long v7 = v38;
    }
    while (v38 != v8);
  }
  return a2;
}

void sub_1C5599B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipParameterMap::fromString(uint64_t a1, std::string *__str, std::string::size_type __pos, int a4)
{
  if (a4) {
    unsigned __int8 v8 = 38;
  }
  else {
    unsigned __int8 v8 = 59;
  }
  uint64_t v9 = (uint64_t **)(a1 + 8);
  memset(&__s, 0, sizeof(__s));
  while (1)
  {
    __pos = ims::nextTokenQ(__str, __pos, &__s, v8);
    size_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (__pos == -1) {
      break;
    }
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      size_t size = __s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__l.__size_)
      {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_11;
      }
    }
    else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
LABEL_11:
      long long v12 = memchr(p_s, 61, size);
      memset(&__p, 0, sizeof(__p));
      memset(&__stra, 0, sizeof(__stra));
      if (!v12 || (std::string::size_type v13 = v12 - (unsigned char *)p_s, v13 == -1))
      {
        std::string::operator=(&__p, &__s);
      }
      else
      {
        std::string::basic_string(&v16, &__s, 0, v13, (std::allocator<char> *)&v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v16;
        std::string::basic_string(&v16, &__s, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__stra.__r_.__value_.__l.__data_);
        }
        std::string __stra = v16;
      }
      ims::chomp(&__p, "\r\n\t ", 3);
      ims::chomp(&__stra, "\r\n\t ", 3);
      if (*(unsigned char *)(a1 + 32) || a4)
      {
        ims::removePercentEscapes((uint64_t)&__p);
        ims::removePercentEscapes((uint64_t)&__stra);
      }
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      int v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v16);
      std::string::operator=((std::string *)(v14 + 7), &__stra);
      if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__stra.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C5599DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *a1, void **a2, void **a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, a2, a3);
  return a1;
}

void sub_1C5599E40(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ImsRandomStringGenerator::randomString(ImsRandomStringGenerator *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      int v6 = std::uniform_int_distribution<unsigned char>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(*((void *)this + 1), *(void *)this, *((unsigned __int8 **)this + 1));
      std::string::push_back(a3, charmap[v6]);
      --v3;
    }
    while (v3);
  }
}

void sub_1C5599EBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ImsRandomStringGenerator::makeBranchParameter(ImsRandomStringGenerator *this@<X0>, std::string *a2@<X8>)
{
  ImsRandomStringGenerator::randomString(this, 15, &v4);
  uint64_t v3 = std::string::insert(&v4, 0, "z9hG4bK", 7uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1C5599F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  v1.__padding_ = 0;
  std::random_device::random_device[abi:ne180100](&v1);
  operator new();
}

void sub_1C559A034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  MEMORY[0x1C878E320](v12, 0x1000C4052888210);
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C559A0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::uniform_int_distribution<unsigned char>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  LODWORD(result) = a3[1];
  int v4 = result - *a3;
  if (v4)
  {
    unsigned int v5 = v4 + 1;
    if (v4 == -1)
    {
      *(void *)&v9[0] = a2;
      *(_OWORD *)((char *)v9 + 8) = xmmword_1C56DA020;
      *(int64x2_t *)((char *)&v9[1] + 8) = vdupq_n_s64(2uLL);
      *(_OWORD *)((char *)&v9[2] + 8) = xmmword_1C56DA030;
      LOBYTE(result) = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)v9);
    }
    else
    {
      uint64_t v7 = __clz(v5);
      uint64_t v8 = 31;
      memset(&v9[1], 0, 40);
      if (((v5 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32;
      }
      v9[0] = 0uLL;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine((uint64_t)v9, a2, v8 - v7);
      do
        LODWORD(result) = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)v9);
      while (result >= v5);
      LOBYTE(result) = *a3 + result;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  LODWORD(v5) = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x20) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = v5;
  }
  *(_DWORD *)(result + 40) = v5;
  if (v5 / v3 < (v5 ^ 0x7FFFFFFE))
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x1F)
    {
      *(_DWORD *)(result + 40) = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      goto LABEL_13;
    }
    *(_DWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 <= 0x1E)
  {
    *(_DWORD *)(result + 44) = (-2 << v4) & 0x7FFFFFFE;
    int v6 = 1;
    goto LABEL_14;
  }
LABEL_13:
  int v6 = 0;
  *(_DWORD *)(result + 44) = 0;
LABEL_14:
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  if (!v6) {
    unsigned int v8 = -1;
  }
  *(_DWORD *)(result + 48) = v7;
  *(_DWORD *)(result + 52) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = 0;
    LODWORD(result) = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      int v12 = result << v5;
      if (v5 >= 0x20) {
        int v12 = 0;
      }
      uint64_t result = ((v6 - 1) & *(_DWORD *)(a1 + 48)) + v12;
      ++v3;
    }
    while (v3 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v13 = *(void *)(a1 + 24);
  if (v2 < v13)
  {
    int v14 = *(unsigned int **)a1;
    unsigned int v15 = *(_DWORD *)(a1 + 44);
    unint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(a1 + 52);
    unsigned int v18 = *v14;
    while (1)
    {
      unsigned int v19 = v18 / 0xADC8;
      unsigned int v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      BOOL v9 = v20 >= v19;
      unsigned int v21 = v20 - v19;
      if (v9) {
        int v22 = 0;
      }
      else {
        int v22 = 0x7FFFFFFF;
      }
      unsigned int v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        int v23 = result << (v16 + 1);
        if (v16 >= 0x1F) {
          int v23 = 0;
        }
        uint64_t result = ((v18 - 1) & v17) + v23;
        if (++v2 == v13) {
          break;
        }
      }
    }
    unsigned int *v14 = v18;
  }
  return result;
}

void SipAuthClient::SipAuthClient(SipAuthClient *this, SipUserAgent *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.auth");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20DEAB8;
  *((void *)this + 15) = (char *)this + 120;
  *((void *)this + 16) = (char *)this + 120;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 14) = a2;
  operator new();
}

void sub_1C559A4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;
  MEMORY[0x1C878E320](v18, 0x10F3C405BF2102ELL);
  unsigned int v20 = *(std::__shared_weak_count **)(v15 + 168);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unsigned int v21 = *(std::__shared_weak_count **)(v15 + 152);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v16);
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void SipAuthClient::~SipAuthClient(SipAuthClient *this)
{
  *(void *)this = &unk_1F20DEAB8;
  SipAuthClient::clear(this);
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 15);
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  SipAuthClient::~SipAuthClient(this);
  JUMPOUT(0x1C878E320);
}

void SipAuthClient::clear(SipAuthClient *this)
{
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    unint64_t v16 = (uint64_t *)&v16;
    uint64_t v17 = (uint64_t *)&v16;
    uint64_t v18 = 0;
    uint64_t v3 = (char *)*((void *)this + 16);
    if (v3 != (char *)this + 120)
    {
      uint64_t v4 = 0;
      unint64_t v5 = (uint64_t *)&v16;
      do
      {
        uint64_t v7 = *((void *)v3 + 2);
        uint64_t v6 = *((void *)v3 + 3);
        unsigned int v8 = (uint64_t *)operator new(0x20uLL);
        uint64_t v8[2] = v7;
        v8[3] = v6;
        if (v6)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
          uint64_t v4 = v18;
        }
        *unsigned int v8 = (uint64_t)v5;
        v8[1] = (uint64_t)&v16;
        v5[1] = (uint64_t)v8;
        ++v4;
        unint64_t v16 = v8;
        uint64_t v18 = v4;
        uint64_t v3 = (char *)*((void *)v3 + 1);
        unint64_t v5 = v8;
      }
      while (v3 != v2);
    }
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 15);
    BOOL v9 = *(uint64_t (**)(SipAuthClient *))(*(void *)this + 64);
    if (v18 == 1)
    {
      uint64_t v10 = v9(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"clearing 1 item from auth queue", 31);
      *(unsigned char *)(v10 + 17) = 0;
      int v11 = (unsigned char *)(v10 + 17);
    }
    else
    {
      uint64_t v10 = v9(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"clearing ", 9);
      *(unsigned char *)(v10 + 17) = 0;
      int v11 = (unsigned char *)(v10 + 17);
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" items from auth queue", 22);
      *(unsigned char *)(v10 + 17) = 0;
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    unsigned char *v11 = 0;
    for (uint64_t i = v17; i != (uint64_t *)&v16; uint64_t i = (uint64_t *)i[1])
      (*(void (**)(void))(**(void **)(i[2] + 40) + 24))(*(void *)(i[2] + 40));
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)&v16);
  }
  uint64_t v13 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 64))(this);
  (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"clearing current auth info", 26);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  int v14 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C559A938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SipAuthClient::initialize(SipAuthClient *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 13) + 24))(*((void *)this + 13));
  uint64_t v3 = SipUserAgent::config(*((SipUserAgent **)this + 14)) + 1344;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 112);
  return v4(v2, v3);
}

void SipAuthClient::setAuthResponse(SipAuthClient *this, const SipAuthResponse *a2)
{
  if (!*((void *)this + 17))
  {
    uint64_t v12 = (*(uint64_t (**)(SipAuthClient *, const SipAuthResponse *))(*(void *)this + 48))(this, a2);
    (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"received an auth response without a pending challenge.  Discarding.", 67);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    return;
  }
  uint64_t v4 = (char *)this + 120;
  uint64_t v5 = *((void *)this + 16);
  uint64_t v7 = *(SipAuthInfo **)(v5 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 24);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::list<std::shared_ptr<SipAuthInfo>>::pop_front((uint64_t)v4);
  if (!*((unsigned char *)v7 + 208))
  {
    unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  if (v8) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_7:
  uint64_t v9 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 64))(this);
  (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v9);
  if ((*(unsigned int (**)(const SipAuthResponse *))(*(void *)a2 + 64))(a2))
  {
    if (*((unsigned char *)v7 + 208))
    {
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 21);
      *((void *)this + 20) = v7;
      *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v6;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"updated stored proxy auth response:", 35);
      *(unsigned char *)(v9 + 17) = 0;
      int v11 = (unsigned char *)(v9 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 19);
      *((void *)this + 18) = v7;
      *((void *)this + 19) = v6;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"updated stored auth response:", 29);
      *(unsigned char *)(v9 + 17) = 0;
      int v11 = (unsigned char *)(v9 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"not caching failed auth response:", 33);
    *(unsigned char *)(v9 + 17) = 0;
    int v11 = (unsigned char *)(v9 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  unsigned char *v11 = 0;
  uint64_t v14 = (*(uint64_t (**)(const SipAuthResponse *))(*(void *)a2 + 32))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 56))(v14, v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  SipAuthInfo::setResponse(v7, a2);
  if (*((void *)this + 17)) {
    SipAuthInfo::sendChallengeToDelegate(*(int8x8_t **)(*((void *)this + 16) + 16));
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C559ADFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::list<std::shared_ptr<SipAuthInfo>>::pop_front(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v2[1];
  *(void *)v2[1] = v3;
  *(void *)(a1 + 16) = v1 - 1;
  uint64_t v4 = (std::__shared_weak_count *)v2[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(v2);
}

void SipAuthClient::addAuthorizationToRequest(SipAuthClient *this@<X0>, SipRequest *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 14);
  uint64_t v10 = *(void *)(v8 + 248);
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 256);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    int v11 = *(unsigned __int8 *)(v10 + 2656);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (v11) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(v10 + 2656))
  {
LABEL_3:
    SipMessage::removeHeadersWithName(a2, "Authorization");
    operator new();
  }
  uint64_t v12 = (SipAuthInfo *)*((void *)this + 18);
  if (v12)
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    SipAuthInfo::addAuthorizationToRequest(v12, a2, a4);
    if ((*(unsigned int (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)))
    {
      uint64_t v13 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 56))(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unable to add auth info to ", 27);
      *(unsigned char *)(v13 + 17) = 0;
      uint64_t v14 = (*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" request: ", 10);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v13);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_26:
      *(unsigned char *)(v13 + 17) = 0;
      return;
    }
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  else if ((a3 & 1) == 0)
  {
    SipMessage::removeHeadersWithName(a2, "Authorization");
    uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 13) + 16))(*((void *)this + 13));
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
    SipUri::asString((uint64_t)a2 + 112, v16 + 56);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
    uint64_t v18 = *((void *)this + 14);
    uint64_t v20 = *(void *)(v18 + 248);
    unsigned int v19 = *(std::__shared_weak_count **)(v18 + 256);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"username";
    unsigned int v21 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17 + 8, "username", (uint64_t)&std::piecewise_construct, (long long **)&__str);
    std::string::operator=((std::string *)(v21 + 40), (const std::string *)(v20 + 2048));
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
    uint64_t v23 = *((void *)this + 14);
    BOOL v24 = *(SipRegistrationClient **)(v23 + 248);
    int v25 = *(std::__shared_weak_count **)(v23 + 256);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipRegistrationClient::registrationDomain(v24, &__str);
    uint64_t v32 = "realm";
    uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22 + 8, "realm", (uint64_t)&std::piecewise_construct, (long long **)&v32);
    std::string::operator=((std::string *)(v26 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v32 = "response";
    int v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27 + 8, "response", (uint64_t)&std::piecewise_construct, (long long **)&v32);
    std::string::operator=((std::string *)(v28 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  int v29 = (SipAuthInfo *)*((void *)this + 20);
  if (v29)
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    SipAuthInfo::addAuthorizationToRequest(v29, a2, a4);
    if ((*(unsigned int (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)))
    {
      uint64_t v13 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 56))(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unable to add proxy auth info to ", 33);
      *(unsigned char *)(v13 + 17) = 0;
      uint64_t v30 = (*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" request: ", 10);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v13);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_26;
    }
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
}

void sub_1C559B6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C878E320](v15, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t SipAuthClient::handleUnauthorizedResponse(SipAuthClient *this, const SipResponse *a2, SipAuthChallengeSource *a3)
{
  uint64_t v6 = (void *)((char *)a2 + 32);
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "WWW-Authenticate");
  if (v7 {
    && (uint64_t v8 = (const void *)*((void *)v7 + 5)) != 0
  }
  {
    uint64_t v10 = v9;
    int v11 = 0;
  }
  else
  {
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v6, "Proxy-Authenticate");
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v13 = (const void *)*((void *)v12 + 5);
    if (!v13) {
      goto LABEL_14;
    }
    if (!v14) {
      goto LABEL_14;
    }
    uint64_t v10 = v14;
    int v11 = 1;
  }
  uint64_t v15 = v10[8];
  if (!v15 || ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15) & 1) == 0)
  {
LABEL_14:
    uint64_t v17 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 48))(this);
    (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v17);
    std::ostream::operator<<();
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" response didn't contain a valid Authenticate header", 52);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t result = 0;
    *(unsigned char *)(v17 + 17) = 0;
    return result;
  }
  if (!v11)
  {
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (!v16) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  if (v16) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_17:
  unsigned int v19 = (SipAuthenticateHeader *)(*(uint64_t (**)(void *))(*v10 + 32))(v10);
  uint64_t v20 = *((void *)v19 + 8);
  uint64_t v21 = *((void *)this + 14);
  uint64_t v22 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v21 + 16));
  if (*(unsigned char *)(*(void *)(v21 + 8) + 176)) {
    uint64_t v23 = "emergency";
  }
  else {
    uint64_t v23 = "sip";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v23);
  std::string::operator=((std::string *)(v20 + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  BOOL v24 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v24) {
    int v25 = (const std::string *)(v24 + 64);
  }
  else {
    int v25 = (const std::string *)&ims::kEmptyString;
  }
  std::string::operator=((std::string *)(v20 + 32), v25);
  uint64_t v26 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v26) {
    int v27 = v26[15];
  }
  else {
    int v27 = 0;
  }
  *(_DWORD *)(v20 + 56) = v27;
  uint64_t v28 = (*(uint64_t (**)(SipAuthClient *))(*(void *)this + 64))(this);
  (*(void (**)(SipAuthClient *, uint64_t))(*(void *)this + 16))(this, v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"new auth challenge: ", 20);
  *(unsigned char *)(v28 + 17) = 0;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 32))(v20);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v29 + 48))(v29, v28, 0);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
  uint64_t v31 = *((void *)this + 14);
  uint64_t v33 = *(void *)(v31 + 248);
  uint64_t v32 = *(std::__shared_weak_count **)(v31 + 256);
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"username";
  char v34 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30 + 8, "username", (uint64_t)&std::piecewise_construct, (long long **)&__p);
  std::string::operator=((std::string *)(v34 + 40), (const std::string *)(v33 + 2048));
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  int v35 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
  if (v35)
  {
    if (v36)
    {
      long long v37 = v36;
      uint64_t v38 = SipUserAgent::config(*((SipUserAgent **)this + 14));
      if (v37 + 160 != (char *)(v38 + 1368)) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v37 + 160), *(std::string **)(v38 + 1368), *(long long **)(v38 + 1376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v38 + 1376) - *(void *)(v38 + 1368)) >> 3));
      }
    }
  }
  long long v39 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DEB30;
  std::string v40 = v39 + 1;
  SipAuthInfo::SipAuthInfo((SipAuthInfo *)&v39[1], this, v19, a3);
  shared_weak_owners = (std::__shared_weak_count *)v39[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v39[1].__shared_owners_ = (uint64_t)v40;
    v39[1].__shared_weak_owners_ = (uint64_t)v39;
    goto LABEL_40;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v39[1].__shared_owners_ = (uint64_t)v40;
    v39[1].__shared_weak_owners_ = (uint64_t)v39;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_40:
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  char v42 = operator new(0x20uLL);
  v42[2] = v40;
  v42[3] = v39;
  atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v43 = *((void *)this + 15);
  *char v42 = v43;
  v42[1] = (char *)this + 120;
  *(void *)(v43 + 8) = v42;
  *((void *)this + 15) = v42;
  uint64_t v44 = *((void *)this + 17);
  *((void *)this + 17) = v44 + 1;
  if (!v44) {
    SipAuthInfo::sendChallengeToDelegate(*(int8x8_t **)(*((void *)this + 16) + 16));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  return 1;
}

void sub_1C559BE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void *SipAuthClient::logPrefix(SipAuthClient *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 14);
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v3 + 8);
  if (!v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_8;
  }
  int v7 = *(unsigned __int8 *)(v6 + 176);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (!v7)
  {
LABEL_8:
    uint64_t v8 = (void *)*((void *)a2 + 1);
    uint64_t v9 = "AuthClient: ";
    uint64_t v10 = 12;
    goto LABEL_9;
  }
  uint64_t v8 = (void *)*((void *)a2 + 1);
  uint64_t v9 = "AuthClient(EMERGENCY): ";
  uint64_t v10 = 23;
LABEL_9:
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t SipAuthClient::handleAuthChallengeTimeout(void *a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handling auth challenge timeout for AuthInfo ", 45);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (a1[17] && *a2 == *(void *)(a1[16] + 16))
  {
    std::list<std::shared_ptr<SipAuthInfo>>::pop_front((uint64_t)(a1 + 15));
    uint64_t result = *(void *)(*a2 + 40);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    }
    if (a1[17])
    {
      int v7 = *(SipAuthInfo **)(a1[16] + 16);
      return SipAuthInfo::sendChallengeToDelegate(v7);
    }
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleAuthChallengeTimeout: info is not the top of our queue. Ignoring.", 71);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  return result;
}

void std::__shared_ptr_emplace<SipAuthInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DEB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAuthInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DEB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipAuthInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ImsSleepWakeMonitor::_powerChanged(ImsSleepWakeMonitor *this, void *a2, int a3, intptr_t a4, void *a5)
{
  if (this)
  {
    HIDWORD(v5) = a3;
    LODWORD(v5) = a3 + 536870288;
    switch((v5 >> 4))
    {
      case 0u:
        std::string::basic_string[abi:ne180100]<0>(v18, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v8 = ims::debug((uint64_t)v18, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"system can sleep", 16);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        goto LABEL_17;
      case 1u:
        std::string::basic_string[abi:ne180100]<0>(v18, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v10 = ims::debug((uint64_t)v18, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"system will sleep", 17);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        uint64_t v11 = *((void *)this + 3);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        }
LABEL_17:
        IOAllowPowerChange(*((_DWORD *)this + 4), a4);
        break;
      case 2u:
        std::string::basic_string[abi:ne180100]<0>(v18, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v12 = ims::debug((uint64_t)v18, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"system will not sleep", 21);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        uint64_t v13 = *((void *)this + 3);
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
        }
        break;
      case 9u:
        std::string::basic_string[abi:ne180100]<0>(v18, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v14 = ims::debug((uint64_t)v18, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"system has powered on", 21);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        uint64_t v15 = *((void *)this + 3);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
        }
        break;
      default:
        return;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "power");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"context parameter is NULL", 25);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
}

void sub_1C559C638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsSleepWakeMonitor::stop(io_object_t *notifier)
{
  if (*notifier)
  {
    IODeregisterForSystemPower(notifier);
    *notifier = 0;
  }
  io_connect_t v2 = notifier[4];
  if (v2)
  {
    IOServiceClose(v2);
    notifier[4] = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "power");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SleepWakeMonitor stopped", 24);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1C559C7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsSleepWakeMonitor::start(IONotificationPortRef *notifier)
{
  if (!*(_DWORD *)notifier)
  {
    io_connect_t v2 = notifier + 1;
    io_connect_t v3 = IORegisterForSystemPower(notifier, notifier + 1, (IOServiceInterestCallback)ImsSleepWakeMonitor::_powerChanged, (io_object_t *)notifier);
    *((_DWORD *)notifier + 4) = v3;
    if (v3)
    {
      uint64_t v4 = *v2;
      char v5 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        char v5 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v5;
      }
      IONotificationPortSetDispatchQueue(v4, v5);
      std::string::basic_string[abi:ne180100]<0>(v9, "power");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SleepWakeMonitor started", 24);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "power");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::error((uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"unable to monitor sleep/wake", 28);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C559C984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipParameterHeader::SipParameterHeader(SipParameterHeader *this, const SipParameterHeader *a2)
{
  SipHeader::SipHeader(this, a2);
  *uint64_t v4 = &unk_1F20DEB80;
  v4[8] = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v4 + 9, *((void ***)a2 + 9), (void **)a2 + 10);
  *((unsigned char *)this + 97) = 1;
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
}

void sub_1C559CA54(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

std::string::size_type SipParameterHeader::findParameterMarker(int a1, std::string *this)
{
  return std::string::find(this, 59, 0);
}

uint64_t SipParameterHeader::valueAndParamsAsString(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v1)
  {
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v3);
  }
  return v1;
}

void sub_1C559CBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

ImsOutStream *SipParameterHeader::encode(SipParameterHeader *this, ImsOutStream *a2, int a3)
{
  SipHeader::encode(this, a2, a3);
  return SipParameterMap::toStream((SipParameterHeader *)((char *)this + 64), a2, 0, 0, 0, 0);
}

uint64_t SipParameterHeader::decode(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  memset(&__p, 0, sizeof(__p));
  memset(&__str, 0, sizeof(__str));
  if (v4 == -1)
  {
    std::string::operator=(&__p, a2);
  }
  else
  {
    std::string::size_type v5 = v4;
    std::string::basic_string(&v9, a2, 0, v4, (std::allocator<char> *)&v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v9;
    std::string::basic_string(&v9, a2, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    std::string __str = v9;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 56))(a1, &__p);
  if (v6)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      SipParameterMap::fromString(a1 + 64, &__str, 0, 0);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C559CD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPSession::SDPSession(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)a4 + 128))();
  if (*(char *)(v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)v13, *(void *)(v13 + 8));
  }
  else
  {
    long long v14 = *(_OWORD *)v13;
    *(void *)(a1 + 112) = *(void *)(v13 + 16);
    *(_OWORD *)(a1 + 96) = v14;
  }
  *(void *)(a1 + 120) = *a6;
  uint64_t v15 = a6[1];
  *(void *)(a1 + 128) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  BOOL v16 = (*(unsigned int (**)(void))(**(void **)a4 + 136))() == 2;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 14bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
  *(_DWORD *)(a1 + 142) = 187105280;
  *(unsigned char *)(a1 + 146) = 1;
  *(unsigned char *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  *(unsigned char *)(a1 + 1328) = 0;
  *(_WORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(void *)(a1 + 1336) = &unk_1F20DEC20;
  *(void *)(a1 + 1368) = 3;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(unsigned char *)(a1 + 1400) = 1;
  *(void *)(a1 + 1376) = &unk_1F20BBCD8;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(unsigned char *)(a1 + 1432) = 1;
  *(void *)(a1 + 1408) = &unk_1F20DEC60;
  *(void *)(a1 + 1440) = &unk_1F20CE0A0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(unsigned char *)(a1 + 1488) = 1;
  *(void *)(a1 + 1464) = &unk_1F20B41F8;
  *(unsigned char *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 1856) = 0;
  *(void *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(void *)(a1 + 1888) = *a7;
  uint64_t v17 = a7[1];
  *(void *)(a1 + 1896) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 1904) = a1 + 1912;
  *(void *)(a1 + 1928) = *a2;
  uint64_t v18 = a2[1];
  *(void *)(a1 + 1936) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1944) = 0uLL;
  *(_OWORD *)(a1 + 1960) = 0uLL;
  IpAddress::asString();
}

void sub_1C559DA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v62 - 256, *(void **)(v62 - 248));
  a23 = (void **)(v62 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  uint64_t v64 = *(std::__shared_weak_count **)(v62 - 120);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  char v65 = *(std::__shared_weak_count **)(v62 - 96);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  if (*(char *)(v57 + 1983) < 0) {
    operator delete(*(void **)(v57 + 1960));
  }
  uint64_t v66 = *(std::__shared_weak_count **)(v57 + 1952);
  if (v66) {
    std::__shared_weak_count::__release_weak(v66);
  }
  long long v67 = *(std::__shared_weak_count **)(v57 + 1936);
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(v57 + 1912));
  long long v68 = *(std::__shared_weak_count **)(v57 + 1896);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  a23 = v60 + 214;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (*(unsigned char *)(v57 + 1856)) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(v60 + 168));
  }
  *(void *)(v57 + 1464) = &unk_1F20B4230;
  uint64_t v69 = *(std::__shared_weak_count **)(v57 + 1480);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  *(void *)(v57 + 1440) = a14;
  int v70 = *(std::__shared_weak_count **)(v57 + 1456);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  *(void *)(v57 + 1408) = &unk_1F20B4230;
  std::string v71 = *(std::__shared_weak_count **)(v57 + 1424);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  *(void *)(v57 + 1376) = &unk_1F20B4230;
  char v72 = *(std::__shared_weak_count **)(v57 + 1392);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  *(void *)(v57 + 1336) = &unk_1F20D5210;
  char v73 = *(std::__shared_weak_count **)(v57 + 1352);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (*(unsigned char *)(v57 + 1328)) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(v60 + 110));
  }
  if (*(unsigned char *)(v57 + 1024)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v60 + 55);
  }
  if (*(unsigned char *)(v57 + 584)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v60);
  }
  char v74 = *(std::__shared_weak_count **)(v57 + 128);
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  if (*(char *)(v57 + 119) < 0) {
    operator delete(*a18);
  }
  if (*(char *)(v57 + 95) < 0) {
    operator delete(*v59);
  }
  if (*(char *)(v57 + 71) < 0) {
    operator delete(*a10);
  }
  uint64_t v75 = *(std::__shared_weak_count **)(v57 + 40);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  char v76 = *(std::__shared_weak_count **)(v57 + 24);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  std::string v77 = *(std::__shared_weak_count **)(v57 + 8);
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  _Unwind_Resume(a1);
}

void SDPTTYSettingsBuilder::~SDPTTYSettingsBuilder(SDPTTYSettingsBuilder *this)
{
  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B4230;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void SDPSession::setTextMediaSessionMode(uint64_t a1, int a2)
{
  io_connect_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      char v7 = *(SipStack **)(a1 + 120);
      if (v7 && *(_DWORD *)(a1 + 136) != a2)
      {
        *(_DWORD *)(a1 + 136) = a2;
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v10 = *(void *)(v8 + 416);
        uint64_t v9 = *(void *)(v8 + 424);
        while (v10 != v9)
        {
          if (*(_DWORD *)(v10 + 12) == 4) {
            goto LABEL_10;
          }
          v10 += 200;
        }
        uint64_t v10 = 0;
LABEL_10:
        if (!a2)
        {
          if (*(unsigned char *)(a1 + 1328)) {
            *(_WORD *)(a1 + 1056) = 0;
          }
          if (v10)
          {
            SDPMedia::setPort((SDPMedia *)v10, 0);
            uint64_t v11 = (ImsPrefs *)SipStack::prefs(v7);
            AlwaysPrintSDPFormatInfoKey = (void **)ImsPrefs::getAlwaysPrintSDPFormatInfoKey(v11);
            if (ImsPrefs::BOOLValue(v11, AlwaysPrintSDPFormatInfoKey)) {
              *(unsigned char *)(v10 + 184) = 1;
            }
          }
          goto LABEL_46;
        }
        SDPSession::addMediaStreamForType((void *)a1, 4);
        if (v10)
        {
          if (*(_WORD *)(a1 + 142))
          {
            SDPMedia::setPort((SDPMedia *)v10, *(unsigned __int16 *)(a1 + 142));
            if (*(unsigned char *)(a1 + 1328)) {
              *(_WORD *)(a1 + 1056) = *(_WORD *)(a1 + 142);
            }
          }
        }
        else
        {
          long long v14 = *(void **)(a1 + 16);
          uint64_t v13 = *(std::__shared_weak_count **)(a1 + 24);
          uint64_t v31 = v14;
          uint64_t v32 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = *(unsigned __int8 *)(a1 + 119);
          int v16 = (char)v15;
          if ((v15 & 0x80u) != 0) {
            uint64_t v15 = *(void *)(a1 + 104);
          }
          if (v15 == 3)
          {
            uint64_t v17 = v16 >= 0 ? (unsigned __int16 *)(a1 + 96) : *(unsigned __int16 **)(a1 + 96);
            int v18 = *v17;
            int v19 = *((unsigned __int8 *)v17 + 2);
            BOOL v20 = v18 == 20553 && v19 == 54;
            unsigned __int8 v21 = v20;
          }
          else
          {
            unsigned __int8 v21 = 0;
          }
          uint64_t v22 = (ImsPrefs *)SipStack::prefs(v7);
          SDPTemplateBuilder::createSDPTextMedia(&v31, v21, 0, v22, (uint64_t)v29);
          unint64_t v23 = v14[53];
          if (v23 >= v14[54])
          {
            uint64_t v24 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>(v14 + 52, (const SDPMedia *)v29);
          }
          else
          {
            SDPMedia::SDPMedia((SDPMedia *)v14[53], (const SDPMedia *)v29);
            uint64_t v24 = v23 + 200;
            v14[53] = v23 + 200;
          }
          v14[53] = v24;
          SDPMedia::~SDPMedia((SDPMedia *)v29);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
        if (!*(unsigned char *)(a1 + 1328))
        {
          int v25 = (SDPTemplateBuilder *)SipStack::prefs(v7);
          SDPTemplateBuilder::createInitialTTYSettings(v25, (uint64_t)v29);
          std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>((SDPMediaSettings *)(a1 + 1032), (SDPMediaSettings *)v29);
          SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v29);
          uint64_t v26 = (ImsPrefs *)SipStack::prefs(v7);
          SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v26);
          ImsPrefs::stringValue(v26, SRTPCryptoSuiteKey);
          if ((v30 & 0x80000000) == 0)
          {
            if (!v30) {
              goto LABEL_46;
            }
            goto LABEL_45;
          }
          uint64_t v28 = v29[1];
          operator delete(v29[0]);
          if (v28) {
LABEL_45:
          }
            SDPSession::generate_key_and_salt(a1, 4);
        }
      }
LABEL_46:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C559E0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SDPMedia::~SDPMedia((SDPMedia *)va);
  std::string::size_type v5 = *(std::__shared_weak_count **)(v3 - 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SDPTTYBuilder::~SDPTTYBuilder(SDPTTYBuilder *this)
{
  *(void *)this = &unk_1F20D5210;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D5210;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void SDPSession::generate_key_and_salt(uint64_t a1, int a2)
{
  v9.__padding_ = 0;
  std::random_device::random_device[abi:ne180100](&v9);
  std::string __p = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  std::vector<unsigned char>::vector(&__p, 0x1EuLL);
  for (uint64_t i = 0; i != 30; ++i)
  {
    char v5 = MEMORY[0x1C878E120](&v9);
    *((unsigned char *)__p + i) = v5;
  }
  SDPModel::setMasterKeyAndSalt(*(void **)(a1 + 16), a2, (char **)&__p);
  if (__p)
  {
    char v7 = __p;
    operator delete(__p);
  }
  std::random_device::~random_device(&v9);
}

void sub_1C559E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, std::random_device a13, std::random_device a14)
{
  if (__p) {
    operator delete(__p);
  }
  std::random_device::~random_device(&a13);
  _Unwind_Resume(a1);
}

void SDPSession::SDPSession(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v10;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a4 + 128))();
  if (*(char *)(v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)v11, *(void *)(v11 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    *(void *)(a1 + 112) = *(void *)(v11 + 16);
    *(_OWORD *)(a1 + 96) = v12;
  }
  *(void *)(a1 + 120) = *a6;
  uint64_t v13 = a6[1];
  *(void *)(a1 + 128) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  BOOL v14 = (*(unsigned int (**)(void))(**(void **)a4 + 136))() == 2;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 14bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v14;
  *(_DWORD *)(a1 + 142) = 187105280;
  *(unsigned char *)(a1 + 146) = 1;
  *(unsigned char *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  *(unsigned char *)(a1 + 1328) = 0;
  *(_WORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(void *)(a1 + 1336) = &unk_1F20DEC20;
  *(void *)(a1 + 1368) = 3;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(unsigned char *)(a1 + 1400) = 1;
  *(void *)(a1 + 1376) = &unk_1F20BBCD8;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(unsigned char *)(a1 + 1432) = 1;
  *(void *)(a1 + 1408) = &unk_1F20DEC60;
  *(void *)(a1 + 1440) = &unk_1F20CE0A0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(unsigned char *)(a1 + 1488) = 1;
  *(void *)(a1 + 1464) = &unk_1F20B41F8;
  *(unsigned char *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1904) = a1 + 1912;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(void *)(a1 + 1944) = *a2;
  uint64_t v15 = a2[1];
  *(void *)(a1 + 1952) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0uLL;
  IpAddress::asString();
}

void sub_1C559EAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void **a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v43 - 89) < 0) {
    operator delete(*(void **)(v43 - 112));
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 136);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::string v46 = *(std::__shared_weak_count **)(v43 - 120);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  if (*(char *)(v36 + 1983) < 0) {
    operator delete(*v41);
  }
  std::string v47 = *(std::__shared_weak_count **)(v36 + 1952);
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  std::string v48 = *(std::__shared_weak_count **)(v36 + 1936);
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(v36 + 1912));
  std::vector<std::string> v49 = *(std::__shared_weak_count **)(v36 + 1896);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  a28 = v40 + 214;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&a28);
  if (*(unsigned char *)(v36 + 1856)) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(v40 + 168));
  }
  *(void *)(v36 + 1464) = &unk_1F20B4230;
  uint64_t v50 = *(std::__shared_weak_count **)(v36 + 1480);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  *(void *)(v36 + 1440) = a12;
  char v51 = *(std::__shared_weak_count **)(v36 + 1456);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  *(void *)(v36 + 1408) = &unk_1F20B4230;
  uint64_t v52 = *(std::__shared_weak_count **)(v36 + 1424);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  *(void *)(v36 + 1376) = &unk_1F20B4230;
  uint64_t v53 = *(std::__shared_weak_count **)(v36 + 1392);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  *(void *)(v36 + 1336) = &unk_1F20D5210;
  uint64_t v54 = *(std::__shared_weak_count **)(v36 + 1352);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (*(unsigned char *)(v36 + 1328)) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(v40 + 110));
  }
  if (*(unsigned char *)(v36 + 1024)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v40 + 55);
  }
  if (*(unsigned char *)(v36 + 584)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v40);
  }
  uint64_t v55 = *(std::__shared_weak_count **)(v36 + 128);
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (*(char *)(v36 + 119) < 0) {
    operator delete(*v39);
  }
  if (*(char *)(v36 + 95) < 0) {
    operator delete(*v38);
  }
  if (*(char *)(v36 + 71) < 0) {
    operator delete(*v37);
  }
  int v56 = *(std::__shared_weak_count **)(v36 + 40);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v57 = *(std::__shared_weak_count **)(v36 + 24);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  uint64_t v58 = *(std::__shared_weak_count **)(v36 + 8);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

void SDPSession::~SDPSession(SDPSession *this)
{
  io_connect_t v2 = (void *)*((void *)this + 238);
  uint64_t v3 = (_OWORD *)((char *)this + 1912);
  if (v2 != (void *)((char *)this + 1912))
  {
    do
    {
      uint64_t v4 = v2[5];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      char v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          char v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          io_connect_t v2 = v6;
        }
        while (!v7);
      }
      io_connect_t v2 = v6;
    }
    while (v6 != (void *)v3);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 239));
  *((void *)this + 238) = v3;
  _OWORD *v3 = 0u;
  if (*((char *)this + 1983) < 0) {
    operator delete(*((void **)this + 245));
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 244);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::random_device v9 = (std::__shared_weak_count *)*((void *)this + 242);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 239));
  long long v10 = (std::__shared_weak_count *)*((void *)this + 237);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  BOOL v20 = (void **)((char *)this + 1864);
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (*((unsigned char *)this + 1856)) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPSession *)((char *)this + 1496));
  }
  *((void *)this + 183) = &unk_1F20B4230;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 185);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *((void *)this + 180) = &unk_1F20CE0A0;
  long long v12 = (std::__shared_weak_count *)*((void *)this + 182);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *((void *)this + 176) = &unk_1F20B4230;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 178);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *((void *)this + 172) = &unk_1F20B4230;
  BOOL v14 = (std::__shared_weak_count *)*((void *)this + 174);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *((void *)this + 167) = &unk_1F20D5210;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 169);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((unsigned char *)this + 1328)) {
    SDPMediaSettings::~SDPMediaSettings((SDPSession *)((char *)this + 1032));
  }
  if (*((unsigned char *)this + 1024)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)this + 74);
  }
  if (*((unsigned char *)this + 584)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)this + 19);
  }
  int v16 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  int v18 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  int v19 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

uint64_t SDPSession::hasStream(SDPSession *this)
{
  uint64_t v1 = (SDPSession *)*((void *)this + 238);
  if (v1 == (SDPSession *)((char *)this + 1912)) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = *((void *)v1 + 5);
    if (v2)
    {
      if (*(void *)(v2 + 32)) {
        break;
      }
    }
    uint64_t v3 = (SDPSession *)*((void *)v1 + 1);
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = *(SDPSession **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (SDPSession *)*((void *)v1 + 2);
        BOOL v5 = *(void *)v4 == (void)v1;
        uint64_t v1 = v4;
      }
      while (!v5);
    }
    uint64_t v1 = v4;
    if (v4 == (SDPSession *)((char *)this + 1912)) {
      return 0;
    }
  }
  return 1;
}

uint64_t SDPSession::streamsValidForManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 1904);
  uint64_t v3 = (void *)(a1 + 1912);
  if (v2 == (void *)(a1 + 1912)) {
    return 1;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)a2 + 168) + 40))(*(void *)(*(void *)a2 + 168), *(void *)(v2[5] + 32));
    if (!result) {
      break;
    }
    uint64_t v6 = (void *)v2[1];
    if (v6)
    {
      do
      {
        BOOL v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        BOOL v7 = (void *)v2[2];
        BOOL v8 = *v7 == (void)v2;
        uint64_t v2 = v7;
      }
      while (!v8);
    }
    uint64_t v2 = v7;
  }
  while (v7 != v3);
  return result;
}

uint64_t SDPSession::initializeCarrierTemplateSDP(uint64_t a1)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(SipStack **)a1;
  if (v2)
  {
    uint64_t v3 = (ImsPrefs *)SipStack::prefs(v2);
    __int16 v224 = 0;
    char v223 = 1;
    uint64_t v4 = *(void *)(a1 + 8);
    v222[0] = *(SipStack **)a1;
    v222[1] = (SipStack *)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v5 = (ImsPrefs *)SDPParserSettings::initializeFromStack(&v224, v222);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
    }
    SDPTemplateKey = (void **)ImsPrefs::getSDPTemplateKey(v5);
    BOOL v7 = (ImsPrefs *)ImsPrefs::stringValue(v3, SDPTemplateKey);
    if ((__p[23] & 0x80000000) != 0)
    {
      uint64_t v19 = *(void *)&__p[8];
      operator delete(*(void **)__p);
      if (v19)
      {
LABEL_8:
        BOOL v8 = (void **)ImsPrefs::getSDPTemplateKey(v7);
        ImsPrefs::stringValue(v3, v8);
        SDPParser::parse((BOOL *)&v223, (const std::string *)__p, &v224, &v249);
        long long v10 = v249;
        std::random_device v9 = v250;
        v249 = 0;
        v250 = 0;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v11 = (ImsPrefs *)(*(uint64_t (**)(void *))(*v10 + 24))(v10);
        if (v11)
        {
          uint64_t v13 = v10[52];
          uint64_t v12 = v10[53];
          if (v13 != v12)
          {
            uint64_t v14 = v13 + 136;
            while (*(_DWORD *)(v14 - 124) != 2)
            {
              uint64_t v15 = v14 + 64;
              v14 += 200;
              if (v15 == v12) {
                goto LABEL_15;
              }
            }
            PacketizationTimeKey = (void **)ImsPrefs::getPacketizationTimeKey(v11);
            __int16 v24 = ImsPrefs::intValue(v3, PacketizationTimeKey);
            uint64_t v25 = v14 - 136;
            SDPMedia::setPacketizationTime((SDPMedia *)(v14 - 136), v24);
            MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v26);
            __int16 v28 = ImsPrefs::intValue(v3, MaxPacketizationTimeKey);
            SDPMedia::setMaxPacketizationTime((SDPMedia *)(v14 - 136), v28);
            for (uint64_t i = *(void *)(v14 + 8); v14 != i; uint64_t i = *(void *)(i + 8))
            {
              if (*(_DWORD *)(i + 136) == 4) {
                goto LABEL_34;
              }
            }
            SDPMedia::setDirection(v14 - 136, 1);
LABEL_34:
            SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v29);
            uint64_t v32 = (ImsPrefs *)ImsPrefs::stringValue(v3, SRTPCryptoSuiteKey);
            if ((__p[23] & 0x80000000) == 0)
            {
              if (!__p[23]) {
                goto LABEL_159;
              }
              goto LABEL_45;
            }
            uint64_t v42 = *(void *)&__p[8];
            operator delete(*(void **)__p);
            if (v42)
            {
LABEL_45:
              uint64_t v43 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v32);
              uint64_t v44 = (ImsPrefs *)ImsPrefs::stringValue(v3, v43);
              SRTPUnencryptedSRTPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v44);
              std::string v46 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SRTPUnencryptedSRTPKey);
              char v47 = (char)v46;
              SRTPUnencryptedSRTCPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v46);
              std::vector<std::string> v49 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SRTPUnencryptedSRTCPKey);
              char v50 = (char)v49;
              SRTPUnauthenticatedSRTPKey = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v49);
              uint64_t v52 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SRTPUnauthenticatedSRTPKey);
              char v53 = (char)v52;
              SRTPEndToAccessEdgeProtectionKey = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v52);
              int v55 = ImsPrefs::BOOLValue(v3, SRTPEndToAccessEdgeProtectionKey);
              uint64_t v32 = (ImsPrefs *)SDPMedia::enableEncryption(v25, (uint64_t)&v220, v47, v50, v53, v55);
              char v56 = (char)v32;
              if ((v221 & 0x80000000) == 0) {
                goto LABEL_158;
              }
              uint64_t v57 = v220;
              goto LABEL_157;
            }
LABEL_159:
            HideSessionLevelDirectionKey = (void **)ImsPrefs::getHideSessionLevelDirectionKey(v32);
            if ((ImsPrefs::BOOLValue(v3, HideSessionLevelDirectionKey) & 1) == 0) {
              SDPModel::setDirection((uint64_t)v10, 1);
            }
            if ((*(uint64_t (**)(void *))(*v10 + 24))(v10))
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
              std::string::basic_string[abi:ne180100]<0>(&v249, "");
              uint64_t v214 = ims::info((uint64_t)__p, (uint64_t)&v249);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v214 + 8), (uint64_t)"Initialized carrier template SDP (", 34);
              *(unsigned char *)(v214 + 17) = 0;
              SipStack::carrierIdentifier(*(SipStack **)a1, (std::string *)v243);
              (*(void (**)(uint64_t, void **))(*(void *)v214 + 32))(v214, v243);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v214 + 8), (uint64_t)"):", 2);
              *(unsigned char *)(v214 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v214 + 64))(v214, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v214 + 17) = 0;
              if (SHIBYTE(v244[0]) < 0) {
                operator delete(v243[0]);
              }
              if (v251.__r_.__value_.__s.__data_[7] < 0) {
                operator delete(v249);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              v215 = *(SipStack **)a1;
              if (v9)
              {
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *((void *)v215 + 538) = v10;
              v216 = (std::__shared_weak_count *)*((void *)v215 + 539);
              *((void *)v215 + 539) = v9;
              if (v216) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v216);
              }
              if (!v9) {
                return 1;
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v9);
              uint64_t v217 = 1;
LABEL_180:
              std::__shared_weak_count::__release_shared[abi:ne180100](v9);
              return v217;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(&v249, "");
            uint64_t v16 = ims::error((uint64_t)__p, (uint64_t)&v249);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"invalid SDP template", 20);
            *(unsigned char *)(v16 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_175;
          }
LABEL_15:
          std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
          std::string::basic_string[abi:ne180100]<0>(&v249, "");
          uint64_t v16 = ims::error((uint64_t)__p, (uint64_t)&v249);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"SDPSession::initializeCarrierTemplateSDP  Media is null", 55);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
          std::string::basic_string[abi:ne180100]<0>(&v249, "");
          uint64_t v16 = ims::error((uint64_t)__p, (uint64_t)&v249);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Invalid SDP template string in config", 37);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
LABEL_175:
        *(unsigned char *)(v16 + 17) = 0;
        if (v251.__r_.__value_.__s.__data_[7] < 0) {
          operator delete(v249);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
LABEL_179:
        uint64_t v217 = 0;
        uint64_t result = 0;
        if (!v9) {
          return result;
        }
        goto LABEL_180;
      }
    }
    else if (__p[23])
    {
      goto LABEL_8;
    }
    SDPTemplateBuilder::createSDPTemplate(v3, (uint64_t *)__p);
    long long v10 = *(void **)__p;
    std::random_device v9 = *(std::__shared_weak_count **)&__p[8];
    BOOL v20 = (ImsPrefs *)(*(uint64_t (**)(void))(**(void **)__p + 24))(*(void *)__p);
    if ((v20 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(&v249, "");
      uint64_t v16 = ims::error((uint64_t)__p, (uint64_t)&v249);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Invalid default SDP template", 28);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_175;
    }
    uint64_t v22 = v10[52];
    uint64_t v21 = v10[53];
    if (v22 == v21)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(&v249, "");
      uint64_t v16 = ims::error((uint64_t)__p, (uint64_t)&v249);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"SDPSession::initializeCarrierTemplateSDP  Media is null, template is empty", 74);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_175;
    }
    while (*(_DWORD *)(v22 + 12) != 2)
    {
      v22 += 200;
      if (v22 == v21) {
        goto LABEL_26;
      }
    }
    SupportAMRWBKey = (void **)ImsPrefs::getSupportAMRWBKey(v20);
    AMRPacketAlignmentFromString = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SupportAMRWBKey);
    if (!AMRPacketAlignmentFromString) {
      goto LABEL_83;
    }
    PacketAlignmentAMRWBKey = (void **)ImsPrefs::getPacketAlignmentAMRWBKey(AMRPacketAlignmentFromString);
    ImsPrefs::stringValue(v3, PacketAlignmentAMRWBKey);
    AMRPacketAlignmentFromString = (ImsPrefs *)SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v247);
    int v36 = (int)AMRPacketAlignmentFromString;
    if (v248 < 0) {
      operator delete(v247);
    }
    if ((v36 - 1) > 1)
    {
LABEL_65:
      long long v245 = 0u;
      long long v246 = 0u;
      *(_OWORD *)v243 = 0u;
      *(_OWORD *)v244 = 0u;
      PayloadTypeOctetAlignAMRWBKey = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(AMRPacketAlignmentFromString);
      __int16 v81 = ImsPrefs::intValue(v3, PayloadTypeOctetAlignAMRWBKey);
      SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v243, v81, 1);
      ModeSetAMRWBKey = (void **)ImsPrefs::getModeSetAMRWBKey(v82);
      int v84 = (ImsPrefs *)ImsPrefs::stringValue(v3, ModeSetAMRWBKey);
      if ((__p[23] & 0x80000000) != 0)
      {
        uint64_t v85 = *(void *)&__p[8];
        operator delete(*(void **)__p);
        if (!v85)
        {
LABEL_71:
          *(_WORD *)((char *)&v245 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 257;
          IncludeSDPMaxRedKey = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v84);
          int v88 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, IncludeSDPMaxRedKey);
          if (v88)
          {
            MaxRedundancyKey = (void **)ImsPrefs::getMaxRedundancyKey(v88);
            int v88 = (ImsPrefs *)ImsPrefs::intValue(v3, MaxRedundancyKey);
            LOWORD(v246) = (_WORD)v88;
            BYTE2(v246) = 1;
          }
          int v90 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey(v88);
          long long v91 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v90);
          if (v91)
          {
            int v92 = (void **)ImsPrefs::getModeChangeCapabilityKey(v91);
            long long v91 = (ImsPrefs *)ImsPrefs::intValue(v3, v92);
            WORD2(v246) = (_WORD)v91;
            BYTE6(v246) = 1;
          }
          long long v93 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey(v91);
          int v94 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v93);
          if (v94)
          {
            long long v95 = (void **)ImsPrefs::getModeChangePeriodKey(v94);
            int v94 = (ImsPrefs *)ImsPrefs::intValue(v3, v95);
            WORD4(v246) = (_WORD)v94;
            BYTE10(v246) = 1;
          }
          int v96 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey(v94);
          uint64_t v97 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v96);
          if (v97)
          {
            uint64_t v98 = (void **)ImsPrefs::getModeChangeNeighborKey(v97);
            uint64_t v97 = (ImsPrefs *)ImsPrefs::intValue(v3, v98);
            WORD6(v246) = (_WORD)v97;
            BYTE14(v246) = 1;
          }
          memset(__p, 0, sizeof(__p));
          uint64_t v99 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(v97);
          int v100 = (ImsPrefs *)ImsPrefs::intValue(v3, v99);
          *(void *)std::string __p = &unk_1F20DB438;
          *(_WORD *)&__p[8] = (_WORD)v100;
          __p[24] = 1;
          memset(&__p[32], 0, 24);
          *(void *)&__p[16] = &unk_1F20E7518;
          *(_WORD *)&__p[56] = 255;
          memset(&__p[64], 0, 24);
          *(_DWORD *)&__p[88] = 0x10000;
          *(void *)&__p[104] = 1;
          memset(&__p[112], 0, 24);
          *(void *)&__p[136] = 255;
          *(void *)&__p[96] = &unk_1F20B3A68;
          memset(&__p[144], 0, 24);
          *(_DWORD *)&__p[216] = 0;
          uint64_t v101 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(v100);
          __int16 v102 = ImsPrefs::intValue(v3, v101);
          std::string::basic_string[abi:ne180100]<0>(v239, "AMR-WB");
          SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v102, (long long *)v239, 16000, 1);
          __p[24] = (_BYTE)v250;
          std::string::operator=((std::string *)&__p[32], &v251);
          *(_WORD *)&__p[56] = v252;
          std::string::operator=((std::string *)&__p[64], &v253);
          *(_DWORD *)&__p[88] = v254;
          SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
          if (v240 < 0) {
            operator delete(v239[0]);
          }
          SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v249, (const SDPMediaFormatAMRParams *)v243);
          int v255 = 1;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
          uint64_t v103 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
          v103[1] = v22 + 40;
          uint64_t v104 = *(void *)(v22 + 40);
          *uint64_t v103 = v104;
          *(void *)(v104 + 8) = v103;
          *(void *)(v22 + 40) = v103;
          ++*(void *)(v22 + 56);
          *(void *)std::string __p = &unk_1F20DB438;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
          v243[0] = &unk_1F20E5C78;
          if (SBYTE7(v245) < 0) {
            operator delete(v244[0]);
          }
          goto LABEL_83;
        }
      }
      else if (!__p[23])
      {
        goto LABEL_71;
      }
      int v86 = (void **)ImsPrefs::getModeSetAMRWBKey(v84);
      ImsPrefs::stringValue(v3, v86);
      int v84 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)__p);
      HIWORD(v245) = (_WORD)v84;
      HIBYTE(v246) = 0;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_71;
    }
    long long v245 = 0u;
    long long v246 = 0u;
    *(_OWORD *)v243 = 0u;
    *(_OWORD *)v244 = 0u;
    PayloadTypeBWEfficientAMRWBKey = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(AMRPacketAlignmentFromString);
    __int16 v38 = ImsPrefs::intValue(v3, PayloadTypeBWEfficientAMRWBKey);
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v243, v38, 1);
    std::string v40 = (void **)ImsPrefs::getModeSetAMRWBKey(v39);
    long long v41 = (ImsPrefs *)ImsPrefs::stringValue(v3, v40);
    if ((__p[23] & 0x80000000) != 0)
    {
      uint64_t v58 = *(void *)&__p[8];
      operator delete(*(void **)__p);
      if (!v58) {
        goto LABEL_50;
      }
    }
    else if (!__p[23])
    {
      goto LABEL_50;
    }
    uint64_t v59 = (void **)ImsPrefs::getModeSetAMRWBKey(v41);
    ImsPrefs::stringValue(v3, v59);
    long long v41 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)__p);
    HIWORD(v245) = (_WORD)v41;
    HIBYTE(v246) = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
LABEL_50:
    SuppressOctetAlignAttributeForBECodecsKey = (void **)ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(v41);
    uint64_t v61 = ImsPrefs::BOOLValue(v3, SuppressOctetAlignAttributeForBECodecsKey);
    if ((v61 & 1) == 0) {
      *(_WORD *)((char *)&v245 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 256;
    }
    uint64_t v62 = (void **)ImsPrefs::getIncludeSDPMaxRedKey((ImsPrefs *)v61);
    long long v63 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v62);
    if (v63)
    {
      uint64_t v64 = (void **)ImsPrefs::getMaxRedundancyKey(v63);
      long long v63 = (ImsPrefs *)ImsPrefs::intValue(v3, v64);
      LOWORD(v246) = (_WORD)v63;
      BYTE2(v246) = 1;
    }
    char v65 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey(v63);
    uint64_t v66 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v65);
    if (v66)
    {
      long long v67 = (void **)ImsPrefs::getModeChangeCapabilityKey(v66);
      uint64_t v66 = (ImsPrefs *)ImsPrefs::intValue(v3, v67);
      WORD2(v246) = (_WORD)v66;
      BYTE6(v246) = 1;
    }
    long long v68 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey(v66);
    uint64_t v69 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v68);
    if (v69)
    {
      int v70 = (void **)ImsPrefs::getModeChangePeriodKey(v69);
      uint64_t v69 = (ImsPrefs *)ImsPrefs::intValue(v3, v70);
      WORD4(v246) = (_WORD)v69;
      BYTE10(v246) = 1;
    }
    std::string v71 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey(v69);
    char v72 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v71);
    if (v72)
    {
      char v73 = (void **)ImsPrefs::getModeChangeNeighborKey(v72);
      char v72 = (ImsPrefs *)ImsPrefs::intValue(v3, v73);
      WORD6(v246) = (_WORD)v72;
      BYTE14(v246) = 1;
    }
    memset(__p, 0, sizeof(__p));
    char v74 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(v72);
    uint64_t v75 = (ImsPrefs *)ImsPrefs::intValue(v3, v74);
    *(void *)std::string __p = &unk_1F20DB438;
    *(_WORD *)&__p[8] = (_WORD)v75;
    __p[24] = 1;
    memset(&__p[32], 0, 24);
    *(void *)&__p[16] = &unk_1F20E7518;
    *(_WORD *)&__p[56] = 255;
    memset(&__p[64], 0, 24);
    *(_DWORD *)&__p[88] = 0x10000;
    *(void *)&__p[104] = 1;
    memset(&__p[112], 0, 24);
    *(void *)&__p[136] = 255;
    *(void *)&__p[96] = &unk_1F20B3A68;
    memset(&__p[144], 0, 24);
    *(_DWORD *)&__p[216] = 0;
    char v76 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(v75);
    __int16 v77 = ImsPrefs::intValue(v3, v76);
    std::string::basic_string[abi:ne180100]<0>(v241, "AMR-WB");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v77, (long long *)v241, 16000, 1);
    __p[24] = (_BYTE)v250;
    std::string::operator=((std::string *)&__p[32], &v251);
    *(_WORD *)&__p[56] = v252;
    std::string::operator=((std::string *)&__p[64], &v253);
    *(_DWORD *)&__p[88] = v254;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
    if (v242 < 0) {
      operator delete(v241[0]);
    }
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v249, (const SDPMediaFormatAMRParams *)v243);
    int v255 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
    int v78 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
    v78[1] = v22 + 40;
    uint64_t v79 = *(void *)(v22 + 40);
    *int v78 = v79;
    *(void *)(v79 + 8) = v78;
    *(void *)(v22 + 40) = v78;
    ++*(void *)(v22 + 56);
    *(void *)std::string __p = &unk_1F20DB438;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
    v243[0] = &unk_1F20E5C78;
    if (SBYTE7(v245) < 0) {
      operator delete(v244[0]);
    }
    if ((v36 & 1) == 0) {
      goto LABEL_65;
    }
LABEL_83:
    SupportAMRNBKey = (void **)ImsPrefs::getSupportAMRNBKey(AMRPacketAlignmentFromString);
    uint64_t v106 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SupportAMRNBKey);
    if (!v106)
    {
LABEL_126:
      SupportPCMUKey = (void **)ImsPrefs::getSupportPCMUKey(v106);
      v162 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SupportPCMUKey);
      if (v162)
      {
        *(void *)&__p[24] = 1;
        *(void *)&__p[88] = 0x10000;
        *(void *)&__p[56] = 255;
        *(void *)&__p[8] = 0;
        *(void *)std::string __p = &unk_1F20DB438;
        memset(&__p[32], 0, 24);
        *(void *)&__p[16] = &unk_1F20E7518;
        memset(&__p[64], 0, 24);
        *(void *)&__p[104] = 1;
        memset(&__p[112], 0, 24);
        *(void *)&__p[136] = 255;
        *(void *)&__p[96] = &unk_1F20B3A68;
        memset(&__p[144], 0, 80);
        std::string::basic_string[abi:ne180100]<0>(v231, "PCMU");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, 0, (long long *)v231, 8000, 1);
        __p[24] = (_BYTE)v250;
        std::string::operator=((std::string *)&__p[32], &v251);
        *(_WORD *)&__p[56] = v252;
        std::string::operator=((std::string *)&__p[64], &v253);
        *(_DWORD *)&__p[88] = v254;
        SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
        if (v232 < 0) {
          operator delete(v231[0]);
        }
        v163 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
        v163[1] = v22 + 40;
        uint64_t v164 = *(void *)(v22 + 40);
        void *v163 = v164;
        *(void *)(v164 + 8) = v163;
        *(void *)(v22 + 40) = v163;
        ++*(void *)(v22 + 56);
        *(void *)std::string __p = &unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
      }
      SupportPCMAKey = (void **)ImsPrefs::getSupportPCMAKey(v162);
      v166 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, SupportPCMAKey);
      if (v166)
      {
        *(void *)&__p[8] = 8;
        *(void *)&__p[24] = 1;
        *(void *)&__p[88] = 0x10000;
        *(void *)&__p[56] = 255;
        *(void *)std::string __p = &unk_1F20DB438;
        memset(&__p[32], 0, 24);
        *(void *)&__p[16] = &unk_1F20E7518;
        memset(&__p[64], 0, 24);
        *(void *)&__p[104] = 1;
        memset(&__p[112], 0, 24);
        *(void *)&__p[136] = 255;
        *(void *)&__p[96] = &unk_1F20B3A68;
        memset(&__p[144], 0, 80);
        std::string::basic_string[abi:ne180100]<0>(v229, "PCMA");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, 8, (long long *)v229, 8000, 1);
        __p[24] = (_BYTE)v250;
        std::string::operator=((std::string *)&__p[32], &v251);
        *(_WORD *)&__p[56] = v252;
        std::string::operator=((std::string *)&__p[64], &v253);
        *(_DWORD *)&__p[88] = v254;
        SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
        if (v230 < 0) {
          operator delete(v229[0]);
        }
        v167 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
        v167[1] = v22 + 40;
        uint64_t v168 = *(void *)(v22 + 40);
        void *v167 = v168;
        *(void *)(v168 + 8) = v167;
        *(void *)(v22 + 40) = v167;
        ++*(void *)(v22 + 56);
        *(void *)std::string __p = &unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
      }
      PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v166);
      v170 = (ImsPrefs *)ImsPrefs::intValue(v3, PayloadTypeDTMF16KKey);
      if (v170)
      {
        memset(__p, 0, sizeof(__p));
        v171 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v170);
        v172 = (ImsPrefs *)ImsPrefs::intValue(v3, v171);
        *(void *)std::string __p = &unk_1F20DB438;
        *(_WORD *)&__p[8] = (_WORD)v172;
        __p[24] = 1;
        memset(&__p[32], 0, 24);
        *(void *)&__p[16] = &unk_1F20E7518;
        *(_WORD *)&__p[56] = 255;
        memset(&__p[64], 0, 24);
        *(_DWORD *)&__p[88] = 0x10000;
        *(void *)&__p[104] = 1;
        memset(&__p[112], 0, 24);
        *(void *)&__p[136] = 255;
        *(void *)&__p[96] = &unk_1F20B3A68;
        memset(&__p[144], 0, 24);
        *(_DWORD *)&__p[216] = 0;
        v173 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v172);
        __int16 v174 = ImsPrefs::intValue(v3, v173);
        std::string::basic_string[abi:ne180100]<0>(v227, "telephone-event");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v174, (long long *)v227, 16000, 1);
        __p[24] = (_BYTE)v250;
        std::string::operator=((std::string *)&__p[32], &v251);
        *(_WORD *)&__p[56] = v252;
        std::string::operator=((std::string *)&__p[64], &v253);
        *(_DWORD *)&__p[88] = v254;
        SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
        if (v228 < 0) {
          operator delete(v227[0]);
        }
        v176 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v175);
        __int16 v177 = ImsPrefs::intValue(v3, v176);
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v243, v177);
        v243[0] = &unk_1F20B39F0;
        std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>((uint64_t)&v249, (uint64_t)v243);
        int v255 = 3;
        SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
        v243[0] = &unk_1F20E5C78;
        if (SBYTE7(v245) < 0) {
          operator delete(v244[0]);
        }
        v178 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
        v178[1] = v22 + 40;
        uint64_t v179 = *(void *)(v22 + 40);
        void *v178 = v179;
        *(void *)(v179 + 8) = v178;
        *(void *)(v22 + 40) = v178;
        ++*(void *)(v22 + 56);
        *(void *)std::string __p = &unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
      }
      PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v170);
      v181 = (ImsPrefs *)ImsPrefs::intValue(v3, PayloadTypeDTMF8KKey);
      if (v181)
      {
        memset(&__p[8], 0, 216);
        v182 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v181);
        v183 = (ImsPrefs *)ImsPrefs::intValue(v3, v182);
        *(void *)std::string __p = &unk_1F20DB438;
        *(_WORD *)&__p[8] = (_WORD)v183;
        __p[24] = 1;
        memset(&__p[32], 0, 24);
        *(void *)&__p[16] = &unk_1F20E7518;
        *(_WORD *)&__p[56] = 255;
        memset(&__p[64], 0, 24);
        *(_DWORD *)&__p[88] = 0x10000;
        *(void *)&__p[104] = 1;
        memset(&__p[112], 0, 24);
        *(void *)&__p[136] = 255;
        *(void *)&__p[96] = &unk_1F20B3A68;
        memset(&__p[144], 0, 24);
        *(_DWORD *)&__p[216] = 0;
        v184 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v183);
        __int16 v185 = ImsPrefs::intValue(v3, v184);
        std::string::basic_string[abi:ne180100]<0>(v225, "telephone-event");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v185, (long long *)v225, 8000, 1);
        __p[24] = (_BYTE)v250;
        std::string::operator=((std::string *)&__p[32], &v251);
        *(_WORD *)&__p[56] = v252;
        std::string::operator=((std::string *)&__p[64], &v253);
        *(_DWORD *)&__p[88] = v254;
        SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
        if (v226 < 0) {
          operator delete(v225[0]);
        }
        v187 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v186);
        __int16 v188 = ImsPrefs::intValue(v3, v187);
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v243, v188);
        v243[0] = &unk_1F20B39F0;
        std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>((uint64_t)&v249, (uint64_t)v243);
        int v255 = 3;
        SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
        v243[0] = &unk_1F20E5C78;
        if (SBYTE7(v245) < 0) {
          operator delete(v244[0]);
        }
        v189 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
        v189[1] = v22 + 40;
        uint64_t v190 = *(void *)(v22 + 40);
        void *v189 = v190;
        *(void *)(v190 + 8) = v189;
        *(void *)(v22 + 40) = v189;
        ++*(void *)(v22 + 56);
        *(void *)std::string __p = &unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
      }
      v191 = (void **)ImsPrefs::getPacketizationTimeKey(v181);
      __int16 v192 = ImsPrefs::intValue(v3, v191);
      SDPMedia::setPacketizationTime((SDPMedia *)v22, v192);
      v194 = (void **)ImsPrefs::getMaxPacketizationTimeKey(v193);
      __int16 v195 = ImsPrefs::intValue(v3, v194);
      SDPMedia::setMaxPacketizationTime((SDPMedia *)v22, v195);
      for (uint64_t j = *(void *)(v22 + 144); v22 + 136 != j; uint64_t j = *(void *)(j + 8))
      {
        if (*(_DWORD *)(j + 136) == 4) {
          goto LABEL_151;
        }
      }
      SDPMedia::setDirection(v22, 1);
LABEL_151:
      v198 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v196);
      uint64_t v32 = (ImsPrefs *)ImsPrefs::stringValue(v3, v198);
      if ((__p[23] & 0x80000000) != 0)
      {
        uint64_t v199 = *(void *)&__p[8];
        operator delete(*(void **)__p);
        if (!v199) {
          goto LABEL_159;
        }
      }
      else if (!__p[23])
      {
        goto LABEL_159;
      }
      v200 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v32);
      v201 = (ImsPrefs *)ImsPrefs::stringValue(v3, v200);
      v202 = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v201);
      v203 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v202);
      char v204 = (char)v203;
      v205 = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v203);
      v206 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v205);
      char v207 = (char)v206;
      v208 = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v206);
      v209 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v208);
      char v210 = (char)v209;
      v211 = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v209);
      int v212 = ImsPrefs::BOOLValue(v3, v211);
      uint64_t v32 = (ImsPrefs *)SDPMedia::enableEncryption(v22, (uint64_t)&v218, v204, v207, v210, v212);
      char v56 = (char)v32;
      if ((v219 & 0x80000000) == 0) {
        goto LABEL_158;
      }
      uint64_t v57 = v218;
LABEL_157:
      operator delete(v57);
LABEL_158:
      if ((v56 & 1) == 0) {
        goto LABEL_179;
      }
      goto LABEL_159;
    }
    PacketAlignmentAMRNBKey = (void **)ImsPrefs::getPacketAlignmentAMRNBKey(v106);
    ImsPrefs::stringValue(v3, PacketAlignmentAMRNBKey);
    uint64_t v106 = (ImsPrefs *)SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v237);
    int v108 = (int)v106;
    if (v238 < 0) {
      operator delete(v237);
    }
    if ((v108 - 1) > 1)
    {
LABEL_108:
      long long v245 = 0u;
      long long v246 = 0u;
      *(_OWORD *)v243 = 0u;
      *(_OWORD *)v244 = 0u;
      PayloadTypeOctetAlignAMRNBKey = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(v106);
      __int16 v137 = ImsPrefs::intValue(v3, PayloadTypeOctetAlignAMRNBKey);
      SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v243, v137, 0);
      ModeSetAMRNBKey = (void **)ImsPrefs::getModeSetAMRNBKey(v138);
      v140 = (ImsPrefs *)ImsPrefs::stringValue(v3, ModeSetAMRNBKey);
      if ((__p[23] & 0x80000000) != 0)
      {
        uint64_t v141 = *(void *)&__p[8];
        operator delete(*(void **)__p);
        if (!v141)
        {
LABEL_114:
          *(_WORD *)((char *)&v245 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 257;
          v143 = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v140);
          v144 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v143);
          if (v144)
          {
            v145 = (void **)ImsPrefs::getMaxRedundancyKey(v144);
            v144 = (ImsPrefs *)ImsPrefs::intValue(v3, v145);
            LOWORD(v246) = (_WORD)v144;
            BYTE2(v246) = 1;
          }
          v146 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey(v144);
          v147 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v146);
          if (v147)
          {
            v148 = (void **)ImsPrefs::getModeChangeCapabilityKey(v147);
            v147 = (ImsPrefs *)ImsPrefs::intValue(v3, v148);
            WORD2(v246) = (_WORD)v147;
            BYTE6(v246) = 1;
          }
          v149 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey(v147);
          v150 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v149);
          if (v150)
          {
            v151 = (void **)ImsPrefs::getModeChangePeriodKey(v150);
            v150 = (ImsPrefs *)ImsPrefs::intValue(v3, v151);
            WORD4(v246) = (_WORD)v150;
            BYTE10(v246) = 1;
          }
          v152 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey(v150);
          v153 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v152);
          if (v153)
          {
            v154 = (void **)ImsPrefs::getModeChangeNeighborKey(v153);
            v153 = (ImsPrefs *)ImsPrefs::intValue(v3, v154);
            WORD6(v246) = (_WORD)v153;
            BYTE14(v246) = 1;
          }
          memset(__p, 0, sizeof(__p));
          v155 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(v153);
          v156 = (ImsPrefs *)ImsPrefs::intValue(v3, v155);
          *(void *)std::string __p = &unk_1F20DB438;
          *(_WORD *)&__p[8] = (_WORD)v156;
          __p[24] = 1;
          memset(&__p[32], 0, 24);
          *(void *)&__p[16] = &unk_1F20E7518;
          *(_WORD *)&__p[56] = 255;
          memset(&__p[64], 0, 24);
          *(_DWORD *)&__p[88] = 0x10000;
          *(void *)&__p[104] = 1;
          memset(&__p[112], 0, 24);
          *(void *)&__p[136] = 255;
          *(void *)&__p[96] = &unk_1F20B3A68;
          memset(&__p[144], 0, 24);
          *(_DWORD *)&__p[216] = 0;
          v157 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(v156);
          __int16 v158 = ImsPrefs::intValue(v3, v157);
          std::string::basic_string[abi:ne180100]<0>(v233, "AMR");
          SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v158, (long long *)v233, 8000, 1);
          __p[24] = (_BYTE)v250;
          std::string::operator=((std::string *)&__p[32], &v251);
          *(_WORD *)&__p[56] = v252;
          std::string::operator=((std::string *)&__p[64], &v253);
          *(_DWORD *)&__p[88] = v254;
          SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
          if (v234 < 0) {
            operator delete(v233[0]);
          }
          SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v249, (const SDPMediaFormatAMRParams *)v243);
          int v255 = 1;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
          v159 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
          v159[1] = v22 + 40;
          uint64_t v160 = *(void *)(v22 + 40);
          void *v159 = v160;
          *(void *)(v160 + 8) = v159;
          *(void *)(v22 + 40) = v159;
          ++*(void *)(v22 + 56);
          *(void *)std::string __p = &unk_1F20DB438;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
          v243[0] = &unk_1F20E5C78;
          if (SBYTE7(v245) < 0) {
            operator delete(v244[0]);
          }
          goto LABEL_126;
        }
      }
      else if (!__p[23])
      {
        goto LABEL_114;
      }
      v142 = (void **)ImsPrefs::getModeSetAMRNBKey(v140);
      ImsPrefs::stringValue(v3, v142);
      v140 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)__p);
      HIWORD(v245) = (_WORD)v140;
      HIBYTE(v246) = 0;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_114;
    }
    long long v245 = 0u;
    long long v246 = 0u;
    *(_OWORD *)v243 = 0u;
    *(_OWORD *)v244 = 0u;
    PayloadTypeBWEfficientAMRNBKey = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(v106);
    __int16 v110 = ImsPrefs::intValue(v3, PayloadTypeBWEfficientAMRNBKey);
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v243, v110, 0);
    uint64_t v112 = (void **)ImsPrefs::getModeSetAMRNBKey(v111);
    uint64_t v113 = (ImsPrefs *)ImsPrefs::stringValue(v3, v112);
    if ((__p[23] & 0x80000000) != 0)
    {
      uint64_t v114 = *(void *)&__p[8];
      operator delete(*(void **)__p);
      if (!v114) {
        goto LABEL_93;
      }
    }
    else if (!__p[23])
    {
      goto LABEL_93;
    }
    long long v115 = (void **)ImsPrefs::getModeSetAMRNBKey(v113);
    ImsPrefs::stringValue(v3, v115);
    uint64_t v113 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)__p);
    HIWORD(v245) = (_WORD)v113;
    HIBYTE(v246) = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
LABEL_93:
    long long v116 = (void **)ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(v113);
    uint64_t v117 = ImsPrefs::BOOLValue(v3, v116);
    if ((v117 & 1) == 0) {
      *(_WORD *)((char *)&v245 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 256;
    }
    long long v118 = (void **)ImsPrefs::getIncludeSDPMaxRedKey((ImsPrefs *)v117);
    long long v119 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v118);
    if (v119)
    {
      long long v120 = (void **)ImsPrefs::getMaxRedundancyKey(v119);
      long long v119 = (ImsPrefs *)ImsPrefs::intValue(v3, v120);
      LOWORD(v246) = (_WORD)v119;
      BYTE2(v246) = 1;
    }
    long long v121 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey(v119);
    uint64_t v122 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v121);
    if (v122)
    {
      long long v123 = (void **)ImsPrefs::getModeChangeCapabilityKey(v122);
      uint64_t v122 = (ImsPrefs *)ImsPrefs::intValue(v3, v123);
      WORD2(v246) = (_WORD)v122;
      BYTE6(v246) = 1;
    }
    char v124 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey(v122);
    std::string v125 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v124);
    if (v125)
    {
      int v126 = (void **)ImsPrefs::getModeChangePeriodKey(v125);
      std::string v125 = (ImsPrefs *)ImsPrefs::intValue(v3, v126);
      WORD4(v246) = (_WORD)v125;
      BYTE10(v246) = 1;
    }
    uint64_t v127 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey(v125);
    int v128 = (ImsPrefs *)ImsPrefs::BOOLValue(v3, v127);
    if (v128)
    {
      v129 = (void **)ImsPrefs::getModeChangeNeighborKey(v128);
      int v128 = (ImsPrefs *)ImsPrefs::intValue(v3, v129);
      WORD6(v246) = (_WORD)v128;
      BYTE14(v246) = 1;
    }
    memset(__p, 0, sizeof(__p));
    v130 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(v128);
    v131 = (ImsPrefs *)ImsPrefs::intValue(v3, v130);
    *(void *)std::string __p = &unk_1F20DB438;
    *(_WORD *)&__p[8] = (_WORD)v131;
    __p[24] = 1;
    memset(&__p[32], 0, 24);
    *(void *)&__p[16] = &unk_1F20E7518;
    *(_WORD *)&__p[56] = 255;
    memset(&__p[64], 0, 24);
    *(_DWORD *)&__p[88] = 0x10000;
    *(void *)&__p[104] = 1;
    memset(&__p[112], 0, 24);
    *(void *)&__p[136] = 255;
    *(void *)&__p[96] = &unk_1F20B3A68;
    memset(&__p[144], 0, 24);
    *(_DWORD *)&__p[216] = 0;
    v132 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(v131);
    __int16 v133 = ImsPrefs::intValue(v3, v132);
    std::string::basic_string[abi:ne180100]<0>(v235, "AMR");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v249, v133, (long long *)v235, 8000, 1);
    __p[24] = (_BYTE)v250;
    std::string::operator=((std::string *)&__p[32], &v251);
    *(_WORD *)&__p[56] = v252;
    std::string::operator=((std::string *)&__p[64], &v253);
    *(_DWORD *)&__p[88] = v254;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v249);
    if (v236 < 0) {
      operator delete(v235[0]);
    }
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v249, (const SDPMediaFormatAMRParams *)v243);
    int v255 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)__p, (uint64_t)&v249);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v249);
    v134 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v22 + 40, 0, 0, (uint64_t)__p);
    v134[1] = v22 + 40;
    uint64_t v135 = *(void *)(v22 + 40);
    void *v134 = v135;
    *(void *)(v135 + 8) = v134;
    *(void *)(v22 + 40) = v134;
    ++*(void *)(v22 + 56);
    *(void *)std::string __p = &unk_1F20DB438;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&__p[96]);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__p[16]);
    v243[0] = &unk_1F20E5C78;
    if (SBYTE7(v245) < 0) {
      operator delete(v244[0]);
    }
    if (v108) {
      goto LABEL_126;
    }
    goto LABEL_108;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(&v249, "");
  uint64_t v17 = ims::error((uint64_t)__p, (uint64_t)&v249);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"No valid SIP stack", 18);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v251.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v249);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return 0;
}

void sub_1C55A12AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  _Unwind_Resume(a1);
}

void SDPModel::setDirection(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 392;
  SDPMediaDirection::SDPMediaDirection((uint64_t)v6, a2);
  uint64_t v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  uint64_t v5 = *(void *)(a1 + 392);
  *uint64_t v4 = v5;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 392) = v4;
  ++*(void *)(a1 + 408);
  v6[0] = &unk_1F20E5C78;
  if (v7 < 0) {
    operator delete((void *)v6[2]);
  }
}

void sub_1C55A1708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPSession::initializeLazuliTemplateSDP(SipStack **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    SipStack::prefs(*a1);
    int v3 = *((unsigned __int8 *)*a1 + 2689);
    SipStack::getTlsFingerprint(*a1, &v12);
    SDPTemplateBuilder::createLazuliSDPTemplate(v3 != 0, (long long *)&v12, (uint64_t *)&v17);
    uint64_t v5 = v17;
    uint64_t v4 = v18;
    uint64_t v17 = 0;
    int v18 = 0;
    if (v14 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    uint64_t v6 = ims::debug((uint64_t)&v17, (uint64_t)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Initialized lazuli template SDP (", 33);
    *(unsigned char *)(v6 + 17) = 0;
    SipStack::carrierIdentifier(*a1, &v11);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"):", 2);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
    char v7 = *a1;
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)v7 + 540) = v5;
    BOOL v8 = (std::__shared_weak_count *)*((void *)v7 + 541);
    *((void *)v7 + 54bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    uint64_t v9 = ims::error((uint64_t)&v17, (uint64_t)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No valid SIP stack", 18);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v19 < 0) {
      operator delete(v17);
    }
  }
  return v1 != 0;
}

void sub_1C55A19D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 49) < 0) {
    operator delete(*(void **)(v27 - 72));
  }
  _Unwind_Resume(exception_object);
}

void SDPSession::setModelPath(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 120);
      if (v7)
      {
        memset(v16, 0, sizeof(v16));
        memset(v15, 0, sizeof(v15));
        SipHost::SipHost((uint64_t)&v11, (std::string *)(a1 + 72));
        LazuliUri::LazuliUri((LazuliUri *)v15, (const SipHost *)&v11, *(unsigned char *)(v7 + 2689));
        SipHost::~SipHost((SipHost *)&v11);
        LazuliUri::setHostPort((LazuliUri *)v15, a3);
        std::string::operator=((std::string *)v16, (const std::string *)(a1 + 1960));
        std::string v11 = &unk_1F20E7F48;
        long long v12 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        v9[0] = 0;
        v9[1] = 0;
        __p[0] = &unk_1F20B37B0;
        __p[1] = v9;
        LOWORD(v10) = 256;
        LazuliRouteSet::addHop((LazuliRouteSet *)&v11, (const LazuliUri *)v15, 0, 0, (const SipParameterMap *)__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55A1C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  ims::AccessNetwork::~AccessNetwork(&__p);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&a19);
  LazuliUri::~LazuliUri((LazuliUri *)&a26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::getAMRPacketAlignmentFromString(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 == 22)
  {
    if (v2 >= 0) {
      uint64_t v9 = (unint64_t *)a1;
    }
    else {
      uint64_t v9 = *(unint64_t **)a1;
    }
    unint64_t v10 = 0x62616E6477696474;
    unint64_t v11 = bswap64(*v9);
    if (v11 == 0x62616E6477696474
      && (unint64_t v10 = 0x6845666669636965, v11 = bswap64(v9[1]), v11 == 0x6845666669636965)
      && (unint64_t v10 = 0x69656E744F6E6C79, v11 = bswap64(*(unint64_t *)((char *)v9 + 14)), v11 == 0x69656E744F6E6C79))
    {
      int v12 = 0;
    }
    else if (v11 < v10)
    {
      int v12 = -1;
    }
    else
    {
      int v12 = 1;
    }
    if (v12) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else if (v1 == 16)
  {
    if (v2 >= 0) {
      int v3 = (uint64_t *)a1;
    }
    else {
      int v3 = *(uint64_t **)a1;
    }
    uint64_t v5 = *v3;
    uint64_t v4 = v3[1];
    BOOL v7 = v5 != 0x696C41746574636FLL || v4 != 0x796C6E4F64656E67;
    return (2 * v7);
  }
  else
  {
    return 2;
  }
}

void SDPSession::addMediaStreamForType(void *a1, int a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[242];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = a1[241];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = a1[239];
  if (!v7) {
    goto LABEL_19;
  }
  BOOL v8 = a1 + 239;
  do
  {
    int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      unint64_t v11 = (uint64_t *)v7;
    }
    else {
      unint64_t v11 = (uint64_t *)(v7 + 8);
    }
    if (!v10) {
      BOOL v8 = (void *)v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 239 || *((_DWORD *)v8 + 8) > a2 || !v8[5])
  {
LABEL_19:
    if ((a2 == 4 || a2 == 2) && v6) {
      operator new();
    }
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C55A2028(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPSession::handleLazuliOfferAnswer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5) {
    return 0;
  }
  int v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 0;
  }
  BOOL v10 = v9;
  unint64_t v11 = *(SipStack **)(a1 + 120);
  if (v11)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    memset(v59, 0, sizeof(v59));
    uint64_t v12 = *a3;
    if (*a3)
    {
      uint64_t v13 = a2[1];
      uint64_t v57 = *a2;
      uint64_t v58 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        uint64_t v12 = *a3;
      }
      long long v14 = (std::__shared_weak_count *)a3[1];
      uint64_t v55 = v12;
      char v56 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = (ImsPrefs *)SipStack::prefs(v11);
      SDPLazuliSettingsBuilder::createLazuliSettingsForOfferAnswer(a1 + 1464, &v57, &v55, v15, (SDPMediaLazuliSettings *)v59);
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      char v16 = v58;
    }
    else
    {
      char v16 = (std::__shared_weak_count *)a2[1];
      v54[0] = *a2;
      v54[1] = (uint64_t)v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v18 = (ImsPrefs *)SipStack::prefs(v11);
      SDPLazuliSettingsBuilder::createLazuliSettingsForOffer(a1 + 1464, v54, v18, (SDPMediaLazuliSettings *)v59);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    char v19 = *(void (****)(void))(a1 + 1872);
    BOOL v20 = *(void (****)(void))(a1 + 1864);
    if (v19 != v20)
    {
      uint64_t v21 = v19 - 25;
      uint64_t v22 = v19 - 25;
      unint64_t v23 = v19 - 25;
      do
      {
        __int16 v24 = *v23;
        v23 -= 25;
        (*v24)(v22);
        v21 -= 25;
        BOOL v25 = v22 == v20;
        uint64_t v22 = v23;
      }
      while (!v25);
    }
    *(void *)(a1 + 1872) = v20;
    uint64_t v26 = *a3;
    if (!*a3) {
      uint64_t v26 = *a2;
    }
    char v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(&v51, *(void *)(v26 + 416), *(void *)(v26 + 424), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v26 + 424) - *(void *)(v26 + 416)) >> 3));
    uint64_t v27 = v51;
    for (uint64_t i = v52; v27 != i; v27 += 50)
    {
      SDPMedia::SDPMedia((SDPMedia *)v49, (const SDPMedia *)v27, 0);
      unint64_t v29 = *(void *)(a1 + 1872);
      if (v29 >= *(void *)(a1 + 1880))
      {
        uint64_t v30 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(a1 + 1864), (const SDPMedia *)v49);
      }
      else
      {
        SDPMedia::SDPMedia(*(SDPMedia **)(a1 + 1872), (const SDPMedia *)v49);
        uint64_t v30 = v29 + 200;
        *(void *)(a1 + 1872) = v29 + 200;
      }
      *(void *)(a1 + 1872) = v30;
      SDPMedia::~SDPMedia((SDPMedia *)v49);
      SDPSession::addMediaStreamForType((void *)a1, v27[3]);
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v31 = ims::info((uint64_t)v49, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"SDPSession::handleLazuliOfferAnswer: we have ", 45);
    *(unsigned char *)(v31 + 17) = 0;
    if (*a2) {
      uint64_t v32 = "both an OFFER and ANSWER";
    }
    else {
      uint64_t v32 = "an ANSWER";
    }
    uint64_t v33 = "an OFFER";
    if (!*a2) {
      uint64_t v33 = "nothing";
    }
    if (*a3) {
      char v34 = v32;
    }
    else {
      char v34 = v33;
    }
    size_t v35 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)v34, v35);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (BYTE8(v65) && (*((unsigned int (**)(long long **))v59[0] + 3))(v59))
    {
      int v36 = *(unsigned __int8 *)(a1 + 1856);
      if (*(unsigned char *)(a1 + 1856))
      {
        if (!BYTE8(v65)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if ((*((unsigned int (**)(long long **, uint64_t))v59[0] + 4))(v59, a1 + 1496)) {
          uint64_t v17 = 2;
        }
        else {
          uint64_t v17 = 1;
        }
        int v36 = *(unsigned __int8 *)(a1 + 1856);
      }
      else
      {
        uint64_t v17 = 2;
      }
      if (v36 == BYTE8(v65))
      {
        if (v36)
        {
          SDPMediaSettings::operator=(a1 + 1496, (uint64_t)v59);
          if ((long long **)(a1 + 1496) != v59)
          {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1776), *((std::string **)&v60 + 1), (long long *)v61, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *((void *)&v60 + 1)) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1800), (std::string *)v62, *((long long **)&v62 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v62 + 1) - v62) >> 3));
          }
          uint64_t v41 = *((void *)&v63 + 1);
          uint64_t v42 = v64;
          if ((void)v64) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 1824) = v41;
          uint64_t v43 = *(std::__shared_weak_count **)(a1 + 1832);
          *(void *)(a1 + 1832) = v42;
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          uint64_t v44 = *((void *)&v64 + 1);
          uint64_t v45 = v65;
          if ((void)v65) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 1840) = v44;
          std::string v46 = *(std::__shared_weak_count **)(a1 + 1848);
          *(void *)(a1 + 1848) = v45;
          if (v46) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
        }
      }
      else if (v36)
      {
        SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(a1 + 1496));
        *(unsigned char *)(a1 + 1856) = 0;
      }
      else
      {
        SDPMediaLazuliSettings::SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(a1 + 1496), v59);
        *(unsigned char *)(a1 + 1856) = 1;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v49, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v37 = ims::error((uint64_t)v49, (uint64_t)__p);
      uint64_t v38 = v37;
      if (BYTE8(v65)) {
        long long v39 = "Invalid";
      }
      else {
        long long v39 = "Missing";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)v39, 7);
      *(unsigned char *)(v38 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" lazuli settings!", 17);
      *(unsigned char *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v38 + 17) = 0;
      if (v48 < 0) {
        operator delete(__p[0]);
      }
      if (v50 < 0) {
        operator delete(v49[0]);
      }
      uint64_t v17 = 0;
    }
    if (*(unsigned char *)(a1 + 1856)) {
      *(void *)(a1 + 1592) = a4;
    }
    v49[0] = &v51;
    std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    if (BYTE8(v65)) {
      SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v59);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return v17;
}

void sub_1C55A265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = &a41;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x298])) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a50);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::handleOfferAnswer(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (v5)
  {
    int v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      BOOL v10 = v9;
      uint64_t v11 = *(void *)(a1 + 120);
      if (!v11)
      {
LABEL_135:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return v11;
      }
      uint64_t v110 = 0;
      memset(v109, 0, sizeof(v109));
      long long v108 = 0u;
      memset(v107, 0, sizeof(v107));
      long long v106 = 0u;
      *(_OWORD *)long long v105 = 0u;
      memset(v104, 0, sizeof(v104));
      uint64_t v12 = *a3;
      if (*a3)
      {
        uint64_t v13 = (std::__shared_weak_count *)a2[1];
        uint64_t v102 = *a2;
        uint64_t v103 = v13;
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v12 = *a3;
        }
        long long v14 = (std::__shared_weak_count *)a3[1];
        uint64_t v100 = v12;
        uint64_t v101 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = (SDPMedia *)SipStack::prefs((SipStack *)v11);
        SDPAudioSettingsBuilder::createAudioSettingsForOfferAnswer(a1 + 1376, &v102, (uint64_t)&v100, v15, (SDPMediaAudioSettings *)v104);
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        char v16 = v103;
      }
      else
      {
        char v16 = (std::__shared_weak_count *)a2[1];
        v99[0] = *a2;
        v99[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (SDPMedia *)SipStack::prefs((SipStack *)v11);
        SDPAudioSettingsBuilder::createAudioSettingsForOffer(a1 + 1376, (uint64_t)v99, v17, (unint64_t)v104);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      int v18 = *(void (****)(void))(a1 + 1872);
      char v19 = *(void (****)(void))(a1 + 1864);
      if (v18 != v19)
      {
        BOOL v20 = v18 - 25;
        uint64_t v21 = v18 - 25;
        uint64_t v22 = v18 - 25;
        do
        {
          unint64_t v23 = *v22;
          v22 -= 25;
          (*v23)(v21);
          v20 -= 25;
          BOOL v24 = v21 == v19;
          uint64_t v21 = v22;
        }
        while (!v24);
      }
      *(void *)(a1 + 1872) = v19;
      uint64_t v25 = *a3;
      if (!*a3) {
        uint64_t v25 = *a2;
      }
      uint64_t v97 = 0;
      int v96 = 0;
      uint64_t v98 = 0;
      std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(&v96, *(void *)(v25 + 416), *(void *)(v25 + 424), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(v25 + 424) - *(void *)(v25 + 416)) >> 3));
      uint64_t v26 = (int *)v96;
      uint64_t v27 = (int *)v97;
      if (v96 != v97)
      {
        do
        {
          SDPMedia::SDPMedia((SDPMedia *)v78, (const SDPMedia *)v26, 0);
          unint64_t v28 = *(void *)(a1 + 1872);
          if (v28 >= *(void *)(a1 + 1880))
          {
            uint64_t v29 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(a1 + 1864), (const SDPMedia *)v78);
          }
          else
          {
            SDPMedia::SDPMedia(*(SDPMedia **)(a1 + 1872), (const SDPMedia *)v78);
            uint64_t v29 = v28 + 200;
            *(void *)(a1 + 1872) = v28 + 200;
          }
          *(void *)(a1 + 1872) = v29;
          SDPMedia::~SDPMedia((SDPMedia *)v78);
          SDPSession::addMediaStreamForType((void *)a1, v26[3]);
          v26 += 50;
        }
        while (v26 != v27);
      }
      std::string::basic_string[abi:ne180100]<0>(v78, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v30 = ims::info((uint64_t)v78, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"SDPSession::handleOfferAnswer: we have ", 39);
      *(unsigned char *)(v30 + 17) = 0;
      if (*a2) {
        uint64_t v31 = "both an OFFER and ANSWER";
      }
      else {
        uint64_t v31 = "an ANSWER";
      }
      uint64_t v32 = "an OFFER";
      if (!*a2) {
        uint64_t v32 = "nothing";
      }
      if (*a3) {
        uint64_t v33 = v31;
      }
      else {
        uint64_t v33 = v32;
      }
      size_t v34 = strlen(v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)v33, v34);
      *(unsigned char *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v30 + 17) = 0;
      if (SHIBYTE(v76) < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v79) < 0) {
        operator delete(v78[0]);
      }
      memset(v95, 0, sizeof(v95));
      *(_OWORD *)__s2 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      *(_OWORD *)int v78 = 0u;
      if (*(_DWORD *)(a1 + 136))
      {
        uint64_t v35 = *a2;
        for (uint64_t i = *(void *)(*a2 + 416); ; i += 200)
        {
          if (i == *(void *)(*a2 + 424)) {
            goto LABEL_62;
          }
          if (*(_DWORD *)(i + 12) == 4) {
            break;
          }
        }
        uint64_t v37 = *a3;
        if (*a3)
        {
          uint64_t v38 = (std::__shared_weak_count *)a2[1];
          uint64_t v72 = *a2;
          char v73 = v38;
          uint64_t v39 = v37;
          if (v38)
          {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v39 = *a3;
          }
          std::string v40 = (std::__shared_weak_count *)a3[1];
          uint64_t v70 = v39;
          std::string v71 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v41 = (SDPMedia *)SipStack::prefs((SipStack *)v11);
          SDPTTYSettingsBuilder::createTTYSettingsForOfferAnswer(a1 + 1408, &v72, (uint64_t)&v70, v41, (SDPMediaSettings *)&__p);
        }
        else
        {
          uint64_t v42 = (std::__shared_weak_count *)a2[1];
          uint64_t v68 = v35;
          uint64_t v69 = v42;
          if (v42) {
            atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v43 = (SDPMedia *)SipStack::prefs((SipStack *)v11);
          SDPTTYSettingsBuilder::createTTYSettingsForOffer(a1 + 1408, (uint64_t)&v68, v43, (uint64_t)&__p);
        }
        std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>((SDPMediaSettings *)v78, (SDPMediaSettings *)&__p);
        if (v77) {
          SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&__p);
        }
        if (v37)
        {
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
          uint64_t v44 = v73;
          if (v73) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v44 = v69;
          if (v69) {
LABEL_61:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
      }
LABEL_62:
      if (!(_BYTE)v110 || !(*(unsigned int (**)(_OWORD *))(*(void *)&v104[0] + 24))(v104))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.session");
        std::string::basic_string[abi:ne180100]<0>(v66, "");
        uint64_t v45 = ims::error((uint64_t)&__p, (uint64_t)v66);
        uint64_t v46 = v45;
        if ((_BYTE)v110) {
          char v47 = "Invalid";
        }
        else {
          char v47 = "Missing";
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)v47, 7);
        *(unsigned char *)(v46 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)" audio settings!", 16);
        *(unsigned char *)(v46 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v46 + 17) = 0;
        if (v67 < 0) {
          operator delete(v66[0]);
        }
        if (SHIBYTE(v76) < 0) {
          operator delete(__p);
        }
        uint64_t v11 = 0;
LABEL_77:
        if (!BYTE8(v95[1])) {
          goto LABEL_99;
        }
        if (!*(unsigned char *)(a1 + 1328)) {
          goto LABEL_158;
        }
        int v48 = (*((uint64_t (**)(void **, uint64_t))v78[0] + 4))(v78, a1 + 1032) ^ 1;
        if (v11 == 2) {
          LOBYTE(v48) = 0;
        }
        if ((v48 & 1) == 0)
        {
LABEL_158:
          if (*a3)
          {
            uint64_t v11 = 2;
          }
          else
          {
            int v49 = *(unsigned __int8 *)(a1 + 1328);
            if (!*(unsigned char *)(a1 + 1328))
            {
              uint64_t v11 = 2;
              goto LABEL_85;
            }
            uint64_t v11 = 2;
            if (*(unsigned char *)(a1 + 1304))
            {
              if (LOBYTE(v95[0]))
              {
                char v50 = *(const void **)(a1 + 1272);
                size_t v51 = *(void *)(a1 + 1280) - (void)v50;
                if (v51 != (char *)__s2[1] - (char *)__s2[0] || memcmp(v50, __s2[0], v51)) {
                  SDPSession::generate_key_and_salt(a1, 4);
                }
              }
            }
          }
        }
        int v49 = *(unsigned __int8 *)(a1 + 1328);
LABEL_85:
        if (v49 == BYTE8(v95[1]))
        {
          if (v49)
          {
            SDPMediaSettings::operator=(a1 + 1032, (uint64_t)v78);
            *(void *)(a1 + 1312) = *((void *)&v95[0] + 1);
            *(void *)(a1 + 1317) = *(void *)((char *)v95 + 13);
          }
        }
        else if (v49)
        {
          SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(a1 + 1032));
          *(unsigned char *)(a1 + 1328) = 0;
        }
        else
        {
          SDPMediaSettings::SDPMediaSettings((SDPMediaSettings *)(a1 + 1032), (const SDPMediaSettings *)v78);
          *(void *)(a1 + 1032) = &unk_1F20B97F8;
          *(void *)(a1 + 1312) = *((void *)&v95[0] + 1);
          *(_DWORD *)(a1 + 1320) = v95[1];
          *(unsigned char *)(a1 + 1324) = BYTE4(v95[1]);
          *(unsigned char *)(a1 + 1328) = 1;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1032) + 24))(a1 + 1032) & 1) == 0) {
          SDPSession::setTextMediaSessionMode(a1, 0);
        }
LABEL_99:
        uint64_t v52 = *(void *)(a1 + 1888);
        if (!v52 || *(_DWORD *)(v52 + 340) != 2)
        {
LABEL_129:
          if (*(unsigned char *)(a1 + 584)) {
            *(void *)(a1 + 248) = a4;
          }
          if (BYTE8(v95[1])) {
            SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v78);
          }
          v78[0] = &v96;
          std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)v78);
          if ((_BYTE)v110) {
            SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v104);
          }
          goto LABEL_135;
        }
        std::string __p = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        if (*(unsigned char *)(a1 + 584))
        {
          if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 180)) != *(unsigned __int16 *)(a1 + 180))
          {
            std::string::basic_string[abi:ne180100]<0>(v66, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(v64, "");
            uint64_t v53 = ims::error((uint64_t)v66, (uint64_t)v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"Audio settings RX payload type failed sanitization: ", 52);
            *(unsigned char *)(v53 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v53 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v53 + 17) = 0;
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (v67 < 0) {
              operator delete(v66[0]);
            }
          }
          if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 456)) == *(unsigned __int16 *)(a1 + 456))goto LABEL_114; {
          std::string::basic_string[abi:ne180100]<0>(v66, "sdp.session");
          }
          std::string::basic_string[abi:ne180100]<0>(v64, "");
          uint64_t v54 = ims::error((uint64_t)v66, (uint64_t)v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"Audio settings DTMF RX payload type failed sanitization: ", 57);
          *(unsigned char *)(v54 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v54 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v66, "sdp.session");
          std::string::basic_string[abi:ne180100]<0>(v64, "");
          uint64_t v54 = ims::error((uint64_t)v66, (uint64_t)v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"No audio settings found. The payload types used for the second audio settings will not be sanitized.", 100);
          *(unsigned char *)(v54 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v54 + 17) = 0;
        if (v65 < 0) {
          operator delete(v64[0]);
        }
        if (v67 < 0) {
          operator delete(v66[0]);
        }
LABEL_114:
        if (*(unsigned char *)(a1 + 1328))
        {
          if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 1060)) != *(unsigned __int16 *)(a1 + 1060))
          {
            std::string::basic_string[abi:ne180100]<0>(v66, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(v64, "");
            uint64_t v55 = ims::error((uint64_t)v66, (uint64_t)v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"TTY settings RX payload type failed sanitization: ", 50);
            *(unsigned char *)(v55 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v55 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v55 + 17) = 0;
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (v67 < 0) {
              operator delete(v66[0]);
            }
          }
          if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 1320)) != *(unsigned __int16 *)(a1 + 1320))
          {
            std::string::basic_string[abi:ne180100]<0>(v66, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(v64, "");
            uint64_t v56 = ims::error((uint64_t)v66, (uint64_t)v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"TTY settings redundant RX payload type failed sanitization: ", 60);
            *(unsigned char *)(v56 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v56 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v56 + 17) = 0;
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (v67 < 0) {
              operator delete(v66[0]);
            }
          }
        }
        if (*(unsigned char *)(a1 + 1024))
        {
          SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)(a1 + 592));
          *(unsigned char *)(a1 + 1024) = 0;
        }
        if (__p)
        {
          uint64_t v75 = __p;
          operator delete(__p);
        }
        goto LABEL_129;
      }
      if (!*(unsigned char *)(a1 + 584)) {
        goto LABEL_159;
      }
      if (!(_BYTE)v110) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (!(*(unsigned int (**)(_OWORD *, uint64_t))(*(void *)&v104[0] + 32))(v104, a1 + 152))
      {
        uint64_t v11 = 1;
      }
      else
      {
LABEL_159:
        if (*a3)
        {
          uint64_t v11 = 2;
        }
        else
        {
          int v58 = *(unsigned __int8 *)(a1 + 584);
          if (!*(unsigned char *)(a1 + 584))
          {
            uint64_t v11 = 2;
LABEL_139:
            if (v58 == v110)
            {
              if (v58)
              {
                SDPMediaSettings::operator=(a1 + 152, (uint64_t)v104);
                std::string::operator=((std::string *)(a1 + 432), (const std::string *)((char *)v107 + 8));
                *(void *)(a1 + 456) = v108;
                *(void *)(a1 + 46bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(void *)((char *)&v108 + 5);
                long long v59 = *(_OWORD *)((char *)&v109[1] + 8);
                *(_OWORD *)(a1 + 480) = *(_OWORD *)((char *)v109 + 8);
                *(_OWORD *)(a1 + 496) = v59;
                *(_WORD *)(a1 + 576) = WORD4(v109[6]);
                long long v60 = *(_OWORD *)((char *)&v109[5] + 8);
                *(_OWORD *)(a1 + 544) = *(_OWORD *)((char *)&v109[4] + 8);
                *(_OWORD *)(a1 + 560) = v60;
                long long v61 = *(_OWORD *)((char *)&v109[3] + 8);
                *(_OWORD *)(a1 + 512) = *(_OWORD *)((char *)&v109[2] + 8);
                *(_OWORD *)(a1 + 528) = v61;
              }
            }
            else if (v58)
            {
              SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)(a1 + 152));
              *(unsigned char *)(a1 + 584) = 0;
            }
            else
            {
              SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)(a1 + 152), (const SDPMediaAudioSettings *)v104);
              *(unsigned char *)(a1 + 584) = 1;
            }
            goto LABEL_77;
          }
          uint64_t v11 = 2;
          if (*(unsigned char *)(a1 + 424))
          {
            if (LOBYTE(v107[0]))
            {
              long long v62 = *(const void **)(a1 + 392);
              size_t v63 = *(void *)(a1 + 400) - (void)v62;
              if (v63 != (char *)v105[1] - (char *)v105[0] || memcmp(v62, v105[0], v63)) {
                SDPSession::generate_key_and_salt(a1, 2);
              }
            }
          }
        }
      }
      int v58 = *(unsigned __int8 *)(a1 + 584);
      goto LABEL_139;
    }
  }
  return 0;
}

void sub_1C55A344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (LOBYTE(STACK[0x2B8])) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&a62);
  }
  a62 = &STACK[0x2C8];
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (LOBYTE(STACK[0x4C0])) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&STACK[0x310]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  _Unwind_Resume(a1);
}

uint64_t SDPPayloadTypeSanitizer::sanitizePayloadType(SDPPayloadTypeSanitizer *this, unsigned int a2)
{
  if (a2 >= 0x60)
  {
    if (a2 > 0x7F)
    {
      return 255;
    }
    else
    {
      uint64_t v4 = *(unsigned __int16 **)this;
      uint64_t v5 = (unsigned __int16 *)*((void *)this + 1);
      unsigned __int16 v2 = a2;
      while (1)
      {
        uint64_t v6 = v4;
        if (v4 != v5)
        {
          while (*v6 != v2)
          {
            if (++v6 == v5)
            {
              uint64_t v6 = (unsigned __int16 *)*((void *)this + 1);
              break;
            }
          }
        }
        if (v6 == v5) {
          break;
        }
        if (((v2 + 1) & 0xFF80) != 0) {
          unsigned __int16 v2 = 96;
        }
        else {
          ++v2;
        }
        if (a2 == v2) {
          return 255;
        }
      }
      unint64_t v7 = *((void *)this + 2);
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = (char *)v5 - (char *)v4;
        if ((char *)v5 - (char *)v4 <= -3) {
          std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v9 >> 1;
        unint64_t v11 = v7 - (void)v4;
        if (v11 <= (v9 >> 1) + 1) {
          unint64_t v12 = v10 + 1;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v13 = v12;
        }
        if (v13)
        {
          long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 16, v13);
          uint64_t v4 = *(unsigned __int16 **)this;
          uint64_t v5 = (unsigned __int16 *)*((void *)this + 1);
        }
        else
        {
          long long v14 = 0;
        }
        uint64_t v15 = (unsigned __int16 *)&v14[2 * v10];
        char v16 = &v14[2 * v13];
        *uint64_t v15 = v2;
        BOOL v8 = v15 + 1;
        while (v5 != v4)
        {
          unsigned __int16 v17 = *--v5;
          *--uint64_t v15 = v17;
        }
        *(void *)this = v15;
        *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
        *((void *)this + 2) = v16;
        if (v4) {
          operator delete(v4);
        }
      }
      else
      {
        *uint64_t v5 = v2;
        BOOL v8 = v5 + 1;
      }
      *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
    }
  }
  else
  {
    return (unsigned __int16)a2;
  }
  return v2;
}

void SDPSession::localSdp(SDPSession *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v19, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  uint64_t v6 = ims::debug((uint64_t)&v19, (uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SDPSession::localSdp", 20);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v15, (SDPSession *)((char *)this + 152));
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v14, (uint64_t)this + 1032);
  SDPModelBuilder::createSDP((uint64_t *)this + 167, (const SDPMediaAudioSettings *)v15, (uint64_t)v14, (const SDPMedia **)this + 233, a2, (uint64_t **)&v19);
  long long v7 = v19;
  long long v19 = 0uLL;
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  if (v14[296]) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v14);
  }
  if (v16) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v15);
  }
  uint64_t v9 = *(void *)this;
  if (*((unsigned char *)this + 140))
  {
    uint64_t v10 = *(void *)(v9 + 416);
    uint64_t v11 = *(void *)(v9 + 424);
    if (v10 != v11)
    {
      do
      {
        if (*((char *)this + 95) < 0) {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 9), *((void *)this + 10));
        }
        else {
          std::string __p = *(std::string *)((unsigned char *)this + 3);
        }
        SDPMedia::addCandidateAttribute(v10, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (!*(void *)(v10 + 192)) {
          *(void *)(v10 + 192) = *(void *)this;
        }
        v10 += 200;
      }
      while (v10 != v11);
      uint64_t v9 = *(void *)this;
    }
  }
  uint64_t v12 = *((void *)this + 1);
  *a3 = v9;
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C55A3960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,void *a51)
{
  if (a50) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&a13);
  }
  if (LOBYTE(STACK[0x300])) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(&a51);
  }
  _Unwind_Resume(a1);
}

void SDPSession::localLazuliSdp(SDPSession *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 1440;
  std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaLazuliSettings *)v10, (uint64_t)this + 1496);
  SDPLazuliBuilder::createSDP((uint64_t)v4, (uint64_t)v10, &v11);
  long long v5 = v11;
  long long v11 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (v10[360]) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v10);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 1);
  v9[0] = *(void *)this;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPSession::setModelPath((uint64_t)this, (uint64_t)v9, *((_WORD *)this + 72));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *((void *)this + 1);
  *a2 = *(void *)this;
  a2[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C55A3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(exception_object);
}

void SDPSession::localTemplateSdp(SDPSession *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  __int16 v4 = 255;
  if (*((unsigned char *)this + 584))
  {
    __int16 v5 = *((_WORD *)this + 90);
    *((_WORD *)this + 90) = 255;
    __int16 v4 = v5;
  }
  __int16 v6 = 255;
  if (*((unsigned char *)this + 1328))
  {
    __int16 v7 = *((_WORD *)this + 530);
    BOOL v8 = *((unsigned char *)this + 1324) != 0;
    *((_WORD *)this + 530) = 255;
    *((unsigned char *)this + 1324) = 1;
    __int16 v6 = v7;
  }
  else
  {
    BOOL v8 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  SDPSession::localSdp(this, a2, a3);
  if (*((unsigned char *)this + 584)) {
    *((_WORD *)this + 90) = v4;
  }
  if (*((unsigned char *)this + 1328))
  {
    *((_WORD *)this + 530) = v6;
    *((unsigned char *)this + 1324) = v8;
  }
}

void SDPSession::createLocalSdpForFork(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (v6 && (uint64_t v9 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v10 = v9;
    long long v11 = *(SipStack **)(a1 + 120);
    if (v11)
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      uint64_t v12 = (std::__shared_weak_count *)a3[1];
      v24[0] = *a3;
      v24[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (SDPMedia *)SipStack::prefs(v11);
      SDPAudioSettingsBuilder::createAudioSettingsForOffer(a1 + 1376, (uint64_t)v24, v13, (unint64_t)v25);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      long long v23 = 0u;
      memset(v22, 0, sizeof(v22));
      if (*(_DWORD *)(a1 + 136))
      {
        for (uint64_t i = *(void *)(*a3 + 416); i != *(void *)(*a3 + 424); i += 200)
        {
          if (*(_DWORD *)(i + 12) == 4)
          {
            uint64_t v15 = (std::__shared_weak_count *)a3[1];
            v20[0] = *a3;
            v20[1] = v15;
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v16 = (SDPMedia *)SipStack::prefs(v11);
            SDPTTYSettingsBuilder::createTTYSettingsForOffer(a1 + 1408, (uint64_t)v20, v16, (uint64_t)v21);
            std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>((SDPMediaSettings *)v22, (SDPMediaSettings *)v21);
            if (v21[296]) {
              SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v21);
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            break;
          }
        }
      }
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v18, (const SDPMediaAudioSettings *)v25);
      std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v17, (uint64_t)v22);
      SDPModelBuilder::createSDP((uint64_t *)(a1 + 1336), (const SDPMediaAudioSettings *)v18, (uint64_t)v17, (const SDPMedia **)(*a3 + 416), a2, (uint64_t **)a4);
      if (v17[296]) {
        SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v17);
      }
      if (v19) {
        SDPMediaAudioSettings::~SDPMediaAudioSettings(v18);
      }
      if (BYTE8(v23)) {
        SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v22);
      }
      if ((_BYTE)v26) {
        SDPMediaAudioSettings::~SDPMediaAudioSettings(v25);
      }
    }
    else
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_1C55A3DC0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x428])) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&STACK[0x300]);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (LOBYTE(STACK[0x558])) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&STACK[0x430]);
  }
  if (LOBYTE(STACK[0x720])) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&STACK[0x570]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SDPSession::initializeOffer(SDPSession *this)
{
  unsigned __int16 v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      __int16 v4 = v3;
      __int16 v5 = (SipStack *)*((void *)this + 15);
      if (!v5)
      {
LABEL_56:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      __int16 v6 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 15));
      EnableSDPCandidateAttributeKey = (void **)ImsPrefs::getEnableSDPCandidateAttributeKey(v6);
      *((unsigned char *)this + 140) = ImsPrefs::BOOLValue(v6, EnableSDPCandidateAttributeKey);
      BOOL v8 = (std::__shared_weak_count *)*((void *)this + 3);
      uint64_t v32 = *((void *)this + 2);
      uint64_t v33 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v9 = *((unsigned __int8 *)this + 141);
      uint64_t v10 = (ImsPrefs *)SipStack::prefs(v5);
      SDPTemplateBuilder::createInitialSettings((uint64_t)&v32, (const std::string *)this + 2, v9 != 0, v10, (uint64_t)&v34);
      std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>((uint64_t)this + 152, (unsigned __int8 *)&v34);
      if (v35) {
        SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&v34.__r_.__value_.__l.__data_);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      uint64_t v11 = *((void *)this + 236);
      if (!v11 || *(_DWORD *)(v11 + 340) != 2 || !*((unsigned char *)this + 584))
      {
LABEL_54:
        SDPSession::addMediaStreamForType(this, 2);
        if (*((_DWORD *)this + 34)) {
          SDPSession::addMediaStreamForType(this, 4);
        }
        goto LABEL_56;
      }
      uint64_t v12 = (_OWORD *)((char *)this + 432);
      if (*((char *)this + 455) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, *((const std::string::value_type **)this + 54), *((void *)this + 55));
      }
      else
      {
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *v12;
        v34.__r_.__value_.__r.__words[2] = *((void *)this + 56);
      }
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      if (size != 6) {
        goto LABEL_25;
      }
      long long v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v34;
      }
      int data = (int)v14->__r_.__value_.__l.__data_;
      int v16 = WORD2(v14->__r_.__value_.__r.__words[0]);
      if (data == 760368449 && v16 == 16983)
      {
        BOOL v23 = 1;
        if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_44:
          if (v23)
          {
            BOOL v24 = (std::__shared_weak_count *)*((void *)this + 3);
            uint64_t v29 = *((void *)this + 2);
            uint64_t v30 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v25 = *((unsigned __int16 *)this + 230);
            int v26 = *((unsigned __int8 *)this + 141);
            uint64_t v27 = (ImsPrefs *)SipStack::prefs(v5);
            if (v25 == 16000) {
              int v28 = 8000;
            }
            else {
              int v28 = 16000;
            }
            SDPTemplateBuilder::createInitialSecondAudioSettings((uint64_t)&v29, v28, v26 != 0, v27, (uint64_t)&v34);
            std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>((uint64_t)this + 592, (unsigned __int8 *)&v34);
            if (v35) {
              SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&v34.__r_.__value_.__l.__data_);
            }
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
          }
          goto LABEL_54;
        }
      }
      else
      {
LABEL_25:
        if (*((char *)this + 455) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)this + 54), *((void *)this + 55));
        }
        else
        {
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v12;
          v31.__r_.__value_.__r.__words[2] = *((void *)this + 56);
        }
        std::string::size_type v18 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v18 = v31.__r_.__value_.__l.__size_;
        }
        if (v18 == 3)
        {
          char v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v19 = &v31;
          }
          int data_low = LOWORD(v19->__r_.__value_.__l.__data_);
          int v21 = v19->__r_.__value_.__s.__data_[2];
          BOOL v23 = data_low == 19777 && v21 == 82;
        }
        else
        {
          BOOL v23 = 0;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_44;
        }
      }
      operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_44;
    }
  }
}

void sub_1C55A4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void SDPSession::initializeLazuliOffer(SDPSession *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"SDPSession::initializeLazuliOffer", 33);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C55A4264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SDPMedia *SDPSession::updatePortForMedia(uint64_t a1, unsigned int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = *(SDPMedia **)(v6 + 416);
  BOOL v8 = *(SDPMedia **)(v6 + 424);
  while (result != v8)
  {
    if (*((_DWORD *)result + 3) == a3)
    {
      uint64_t result = (SDPMedia *)SDPMedia::setPort(result, a2);
      break;
    }
    uint64_t result = (SDPMedia *)((char *)result + 200);
  }
  if (a3 == 4)
  {
    if (!*(_WORD *)(a1 + 142)) {
      *(_WORD *)(a1 + 142) = v4;
    }
    if (*(unsigned char *)(a1 + 1328))
    {
      int v9 = (_WORD *)(a1 + 1056);
      goto LABEL_14;
    }
  }
  else if (a3 == 2 && *(unsigned char *)(a1 + 584))
  {
    int v9 = (_WORD *)(a1 + 176);
LABEL_14:
    *int v9 = v4;
  }
  return result;
}

uint64_t SDPSession::enableRTCPBandwidthSpecifiers(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 16);
  for (uint64_t i = v1[52]; i != v1[53]; i += 200)
  {
    if (*(_DWORD *)(i + 12) == 2) {
      goto LABEL_6;
    }
  }
  uint64_t i = 0;
LABEL_6:
  uint64_t v3 = i + 112;
  for (uint64_t j = *(void *)(i + 120); j != v3; uint64_t j = *(void *)(j + 8))
  {
    if ((*(_DWORD *)(j + 28) - 3) <= 1) {
      *(unsigned char *)(j + 32) = 1;
    }
  }
  char v5 = v1 + 37;
  for (uint64_t k = v1[38]; (void *)k != v5; uint64_t k = *(void *)(k + 8))
  {
    if ((*(_DWORD *)(k + 28) - 3) <= 1) {
      *(unsigned char *)(k + 32) = 1;
    }
  }
  return this;
}

SDPMediaSettings *std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>(SDPMediaSettings *this, SDPMediaSettings *a2)
{
  if (*((unsigned char *)this + 296))
  {
    SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
    uint64_t v4 = *(void *)((char *)a2 + 285);
    *((void *)this + 35) = *((void *)a2 + 35);
    *(void *)((char *)this + 285) = v4;
  }
  else
  {
    SDPMediaSettings::SDPMediaSettings(this, a2);
    *(void *)this = &unk_1F20B97F8;
    *((void *)this + 35) = *((void *)a2 + 35);
    *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
    *((unsigned char *)this + 292) = *((unsigned char *)a2 + 292);
    *((unsigned char *)this + 296) = 1;
  }
  return this;
}

void SDPTTYBuilder::adjustModel(uint64_t a1, void *a2, const SDPMediaAudioSettings *a3, uint64_t a4, int a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v54 = *a2;
  uint64_t v55 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v52, a3);
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v51, a4);
  SDPAudioBuilder::adjustModel(a1, &v54, (uint64_t)v52, (uint64_t)v51, a5);
  if (v51[296]) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v51);
  }
  if (v53) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v52);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (*(unsigned char *)(a4 + 296))
  {
    uint64_t v12 = *(void *)(*a2 + 416);
    uint64_t v11 = *(void *)(*a2 + 424);
    if (v12 != v11)
    {
      while (*(_DWORD *)(v12 + 12) != 4)
      {
        v12 += 200;
        if (v12 == v11) {
          return;
        }
      }
      if (!*(unsigned char *)(a4 + 292)) {
        SDPMedia::setPort((SDPMedia *)v12, 0);
      }
      if (*(_WORD *)(a4 + 28) != 255)
      {
        uint64_t v36 = v12 + 40;
        std::__list_imp<SDPMediaFormatInfo>::clear((uint64_t *)(v12 + 40));
        int v13 = *(unsigned __int16 *)(a4 + 288);
        if (v13 != 255)
        {
          long long v67 = 1uLL;
          uint64_t v79 = 0;
          long long v78 = 0u;
          long long v77 = 0u;
          long long v76 = 0u;
          *(void *)&long long v71 = 0x10000;
          long long v69 = 0xFFuLL;
          char v65 = &unk_1F20DB438;
          *(void *)&long long v66 = (unsigned __int16)v13;
          long long v68 = 0uLL;
          *((void *)&v66 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E7518;
          long long v70 = 0uLL;
          long long v72 = 1uLL;
          long long v74 = 0xFFuLL;
          long long v73 = 0uLL;
          *((void *)&v71 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20B3A68;
          long long v75 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(__p, "red");
          SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v56, v13, (long long *)__p, 1000, 1);
          LOBYTE(v67) = v57;
          std::string::operator=((std::string *)((char *)&v67 + 8), &v58);
          LOWORD(v69) = v59;
          std::string::operator=((std::string *)((char *)&v69 + 8), &v62);
          LODWORD(v7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v63;
          SDPMediaRTPMap::~SDPMediaRTPMap(&v56);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
          __int16 v14 = *(_WORD *)(a4 + 28);
          SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v40, *(_WORD *)(a4 + 288));
          v40[0] = &unk_1F20E2A10;
          __int16 v44 = v14;
          SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v56, v43);
          uint64_t v56 = &unk_1F20E2A10;
          __int16 v60 = v44;
          int v64 = 5;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v65, (uint64_t)&v56);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v56);
          v40[0] = &unk_1F20E5C78;
          if (v42 < 0) {
            operator delete(v41);
          }
          uint64_t v15 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v36, 0, 0, (uint64_t)&v65);
          v15[1] = v36;
          uint64_t v16 = *(void *)(v12 + 40);
          *uint64_t v15 = v16;
          *(void *)(v16 + 8) = v15;
          *(void *)(v12 + 40) = v15;
          ++*(void *)(v12 + 56);
          char v65 = &unk_1F20DB438;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v71 + 2);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v66 + 1);
        }
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        uint64_t v79 = 0;
        long long v78 = 0u;
        long long v77 = 0u;
        long long v76 = 0u;
        long long v75 = 0u;
        long long v74 = 0u;
        long long v73 = 0u;
        long long v72 = 0u;
        long long v71 = 0u;
        long long v70 = 0u;
        long long v69 = 0u;
        __int16 v17 = *(_WORD *)(a4 + 28);
        char v65 = &unk_1F20DB438;
        LOWORD(v66) = v17;
        LOBYTE(v67) = 1;
        long long v68 = 0uLL;
        *((void *)&v67 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        *((void *)&v66 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E7518;
        LOWORD(v69) = 255;
        *((void *)&v69 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        long long v70 = 0uLL;
        LODWORD(v7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0x10000;
        long long v72 = 1uLL;
        long long v74 = 0xFFuLL;
        long long v73 = 0uLL;
        *((void *)&v71 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20B3A68;
        long long v75 = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(v47, "t140");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v56, v17, (long long *)v47, 1000, 1);
        LOBYTE(v67) = v57;
        std::string::operator=((std::string *)((char *)&v67 + 8), &v58);
        LOWORD(v69) = v59;
        std::string::operator=((std::string *)((char *)&v69 + 8), &v62);
        LODWORD(v7bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v63;
        SDPMediaRTPMap::~SDPMediaRTPMap(&v56);
        if (v48 < 0) {
          operator delete(v47[0]);
        }
        int v18 = *(_DWORD *)(a4 + 280);
        std::string::size_type v19 = *(void *)(a1 + 32);
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v40, *(_WORD *)(a4 + 28));
        v40[0] = &unk_1F20E2998;
        int v45 = v18;
        std::string::size_type v46 = v19;
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v56, v43);
        uint64_t v56 = &unk_1F20E2998;
        v62.__r_.__value_.__r.__words[0] = v46;
        int v61 = v45;
        int v64 = 4;
        SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v65, (uint64_t)&v56);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v56);
        v40[0] = &unk_1F20E5C78;
        if (v42 < 0) {
          operator delete(v41);
        }
        char v20 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v36, 0, 0, (uint64_t)&v65);
        v20[1] = v36;
        uint64_t v21 = *(void *)(v12 + 40);
        void *v20 = v21;
        *(void *)(v21 + 8) = v20;
        *(void *)(v12 + 40) = v20;
        ++*(void *)(v12 + 56);
        char v65 = &unk_1F20DB438;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v71 + 2);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v66 + 1);
      }
      uint64_t v22 = (std::__shared_weak_count *)a2[1];
      uint64_t v38 = *a2;
      uint64_t v39 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!*(unsigned char *)(a4 + 296)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (*(void *)(a1 + 32) <= *(void *)(a4 + 48)) {
        uint64_t v23 = *(void *)(a4 + 48);
      }
      else {
        uint64_t v23 = *(void *)(a1 + 32);
      }
      SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v38, v12, a4, v23);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      uint64_t v24 = v12 + 136;
      uint64_t v25 = *(void *)(v12 + 144);
      if (v12 + 136 != v25)
      {
        uint64_t v26 = *(void *)(v12 + 144);
        while (*(_DWORD *)(v26 + 136) != 4)
        {
          uint64_t v26 = *(void *)(v26 + 8);
          if (v24 == v26) {
            goto LABEL_58;
          }
        }
        uint64_t v27 = *(unsigned int *)(a4 + 40);
        if (!v27)
        {
          unsigned int v28 = *(_DWORD *)(a4 + 36);
          if (v28 <= 1) {
            uint64_t v27 = 1;
          }
          else {
            uint64_t v27 = v28;
          }
          unsigned int v37 = v27;
          std::string::basic_string[abi:ne180100]<0>(&v65, "sdp");
          std::string::basic_string[abi:ne180100]<0>(&v56, "");
          uint64_t v29 = ims::warn((uint64_t)&v65, (uint64_t)&v56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"The text direction was set to undefined, setting to ", 52);
          *(unsigned char *)(v29 + 17) = 0;
          ims::toString<MediaDirection>(&v37, v40);
          (*(void (**)(uint64_t, void **))(*(void *)v29 + 32))(v29, v40);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v29 + 17) = 0;
          if (SHIBYTE(v41) < 0) {
            operator delete(v40[0]);
          }
          if (v58.__r_.__value_.__s.__data_[7] < 0) {
            operator delete(v56);
          }
          if (SHIBYTE(v66) < 0) {
            operator delete(v65);
          }
          uint64_t v25 = *(void *)(v12 + 144);
        }
        while (1)
        {
          if (v24 == v25)
          {
            uint64_t v30 = 0;
            goto LABEL_57;
          }
          if (*(_DWORD *)(v25 + 136) == 4) {
            break;
          }
          uint64_t v25 = *(void *)(v25 + 8);
        }
        uint64_t v30 = v25 + 16;
LABEL_57:
        *(_DWORD *)(v30 + 40) = SDPModelBuilder::getResponseDirection(a1, v27, a5);
      }
LABEL_58:
      if (*(unsigned char *)(a4 + 272))
      {
        SDPMedia::mediaCryptoList((void *)v12, &v65);
        uint64_t v31 = v66;
        if ((void **)v66 != &v65)
        {
          uint64_t v32 = (char *)a3 + 192;
          if (!*((unsigned char *)a3 + 272)) {
            uint64_t v32 = 0;
          }
          int v33 = *((unsigned __int16 *)v32 + 20);
          do
          {
            uint64_t v34 = *(void *)(v31 + 16);
            if (*(unsigned __int16 *)(v34 + 40) == v33)
            {
              if (*(unsigned char *)(a4 + 272)) {
                uint64_t v35 = a4 + 192;
              }
              else {
                uint64_t v35 = 0;
              }
              *(unsigned char *)(v34 + 73) = *(unsigned char *)(v35 + 73);
              *(_WORD *)(v34 + 74) = *(_WORD *)(v35 + 74);
            }
            uint64_t v31 = *(void *)(v31 + 8);
          }
          while ((void **)v31 != &v65);
        }
        std::__list_imp<unsigned long long>::clear(&v65);
      }
    }
  }
}

void sub_1C55A4D74(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int16 v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 200;
      __int16 v7 = v4 - 200;
      BOOL v8 = v4 - 200;
      do
      {
        int v9 = *(void (***)(char *))v8;
        v8 -= 200;
        (*v9)(v7);
        v6 -= 200;
        BOOL v10 = v7 == v2;
        __int16 v7 = v8;
      }
      while (!v10);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<SDPMedia>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SDPMedia>,SDPMedia*,SDPMedia*,SDPMedia*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C55A5074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<SDPMedia>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[200 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SDPMedia>,SDPMedia*,SDPMedia*,SDPMedia*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      SDPMedia::SDPMedia((SDPMedia *)(a4 + v7), (const SDPMedia *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C55A514C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 200;
    do
    {
      (**(void (***)(void))(v4 + v2))();
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

double std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>(SDPMediaSettings *this, SDPMediaSettings *a2)
{
  if (*((unsigned __int8 *)this + 296) == *((unsigned __int8 *)a2 + 296))
  {
    if (*((unsigned char *)this + 296))
    {
      SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
      uint64_t v5 = *(void *)((char *)a2 + 285);
      *((void *)this + 35) = *((void *)a2 + 35);
      *(void *)((char *)this + 285) = v5;
    }
  }
  else if (*((unsigned char *)this + 296))
  {
    SDPMediaSettings::~SDPMediaSettings(this);
    *((unsigned char *)this + 296) = 0;
  }
  else
  {
    SDPMediaSettings::SDPMediaSettings(this, a2);
    *(void *)this = &unk_1F20B97F8;
    double result = *((double *)a2 + 35);
    *((double *)this + 35) = result;
    *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
    *((unsigned char *)this + 292) = *((unsigned char *)a2 + 292);
    *((unsigned char *)this + 296) = 1;
  }
  return result;
}

SDPMediaAudioSettings *std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaAudioSettings *this, const SDPMediaAudioSettings *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 432) = 0;
  if (*((unsigned char *)a2 + 432))
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings(this, a2);
    *((unsigned char *)this + 432) = 1;
  }
  return this;
}

void sub_1C55A528C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 432)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

SDPMediaSettings *std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaSettings *a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *((unsigned char *)a1 + 296) = 0;
  std::__optional_storage_base<SDPMediaTTYSettings,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<SDPMediaTTYSettings,false> const&>(a1, a2);
  return a1;
}

void sub_1C55A52D8(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 296)) {
    SDPMediaSettings::~SDPMediaSettings(v1);
  }
  _Unwind_Resume(exception_object);
}

double std::__optional_storage_base<SDPMediaTTYSettings,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<SDPMediaTTYSettings,false> const&>(SDPMediaSettings *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 296))
  {
    SDPMediaSettings::SDPMediaSettings(a1, (const SDPMediaSettings *)a2);
    *(void *)uint64_t v3 = &unk_1F20B97F8;
    double result = *(double *)(a2 + 280);
    *(double *)(v3 + 280) = result;
    *(_DWORD *)(v3 + 288) = *(_DWORD *)(a2 + 288);
    *(unsigned char *)(v3 + 292) = *(unsigned char *)(a2 + 292);
    *(unsigned char *)(v3 + 296) = 1;
  }
  return result;
}

void std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(a1 + 432) == a2[432])
  {
    if (*(unsigned char *)(a1 + 432))
    {
      SDPMediaAudioSettings::operator=(a1, (uint64_t)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 432))
  {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)a1);
    *(unsigned char *)(v2 + 432) = 0;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a1, (const SDPMediaAudioSettings *)a2);
    *(unsigned char *)(v3 + 432) = 1;
  }
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPRTCPXR>(const SDPRTCPXR *a1)
{
  uint64_t v2 = operator new(0x90uLL);
  void *v2 = 0;
  v2[1] = 0;
  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)(v2 + 2), a1);
  *((_DWORD *)v2 + 34) = 0;
  return v2;
}

void sub_1C55A53FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *BambiDeregisterHandler::BambiDeregisterHandler(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20DEC98;
  a1[3] = 0;
  a1[4] = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 5));
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  a1[3] = v5;
  a1[4] = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  a1[18] = a1;
  return a1;
}

void sub_1C55A548C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::handleUpdateRegistration(int8x8_t *this)
{
  if (this[23].i32[0] == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Resetting state due to registration update while SRVCC cleanup is pending", 73);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    this[23] = 0;
  }
  else
  {
    BambiDeregisterHandler::stop(this);
  }
}

void sub_1C55A55B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *BambiDeregisterHandler::stop(int8x8_t *this)
{
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[6], (unsigned __int8 *)&kBambiDeregisterTimer);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "bambi");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stopping timer for ", 19);
    *(unsigned char *)(v3 + 17) = 0;
    unsigned int v4 = this[23].i32[0] - 1;
    if (v4 > 2) {
      uint64_t v5 = "Unknown";
    }
    else {
      uint64_t v5 = off_1E6511B88[v4];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    return SipTimerContainer::cancelTimer(this + 5, &kBambiDeregisterTimer);
  }
  return result;
}

void sub_1C55A5740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::handleEndRegistration(int8x8_t *this, int a2)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"local deregistration requested", 30);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    int v4 = 1;
  }
  else
  {
    int v4 = 2;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[6], (unsigned __int8 *)&kBambiDeregisterTimer))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"end registration requested, terminate immediately", 49);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    this[23].i32[1] = v4;
LABEL_21:
    BambiDeregisterHandler::performAction((BambiDeregisterHandler *)this);
    return;
  }
  __int32 v5 = this[23].i32[0];
  if (v5 != 1)
  {
    if (v5 != 2) {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"deregister requested during voice service fallback, dropping registration silently", 82);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    this[23].i32[1] = 1;
    BambiDeregisterHandler::stop(this);
    goto LABEL_21;
  }
  if (this[23].i32[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ignoring deregister, deregister already pending or registration state will be dropped silently", 94);
  }
  else
  {
    this[23].i32[1] = v4;
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"deferring deregister request during SRVCC cleanup", 49);
  }
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C55A5B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::performAction(BambiDeregisterHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *((void *)this + 3);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 144);
        if (v6)
        {
          uint64_t v8 = *(void *)(v6 + 248);
          uint64_t v7 = *(std::__shared_weak_count **)(v6 + 256);
          if (v7)
          {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
          if (v8)
          {
            int v9 = *((_DWORD *)this + 47);
            if (v9 == 2)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "bambi");
              std::string::basic_string[abi:ne180100]<0>(v23, "");
              uint64_t v13 = ims::debug((uint64_t)v25, (uint64_t)v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"performing termination of registration due to ", 46);
              *(unsigned char *)(v13 + 17) = 0;
              unsigned int v14 = *((_DWORD *)this + 46) - 1;
              if (v14 > 2) {
                uint64_t v15 = "Unknown";
              }
              else {
                uint64_t v15 = off_1E6511B88[v14];
              }
              std::string::basic_string[abi:ne180100]<0>(&v21, v15);
              LoggableString::LoggableString(&__p, &v21);
              (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v13 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v21.__r_.__value_.__l.__data_);
              }
              if (v24 < 0) {
                operator delete(v23[0]);
              }
              if (v26 < 0) {
                operator delete(v25[0]);
              }
              SipStack::endRegistration((SipStack *)v5);
            }
            else if (v9 == 1)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "bambi");
              std::string::basic_string[abi:ne180100]<0>(v23, "");
              uint64_t v10 = ims::debug((uint64_t)v25, (uint64_t)v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"performing silent drop of registration due to ", 46);
              *(unsigned char *)(v10 + 17) = 0;
              unsigned int v11 = *((_DWORD *)this + 46) - 1;
              if (v11 > 2) {
                char v12 = "Unknown";
              }
              else {
                char v12 = off_1E6511B88[v11];
              }
              std::string::basic_string[abi:ne180100]<0>(&v21, v12);
              LoggableString::LoggableString(&__p, &v21);
              (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &__p);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v10 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v21.__r_.__value_.__l.__data_);
              }
              if (v24 < 0) {
                operator delete(v23[0]);
              }
              if (v26 < 0) {
                operator delete(v25[0]);
              }
              unsigned int v16 = *((_DWORD *)this + 46) - 1;
              if (v16 > 2) {
                uint64_t v17 = 3;
              }
              else {
                uint64_t v17 = *(unsigned int *)&asc_1C56DA21C[4 * v16];
              }
              uint64_t v18 = *(void *)(v5 + 144);
              uint64_t v19 = *(void *)(v18 + 248);
              char v20 = *(std::__shared_weak_count **)(v18 + 256);
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v19 + 168))(v19, v17, 0, 0);
              if (v20) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
              }
              SipTransportLayer::removeConnections(*(SipTransportLayer **)(v5 + 160), 0, 1, 1);
            }
            *((void *)this + 23) = 0;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55A5F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void BambiDeregisterHandler::start(int8x8_t *a1, __int32 a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&a1[6], (unsigned __int8 *)&kBambiDeregisterTimer))
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "bambi");
    std::string::basic_string[abi:ne180100]<0>(v26, "");
    uint64_t v6 = ims::debug((uint64_t)v28, (uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"timer already started with reason ", 34);
    *(unsigned char *)(v6 + 17) = 0;
    unsigned int v7 = a1[23].i32[0] - 1;
    if (v7 > 2) {
      uint64_t v8 = "Unknown";
    }
    else {
      uint64_t v8 = off_1E6511B88[v7];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }
  else
  {
    a1[23].i32[0] = a2;
    a1[23].i32[1] = 0;
    int v9 = (std::__shared_weak_count *)a1[4];
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        int8x8_t v11 = a1[3];
        if (v11)
        {
          if (a2 == 1)
          {
            char v12 = *(SipUserAgent **)(*(void *)&v11 + 144);
            if (v12) {
              a1[23].i32[1] = *(unsigned __int8 *)(SipUserAgent::config(v12) + 1121);
            }
          }
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "bambi");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      uint64_t v13 = ims::debug((uint64_t)v28, (uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"starting timer for ", 19);
      *(unsigned char *)(v13 + 17) = 0;
      unsigned int v14 = a1[23].i32[0] - 1;
      if (v14 > 2) {
        uint64_t v15 = "Unknown";
      }
      else {
        uint64_t v15 = off_1E6511B88[v14];
      }
      std::string::basic_string[abi:ne180100]<0>(&v24, v15);
      LoggableString::LoggableString(&__p, &v24);
      (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" with action ", 13);
      *(unsigned char *)(v13 + 17) = 0;
      __int32 v16 = a1[23].i32[1];
      uint64_t v17 = "None";
      if (v16 == 2) {
        uint64_t v17 = "Deregister";
      }
      if (v16 == 1) {
        uint64_t v18 = "Drop";
      }
      else {
        uint64_t v18 = (char *)v17;
      }
      std::string::basic_string[abi:ne180100]<0>(&v22, v18);
      LoggableString::LoggableString(&v23, &v22);
      (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" and timeout ", 13);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      int8x8_t v20 = a1[1];
      uint64_t v19 = (std::__shared_weak_count *)a1[2];
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = 0;
      std::string v21 = operator new(0x20uLL);
      *std::string v21 = &unk_1F20DED18;
      v21[1] = a1;
      void v21[2] = v20;
      void v21[3] = v19;
      uint64_t v31 = v21;
      SipTimerContainer::startTimer(a1 + 5, (uint64_t)&kBambiDeregisterTimer);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v30);
      if (v19)
      {
        std::__shared_weak_count::__release_weak(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      a1[23].i32[1] = 1;
      BambiDeregisterHandler::performAction((BambiDeregisterHandler *)a1);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C55A6430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::handleTimer(BambiDeregisterHandler *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 20) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, &kBambiDeregisterTimer, *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_13;
  }
  if (!a2[23])
  {
LABEL_13:
    BambiDeregisterHandler::performAction(this);
    return;
  }
  uint64_t v5 = &kBambiDeregisterTimer;
  while (*a2 == v5->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    uint64_t v5 = (std::string *)((char *)v5 + 1);
    if (!--v2) {
      goto LABEL_13;
    }
  }
}

void BambiDeregisterHandler::~BambiDeregisterHandler(BambiDeregisterHandler *this)
{
  BambiDeregisterHandler::~BambiDeregisterHandler(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1F20DEC98;
  SipTimerContainer::~SipTimerContainer((BambiDeregisterHandler *)((char *)this + 40));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BambiDeregisterHandler::loggableName(LoggableString *a1@<X8>)
{
}

void *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DED18;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20DED18;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20DED18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DED18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unsigned int v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55A6904(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes(uint64_t a1, long long **a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "accept-wrapped-types");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v6;
  }
  *(void *)a1 = &unk_1F20DED98;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1C55A6A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes(SDPMediaAcceptWrappedTypes *this, const SDPMediaAcceptWrappedTypes *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20DED98;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
}

void sub_1C55A6B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(void **this)
{
  *this = &unk_1F20DED98;
  uint64_t v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SDPMediaAcceptWrappedTypes::value@<X0>(SDPMediaAcceptWrappedTypes *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v4 = *((void *)this + 6) - *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 / 24;
    unint64_t v8 = v7 - 1;
    if (v7 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v7;
    }
    do
    {
      uint64_t v10 = *((void *)this + 5) + v5;
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = *((void *)this + 5) + v5;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v12, v13);
      if (v6 < v8) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      }
      ++v6;
      v5 += 24;
    }
    while (v9 != v6);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(void *)&v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(*(void *)&v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v15[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v19);
}

void sub_1C55A6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *SDPMediaAcceptWrappedTypes::key@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "accept-wrapped-types");
}

void *SDPModel::SDPModel(void *a1, uint64_t *a2)
{
  *((unsigned char *)a1 + 8) = 1;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F20DEF68;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 32);
  *((unsigned char *)a1 + 48) = 1;
  a1[4] = v5;
  a1[5] = &unk_1F20E7748;
  *((unsigned char *)a1 + 64) = 1;
  a1[7] = &unk_1F20CB730;
  a1[10] = 0;
  unint64_t v6 = (std::string *)(a1 + 10);
  *((_DWORD *)a1 + 17) = 0;
  *((_DWORD *)a1 + 18) = 0;
  *((_WORD *)a1 + 52) = 0;
  a1[11] = 0;
  a1[12] = 0;
  if (*(char *)(v4 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 14), *(const std::string::value_type **)(v4 + 112), *(void *)(v4 + 120));
  }
  else
  {
    long long v7 = *(_OWORD *)(v4 + 112);
    a1[16] = *(void *)(v4 + 128);
    *((_OWORD *)a1 + 7) = v7;
  }
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(v4 + 136);
  unint64_t v8 = (const std::string *)(v4 + 56);
  if (SDPConnection::valid(v8))
  {
    SDPConnection::SDPConnection((uint64_t)&v34, (uint64_t)v8);
    *((unsigned char *)a1 + 64) = v35[0];
    *(void *)((char *)a1 + 68) = *(void *)&v35[4];
    std::string::operator=(v6, &__p);
    *((_WORD *)a1 + 52) = v37;
    uint64_t v34 = &unk_1F20CB730;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v9 = *a2;
  if (*(char *)(*a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 19), *(const std::string::value_type **)(v9 + 152), *(void *)(v9 + 160));
  }
  else
  {
    long long v10 = *(_OWORD *)(v9 + 152);
    a1[21] = *(void *)(v9 + 168);
    *(_OWORD *)(a1 + 19) = v10;
  }
  uint64_t v11 = *a2;
  if (*(char *)(*a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 22), *(const std::string::value_type **)(v11 + 176), *(void *)(v11 + 184));
  }
  else
  {
    long long v12 = *(_OWORD *)(v11 + 176);
    a1[24] = *(void *)(v11 + 192);
    *((_OWORD *)a1 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12;
  }
  uint64_t v13 = *a2;
  if (*(char *)(*a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 25), *(const std::string::value_type **)(v13 + 200), *(void *)(v13 + 208));
  }
  else
  {
    long long v14 = *(_OWORD *)(v13 + 200);
    a1[27] = *(void *)(v13 + 216);
    *(_OWORD *)(a1 + 25) = v14;
  }
  std::list<std::string>::list(a1 + 28, *a2 + 224);
  std::list<std::string>::list(a1 + 31, *a2 + 248);
  a1[34] = a1 + 34;
  a1[35] = a1 + 34;
  a1[36] = 0;
  a1[37] = a1 + 37;
  a1[38] = a1 + 37;
  a1[39] = 0;
  a1[40] = a1 + 40;
  a1[41] = a1 + 40;
  a1[42] = 0;
  *((unsigned char *)a1 + 344) = 0;
  *((unsigned char *)a1 + 384) = 0;
  a1[49] = a1 + 49;
  a1[50] = a1 + 49;
  *(_OWORD *)(a1 + 5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  uint64_t v15 = *a2;
  uint64_t v16 = *a2 + 272;
  uint64_t v17 = *(void *)(*a2 + 280);
  if (v17 != v16)
  {
    do
    {
      long long v18 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>((uint64_t)(a1 + 34), 0, 0, v17 + 16);
      v18[1] = a1 + 34;
      uint64_t v19 = a1[34];
      *long long v18 = v19;
      *(void *)(v19 + 8) = v18;
      a1[34] = v18;
      ++a1[36];
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17 != v16);
    uint64_t v15 = *a2;
  }
  for (uint64_t i = *(void *)(v15 + 304); i != v15 + 296; uint64_t i = *(void *)(i + 8))
  {
    std::string v21 = (char *)operator new(0x38uLL);
    v21[24] = *(unsigned char *)(i + 24);
    *((void *)v21 + 2) = &unk_1F20BAA28;
    long long v22 = *(_OWORD *)(i + 28);
    *(_OWORD *)(v21 + 38) = *(_OWORD *)(i + 38);
    *(_OWORD *)(v21 + 28) = v22;
    uint64_t v23 = a1[37];
    *(void *)std::string v21 = v23;
    *((void *)v21 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a1 + 37;
    *(void *)(v23 + 8) = v21;
    a1[37] = v21;
    ++a1[39];
  }
  uint64_t v24 = *(void *)(v15 + 328);
  if (v24 != v15 + 320)
  {
    do
    {
      uint64_t v25 = operator new(0x48uLL);
      *uint64_t v25 = 0;
      v25[1] = 0;
      SDPTiming::SDPTiming((SDPTiming *)(v25 + 2), (const SDPTiming *)(v24 + 16));
      uint64_t v26 = a1[40];
      *uint64_t v25 = v26;
      v25[1] = a1 + 40;
      *(void *)(v26 + 8) = v25;
      a1[40] = v25;
      ++a1[42];
      uint64_t v24 = *(void *)(v24 + 8);
    }
    while (v24 != v15 + 320);
    uint64_t v15 = *a2;
  }
  if (*(unsigned char *)(v15 + 384))
  {
    v35[0] = 1;
    uint64_t v34 = &unk_1F20E6838;
    std::list<std::pair<unsigned long long,long>>::list(&v35[8], v15 + 360);
    std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>((uint64_t)(a1 + 43), (uint64_t)&v34);
    uint64_t v34 = &unk_1F20E6838;
    std::__list_imp<unsigned long long>::clear(&v35[8]);
    uint64_t v15 = *a2;
  }
  uint64_t v27 = *(void *)(v15 + 400);
  if (v27 != v15 + 392)
  {
    do
    {
      uint64_t v34 = a1;
      *(void *)uint64_t v35 = a1;
      uint64_t v28 = *(unsigned int *)(v27 + 136);
      if (v28 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      uint64_t v38 = &v34;
      ((void (*)(void ***, uint64_t))off_1F20DEE28[v28])(&v38, v27 + 16);
      uint64_t v27 = *(void *)(v27 + 8);
    }
    while (v27 != v15 + 392);
    uint64_t v15 = *a2;
  }
  uint64_t v30 = *(const SDPMedia **)(v15 + 416);
  char v29 = *(const SDPMedia **)(v15 + 424);
  while (v30 != v29)
  {
    SDPMedia::SDPMedia((SDPMedia *)&v34, v30, (SDPModel *)a1);
    unint64_t v31 = a1[53];
    if (v31 >= a1[54])
    {
      uint64_t v32 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>(a1 + 52, (const SDPMedia *)&v34);
    }
    else
    {
      SDPMedia::SDPMedia((SDPMedia *)a1[53], (const SDPMedia *)&v34);
      uint64_t v32 = v31 + 200;
      a1[53] = v31 + 200;
    }
    a1[53] = v32;
    SDPMedia::~SDPMedia((SDPMedia *)&v34);
    uint64_t v30 = (const SDPMedia *)((char *)v30 + 200);
  }
  return a1;
}

void sub_1C55A737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 199) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v26 + 175) < 0) {
    operator delete(*a12);
  }
  SDPOrigin::~SDPOrigin(v27);
  char v29 = *(std::__shared_weak_count **)(v26 + 24);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(a1);
}

void SDPModel::~SDPModel(SDPModel *this)
{
  *(void *)this = &unk_1F20DEF68;
  uint64_t v3 = (void **)((char *)this + 416);
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 98);
  if (*((unsigned char *)this + 384))
  {
    *((void *)this + 43) = &unk_1F20E6838;
    std::__list_imp<unsigned long long>::clear((void *)this + 45);
  }
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 40);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 37);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 34);
  std::__list_imp<std::string>::clear((void *)this + 31);
  std::__list_imp<std::string>::clear((void *)this + 28);
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  SDPOrigin::~SDPOrigin((void **)this + 5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  uint64_t vars8;

  SDPModel::~SDPModel(this);
  JUMPOUT(0x1C878E320);
}

void SDPModel::toStream(SDPModel *this, ImsOutStream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 118;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (SDPOrigin::valid((SDPModel *)((char *)this + 40)))
  {
    SDPOrigin::toStream((SDPModel *)((char *)this + 40), a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  unint64_t v6 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 115;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  long long v7 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 152);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v8 = *((unsigned __int8 *)this + 199);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)this + 23);
  }
  if (v8)
  {
    uint64_t v9 = (void *)*((void *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    long long v10 = (void *)*((void *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 176);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  uint64_t v11 = *((unsigned __int8 *)this + 223);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)this + 26);
  }
  if (v11)
  {
    long long v12 = (void *)*((void *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v13 = (void *)*((void *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  for (uint64_t i = *((void *)this + 29); (SDPModel *)i != (SDPModel *)((char *)this + 224); uint64_t i = *(void *)(i + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 16), *(void *)(i + 24));
    }
    else {
      std::string __p = *(std::string *)(i + 16);
    }
    uint64_t v15 = (void *)*((void *)a2 + 1);
    LOBYTE(p_p) = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&p_p, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v16 = (void *)*((void *)a2 + 1);
    LOBYTE(p_p) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&p_p, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = *((void *)this + 32); (SDPModel *)j != (SDPModel *)((char *)this + 248); uint64_t j = *(void *)(j + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(j + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(j + 16), *(void *)(j + 24));
    }
    else {
      std::string __p = *(std::string *)(j + 16);
    }
    long long v18 = (void *)*((void *)a2 + 1);
    LOBYTE(p_p) = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&p_p, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v19 = (void *)*((void *)a2 + 1);
    LOBYTE(p_p) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&p_p, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t k = (void *)*((void *)this + 35); k != (void *)((char *)this + 272); uint64_t k = (void *)*(v21 - 1))
  {
    uint64_t v22 = k[2];
    std::string v21 = k + 2;
    (*(void (**)(void *, ImsOutStream *))(v22 + 16))(v21, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  for (m = (void *)*((void *)this + 38); m != (void *)((char *)this + 296); m = (void *)m[1])
  {
    BOOL isHeld = SDPModel::isHeld(this);
    SDPBandwidth::toStream((SDPBandwidth *)(m + 2), a2, isHeld);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  for (n = (void *)*((void *)this + 41); n != (void *)((char *)this + 320); n = (void *)*(v26 - 1))
  {
    uint64_t v27 = n[2];
    uint64_t v26 = n + 2;
    (*(void (**)(void *, ImsOutStream *))(v27 + 16))(v26, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((unsigned char *)this + 384))
  {
    (*(void (**)(char *, ImsOutStream *))(*((void *)this + 43) + 16))((char *)this + 344, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  for (iuint64_t i = *((void *)this + 50); (SDPModel *)ii != (SDPModel *)((char *)this + 392); iuint64_t i = *(void *)(ii + 8))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
    uint64_t v29 = *(unsigned int *)(ii + 136);
    if (v29 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    p_p = &__p;
    ((void (*)(std::string **, uint64_t))off_1F20DEEC0[v29])(&p_p, ii + 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
  }
  uint64_t v30 = (void *)*((void *)this + 52);
  unint64_t v31 = (void *)*((void *)this + 53);
  if (v30 != v31)
  {
    uint64_t v32 = (void *)*((void *)this + 52);
    int v33 = v32;
    do
    {
      uint64_t v34 = *v33;
      v33 += 25;
      (*(void (**)(void *, ImsOutStream *))(v34 + 16))(v32, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
      *((unsigned char *)a2 + 17) = 0;
      v30 += 25;
      uint64_t v32 = v33;
    }
    while (v33 != v31);
  }
}

void sub_1C55A7CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPModel::isHeld(SDPModel *this)
{
  uint64_t v1 = *((void *)this + 50);
  if ((SDPModel *)v1 == (SDPModel *)((char *)this + 392)) {
    goto LABEL_9;
  }
  uint64_t v2 = *((void *)this + 50);
  while (*(_DWORD *)(v2 + 136) != 4)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if ((SDPModel *)v2 == (SDPModel *)((char *)this + 392)) {
      goto LABEL_9;
    }
  }
  while (*(_DWORD *)(v1 + 136) != 4)
    uint64_t v1 = *(void *)(v1 + 8);
  if (*(_DWORD *)(v1 + 56) != 1) {
    return 1;
  }
LABEL_9:
  for (uint64_t i = *((void *)this + 52); ; i += 200)
  {
    if (i == *((void *)this + 53)) {
      return 0;
    }
    if (*(_DWORD *)(i + 12) == 2)
    {
      uint64_t v4 = *(void *)(i + 144);
      if (v4 != i + 136) {
        break;
      }
    }
LABEL_16:
    ;
  }
  uint64_t v5 = *(void *)(i + 144);
  while (*(_DWORD *)(v5 + 136) != 4)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == i + 136) {
      goto LABEL_16;
    }
  }
  while (*(_DWORD *)(v4 + 136) != 4)
    uint64_t v4 = *(void *)(v4 + 8);
  return *(_DWORD *)(v4 + 56) != 1;
}

BOOL SDPModel::valid(SDPModel *this)
{
  uint64_t v2 = (char *)this + 272;
  for (uint64_t i = *((void *)this + 35); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    if (((*(uint64_t (**)(void))(*(void *)(i + 16) + 24))() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel::valid() Invalid connection", 36);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  for (uint64_t j = (void *)*((void *)this + 38); j != (void *)((char *)this + 296); uint64_t j = (void *)j[1])
  {
    if (((*(uint64_t (**)(void))(j[2] + 24))() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel::valid() Invalid bandwidth", 35);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  for (uint64_t k = (void *)*((void *)this + 41); k != (void *)((char *)this + 320); uint64_t k = (void *)k[1])
  {
    if (((*(uint64_t (**)(void))(k[2] + 24))() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel::valid() Invalid timing", 32);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  if (*((unsigned char *)this + 384) && ((*(uint64_t (**)(void))(*((void *)this + 43) + 24))() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.model");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel::valid() Invalid timezone", 34);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(unsigned char *)(v10 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    return 0;
  }
  uint64_t v6 = *((void *)this + 52);
  uint64_t v7 = *((void *)this + 53);
  if (v6 != v7)
  {
    uint64_t v8 = *((void *)this + 52);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8) & 1) != 0)
    {
      v8 += 200;
      v6 += 200;
      if (v8 == v7) {
        goto LABEL_19;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.model");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"SDPModel::valid() Invalid media", 31);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
LABEL_19:
  if (!*((unsigned char *)this + 8) || *((void *)this + 4)) {
    return 0;
  }
  BOOL result = SDPOrigin::valid((SDPModel *)((char *)this + 40));
  if (result) {
    return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)this + 19, "");
  }
  return result;
}

void sub_1C55A8248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPModel::preferredDirection(void *a1, int a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = a1[50];
    if ((void *)v3 == a1 + 49)
    {
LABEL_6:
      unsigned int v5 = 0;
    }
    else
    {
      uint64_t v4 = a1[50];
      while (*(_DWORD *)(v4 + 136) != 4)
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if ((void *)v4 == a1 + 49) {
          goto LABEL_6;
        }
      }
      while (*(_DWORD *)(v3 + 136) != 4)
        uint64_t v3 = *(void *)(v3 + 8);
      unsigned int v5 = *(_DWORD *)(v3 + 56);
    }
    for (uint64_t i = a1[52]; ; i += 200)
    {
      if (i == a1[53])
      {
        if (v5 <= 1) {
          return 1;
        }
        else {
          return v5;
        }
      }
      if (*(_DWORD *)(i + 12) == a2)
      {
        uint64_t v7 = *(void *)(i + 144);
        if (v7 != i + 136)
        {
          uint64_t v8 = *(void *)(i + 144);
          while (*(_DWORD *)(v8 + 136) != 4)
          {
            uint64_t v8 = *(void *)(v8 + 8);
            if (v8 == i + 136) {
              goto LABEL_26;
            }
          }
          if (*(_DWORD *)(v7 + 136) == 4)
          {
            if (*(_DWORD *)(v7 + 56) > (signed int)v5) {
              goto LABEL_25;
            }
          }
          else
          {
            uint64_t v9 = *(void *)(i + 144);
            do
              uint64_t v9 = *(void *)(v9 + 8);
            while (*(_DWORD *)(v9 + 136) != 4);
            if (*(_DWORD *)(v9 + 56) > (signed int)v5)
            {
              do
                uint64_t v7 = *(void *)(v7 + 8);
              while (*(_DWORD *)(v7 + 136) != 4);
LABEL_25:
              unsigned int v5 = *(_DWORD *)(v7 + 56);
              continue;
            }
          }
        }
      }
LABEL_26:
      ;
    }
  }
  for (uint64_t j = a1[52]; j != a1[53]; j += 200)
  {
    if (*(_DWORD *)(j + 12) == a2)
    {
      uint64_t v11 = *(void *)(j + 144);
      if (v11 != j + 136)
      {
        uint64_t v12 = *(void *)(j + 144);
        while (*(_DWORD *)(v12 + 136) != 4)
        {
          uint64_t v12 = *(void *)(v12 + 8);
          if (v12 == j + 136) {
            goto LABEL_34;
          }
        }
        while (*(_DWORD *)(v11 + 136) != 4)
          uint64_t v11 = *(void *)(v11 + 8);
        return *(unsigned int *)(v11 + 56);
      }
    }
LABEL_34:
    ;
  }
  uint64_t v14 = a1[50];
  if ((void *)v14 == a1 + 49) {
    return 1;
  }
  uint64_t v15 = a1[50];
  while (*(_DWORD *)(v15 + 136) != 4)
  {
    uint64_t v15 = *(void *)(v15 + 8);
    if ((void *)v15 == a1 + 49) {
      return 1;
    }
  }
  while (*(_DWORD *)(v14 + 136) != 4)
    uint64_t v14 = *(void *)(v14 + 8);
  return *(unsigned int *)(v14 + 56);
}

void *SDPModel::hold(void *this)
{
  uint64_t v1 = this + 49;
  uint64_t v2 = this[50];
  if ((void *)v2 != this + 49)
  {
    uint64_t v3 = this[50];
    while (*(_DWORD *)(v3 + 136) != 4)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if ((void *)v3 == v1) {
        goto LABEL_17;
      }
    }
    uint64_t v4 = this[50];
    while (*(_DWORD *)(v4 + 136) != 4)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if ((void *)v4 == v1)
      {
        uint64_t v5 = 0;
        goto LABEL_12;
      }
    }
    uint64_t v5 = v4 + 16;
LABEL_12:
    while (*(_DWORD *)(v2 + 136) != 4)
      uint64_t v2 = *(void *)(v2 + 8);
    if (((*(_DWORD *)(v2 + 56) - 2) & 0xFFFFFFFD) != 0) {
      int v6 = 3;
    }
    else {
      int v6 = 4;
    }
    *(_DWORD *)(v5 + 40) = v6;
  }
LABEL_17:
  for (uint64_t i = this[38]; (void *)i != this + 37; uint64_t i = *(void *)(i + 8))
  {
    if ((*(_DWORD *)(i + 28) - 3) <= 1) {
      *(unsigned char *)(i + 32) = 1;
    }
  }
  uint64_t v8 = this[52];
  for (uint64_t j = this[53]; v8 != j; v8 += 200)
  {
    int v10 = *(_DWORD *)(v8 + 12);
    if (v10 == 2)
    {
      uint64_t v14 = v8 + 136;
      uint64_t v15 = *(void *)(v8 + 144);
      if (v15 != v8 + 136)
      {
        uint64_t v16 = *(void *)(v8 + 144);
        while (*(_DWORD *)(v16 + 136) != 4)
        {
          uint64_t v16 = *(void *)(v16 + 8);
          if (v16 == v14) {
            goto LABEL_58;
          }
        }
        uint64_t v19 = *(void *)(v8 + 144);
        while (*(_DWORD *)(v19 + 136) != 4)
        {
          uint64_t v19 = *(void *)(v19 + 8);
          if (v19 == v14)
          {
            uint64_t v20 = 0;
            goto LABEL_53;
          }
        }
        uint64_t v20 = v19 + 16;
LABEL_53:
        while (*(_DWORD *)(v15 + 136) != 4)
          uint64_t v15 = *(void *)(v15 + 8);
        if (((*(_DWORD *)(v15 + 56) - 2) & 0xFFFFFFFD) != 0) {
          int v22 = 3;
        }
        else {
          int v22 = 4;
        }
        *(_DWORD *)(v20 + 40) = v22;
      }
LABEL_58:
      for (uint64_t k = *(void *)(v8 + 120); k != v8 + 112; uint64_t k = *(void *)(k + 8))
      {
        if ((*(_DWORD *)(k + 28) - 3) <= 1) {
          *(unsigned char *)(k + 32) = 1;
        }
      }
    }
    else if (v10 == 4)
    {
      uint64_t v11 = v8 + 136;
      uint64_t v12 = *(void *)(v8 + 144);
      if (v12 != v8 + 136)
      {
        uint64_t v13 = *(void *)(v8 + 144);
        while (*(_DWORD *)(v13 + 136) != 4)
        {
          uint64_t v13 = *(void *)(v13 + 8);
          if (v13 == v11) {
            goto LABEL_49;
          }
        }
        uint64_t v17 = *(void *)(v8 + 144);
        while (*(_DWORD *)(v17 + 136) != 4)
        {
          uint64_t v17 = *(void *)(v17 + 8);
          if (v17 == v11)
          {
            uint64_t v18 = 0;
            goto LABEL_44;
          }
        }
        uint64_t v18 = v17 + 16;
LABEL_44:
        while (*(_DWORD *)(v12 + 136) != 4)
          uint64_t v12 = *(void *)(v12 + 8);
        if (((*(_DWORD *)(v12 + 56) - 2) & 0xFFFFFFFD) != 0) {
          int v21 = 3;
        }
        else {
          int v21 = 4;
        }
        *(_DWORD *)(v18 + 40) = v21;
      }
    }
LABEL_49:
    ;
  }
  return this;
}

void *SDPModel::resumeAllStreams(void *this, char a2)
{
  uint64_t v2 = this + 49;
  uint64_t v3 = this[50];
  if ((void *)v3 == this + 49) {
    goto LABEL_18;
  }
  uint64_t v4 = this[50];
  while (*(_DWORD *)(v4 + 136) != 4)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if ((void *)v4 == v2) {
      goto LABEL_18;
    }
  }
  uint64_t v5 = this[50];
  do
  {
    if (*(_DWORD *)(v5 + 136) == 4)
    {
      uint64_t v6 = v5 + 16;
      if ((a2 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_13:
      int v7 = 1;
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while ((void *)v5 != v2);
  uint64_t v6 = 0;
  if (a2) {
    goto LABEL_13;
  }
LABEL_10:
  while (*(_DWORD *)(v3 + 136) != 4)
    uint64_t v3 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v3 + 56) == 4) {
    int v7 = 2;
  }
  else {
    int v7 = 1;
  }
LABEL_17:
  *(_DWORD *)(v6 + 40) = v7;
LABEL_18:
  uint64_t v8 = this[52];
  uint64_t v9 = this[53];
  while (v8 != v9)
  {
    uint64_t v10 = v8 + 136;
    uint64_t v11 = *(void *)(v8 + 144);
    if (v11 != v8 + 136)
    {
      uint64_t v12 = *(void *)(v8 + 144);
      while (*(_DWORD *)(v12 + 136) != 4)
      {
        uint64_t v12 = *(void *)(v12 + 8);
        if (v12 == v10) {
          goto LABEL_37;
        }
      }
      uint64_t v13 = *(void *)(v8 + 144);
      while (*(_DWORD *)(v13 + 136) != 4)
      {
        uint64_t v13 = *(void *)(v13 + 8);
        if (v13 == v10)
        {
          uint64_t v14 = 0;
          if (a2) {
            goto LABEL_35;
          }
          goto LABEL_31;
        }
      }
      uint64_t v14 = v13 + 16;
      if (a2) {
        goto LABEL_35;
      }
LABEL_31:
      while (*(_DWORD *)(v11 + 136) != 4)
        uint64_t v11 = *(void *)(v11 + 8);
      if (*(_DWORD *)(v11 + 56) == 4)
      {
        int v15 = 2;
        goto LABEL_36;
      }
LABEL_35:
      int v15 = 1;
LABEL_36:
      *(_DWORD *)(v14 + 40) = v15;
    }
LABEL_37:
    v8 += 200;
  }
  return this;
}

void *SDPModel::setDirectionForSessionAndMedia(void *result, int a2)
{
  uint64_t v2 = result[50];
  if ((void *)v2 != result + 49)
  {
    uint64_t v3 = result[50];
    while (*(_DWORD *)(v3 + 136) != 4)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if ((void *)v3 == result + 49) {
        goto LABEL_9;
      }
    }
    while (*(_DWORD *)(v2 + 136) != 4)
      uint64_t v2 = *(void *)(v2 + 8);
    *(_DWORD *)(v2 + 56) = a2;
  }
LABEL_9:
  uint64_t v4 = result[52];
  uint64_t v5 = result[53];
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 144);
    if (v6 != v4 + 136)
    {
      uint64_t v7 = *(void *)(v4 + 144);
      while (*(_DWORD *)(v7 + 136) != 4)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v4 + 136) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(v6 + 136) != 4)
        uint64_t v6 = *(void *)(v6 + 8);
      *(_DWORD *)(v6 + 56) = a2;
    }
LABEL_19:
    v4 += 200;
  }
  return result;
}

uint64_t SDPModel::updateWithLocalAddressAndUsername(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t result = SDPOrigin::valid((SDPOrigin *)(a1 + 40));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 24))(a1 + 56);
    if (result)
    {
      std::string::operator=((std::string *)(a1 + 112), a3);
      memset(&__str, 0, sizeof(__str));
      IpAddress::asString(&__str);
    }
  }
  return result;
}

void sub_1C55A8984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPModel::removeTextSession(SDPModel *this)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "sdp");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SDPModel::removeTextSession", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v4 = *((void *)this + 52);
  uint64_t v3 = *((void *)this + 53);
  if (v3 != v4)
  {
    unint64_t v5 = (v3 - v4) / 200;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    while (*(_DWORD *)(v4 + 12) != 4)
    {
      v4 += 200;
      if (!--v5) {
        return;
      }
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SDPMedia *,SDPMedia *,SDPMedia *,0>(v4 + 200, v3, v4);
    uint64_t v7 = v6;
    uint64_t v8 = (void (***)(void))*((void *)this + 53);
    if (v8 != v6)
    {
      uint64_t v9 = v8 - 25;
      uint64_t v10 = v8 - 25;
      uint64_t v11 = v8 - 25;
      do
      {
        uint64_t v12 = *v11;
        v11 -= 25;
        (*v12)(v10);
        v9 -= 25;
        BOOL v13 = v10 == v7;
        uint64_t v10 = v11;
      }
      while (!v13);
    }
    *((void *)this + 53) = v7;
  }
}

void sub_1C55A8B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SDPModel::setMasterKeyAndSalt(void *result, int a2, char **a3)
{
  uint64_t v3 = result[52];
  for (uint64_t i = result[53]; v3 != i; v3 += 200)
  {
    if (*(_DWORD *)(v3 + 12) == a2)
    {
      SDPMedia::mediaCryptoList((void *)v3, v9);
      for (uint64_t j = (void *)v9[1]; j != v9; uint64_t j = (void *)j[1])
      {
        uint64_t v8 = (char **)(j[2] + 48);
        if (v8 != a3) {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *a3, a3[1], a3[1] - *a3);
        }
      }
      uint64_t result = std::__list_imp<unsigned long long>::clear(v9);
    }
  }
  return result;
}

void sub_1C55A8C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL SDPModel::hasPreconditions(SDPModel *this)
{
  for (uint64_t i = *((void *)this + 52); ; i += 200)
  {
    if (i == *((void *)this + 53)) {
      return 0;
    }
    if (*(_DWORD *)(i + 12) == 2) {
      break;
    }
  }
  uint64_t v3 = *(void *)(i + 160);
  uint64_t v2 = *(void *)(i + 168);
  if (v3 == v2) {
    return 0;
  }
  uint64_t v4 = v3 + 20;
  do
  {
    int v5 = *(_DWORD *)(v4 - 4);
    BOOL result = v5 > 0;
    BOOL v7 = v5 > 0 || v4 == v2;
    v4 += 20;
  }
  while (!v7);
  return result;
}

uint64_t SDPModel::containsPreconditions(uint64_t a1, int a2, int a3)
{
  for (uint64_t i = *(void *)(a1 + 416); ; i += 200)
  {
    if (i == *(void *)(a1 + 424)) {
      return 0;
    }
    if (*(_DWORD *)(i + 12) == 2) {
      break;
    }
  }
  uint64_t v5 = *(void *)(i + 160);
  uint64_t v4 = *(void *)(i + 168);
  if (v5 == v4) {
    return 0;
  }
  uint64_t v6 = v5 + 20;
  do
  {
    BOOL v7 = *(_DWORD *)(v6 - 12) != a2 || *(_DWORD *)(v6 - 4) < a3;
    uint64_t result = !v7;
    if (!v7) {
      break;
    }
    BOOL v9 = v6 == v4;
    v6 += 20;
  }
  while (!v9);
  return result;
}

uint64_t SDPModel::setPrecondition(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(result + 416);
  uint64_t v7 = *(void *)(result + 424);
  if (v6 != v7)
  {
    while (*(_DWORD *)(v6 + 12) != 2)
    {
      v6 += 200;
      if (v6 == v7) {
        return result;
      }
    }
    uint64_t v13 = 0x100000001;
    int v14 = a3;
    int v15 = a2;
    int v16 = a4;
    char v17 = 1;
    uint64_t v12 = (void **)(v6 + 160);
    SDPPreconditionTable::processPrecondition((void **)(v6 + 160), (int *)&v13);
    uint64_t v13 = 0x100000000;
    int v14 = 0;
    int v15 = a2;
    int v16 = a5;
    char v17 = 1;
    uint64_t result = SDPPreconditionTable::processPrecondition(v12, (int *)&v13);
    if (a6)
    {
      uint64_t v13 = 0x100000002;
      int v14 = 0;
      int v15 = a2;
      int v16 = a4;
      char v17 = 1;
      return SDPPreconditionTable::processPrecondition(v12, (int *)&v13);
    }
  }
  return result;
}

uint64_t SDPModel::setDesiredPrecondition(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(result + 416);
  uint64_t v4 = *(void *)(result + 424);
  if (v5 != v4)
  {
    while (*(_DWORD *)(v5 + 12) != 2)
    {
      v5 += 200;
      if (v5 == v4) {
        return result;
      }
    }
    if (a3 == 4) {
      SDPMedia::setPort((SDPMedia *)v5, 0);
    }
    uint64_t v9 = 0x100000001;
    int v10 = a3;
    int v11 = a2;
    int v12 = a4;
    int v13 = 1;
    return SDPPreconditionTable::processPrecondition((void **)(v5 + 160), (int *)&v9);
  }
  return result;
}

uint64_t SDPModel::transactionPreconditionTable(SDPModel *this, SDPPreconditionTable *a2)
{
  uint64_t v3 = *((void *)this + 52);
  uint64_t v2 = *((void *)this + 53);
  if (v3 == v2) {
    return 0;
  }
  for (uint64_t i = v3 + 160; *(_DWORD *)(i - 148) != 2; i += 200)
  {
    uint64_t v5 = i + 40;
    if (v5 == v2) {
      return 0;
    }
  }
  if ((SDPPreconditionTable *)i != a2) {
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)a2, *(char **)i, *(void *)(i + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(i + 8) - *(void *)i) >> 2));
  }
  return 1;
}

void SDPModel::addSDPConnection(SDPModel *this, const SDPConnection *a2)
{
  uint64_t v3 = (char *)this + 272;
  SDPConnection::SDPConnection((uint64_t)v6, (uint64_t)a2);
  uint64_t v4 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>((uint64_t)v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  uint64_t v5 = *((void *)this + 34);
  *uint64_t v4 = v5;
  *(void *)(v5 + 8) = v4;
  *((void *)this + 34) = v4;
  ++*((void *)this + 36);
  v6[0] = &unk_1F20CB730;
  if (v7 < 0) {
    operator delete((void *)v6[3]);
  }
}

void sub_1C55A8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPModel::validConnection(SDPModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 272;
  for (uint64_t i = *((void *)this + 35); (char *)i != v3; uint64_t i = *(void *)(i + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)(i + 16) + 24))(i + 16))
    {
      SDPConnection::SDPConnection(a2, i + 16);
      *(unsigned char *)(a2 + 56) = 1;
      return;
    }
  }
  long long v6 = 0u;
  LOBYTE(v6) = 1;
  uint64_t v5 = &unk_1F20CB730;
  __p[0] = 0;
  __p[1] = 0;
  long long v8 = 0uLL;
  SDPConnection::SDPConnection(a2, (uint64_t)&v5);
  *(unsigned char *)(a2 + 56) = 0;
  uint64_t v5 = &unk_1F20CB730;
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C55A9094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPModel::setConnectionAddress(void *a1, std::string *__str, uint64_t a3)
{
  long long v6 = a1 + 34;
  for (uint64_t i = a1[35]; (void *)i != v6; uint64_t i = *(void *)(i + 8))
  {
    std::string::operator=((std::string *)(i + 40), __str);
    SDPConnection::setAddressTypeFromString((SDPConnection *)(i + 16), (unsigned __int8 *)a3);
  }
  long long v8 = (SDPConnection *)a1[52];
  uint64_t v9 = (SDPConnection *)a1[53];
  while (v8 != v9)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__stra, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else {
      std::string __stra = *__str;
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    SDPMedia::setConnectionAddress(v8, &__stra, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__stra.__r_.__value_.__l.__data_);
    }
    long long v8 = (SDPConnection *)((char *)v8 + 200);
  }
}

void sub_1C55A91BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPModel::setConnectionAddress(void *a1, std::string *__str, int a3)
{
  long long v6 = a1 + 34;
  for (uint64_t i = a1[35]; (void *)i != v6; uint64_t i = *(void *)(i + 8))
  {
    std::string::operator=((std::string *)(i + 40), __str);
    *(_DWORD *)(i + 32) = a3;
  }
  uint64_t v9 = a1[52];
  uint64_t v8 = a1[53];
  while (v9 != v8)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = *__str;
    }
    for (uint64_t j = *(void *)(v9 + 96); j != v9 + 88; uint64_t j = *(void *)(j + 8))
    {
      std::string::operator=((std::string *)(j + 40), &__p);
      *(_DWORD *)(j + 32) = a3;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v9 += 200;
  }
}

void sub_1C55A92CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPModel::validateRemoteAddress(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 272;
  uint64_t v3 = *(void *)(a1 + 280);
  if (v3 == a1 + 272) {
    return 0;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v5 = (unint64_t)a2[1];
  }
  if (v4 >= 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = *a2;
  }
  while (1)
  {
    char v7 = (char *)(v3 + 40);
    uint64_t v8 = *(unsigned __int8 *)(v3 + 63);
    unint64_t v9 = v8;
    int v10 = (const void *)(v3 + 40);
    if (*(char *)(v3 + 63) < 0)
    {
      int v10 = *(const void **)(v3 + 40);
      unint64_t v9 = *(void *)(v3 + 48);
    }
    size_t v11 = v5 >= v9 ? v9 : v5;
    if (memcmp(v10, v6, v11) || v5 != v9) {
      break;
    }
LABEL_27:
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
  }
  if ((v8 & 0x80) != 0)
  {
    char v7 = *(char **)(v3 + 40);
    uint64_t v8 = *(void *)(v3 + 48);
  }
  if (v8 >= 8)
  {
    int v13 = &v7[v8];
    int v14 = v7;
    do
    {
      int v15 = (char *)memchr(v14, 46, v8 - 7);
      if (!v15) {
        break;
      }
      int v16 = v15;
      if (*(void *)v15 == 0x64696C61766E692ELL)
      {
        uint64_t result = 1;
        if (v16 == v13 || v16 - v7 == -1) {
          return result;
        }
        goto LABEL_27;
      }
      int v14 = v15 + 1;
      uint64_t v8 = v13 - (v16 + 1);
    }
    while (v8 >= 8);
  }
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPRTCPXR *a2)
{
  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)v2, a2);
  SDPRTCPXR::~SDPRTCPXR(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  int v4 = (char *)operator new(0x90uLL);
  unint64_t v5 = v4;
  *(void *)int v4 = 0;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  v4[24] = *(unsigned char *)(a2 + 8);
  *((void *)v4 + 2) = &unk_1F20E5C78;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 6) = *(void *)(a2 + 32);
  }
  *((void *)v5 + 2) = &unk_1F20B6838;
  long long v6 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    *((void *)v5 + 9) = *(void *)(a2 + 56);
  }
  *((_DWORD *)v5 + 34) = 1;
  uint64_t v7 = *(void *)(v3 + 392);
  *(void *)unint64_t v5 = v7;
  *((void *)v5 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3 + 392;
  *(void *)(v7 + 8) = v5;
  *(void *)(v3 + 392) = v5;
  ++*(void *)(v3 + 408);
}

void sub_1C55A9548(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v3;
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaCandidate *a2)
{
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)v2, a2);
  SDPMediaCandidate::~SDPMediaCandidate(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaCrypto *a2)
{
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)v2, a2);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  int v4 = (char *)operator new(0x90uLL);
  *(void *)int v4 = 0;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  v4[24] = *(unsigned char *)(a2 + 8);
  *((void *)v4 + 2) = &unk_1F20E5C78;
  unint64_t v5 = (std::string *)(v4 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 6) = *(void *)(a2 + 32);
  }
  *((void *)v4 + 2) = &unk_1F20C8300;
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v4 + 34) = 4;
  uint64_t v6 = *(void *)(v3 + 392);
  *(void *)int v4 = v6;
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3 + 392;
  *(void *)(v6 + 8) = v4;
  *(void *)(v3 + 392) = v4;
  ++*(void *)(v3 + 408);
}

void sub_1C55A96B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v2, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string __p = *(std::string *)(a2 + 16);
  }
  __int16 v4 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  int v5 = *(_DWORD *)(a2 + 44);
  uint64_t v6 = *(void *)(a2 + 48);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  __int16 v5 = *(_WORD *)(a2 + 42);
  v3[0] = &unk_1F20E5C78;
  if (v4 < 0) {
    operator delete((void *)v3[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v2, a2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPPacketizationTimeAttribute *a2)
{
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)v2, a2);
  v2[0] = &unk_1F20E5C78;
  if (v3 < 0) {
    operator delete((void *)v2[2]);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaPath *a2)
{
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v2, a2);
  SDPMediaPath::~SDPMediaPath(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v2, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v2, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  SDPMediaSetup::SDPMediaSetup((uint64_t)v2, a2);
  SDPMediaSetup::~SDPMediaSetup(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v2, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(void **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, **a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 8));
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SDPMedia *,SDPMedia *,SDPMedia *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SDPMedia::operator=(a3, v4);
      v4 += 200;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::list<std::string>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    __int16 v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)a1, 0, 0, i + 16);
    uint64_t v6 = *a1;
    *__int16 v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1C55A9FA0(_Unwind_Exception *a1)
{
  std::__list_imp<std::string>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t IPTelephonyPrefs::getBoolValueFromRuntimeConfig(uint64_t a1, unint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeID TypeID = CFBooleanGetTypeID();
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const UInt8 *)a1;
  }
  else {
    uint64_t v6 = *(const UInt8 **)a1;
  }
  if (v5 >= 0) {
    CFIndex v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    CFIndex v7 = *(void *)(a1 + 8);
  }
  CFStringRef v8 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v7, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFStringRef v27 = v8;
  if (v8) {
    unint64_t v9 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    unint64_t v9 = 0;
  }
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v17 = ims::debug((uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Failed to create CF reference for key: ", 39);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
LABEL_25:
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    goto LABEL_29;
  }
  CFPropertyListRef v10 = CFPreferencesCopyValue(v8, @"com.apple.ipTelephony", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFTypeRef v11 = cf;
  CFTypeRef cf = v10;
  v25[0] = (void *)v11;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)v25);
  if (cf) {
    int v12 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    int v12 = 0;
  }
  if (!v12)
  {
LABEL_29:
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v27);
    goto LABEL_30;
  }
  if (CFGetTypeID(cf) != TypeID)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::debug((uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Value for key \"", 15);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"\" (type ", 8);
    *(unsigned char *)(v18 + 17) = 0;
    CFGetTypeID(cf);
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)") is not of the expected type (type ", 36);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    goto LABEL_25;
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v27);
  if (cf) {
    int v13 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    int v13 = 0;
  }
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Key found in prefs file: ", 25);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" with value: ", 13);
    *(unsigned char *)(v14 + 17) = 0;
    LOBYTE(v27) = 0;
    if (cf)
    {
      CFTypeID v15 = CFGetTypeID(cf);
      if (v15 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&v27, (BOOL *)cf, v16);
      }
    }
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    a2 = (unint64_t)cf;
    LOBYTE(v25[0]) = 0;
    if (cf)
    {
      CFTypeID v20 = CFGetTypeID(cf);
      if (v20 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)v25, (BOOL *)cf, v21);
        a2 = LOBYTE(v25[0]) != 0;
      }
      else
      {
        a2 = 0;
      }
    }
  }
LABEL_30:
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return a2;
}

void sub_1C55AA468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void IPTelephonyPrefs::setBoolValueInRuntimeConfig(uint64_t a1, int a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v4 = (const char *)a1;
  }
  else {
    uint64_t v4 = *(const char **)a1;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
  if (v5)
  {
    CFStringRef v6 = v5;
    CFIndex v7 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      CFIndex v7 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
    }
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPreferencesSetValue(v5, *v7, @"com.apple.ipTelephony", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    CFPreferencesSynchronize(@"com.apple.ipTelephony", v8, v9);
    CFRelease(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Failed to create CF reference for key: ", 39);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
}

void sub_1C55AA6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void SDPTTYSettingsBuilder::createTTYSettingsForOffer(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPMedia *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  CFStringRef v5 = *(std::__shared_weak_count **)(a1 + 16);
  v8[0] = *(void *)(a1 + 8);
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v6 = *(atomic_ullong **)(a2 + 8);
  v7[0] = *(SDPModel **)a2;
  v7[1] = (SDPModel *)v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  SDPTTYSettingsBuilder::createTTYSettings(a1, (uint64_t)v8, v7, a3, (SDPMediaSettings *)a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(unsigned char *)(a4 + 296))
  {
    *(_WORD *)(a4 + 28) = *(_WORD *)(a4 + 30);
    *(_WORD *)(a4 + 288) = *(_WORD *)(a4 + 290);
  }
}

void sub_1C55AA830(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPTTYSettingsBuilder::createTTYSettings(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, SDPMediaSettings *a5@<X8>)
{
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x15802000000;
  uint64_t v36 = __Block_byref_object_copy__5;
  __int16 v37 = __Block_byref_object_dispose__5;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  for (uint64_t i = *(SDPMediaSettings **)(*(void *)a2 + 416);
        i != *(SDPMediaSettings **)(*(void *)a2 + 424);
        uint64_t i = (SDPMediaSettings *)((char *)i + 200))
  {
    if (*((_DWORD *)i + 3) == 4) {
      goto LABEL_6;
    }
  }
  uint64_t i = 0;
LABEL_6:
  uint64_t v11 = *((void *)*a3 + 52);
  uint64_t v10 = *((void *)*a3 + 53);
  if (v11 != v10)
  {
    while (*(_DWORD *)(v11 + 12) != 4)
    {
      v11 += 200;
      if (v11 == v10) {
        goto LABEL_22;
      }
    }
    if (i)
    {
      uint64_t v29 = 0;
      long long v25 = 0u;
      v22[1] = 0;
      v22[2] = 0;
      int v23 = 0;
      int v24 = 16711935;
      *(void *)((char *)&v25 + 4) = 0x100000001;
      long long v26 = 0u;
      long long v27 = 0u;
      memset(v28, 0, sizeof(v28));
      v22[0] = &unk_1F20B97F8;
      uint64_t v30 = 0x2800000028;
      int v31 = 16711935;
      char v32 = 1;
      std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>((SDPMediaSettings *)v38, (SDPMediaSettings *)v22);
      SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v22);
      if (!*((unsigned char *)v34 + 336)) {
        goto LABEL_25;
      }
      SDPSettingsBuilder::copyGeneralMediaSettings((std::string *)(v34 + 5), i, (SDPMedia *)v11, a4, v12);
      if (!*((unsigned char *)v34 + 336)) {
        goto LABEL_25;
      }
      uint64_t v13 = (uint64_t)(v34 + 5);
      char v14 = (std::__shared_weak_count *)a3[1];
      CFTypeID v20 = *a3;
      CFBooleanRef v21 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SDPSettingsBuilder::copyRemoteMediaSettings(v13, &v20, (SDPMedia *)v11);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      *((unsigned char *)v34 + 332) = *(void *)(v11 + 16) != 0;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      std::locale v19[2] = ___ZNK21SDPTTYSettingsBuilder17createTTYSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke;
      void v19[3] = &unk_1E6511BA8;
      v19[4] = &v33;
      SDPSettingsBuilder::findRTPMatches(a1, (uint64_t)i + 40, v11 + 40, (uint64_t)v19, (uint64_t)&__block_literal_global_7);
      if (!*((unsigned char *)v34 + 336)) {
LABEL_25:
      }
        std::__throw_bad_optional_access[abi:ne180100]();
      unint64_t v15 = (unint64_t)(v34 + 5);
      CFBooleanRef v16 = *a3;
      uint64_t v17 = (atomic_ullong *)a3[1];
      v18[0] = v16;
      v18[1] = (SDPModel *)v17;
      if (v17) {
        atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
      }
      SDPSettingsBuilder::generateBandwidthSpecifierInfo(v15, v18, v11);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17);
      }
    }
  }
LABEL_22:
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100](a5, (uint64_t)(v34 + 5));
  _Block_object_dispose(&v33, 8);
  if (BYTE8(v39)) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v38);
  }
}

void sub_1C55AAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Block_object_dispose(&a56, 8);
  if (LOBYTE(STACK[0x2C8])) {
    SDPMediaSettings::~SDPMediaSettings(v56);
  }
  _Unwind_Resume(a1);
}

void SDPTTYSettingsBuilder::createTTYSettingsForOfferAnswer(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, SDPMedia *a4@<X3>, SDPMediaSettings *a5@<X8>)
{
  CFStringRef v5 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v6 = *(atomic_ullong **)(a3 + 8);
  v7[0] = *(SDPModel **)a3;
  v7[1] = (SDPModel *)v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  SDPTTYSettingsBuilder::createTTYSettings(a1, (uint64_t)v8, v7, a4, a5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C55AAC60(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    SDPMediaSettings::SDPMediaSettings((SDPMediaSettings *)(a1 + 40), (const SDPMediaSettings *)(a2 + 40));
    *(void *)(a1 + 40) = &unk_1F20B97F8;
    double result = *(double *)(a2 + 320);
    *(double *)(a1 + 320) = result;
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    *(unsigned char *)(a1 + 332) = *(unsigned char *)(a2 + 332);
    *(unsigned char *)(a1 + 336) = 1;
  }
  return result;
}

void sub_1C55AAD0C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 336)) {
    SDPMediaSettings::~SDPMediaSettings(v2);
  }
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336)) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(a1 + 40));
  }
}

void ___ZNK21SDPTTYSettingsBuilder17createTTYSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 87) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else {
    std::string __p = *(std::string *)(a2 + 64);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size == 3)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    int data_low = LOWORD(p_p->__r_.__value_.__l.__data_);
    int v13 = p_p->__r_.__value_.__s.__data_[2];
    if (data_low == 25970 && v13 == 100)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(_WORD *)(v15 + 328) == 255)
      {
        *(_WORD *)(v15 + 328) = *(_WORD *)(a2 + 8);
        *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 330) = *(_WORD *)(a3 + 8);
      }
    }
  }
  else if (size == 4)
  {
    CFStringRef v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v8 = &__p;
    }
    if (LODWORD(v8->__r_.__value_.__l.__data_) == 808726900)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(_WORD *)(v9 + 68) == 255)
      {
        *(_WORD *)(v9 + 68) = *(_WORD *)(a2 + 8);
        *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 70) = *(_WORD *)(a3 + 8);
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        memset(v24, 0, sizeof(v24));
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v24, (unsigned int *)(a2 + 96));
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        memset(v17, 0, sizeof(v17));
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v17, (unsigned int *)(a3 + 96));
        int v10 = DWORD2(v30);
        if (DWORD2(v23) == 4) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 324) = HIDWORD(v18);
        }
        if (v10 == 4) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 320) = HIDWORD(v25);
        }
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v17);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v24);
        char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
    }
  }
  if (v7 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C55AAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned int a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipProxyResolver::SipProxyResolver(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)a1 = &unk_1F20C5D08;
  *(void *)(a1 + 8) = &unk_1F20C5D30;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.proxy");
  ImsLogContainer::ImsLogContainer(a1 + 16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)a1 = &unk_1F20DEFB8;
  *(void *)(a1 + 8) = &unk_1F20DF000;
  *(void *)(a1 + 16) = &unk_1F20DF028;
  *(void *)(a1 + 120) = &unk_1F20DF088;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = a1 + 200;
  *(_DWORD *)(a1 + 224) = 3;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 280));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  CFStringRef v8 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v7;
  *(void *)(a1 + 264) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)(a1 + 384) = a1 + 120;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(a1 + 352), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 276) = a3;
  return a1;
}

void sub_1C55AB14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipTimerContainer::~SipTimerContainer(v17);
  long long v20 = *(std::__shared_weak_count **)(v15 + 264);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*(char *)(v15 + 255) < 0) {
    operator delete(*v18);
  }
  long long v21 = *(const void **)(v15 + 216);
  if (v21) {
    _Block_release(v21);
  }
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*(void **)(v15 + 200));
  if (*(char *)(v15 + 191) < 0) {
    operator delete(*(void **)(v15 + 168));
  }
  std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v22 = *(std::__shared_weak_count **)(v15 + 136);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void SipProxyResolver::~SipProxyResolver(SipProxyResolver *this)
{
  *(void *)this = &unk_1F20DEFB8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DF000;
  *((void *)this + 2) = &unk_1F20DF028;
  *((void *)this + 15) = &unk_1F20DF088;
  uint64_t v2 = (SipProxyResolver *)((char *)this + 280);
  SipTimerContainer::cancelAllTimers((SipProxyResolver *)((char *)this + 280));
  if (!NetworkInterfaceMonotorManager::_instance) {
    operator new();
  }
  NetworkInterfaceMonotorManager::releaseMonitor((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)this + 232);
  SipTimerContainer::~SipTimerContainer(v2);
  char v3 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  uint64_t v4 = (const void *)*((void *)this + 27);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 25));
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  uint64_t v6 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](&v6);
  CFStringRef v5 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  SipProxyResolver::~SipProxyResolver(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipProxyResolver::~SipProxyResolver(SipProxyResolver *this)
{
}

{
  SipProxyResolver::~SipProxyResolver((SipProxyResolver *)((char *)this - 16));
}

{
  SipProxyResolver::~SipProxyResolver((SipProxyResolver *)((char *)this - 120));
}

{
  uint64_t vars8;

  SipProxyResolver::~SipProxyResolver((SipProxyResolver *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipProxyResolver::~SipProxyResolver((SipProxyResolver *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipProxyResolver::~SipProxyResolver((SipProxyResolver *)((char *)this - 120));
  JUMPOUT(0x1C878E320);
}

void SipProxyResolver::resolveProxiesOnInterface(std::string *this, uint64_t *a2, uint64_t a3, int a4, void **a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    long long v30 = &this[6].__r_.__value_.__s.__data_[16];
    do
    {
      CFStringRef v8 = operator new(0x1D0uLL);
      v8[1] = 0;
      void v8[2] = 0;
      *CFStringRef v8 = &unk_1F20DF160;
      uint64_t v9 = (char *)(v8 + 3);
      SipUri::SipUri((SipUri *)(v8 + 3));
      v8[54] = 0;
      v8[55] = 0;
      *((_WORD *)v8 + 228) = 0;
      v8[56] = 0;
      SipUri::operator=((SipUri *)(v8 + 3), v6);
      std::string::size_type size = (void *)this[6].__r_.__value_.__l.__size_;
      unint64_t v11 = this[6].__r_.__value_.__r.__words[2];
      if ((unint64_t)size >= v11)
      {
        std::string::pointer data = this[6].__r_.__value_.__l.__data_;
        uint64_t v14 = ((char *)size - data) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v11 - (void)data) >> 3 > v15) {
          unint64_t v15 = (uint64_t)(v11 - (void)data) >> 3;
        }
        if (v11 - (unint64_t)data >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        uint64_t v34 = v30;
        if (v16 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v17 = (char *)operator new(16 * v16);
        long long v18 = &v17[16 * v14];
        long long v19 = &v17[16 * v16];
        *(void *)long long v18 = v9;
        *((void *)v18 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
        char v12 = v18 + 16;
        __p_8[1] = v18 + 16;
        uint64_t v33 = v19;
        if (size == (void *)data)
        {
          int64x2_t v21 = vdupq_n_s64((unint64_t)size);
        }
        else
        {
          do
          {
            long long v20 = *((_OWORD *)size - 1);
            size -= 2;
            *((_OWORD *)v18 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
            v18 -= 16;
            *std::string::size_type size = 0;
            size[1] = 0;
          }
          while (size != (void *)data);
          int64x2_t v21 = *(int64x2_t *)&this[6].__r_.__value_.__l.__data_;
          unint64_t v11 = this[6].__r_.__value_.__r.__words[2];
          char v12 = __p_8[1];
          long long v19 = v33;
        }
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        this[6].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
        *(int64x2_t *)__p_8 = v21;
        this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v19;
        uint64_t v33 = (char *)v11;
        uint64_t __p = v21.i64[0];
        std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *std::string::size_type size = v9;
        size[1] = v8;
        char v12 = size + 2;
      }
      this[6].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      v6 += 408;
    }
    while (v6 != v7);
  }
  long long v22 = *a5;
  if (*a5) {
    long long v22 = _Block_copy(v22);
  }
  std::string::pointer v23 = this[9].__r_.__value_.__l.__data_;
  this[9].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  if (v23) {
    _Block_release(v23);
  }
  uint64_t v24 = *(unsigned __int8 *)(a3 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a3 + 8);
  }
  if (v24)
  {
    std::string::operator=(this + 7, (const std::string *)a3);
    std::string::size_type v25 = this->__r_.__value_.__r.__words[2];
    LODWORD(this[9].__r_.__value_.__r.__words[1]) = a4;
    uint64_t v26 = (*(uint64_t (**)(std::string::value_type *))(v25 + 64))(&this->__r_.__value_.__s.__data_[16]);
    (*(void (**)(std::string::value_type *, uint64_t))(this->__r_.__value_.__r.__words[2] + 16))(&this->__r_.__value_.__s.__data_[16], v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"allowed address types are ", 26);
    *(unsigned char *)(v26 + 17) = 0;
    IpAddress::addressTypeMaskToString((IpAddress *)LODWORD(this[9].__r_.__value_.__r.__words[1]));
  }
  SipProxyResolver::internalResolve((SipProxyResolver *)this);
}

void sub_1C55ABA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void SipProxyResolver::internalResolve(SipProxyResolver *this)
{
  uint64_t v30 = (*(uint64_t (**)(void))(**((void **)this + 32) + 72))(*((void *)this + 32));
  char v3 = (uint64_t *)*((void *)this + 18);
  uint64_t v2 = (uint64_t *)*((void *)this + 19);
  if (v3 == v2) {
    return;
  }
  uint64_t v4 = (char *)this + 16;
  CFStringRef v5 = (char *)this + 192;
  uint64_t v6 = (void **)((char *)this + 200);
  uint64_t v31 = (void **)((char *)this + 192);
  while (1)
  {
    uint64_t v8 = *v3;
    uint64_t v7 = (std::__shared_weak_count *)v3[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(void *)(v8 + 48))
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      SipHost::address((SipHost *)(v8 + 8), &v34);
      uint64_t v9 = (uint64_t)v34;
      if ((*((_DWORD *)this + 56) & (*(unsigned int (**)(uint64_t *))(*v34 + 136))(v34)) != 0)
      {
        SipProxyResolver::ResolvedUri::addAddress(v8, v9);
      }
      else
      {
        uint64_t v11 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 16, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"skipping ", 9);
        *(unsigned char *)(v11 + 17) = 0;
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 128))(v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" address ", 9);
        *(unsigned char *)(v11 + 17) = 0;
        int v13 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, v11);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v13[17] = 0;
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      goto LABEL_13;
    }
    if (*(void *)(v8 + 408) == *(void *)(v8 + 416)) {
      break;
    }
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 16, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"skipping already resolved hostname", 34);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v8 + 16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
LABEL_13:
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v3 += 2;
    if (v3 == v2) {
      return;
    }
  }
  uint64_t v14 = (long long *)(v8 + 16);
  if (v6 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)(v8 + 16)))
  {
    ++*(_WORD *)(v8 + 432);
    unint64_t v15 = *v6;
    unint64_t v16 = (uint64_t **)v6;
    uint64_t v17 = v6;
    if (!*v6) {
      goto LABEL_27;
    }
    unint64_t v16 = (uint64_t **)((char *)this + 200);
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (void **)v15;
        long long v18 = v15 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v8 + 16), (void **)v15 + 4) & 0x80) == 0)break; {
        unint64_t v15 = *v17;
        }
        unint64_t v16 = (uint64_t **)v17;
        if (!*v17) {
          goto LABEL_27;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (void **)(v8 + 16)) & 0x80) == 0) {
        break;
      }
      unint64_t v16 = (uint64_t **)(v17 + 1);
      unint64_t v15 = v17[1];
      if (!v15) {
        goto LABEL_27;
      }
    }
    long long v19 = *v16;
    if (!*v16)
    {
LABEL_27:
      uint64_t v36 = 0;
      long long v20 = (uint64_t *)operator new(0x48uLL);
      uint64_t v34 = v20;
      uint64_t v35 = (std::__shared_weak_count *)((char *)this + 200);
      int64x2_t v21 = (std::string *)(v20 + 4);
      if (*(char *)(v8 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(v8 + 16), *(void *)(v8 + 24));
      }
      else
      {
        long long v22 = *v14;
        v20[6] = *(void *)(v8 + 32);
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      v20[7] = 0;
      v20[8] = 0;
      LOBYTE(v36) = 1;
      uint64_t *v20 = 0;
      v20[1] = 0;
      void v20[2] = (uint64_t)v17;
      *unint64_t v16 = v20;
      std::string::pointer v23 = (void *)**v31;
      if (v23)
      {
        *uint64_t v31 = v23;
        long long v20 = *v16;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 25), v20);
      ++*((void *)this + 26);
      long long v19 = v34;
      uint64_t v34 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v34);
    }
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (std::__shared_weak_count *)v19[8];
    v19[7] = v8;
    v19[8] = (uint64_t)v7;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"attempt ", 8);
    *(unsigned char *)(v25 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v25 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" : starting DNS lookup for ", 27);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 32))(v25, v8 + 16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    uint64_t v26 = *((void *)this + 16);
    long long v27 = (std::__shared_weak_count *)*((void *)this + 17);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = *((unsigned int *)this + 56);
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 1174405120;
    v32[2] = ___ZN16SipProxyResolver15internalResolveEv_block_invoke;
    v32[3] = &__block_descriptor_tmp_57;
    v32[4] = v26;
    uint64_t v33 = v27;
    CFStringRef v5 = (char *)this + 192;
    uint64_t v6 = (void **)((char *)this + 200);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, long long *, uint64_t, char *, void *))(*(void *)v30 + 32))(v30, v14, v28, (char *)this + 168, v32);
    if (v33) {
      std::__shared_weak_count::__release_weak(v33);
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_13;
  }
  uint64_t v29 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"resolution already in-progress for hostname", 43);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 32))(v29, v8 + 16);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C55AC200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void SipProxyResolver::networkInterfaceChanged(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"interface ", 10);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
  uint64_t v9 = *(void **)(v8 + 8);
  if (v6)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is up", 6);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = (unsigned char *)ims::debug(a1 + 24, (uint64_t)__p);
    (*(void (**)(void, unsigned char *))(*(void *)*a3 + 16))(*a3, v10);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v10[17] = 0;
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *a3;
    uint64_t v12 = *(uint64_t **)(*a3 + 8);
    int v13 = *(uint64_t **)(v11 + 16);
    if (v12 == v13)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      do
      {
        uint64_t v15 = *v12;
        v12 += 2;
        v14 |= (*(uint64_t (**)(uint64_t))(*(void *)v15 + 136))(v15);
      }
      while (v12 != v13);
    }
    *(_DWORD *)(a1 + 224) &= v14;
    if (!NetworkInterfaceMonotorManager::_instance) {
      operator new();
    }
    NetworkInterfaceMonotorManager::releaseMonitor((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)(a1 + 232));
    if (*(char *)(a1 + 255) < 0)
    {
      **(unsigned char **)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 232) = 0;
      *(unsigned char *)(a1 + 255) = 0;
    }
    if (*(_DWORD *)(a1 + 224))
    {
      SipProxyResolver::internalResolve((SipProxyResolver *)a1);
    }
    else
    {
      __p[1] = 0;
      uint64_t v18 = 0;
      __p[0] = 0;
      (*(void (**)(void, void **, uint64_t))(*(void *)(a1 + 216) + 16))(*(void *)(a1 + 216), __p, v16);
      long long v19 = __p;
      std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is not up", 10);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
}

void sub_1C55AC590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

void SipProxyResolver::ResolvedUri::addAddress(uint64_t a1, uint64_t a2)
{
  long long v3 = 0uLL;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 32))(&v3, a2);
  (*(void (**)(void, void))(*(void *)v3 + 64))(v3, *(unsigned __int16 *)(a1 + 40));
  std::vector<std::shared_ptr<IpAddress>>::push_back[abi:ne180100]((uint64_t *)(a1 + 408), &v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1C55AC664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16SipProxyResolver15internalResolveEv_block_invoke(uint64_t a1, void **a2, const std::string *a3, void *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (!v11)
      {
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return;
      }
      ImsResult::ImsResult((ImsResult *)&v37, a3);
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v38 + 24))(v38, v39))
      {
        uint64_t v13 = *(void *)(v11 + 16);
        uint64_t v12 = v11 + 16;
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"unable to resolve proxy ", 24);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t *, uint64_t))(v37 + 16))(&v37, v14);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        uint64_t v15 = (void ***)(v11 + 192);
        uint64_t v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v11 + 192, a2);
        if ((void **)(v11 + 200) != v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = (std::__shared_weak_count *)v16[8];
          if (v18)
          {
            long long v19 = std::__shared_weak_count::lock(v18);
            if (v19 && v17[7])
            {
              long long v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v11 + 192, a2);
              if ((void **)(v11 + 200) != v20)
              {
                int64x2_t v21 = (uint64_t *)v20;
                long long v22 = (void **)v20[1];
                if (v22)
                {
                  do
                  {
                    std::string::pointer v23 = v22;
                    long long v22 = (void **)*v22;
                  }
                  while (v22);
                }
                else
                {
                  uint64_t v29 = v20;
                  do
                  {
                    std::string::pointer v23 = (void **)v29[2];
                    BOOL v30 = *v23 == v29;
                    uint64_t v29 = v23;
                  }
                  while (!v30);
                }
                if (*v15 == v20) {
                  *uint64_t v15 = v23;
                }
                uint64_t v31 = *(uint64_t **)(v11 + 200);
                --*(void *)(v11 + 208);
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v21);
                std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v21 + 4));
                operator delete(v21);
              }
              uint64_t v32 = v11 + 16;
              uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 16) + 64))(v11 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 + 16) + 16))(v11 + 16, v33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"attempt ", 8);
              *(unsigned char *)(v33 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v33 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" : ", 3);
              *(unsigned char *)(v33 + 17) = 0;
              uint64_t v34 = *(uint64_t (**)(uint64_t))(*(void *)(v11 + 16) + 64);
              if (*a4 != a4[1])
              {
                uint64_t v35 = v34(v11 + 16);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v11 + 16, v35);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"resolved ", 9);
                *(unsigned char *)(v35 + 17) = 0;
                (*(void (**)(uint64_t, void **))(*(void *)v35 + 32))(v35, a2);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)" to ", 4);
                *(unsigned char *)(v35 + 17) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v40, ",");
                uint64_t v43 = 0;
                long long v41 = 0u;
                long long v42 = 0u;
                ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v41);
              }
              uint64_t v36 = v34(v11 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v11 + 16, v36);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"unable to resolve ", 18);
              *(unsigned char *)(v36 + 17) = 0;
              (*(void (**)(uint64_t, void **))(*(void *)v36 + 32))(v36, a2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" to an address of type ", 23);
              *(unsigned char *)(v36 + 17) = 0;
              IpAddress::addressTypeMaskToString((IpAddress *)*(unsigned int *)(v11 + 224));
            }
          }
          else
          {
            long long v19 = 0;
          }
          uint64_t v27 = *(void *)(v11 + 16);
          uint64_t v26 = v11 + 16;
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(v27 + 48))(v26);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Resolved uri for ", 17);
          *(unsigned char *)(v28 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" is gone.", 9);
          *(unsigned char *)(v28 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v28 + 17) = 0;
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          goto LABEL_19;
        }
        uint64_t v25 = *(void *)(v11 + 16);
        uint64_t v24 = v11 + 16;
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(v25 + 48))(v24);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"I wasn't waiting for hostname resolution for ", 45);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, a2);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v14 + 17) = 0;
LABEL_19:
      ImsResult::~ImsResult((ImsResult *)&v37);
      goto LABEL_20;
    }
  }
}

void sub_1C55AD630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void **__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void **p_p,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  p_p = (void **)&__p;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&p_p);
  uint64_t __p = &a30;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ImsResult::~ImsResult((ImsResult *)&a12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16SipProxyResolverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16SipProxyResolverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipProxyResolver::handleTimer(SipProxyResolver *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 17) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "ProxyResolveTimer", *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_13;
  }
  if (!a2[23])
  {
LABEL_13:
    SipProxyResolver::internalResolve(this);
    return;
  }
  CFStringRef v5 = "ProxyResolveTimer";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_13;
    }
  }
}

void *SipProxyResolver::logPrefix(SipProxyResolver *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ProxyResolver: ", 15);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipProxyResolver::loggableName(LoggableString *a1@<X8>)
{
}

void *non-virtual thunk to'SipProxyResolver::logPrefix(SipProxyResolver *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ProxyResolver: ", 15);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void non-virtual thunk to'SipProxyResolver::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t std::vector<SipUri>::__push_back_slow_path<SipUri>(uint64_t *a1, const SipUri *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x50505050505050) {
    unint64_t v9 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (SipUri *)&v10[408 * v4];
  uint64_t v16 = &v10[408 * v9];
  SipUri::SipUri(v14, a2);
  uint64_t v15 = (char *)v14 + 408;
  std::vector<SipUri>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C55ADAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipProxyResolver::ResolvedUri>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipProxyResolver::ResolvedUri>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipProxyResolver::ResolvedUri>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (SipUri *)(a1 + 24);
  uint64_t v2 = (void **)(a1 + 432);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipUri::~SipUri(v1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DF1B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20DF1B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20DF1B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20DF1B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55ADE0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0,std::allocator<SipProxyResolver::resolvedHost(std::string const&,ImsResult,std::vector<std::shared_ptr<IpAddress>> const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void ImsMutex::~ImsMutex(pthread_mutex_t *this)
{
}

void QMINasClient::AccessBarringHandler::listenForIndication(QMINasClient::AccessBarringHandler *this, int a2, uint64_t a3)
{
  if (*((unsigned __int8 *)this + 16) != a3)
  {
    *((unsigned char *)this + 16) = a3;
    memset(v14, 0, sizeof(v14));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
    (**(void (***)(QMINasClient::AccessBarringHandler *, _OWORD *, uint64_t))this)(this, v14, a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"registering for ", 16);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = (*(uint64_t (**)(QMINasClient::AccessBarringHandler *))(*(void *)this + 32))(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" change indication for instance ", 32);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v18 < 0) {
      operator delete(aBlock);
    }
    if (v16 < 0) {
      operator delete(__p);
    }
    if (a2) {
      int v12 = 2 * (a2 == 1);
    }
    else {
      int v12 = 1;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v13, v12);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v6 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"already ", 8);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "";
  }
  else {
    uint64_t v7 = "not ";
  }
  if (a3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"listening for ", 14);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v9 = (*(uint64_t (**)(QMINasClient::AccessBarringHandler *))(*(void *)this + 32))(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" indication for instance ", 25);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v18 < 0) {
    operator delete(aBlock);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
}

void sub_1C55AE358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  uint64_t v26 = a10;
  a10 = 0;
  if (v26) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v26);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t QMINasClient::SsacHandler::initializeIndicationRegisterRequest(uint64_t a1, uint64_t a2, char a3)
{
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[3] = &__block_descriptor_tmp_11_1;
  char v8 = a3;
  uint64_t v5 = qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacChangeInfo>(a2, 48);
  return ___ZN12QMINasClient11SsacHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2((uint64_t)v7, v5);
}

uint64_t ___ZN12QMINasClient11SsacHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void *QMINasClient::SsacHandler::internalListenForIndication(QMINasClient::SsacHandler *this, uint64_t a2, int a3)
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1F20DF4E8;
  v7[1] = this;
  v7[3] = v7;
  qmi::ClientRouter::setIndHandlerInternal();
  double result = std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](v7);
  if (a3) {
    return (void *)(*(uint64_t (**)(QMINasClient::SsacHandler *, uint64_t))(*(void *)this + 40))(this, a2);
  }
  return result;
}

void sub_1C55AE598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void QMINasClient::SsacHandler::requestCurrentBarringInfo(QMINasClient::SsacHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v1 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"requesting current SSAC info for instance ", 42);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v6 < 0) {
    operator delete(aBlock);
  }
  if (v4 < 0) {
    operator delete(__p);
  }
  memset(v2, 0, sizeof(v2));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v2);
  qmi::ClientRouter::get();
  operator new();
}

void sub_1C55AE83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v24, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = 100;
  *(_DWORD *)(result + 44) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

uint64_t ___ZN12QMINasClient11SsacHandler24handleSsacInfoIndicationEjRKN3nas11SsacInfoInd10IndicationE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  unsigned int v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN12QMINasClient11SsacHandler22handleSsacInfoResponseEjRKN3nas11GetSsacInfo8ResponseE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  unsigned int v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t QMINasClient::AcbHandler::initializeIndicationRegisterRequest(uint64_t a1, uint64_t a2, char a3)
{
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[3] = &__block_descriptor_tmp_24_0;
  char v8 = a3;
  uint64_t v5 = qmi::MutableMessageBase::getTLV<nas::tlv::RegAcbChangeInfo>(a2, 44);
  return ___ZN12QMINasClient10AcbHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2((uint64_t)v7, v5);
}

uint64_t ___ZN12QMINasClient10AcbHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void *QMINasClient::AcbHandler::internalListenForIndication(QMINasClient::AcbHandler *this, uint64_t a2, int a3)
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1F20DF5E8;
  v7[1] = this;
  v7[3] = v7;
  qmi::ClientRouter::setIndHandlerInternal();
  double result = std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](v7);
  if (a3) {
    return (void *)(*(uint64_t (**)(QMINasClient::AcbHandler *, uint64_t))(*(void *)this + 40))(this, a2);
  }
  return result;
}

void sub_1C55AEB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void QMINasClient::AcbHandler::requestCurrentBarringInfo(QMINasClient::AcbHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v1 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"requesting current ACB info for instance ", 41);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v6 < 0) {
    operator delete(aBlock);
  }
  if (v4 < 0) {
    operator delete(__p);
  }
  memset(v2, 0, sizeof(v2));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v2);
  qmi::ClientRouter::get();
  operator new();
}

void sub_1C55AEE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v24, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void QMINasClient::QMINasClient(QMINasClient *this, dispatch_object_t *a2)
{
  unsigned int v3 = (ims *)IMSNasClient::IMSNasClient(this, a2);
  char v4 = (void *)((char *)v3 + 56);
  *((void *)v3 + 8) = 0;
  *((void *)v3 + 9) = 0;
  *(void *)unsigned int v3 = &unk_1F20DF230;
  *((void *)v3 + 7) = &unk_1F20DF2D0;
  uint64_t v5 = (ImsLogger *)ims::logger(v3);
  char v6 = (os_log_s *)ImsLogger::osLog(v5);
  qmi::ClientRouter::ClientRouter((QMINasClient *)((char *)this + 80), v6);
  *((_WORD *)this + 48) = 0;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 13) = &unk_1F20DF340;
  *((void *)this + 14) = this;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 16) = &unk_1F20DF3A8;
  *((void *)this + 17) = this;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 28) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 33) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  uint64_t v7 = std::vector<QMINasCache>::__emplace_back_slow_path<int,QMINasClient *>((int64x2_t *)((char *)this + 248), 0, (uint64_t)this);
  unint64_t v8 = *((void *)this + 33);
  *((void *)this + 32) = v7;
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v9 = std::vector<QMINasCache>::__emplace_back_slow_path<int,QMINasClient *>((int64x2_t *)((char *)this + 248), 1, (uint64_t)this);
  }
  else
  {
    *(void *)uint64_t v7 = v4;
    *((_DWORD *)v7 + 2) = 1;
    *((void *)v7 + 3) = 0;
    *((void *)v7 + 2) = v7 + 24;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = v7 + 48;
    uint64_t v9 = v7 + 80;
    *((void *)this + 32) = v9;
  }
  *((void *)this + 32) = v9;
}

void sub_1C55AF05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<QMINasCache>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  char v6 = *(std::__shared_weak_count **)(v2 + 240);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::string>::destroy(v4, *(char **)(v2 + 216));
  std::__tree<unsigned int>::destroy(v3, *(void **)(v2 + 192));
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*(void **)(v2 + 168));
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 88);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(v2 + 72);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  IMSNasClient::~IMSNasClient((IMSNasClient *)v2);
  _Unwind_Resume(a1);
}

void QMINasClient::~QMINasClient(QMINasClient *this)
{
  *(void *)this = &unk_1F20DF230;
  *((void *)this + 7) = &unk_1F20DF2D0;
  qmi::ClientRouter::stop();
  uint64_t v5 = (void **)((char *)this + 248);
  std::vector<QMINasCache>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 208, *((char **)this + 27));
  std::__tree<unsigned int>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*((void **)this + 21));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  IMSNasClient::~IMSNasClient(this);
}

{
  uint64_t vars8;

  QMINasClient::~QMINasClient(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'QMINasClient::~QMINasClient(QMINasClient *this)
{
}

{
  uint64_t vars8;

  QMINasClient::~QMINasClient((QMINasClient *)((char *)this - 56));
  JUMPOUT(0x1C878E320);
}

void QMINasClient::bootstrap(std::__shared_weak_count **this, uint64_t a2, unsigned int a3)
{
  if (*((unsigned char *)this + 96))
  {
    if (*((unsigned char *)this + 97)) {
      QMINasClient::startListening((QMINasClient *)this, a3);
    }
    char v6 = this[24];
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v7 = this + 24;
    do
    {
      unsigned int v8 = HIDWORD(v6[1].__vftable);
      BOOL v9 = v8 >= a3;
      if (v8 >= a3) {
        p_uint64_t shared_owners = (std::__shared_weak_count **)v6;
      }
      else {
        p_uint64_t shared_owners = (std::__shared_weak_count **)&v6->__shared_owners_;
      }
      if (v9) {
        uint64_t v7 = (std::__shared_weak_count **)v6;
      }
      char v6 = *p_shared_owners;
    }
    while (*p_shared_owners);
    if (v7 != this + 24 && *((_DWORD *)v7 + 7) <= a3)
    {
      int v13 = this[2];
      if (v13)
      {
        uint64_t v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          uint64_t v15 = v14;
          char v16 = this[1];
          if (v16) {
            ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, a2);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
      }
    }
    else
    {
LABEL_15:
      uint64_t v11 = (uint64_t **)(this + 26);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      unsigned int v18 = a3;
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(v11, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    int v12 = (void (*)(void))(*this)[2].__vftable;
    v12();
  }
}

void sub_1C55AF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void QMINasClient::startListening(QMINasClient *this, int a2)
{
  memset(v5, 0, sizeof(v5));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v5);
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegSubscriptionInfo>((uint64_t)v5) = 1;
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegMmtelRespInd>((uint64_t)v5) = 1;
  if (a2) {
    int v3 = 2 * (a2 == 1);
  }
  else {
    int v3 = 1;
  }
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v4, v3);
}

void sub_1C55AF5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = a10;
  a10 = 0;
  if (v23) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t QMINasClient::initialize(std::string::size_type a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 96))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"already initialized", 19);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  int v4 = a3;
  if (*(unsigned char *)(a1 + 97))
  {
    *(unsigned char *)(a1 + 96) = 1;
    (*(void (**)(std::string::size_type, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"initializing QMINasClient", 25);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  unsigned int v8 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    char v16 = sImsDispatchQueue;
LABEL_15:
    dispatch_retain(v8);
    goto LABEL_16;
  }
  unsigned int v8 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
  sImsDispatchQueue = (uint64_t)v8;
  char v16 = v8;
  if (v8) {
    goto LABEL_15;
  }
LABEL_16:
  char v15 = 3;
  std::string::size_type v9 = *(void *)(a1 + 72);
  v21.__r_.__value_.__r.__words[0] = *(void *)(a1 + 64);
  v21.__r_.__value_.__l.__size_ = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  IPTelephonyManager::getInstance((uint64_t *)&v13);
  IPTelephonyManager::getBBServerConnection(v13, __p);
  qmi::ClientRouter::addLocal<char const(&)[15],qmi::ServiceType,dispatch::queue &,char const(&)[4],std::weak_ptr<QMINasClient>,std::shared_ptr<BBServerConnection>>(a1 + 80, 1, "IMSNasClient.0", (uint64_t)&v15, &v16, (uint64_t *)&v21, (long long *)__p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v21.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21.__r_.__value_.__l.__size_);
  }
  char v15 = 3;
  std::string::size_type v10 = *(void *)(a1 + 72);
  v21.__r_.__value_.__r.__words[0] = *(void *)(a1 + 64);
  v21.__r_.__value_.__l.__size_ = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  IPTelephonyManager::getInstance((uint64_t *)&v13);
  IPTelephonyManager::getBBServerConnection(v13, __p);
  qmi::ClientRouter::addLocal<char const(&)[15],qmi::ServiceType,dispatch::queue &,char const(&)[4],std::weak_ptr<QMINasClient>,std::shared_ptr<BBServerConnection>>(a1 + 80, 2, "IMSNasClient.1", (uint64_t)&v15, &v16, (uint64_t *)&v21, (long long *)__p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v21.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21.__r_.__value_.__l.__size_);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  LODWORD(v22) = v4;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>((uint64_t **)(a1 + 208), (void **)&v21.__r_.__value_.__l.__data_, (uint64_t)&v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  v20[0] = &unk_1F20DF6E8;
  v20[1] = a1;
  v20[3] = v20;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v20);
  v19[0] = &unk_1F20DF838;
  v19[1] = a1;
  void v19[3] = v19;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](v19);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DF8B8;
  v21.__r_.__value_.__l.__size_ = a1;
  long long v22 = &v21;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v21);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DF938;
  v21.__r_.__value_.__l.__size_ = a1;
  long long v22 = &v21;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v21);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DF9B8;
  v21.__r_.__value_.__l.__size_ = a1;
  long long v22 = &v21;
  qmi::ClientRouter::setIndHandlerInternal();
  uint64_t v11 = (capabilities::radio *)std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v21);
  if (capabilities::radio::supportsRel16(v11))
  {
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DFA38;
    v21.__r_.__value_.__l.__size_ = a1;
    long long v22 = &v21;
    qmi::ClientRouter::setIndHandlerInternal();
    std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v21);
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DFAB8;
    v21.__r_.__value_.__l.__size_ = a1;
    long long v22 = &v21;
    qmi::ClientRouter::setIndHandlerInternal();
    std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v21);
  }
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 80));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 80));
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 80));
  qmi::ClientRouter::start();
  *(unsigned char *)(a1 + 96) = 1;
  if (v8) {
    dispatch_release(v8);
  }
  return 1;
}

void sub_1C55AFB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (v24) {
    dispatch_release(v24);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientRouter::addLocal<char const(&)[15],qmi::ServiceType,dispatch::queue &,char const(&)[4],std::weak_ptr<QMINasClient>,std::shared_ptr<BBServerConnection>>(int a1, int a2, char *__s, uint64_t a4, NSObject **a5, uint64_t *a6, long long *a7)
{
  long long v27 = 0u;
  long long v28 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v25, __s);
  std::string::size_type v10 = *a5;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims");
  uint64_t v20 = 0;
  std::string v21 = 0;
  uint64_t v11 = (std::__shared_weak_count *)a6[1];
  if (v11)
  {
    int v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = *a6;
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = v14;
      std::string v21 = v12;
      char v15 = (std::__shared_weak_count *)a6[1];
      *a6 = 0;
      a6[1] = 0;
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    else
    {
      uint64_t v20 = 0;
      std::string v21 = 0;
      char v16 = (std::__shared_weak_count *)a6[1];
      *a6 = 0;
      a6[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  long long v19 = *a7;
  *(void *)a7 = 0;
  *((void *)a7 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  qmi::Client::createWithQueueLocal();
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  v17[0] = 0;
  v17[1] = 0;
  long long v18 = v28;
  long long v28 = 0uLL;
  qmi::ClientRouter::addClient();
  qmi::Client::~Client((qmi::Client *)v17);
  qmi::ClientRouter::get();
  qmi::Client::~Client((qmi::Client *)&v27);
}

void sub_1C55AFE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,dispatch_object_t object,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  qmi::Client::~Client((qmi::Client *)(v30 - 80));
  _Unwind_Resume(a1);
}

void QMINasClient::stopListening(QMINasClient *this, unsigned int a2, char a3)
{
  unsigned int v19 = a2;
  uint64_t v5 = (char *)this + 168;
  char v6 = (char *)*((void *)this + 21);
  if (v6)
  {
    uint64_t v7 = (uint64_t **)((char *)this + 160);
    unsigned int v8 = v5;
    do
    {
      unsigned int v9 = *((_DWORD *)v6 + 8);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = (char **)v6;
      }
      else {
        uint64_t v11 = (char **)(v6 + 8);
      }
      if (v10) {
        unsigned int v8 = v6;
      }
      char v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *((_DWORD *)v8 + 8) <= a2)
    {
      int v13 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, a2, &v19);
      uint64_t v14 = (QMINasClient::AccessBarringHandler **)v13[6];
      char v15 = (QMINasClient::AccessBarringHandler **)v13[7];
      while (v14 != v15)
      {
        char v16 = *v14++;
        QMINasClient::AccessBarringHandler::listenForIndication(v16, a2, 0);
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    memset(v18, 0, sizeof(v18));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
    *qmi::MutableMessageBase::getTLV<nas::tlv::RegSubscriptionInfo>((uint64_t)v18) = 0;
    *qmi::MutableMessageBase::getTLV<nas::tlv::RegMmtelRespInd>((uint64_t)v18) = 0;
    if (a2) {
      int v12 = 2 * (a2 == 1);
    }
    else {
      int v12 = 1;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v17, v12);
  }
}

void sub_1C55B00B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = a10;
  a10 = 0;
  if (v23) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void QMINasClient::deinitialize(QMINasClient *this)
{
  if (*((unsigned char *)this + 96))
  {
    uint64_t v2 = (char *)*((void *)this + 20);
    uint64_t v3 = (char *)this + 168;
    if (v2 != (char *)this + 168)
    {
      do
      {
        uint64_t v9 = 0;
        *(_OWORD *)std::string __p = 0u;
        unsigned int v7 = *((_DWORD *)v2 + 8);
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v9 = 0;
        std::vector<QMINasClient::AccessBarringHandler *>::__init_with_size[abi:ne180100]<QMINasClient::AccessBarringHandler **,QMINasClient::AccessBarringHandler **>(__p, *((const void **)v2 + 6), *((void *)v2 + 7), (uint64_t)(*((void *)v2 + 7) - *((void *)v2 + 6)) >> 3);
        QMINasClient::stopListening(this, v7, 0);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        int v4 = (char *)*((void *)v2 + 1);
        if (v4)
        {
          do
          {
            uint64_t v5 = v4;
            int v4 = *(char **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            uint64_t v5 = (char *)*((void *)v2 + 2);
            BOOL v6 = *(void *)v5 == (void)v2;
            uint64_t v2 = v5;
          }
          while (!v6);
        }
        uint64_t v2 = v5;
      }
      while (v5 != v3);
    }
    *((unsigned char *)this + 96) = 0;
  }
}

void sub_1C55B01E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **QMINasClient::setAccessBarringType(QMINasClient *this, unsigned int a2, int a3)
{
  unsigned int v47 = a2;
  unsigned int v7 = (uint64_t **)((char *)this + 168);
  BOOL v6 = (uint64_t *)*((void *)this + 21);
  unsigned int v8 = (uint64_t **)((char *)this + 160);
  if (v6)
  {
    uint64_t v9 = (uint64_t **)((char *)this + 168);
    BOOL v10 = (char *)*((void *)this + 21);
    do
    {
      unsigned int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        int v13 = (char **)v10;
      }
      else {
        int v13 = (char **)(v10 + 8);
      }
      if (v12) {
        uint64_t v9 = (uint64_t **)v10;
      }
      BOOL v10 = *v13;
    }
    while (*v13);
    if (v9 == v7 || *((_DWORD *)v9 + 8) > a2)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v6;
          unsigned int v15 = *((_DWORD *)v6 + 8);
          if (v15 <= a2) {
            break;
          }
          BOOL v6 = *v14;
          unsigned int v7 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (v15 >= a2) {
          break;
        }
        BOOL v6 = v14[1];
        if (!v6)
        {
          unsigned int v7 = v14 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
      QMINasClient::stopListening(this, a2, 1);
    }
  }
  else
  {
    uint64_t v14 = (uint64_t **)((char *)this + 168);
LABEL_19:
    char v16 = operator new(0x48uLL);
    v16[8] = a2;
    v16[10] = a3;
    *((void *)v16 + 7) = 0;
    *((void *)v16 + 8) = 0;
    *((void *)v16 + 6) = 0;
    std::__tree<unsigned int>::__insert_node_at(v8, (uint64_t)v14, v7, (uint64_t *)v16);
  }
  int v17 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47);
  v17[7] = v17[6];
  if ((a3 & 2) != 0)
  {
    long long v18 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47)+ 5;
    if (a3)
    {
      QMINasClient::BarringHandler::push_back(v18, (uint64_t)this + 104);
      long long v18 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47)+ 5;
    }
    unsigned int v19 = (char *)this + 128;
LABEL_28:
    QMINasClient::BarringHandler::push_back(v18, (uint64_t)v19);
    goto LABEL_29;
  }
  if (a3)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_29;
    }
    long long v18 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47)+ 5;
    unsigned int v19 = (char *)this + 104;
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  uint64_t v31 = ims::debug((uint64_t)v36, (uint64_t)v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"barring disabled for instance ", 30);
  *(unsigned char *)(v31 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (SBYTE7(v37) < 0) {
    operator delete(v36[0]);
  }
LABEL_29:
  double result = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47);
  if (result[6] != result[7])
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    memset(v43, 0, sizeof(v43));
    *(_OWORD *)std::string v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    *(_OWORD *)uint64_t v36 = 0u;
    long long v37 = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::string v21 = std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, a2, &v47);
    long long v22 = (QMINasClient::AccessBarringHandler **)v21[6];
    for (uint64_t i = v21[7]; v22 != (QMINasClient::AccessBarringHandler **)i; ++v22)
    {
      uint64_t v24 = *v22;
      uint64_t v25 = (*(uint64_t (**)(QMINasClient::AccessBarringHandler *))(*(void *)*v22 + 32))(*v22);
      int v26 = *(char *)(v25 + 23);
      if (v26 >= 0) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = *(void *)v25;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v25 + 8);
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
      QMINasClient::AccessBarringHandler::listenForIndication(v24, a2, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v34, "");
    uint64_t v30 = ims::debug((uint64_t)v45, (uint64_t)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"set Access Barring type to ", 27);
    *(unsigned char *)(v30 + 17) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v36[1], __p);
    (*(void (**)(uint64_t, void **))(*(void *)v30 + 32))(v30, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" on instance ", 13);
    *(unsigned char *)(v30 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    v36[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v36 + *((void *)v36[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v36[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (uint64_t **)MEMORY[0x1C878E270](v43);
  }
  return result;
}

void sub_1C55B0724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMINasClient::BarringHandler::push_back(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)a1[2];
  unint64_t v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    void *v13 = a2;
    BOOL v6 = v13 + 1;
    char v16 = (char *)a1[1];
    unsigned int v15 = (char *)a1[2];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--int v13 = v17;
      }
      while (v15 != v16);
      unsigned int v15 = (char *)a1[1];
    }
    a1[1] = v13;
    a1[2] = v6;
    a1[3] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    BOOL v6 = v5 + 1;
  }
  a1[2] = v6;
}

void QMINasClient::requestCurrentBarringInfo(QMINasClient *this)
{
  if (*((unsigned char *)this + 96))
  {
    uint64_t v1 = (char *)*((void *)this + 20);
    uint64_t v2 = (char *)this + 168;
    if (v1 != (char *)this + 168)
    {
      do
      {
        uint64_t v12 = 0;
        *(_OWORD *)uint64_t v10 = 0u;
        long long v11 = 0u;
        int v3 = *((_DWORD *)v1 + 10);
        LODWORD(v10[0]) = *((_DWORD *)v1 + 8);
        LODWORD(v10[1]) = v3;
        long long v11 = 0uLL;
        uint64_t v12 = 0;
        std::vector<QMINasClient::AccessBarringHandler *>::__init_with_size[abi:ne180100]<QMINasClient::AccessBarringHandler **,QMINasClient::AccessBarringHandler **>(&v11, *((const void **)v1 + 6), *((void *)v1 + 7), (uint64_t)(*((void *)v1 + 7) - *((void *)v1 + 6)) >> 3);
        long long v4 = v11;
        if ((void)v11 != *((void *)&v11 + 1))
        {
          uint64_t v5 = (void *)v11;
          do
          {
            (*(void (**)(void, void))(*(void *)*v5 + 40))(*v5, LODWORD(v10[0]));
            ++v5;
          }
          while (v5 != *((void **)&v4 + 1));
        }
        if ((void)v4) {
          operator delete((void *)v4);
        }
        BOOL v6 = (char *)*((void *)v1 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            BOOL v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (char *)*((void *)v1 + 2);
            BOOL v8 = *(void *)v7 == (void)v1;
            uint64_t v1 = v7;
          }
          while (!v8);
        }
        uint64_t v1 = v7;
      }
      while (v7 != v2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Client not initialized, can't get barring info", 46);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v11) < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_1C55B0A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMINasClient::requestVoiceSystemId(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(unsigned char *)(a1 + 96))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v9 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Client not initialized, can't get voice system id", 49);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(v17) < 0) {
      operator delete(aBlock);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = (std::__shared_weak_count *)a3[1];
    if (v10)
    {
      long long v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        if (*a3) {
          (*(void (**)(void, uint64_t, void))(*(void *)*a3 + 16))(*a3, a2, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  memset(v13, 0, sizeof(v13));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13);
  qmi::ClientRouter::get();
  operator new();
}

void sub_1C55B0DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void QMINasClient::reportCallStatus(void *a1, const ims::AccessNetwork *a2, int a3, uint64_t a4, ims::AccessNetwork *a5, const ims::AccessNetwork *a6, uint64_t a7)
{
  int v7 = (int)a6;
  int v8 = a4;
  int v40 = a3;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v31 = &unk_1F20B2680;
  uint64_t v32 = &_bambiDomain;
  uint64_t v35 = 0;
  switch(a3)
  {
    case 0:
      if ((a4 & 0x40) == 0)
      {
        QMINasCache::start((QMINasCache *)(a1[31] + 80 * a2), a5, a6, a4, a7, (uint64_t)v25);
        ImsResult::operator=((uint64_t)&v31, (uint64_t)v25);
        goto LABEL_9;
      }
      uint64_t v12 = QMINasCache::mapRadioType(a5, a2);
      int v13 = (void (**)(void *, const ims::AccessNetwork *, uint64_t, uint64_t))(*a1 + 128);
      goto LABEL_12;
    case 1:
      QMINasCache::connect((QMINasCache *)(a1[31] + 80 * a2), (uint64_t)a6, a4, a7, (uint64_t)v25);
      ImsResult::operator=((uint64_t)&v31, (uint64_t)v25);
      goto LABEL_9;
    case 2:
      if ((a4 & 0x40) != 0)
      {
        uint64_t v12 = QMINasCache::mapRadioType(a5, a2);
        int v13 = (void (**)(void *, const ims::AccessNetwork *, uint64_t, uint64_t))(*a1 + 136);
LABEL_12:
        (*v13)(a1, a2, v12, a7);
      }
      else
      {
        QMINasCache::end((QMINasCache *)(a1[31] + 80 * a2), (uint64_t)a6, a4, a7, (uint64_t)v25);
        ImsResult::operator=((uint64_t)&v31, (uint64_t)v25);
LABEL_9:
        ImsResult::~ImsResult((ImsResult *)v25);
      }
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      v25[0] = &unk_1F20B2680;
      v25[1] = &_bambiDomain;
      int v26 = 1073741836;
      if (v32 == &_bambiDomain)
      {
        int v14 = v33;
        ImsResult::~ImsResult((ImsResult *)v25);
        if (v14 == 1073741836)
        {
          std::string::basic_string[abi:ne180100]<0>(v25, "nas");
          std::string::basic_string[abi:ne180100]<0>(v23, "");
          uint64_t v15 = ims::error((uint64_t)v25, (uint64_t)v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Unable to process status request ", 33);
          *(unsigned char *)(v15 + 17) = 0;
          ims::toString<UacCallStatus>(&v40, v21);
          (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)".  No call status started for ", 30);
          *(unsigned char *)(v15 + 17) = 0;
          if (v7) {
            char v16 = "MO";
          }
          else {
            char v16 = "MT";
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)v16, 2);
          *(unsigned char *)(v15 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" call on instance ", 18);
          *(unsigned char *)(v15 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v15 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" with services ", 15);
          *(unsigned char *)(v15 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v17, ",");
          BambiServices::namesForServiceMask(v8, __p);
          (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v18 < 0) {
            operator delete(v17);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
          if (v27 < 0) {
            operator delete(v25[0]);
          }
        }
      }
      else
      {
        ImsResult::~ImsResult((ImsResult *)v25);
      }
      ImsResult::~ImsResult((ImsResult *)&v31);
      return;
    case 4:
      QMINasCache::cancel((QMINasCache *)(a1[31] + 80 * a2), (int)a6, a4, a7, (uint64_t)v25);
      ImsResult::operator=((uint64_t)&v31, (uint64_t)v25);
      goto LABEL_9;
    default:
      QMINasCache::update((QMINasCache *)(a1[31] + 80 * a2), a5, (uint64_t)v25);
      ImsResult::operator=((uint64_t)&v31, (uint64_t)v25);
      goto LABEL_9;
  }
}

void sub_1C55B12F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  ImsResult::~ImsResult((ImsResult *)&a34);
  ImsResult::~ImsResult((ImsResult *)(v39 - 144));
  _Unwind_Resume(a1);
}

void QMINasClient::sendCallStatusResponse(QMINasClient *this, int a2, int a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    int v7 = sImsDispatchQueue;
    if (!sImsDispatchQueue)
    {
      int v7 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v7;
    }
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1174405120;
    void v8[2] = ___ZN12QMINasClient22sendCallStatusResponseEjjb_block_invoke;
    v8[3] = &__block_descriptor_tmp_47_3;
    _OWORD v8[4] = this;
    int v9 = a2;
    __int16 v10 = 100;
    int v11 = 0;
    char v12 = 0;
    int v13 = a3;
    char v14 = 0;
    dispatch_async(v7, v8);
  }
}

void ___ZN12QMINasClient22sendCallStatusResponseEjjb_block_invoke(uint64_t a1)
{
}

void non-virtual thunk to'QMINasClient::sendCallStatusResponse(QMINasClient *this, int a2, int a3, char a4)
{
}

uint64_t QMINasClient::applyCallStatusRequest(uint64_t a1, int a2, char a3, unint64_t a4, int a5)
{
  __int16 v10 = *(const void ***)(a1 + 8);
  int v11 = *(const void ***)(a1 + 16);
  char v12 = v10;
  if (v10 != v11)
  {
    char v12 = *(const void ***)(a1 + 8);
    while (*((unsigned char *)*v12 + 8) != 1)
    {
      if (++v12 == v11) {
        goto LABEL_9;
      }
    }
  }
  if (v12 == v11) {
LABEL_9:
  }
    operator new();
  if (!v13) {
    goto LABEL_25;
  }
  void v13[3] = a2;
  while (1)
  {
    if (v10 == v11) {
      goto LABEL_16;
    }
    if (*((unsigned char *)*v10 + 8) == 16) {
      break;
    }
    ++v10;
  }
  if (v10 == v11) {
LABEL_16:
  }
    operator new();
  if (!v14) {
    goto LABEL_25;
  }
  _OWORD v14[2] = a4;
  *qmi::MutableMessageBase::getTLV<nas::tlv::SystemMode>(a1, 17) = a3;
  uint64_t v15 = *(const void ***)(a1 + 8);
  char v16 = *(const void ***)(a1 + 16);
  if (v15 != v16)
  {
    while (*((unsigned char *)*v15 + 8) != 18)
    {
      if (++v15 == v16) {
        goto LABEL_24;
      }
    }
  }
  if (v15 == v16) {
LABEL_24:
  }
    operator new();
  if (!v17) {
LABEL_25:
  }
    __cxa_bad_cast();
  v17[3] = a5 ^ 1;
  return (a4 >> 3) & 1;
}

void QMINasClient::sendCallStatusRequest(uint64_t a1, int a2, int a3, char a4, unint64_t a5, int a6)
{
  memset(v14, 0, sizeof(v14));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
  QMINasClient::applyCallStatusRequest((uint64_t)v14, a3, a4, a5, a6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v11 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Sending Call Status Request to BB", 33);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v18 < 0) {
    operator delete(aBlock);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
  if (a2) {
    int v12 = 2 * (a2 == 1);
  }
  else {
    int v12 = 1;
  }
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::CallStateNotification::Request>(&v13, v12);
}

void sub_1C55B1C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  uint64_t v26 = a10;
  a10 = 0;
  if (v26) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v26);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMINasClient::sendCallStatusRequest(uint64_t a1, int a2, int a3, char a4, unint64_t a5, int a6)
{
}

void QMINasClient::sendStartImsRegistrationUacCheckRequest(uint64_t a1, uint64_t a2, char a3)
{
  memset(v5, 0, sizeof(v5));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v5);
  *qmi::MutableMessageBase::getTLV<nas::tlv::SystemMode>((uint64_t)v5, bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Sending Start IMS Registration UAC Check Request to BB...", 57);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v9 < 0) {
    operator delete(aBlock);
  }
  if (v7 < 0) {
    operator delete(__p);
  }
  qmi::ClientRouter::get();
  operator new();
}

void sub_1C55B1F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v24, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMINasClient::sendStartImsRegistrationUacCheckRequest(uint64_t a1, uint64_t a2, char a3)
{
}

void QMINasClient::sendStopImsRegistrationUacCheckRequest(uint64_t a1, uint64_t a2, char a3)
{
  memset(v5, 0, sizeof(v5));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v5);
  *qmi::MutableMessageBase::getTLV<nas::tlv::SystemMode>((uint64_t)v5, bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Sending Stop IMS Registration UAC Check Request to BB...", 56);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v9 < 0) {
    operator delete(aBlock);
  }
  if (v7 < 0) {
    operator delete(__p);
  }
  qmi::ClientRouter::get();
  operator new();
}

void sub_1C55B225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v24, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMINasClient::sendStopImsRegistrationUacCheckRequest(uint64_t a1, uint64_t a2, char a3)
{
}

void QMINasClient::SsacHandler::~SsacHandler(QMINasClient::SsacHandler *this)
{
}

const char *QMINasClient::SsacHandler::name(QMINasClient::SsacHandler *this)
{
  return "SSAC";
}

void QMINasClient::AcbHandler::~AcbHandler(QMINasClient::AcbHandler *this)
{
}

void *QMINasClient::AcbHandler::name(QMINasClient::AcbHandler *this)
{
  return &QMINasClient::AcbHandler::kName;
}

uint64_t QMINasClient::isInitialized(QMINasClient *this)
{
  return *((unsigned __int8 *)this + 96);
}

char *std::vector<QMINasCache>::__emplace_back_slow_path<int,QMINasClient *>(int64x2_t *a1, int a2, uint64_t a3)
{
  uint64_t v4 = a1->i64[0];
  unint64_t v3 = a1->u64[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - a1->i64[0]) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  __int16 v10 = (char *)a1[1].i64[0];
  if (0x999999999999999ALL * ((uint64_t)&v10[-v4] >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((uint64_t)&v10[-v4] >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v4] >> 4) >= 0x199999999999999) {
    unint64_t v11 = 0x333333333333333;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v25 = a1 + 1;
  if (v11)
  {
    if (v11 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v12 = (char *)operator new(80 * v11);
  }
  else
  {
    int v12 = 0;
  }
  int v13 = &v12[80 * v5];
  char v22 = v12;
  v23.i64[0] = (uint64_t)v13;
  uint64_t v14 = a3 + 56;
  if (!a3) {
    uint64_t v14 = 0;
  }
  *(void *)int v13 = v14;
  *((void *)v13 + 3) = 0;
  uint64_t v15 = &v12[80 * v11];
  *((_DWORD *)v13 + 2) = a2;
  *((void *)v13 + 2) = v13 + 24;
  *((void *)v13 + 7) = 0;
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 5) = v13 + 48;
  char v16 = v13 + 80;
  v23.i64[1] = (uint64_t)(v13 + 80);
  uint64_t v24 = v15;
  if (v3 == v4)
  {
    int64x2_t v20 = vdupq_n_s64(v3);
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      char v18 = &v13[v17];
      uint64_t v19 = *(void *)(v3 + v17 - 80);
      *((_DWORD *)v18 - 18) = *(_DWORD *)(v3 + v17 - 72);
      *((void *)v18 - 10) = v19;
      std::map<nas::CallMediaType,QMINasCache::CallStatusRecord>::map[abi:ne180100]((uint64_t)&v13[v17 - 64], (void *)(v3 + v17 - 64));
      std::map<nas::CallMediaType,QMINasCache::CallStatusRecord>::map[abi:ne180100]((uint64_t)&v13[v17 - 40], (void *)(v3 + v17 - 40));
      *(_OWORD *)&v13[v17 - 16] = *(_OWORD *)(v3 + v17 - 16);
      v17 -= 80;
    }
    while (v3 + v17 != v4);
    int64x2_t v20 = *a1;
    __int16 v10 = (char *)a1[1].i64[0];
    v13 += v17;
    char v16 = (char *)v23.i64[1];
    uint64_t v15 = v24;
  }
  a1->i64[0] = (uint64_t)v13;
  a1->i64[1] = (uint64_t)v16;
  int64x2_t v23 = v20;
  a1[1].i64[0] = (uint64_t)v15;
  uint64_t v24 = v10;
  char v22 = (char *)v20.i64[0];
  std::__split_buffer<QMINasCache>::~__split_buffer((uint64_t)&v22);
  return v16;
}

uint64_t std::map<nas::CallMediaType,QMINasCache::CallStatusRecord>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unint64_t v6 = v5[4];
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      char v9 = *(void **)(a1 + 8);
      __int16 v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          char v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          __int16 v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7) {
          int v12 = (uint64_t **)v8;
        }
        else {
          int v12 = (uint64_t **)v3;
        }
        if (v7) {
          int v13 = (uint64_t **)(v8 + 1);
        }
        else {
          int v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        int v13 = (uint64_t **)v3;
        int v12 = (uint64_t **)v3;
        if (v7)
        {
          uint64_t v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v14;
              unint64_t v15 = v14[4];
              if (v15 <= v6) {
                break;
              }
              uint64_t v14 = *v12;
              int v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v6) {
              goto LABEL_25;
            }
            uint64_t v14 = v12[1];
            if (!v14)
            {
              int v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      char v16 = operator new(0x48uLL);
      long long v17 = *((_OWORD *)v5 + 2);
      long long v18 = *((_OWORD *)v5 + 3);
      v16[8] = v5[8];
      *((_OWORD *)v16 + 2) = v17;
      *((_OWORD *)v16 + 3) = v18;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      uint64_t v19 = (void *)v5[1];
      if (v19)
      {
        do
        {
          int64x2_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          int64x2_t v20 = (void *)v5[2];
          BOOL v11 = *v20 == (void)v5;
          unint64_t v5 = v20;
        }
        while (!v11);
      }
      unint64_t v5 = v20;
    }
    while (v20 != v4);
  }
  return a1;
}

void sub_1C55B26CC(_Unwind_Exception *a1)
{
  std::__tree<unsigned int>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<QMINasCache>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__tree<unsigned int>::destroy(i - 40, *(void **)(i - 32));
    std::__tree<unsigned int>::destroy(i - 64, *(void **)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<QMINasCache>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 64;
      do
      {
        std::__tree<unsigned int>::destroy(v6 + 24, *(void **)(v6 + 32));
        std::__tree<unsigned int>::destroy(v6, *(void **)(v6 + 8));
        uint64_t v7 = v6 - 16;
        v6 -= 80;
      }
      while ((void *)v7 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<QMINasClient::AccessBarringHandler *>::__init_with_size[abi:ne180100]<QMINasClient::AccessBarringHandler **,QMINasClient::AccessBarringHandler **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    void v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      double result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C55B2868(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C55B28F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient20AccessBarringHandler19listenForIndicationEjbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::error((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Access Barring Indication Register request failed: ", 51);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v2 + 17) = 0;
    unint64_t v3 = (const char *)qmi::asString();
    size_t v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
    uint64_t v2 = v6;
    if (*(unsigned char *)(v5 + 4)) {
      uint64_t v7 = "";
    }
    else {
      uint64_t v7 = "not ";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, 4 * (*(unsigned char *)(v5 + 4) == 0));
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"listening for Access Barring indication for instance ", 53);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_1C55B2B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN12QMINasClient20AccessBarringHandler19listenForIndicationEjbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN12QMINasClient20AccessBarringHandler19listenForIndicationEjbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::AccessBarringHandler::listenForIndication(unsigned int,BOOL)::$_0,std::allocator<QMINasClient::AccessBarringHandler::listenForIndication(unsigned int,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::AccessBarringHandler::listenForIndication(unsigned int,BOOL)::$_0,std::allocator<QMINasClient::AccessBarringHandler::listenForIndication(unsigned int,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C55B2C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF4E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF4E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  cast_message_type<nas::SsacInfoInd::Indication const&>::cast(a3, (qmi::MessageBase *)v9);
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v6 = v4 == 2;
  uint64_t v15 = 0;
  char v16 = (__int16 *)&v15;
  uint64_t v17 = 0x4002000000;
  long long v18 = __Block_byref_object_copy__6;
  uint64_t v19 = __Block_byref_object_dispose__6;
  uint64_t v20 = 100;
  uint64_t v21 = 0;
  int v22 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  _OWORD v14[2] = ___ZN12QMINasClient11SsacHandler24handleSsacInfoIndicationEjRKN3nas11SsacInfoInd10IndicationE_block_invoke;
  void v14[3] = &unk_1E6511C10;
  void v14[4] = &v15;
  v12[0] = v14;
  qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>((qmi::MessageBase *)v9, 16, (uint64_t)v12);
  std::string::basic_string[abi:ne180100]<0>(v12, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Got SSAC indication: ", 21);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", ", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" for instance ", 14);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  uint64_t v8 = *(void **)(v5 + 8);
  if (v8) {
    IMSNasClient::notifyDelegates(v8, v6, v16 + 20, 1);
  }
  _Block_object_dispose(&v15, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v9);
}

void sub_1C55B2F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v23 - 96), 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::SsacHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::target_type()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient11SsacHandler25requestCurrentBarringInfoEjE3__0EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    if (v5 == 74)
    {
      if (*(void *)(v4 + 8))
      {
        std::string::basic_string[abi:ne180100]<0>(&v22, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)&v22, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"no SSAC information available for instance ", 43);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v22, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::error((uint64_t)&v22, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"no delegate for instance ", 25);
      }
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v11 = ims::error((uint64_t)&v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"GetSsacInfo request failed: ", 28);
      *(unsigned char *)(v11 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v11 + 17) = 0;
      int v12 = (const char *)qmi::asString();
      size_t v13 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received GetSsacInfo response for instance ", 43);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
    int v8 = *((_DWORD *)v3 + 2);
    int v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x4002000000;
    uint64_t v25 = __Block_byref_object_copy__6;
    uint64_t v26 = __Block_byref_object_dispose__6;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v27 = 100;
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)0x40000000;
    uint64_t v19 = ___ZN12QMINasClient11SsacHandler22handleSsacInfoResponseEjRKN3nas11GetSsacInfo8ResponseE_block_invoke;
    uint64_t v20 = &unk_1E6511C38;
    uint64_t v21 = &v22;
    v16[0] = __p;
    qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(a2, 16, (uint64_t)v16);
    std::string::basic_string[abi:ne180100]<0>(v16, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v9 = ims::debug((uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Got SSAC response: ", 19);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)", ", 2);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" for instance ", 14);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    __int16 v10 = *(void **)(v4 + 8);
    if (v10) {
      IMSNasClient::notifyDelegates(v10, v8, (__int16 *)v23 + 20, 1);
    }
    _Block_object_dispose(&v22, 8);
  }
}

void sub_1C55B34E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c89_ZTSNSt3__110shared_ptrIZN12QMINasClient11SsacHandler25requestCurrentBarringInfoEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSNSt3__110shared_ptrIZN12QMINasClient11SsacHandler25requestCurrentBarringInfoEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::SsacHandler::requestCurrentBarringInfo(unsigned int)::$_0,std::allocator<QMINasClient::SsacHandler::requestCurrentBarringInfo(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::SsacHandler::requestCurrentBarringInfo(unsigned int)::$_0,std::allocator<QMINasClient::SsacHandler::requestCurrentBarringInfo(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11GetSsacInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::GetSsacInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C55B3674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF5E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF5E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  cast_message_type<nas::AcbInfoInd::Indication const&>::cast(a3, (qmi::MessageBase *)v43);
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v6 = v4 == 2;
  uint64_t v49 = 0;
  int v50 = 0;
  uint64_t v48 = 100;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v43);
  uint64_t v9 = TlvValue;
  if (!TlvValue) {
    goto LABEL_14;
  }
  int v10 = v8;
  v46[0] = TlvValue;
  BOOL v11 = tlv::parseV<nas::tlv::AcbInfoSkipVoice>((tlv **)v46, v8);
  if (!v46[0])
  {
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v43[0], 24, v9, v10);
LABEL_14:
    BOOL v12 = 0;
    goto LABEL_15;
  }
  BOOL v12 = v11;
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::debug((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"ACB voice skip is ", 18);
  *(unsigned char *)(v13 + 17) = 0;
  if (v12) {
    uint64_t v14 = "enabled";
  }
  else {
    uint64_t v14 = "disabled";
  }
  if (v12) {
    uint64_t v15 = 7;
  }
  else {
    uint64_t v15 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v14, v15);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
LABEL_15:
  char v16 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v43);
  long long v18 = v16;
  if (!v16)
  {
LABEL_28:
    BOOL v21 = 0;
    goto LABEL_29;
  }
  int v19 = v17;
  v46[0] = v16;
  BOOL v20 = tlv::parseV<nas::tlv::AcbInfoSkipSms>((tlv **)v46, v17);
  if (!v46[0])
  {
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v43[0], 26, v18, v19);
    goto LABEL_28;
  }
  BOOL v21 = v20;
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v22 = ims::debug((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"ACB SMS skip is ", 16);
  *(unsigned char *)(v22 + 17) = 0;
  if (v21) {
    uint64_t v23 = "enabled";
  }
  else {
    uint64_t v23 = "disabled";
  }
  if (v21) {
    uint64_t v24 = 7;
  }
  else {
    uint64_t v24 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)v23, v24);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
LABEL_29:
  uint64_t v25 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v43);
  uint64_t v27 = v25;
  if (v25)
  {
    int v28 = v26;
    v53[0] = v25;
    unint64_t v29 = tlv::parseV<nas::tlv::AcbInfoSignaling>((uint64_t *)v53, v26);
    if (v53[0])
    {
      if (v29 == 100) {
        __int16 v30 = 100;
      }
      else {
        __int16 v30 = 0;
      }
      LOWORD(v48) = v30;
      HIDWORD(v48) = WORD1(v29);
      LOBYTE(v49) = BYTE4(v29);
      LODWORD(v27) = 1;
      LOBYTE(v50) = 1;
      if (WORD1(v29) < 0x201u)
      {
        HIDWORD(v49) = 1;
        goto LABEL_54;
      }
      LOWORD(v48) = 100;
      HIDWORD(v48) = 0;
      LOBYTE(v49) = 0;
      LOBYTE(v50) = 0;
      HIDWORD(v49) = 1;
    }
    else
    {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v43[0], 17, v27, v28);
      LODWORD(v27) = 0;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v31 = ims::debug((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
  *(unsigned char *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  uint64_t v32 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v43);
  uint64_t v34 = v32;
  if (v32)
  {
    int v35 = v33;
    v53[0] = v32;
    unint64_t v36 = tlv::parseV<nas::tlv::AcbInfoData>((uint64_t *)v53, v33);
    if (v53[0])
    {
      if (v36 == 100) {
        __int16 v37 = 100;
      }
      else {
        __int16 v37 = 0;
      }
      LOWORD(v48) = v37;
      HIDWORD(v48) = WORD1(v36);
      LOBYTE(v49) = BYTE4(v36);
      LOBYTE(v50) = 1;
      if (WORD1(v36) >= 0x201u)
      {
        LOWORD(v48) = 100;
        HIDWORD(v48) = 0;
        LOBYTE(v49) = 0;
        LOBYTE(v50) = 0;
      }
      if ((_BYTE)v36) {
        LODWORD(v27) = 1;
      }
      else {
        LODWORD(v27) = 5;
      }
      HIDWORD(v49) = v27;
    }
    else
    {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v43[0], 18, v34, v35);
    }
  }
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v38 = ims::debug((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Received ACB info: ", 19);
  *(unsigned char *)(v38 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Services : ", 11);
  *(unsigned char *)(v38 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v44, ",");
  BambiServices::namesForServiceMask((int)v27, v46);
  (*(void (**)(uint64_t, void **))(*(void *)v38 + 32))(v38, v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)", Factor : ", 11);
  *(unsigned char *)(v38 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v38 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)", Time : ", 9);
  *(unsigned char *)(v38 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v38 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(unsigned char *)(v38 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v38 + 17) = 0;
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0)
  {
    operator delete(v53[0]);
    if (!v27) {
      goto LABEL_76;
    }
  }
  else if (!v27)
  {
LABEL_76:
    long long v41 = *(void **)(v5 + 8);
    if (v41) {
      IMSNasClient::notifyDelegates(v41, v6, (__int16 *)&v48, 2);
    }
    goto LABEL_83;
  }
  if ((v27 & 1) != 0 && v12)
  {
    LODWORD(v27) = v27 ^ 1;
    HIDWORD(v49) = v27;
    std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v39 = ims::debug((uint64_t)v53, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"ACB Skip for voice is enabled, removing voice service flag from barring indication.", 83);
    *(unsigned char *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v39 + 17) = 0;
    if (v52 < 0) {
      operator delete(__p[0]);
    }
    if (v54 < 0) {
      operator delete(v53[0]);
    }
  }
  if ((v27 & 4) == 0 || !v21) {
    goto LABEL_75;
  }
  LODWORD(v27) = v27 ^ 4;
  HIDWORD(v49) = v27;
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v40 = ims::debug((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"ACB Skip for SMS is enabled, removing SMS service flag from barring indication.", 79);
  *(unsigned char *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v40 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0)
  {
    operator delete(v53[0]);
    if (v27) {
      goto LABEL_76;
    }
  }
  else
  {
LABEL_75:
    if (v27) {
      goto LABEL_76;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v42 = ims::warn((uint64_t)v53, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Ignoring ACB barring indiciation with no valid service to bar.", 62);
  *(unsigned char *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v42 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
LABEL_83:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v43);
}

void sub_1C55B3FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0>(unsigned short,QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::AcbHandler::internalListenForIndication(unsigned int,BOOL)::$_0 &&,QMIServiceMsg const)>::target_type()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient10AcbHandler25requestCurrentBarringInfoEjE3__0EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  int v5 = *((_DWORD *)a2 + 1);
  if (v5)
  {
    if (v5 == 74)
    {
      if (!*(void *)(v4 + 8)) {
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v55, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"no ACB information available for instance ", 42);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::error((uint64_t)v55, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"GetAcbInfo request failed: ", 27);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v6 + 17) = 0;
      long long v18 = (const char *)qmi::asString();
      size_t v19 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v18, v19);
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received GetAcbInfo response for instance ", 42);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  int v8 = *((_DWORD *)v3 + 2);
  uint64_t v51 = 0;
  int v52 = 0;
  uint64_t v50 = 100;
  TlvValue = (void *)qmi::MessageBase::findTlvValue(a2);
  if (!TlvValue) {
    goto LABEL_27;
  }
  BOOL v11 = TlvValue;
  int v12 = v10;
  v48[0] = TlvValue;
  BOOL v13 = tlv::parseV<nas::tlv::AcbInfoSkipVoice>((tlv **)v48, v10);
  if (!v48[0])
  {
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 19, v11, v12);
LABEL_27:
    BOOL v14 = 0;
    goto LABEL_28;
  }
  BOOL v14 = v13;
  std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v15 = ims::debug((uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"ACB voice skip is ", 18);
  *(unsigned char *)(v15 + 17) = 0;
  if (v14) {
    char v16 = "enabled";
  }
  else {
    char v16 = "disabled";
  }
  if (v14) {
    uint64_t v17 = 7;
  }
  else {
    uint64_t v17 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)v16, v17);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
LABEL_28:
  BOOL v20 = (void *)qmi::MessageBase::findTlvValue(a2);
  if (!v20)
  {
LABEL_41:
    BOOL v25 = 0;
    goto LABEL_42;
  }
  uint64_t v22 = v20;
  int v23 = v21;
  v48[0] = v20;
  BOOL v24 = tlv::parseV<nas::tlv::AcbInfoSkipSms>((tlv **)v48, v21);
  if (!v48[0])
  {
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 21, v22, v23);
    goto LABEL_41;
  }
  BOOL v25 = v24;
  std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v26 = ims::debug((uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"ACB SMS skip is ", 16);
  *(unsigned char *)(v26 + 17) = 0;
  if (v25) {
    uint64_t v27 = "enabled";
  }
  else {
    uint64_t v27 = "disabled";
  }
  if (v25) {
    uint64_t v28 = 7;
  }
  else {
    uint64_t v28 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)v27, v28);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
LABEL_42:
  unint64_t v29 = (void *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v31 = v29;
  if (v29)
  {
    int v32 = v30;
    v55[0] = v29;
    unint64_t v33 = tlv::parseV<nas::tlv::AcbInfoSignaling>((uint64_t *)v55, v30);
    if (v55[0])
    {
      if (v33 == 100) {
        __int16 v34 = 100;
      }
      else {
        __int16 v34 = 0;
      }
      LOWORD(v50) = v34;
      HIDWORD(v50) = WORD1(v33);
      LOBYTE(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = BYTE4(v33);
      LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
      LOBYTE(v52) = 1;
      if (WORD1(v33) < 0x201u)
      {
        HIDWORD(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
        goto LABEL_67;
      }
      LOWORD(v50) = 100;
      HIDWORD(v50) = 0;
      LOBYTE(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      LOBYTE(v52) = 0;
      HIDWORD(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
    }
    else
    {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v31, v32);
      LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v35 = ims::debug((uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
  *(unsigned char *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v35 + 17) = 0;
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  unint64_t v36 = (void *)qmi::MessageBase::findTlvValue(a2);
  if (v36)
  {
    uint64_t v38 = v36;
    int v39 = v37;
    v55[0] = v36;
    unint64_t v40 = tlv::parseV<nas::tlv::AcbInfoData>((uint64_t *)v55, v37);
    if (v55[0])
    {
      if (v40 == 100) {
        __int16 v41 = 100;
      }
      else {
        __int16 v41 = 0;
      }
      LOWORD(v50) = v41;
      HIDWORD(v50) = WORD1(v40);
      LOBYTE(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = BYTE4(v40);
      LOBYTE(v52) = 1;
      if (WORD1(v40) >= 0x201u)
      {
        LOWORD(v50) = 100;
        HIDWORD(v50) = 0;
        LOBYTE(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        LOBYTE(v52) = 0;
      }
      if ((_BYTE)v40) {
        LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
      }
      else {
        LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 5;
      }
      HIDWORD(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
    }
    else
    {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 18, v38, v39);
    }
  }
LABEL_67:
  std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v42 = ims::debug((uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Received ACB info: ", 19);
  *(unsigned char *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Services : ", 11);
  *(unsigned char *)(v42 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v46, ",");
  BambiServices::namesForServiceMask((int)v31, v48);
  (*(void (**)(uint64_t, void **))(*(void *)v42 + 32))(v42, v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)", Factor : ", 11);
  *(unsigned char *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)", Time : ", 9);
  *(unsigned char *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(unsigned char *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v42 + 17) = 0;
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v56 < 0)
  {
    operator delete(v55[0]);
    if (!v31) {
      goto LABEL_90;
    }
  }
  else if (!v31)
  {
    goto LABEL_90;
  }
  if ((v31 & 1) != 0 && v14)
  {
    LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31 ^ 1;
    HIDWORD(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
    std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v43 = ims::debug((uint64_t)v55, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"ACB Skip for voice is enabled, removing voice service flag from barring indication.", 83);
    *(unsigned char *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v43 + 17) = 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
  }
  if ((v31 & 4) != 0 && v25)
  {
    LODWORD(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31 ^ 4;
    HIDWORD(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
    std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v44 = ims::debug((uint64_t)v55, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"ACB Skip for SMS is enabled, removing SMS service flag from barring indication.", 79);
    *(unsigned char *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v44 + 17) = 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
  }
  if (!v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v55, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::warn((uint64_t)v55, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Ignoring ACB barring indiciation with no valid service to bar.", 62);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_22:
    *(unsigned char *)(v6 + 17) = 0;
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    return;
  }
LABEL_90:
  char v45 = *(void **)(v4 + 8);
  if (v45) {
    IMSNasClient::notifyDelegates(v45, v8, (__int16 *)&v50, 2);
  }
}

void sub_1C55B4B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN12QMINasClient10AcbHandler25requestCurrentBarringInfoEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN12QMINasClient10AcbHandler25requestCurrentBarringInfoEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::AcbHandler::requestCurrentBarringInfo(unsigned int)::$_0,std::allocator<QMINasClient::AcbHandler::requestCurrentBarringInfo(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::AcbHandler::requestCurrentBarringInfo(unsigned int)::$_0,std::allocator<QMINasClient::AcbHandler::requestCurrentBarringInfo(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetAcbInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::GetAcbInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C55B4D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned int>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  double result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = operator new(0x40uLL);
    void v7[2] = *(_OWORD *)a3;
    *((void *)v7 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a3 + 24);
    return std::__tree<unsigned int>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

void std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF6E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF6E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(*(void *)(a1 + 8) + 97) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v3 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"QMI client started for instance ", 32);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v13 < 0) {
    operator delete(aBlock);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)uint64_t v8 = 0u;
  long long v9 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZZN12QMINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjENK3__0clEN3qmi16SubscriptionTypeE_block_invoke;
  v6[3] = &__block_descriptor_tmp_137;
  BOOL v7 = v2 == 2;
  uint64_t v4 = (const void **)v8[1];
  if (v8[1] != (void *)v9)
  {
    while (*((unsigned char *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v9) {
        goto LABEL_12;
      }
    }
  }
  if (v4 != (const void **)v9)
  {
    if (v5)
    {
      ___ZZN12QMINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjENK3__0clEN3qmi16SubscriptionTypeE_block_invoke((uint64_t)v6, v5 + 9);
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_12:
  operator new();
}

void sub_1C55B52D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  if (a11) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v30, a11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_0,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

uint64_t ___ZZN12QMINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEjENK3__0clEN3qmi16SubscriptionTypeE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN12QMINasClient10initializeERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEjENK3__0clENS_16SubscriptionTypeEEUlRKN3nas16BindSubscription8ResponseEE_EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(uint64_t ***)v5;
    int v12 = *(_DWORD *)(v5 + 8);
    std::string::basic_string[abi:ne180100]<0>(v8, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Client bound for instance ", 26);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v6 + 23, (unsigned int *)&v12, &v12);
    QMINasClient::startListening((QMINasClient *)v6, v12);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::error((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Bind Subscription request failed: ", 34);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = (const char *)qmi::asString();
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C55B57B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c191_ZTSNSt3__110shared_ptrIZZN12QMINasClient10initializeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjENK3__0clEN3qmi16SubscriptionTypeEEUlRKN3nas16BindSubscription8ResponseEE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c191_ZTSNSt3__110shared_ptrIZZN12QMINasClient10initializeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjENK3__0clEN3qmi16SubscriptionTypeEEUlRKN3nas16BindSubscription8ResponseEE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::initialize(std::string const&,unsigned int)::$_0::operator() const(qmi::SubscriptionType)::{lambda(nas::BindSubscription::Response const&)#1},std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0::operator() const(qmi::SubscriptionType)::{lambda(nas::BindSubscription::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::initialize(std::string const&,unsigned int)::$_0::operator() const(qmi::SubscriptionType)::{lambda(nas::BindSubscription::Response const&)#1},std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_0::operator() const(qmi::SubscriptionType)::{lambda(nas::BindSubscription::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DF7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C55B5970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF838;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 8) + 97) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"QMI client stopped for instance ", 32);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C55B5B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMINasClient::initialize(std::string const&,unsigned int)::$_1,std::allocator<QMINasClient::initialize(std::string const&,unsigned int)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF8B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF8B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v19, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v19);
    if (__p)
    {
      int v23 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v19);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = v4 == 2;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v19);
  int v10 = TlvValue;
  if (!TlvValue) {
    goto LABEL_20;
  }
  int v11 = v9;
  std::string __p = TlvValue;
  uint64_t v12 = tlv::parseV<nas::tlv::VoiceSystemId>((tlv **)&__p, v9);
  if (!__p)
  {
    if (((unsigned int (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v19[0], 19, v10, v11))
    {
      uint64_t v12 = 0;
      goto LABEL_12;
    }
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    uint64_t v17 = ims::debug((uint64_t)&__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Got subscription info indication.  No relevant changes. [instance=", 66);
    *(unsigned char *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    goto LABEL_31;
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  uint64_t v13 = ims::debug((uint64_t)&__p, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Got subscription info indication [instance=", 43);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" voiceSystemId=", 15);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  BOOL v14 = *(std::__shared_weak_count **)(v6 + 240);
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      uint64_t v16 = *(void *)(v6 + 232);
      if (v16)
      {
        (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v16 + 24))(v16, v7, v12);
LABEL_30:
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        goto LABEL_31;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  uint64_t v18 = ims::debug((uint64_t)&__p, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"NasVoiceSystemReceiver is null", 30);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v15) {
    goto LABEL_30;
  }
LABEL_31:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v19);
}

void sub_1C55B6020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_2>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF938;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF938;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v39, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v39);
    if (__p)
    {
      uint64_t v42 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v39);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v7 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Received MMTel response indication from baseband", 48);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v52 < 0) {
    operator delete(aBlock);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v39);
  uint64_t v10 = (uint64_t)TlvValue;
  if (TlvValue)
  {
    int v11 = v9;
    std::string __p = TlvValue;
    int v12 = tlv::parseV<nas::tlv::Response>((tlv **)&__p, v9);
    if (__p)
    {
      if ((v12 - 1) > 2) {
        uint64_t v10 = 2;
      }
      else {
        uint64_t v10 = dword_1C56DBA0C[v12 - 1];
      }
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(v39[0], 1, v10, v11);
      uint64_t v10 = 0;
    }
  }
  uint64_t v13 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v39);
  uint64_t v15 = v13;
  if (v13)
  {
    int v16 = v14;
    std::string __p = v13;
    unint64_t v17 = tlv::parseV<nas::tlv::CallType>((tlv **)&__p, v14);
    if (__p) {
      goto LABEL_22;
    }
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v39[0], 2, v15, v16);
  }
  unint64_t v17 = 0;
LABEL_22:
  uint64_t v18 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v39);
  BOOL v20 = v18;
  if (v18)
  {
    int v21 = v19;
    std::string __p = v18;
    unsigned int v22 = tlv::parseV<nas::tlv::BarringTime>((tlv **)&__p, v19);
    if (__p) {
      goto LABEL_26;
    }
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v39[0], 4, v20, v21);
  }
  unsigned int v22 = 0;
LABEL_26:
  int v23 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v39);
  BOOL v25 = v23;
  if (v23)
  {
    int v26 = v24;
    std::string __p = v23;
    char v27 = tlv::parseV<nas::tlv::SystemMode>((tlv **)&__p, v24);
    if (__p) {
      goto LABEL_30;
    }
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v39[0], 3, v25, v26);
  }
  char v27 = 0;
LABEL_30:
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (v10 == 1) {
    __int16 v28 = 0;
  }
  else {
    __int16 v28 = 100;
  }
  LOWORD(v44) = v28;
  HIDWORD(v44) = v22;
  int v46 = 1;
  if (v22 >= 0x201)
  {
    LOWORD(v44) = 100;
    HIDWORD(v44) = 0;
    LOBYTE(v46) = 0;
  }
  HIDWORD(v45) = v17 & 7;
  double Responded = QMINasCache::setLastResponded((QMINasCache *)(v6[31] + 80 * (v4 == 2)), (uint64_t)&__p);
  int v30 = (*(uint64_t (**)(void *, void, double))(*(void *)v42 + 24))(v42, v43, Responded);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (!v30) {
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v31 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Unmatched MMTel response!", 25);
  *(unsigned char *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  if (v52 < 0) {
    operator delete(aBlock);
  }
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p);
    if (!v10) {
      goto LABEL_44;
    }
  }
  else
  {
LABEL_39:
    if (!v10) {
      goto LABEL_44;
    }
  }
  BOOL v40 = 0;
  double v32 = QMINasCache::cancelLast((QMINasCache *)(v6[31] + 80 * (v4 == 2)), &v40, (uint64_t)&__p);
  char v33 = (*(uint64_t (**)(void *, void, double))(*(void *)v42 + 24))(v42, v43, v32);
  if (v27 == 8) {
    char v34 = v33;
  }
  else {
    char v34 = 1;
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
  if ((v34 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v35 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Call status failed for LTE RAT!", 31);
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
    if (v52 < 0) {
      operator delete(aBlock);
    }
    if (SHIBYTE(v43) < 0) {
      operator delete(__p);
    }
    BOOL v36 = v40;
    int v50 = v10;
    memset(v49, 0, 32);
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v49);
    QMINasClient::applyCallStatusRequest((uint64_t)v49, 1, 8, v17, v36);
    std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v37 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Sending Call Status Request to BB due to ", 41);
    *(unsigned char *)(v37 + 17) = 0;
    ims::toString<UacAccessResponse>(&v50, &v47);
    (*(void (**)(uint64_t, void **))(*(void *)v37 + 32))(v37, &v47);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (v48 < 0) {
      operator delete(v47);
    }
    if (v52 < 0) {
      operator delete(aBlock);
    }
    if (SHIBYTE(v43) < 0) {
      operator delete(__p);
    }
    if (v4 == 2) {
      int v38 = 2;
    }
    else {
      int v38 = 1;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::CallStateNotification::Request>(&v47, v38);
  }
LABEL_44:
  IMSNasClient::notifyDelegates(v6, v4 == 2, (__int16 *)&v44, v10, (v17 >> 3) & 1);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v39);
}

void sub_1C55B69B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  uint64_t v37 = a30;
  a30 = 0;
  if (v37) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a30, v37);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_3>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DF9B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DF9B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v14, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  BOOL v7 = v4 == 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Received UAC barring alleviation indication from baseband", 57);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  int v11 = TlvValue;
  if (!TlvValue) {
    goto LABEL_15;
  }
  int v12 = v10;
  std::string __p = TlvValue;
  unint64_t v13 = tlv::parseV<nas::tlv::CallType>((tlv **)&__p, v10);
  if (!__p)
  {
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v14[0], 1, v11, v12);
LABEL_15:
    unint64_t v13 = 0;
  }
  LODWORD(v18) = 0;
  std::string __p = (void *)100;
  HIDWORD(v18) = v13 & 7;
  LODWORD(v19) = 0;
  IMSNasClient::notifyDelegates(v6, v7, (__int16 *)&__p, 3, (v13 >> 3) & 1);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_1C55B6DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_4>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_4 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DFA38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DFA38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v7, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
    if (__p)
    {
      uint64_t v9 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v7);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v9 = 0x4000000000;
  std::string __p = (void *)100;
  LODWORD(v10) = 0;
  IMSNasClient::notifyDelegates(v6, v4 == 2, (__int16 *)&__p, 3, 0);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v7);
}

void sub_1C55B6FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_5>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F20DFAB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20DFAB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v26, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v26);
    if (__p)
    {
      char v33 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v26);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  BOOL v7 = v4 == 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nas");
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Received network congestion indication from baseband", 52);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v26);
  int v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    std::string __p = TlvValue;
    BOOL v13 = tlv::parseV<nas::tlv::NwCongestion>((tlv **)&__p, v10);
    if (__p) {
      goto LABEL_16;
    }
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v26[0], 16, v11, v12);
  }
  BOOL v13 = 0;
LABEL_16:
  int v14 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v26);
  char v16 = v14;
  if (v14)
  {
    int v17 = v15;
    std::string __p = v14;
    unsigned int v18 = tlv::parseV<nas::tlv::TimerValueRemaining>((tlv **)&__p, v15);
    if (__p) {
      goto LABEL_20;
    }
    ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v26[0], 17, v16, v17);
  }
  unsigned int v18 = 0;
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  uint64_t v19 = ims::debug((uint64_t)&__p, (uint64_t)v30);
  uint64_t v20 = v19;
  if (v13) {
    int v21 = "Network";
  }
  else {
    int v21 = "Internal";
  }
  unsigned int v22 = *(void **)(v19 + 8);
  if (v13) {
    uint64_t v23 = 7;
  }
  else {
    uint64_t v23 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v21, v23);
  *(unsigned char *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" is congested: TimerValue=", 26);
  *(unsigned char *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  uint64_t v28 = 0;
  uint64_t v27 = 100;
  if (v18 % 0x3E8) {
    unsigned int v24 = v18 / 0x3E8 + 1;
  }
  else {
    unsigned int v24 = v18 / 0x3E8;
  }
  HIDWORD(v28) = 64;
  int v29 = 0;
  HIDWORD(v27) = v24;
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v30, "");
  uint64_t v25 = ims::debug((uint64_t)&__p, (uint64_t)v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"barringTime will be ", 20);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  IMSNasClient::notifyDelegates(v6, v7, (__int16 *)&v27, 4, 0);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v26);
}

void sub_1C55B74F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMINasClient::initialize(std::string const&,unsigned int)::$_6>(unsigned short,QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMINasClient::initialize(std::string const&,unsigned int)::$_6 &&,QMIServiceMsg const)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMINasClient::BarringHandler>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMINasClient::BarringHandler>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x48uLL);
    *((_DWORD *)v9 + 8) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::RegSubscriptionInfo>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 21)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSubscriptionInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSubscriptionInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSubscriptionInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSubscriptionInfo>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::RegMmtelRespInd>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  char v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 64)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegMmtelRespInd>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegMmtelRespInd>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegMmtelRespInd>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegMmtelRespInd>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient13stopListeningEjbE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Indication Register request failed: ", 36);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v2 + 17) = 0;
    uint64_t v3 = (const char *)qmi::asString();
    size_t v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C55B7C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c65_ZTSNSt3__110shared_ptrIZN12QMINasClient13stopListeningEjbE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c65_ZTSNSt3__110shared_ptrIZN12QMINasClient13stopListeningEjbE3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::stopListening(unsigned int,BOOL)::$_2,std::allocator<QMINasClient::stopListening(unsigned int,BOOL)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::stopListening(unsigned int,BOOL)::$_2,std::allocator<QMINasClient::stopListening(unsigned int,BOOL)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient14startListeningEjE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Indication Register request failed: ", 36);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v2 + 17) = 0;
    uint64_t v3 = (const char *)qmi::asString();
    size_t v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C55B7E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c65_ZTSNSt3__110shared_ptrIZN12QMINasClient14startListeningEjE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c65_ZTSNSt3__110shared_ptrIZN12QMINasClient14startListeningEjE3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::startListening(unsigned int)::$_2,std::allocator<QMINasClient::startListening(unsigned int)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::startListening(unsigned int)::$_2,std::allocator<QMINasClient::startListening(unsigned int)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient20requestVoiceSystemIdEjNSt3__18weak_ptrI22NasVoiceSystemReceiverEEE3__0EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  if (*((_DWORD *)this + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&v24, "");
    uint64_t v3 = ims::error((uint64_t)__p, (uint64_t)&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"GetVoiceSystemId request failed: ", 33);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v3 + 17) = 0;
    size_t v4 = (const char *)qmi::asString();
    size_t v5 = strlen(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)v4, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (SHIBYTE(v26) < 0) {
      operator delete(v24);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    char v6 = *(unsigned int **)(a1 + 32);
    unsigned int v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x2000000000;
    int v27 = 0;
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)0x40000000;
    int v21 = (uint64_t (*)(uint64_t, void **))___ZZN12QMINasClient20requestVoiceSystemIdEjNSt3__18weak_ptrI22NasVoiceSystemReceiverEEENK3__0clERKN3nas19GetSubscriptionInfo8ResponseE_block_invoke;
    unsigned int v22 = &unk_1E6511D68;
    uint64_t v23 = &v24;
    TlvValue = (void *)qmi::MessageBase::findTlvValue(this);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      v18[0] = TlvValue;
      LODWORD(v16[0]) = tlv::parseV<nas::tlv::SubInfoVSID>((tlv **)v18, v8);
      if (v18[0]) {
        v21((uint64_t)__p, v16);
      }
      else {
        ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 19, v9, v10);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    uint64_t v11 = ims::debug((uint64_t)v18, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"received GetVoiceSystemId response [voiceSystemId=", 50);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    int v12 = (std::__shared_weak_count *)*((void *)v6 + 2);
    if (v12)
    {
      BOOL v13 = std::__shared_weak_count::lock(v12);
      if (v13)
      {
        int v14 = v13;
        uint64_t v15 = *((void *)v6 + 1);
        if (v15) {
          (*(void (**)(uint64_t, void, void))(*(void *)v15 + 16))(v15, *v6, *((unsigned int *)v25 + 6));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    _Block_object_dispose(&v24, 8);
  }
}

void sub_1C55B8290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN12QMINasClient20requestVoiceSystemIdEjNS_8weak_ptrI22NasVoiceSystemReceiverEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN12QMINasClient20requestVoiceSystemIdEjNS_8weak_ptrI22NasVoiceSystemReceiverEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0,std::allocator<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFD08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0,std::allocator<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFD08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0,std::allocator<QMINasClient::requestVoiceSystemId(unsigned int,std::weak_ptr<NasVoiceSystemReceiver>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas19GetSubscriptionInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C55B8494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZZN12QMINasClient20requestVoiceSystemIdEjNSt3__18weak_ptrI22NasVoiceSystemReceiverEEENK3__0clERKN3nas19GetSubscriptionInfo8ResponseE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallStatus>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallType>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 3) = *(void *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallType>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::SystemMode>(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemMode>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemMode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemMode>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemMode>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallDirection>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallDirection>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallDirection>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CallDirection>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::CallStateNotification::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C55B89BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS4_13CallRadioTypeEybE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)v2;
    std::string::basic_string[abi:ne180100]<0>(&v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)&v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Failed to send CallStateNotification: ", 38);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v4 + 17) = 0;
    size_t v5 = (const char *)qmi::asString();
    size_t v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v10);
    }
    int v7 = *(_DWORD *)(v2 + 8);
    LOWORD(v10) = 100;
    HIDWORD(v10) = 0;
    char v11 = 0;
    int v12 = 0;
    char v13 = 0;
    IMSNasClient::notifyDelegates(v3, v7, (__int16 *)&v10, 2, *(unsigned __int8 *)(v2 + 12));
  }
}

void sub_1C55B8B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS2_13CallRadioTypeEybE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS2_13CallRadioTypeEybE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL)::$_0,std::allocator<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL)::$_0,std::allocator<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas21CallStateNotification8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C55B8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS4_13CallRadioTypeEyb17UacAccessResponseE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)v2;
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Failed to send CallStateNotification: ", 38);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v4 + 17) = 0;
    size_t v5 = (const char *)qmi::asString();
    size_t v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    int v7 = *(_DWORD *)(v2 + 8);
    int v8 = (__int16 *)(v2 + 12);
    uint64_t v9 = *(unsigned __int8 *)(v2 + 32);
    int v10 = v3;
    uint64_t v11 = 2;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::debug((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"CallStateNotification request succeeded", 39);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    int v7 = *(_DWORD *)(v2 + 8);
    int v8 = (__int16 *)(v2 + 12);
    uint64_t v11 = *(unsigned int *)(v2 + 36);
    uint64_t v9 = *(unsigned __int8 *)(v2 + 32);
    int v10 = v3;
  }
  IMSNasClient::notifyDelegates(v10, v7, v8, v11, v9);
}

void sub_1C55B8F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c135_ZTSNSt3__110shared_ptrIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS2_13CallRadioTypeEyb17UacAccessResponseE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c135_ZTSNSt3__110shared_ptrIZN12QMINasClient21sendCallStatusRequestEjN3nas14CallStatusTypeENS2_13CallRadioTypeEyb17UacAccessResponseE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL,UacAccessResponse)::$_0,std::allocator<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL,UacAccessResponse)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL,UacAccessResponse)::$_0,std::allocator<QMINasClient::sendCallStatusRequest(unsigned int,nas::CallStatusType,nas::CallRadioType,unsigned long long,BOOL,UacAccessResponse)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient39sendStartImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)v3;
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Failed to send StartImsRegistrationUacCheck request: ", 53);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v5 + 17) = 0;
    size_t v6 = (const char *)qmi::asString();
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    if (v40 < 0) {
      operator delete(v38[0]);
    }
    v38[1] = (void *)0x4000000000;
    v38[0] = (void *)100;
    int v39 = 0;
    int v8 = *(_DWORD *)(v3 + 8);
    uint64_t v9 = *(unsigned __int8 *)(v3 + 12);
    int v10 = (__int16 *)v38;
    uint64_t v11 = v4;
    uint64_t v12 = 2;
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::debug((uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Got Start IMS Registration UAC Check Response from BB", 53);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (v40 < 0) {
    operator delete(v38[0]);
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  char v16 = TlvValue;
  if (TlvValue)
  {
    int v17 = v15;
    uint64_t v33 = (uint64_t)TlvValue;
    int v18 = tlv::parseV<nas::tlv::Status>((tlv **)&v33, v15);
    if (v33)
    {
      int v19 = v18;
      std::string::basic_string[abi:ne180100]<0>(v38, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v20 = ims::debug((uint64_t)v38, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"StartImsRegistrationUacCheck response: Status=", 46);
      *(unsigned char *)(v20 + 17) = 0;
      if ((v19 - 1) > 6) {
        int v21 = "???";
      }
      else {
        int v21 = off_1E6511E00[v19 - 1];
      }
      size_t v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)v21, v22);
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"(", 1);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v40 < 0) {
        operator delete(v38[0]);
      }
      if ((v19 & 0xFFFFFFFB) == 2)
      {
        uint64_t v23 = (void *)qmi::MessageBase::findTlvValue(a2);
        if (v23)
        {
          uint64_t v25 = v23;
          int v26 = v24;
          v38[0] = v23;
          int v27 = tlv::parseV<nas::tlv::RemainingTimerValue>((tlv **)v38, v24);
          if (v38[0])
          {
            LODWORD(v16) = v27;
LABEL_29:
            std::string::basic_string[abi:ne180100]<0>(v38, "qmi.nas");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v28 = ims::debug((uint64_t)v38, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"StartImsRegistrationUacCheck response: ", 39);
            *(unsigned char *)(v28 + 17) = 0;
            if (v19 == 2) {
              int v29 = "Barring Duration = ";
            }
            else {
              int v29 = "Timer 3346 remaining time = ";
            }
            if (v19 == 2) {
              uint64_t v30 = 19;
            }
            else {
              uint64_t v30 = 28;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)v29, v30);
            *(unsigned char *)(v28 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v28 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" milliseconds", 13);
            *(unsigned char *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v28 + 17) = 0;
            if (v37 < 0) {
              operator delete(__p[0]);
            }
            if (v40 < 0) {
              operator delete(v38[0]);
            }
            goto LABEL_39;
          }
          ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v25, v26);
        }
        LODWORD(v16) = 0;
        goto LABEL_29;
      }
    }
    else
    {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v16, v17);
      int v19 = 0;
    }
    LODWORD(v16) = 0;
  }
  else
  {
    int v19 = 0;
  }
LABEL_39:
  uint64_t v34 = 0;
  uint64_t v33 = 100;
  if (v16 % 0x3E8) {
    unsigned int v31 = v16 / 0x3E8 + 1;
  }
  else {
    unsigned int v31 = v16 / 0x3E8;
  }
  HIDWORD(v34) = 64;
  int v35 = 0;
  HIDWORD(v33) = v31;
  std::string::basic_string[abi:ne180100]<0>(v38, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v32 = ims::debug((uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"StartImsRegistrationUacCheck response: barringTime will be ", 59);
  *(unsigned char *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v32 + 17) = 0;
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (v40 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v12 = 2 * (v19 != 1);
  int v8 = *(_DWORD *)(v3 + 8);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 12);
  int v10 = (__int16 *)&v33;
  uint64_t v11 = v4;
LABEL_47:
  IMSNasClient::notifyDelegates(v11, v8, v10, v12, v9);
}

void sub_1C55B9678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN12QMINasClient39sendStartImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN12QMINasClient39sendStartImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::sendStartImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1,std::allocator<QMINasClient::sendStartImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::sendStartImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1,std::allocator<QMINasClient::sendStartImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20DFFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas28StartImsRegistrationUacCheck8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C55B9838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMINasClient38sendStopImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Failed to send StopImsRegistrationUacCheck request: ", 52);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v2 + 17) = 0;
    uint64_t v3 = (const char *)qmi::asString();
    size_t v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Got Stop IMS Registration UAC Check Response from BB", 52);
  }
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1C55B9A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN12QMINasClient38sendStopImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN12QMINasClient38sendStopImsRegistrationUacCheckRequestEjN3nas13CallRadioTypeEbE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMINasClient::sendStopImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1,std::allocator<QMINasClient::sendStopImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient::sendStopImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1,std::allocator<QMINasClient::sendStopImsRegistrationUacCheckRequest(unsigned int,nas::CallRadioType,BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas27StopImsRegistrationUacCheck8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C55B9BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

std::string *SipServerInviteProceedingTransactionState::SipServerInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  char v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E0098;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20E0120;
  return a1;
}

void sub_1C55B9CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerInviteProceedingTransactionState::sendTryingResponse(SipServerInviteProceedingTransactionState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      std::string::size_type v5 = (void *)*((void *)this + 26);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = v6;
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v20 = 0;
          *(_OWORD *)int v19 = 0u;
          memset(v18, 0, sizeof(v18));
          std::string::basic_string[abi:ne180100]<0>(&__p, "Trying");
          char v8 = (SipTransportLayer *)v5[40];
          if (SipTransportLayer::userAgent(v8)) {
            uint64_t v9 = SipTransportLayer::userAgent(v8) + 288;
          }
          else {
            uint64_t v9 = 0;
          }
          SipResponse::SipResponse((uint64_t)v18, 100, &__p, v9);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          SipServerTransaction::internalSendResponse(v7, (SipResponse *)v18, 1, (uint64_t)v16);
          ImsResult::~ImsResult((ImsResult *)v16);
          *(void *)&v18[0] = &unk_1F20DD488;
          if (SHIBYTE(v20) < 0) {
            operator delete(v19[0]);
          }
          SipMessage::~SipMessage((SipMessage *)v18);
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        }
        else
        {
          uint64_t v11 = v5[22];
          int v10 = v5 + 22;
          uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 56))(v10);
          (*(void (**)(void *, uint64_t))(*v10 + 16))(v10, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"How did a ", 10);
          *(unsigned char *)(v12 + 17) = 0;
          uint64_t v13 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
          size_t v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v13, v14);
          *(unsigned char *)(v12 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" end up in a ", 13);
          *(unsigned char *)(v12 + 17) = 0;
          size_t v15 = strlen((const char *)((unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (unint64_t)"NSt3__110shared_ptrI14SipTransactionEE" & 0x7FFFFFFFFFFFFFFFLL, v15);
          *(unsigned char *)(v12 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"?", 1);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55B9F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  SipResponse::~SipResponse(&a24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void SipServerInviteProceedingTransactionState::handleTimer(SipServerInviteProceedingTransactionState *this, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 6) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "Trying", *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_13;
  }
  if (!a2[23])
  {
LABEL_13:
    SipServerInviteProceedingTransactionState::sendTryingResponse(this);
    return;
  }
  std::string::size_type v5 = "Trying";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_13;
    }
  }
}

void SipServerInviteProceedingTransactionState::enterState(int8x8_t *this)
{
  _OWORD v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      int8x8_t v5 = this[26];
      if (v5)
      {
        uint64_t v6 = *(void *)(*(void *)&v5 + 320);
        uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
        if (v7)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v7);
          char v8 = v7;
          if (v7) {
            uint64_t v7 = *(std::__shared_weak_count **)(v6 + 8);
          }
        }
        else
        {
          char v8 = 0;
        }
        uint64_t v9 = (ImsPrefs *)SipStack::prefs((SipStack *)v7);
        AlwaysSendTryingResponseKey = (void **)ImsPrefs::getAlwaysSendTryingResponseKey(v9);
        int v11 = ImsPrefs::BOOLValue(v9, AlwaysSendTryingResponseKey);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (v11)
        {
          SipServerInviteProceedingTransactionState::sendTryingResponse((SipServerInviteProceedingTransactionState *)this);
        }
        else
        {
          int8x8_t v13 = this[24];
          uint64_t v12 = (std::__shared_weak_count *)this[25];
          if (v12)
          {
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v14 = operator new(0x20uLL);
          void *v14 = &unk_1F20E03D0;
          v14[1] = this;
          _OWORD v14[2] = v13;
          void v14[3] = v12;
          void v15[3] = v14;
          SipTimerContainer::startTimer(this + 3, (uint64_t)"Trying");
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
          if (v12)
          {
            std::__shared_weak_count::__release_weak(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55BA1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipServerInviteProceedingTransactionState::handleRequest(SipServerInviteProceedingTransactionState *this, const SipRequest *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    size_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int8x8_t v5 = v4;
      uint64_t v6 = (void *)*((void *)this + 26);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(void *))(v6[22] + 64))(v6 + 22);
        (*(void (**)(void *, uint64_t))(v6[22] + 16))(v6 + 22, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"received duplicate request", 26);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(void *__return_ptr, void *))(*v6 + 128))(v8, v6);
        ImsResult::~ImsResult((ImsResult *)v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C55BA384(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipServerInviteProceedingTransactionState::handleOutgoingResponse(int8x8_t *this, const SipResponse *a2, ImsResult *a3)
{
  SipTimerContainer::cancelTimer(this + 3, (std::string *)"Trying");
  int8x8_t v5 = (std::__shared_weak_count *)this[27];
  if (!v5) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  int8x8_t v8 = this[26];
  if (v8)
  {
    unsigned int v9 = *((_DWORD *)a2 + 22);
    if (v9 / 0x64 != 1)
    {
      if (v9 / 0x64 == 2)
      {
        uint64_t v10 = 5;
LABEL_10:
        (*(void (**)(int8x8_t, uint64_t))(**(void **)&v8 + 32))(v8, v10);
        goto LABEL_11;
      }
      if (v9 >= 0x12C)
      {
        uint64_t v10 = 4;
        goto LABEL_10;
      }
    }
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C55BA470(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipServerInviteCompletedTransactionState::SipServerInviteCompletedTransactionState(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState((std::string *)a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = &unk_1F20E0150;
  *(void *)(a1 + 8) = &unk_1F20E01D8;
  *(_DWORD *)(a1 + 224) = 1;
  return a1;
}

void sub_1C55BA524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerInviteCompletedTransactionState::enterState(int8x8_t *this)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  this[28].i32[0] = 1;
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      std::string::size_type v5 = (SipTransaction *)this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        uint64_t v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (SipTransaction::retryEnabled(v5))
        {
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          int8x8_t v8 = operator new(0x20uLL);
          *int8x8_t v8 = &unk_1F20E0450;
          v8[1] = this;
          void v8[2] = v7;
          v8[3] = v6;
          v11[3] = v8;
          SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerG, (uint64_t)v11, this[28].i32[0]);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
        }
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v9 = operator new(0x20uLL);
        *unsigned int v9 = &unk_1F20E0450;
        v9[1] = this;
        void v9[2] = v7;
        void v9[3] = v6;
        void v10[3] = v9;
        SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerH, (uint64_t)v10, 0);
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v10);
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55BA6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void SipServerInviteCompletedTransactionState::handleTimer(int8x8_t *a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[27];
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      int8x8_t v7 = (void *)a1[26];
      if (v7)
      {
        if (operator==(a2, (uint64_t)&SipTimers::kTimerG))
        {
          uint64_t v8 = (*(uint64_t (**)(void *))(v7[22] + 64))(v7 + 22);
          (*(void (**)(void *, uint64_t))(v7[22] + 16))(v7 + 22, v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"resending response", 18);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(void *__return_ptr, void *))(*v7 + 128))(v12, v7);
          ImsResult::~ImsResult((ImsResult *)v12);
          int8x8_t v10 = a1[24];
          unsigned int v9 = (std::__shared_weak_count *)a1[25];
          if (v9)
          {
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            a1[28].i32[0] *= 2;
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            a1[28].i32[0] *= 2;
          }
          size_t v14 = 0;
          int v11 = operator new(0x20uLL);
          void *v11 = &unk_1F20E04D0;
          v11[1] = a1;
          v11[2] = v10;
          v11[3] = v9;
          size_t v14 = v11;
          SipTimerContainer::startSipTimer(a1 + 3, (uint64_t)&SipTimers::kTimerG, (uint64_t)v13, a1[28].i32[0]);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
          if (v9)
          {
            std::__shared_weak_count::__release_weak(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        else if (operator==(a2, (uint64_t)&SipTimers::kTimerH))
        {
          (*(void (**)(void *, uint64_t))(*v7 + 32))(v7, 7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55BA978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v11)
  {
    std::__shared_weak_count::__release_weak(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipServerInviteCompletedTransactionState::handleRequest(SipServerInviteCompletedTransactionState *this, const SipRequest *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 26);
      if (!v7) {
        goto LABEL_28;
      }
      uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
      uint64_t v9 = v8[23];
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = v8[23];
      }
      else {
        uint64_t v10 = *((void *)v8 + 1);
      }
      if (v10 == 6)
      {
        if ((v9 & 0x80) == 0)
        {
          if (v8[23])
          {
            int v11 = "INVITE";
            while (*v8 == *(unsigned __int8 *)v11)
            {
              ++v8;
              ++v11;
              if (!--v9) {
                goto LABEL_25;
              }
            }
            goto LABEL_15;
          }
LABEL_25:
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v7 + 128))(v16, v7);
          ImsResult::~ImsResult((ImsResult *)v16);
          goto LABEL_28;
        }
        if (!memcmp(*(const void **)v8, "INVITE", *((void *)v8 + 1))) {
          goto LABEL_25;
        }
      }
LABEL_15:
      uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
      uint64_t v13 = v12[23];
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = v12[23];
      }
      else {
        uint64_t v14 = *((void *)v12 + 1);
      }
      if (v14 != 3) {
        goto LABEL_28;
      }
      if ((v13 & 0x80) == 0)
      {
        if (v12[23])
        {
          uint64_t v15 = &SipRequest::kMethodAck;
          while (*v12 == *(unsigned __int8 *)v15)
          {
            ++v12;
            uint64_t v15 = (long long *)((char *)v15 + 1);
            if (!--v13) {
              goto LABEL_27;
            }
          }
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      if (!memcmp(*(const void **)v12, &SipRequest::kMethodAck, *((void *)v12 + 1))) {
LABEL_27:
      }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 6);
LABEL_28:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55BAB98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipServerInviteConfirmedTransactionState::SipServerInviteConfirmedTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E0208;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20E0290;
  return a1;
}

void sub_1C55BAC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerInviteConfirmedTransactionState::enterState(int8x8_t *this)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = this[24];
  uint64_t v2 = (std::__shared_weak_count *)this[25];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v4 = operator new(0x20uLL);
  *size_t v4 = &unk_1F20E0550;
  v4[1] = this;
  void v4[2] = v3;
  v4[3] = v2;
  v5[3] = v4;
  SipTimerContainer::startSipTimer(this + 3, (uint64_t)&SipTimers::kTimerI, (uint64_t)v5, 0);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v5);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C55BAD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipServerInviteConfirmedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerI))
  {
    int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      size_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        std::string::size_type v5 = v4;
        uint64_t v6 = *(void *)(a1 + 208);
        if (v6) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 7);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C55BAE14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipServerInviteTerminationPendingTransactionState::SipServerInviteTerminationPendingTransactionState(std::string *a1, std::string::size_type *a2)
{
  int8x8_t v3 = (std::__shared_weak_count *)a2[1];
  std::string::size_type v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipTransactionState::SipTransactionState(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E02C0;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20E0340;
  return a1;
}

void sub_1C55BAEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipServerInviteProceedingTransactionState::~SipServerInviteProceedingTransactionState(SipServerInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerInviteProceedingTransactionState::id(SipServerInviteProceedingTransactionState *this)
{
  return 3;
}

uint64_t SipServerInviteProceedingTransactionState::allowOutgoingResponse(SipServerInviteProceedingTransactionState *this)
{
  return 1;
}

void non-virtual thunk to'SipServerInviteProceedingTransactionState::~SipServerInviteProceedingTransactionState(SipServerInviteProceedingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipServerInviteCompletedTransactionState::~SipServerInviteCompletedTransactionState(SipServerInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerInviteCompletedTransactionState::id(SipServerInviteCompletedTransactionState *this)
{
  return 4;
}

void non-virtual thunk to'SipServerInviteCompletedTransactionState::~SipServerInviteCompletedTransactionState(SipServerInviteCompletedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipServerInviteConfirmedTransactionState::~SipServerInviteConfirmedTransactionState(SipServerInviteConfirmedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerInviteConfirmedTransactionState::id(SipServerInviteConfirmedTransactionState *this)
{
  return 6;
}

void non-virtual thunk to'SipServerInviteConfirmedTransactionState::~SipServerInviteConfirmedTransactionState(SipServerInviteConfirmedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerInviteConfirmedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipServerInviteTerminationPendingTransactionState::~SipServerInviteTerminationPendingTransactionState(SipServerInviteTerminationPendingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipServerInviteTerminationPendingTransactionState::id(SipServerInviteTerminationPendingTransactionState *this)
{
  return 5;
}

void non-virtual thunk to'SipServerInviteTerminationPendingTransactionState::~SipServerInviteTerminationPendingTransactionState(SipServerInviteTerminationPendingTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipServerInviteTerminationPendingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E03D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E03D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E03D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E03D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55BB348(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0450;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0450;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E0450;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E0450;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55BB5F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20E04D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20E04D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E04D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E04D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55BB898(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipServerInviteCompletedTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0550;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0550;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E0550;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E0550;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55BBB40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipServerInviteConfirmedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void sub_1C55BBD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C55BC290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C55BC500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C55BC99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C55BCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1C55BD03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C55BD250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C55BD5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C55BD77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C55BDA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C55BDC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C55BDF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void sub_1C55BE114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C55BE3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void sub_1C55BE5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1C55BF210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v76 - 256) = a28;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 256));
  if (a73 < 0) {
    operator delete(__p);
  }

  if (a59 < 0) {
    operator delete(a54);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(void *)(a1 + 48) = &unk_1F20E0780;
  *(void *)(a1 + 56) = v2;
  uint64_t v3 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return result;
}

void __Block_byref_object_dispose__7(void *a1)
{
  a1[6] = &unk_1F20E0780;
  uint64_t v1 = (void *)a1[12];
  if (v1)
  {
    a1[13] = v1;
    operator delete(v1);
  }
}

void sub_1C55BF550(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(void *)(a1 + 48) = &unk_1F20E3660;
  *(void *)(a1 + 56) = v2;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  __n128 result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return result;
}

void __Block_byref_object_dispose__19(void *a1)
{
  a1[6] = &unk_1F20E3660;
  uint64_t v1 = (void *)a1[10];
  if (v1)
  {
    a1[11] = v1;
    operator delete(v1);
  }
}

void sub_1C55BF6C8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C55BF794(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C55BF854(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C55BFBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1C55BFCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C55BFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void sub_1C55C0098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C55C032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void sub_1C55C0734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);

  _Unwind_Resume(a1);
}

void ims::detail::to_string_impl<char,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C55C09B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void _GLOBAL__sub_I_AVCAudioSessionDelegate_mm()
{
  uint64_t v0 = (void *)MEMORY[0x1C878EAB0]();
}

void XpcConnectionClient::XpcConnectionClient(std::string *this, long long *a2, std::string::size_type a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[3].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v15 = 0u;
  snprintf(__str, 0x80uLL, "com.apple.ipTelephony.ConnectionClient.%p", this);
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)dispatch_queue_create(__str, 0);
  snprintf(__str, 0x80uLL, "com.apple.ipTelephony.ConnectionClient.%p.events", this);
  uint64_t v6 = dispatch_queue_create(__str, 0);
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  dispatch_set_target_queue(v6, (dispatch_queue_t)this[1].__r_.__value_.__l.__data_);
  dispatch_set_context((dispatch_object_t)this[1].__r_.__value_.__l.__size_, (void *)this[1].__r_.__value_.__r.__words[2]);
  dispatch_set_finalizer_f((dispatch_object_t)this[1].__r_.__value_.__l.__size_, (dispatch_function_t)_finalizeEventQueue);
  uint64_t v7 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v7, 0x8000100u);
  if (v8)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, this, (CFNotificationCallback)XpcConnectionClient::handleDaemonStart, v8, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFRelease(v8);
  }
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  char v13 = 1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN19XpcConnectionClientC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke;
  aBlock[3] = &unk_1E6511EB8;
  aBlock[4] = v12;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)_Block_copy(aBlock);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  void v10[2] = ___ZN19XpcConnectionClientC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke_2;
  void v10[3] = &unk_1E6511EE0;
  void v10[4] = v12;
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)_Block_copy(v10);
  XpcConnectionClient::createConnection((uint64_t)this);
  _Block_object_dispose(v12, 8);
}

void sub_1C55C0C68(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 80));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void _finalizeEventQueue(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

void XpcConnectionClient::handleDaemonStart(XpcConnectionClient *this, __CFNotificationCenter *a2, CFStringRef theString, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  syslog(5, "received daemon re-start notification for service %s\n", CStringPtr);
  CFStringRef v8 = *((void *)a2 + 5);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN19XpcConnectionClient17handleDaemonStartEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_14_1;
  block[4] = a2;
  dispatch_async(v8, block);
}

uint64_t ___ZN19XpcConnectionClientC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZN19XpcConnectionClientC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t XpcConnectionClient::createConnection(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void sub_1C55C0F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x1C878E320](v20, 0x10A0C40C3A46071);
  _Unwind_Resume(a1);
}

void XpcConnectionClient::~XpcConnectionClient(char **this)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, this);
  uint64_t v3 = this[5];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN19XpcConnectionClientD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_5_1;
  block[4] = this;
  dispatch_sync(v3, block);
  size_t v4 = this[4];
  if (v4)
  {
    dispatch_release(v4);
    this[4] = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)(this + 9), this[10]);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void ___ZN19XpcConnectionClientD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  XpcConnectionClient::destroyConnection((XpcConnectionClient *)v1);
  uint64_t v2 = (void *)(v1 + 80);
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3 != (void *)(v1 + 80))
  {
    do
    {
      _Block_release((const void *)v3[7]);
      size_t v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          long long v5 = v4;
          size_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          long long v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::string>::destroy(v1 + 72, *(char **)(v1 + 80));
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 72) = v2;
  uint64_t v7 = *(const void **)(v1 + 96);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(v1 + 96) = 0;
  }
  uint64_t v8 = *(void *)(v1 + 64);
  if (v8)
  {
    (*(void (**)(void))(v8 + 16))();
    _Block_release(*(const void **)(v1 + 64));
    *(void *)(v1 + 64) = 0;
  }
  uint64_t v9 = *(const void **)(v1 + 56);
  if (v9)
  {
    _Block_release(v9);
    *(void *)(v1 + 56) = 0;
  }
}

XpcConnection *XpcConnectionClient::destroyConnection(XpcConnectionClient *this)
{
  __n128 result = (XpcConnection *)*((void *)this + 6);
  if (result)
  {
    XpcConnection::~XpcConnection(result);
    __n128 result = (XpcConnection *)MEMORY[0x1C878E320]();
    *((void *)this + 6) = 0;
  }
  return result;
}

void *___ZN19XpcConnectionClient22setInterruptionHandlerEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (const void *)v2[13];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = v2[7];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZN19XpcConnectionClient22setInterruptionHandlerEU13block_pointerFvvE_block_invoke_2;
  v7[3] = &unk_1E6511F28;
  uint64_t v5 = *(void *)(a1 + 32);
  void v7[4] = v4;
  void v7[5] = v5;
  v2[13] = _Block_copy(v7);
  __n128 result = (void *)v2[6];
  if (result) {
    return XpcConnection::setInterruptionHandler((uint64_t)result, v7);
  }
  return result;
}

uint64_t ___ZN19XpcConnectionClient22setInterruptionHandlerEU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v3();
  }
  return result;
}

uint64_t ___ZN19XpcConnectionClient17handleDaemonStartEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  return XpcConnectionClient::createConnection(*(void *)(a1 + 32));
}

void ___ZN19XpcConnectionClient16createConnectionEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN19XpcConnectionClient16createConnectionEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v1;
  dispatch_sync(v2, block);
}

XpcConnection *___ZN19XpcConnectionClient16createConnectionEv_block_invoke_2(uint64_t a1)
{
  return XpcConnectionClient::destroyConnection(*(XpcConnectionClient **)(a1 + 32));
}

uint64_t XpcConnectionClient::sendXpcMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN19XpcConnectionClient14sendXpcMessageERKN3xpc4dictE_block_invoke;
  block[3] = &unk_1E6511FD8;
  void block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN19XpcConnectionClient14sendXpcMessageERKN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(xpc_connection_t **)(*(void *)(a1 + 40) + 48);
  if (v1)
  {
    xpc_connection_send_message(*v1, **(xpc_object_t **)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void SipResultDomain::~SipResultDomain(void **this)
{
  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipResultDomain::textForResultCode(unsigned int a1@<W1>, std::string *a2@<X8>)
{
  uint64_t v3 = qword_1EBBDAF88;
  if (qword_1EBBDAF88)
  {
    uint64_t v4 = &qword_1EBBDAF88;
    do
    {
      unsigned int v5 = *(_DWORD *)(v3 + 32);
      BOOL v6 = v5 >= a1;
      if (v5 >= a1) {
        uint64_t v7 = (uint64_t *)v3;
      }
      else {
        uint64_t v7 = (uint64_t *)(v3 + 8);
      }
      if (v6) {
        uint64_t v4 = (uint64_t *)v3;
      }
      uint64_t v3 = *v7;
    }
    while (*v7);
    uint64_t v8 = &ims::kEmptyString;
    if (v4 != &qword_1EBBDAF88)
    {
      unsigned int v9 = *((_DWORD *)v4 + 8);
      uint64_t v10 = (long long *)(v4 + 5);
      if (v9 <= a1) {
        uint64_t v8 = v10;
      }
    }
  }
  else
  {
    uint64_t v8 = &ims::kEmptyString;
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v11 = *v8;
    a2->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  }
}

uint64_t SipResultDomain::makeResult@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  int v3 = a1[22];
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &SipResultDomain::_domain;
  *(_DWORD *)(a2 + 16) = v3;
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 32))(a1);
  uint64_t result = *(void *)(a2 + 40);
  if (result != v4)
  {
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a2 + 40) = v4;
  }
  return result;
}

void sub_1C55C1574(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void SipResultDomain::makeResult(SipResultDomain *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  SipResultDomain::makeResult(*((_DWORD *)this + 15), (uint64_t)this + 32, (ImsResult *)a2);
  BambiCallTerminationResult::BambiCallTerminationResult((BambiCallTerminationResult *)v7, this);
  uint64_t v5 = (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6 != v5)
  {
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a2 + 40) = v5;
  }
  v7[0] = &unk_1F20D6828;
  if (v8 < 0) {
    operator delete((void *)v7[1]);
  }
}

void sub_1C55C167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult(v15);
  _Unwind_Resume(a1);
}

void *SipResultDomain::responseFromResult(SipResultDomain *this, const ImsResult *a2)
{
  uint64_t result = (void *)*((void *)this + 5);
  if (result) {
  return result;
  }
}

BOOL SipResultDomain::isError(SipResultDomain *this, int a2)
{
  return a2 > 399;
}

void BambiCallTerminationResult::BambiCallTerminationResult(BambiCallTerminationResult *this, const BambiCallTerminationReason *a2)
{
  *(void *)this = &unk_1F20D6828;
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v3 = *(_OWORD *)((char *)a2 + 8);
    v2->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t _GLOBAL__sub_I_SipResultDomain_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "SIP");
  ImsResultDomain::ImsResultDomain((uint64_t)&SipResultDomain::_domain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipResultDomain::_domain = (uint64_t)&unk_1F20E05D0;
  byte_1EBBDB078 = 1;
  return __cxa_atexit((void (*)(void *))SipResultDomain::~SipResultDomain, &SipResultDomain::_domain, &dword_1C51D1000);
}

void sub_1C55C18A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaSettings::~SDPMediaSettings(SDPMediaSettings *this)
{
  *(void *)this = &unk_1F20E0618;
  if (*((unsigned char *)this + 272)) {
    SDPMediaCrypto::~SDPMediaCrypto((SDPMediaSettings *)((char *)this + 192));
  }
  if (*((unsigned char *)this + 184)) {
    SDPMediaCrypto::~SDPMediaCrypto((SDPMediaSettings *)((char *)this + 104));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  SDPMediaSettings::~SDPMediaSettings(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaSettings::setRemoteAddress(uint64_t a1, std::string *a2)
{
  IpAddress::createAddress(a2, (uint64_t)&v4);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

SDPMediaCrypto *std::optional<SDPMediaCrypto>::operator=[abi:ne180100]<SDPMediaCrypto const&,void>(SDPMediaCrypto *this, const SDPMediaCrypto *a2)
{
  if (*((unsigned char *)this + 80))
  {
    SDPMediaCrypto::operator=((uint64_t)this, (uint64_t)a2);
  }
  else
  {
    SDPMediaCrypto::SDPMediaCrypto(this, a2);
    *((unsigned char *)this + 80) = 1;
  }
  return this;
}

BOOL SDPMediaSettings::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v7;
  if (v4)
  {
    if (!v6 || ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v4 + 104))(v4, v5, 0) & 1) == 0) {
      return 1;
    }
  }
  else if (!v6)
  {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 24) != *(unsigned __int16 *)(a2 + 24)
    || *(unsigned __int16 *)(a1 + 26) != *(unsigned __int16 *)(a2 + 26)
    || *(unsigned __int16 *)(a1 + 28) != *(unsigned __int16 *)(a2 + 28)
    || *(unsigned __int16 *)(a1 + 30) != *(unsigned __int16 *)(a2 + 30))
  {
    return 1;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 95);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 80);
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 95);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 80);
  }
  if (v9 != v10) {
    return 1;
  }
  uint64_t v12 = (const void **)(a1 + 72);
  if (v11 >= 0) {
    char v13 = (unsigned __int8 *)(a2 + 72);
  }
  else {
    char v13 = *(unsigned __int8 **)(a2 + 72);
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(void *)(a1 + 80))) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a1 + 95))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      uint64_t v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v8) {
        goto LABEL_25;
      }
    }
    return 1;
  }
LABEL_25:
  if (*(unsigned char *)(a1 + 184))
  {
    if (!*(unsigned char *)(a2 + 184) || operator!=(a1 + 104, a2 + 104)) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a2 + 184))
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 272)) {
    return *(unsigned char *)(a2 + 272) != 0;
  }
  if (!*(unsigned char *)(a2 + 272)) {
    return 1;
  }
  return operator!=(a1 + 192, a2 + 192);
}

BOOL operator!=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 40) != *(unsigned __int16 *)(a2 + 40)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 72) != 0) == (*(unsigned char *)(a2 + 72) == 0)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 73) != 0) != (*(unsigned char *)(a2 + 73) != 0)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 74) != 0) != (*(unsigned char *)(a2 + 74) != 0)) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 75) != 0) != (*(unsigned char *)(a2 + 75) != 0)) {
    return 1;
  }
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(const void **)(a1 + 48);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 48;
  uint64_t v5 = *(const void **)(a2 + 48);
  return v4 != *(void *)(v6 + 8) - (void)v5 || memcmp(v2, v5, v4) != 0;
}

BOOL SDPMediaSettings::valid(SDPMediaSettings *this)
{
  return *((void *)this + 1)
      && *((_WORD *)this + 12)
      && *((_WORD *)this + 13)
      && *((_WORD *)this + 14) != 255
      && *((unsigned __int16 *)this + 15) != 255;
}

void ims::Dispatch::reset(NSObject **this, dispatch_object_t object)
{
  size_t v4 = *this;
  if (v4) {
    dispatch_release(v4);
  }
  *this = object;
  if (object)
  {
    dispatch_retain(object);
  }
}

void LazuliStatusHeader::LazuliStatusHeader(LazuliStatusHeader *this, unsigned int a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v9, "000 ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = std::string::append(&v9, (const std::string::value_type *)p_p, size);
  uint64_t v7 = std::string::append(v6, " OK", 3uLL);
  LazuliStringHeader::LazuliStringHeader((std::string *)this, (const std::string *)"Status", v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20E0658;
}

void sub_1C55C1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliStatusHeader::create(LazuliStatusHeader *this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  unsigned int v2 = this;
  size_t v4 = (std::__shared_weak_count *)operator new(0x70uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E06B8;
  uint64_t v5 = v4 + 1;
  LazuliStatusHeader::LazuliStatusHeader((LazuliStatusHeader *)&v4[1], v2);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0708;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    goto LABEL_5;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C55C1F00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliStatusHeader::~LazuliStatusHeader(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliStatusHeader::clone@<D0>(LazuliStatusHeader *this@<X0>, _OWORD *a2@<X8>)
{
  size_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *size_t v4 = &unk_1F20C2740;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = &unk_1F20E0658;
  *(void *)&long long v6 = v4 + 3;
  *((void *)&v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1C55C2094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliStatusHeader::create(unsigned int)::HeaderWrapper,std::allocator<LazuliStatusHeader::create(unsigned int)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E06B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliStatusHeader::create(unsigned int)::HeaderWrapper,std::allocator<LazuliStatusHeader::create(unsigned int)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E06B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliStatusHeader::create(unsigned int)::HeaderWrapper,std::allocator<LazuliStatusHeader::create(unsigned int)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliStatusHeader::create(unsigned int)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

void RTCPSRPacket::packetize(RTCPSRPacket *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  LODWORD(__x.__begin_) = bswap32(*((_DWORD *)this + 6));
  v4.__i_ = 0;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v4, (std::vector<unsigned int>::value_type *)&__x);
  RTCPSenderInfo::packetize((RTCPSRPacket *)((char *)this + 28), &__x);
  std::vector<unsigned int>::pointer begin = __x.__begin_;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), (char *)__x.__begin_, (char *)__x.__end_, __x.__end_ - __x.__begin_);
  RTCPReceiverReports::packetize((RTCPSRPacket *)((char *)this + 48), (uint64_t)&__x);
  if (begin) {
    operator delete(begin);
  }
  std::vector<unsigned int>::pointer v6 = __x.__begin_;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), (char *)__x.__begin_, (char *)__x.__end_, __x.__end_ - __x.__begin_);
  unsigned int v7 = -73 * ((*((_DWORD *)this + 14) - *((_DWORD *)this + 12)) >> 2);
  v8.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)a2;
  unsigned int v9 = (*(_DWORD *)(a2 + 8) - *(void *)a2) >> 2;
  *((unsigned char *)this + 12) = 0;
  *((unsigned char *)this + 13) = v7;
  *((_DWORD *)this + 4) = 200;
  *((_WORD *)this + 10) = v9;
  LODWORD(__x.__begin_) = bswap32(v9) & 0xFFFF0000 | 0xC800 | v7 & 0x1F | 0x80;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v8, (std::vector<unsigned int>::value_type *)&__x);
  if (v6) {
    operator delete(v6);
  }
}

void sub_1C55C2348(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  std::vector<unsigned int>::const_iterator v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPSRPacket::toStream(RTCPSRPacket *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"RTCPSRPacket - Sender SSRC: ", 28);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  RTCPSenderInfo::toStream((RTCPSRPacket *)((char *)this + 28), a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  std::vector<unsigned int>::pointer v6 = (RTCPSRPacket *)((char *)this + 48);
  if (v5 != v4) {
    RTCPReceiverReports::toStream(v6, a2);
  }
  return a2;
}

void RTCPSRPacket::~RTCPSRPacket(RTCPSRPacket *this)
{
  *(void *)this = &unk_1F20E0780;
  unsigned int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20E0780;
  unsigned int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

void SipSessionState::SipSessionState(SipSessionState *this, void *a2)
{
  uint64_t v4 = *(void *)(*a2 + 248);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 216)) != 0) {
    std::vector<unsigned int>::pointer v6 = *(const SipUserAgent **)(v5 + 136);
  }
  else {
    std::vector<unsigned int>::pointer v6 = 0;
  }
  SipState::SipState(this, v6);
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *(void *)this = &unk_1F20E0E58;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E0F00;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 27);
    *((void *)this + 26) = v7;
    *((void *)this + 27) = v8;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *((void *)this + 26) = v7;
    *((void *)this + 27) = 0;
  }
}

uint64_t SipSessionState::stateMachine(SipSessionState *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 26);
  if (v4) {
    uint64_t v5 = v4 + 664;
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;

  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 26);
  if (v4) {
    uint64_t v5 = v4 + 664;
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

uint64_t SipSessionState::handleRequest(uint64_t a1, SipRequest *a2, uint64_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = *(uint64_t **)(a1 + 208);
      if (!v9) {
        goto LABEL_97;
      }
      uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
      uint64_t v11 = v10[23];
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v10[23];
      }
      else {
        uint64_t v12 = *((void *)v10 + 1);
      }
      if (v12 == 6)
      {
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v10, "CANCEL", *((void *)v10 + 1))) {
            goto LABEL_16;
          }
        }
        else if (v10[23])
        {
          char v13 = "CANCEL";
          while (*v10 == *(unsigned __int8 *)v13)
          {
            ++v10;
            ++v13;
            if (!--v11) {
              goto LABEL_26;
            }
          }
          goto LABEL_16;
        }
LABEL_26:
        uint64_t v19 = a3[1];
        uint64_t v56 = *a3;
        char v57 = (std::__shared_weak_count *)v19;
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        SipSession::handleCancel(v9, (uint64_t)a2, &v56);
        uint64_t v20 = v57;
        goto LABEL_101;
      }
LABEL_16:
      long long v15 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
      uint64_t v16 = v15[23];
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = v15[23];
      }
      else {
        uint64_t v17 = *((void *)v15 + 1);
      }
      if (v17 != 5) {
        goto LABEL_30;
      }
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v15, "PRACK", *((void *)v15 + 1))) {
          goto LABEL_30;
        }
      }
      else if (v15[23])
      {
        long long v18 = "PRACK";
        while (*v15 == *(unsigned __int8 *)v18)
        {
          ++v15;
          ++v18;
          if (!--v16) {
            goto LABEL_40;
          }
        }
LABEL_30:
        long long v21 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
        uint64_t v22 = v21[23];
        if ((v22 & 0x80u) == 0) {
          uint64_t v23 = v21[23];
        }
        else {
          uint64_t v23 = *((void *)v21 + 1);
        }
        if (v23 != 3) {
          goto LABEL_44;
        }
        if ((v22 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v21, &SipRequest::kMethodBye, *((void *)v21 + 1))) {
            goto LABEL_44;
          }
        }
        else if (v21[23])
        {
          int v24 = &SipRequest::kMethodBye;
          while (*v21 == *(unsigned __int8 *)v24)
          {
            ++v21;
            int v24 = (long long *)((char *)v24 + 1);
            if (!--v22) {
              goto LABEL_54;
            }
          }
LABEL_44:
          int v26 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
          uint64_t v27 = v26[23];
          if ((v27 & 0x80u) == 0) {
            uint64_t v28 = v26[23];
          }
          else {
            uint64_t v28 = *((void *)v26 + 1);
          }
          if (v28 == 7)
          {
            if ((v27 & 0x80) == 0)
            {
              if (v26[23])
              {
                int v29 = "OPTIONS";
                while (*v26 == *(unsigned __int8 *)v29)
                {
                  ++v26;
                  ++v29;
                  if (!--v27) {
                    goto LABEL_68;
                  }
                }
                goto LABEL_58;
              }
LABEL_68:
              uint64_t v35 = a3[1];
              uint64_t v50 = *a3;
              uint64_t v51 = (std::__shared_weak_count *)v35;
              if (v35) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
              }
              SipSession::handleOptions(v9, a2, &v50);
              uint64_t v20 = v51;
              goto LABEL_101;
            }
            if (!memcmp(*(const void **)v26, "OPTIONS", *((void *)v26 + 1))) {
              goto LABEL_68;
            }
          }
LABEL_58:
          unsigned int v31 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
          uint64_t v32 = v31[23];
          if ((v32 & 0x80u) == 0) {
            uint64_t v33 = v31[23];
          }
          else {
            uint64_t v33 = *((void *)v31 + 1);
          }
          if (v33 != 4) {
            goto LABEL_72;
          }
          if ((v32 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v31, "INFO", *((void *)v31 + 1))) {
              goto LABEL_72;
            }
          }
          else if (v31[23])
          {
            uint64_t v34 = "INFO";
            while (*v31 == *(unsigned __int8 *)v34)
            {
              ++v31;
              ++v34;
              if (!--v32) {
                goto LABEL_82;
              }
            }
LABEL_72:
            BOOL v36 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
            uint64_t v37 = v36[23];
            if ((v37 & 0x80u) == 0) {
              uint64_t v38 = v36[23];
            }
            else {
              uint64_t v38 = *((void *)v36 + 1);
            }
            if (v38 == 6)
            {
              if ((v37 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v36, "UPDATE", *((void *)v36 + 1))) {
                  goto LABEL_98;
                }
              }
              else
              {
                if (!v36[23]) {
                  goto LABEL_98;
                }
                int v39 = "UPDATE";
                while (*v36 == *(unsigned __int8 *)v39)
                {
                  ++v36;
                  ++v39;
                  if (!--v37) {
                    goto LABEL_98;
                  }
                }
              }
            }
            __int16 v41 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
            uint64_t v42 = v41[23];
            if ((v42 & 0x80u) == 0) {
              uint64_t v43 = v41[23];
            }
            else {
              uint64_t v43 = *((void *)v41 + 1);
            }
            if (v43 != 6) {
              goto LABEL_97;
            }
            if ((v42 & 0x80) == 0)
            {
              if (v41[23])
              {
                uint64_t v44 = "INVITE";
                while (*v41 == *(unsigned __int8 *)v44)
                {
                  ++v41;
                  ++v44;
                  if (!--v42) {
                    goto LABEL_98;
                  }
                }
                goto LABEL_97;
              }
              goto LABEL_98;
            }
            if (memcmp(*(const void **)v41, "INVITE", *((void *)v41 + 1)))
            {
LABEL_97:
              uint64_t v14 = 0;
LABEL_104:
              std::__shared_weak_count::__release_shared[abi:ne180100](v8);
              return v14;
            }
LABEL_98:
            uint64_t v45 = a3[1];
            uint64_t v47 = *a3;
            char v48 = (std::__shared_weak_count *)v45;
            if (v45) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
            }
            SipSession::handleInviteOrUpdateRequest((int8x8_t *)v9, a2, &v47);
            uint64_t v20 = v48;
            goto LABEL_101;
          }
LABEL_82:
          uint64_t v40 = *a3;
          uint64_t v20 = (std::__shared_weak_count *)a3[1];
          v49[0] = v40;
          v49[1] = (uint64_t)v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipSession::handleInfo(v9, a2, v49);
LABEL_101:
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          uint64_t v14 = 1;
          goto LABEL_104;
        }
LABEL_54:
        uint64_t v30 = a3[1];
        uint64_t v52 = *a3;
        char v53 = (std::__shared_weak_count *)v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        SipSession::handleBye((std::__shared_weak_count *)v9, a2, &v52);
        uint64_t v20 = v53;
        goto LABEL_101;
      }
LABEL_40:
      uint64_t v25 = a3[1];
      uint64_t v54 = *a3;
      uint64_t v55 = (std::__shared_weak_count *)v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      SipSession::handlePrack(v9, a2, &v54);
      uint64_t v20 = v55;
      goto LABEL_101;
    }
  }
  return 0;
}

void sub_1C55C2C00(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionState::handleUpdateResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = *(int8x8_t **)(a1 + 208);
      if (v9)
      {
        uint64_t v10 = (std::__shared_weak_count *)a3[1];
        uint64_t v11 = *a3;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::handleInviteOrUpdateResponse(v9, a2, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C55C2D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipSessionState::handleInviteResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = *(int8x8_t **)(a1 + 208);
      if (v9)
      {
        uint64_t v10 = (std::__shared_weak_count *)a3[1];
        uint64_t v11 = *a3;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::handleInviteOrUpdateResponse(v9, a2, &v11);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C55C2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipSessionState::handleResponse(SipSessionState *a1, const SipResponse *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 27);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = (std::__shared_weak_count *)*((void *)a1 + 26);
      if (!v9)
      {
LABEL_47:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
      uint64_t v11 = v10[23];
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v10[23];
      }
      else {
        uint64_t v12 = *((void *)v10 + 1);
      }
      if (v12 == 6)
      {
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v10, "UPDATE", *((void *)v10 + 1))) {
            goto LABEL_15;
          }
        }
        else if (v10[23])
        {
          char v13 = "UPDATE";
          while (*v10 == *(unsigned __int8 *)v13)
          {
            ++v10;
            ++v13;
            if (!--v11) {
              goto LABEL_25;
            }
          }
          goto LABEL_15;
        }
LABEL_25:
        long long v18 = (std::__shared_weak_count *)a3[1];
        uint64_t v32 = *a3;
        uint64_t v33 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(SipSessionState *, const SipResponse *, uint64_t *))(*(void *)a1 + 80))(a1, a2, &v32);
        uint64_t v19 = v33;
        if (!v33) {
          goto LABEL_47;
        }
        goto LABEL_38;
      }
LABEL_15:
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
      uint64_t v15 = v14[23];
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = v14[23];
      }
      else {
        uint64_t v16 = *((void *)v14 + 1);
      }
      if (v16 == 6)
      {
        if ((v15 & 0x80) == 0)
        {
          if (v14[23])
          {
            uint64_t v17 = "INVITE";
            while (*v14 == *(unsigned __int8 *)v17)
            {
              ++v14;
              ++v17;
              if (!--v15) {
                goto LABEL_35;
              }
            }
            goto LABEL_30;
          }
LABEL_35:
          int v24 = (std::__shared_weak_count *)a3[1];
          uint64_t v30 = *a3;
          unsigned int v31 = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(SipSessionState *, const SipResponse *, uint64_t *))(*(void *)a1 + 72))(a1, a2, &v30);
          uint64_t v19 = v31;
          if (!v31) {
            goto LABEL_47;
          }
LABEL_38:
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          goto LABEL_47;
        }
        if (!memcmp(*(const void **)v14, "INVITE", *((void *)v14 + 1))) {
          goto LABEL_35;
        }
      }
LABEL_30:
      int v20 = *((_DWORD *)a2 + 22);
      if (v20 == 481 || v20 == 408)
      {
        uint64_t v21 = ((uint64_t (*)(std::__shared_weak_count *))v9->__vftable[1].__get_deleter)(v9);
        ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"terminating session due to ", 27);
        *(unsigned char *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" response", 9);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        bzero(v29, 0x250uLL);
        shared_weak_owners = (std::__shared_weak_count *)v9[32].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          uint64_t shared_owners = v9[32].__shared_owners_;
          atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v27 = 0;
          uint64_t v28 = std::__shared_weak_count::lock(shared_weak_owners);
          if (v28) {
            uint64_t v27 = shared_owners;
          }
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
        BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v29, &v27);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (shared_weak_owners) {
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
        SipSessionInterface::stack(v9, &v25);
        BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse((BambiCallSessionTerminationBaseEvent *)v29, a2, (const BambiCallIncomingTerminationReasons *)(v25 + 2416));
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v29);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v29);
      }
      goto LABEL_47;
    }
  }
}

void sub_1C55C3198(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionState::terminateSessionWithEvent(SipSessionState *this, BambiCallEvent *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      std::vector<unsigned int>::pointer v6 = v5;
      uint64_t v7 = (BambiCall **)*((void *)this + 26);
      if (v7) {
        SipSession::terminateWithEvent(v7, a2, 13);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55C3290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL SipSessionState::isEstablished(SipSessionState *this)
{
  return (*(unsigned int (**)(SipSessionState *))(*(void *)this + 48))(this) > 3;
}

BOOL SipSessionState::isConfirmed(SipSessionState *this)
{
  return (*(unsigned int (**)(SipSessionState *))(*(void *)this + 48))(this) > 5;
}

void SipSessionState::handleTransactionError(SipSessionState *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  std::vector<unsigned int>::pointer v6 = (ImsResult *)a2;
  do
  {
    uint64_t v7 = (const std::string *)v6;
    std::vector<unsigned int>::pointer v6 = (ImsResult *)*((void *)v6 + 4);
  }
  while (v6);
  ImsResult::ImsResult((ImsResult *)&v26, v7);
  uint64_t v8 = a2[1];
  int v9 = *((_DWORD *)a2 + 4);
  if (v8 == &SipResultDomain::_domain && v9 == 408)
  {
    bzero(v23, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v23, 15, 13);
    v23[0] = &unk_1F20B85E8;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 27);
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 26);
        if (v12)
        {
          char v13 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a3 + 296) + 112))(*(void *)(*(void *)a3 + 296));
          uint64_t v14 = v13[23];
          uint64_t v15 = (v14 & 0x80u) == 0 ? v13[23] : *((void *)v13 + 1);
          if (v15 == 6)
          {
            if ((v14 & 0x80) == 0)
            {
              if (v13[23])
              {
                uint64_t v16 = "INVITE";
                while (*v13 == *(unsigned __int8 *)v16)
                {
                  ++v13;
                  ++v16;
                  if (!--v14) {
                    goto LABEL_33;
                  }
                }
                goto LABEL_28;
              }
              goto LABEL_33;
            }
            if (!memcmp(*(const void **)v13, "INVITE", *((void *)v13 + 1)))
            {
LABEL_33:
              if ((SipSession::confirmed((SipSession *)v12) & 1) == 0)
              {
                SipSessionInterface::stack(v12, &__str);
                int v17 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 176);
                if (__str.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                }
                uint64_t shared_owners = v12[10].__shared_owners_;
                if (shared_owners && (uint64_t v19 = *(void *)(shared_owners + 216)) != 0) {
                  int v20 = *(SipUserAgent **)(v19 + 136);
                }
                else {
                  int v20 = 0;
                }
                uint64_t v21 = (SipUserAgentConfig *)SipUserAgent::config(v20);
                char shouldCSFBOnInviteResponse = SipUserAgentConfig::shouldCSFBOnInviteResponse(v21, 0x198u, v17 != 0);
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
LABEL_28:
    SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v23);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    goto LABEL_31;
  }
  if (v8 == &_posixDomain)
  {
    if (v9 == 60)
    {
LABEL_26:
      bzero(v23, 0x250uLL);
      BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v23, 15, 11);
      v23[0] = &unk_1F20B85E8;
      SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v23);
      goto LABEL_31;
    }
    if (*((uint64_t **)&v26 + 1) != &_posixDomain)
    {
LABEL_30:
      bzero(v23, 0x250uLL);
      BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v23, 15, 22);
      v23[0] = &unk_1F20B85E8;
      SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v23);
      goto LABEL_31;
    }
LABEL_25:
    if (v27 == 60) {
      goto LABEL_26;
    }
    goto LABEL_30;
  }
  if (*((uint64_t **)&v26 + 1) == &_posixDomain) {
    goto LABEL_25;
  }
  bzero(v23, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)v23, 15, 10);
  v23[0] = &unk_1F20B85E8;
  ImsResult::description((ImsResult *)a2, &__str);
  std::string::operator=(&v24, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v23);
LABEL_31:
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v23);
  ImsResult::~ImsResult((ImsResult *)&v26);
}

void sub_1C55C3674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a16);
  ImsResult::~ImsResult((ImsResult *)(v17 - 128));
  _Unwind_Resume(a1);
}

void SipSessionState::fireCallEvent(SipSessionState *this, BambiCallEvent *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      std::vector<unsigned int>::pointer v6 = v5;
      uint64_t v7 = (SipSession *)*((void *)this + 26);
      if (v7) {
        SipSession::fireCallEvent(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55C3758(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionConfirmedState::enterState(SipSessionConfirmedState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (SipSession *)*((void *)this + 26);
      if (v5) {
        SipSession::handleSessionConfirmed(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55C37CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionRttUpgradeRequestedState::enterState(int8x8_t *this)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (std::__shared_weak_count *)this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        std::vector<unsigned int>::pointer v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = &unk_1F20E0888;
        v8[1] = this;
        void v8[2] = v7;
        v8[3] = v6;
        void v13[3] = v8;
        SipSessionInterface::stack(v5, &v11);
        int v9 = (ImsPrefs *)SipStack::prefs(v11);
        RTTUpgradeResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(v9);
        ImsPrefs::intValue(v9, RTTUpgradeResponseTimeoutMillisecondsKey);
        SipTimerContainer::startTimer(this + 3, (uint64_t)"RttUpgradeTimer");
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55C3920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void SipSessionRttUpgradeRequestedState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 15) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "RttUpgradeTimer", *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!a2[23])
  {
LABEL_12:
    std::vector<unsigned int>::pointer v6 = *(std::__shared_weak_count **)(a1 + 216);
    if (v6)
    {
      int8x8_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        int v9 = *(std::__shared_weak_count **)(a1 + 208);
        if (v9)
        {
          SipSession::answerRttUpgradeRequest(v9, (ImsResult *)v10);
          ImsResult::~ImsResult((ImsResult *)v10);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    return;
  }
  uint64_t v5 = "RttUpgradeTimer";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_12;
    }
  }
}

void sub_1C55C3A38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSessionSilentHangUpState::enterState(int8x8_t *this)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (std::__shared_weak_count *)this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        std::vector<unsigned int>::pointer v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = &unk_1F20E0908;
        v8[1] = this;
        void v8[2] = v7;
        v8[3] = v6;
        void v13[3] = v8;
        SipSessionInterface::stack(v5, &v11);
        int v9 = (ImsPrefs *)SipStack::prefs(v11);
        SRVCCCleanupTimeoutSecondsKey = (void **)ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(v9);
        ImsPrefs::intValue(v9, SRVCCCleanupTimeoutSecondsKey);
        SipTimerContainer::startTimer(this + 3, (uint64_t)"SilentHangUpTimerName");
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55C3B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

BOOL SipSessionSilentHangUpState::handleRequest(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[27];
  if (v4)
  {
    int8x8_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      int v9 = (uint64_t *)a1[26];
      BOOL v10 = v9 != 0;
      if (!v9)
      {
LABEL_48:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return v10;
      }
      uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      uint64_t v12 = v11[23];
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v11[23];
      }
      else {
        uint64_t v13 = *((void *)v11 + 1);
      }
      if (v13 == 3)
      {
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v11, &SipRequest::kMethodBye, *((void *)v11 + 1))) {
            goto LABEL_16;
          }
        }
        else if (v11[23])
        {
          uint64_t v14 = &SipRequest::kMethodBye;
          while (*v11 == *(unsigned __int8 *)v14)
          {
            ++v11;
            uint64_t v14 = (long long *)((char *)v14 + 1);
            if (!--v12) {
              goto LABEL_26;
            }
          }
          goto LABEL_16;
        }
LABEL_26:
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 3));
        long long v41 = 0u;
        long long v40 = 0u;
        uint64_t v19 = v9[31];
        if (v19)
        {
          uint64_t v19 = *(void *)(v19 + 216);
          if (v19) {
            uint64_t v19 = *(void *)(v19 + 136);
          }
        }
        uint64_t v39 = 0;
        long long v38 = 0uLL;
        long long v37 = 0uLL;
        long long v36 = 0uLL;
        LODWORD(v40) = 1065353216;
        *(void *)&long long v41 = v19 + 288;
        uint64_t v35 = &unk_1F20DD488;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v42 = 0;
        DWORD2(v4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 200;
        int v20 = (std::__shared_weak_count *)a3[1];
        uint64_t v32 = *a3;
        uint64_t v33 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *__return_ptr, uint64_t *, void **, uint64_t *))(*v9 + 240))(v34, v9, &v35, &v32);
        ImsResult::~ImsResult((ImsResult *)v34);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v21 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 13);
        uint64_t v35 = &unk_1F20DD488;
LABEL_45:
        if (SHIBYTE(v44) < 0) {
          operator delete(v42);
        }
        SipMessage::~SipMessage((SipMessage *)&v35);
        goto LABEL_48;
      }
LABEL_16:
      uint64_t v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
      uint64_t v16 = v15[23];
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = v15[23];
      }
      else {
        uint64_t v17 = *((void *)v15 + 1);
      }
      if (v17 == 6)
      {
        if ((v16 & 0x80) == 0)
        {
          if (v15[23])
          {
            long long v18 = "CANCEL";
            while (*v15 == *(unsigned __int8 *)v18)
            {
              ++v15;
              ++v18;
              if (!--v16) {
                goto LABEL_35;
              }
            }
            goto LABEL_37;
          }
LABEL_35:
          uint64_t v22 = v9[31];
          if (v22 && !*(unsigned char *)(v22 + 1928))
          {
            long long v26 = (std::__shared_weak_count *)a3[1];
            uint64_t v30 = *a3;
            unsigned int v31 = v26;
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipSession::handleCancel(v9, a2, &v30);
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            goto LABEL_48;
          }
          goto LABEL_37;
        }
        if (!memcmp(*(const void **)v15, "CANCEL", *((void *)v15 + 1))) {
          goto LABEL_35;
        }
      }
LABEL_37:
      long long v41 = 0u;
      long long v40 = 0u;
      uint64_t v23 = v9[31];
      if (v23)
      {
        uint64_t v23 = *(void *)(v23 + 216);
        if (v23) {
          uint64_t v23 = *(void *)(v23 + 136);
        }
      }
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      long long v37 = 0uLL;
      long long v36 = 0uLL;
      LODWORD(v40) = 1065353216;
      *(void *)&long long v41 = v23 + 288;
      uint64_t v35 = &unk_1F20DD488;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = 0;
      DWORD2(v4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 500;
      std::string v24 = (std::__shared_weak_count *)a3[1];
      uint64_t v27 = *a3;
      long long v28 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *__return_ptr, uint64_t *, void **, uint64_t *))(*v9 + 240))(v29, v9, &v35, &v27);
      ImsResult::~ImsResult((ImsResult *)v29);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      uint64_t v35 = &unk_1F20DD488;
      goto LABEL_45;
    }
  }
  return 0;
}

void sub_1C55C3FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t SipSessionSilentHangUpState::handleTimer(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 21) {
    return result;
  }
  uint64_t v4 = result;
  if ((v2 & 0x80) != 0)
  {
    double result = memcmp(*(const void **)a2, "SilentHangUpTimerName", *((void *)a2 + 1));
    if (result) {
      return result;
    }
    goto LABEL_13;
  }
  if (!a2[23])
  {
LABEL_13:
    std::vector<unsigned int>::pointer v6 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4) + 32);
    return v6();
  }
  uint64_t v5 = "SilentHangUpTimerName";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_13;
    }
  }
  return result;
}

void SipSessionSentByeState::enterState(int8x8_t *this)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        std::vector<unsigned int>::pointer v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = &unk_1F20E0988;
        v8[1] = this;
        void v8[2] = v7;
        v8[3] = v6;
        void v12[3] = v8;
        uint64_t v9 = *(void *)(*(void *)&v5 + 248);
        if (v9 && (uint64_t v10 = *(void *)(v9 + 216)) != 0) {
          uint64_t v11 = *(SipUserAgent **)(v10 + 136);
        }
        else {
          uint64_t v11 = 0;
        }
        SipUserAgent::config(v11);
        SipTimerContainer::startTimer(this + 3, (uint64_t)"WaitingForByeResponse");
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v12);
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55C426C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipSessionSentByeState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 21) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "WaitingForByeResponse", *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!a2[23])
  {
LABEL_12:
    std::vector<unsigned int>::pointer v6 = *(std::__shared_weak_count **)(a1 + 216);
    if (v6)
    {
      int8x8_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(a1 + 208);
        if (v9)
        {
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"timed out waiting for response to our BYE. Terminating session.", 63);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          SipSession::performPendingTermination(v9, 13, 1);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    return;
  }
  int8x8_t v5 = "WaitingForByeResponse";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_12;
    }
  }
}

void sub_1C55C4438(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *SipSessionSentByeState::handleRequest(uint64_t a1, uint64_t a2, void **a3)
{
  int8x8_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v5[23];
  }
  else {
    uint64_t v7 = *((void *)v5 + 1);
  }
  if (v7 != 3) {
    goto LABEL_12;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, &SipRequest::kMethodBye, *((void *)v5 + 1))) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v9 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipServerTransaction::sendResponse(v9, 487, &__p);
    ImsResult::~ImsResult((ImsResult *)v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return (std::__shared_weak_count *)1;
  }
  if (v5[23])
  {
    uint64_t v8 = &SipRequest::kMethodBye;
    while (*v5 == *(unsigned __int8 *)v8)
    {
      ++v5;
      uint64_t v8 = (long long *)((char *)v8 + 1);
      if (!--v6) {
        goto LABEL_14;
      }
    }
    goto LABEL_12;
  }
LABEL_14:
  double result = *(std::__shared_weak_count **)(a1 + 216);
  if (result)
  {
    double result = std::__shared_weak_count::lock(result);
    if (result)
    {
      uint64_t v11 = result;
      uint64_t v12 = *(void *)(a1 + 208);
      if (!v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](result);
        return 0;
      }
      uint64_t v13 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      SipServerTransaction::sendResponse(v13, 200, &__p);
      ImsResult::~ImsResult((ImsResult *)v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"received a BYE while waiting for a response to our BYE. Terminating session.", 76);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      SipSession::performPendingTermination(v12, 13, 1);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      return (std::__shared_weak_count *)1;
    }
  }
  return result;
}

void sub_1C55C4684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void SipSessionSentByeState::handleResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a3 + 296) + 112))(*(void *)(*(void *)a3 + 296));
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v5[23];
  }
  else {
    uint64_t v7 = *((void *)v5 + 1);
  }
  if (v7 != 3) {
    return;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, &SipRequest::kMethodBye, *((void *)v5 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!v5[23])
  {
LABEL_12:
    if ((*(_DWORD *)(a2 + 88) - 200) <= 0xFFFFFF9B)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 216);
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)(a1 + 208);
          if (v12)
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"received response to our BYE. Time to terminate.", 48);
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            SipSession::performPendingTermination(v12, 13, 1);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
    }
    return;
  }
  uint64_t v8 = &SipRequest::kMethodBye;
  while (*v5 == *(unsigned __int8 *)v8)
  {
    ++v5;
    uint64_t v8 = (long long *)((char *)v8 + 1);
    if (!--v6) {
      goto LABEL_12;
    }
  }
}

void sub_1C55C4894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipSessionTerminatedState::handleRequest(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipServerTransaction::sendResponse(v3, 487, &__p);
  ImsResult::~ImsResult((ImsResult *)v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C55C4910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipSessionState::~SipSessionState(SipSessionState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionConfirmedState::~SipSessionConfirmedState(SipSessionConfirmedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionConfirmedState::id(SipSessionConfirmedState *this)
{
  return 6;
}

void non-virtual thunk to'SipSessionConfirmedState::~SipSessionConfirmedState(SipSessionConfirmedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionConfirmedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionRttUpgradeRequestedState::~SipSessionRttUpgradeRequestedState(SipSessionRttUpgradeRequestedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionRttUpgradeRequestedState::id(SipSessionRttUpgradeRequestedState *this)
{
  return 7;
}

void non-virtual thunk to'SipSessionRttUpgradeRequestedState::~SipSessionRttUpgradeRequestedState(SipSessionRttUpgradeRequestedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionRttUpgradeRequestedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionSilentHangUpState::~SipSessionSilentHangUpState(SipSessionSilentHangUpState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionSilentHangUpState::id(SipSessionSilentHangUpState *this)
{
  return 12;
}

void non-virtual thunk to'SipSessionSilentHangUpState::~SipSessionSilentHangUpState(SipSessionSilentHangUpState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionSilentHangUpState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionSentByeState::~SipSessionSentByeState(SipSessionSentByeState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionSentByeState::id(SipSessionSentByeState *this)
{
  return 10;
}

void non-virtual thunk to'SipSessionSentByeState::~SipSessionSentByeState(SipSessionSentByeState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionSentByeState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionTerminatedState::~SipSessionTerminatedState(SipSessionTerminatedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionTerminatedState::id(SipSessionTerminatedState *this)
{
  return 13;
}

void non-virtual thunk to'SipSessionTerminatedState::~SipSessionTerminatedState(SipSessionTerminatedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionTerminatedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0888;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0888;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E0888;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E0888;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55C4EA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0,std::allocator<SipSessionRttUpgradeRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0908;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0908;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E0908;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E0908;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55C5148(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionSilentHangUpState::enterState(unsigned int)::$_0,std::allocator<SipSessionSilentHangUpState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0988;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E0988;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20E0988;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E0988;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55C53F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionSentByeState::enterState(unsigned int)::$_0,std::allocator<SipSessionSentByeState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void ___ZN18IPTelephonyHandler5startEv_block_invoke(ims *a1)
{
  uint64_t v1 = ims::logger(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v2 = (IMSClientManager *)ImsLogger::setPriority(v1, 3, (unsigned __int8 *)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  IMSClientManager::instance(v2);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  IPTelephonyManager::restoreLoggingState((IPTelephonyManager *)__p);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55C54CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InitializeIPTelephony(IMSClientManager *a1)
{
  uint64_t v1 = IPTelephonyHandler::gIPTelephonyHandler;
  if (!IPTelephonyHandler::gIPTelephonyHandler) {
    operator new();
  }
  IMSClientManager::instance(a1);
  IMSClientManager::queue(&queue);
  dispatch_async(queue, &__block_literal_global_8);
  if (queue) {
    dispatch_release(queue);
  }
  syslog(5, "IPTelephonyManager ready!");
  return v1;
}

void ImsUuid::assign(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    uint64_t v4 = (std::string *)(a1 + 8);
    std::string::operator=(v4, (const std::string *)a2);
  }
  else
  {
    ImsUuid::generate((uint64_t *)&v6, (ImsUuid *)a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = __p;
    }
    char v5 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)char v5 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v8.__r_.__value_.__l + 2);
    *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
    v8.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v6 = &unk_1F20B3708;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C55C567C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsUuid::generate(ImsUuid *__return_ptr a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)uu = 0;
  uint64_t v5 = 0;
  memset(v3, 0, sizeof(v3));
  MEMORY[0x1C878EF00](uu);
  uuid_unparse(uu, v3);
  ImsUuid::ImsUuid(a1, v3);
}

char *ImsUuid::asStringNoDashes@<X0>(ImsUuid *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  unsigned __int8 v11 = 45;
  uint64_t v5 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v4, (unsigned __int8 *)v4 + size, &v11);
  uint64_t v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  std::string::size_type v8 = (std::string::size_type)a2 + v6;
  if (v7 >= 0)
  {
    std::string::size_type v9 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v9 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, (std::string::size_type)&v5[-v9], v8 - (void)v5);
  return ims::lowerCase((char *)a2);
}

void sub_1C55C57FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  double result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    double result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void ImsUuid::ImsUuid(ImsUuid *this, char *a2)
{
  *(void *)this = &unk_1F20B3708;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  ImsUuid::assign((uint64_t)this, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C55C5908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ImsUuid_cpp()
{
  ImsUuid::kEmptyUuid = (uint64_t)&unk_1F20B3708;
  *(void *)byte_1EBBDB3B8 = 0;
  *(void *)&byte_1EBBDB3B8[8] = 0;
  *(void *)&byte_1EBBDB3B8[16] = 0;
  return __cxa_atexit((void (*)(void *))ImsUuid::~ImsUuid, &ImsUuid::kEmptyUuid, &dword_1C51D1000);
}

void SipRouteHeader::~SipRouteHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRouteHeader::clone(SipRouteHeader *this)
{
}

void sub_1C55C5AA0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

powerlog::PowerLogger *powerlog::PowerLogger::PowerLogger(powerlog::PowerLogger *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "power.logger");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20E0FD8;
  *((void *)this + 13) = 0;
  uint64_t v2 = PPSCreateTelemetryIdentifier();
  *((void *)this + 13) = v2;
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "power.logger");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::debug((uint64_t)&__p, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Telemetry Identifier created", 28);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "power.logger");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v3 = ims::error((uint64_t)&__p, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Couldn't create Telemetry Identifier", 36);
  }
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1C55C5C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsLogContainer::~ImsLogContainer(v20);
  _Unwind_Resume(a1);
}

void powerlog::PowerLogger::~PowerLogger(void **this)
{
  ImsLogContainer::~ImsLogContainer(this);
  JUMPOUT(0x1C878E320);
}

void powerlog::PowerLogger::logLazuliSipRequest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v12 = [NSNumber numberWithInt:v10];
  uint64_t v13 = [NSString stringWithUTF8String:"Action"];
  [v11 setObject:v12 forKey:v13];

  uint64_t v14 = [NSNumber numberWithInt:a3];
  uint64_t v15 = [NSString stringWithUTF8String:"Interface"];
  [v11 setObject:v14 forKey:v15];

  uint64_t v16 = [NSNumber numberWithInt:a4];
  uint64_t v17 = [NSString stringWithUTF8String:"TransactionType"];
  [v11 setObject:v16 forKey:v17];

  long long v18 = [NSNumber numberWithInt:a5];
  uint64_t v19 = [NSString stringWithUTF8String:"Value"];
  [v11 setObject:v18 forKey:v19];

  int v20 = [MEMORY[0x1E4F1C9C8] date];
  [v20 timeIntervalSince1970];
  uint64_t v21 = objc_msgSend(NSNumber, "numberWithDouble:");
  uint64_t v22 = [NSString stringWithUTF8String:"Timestamp"];
  [v11 setObject:v21 forKey:v22];

  PPSSendTelemetry();
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"----------------------------------------------------", 52);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Sending telemetry data to PowerLog", 34);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"  Action          : ", 20);
  *(unsigned char *)(v25 + 17) = 0;
  if (a2) {
    long long v26 = "Received (1)";
  }
  else {
    long long v26 = "Sent (2)";
  }
  if (a2) {
    uint64_t v27 = 12;
  }
  else {
    uint64_t v27 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)v26, v27);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"  Interface       : ", 20);
  *(unsigned char *)(v28 + 17) = 0;
  if (a3)
  {
    std::to_string(&v49, 1u);
    long long v29 = std::string::insert(&v49, 0, "WiFi (", 6uLL);
  }
  else
  {
    std::to_string(&v49, 0);
    long long v29 = std::string::insert(&v49, 0, "Cellular (", 0xAuLL);
  }
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  unsigned int v31 = std::string::append(&v50, ")", 1uLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  std::string::size_type v48 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"  TransactionType : ", 20);
  *(unsigned char *)(v33 + 17) = 0;
  switch((int)a4)
  {
    case 2:
      std::to_string(&v49, 2u);
      long long v37 = std::string::insert(&v49, 0, "SIP BYE (", 9uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v50, ")", 1uLL);
      break;
    case 3:
      std::to_string(&v49, 3u);
      uint64_t v39 = std::string::insert(&v49, 0, "SIP REFER (", 0xBuLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v50, ")", 1uLL);
      break;
    case 4:
      std::to_string(&v49, 4u);
      long long v41 = std::string::insert(&v49, 0, "SIP REGISTER (", 0xEuLL);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v50, ")", 1uLL);
      break;
    default:
      std::to_string(&v49, 1u);
      uint64_t v34 = std::string::insert(&v49, 0, "SIP INVITE (", 0xCuLL);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v50, ")", 1uLL);
      break;
  }
  long long v43 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  std::string::size_type v48 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v43;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v33 + 32))(v33, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v33 + 17) = 0;
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"  Timestamp       : ", 20);
  *(unsigned char *)(v44 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v44 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v44 + 17) = 0;
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"  Value           : ", 20);
  *(unsigned char *)(v45 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v45 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v45 + 17) = 0;
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"----------------------------------------------------", 52);
  *(unsigned char *)(v46 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v46 + 17) = 0;
}

void sub_1C55C67DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void CapSuppServicesInfo::CapSuppServicesInfo(CapSuppServicesInfo *this)
{
  *((_WORD *)this + 4) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
}

{
  *((_WORD *)this + 4) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
}

void CapSuppServicesInfo::~CapSuppServicesInfo(CapSuppServicesInfo *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

const void **CapSuppServicesInfo::serialize@<X0>(CapSuppServicesInfo *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v14 = CFNumberCreate(v4, kCFNumberSInt8Type, this);
  CFDictionarySetValue(theDict, @"kSuppServicesProvMsgType", v14);
  uint64_t v5 = theDict;
  CapSuppServicesInfo::Result::serialize((CapSuppServicesInfo *)((char *)this + 8), &value);
  CFDictionarySetValue(v5, @"kIMSSuppServicesProvResult", value);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
  value = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 40);
  CFDictionarySetValue(theDict, @"kSuppServicesProvAction", value);
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 41);
  CFDictionarySetValue(theDict, @"kSuppServicesProvServiceType", v12);
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    switch(*((unsigned char *)this + 41))
    {
      case 0:
        int v7 = ims::kIMSSuppServicesProvServiceTypeCallWaiting;
        goto LABEL_9;
      case 1:
        int v7 = ims::kIMSSuppServicesProvServiceTypeCallForward;
        goto LABEL_9;
      case 2:
        int v7 = ims::kIMSSuppServicesProvServiceTypeOIP;
        goto LABEL_9;
      case 3:
        int v7 = ims::kIMSSuppServicesProvServiceTypeOIR;
        goto LABEL_9;
      case 4:
        int v7 = ims::kIMSSuppServicesProvServiceTypeCallBarring;
LABEL_9:
        int v8 = *v7;
        break;
      default:
        int v8 = 0;
        break;
    }
    std::string::size_type v9 = theDict;
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 16))(&v11);
    CFDictionarySetValue(v9, v8, v11);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v11);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v12);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&value);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v14);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C6B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  int v7 = va_arg(va3, const void *);
  va_copy(va4, va3);
  std::string::size_type v9 = va_arg(va4, const void *);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va1);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va2);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va3);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va4);
  _Unwind_Resume(a1);
}

const void **CapSuppServicesInfo::Result::serialize@<X0>(CapSuppServicesInfo::Result *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)this) {
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kIMSSuppServicesProvResultSuccess", *v6);
  if (!*(unsigned char *)this)
  {
    CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 1);
    CFDictionarySetValue(theDict, @"kIMSSuppServicesProvResultFailureType", v10);
    int v7 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      int v7 = *(const char **)v7;
    }
    CFStringRef v9 = CFStringCreateWithCString(v4, v7, 0x600u);
    CFDictionarySetValue(theDict, @"kIMSSuppServicesProvResultReason", v9);
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v9);
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v10);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C6CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va1);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va2);
  _Unwind_Resume(a1);
}

uint64_t CapSuppServicesInfo::deserialize(CapSuppServicesInfo *this, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  Value = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kSuppServicesProvMsgType");
  unsigned __int8 v22 = 0;
  if (!Value || (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 != CFNumberGetTypeID()))
  {
    *(unsigned char *)this = 0;
    goto LABEL_8;
  }
  ctu::cf::assign((ctu::cf *)&v22, v5, v7);
  int v8 = v22;
  *(unsigned char *)this = v22;
  if (v8 == 1)
  {
    CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvResult");
    if (v9)
    {
      CapSuppServicesInfo::Result::deserialize((CapSuppServicesInfo *)((char *)this + 8), v9);
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  CFNumberRef v10 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kSuppServicesProvAction");
  char v23 = 0;
  if (v10 && (id v11 = v10, v12 = CFGetTypeID(v10), v12 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v23, v11, v13);
    char v14 = v23;
  }
  else
  {
    char v14 = 0;
  }
  *((unsigned char *)this + 40) = v14;
  uint64_t v16 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kSuppServicesProvServiceType");
  unsigned __int8 v24 = 0;
  if (v16 && (uint64_t v17 = v16, v18 = CFGetTypeID(v16), v18 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v24, v17, v19);
    int v20 = v24;
    *((unsigned char *)this + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v24;
    switch(v20)
    {
      case 0:
        goto LABEL_19;
      case 1:
        uint64_t v15 = 1;
        if (CFDictionaryContainsKey(theDict, @"kSuppServicesProvServiceTypeCallForward")) {
          operator new();
        }
        return v15;
      case 2:
        uint64_t v15 = 1;
        if (CFDictionaryContainsKey(theDict, @"kIMSSuppServicesProvServiceTypeOIP")) {
          operator new();
        }
        return v15;
      case 3:
        if (CFDictionaryContainsKey(theDict, @"kIMSSuppServicesProvServiceTypeOIR")) {
          operator new();
        }
        goto LABEL_26;
      case 4:
        uint64_t v15 = 1;
        if (CFDictionaryContainsKey(theDict, @"kSuppServicesProvServiceTypeCallBarring")) {
          operator new();
        }
        return v15;
      default:
LABEL_26:
        uint64_t v15 = 1;
        break;
    }
  }
  else
  {
    *((unsigned char *)this + 4bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
LABEL_19:
    uint64_t v15 = 1;
    if (CFDictionaryContainsKey(theDict, @"kSuppServicesProvServiceTypeCallWaiting")) {
      operator new();
    }
  }
  return v15;
}

BOOL CapSuppServicesInfo::Result::deserialize(CapSuppServicesInfo::Result *this, CFDictionaryRef theDict)
{
  void v20[2] = *MEMORY[0x1E4F143B8];
  if (theDict)
  {
    Value = (BOOL *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvResultSuccess");
    LOBYTE(v18) = 0;
    if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v18, v5, v7);
      int v8 = v18;
      *(unsigned char *)this = (_BYTE)v18 != 0;
      if (v8) {
        return theDict != 0;
      }
    }
    else
    {
      *(unsigned char *)this = 0;
    }
    CFDictionaryRef v9 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvResultFailureType");
    CFNumberRef v10 = v9;
    LOBYTE(v18) = 0;
    if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v18, v10, v12);
      char v13 = v18;
    }
    else
    {
      char v13 = 0;
    }
    *((unsigned char *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
    CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvResultReason");
    uint64_t v18 = 0;
    long long v19 = 0uLL;
    ctu::cf::assign();
    uint64_t v14 = v18;
    v20[0] = v19;
    *(void *)((char *)v20 + 7) = *(void *)((char *)&v19 + 7);
    char v15 = HIBYTE(v19);
    if (*((char *)this + 31) < 0) {
      operator delete(*((void **)this + 1));
    }
    uint64_t v16 = v20[0];
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v14;
    *((void *)this + 2) = v16;
    *(void *)((char *)this + 23) = *(void *)((char *)v20 + 7);
    *((unsigned char *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v15;
  }
  return theDict != 0;
}

void sub_1C55C72B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CapSuppServicesInfo::Result::asString@<X0>(CapSuppServicesInfo::Result *this@<X0>, void *a2@<X8>)
{
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*(unsigned char *)this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Success", 7);
  }
  else
  {
    CFAllocatorRef v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Failure, Type:", 14);
    std::string::basic_string[abi:ne180100]<0>(__p, off_1E6512018[*((char *)this + 1)]);
    if ((v17 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v6 = v17;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    CFBooleanRef v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", Reason:", 9);
    uint64_t v11 = *((void *)this + 1);
    CFNumberRef v10 = (char *)this + 8;
    uint64_t v9 = v11;
    int v12 = v10[23];
    if (v12 >= 0) {
      uint64_t v13 = (uint64_t)v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = v10[23];
    }
    else {
      uint64_t v14 = *((void *)v10 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18 + 8, a2);
  *(void *)&v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(*(void *)&v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v18[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v22);
}

void sub_1C55C74F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *CapSuppServicesInfo::Result::asStringFailureType@<X0>(CapSuppServicesInfo::Result *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E6512018[*((char *)this + 1)]);
}

void *operator<<(void *a1, CapSuppServicesInfo::Result *this)
{
  CapSuppServicesInfo::Result::asString(this, __p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1C55C75A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **CapSuppServicesInfo::CallWaiting::serialize@<X0>(CapSuppServicesInfo::CallWaiting *this@<X0>, void *a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*((unsigned char *)this + 8)) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kSuppServicesProvServiceEnable", *v5);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&v7);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v7);
}

void sub_1C55C765C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL CapSuppServicesInfo::CallWaiting::deserialize(CapSuppServicesInfo::CallWaiting *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = (BOOL *)CFDictionaryGetValue(theDict, @"kSuppServicesProvServiceEnable");
    char v10 = 0;
    if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v10, v5, v7);
      char v8 = v10;
    }
    else
    {
      char v8 = 0;
    }
    *((unsigned char *)this + 8) = v8;
  }
  return theDict != 0;
}

const void **CapSuppServicesInfo::CallForward::serialize@<X0>(CapSuppServicesInfo::CallForward *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v21 = Mutable;
  CFTypeID v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*((unsigned char *)this + 8)) {
    CFTypeID v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kSuppServicesProvServiceEnable", *v6);
  CFNumberRef v20 = CFNumberCreate(v4, kCFNumberIntType, (char *)this + 12);
  CFDictionarySetValue(v21, @"kSuppServicesProvCallForwardNoReplyTimer", v20);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((void *)this + 3);
  if (v7 != v8)
  {
    uint64_t v9 = CFArrayCreateMutable(v4, (v8 - v7) >> 5, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef theArray = v9;
    uint64_t v10 = *((void *)this + 2);
    uint64_t v11 = *((void *)this + 3);
    if (v10 != v11)
    {
      int v12 = (long long *)(v10 + 8);
      do
      {
        memset(__p, 0, 32);
        uint64_t v14 = (uint64_t)v12 - 8;
        __int16 v13 = *((_WORD *)v12 - 4);
        BYTE2(__p[0]) = *((unsigned char *)v12 - 6);
        LOWORD(__p[0]) = v13;
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v15 = *v12;
          std::string __p[3] = *((void **)v12 + 2);
          *(_OWORD *)&__p[1] = v15;
        }
        value = 0;
        CapSuppServicesInfo::CallForward::Rule::serialize((CapSuppServicesInfo::CallForward::Rule *)__p, &value);
        CFArrayAppendValue(theArray, value);
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
        if (SHIBYTE(__p[3]) < 0) {
          operator delete(__p[1]);
        }
        v12 += 2;
      }
      while (v14 + 32 != v11);
      uint64_t v9 = theArray;
    }
    CFDictionarySetValue(v21, @"kSuppServicesProvCallForwardRules", v9);
    ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)&theArray);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&v21);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v20);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v21);
}

void sub_1C55C78CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, const void *a19, const void *a20)
{
  ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef(&a19);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&a20);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

const void **CapSuppServicesInfo::CallForward::Rule::serialize@<X0>(CapSuppServicesInfo::CallForward::Rule *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt8Type, this);
  CFDictionarySetValue(theDict, @"kSuppServicesProvCallForwardRuleAction", v10);
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*((unsigned char *)this + 2)) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(theDict, @"kSuppServicesProvCallForwardActivate", *v5);
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 1);
  CFDictionarySetValue(theDict, @"kSuppServicesProvCallForwardReason", v9);
  CFTypeID v6 = (char *)this + 8;
  if (*((char *)this + 31) < 0) {
    CFTypeID v6 = *(const char **)v6;
  }
  CFStringRef v8 = CFStringCreateWithCString(v4, v6, 0x600u);
  CFDictionarySetValue(theDict, @"kSuppServicesProvCallForwardPhoneNumber", v8);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v10);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C7A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va1);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va2);
  _Unwind_Resume(a1);
}

BOOL CapSuppServicesInfo::CallForward::deserialize(CapSuppServicesInfo::CallForward *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = (BOOL *)CFDictionaryGetValue(theDict, @"kSuppServicesProvServiceEnable");
    LOBYTE(v2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v21, v5, v7);
      char v8 = v21;
    }
    else
    {
      char v8 = 0;
    }
    *((unsigned char *)this + 8) = v8;
    CFNumberRef v9 = (int *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardNoReplyTimer");
    LODWORD(v2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    if (v9 && (CFNumberRef v10 = v9, v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v21, v10, v12);
      int v13 = v21;
    }
    else
    {
      int v13 = 0;
    }
    *((_DWORD *)this + 3) = v13;
    CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardRules");
    if (v14)
    {
      CFArrayRef v15 = v14;
      if (CFArrayGetCount(v14) >= 1)
      {
        CFIndex v16 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v16);
          if (ValueAtIndex)
          {
            uint64_t v21 = 0x10000;
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            std::string __p = 0;
            CapSuppServicesInfo::CallForward::Rule::deserialize((CapSuppServicesInfo::CallForward::Rule *)&v21, ValueAtIndex);
            unint64_t v18 = *((void *)this + 3);
            if (v18 >= *((void *)this + 4))
            {
              uint64_t v19 = std::vector<CapSuppServicesInfo::CallForward::Rule>::__push_back_slow_path<CapSuppServicesInfo::CallForward::Rule const&>((uint64_t *)this + 2, (__int16 *)&v21);
            }
            else
            {
              std::vector<CapSuppServicesInfo::CallForward::Rule>::__construct_one_at_end[abi:ne180100]<CapSuppServicesInfo::CallForward::Rule const&>((uint64_t)this + 16, (__int16 *)&v21);
              uint64_t v19 = v18 + 32;
            }
            *((void *)this + 3) = v19;
            if (SHIBYTE(v24) < 0) {
              operator delete(__p);
            }
          }
          ++v16;
        }
        while (CFArrayGetCount(v15) > v16);
      }
    }
  }
  return theDict != 0;
}

void sub_1C55C7C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CapSuppServicesInfo::CallForward::Rule::deserialize(CapSuppServicesInfo::CallForward::Rule *this, CFDictionaryRef theDict)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  Value = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardRuleAction");
  LOBYTE(v23) = 0;
  if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v23, v5, v7);
    char v8 = v23;
  }
  else
  {
    char v8 = 0;
  }
  *(unsigned char *)this = v8;
  CFNumberRef v9 = (BOOL *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardActivate");
  CFNumberRef v10 = v9;
  LOBYTE(v23) = 0;
  if (v9 && (CFTypeID v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v23, v10, v12);
    char v13 = v23;
  }
  else
  {
    char v13 = 0;
  }
  *((unsigned char *)this + 2) = v13;
  CFArrayRef v14 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardReason");
  CFArrayRef v15 = v14;
  LOBYTE(v23) = 0;
  if (v14 && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v23, v15, v17);
    char v18 = v23;
  }
  else
  {
    char v18 = 0;
  }
  *((unsigned char *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
  CFDictionaryGetValue(theDict, @"kSuppServicesProvCallForwardPhoneNumber");
  uint64_t v23 = 0;
  long long v24 = 0uLL;
  ctu::cf::assign();
  uint64_t v19 = v23;
  v25[0] = v24;
  *(void *)((char *)v25 + 7) = *(void *)((char *)&v24 + 7);
  char v20 = HIBYTE(v24);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  uint64_t v21 = v25[0];
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v19;
  *((void *)this + 2) = v21;
  *(void *)((char *)this + 23) = *(void *)((char *)v25 + 7);
  *((unsigned char *)this + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
  return 1;
}

void sub_1C55C7E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **CapSuppServicesInfo::CallerIdPresentation::serialize@<X0>(CapSuppServicesInfo::CallerIdPresentation *this@<X0>, void *a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = Mutable;
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*((unsigned char *)this + 8)) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kSuppServicesProvServiceEnable", *v5);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&v7);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v7);
}

void sub_1C55C7F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL CapSuppServicesInfo::CallerIdPresentation::deserialize(CapSuppServicesInfo::CallerIdPresentation *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = (BOOL *)CFDictionaryGetValue(theDict, @"kSuppServicesProvServiceEnable");
    char v10 = 0;
    if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v10, v5, v7);
      char v8 = v10;
    }
    else
    {
      char v8 = 0;
    }
    *((unsigned char *)this + 8) = v8;
  }
  return theDict != 0;
}

const void **CapSuppServicesInfo::CallerIdRestriction::serialize@<X0>(CapSuppServicesInfo::CallerIdRestriction *this@<X0>, void *a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFTypeID v6 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (*((unsigned char *)this + 8)) {
    CFBooleanRef v7 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    CFBooleanRef v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kSuppServicesProvServiceEnable", v7);
  if (*((unsigned char *)this + 9)) {
    char v8 = v5;
  }
  else {
    char v8 = v6;
  }
  CFDictionarySetValue(theDict, @"kIMSSuppServicesProvOIRDefaultBehavior", v8);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C8074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL CapSuppServicesInfo::CallerIdRestriction::deserialize(CapSuppServicesInfo::CallerIdRestriction *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = (BOOL *)CFDictionaryGetValue(theDict, @"kSuppServicesProvServiceEnable");
    char v15 = 0;
    if (Value && (uint64_t v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v15, v5, v7);
      char v8 = v15;
    }
    else
    {
      char v8 = 0;
    }
    *((unsigned char *)this + 8) = v8;
    CFNumberRef v9 = (BOOL *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvOIRDefaultBehavior");
    char v16 = 0;
    if (v9 && (char v10 = v9, v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v16, v10, v12);
      char v13 = v16;
    }
    else
    {
      char v13 = 0;
    }
    *((unsigned char *)this + 9) = v13;
  }
  return theDict != 0;
}

const void **CapSuppServicesInfo::CallBarring::serialize@<X0>(CapSuppServicesInfo::CallBarring *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  if (v5 != v6)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v4, 0xAAAAAAAAAAAAAAABLL * (v6 - v5), MEMORY[0x1E4F1D510]);
    CFMutableArrayRef theArray = Mutable;
    CFNumberRef v9 = (__int16 *)*((void *)this + 2);
    char v8 = (__int16 *)*((void *)this + 3);
    if (v9 != v8)
    {
      do
      {
        __int16 v10 = *v9;
        char v14 = *((unsigned char *)v9 + 2);
        __int16 v13 = v10;
        value = 0;
        CapSuppServicesInfo::CallBarring::Rule::serialize((CapSuppServicesInfo::CallBarring::Rule *)&v13, &value);
        CFArrayAppendValue(theArray, value);
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
        CFNumberRef v9 = (__int16 *)((char *)v9 + 3);
      }
      while (v9 != v8);
      CFMutableDictionaryRef Mutable = theArray;
    }
    CFDictionarySetValue(theDict, @"kSuppServicesProvCallBarringRules", Mutable);
    ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)&theArray);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFAllocatorRef v4 = va_arg(va1, const void *);
  ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

const void **CapSuppServicesInfo::CallBarring::Rule::serialize@<X0>(CapSuppServicesInfo::CallBarring::Rule *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  uint64_t v6 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFBooleanRef v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)this) {
    char v8 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    char v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"kIMSSuppServicesProvCallBarringAllow", v8);
  if (*((unsigned char *)this + 1)) {
    CFNumberRef v9 = v6;
  }
  else {
    CFNumberRef v9 = v7;
  }
  CFDictionarySetValue(theDict, @"kIMSSuppServicesProvCallBarringActivate", v9);
  CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 2);
  CFDictionarySetValue(theDict, @"kIMSSuppServicesProvCallBarringFacility", v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v11);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C55C83BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL CapSuppServicesInfo::CallBarring::deserialize(CapSuppServicesInfo::CallBarring *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"kSuppServicesProvCallBarringRules");
    if (Value)
    {
      CFArrayRef v5 = Value;
      if (CFArrayGetCount(Value) >= 1)
      {
        CFIndex v6 = 0;
        CFBooleanRef v7 = (void *)((char *)this + 16);
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
          if (ValueAtIndex)
          {
            char v25 = 0;
            __int16 v24 = 0;
            if (CapSuppServicesInfo::CallBarring::Rule::deserialize((CapSuppServicesInfo::CallBarring::Rule *)&v24, ValueAtIndex))
            {
              unint64_t v9 = *((void *)this + 3);
              unint64_t v10 = *((void *)this + 4);
              if (v9 >= v10)
              {
                unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - *v7);
                unint64_t v13 = v12 + 1;
                if (v12 + 1 >= 0x5555555555555556) {
                  std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v10 - *v7);
                if (2 * v14 > v13) {
                  unint64_t v13 = 2 * v14;
                }
                if (v14 >= 0x2AAAAAAAAAAAAAAALL) {
                  unint64_t v15 = 0x5555555555555555;
                }
                else {
                  unint64_t v15 = v13;
                }
                if (v15) {
                  char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallBarring::Rule>>((uint64_t)this + 32, v15);
                }
                else {
                  char v16 = 0;
                }
                CFNumberRef v17 = &v16[3 * v12];
                *(_WORD *)CFNumberRef v17 = v24;
                void v17[2] = v25;
                uint64_t v19 = (unsigned char *)*((void *)this + 2);
                char v18 = (unsigned char *)*((void *)this + 3);
                char v20 = v17;
                if (v18 != v19)
                {
                  do
                  {
                    __int16 v21 = *(_WORD *)(v18 - 3);
                    v18 -= 3;
                    char v22 = v18[2];
                    *(_WORD *)(v20 - 3) = v21;
                    v20 -= 3;
                    void v20[2] = v22;
                  }
                  while (v18 != v19);
                  char v18 = (unsigned char *)*v7;
                }
                CFNumberRef v11 = v17 + 3;
                *((void *)this + 2) = v20;
                *((void *)this + 3) = v17 + 3;
                *((void *)this + 4) = &v16[3 * v15];
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *(_WORD *)unint64_t v9 = v24;
                *(unsigned char *)(v9 + 2) = v25;
                CFNumberRef v11 = (char *)(v9 + 3);
              }
              *((void *)this + 3) = v11;
            }
          }
          ++v6;
        }
        while (CFArrayGetCount(v5) > v6);
      }
    }
  }
  return theDict != 0;
}

BOOL CapSuppServicesInfo::CallBarring::Rule::deserialize(CapSuppServicesInfo::CallBarring::Rule *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvCallBarringAllow");
    char v21 = 0;
    if (Value && (CFArrayRef v5 = Value, v6 = CFGetTypeID(Value), v6 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v21, v5, v7);
      char v8 = v21;
    }
    else
    {
      char v8 = 0;
    }
    *(unsigned char *)this = v8;
    unint64_t v9 = (BOOL *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvCallBarringActivate");
    char v22 = 0;
    if (v9 && (unint64_t v10 = v9, v11 = CFGetTypeID(v9), v11 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v22, v10, v12);
      char v13 = v22;
    }
    else
    {
      char v13 = 0;
    }
    *((unsigned char *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v13;
    unint64_t v14 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kIMSSuppServicesProvCallBarringFacility");
    char v20 = 0;
    if (v14 && (unint64_t v15 = v14, v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&v20, v15, v17);
      char v18 = v20;
    }
    else
    {
      char v18 = 0;
    }
    *((unsigned char *)this + 2) = v18;
  }
  return theDict != 0;
}

void CapSuppServicesInfo::CallWaiting::~CallWaiting(CapSuppServicesInfo::CallWaiting *this)
{
}

void CapSuppServicesInfo::CallForward::~CallForward(CapSuppServicesInfo::CallForward *this)
{
  *(void *)this = &unk_1F20E10A8;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<CapSuppServicesInfo::CallForward::Rule>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20E10A8;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<CapSuppServicesInfo::CallForward::Rule>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1C878E320);
}

void CapSuppServicesInfo::CallerIdPresentation::~CallerIdPresentation(CapSuppServicesInfo::CallerIdPresentation *this)
{
}

void CapSuppServicesInfo::CallerIdRestriction::~CallerIdRestriction(CapSuppServicesInfo::CallerIdRestriction *this)
{
}

void CapSuppServicesInfo::CallBarring::~CallBarring(CapSuppServicesInfo::CallBarring *this)
{
  *(void *)this = &unk_1F20E1180;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20E1180;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<CapSuppServicesInfo::CallForward::Rule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    CFAllocatorRef v4 = (void **)v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFDictionaryGetTypeID()) {
      CFArrayRef v5 = v3;
    }
    else {
      CFArrayRef v5 = 0;
    }
  }
  else
  {
    CFArrayRef v5 = 0;
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(a1, v5);
}

void *ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void SipCallWaitingInfo::SipCallWaitingInfo(SipCallWaitingInfo *this, char a2)
{
  *(void *)this = &unk_1F20C81E8;
  CFTypeID v4 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ims-cw");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (long long *)__p, 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20E11C8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E1240;
  *((unsigned char *)this + 64) = a2;
}

void sub_1C55C8B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipCallWaitingInfo::parseChild(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = qword_1EBBDBA10;
  if (byte_1EBBDBA1F >= 0) {
    uint64_t v4 = byte_1EBBDBA1F;
  }
  if (v3 != v4) {
    return result;
  }
  uint64_t v5 = result;
  if (byte_1EBBDBA1F >= 0) {
    char v6 = &kCommunicationWaitingIndicationName;
  }
  else {
    char v6 = (uint64_t *)kCommunicationWaitingIndicationName;
  }
  if ((v2 & 0x80) != 0)
  {
    double result = memcmp(*(const void **)a2, v6, *((void *)a2 + 1));
    if (result) {
      return result;
    }
    goto LABEL_16;
  }
  if (!a2[23])
  {
LABEL_16:
    *(unsigned char *)(v5 + 64) = 1;
    return result;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    char v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2) {
      goto LABEL_16;
    }
  }
  return result;
}

void SipCallWaitingInfo::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C55C8C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  CFBooleanRef v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipCallWaitingInfo::constructTree(void *a1@<X8>)
{
}

void SipCallWaitingInfo::~SipCallWaitingInfo(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipCallWaitingInfo::~SipCallWaitingInfo(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_SipCallWaitingInfo_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kCommunicationWaitingIndicationName, "communication-waiting-indication");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kCommunicationWaitingIndicationName, &dword_1C51D1000);
}

const char *nas::asString(int a1)
{
  if ((a1 + 1) > 0xD) {
    return "???";
  }
  else {
    return off_1E6512030[(char)(a1 + 1)];
  }
}

_OWORD *SipBodyPart::SipBodyPart(_OWORD *a1, uint64_t a2)
{
  *a1 = 0u;
  a1[1] = 0u;
  SipBodyPart::setBody((uint64_t)a1, a2);
  return a1;
}

void sub_1C55C8E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t SipBodyPart::setBody(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a1 + 24) = a2;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96);
    return v5(a2, a1);
  }
  return result;
}

void SipBodyPart::SipBodyPart(SipBodyPart *this, long long **a2)
{
  *(void *)this = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v6 = 0;
    do
    {
      if ((unint64_t)v6 >= *((void *)this + 2))
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v6 = std::vector<SipBodyPart::Header>::__push_back_slow_path<SipBodyPart::Header const&>((std::__split_buffer<std::pair<std::string, std::string>>::pointer *)this, v4);
      }
      else
      {
        std::construct_at[abi:ne180100]<SipBodyPart::Header,SipBodyPart::Header const&,SipBodyPart::Header*>(&v6->first, v4);
        *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = ++v6;
      }
      *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v6;
      v4 += 3;
    }
    while (v4 != v5);
  }
  *((void *)this + 3) = 0;
  CFBooleanRef v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(long long *))(*(void *)v7 + 24))(v7);
    SipBodyPart::setBody((uint64_t)this, v8);
  }
}

void sub_1C55C8FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void SipBodyPart::~SipBodyPart(SipBodyPart *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t SipBodyPart::contentLength(SipBodyPart *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 *)(v2 + 23);
      uint64_t v6 = *(void *)(v2 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v7 = *(void *)(v2 + 8);
      }
      if (v7 != 12) {
        goto LABEL_16;
      }
      if ((v5 & 0x80) != 0)
      {
        int v9 = memcmp(*(const void **)v2, "Content-Type", *(void *)(v2 + 8));
        uint64_t v7 = v6;
        if (v9) {
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v2 + 23))
      {
        uint64_t v8 = 0;
        while (*(unsigned __int8 *)(v2 + v8) == SipHeader::kHeaderContentType[v8])
        {
          if (v5 == ++v8) {
            goto LABEL_20;
          }
        }
        uint64_t v7 = 12;
LABEL_16:
        if (*(char *)(v2 + 47) < 0) {
          uint64_t v10 = *(void *)(v2 + 32);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(v2 + 47);
        }
        v4 += v7 + v10 + 4;
      }
LABEL_20:
      v2 += 48;
      if (v2 == v3) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_23:
  uint64_t v11 = *((void *)this + 3);
  if (!v11) {
    return v4 + 2;
  }
  CFBooleanRef v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
  uint64_t v13 = v12[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v12[23];
  }
  else {
    uint64_t v14 = *((void *)v12 + 1);
  }
  if (v14 != 10) {
    goto LABEL_36;
  }
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, "text/plain", *((void *)v12 + 1)))
    {
LABEL_36:
      uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(v17 + 8);
      }
      v4 += v18 + 16;
    }
  }
  else if (v12[23])
  {
    unint64_t v15 = "text/plain";
    while (*v12 == *(unsigned __int8 *)v15)
    {
      ++v12;
      ++v15;
      if (!--v13) {
        goto LABEL_39;
      }
    }
    goto LABEL_36;
  }
LABEL_39:
  uint64_t v19 = *((void *)this + 3);
  uint64_t v16 = v4 + 2;
  if (v19) {
    v16 += (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
  }
  return v16;
}

uint64_t SipBodyPart::decode(unint64_t *a1, const std::string *a2, SipMessageEncodingMap *a3)
{
  std::string::size_type v6 = 0;
  uint64_t v7 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  do
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      std::string::size_type v9 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v9 = a2->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (size < v6) {
      goto LABEL_83;
    }
    uint64_t v10 = (unsigned char *)(v9 + v6);
    uint64_t v11 = (char *)(v9 + size);
    while (1)
    {
      if (v11 - v10 < 2) {
        goto LABEL_83;
      }
      CFBooleanRef v12 = (char *)memchr(v10, 13, v11 - v10 - 1);
      if (!v12) {
        goto LABEL_83;
      }
      if (*(_WORD *)v12 == 2573) {
        break;
      }
      uint64_t v10 = v12 + 1;
    }
    if (v12 == v11 || (uint64_t v13 = &v12[-v9], v13 == (char *)-1))
    {
LABEL_83:
      std::string::basic_string[abi:ne180100]<0>(&__p, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v62, "");
      uint64_t v46 = ims::error((uint64_t)&__p, (uint64_t)&v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"SipBodyPart::decode: can't find CRLF in headers", 47);
      *(unsigned char *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v46 + 17) = 0;
      if (SHIBYTE(v62.__end_) < 0) {
        operator delete(v62.__first_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    memset(&__str, 0, sizeof(__str));
    std::string::basic_string(&__str, a2, v6, (std::string::size_type)&v13[-v6], (std::allocator<char> *)&__p);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v14 = __str.__r_.__value_.__l.__size_;
    }
    if (v14)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t v16 = memchr(p_str, 58, v14);
      if (v16 && (std::string::size_type v17 = v16 - (unsigned char *)p_str, v17 < v14 - 1))
      {
        memset(&v61, 0, sizeof(v61));
        std::string::basic_string(&v61, &__str, 0, v17, (std::allocator<char> *)&__p);
        ims::chomp(&v61, "\r\n\t ", 3);
        memset(&v60, 0, sizeof(v60));
        std::string::basic_string(&v60, &__str, v17 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        ims::chomp(&v60, "\r\n\t ", 3);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v56, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
        }
        else {
          std::string v56 = v61;
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v55, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else {
          std::string v55 = v60;
        }
        SipBodyPart::Header::Header((uint64_t)&__p, &v56, &v55);
        unint64_t v20 = a1[1];
        unint64_t v21 = a1[2];
        if (v20 >= v21)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 4);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0x555555555555555) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a1) >> 4);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v27 = 0x555555555555555;
          }
          else {
            unint64_t v27 = v25;
          }
          v62.__end_cap_.__value_ = v7;
          if (v27) {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SipBodyPart::Header>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          unint64_t v29 = v27 + 48 * v24;
          long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v29 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v29 = v30;
          memset(&__p, 0, sizeof(__p));
          long long v31 = v58;
          *(void *)(v29 + 40) = v59;
          *(_OWORD *)(v29 + 24) = v31;
          uint64_t v59 = 0;
          long long v58 = 0uLL;
          unint64_t v33 = *a1;
          unint64_t v32 = a1[1];
          if (v32 == *a1)
          {
            int64x2_t v37 = vdupq_n_s64(v32);
            unint64_t v34 = v27 + 48 * v24;
          }
          else
          {
            unint64_t v34 = v27 + 48 * v24;
            do
            {
              long long v35 = *(_OWORD *)(v32 - 48);
              *(void *)(v34 - 32) = *(void *)(v32 - 32);
              *(_OWORD *)(v34 - 48) = v35;
              *(void *)(v32 - 40) = 0;
              *(void *)(v32 - 32) = 0;
              *(void *)(v32 - 48) = 0;
              long long v36 = *(_OWORD *)(v32 - 24);
              *(void *)(v34 - 8) = *(void *)(v32 - 8);
              *(_OWORD *)(v34 - 24) = v36;
              v34 -= 48;
              *(void *)(v32 - 16) = 0;
              *(void *)(v32 - 8) = 0;
              *(void *)(v32 - 24) = 0;
              v32 -= 48;
            }
            while (v32 != v33);
            int64x2_t v37 = *(int64x2_t *)a1;
          }
          unint64_t v38 = v29 + 48;
          *a1 = v34;
          a1[1] = v29 + 48;
          *(int64x2_t *)&v62.__begin_ = v37;
          uint64_t v39 = (std::pair<std::string, std::string> *)a1[2];
          a1[2] = v27 + 48 * v28;
          v62.__end_cap_.__value_ = v39;
          v62.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v37.i64[0];
          std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&v62);
          int v40 = SHIBYTE(v59);
          a1[1] = v38;
          if (v40 < 0) {
            operator delete((void *)v58);
          }
        }
        else
        {
          long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v20 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v20 = v22;
          memset(&__p, 0, sizeof(__p));
          uint64_t v23 = v59;
          *(_OWORD *)(v20 + 24) = v58;
          *(void *)(v20 + 40) = v23;
          uint64_t v59 = 0;
          long long v58 = 0uLL;
          a1[1] = v20 + 48;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        int v18 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(&v62, "");
        uint64_t v19 = ims::error((uint64_t)&__p, (uint64_t)&v62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"SipBodyPart::decode: decodeHeader failed on ", 44);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 32))(v19, &__str);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v19 + 17) = 0;
        if (SHIBYTE(v62.__end_) < 0) {
          operator delete(v62.__first_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v18 = 1;
      }
    }
    else
    {
      int v18 = 3;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::size_type v6 = (std::string::size_type)(v13 + 2);
  }
  while (!v18);
  if (v18 != 3) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  unint64_t v41 = *a1;
  unint64_t v42 = a1[1];
  if (*a1 == v42) {
    goto LABEL_92;
  }
  while (2)
  {
    uint64_t v43 = *(unsigned __int8 *)(v41 + 23);
    if ((v43 & 0x80u) == 0) {
      uint64_t v44 = *(unsigned __int8 *)(v41 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v41 + 8);
    }
    if (v44 != 12) {
      goto LABEL_81;
    }
    if ((v43 & 0x80) == 0)
    {
      if (!*(unsigned char *)(v41 + 23)) {
        break;
      }
      uint64_t v45 = 0;
      while (*(unsigned __int8 *)(v41 + v45) == SipHeader::kHeaderContentType[v45])
      {
        if (v43 == ++v45) {
          goto LABEL_89;
        }
      }
      goto LABEL_81;
    }
    if (memcmp(*(const void **)v41, "Content-Type", *(void *)(v41 + 8)))
    {
LABEL_81:
      v41 += 48;
      if (v41 == v42) {
        goto LABEL_92;
      }
      continue;
    }
    break;
  }
LABEL_89:
  std::string::operator=(&__p, (const std::string *)(v41 + 24));
  std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
  }
  if (!v49) {
LABEL_92:
  }
    std::string::operator=(&__p, (const std::string *)"text/plain");
  uint64_t v50 = SipMessageEncodingMap::createBody(a3, &__p);
  a1[3] = v50;
  if (v50)
  {
    memset(&v62, 0, 24);
    std::string::basic_string((std::string *)&v62, a2, (std::string::size_type)(v13 + 2), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v61);
    uint64_t v47 = (*(uint64_t (**)(unint64_t, std::__split_buffer<std::pair<std::string, std::string>> *, SipMessageEncodingMap *))(*(void *)a1[3] + 88))(a1[3], &v62, a3);
    if ((v47 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v60, "");
      uint64_t v51 = ims::error((uint64_t)&v61, (uint64_t)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"SipBodyPart::decode: body decode failed", 39);
      *(unsigned char *)(v51 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v51 + 17) = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      unint64_t v52 = a1[3];
      if (v52) {
        (*(void (**)(unint64_t))(*(void *)v52 + 8))(v52);
      }
      a1[3] = 0;
    }
    if (SHIBYTE(v62.__end_) < 0) {
      operator delete(v62.__first_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v61, "");
    uint64_t v53 = ims::error((uint64_t)&v62, (uint64_t)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"SipBodyPart::decode: create body failed", 39);
    *(unsigned char *)(v53 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v53 + 17) = 0;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__end_) < 0) {
      operator delete(v62.__first_);
    }
    uint64_t v47 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v47;
}

void sub_1C55C9AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v49 - 113) < 0) {
    operator delete(*(void **)(v49 - 136));
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipBodyPart::encode(SipBodyPart *this, ImsOutStream *a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)this != v5)
  {
    do
    {
      uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v7 = *(void *)(v4 + 8);
      }
      if (v7 != 12) {
        goto LABEL_13;
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v4, "Content-Type", *(void *)(v4 + 8))) {
          goto LABEL_13;
        }
      }
      else if (*(unsigned char *)(v4 + 23))
      {
        uint64_t v8 = 0;
        while (*(unsigned __int8 *)(v4 + v8) == SipHeader::kHeaderContentType[v8])
        {
          if (v6 == ++v8) {
            goto LABEL_14;
          }
        }
LABEL_13:
        (*(void (**)(ImsOutStream *, uint64_t))(*(void *)a2 + 32))(a2, v4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, uint64_t))(*(void *)a2 + 32))(a2, v4 + 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
        *((unsigned char *)a2 + 17) = 0;
      }
LABEL_14:
      v4 += 48;
    }
    while (v4 != v5);
  }
  std::string::size_type v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  uint64_t v10 = v9[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v9[23];
  }
  else {
    uint64_t v11 = *((void *)v9 + 1);
  }
  if (v11 == 10)
  {
    if ((v10 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v9, "text/plain", *((void *)v9 + 1))) {
        goto LABEL_27;
      }
    }
    else
    {
      if (!v9[23]) {
        goto LABEL_27;
      }
      CFBooleanRef v12 = "text/plain";
      while (*v9 == *(unsigned __int8 *)v12)
      {
        ++v9;
        ++v12;
        if (!--v10) {
          goto LABEL_27;
        }
      }
    }
  }
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "Content-Type");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  (*(void (**)(ImsOutStream *, uint64_t))(*(void *)a2 + 32))(a2, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
  *((unsigned char *)a2 + 17) = 0;
LABEL_27:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
  *((unsigned char *)a2 + 17) = 0;
  size_t v14 = *(uint64_t (**)(void))(**((void **)this + 3) + 64);
  return v14();
}

void SipBodyPart::encodeToString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C55CA0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipBodyPart::setHeader(unint64_t *a1, uint64_t a2, std::string *__str)
{
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  char v8 = *(unsigned char *)(a2 + 23);
  if (*a1 != v7)
  {
    if (v8 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v8 >= 0) {
      uint64_t v10 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v10 = *(const std::string::value_type **)a2;
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v6 + 8);
      }
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v6, v10, *(void *)(v6 + 8)))
          {
LABEL_22:
            std::string::operator=((std::string *)(v6 + 24), __str);
            return;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 23)) {
            goto LABEL_22;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13) == v10[v13])
          {
            if (v11 == ++v13) {
              goto LABEL_22;
            }
          }
        }
      }
      v6 += 48;
    }
    while (v6 != v7);
  }
  if (v8 < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v36 = *(std::string *)a2;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = *__str;
  }
  SipBodyPart::Header::Header((uint64_t)v37, &v36, &v35);
  unint64_t v14 = a1[2];
  unint64_t v15 = a1[1];
  if (v15 >= v14)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *a1) >> 4);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0x555555555555555) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a1) >> 4);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v21 = 0x555555555555555;
    }
    else {
      unint64_t v21 = v19;
    }
    v41.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SipBodyPart::Header>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v21 + 48 * v18;
    long long v24 = *(_OWORD *)v37;
    *(void *)(v23 + 16) = v38;
    *(_OWORD *)unint64_t v23 = v24;
    v37[1] = 0;
    uint64_t v38 = 0;
    v37[0] = 0;
    long long v25 = *(_OWORD *)__p;
    *(void *)(v23 + 40) = v40;
    *(_OWORD *)(v23 + 24) = v25;
    __p[1] = 0;
    uint64_t v40 = 0;
    __p[0] = 0;
    unint64_t v27 = *a1;
    unint64_t v26 = a1[1];
    if (v26 == *a1)
    {
      int64x2_t v31 = vdupq_n_s64(v26);
      unint64_t v28 = v21 + 48 * v18;
    }
    else
    {
      unint64_t v28 = v21 + 48 * v18;
      do
      {
        long long v29 = *(_OWORD *)(v26 - 48);
        *(void *)(v28 - 32) = *(void *)(v26 - 32);
        *(_OWORD *)(v28 - 48) = v29;
        *(void *)(v26 - 40) = 0;
        *(void *)(v26 - 32) = 0;
        *(void *)(v26 - 48) = 0;
        long long v30 = *(_OWORD *)(v26 - 24);
        *(void *)(v28 - 8) = *(void *)(v26 - 8);
        *(_OWORD *)(v28 - 24) = v30;
        v28 -= 48;
        *(void *)(v26 - 16) = 0;
        *(void *)(v26 - 8) = 0;
        *(void *)(v26 - 24) = 0;
        v26 -= 48;
      }
      while (v26 != v27);
      int64x2_t v31 = *(int64x2_t *)a1;
    }
    unint64_t v32 = v23 + 48;
    *a1 = v28;
    a1[1] = v23 + 48;
    *(int64x2_t *)&v41.__begin_ = v31;
    unint64_t v33 = (std::pair<std::string, std::string> *)a1[2];
    a1[2] = v21 + 48 * v22;
    v41.__end_cap_.__value_ = v33;
    v41.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v31.i64[0];
    std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&v41);
    int v34 = SHIBYTE(v40);
    a1[1] = v32;
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v16 = *(_OWORD *)v37;
    *(void *)(v15 + 16) = v38;
    *(_OWORD *)unint64_t v15 = v16;
    v37[0] = 0;
    v37[1] = 0;
    uint64_t v17 = v40;
    *(_OWORD *)(v15 + 24) = *(_OWORD *)__p;
    *(void *)(v15 + 40) = v17;
    uint64_t v38 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v40 = 0;
    a1[1] = v15 + 48;
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1C55CA3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<SipBodyPart::Header>::__push_back_slow_path<SipBodyPart::Header const&>(std::__split_buffer<std::pair<std::string, std::string>>::pointer *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v7 = 0x555555555555555;
  }
  else {
    unint64_t v7 = v3;
  }
  v19.__end_cap_.__value_ = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SipBodyPart::Header>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  v19.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v7;
  v19.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v7 + 48 * v2);
  v19.__end_ = v19.__begin_;
  v19.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(v7 + 48 * v8);
  std::construct_at[abi:ne180100]<SipBodyPart::Header,SipBodyPart::Header const&,SipBodyPart::Header*>(&v19.__begin_->first, a2);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v10 = *a1;
  unint64_t v9 = (unint64_t)a1[1];
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v19.__begin_;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = v19.__begin_;
  if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v9 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v9 - 48);
      begin[-1].first.__r_.__value_.__r.__words[2] = *(void *)(v9 - 32);
      *(_OWORD *)&begin[-1].first.__r_.__value_.__l.__data_ = v13;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v14 = *(_OWORD *)(v9 - 24);
      begin[-1].second.__r_.__value_.__r.__words[2] = *(void *)(v9 - 8);
      *(_OWORD *)&begin[-1].second.__r_.__value_.__l.__data_ = v14;
      --begin;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v9 -= 48;
    }
    while ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v9 != v10);
    int64x2_t v15 = *(int64x2_t *)a1;
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v16 = v11 + 1;
  *a1 = begin;
  a1[1] = v11 + 1;
  *(int64x2_t *)&v19.__begin_ = v15;
  uint64_t v17 = a1[2];
  a1[2] = v19.__end_cap_.__value_;
  v19.__end_cap_.__value_ = v17;
  v19.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v15.i64[0];
  std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&v19);
  return v16;
}

void sub_1C55CA58C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::construct_at[abi:ne180100]<SipBodyPart::Header,SipBodyPart::Header const&,SipBodyPart::Header*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C55CA61C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipBodyPart::Header>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t SipBodyPart::Header::Header(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1C55CA6D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipAllowHeader::~SipAllowHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipAllowHeader::clone(SipAllowHeader *this)
{
}

void sub_1C55CA828(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

SipSecurityMechanism *SipSecurityServerHeader::bestMatchingMechanism(SipSecurityServerHeader *this, const SipSecurityClientHeader *a2)
{
  unint64_t v2 = (SipSecurityMechanism **)*((void *)this + 8);
  unint64_t v3 = (SipSecurityMechanism **)*((void *)this + 9);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    long long v6 = *v2;
    if (!v5 || (double v7 = SipSecurityMechanism::preference(*v2), v7 > SipSecurityMechanism::preference(v5)))
    {
      uint64_t v8 = (void *)*((void *)a2 + 8);
      unint64_t v9 = (void *)*((void *)a2 + 9);
      while (v8 != v9)
      {
        if ((*(unsigned int (**)(void, SipSecurityMechanism *))(*(void *)*v8 + 40))(*v8, v6))
        {
          uint64_t v5 = v6;
          break;
        }
        ++v8;
      }
    }
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

void SipSecurityServerHeader::~SipSecurityServerHeader(SipSecurityServerHeader *this)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSecurityServerHeader::clone(SipSecurityServerHeader *this)
{
}

void sub_1C55CA9C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t XcapDocumentCallBarring::XcapDocumentCallBarring(uint64_t a1, int a2)
{
  char v2 = a2;
  if (a2) {
    long long v4 = &XcapDocumentCallBarring::kNameIncoming;
  }
  else {
    long long v4 = &XcapDocumentCallBarring::kNameOutgoing;
  }
  unsigned __int8 v7 = 0;
  uint64_t v8 = (char *)&v7;
  uint64_t v5 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v7, (uint64_t)&std::piecewise_construct, &v8)+ 5);
  *(void *)a1 = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem(a1 + 8, (long long *)v4, v5);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)a1 = &unk_1F20E1408;
  *(void *)(a1 + 8) = &unk_1F20E14A0;
  *(unsigned char *)(a1 + 8bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v2;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void XcapDocumentCallBarring::~XcapDocumentCallBarring(XcapDocumentCallBarring *this)
{
  *(void *)this = &unk_1F20E1408;
  char v2 = (void **)((char *)this + 8);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E14A0;
  unint64_t v3 = (void *)*((void *)this + 11);
  long long v4 = (void *)*((void *)this + 12);
  if (v3 != v4)
  {
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
    }
    while (v3 != v4);
    unint64_t v3 = (void *)*((void *)this + 11);
  }
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  uint64_t vars8;

  XcapDocumentCallBarring::~XcapDocumentCallBarring(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapDocumentCallBarring::~XcapDocumentCallBarring(XcapDocumentCallBarring *this)
{
}

{
  uint64_t vars8;

  XcapDocumentCallBarring::~XcapDocumentCallBarring((XcapDocumentCallBarring *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

uint64_t XcapDocumentCallBarring::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = qword_1EBBDB330;
  if (byte_1EBBDB33F >= 0) {
    uint64_t v7 = byte_1EBBDB33F;
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (byte_1EBBDB33F >= 0) {
    uint64_t v8 = &XcapDocumentCallBarring::kNameOutgoing;
  }
  else {
    uint64_t v8 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_56;
    }
LABEL_17:
    uint64_t v12 = qword_1EBBDB318;
    if (byte_1EBBDB327 >= 0) {
      uint64_t v12 = byte_1EBBDB327;
    }
    if (v6 == v12)
    {
      if (byte_1EBBDB327 >= 0) {
        long long v13 = &XcapDocumentCallBarring::kNameIncoming;
      }
      else {
        long long v13 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
      }
      if ((v4 & 0x80) != 0)
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v13, size)) {
          goto LABEL_56;
        }
        if (size != 7) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      if (!v4) {
        return a1;
      }
      p_s1 = &__s1;
      uint64_t v15 = v3;
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        long long v13 = (uint64_t *)((char *)v13 + 1);
        if (!--v15) {
          goto LABEL_36;
        }
      }
    }
    if (v6 == 4)
    {
LABEL_44:
      if ((v4 & 0x80) == 0)
      {
        if (v4)
        {
          unint64_t v20 = &__s1;
          unint64_t v21 = "rule";
          while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
          {
            unint64_t v20 = (std::string *)((char *)v20 + 1);
            ++v21;
            if (!--v3) {
              goto LABEL_54;
            }
          }
LABEL_50:
          uint64_t v19 = 0;
          if ((v4 & 0x80) != 0)
          {
LABEL_55:
            std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (void *)__s1.__r_.__value_.__r.__words[0];
            a1 = v19;
            goto LABEL_56;
          }
          return v19;
        }
LABEL_54:
        operator new();
      }
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "rule", size)) {
        goto LABEL_54;
      }
      a1 = 0;
LABEL_56:
      operator delete(v11);
      return a1;
    }
    if (v6 != 7) {
      goto LABEL_50;
    }
    if ((v4 & 0x80) == 0)
    {
      if (!v4) {
        return a1;
      }
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v16 = &__s1;
      uint64_t v17 = "ruleset";
      uint64_t v18 = v3;
      while (v16->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v17)
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v16 = (std::string *)((char *)v16 + 1);
        ++v17;
        if (!--v18) {
          goto LABEL_36;
        }
      }
LABEL_43:
      if (v6 != 4) {
        goto LABEL_50;
      }
      goto LABEL_44;
    }
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_42:
    if (!memcmp(v11, "ruleset", size)) {
      goto LABEL_56;
    }
    goto LABEL_43;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    unint64_t v9 = &__s1;
    uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    do
    {
      if (v9->__r_.__value_.__s.__data_[0] != *(unsigned __int8 *)v8) {
        goto LABEL_17;
      }
      unint64_t v9 = (std::string *)((char *)v9 + 1);
      uint64_t v8 = (uint64_t *)((char *)v8 + 1);
      --v10;
    }
    while (v10);
LABEL_36:
    uint64_t v19 = a1;
    if ((v4 & 0x80) != 0) {
      goto LABEL_55;
    }
    return v19;
  }
  return a1;
}

void sub_1C55CAF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C878E320](v15, 0x10B3C40B88DE452);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XcapDocumentCallBarring::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = qword_1EBBDB330;
  if (byte_1EBBDB33F >= 0) {
    uint64_t v10 = byte_1EBBDB33F;
  }
  if (v9 == v10)
  {
    if (byte_1EBBDB33F >= 0) {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = &XcapDocumentCallBarring::kNameOutgoing;
    }
    else {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_50;
      }
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        goto LABEL_50;
      }
      p_s1 = &__s1;
      uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = (uint64_t *)((char *)v11 + 1);
        if (!--v13) {
          goto LABEL_50;
        }
      }
    }
  }
  uint64_t v14 = qword_1EBBDB318;
  if (byte_1EBBDB327 >= 0) {
    uint64_t v14 = byte_1EBBDB327;
  }
  if (v9 == v14)
  {
    if (byte_1EBBDB327 >= 0) {
      uint64_t v15 = &XcapDocumentCallBarring::kNameIncoming;
    }
    else {
      uint64_t v15 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
    }
    if ((v7 & 0x80) != 0)
    {
      unint64_t v21 = (const void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v15, size)) {
        goto LABEL_50;
      }
      if (size != 7) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    if (!v7) {
      goto LABEL_50;
    }
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v16 = &__s1;
    uint64_t v17 = v6;
    while (v16->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
    {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v16 = (std::string *)((char *)v16 + 1);
      uint64_t v15 = (uint64_t *)((char *)v15 + 1);
      if (!--v17) {
        goto LABEL_50;
      }
    }
  }
  if (v9 == 4) {
    goto LABEL_43;
  }
  if (v9 == 7)
  {
    if ((v7 & 0x80) == 0)
    {
      if (v7)
      {
        uint64_t v18 = &__s1;
        uint64_t v19 = "ruleset";
        uint64_t v20 = v6;
        while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
        {
          uint64_t v18 = (std::string *)((char *)v18 + 1);
          ++v19;
          if (!--v20) {
            goto LABEL_50;
          }
        }
LABEL_42:
        if (v9 == 4)
        {
LABEL_43:
          if ((v7 & 0x80) != 0)
          {
            long long v24 = (void *)__s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, "rule", size)) {
              goto LABEL_53;
            }
          }
          else if (v7)
          {
            uint64_t v22 = &__s1;
            unint64_t v23 = "rule";
            while (v22->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
            {
              uint64_t v22 = (std::string *)((char *)v22 + 1);
              ++v23;
              if (!--v6) {
                goto LABEL_50;
              }
            }
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        goto LABEL_51;
      }
LABEL_50:
      bambi::XmlParserItem::parseChild(a1, a2, a3);
      LOBYTE(v7) = *((unsigned char *)&__s1.__r_.__value_.__s + 23);
      goto LABEL_51;
    }
    unint64_t v21 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_41:
    if (memcmp(v21, "ruleset", size)) {
      goto LABEL_42;
    }
    goto LABEL_50;
  }
LABEL_51:
  if ((v7 & 0x80) == 0) {
    return;
  }
  long long v24 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_53:
  operator delete(v24);
}

void sub_1C55CB23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentCallBarring::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C55CB5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::ostringstream::~ostringstream((uint64_t)&a26);
  unint64_t v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapDocumentCallBarring::constructTree(void *a1@<X8>)
{
}

uint64_t XcapDocumentCallBarring::asString@<X0>(XcapDocumentCallBarring *this@<X0>, void *a2@<X8>)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v14, 0, sizeof(v14));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"CB Document: Rules: ", 20);
  int v4 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v11, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  std::ostream::flush();
  int v7 = (XcapCBRule **)*((void *)this + 11);
  for (uint64_t i = (XcapCBRule **)*((void *)this + 12); v7 != i; ++v7)
  {
    XcapCBRule::asString(*v7, &v11);
    if ((v13 & 0x80u) == 0) {
      locale = &v11;
    }
    else {
      locale = v11.__locale_;
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v9 = v13;
    }
    else {
      uint64_t v9 = v12;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)locale, v9);
    if ((char)v13 < 0) {
      operator delete(v11.__locale_);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v14 + 8, a2);
  *(void *)&v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(*(void *)&v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v14[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v18);
}

void sub_1C55CB8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t XcapDocumentCallBarring::findRuleForCondition(uint64_t a1, int a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 88);
  int v4 = *(uint64_t **)(a1 + 96);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v8 = *(void *)(*v3 + 88);
      int v7 = *(std::__shared_weak_count **)(*v3 + 96);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8 && *(unsigned __int8 *)(v8 + 65) == a2) {
        break;
      }
      char v9 = 1;
      if (v7) {
        goto LABEL_9;
      }
LABEL_10:
      if ((v9 & 1) == 0) {
        return v2;
      }
      if (++v3 == v4) {
        return 0;
      }
    }
    char v9 = 0;
    uint64_t v2 = v6;
    if (!v7) {
      goto LABEL_10;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_10;
  }
  return 0;
}

void XcapDocumentCallBarring::addRule(XcapDocumentCallBarring *this, const XcapCBRule *a2)
{
}

void *XcapDocumentCallBarring::deleteRule(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[11];
    int v4 = (void *)result[12];
    if ((void *)v3 != v4)
    {
      uint64_t v5 = -v3;
      while (*(void *)v3 != a2)
      {
        v3 += 8;
        v5 -= 8;
        if ((void *)v3 == v4) {
          return result;
        }
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
      uint64_t v6 = -v5;
      int v7 = (const void *)(8 - v5);
      size_t v8 = v2[12] - (8 - v5);
      if (v8) {
        uint64_t result = memmove((void *)v6, v7, v8);
      }
      v2[12] = v6 + v8;
    }
  }
  return result;
}

void XcapDocumentCallBarring::getItemForPath(uint64_t a1@<X0>, std::string **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) <= 1)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  memset(&v24, 0, sizeof(v24));
  XcapNs::stripXcapNs((uint64_t)v5, &v24);
  uint64_t v7 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  if (size != 7) {
    goto LABEL_41;
  }
  if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((unsigned char *)&v24.__r_.__value_.__s + 23))
    {
      char v9 = &v24;
      uint64_t v10 = "ruleset";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        char v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v7) {
          goto LABEL_14;
        }
      }
      goto LABEL_41;
    }
LABEL_14:
    memset(v23, 0, sizeof(v23));
    if (ims::tokenize(*a2 + 1, v23, 0x22u) != 3)
    {
LABEL_40:
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_41;
    }
    memset(&v22, 0, sizeof(v22));
    if (*(char *)(v23[0] + 47) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v23[0] + 24), *(void *)(v23[0] + 32));
    }
    else {
      std::string v22 = *(std::string *)(v23[0] + 24);
    }
    uint64_t RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), (unsigned __int8 **)&v22);
    uint64_t v12 = RuleById;
    if (!RuleById)
    {
LABEL_38:
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      goto LABEL_40;
    }
    unsigned __int8 v13 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(RuleById + 8), 1, 0, a3);
LABEL_21:
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_42;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v13[2], &__s1);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __s1.__r_.__value_.__l.__size_;
    }
    if (v14 != 10) {
      goto LABEL_34;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      {
LABEL_37:
        operator delete(v18);
        goto LABEL_38;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      long long v16 = "conditions";
      uint64_t v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v16;
        if (!--v17) {
          goto LABEL_45;
        }
      }
LABEL_34:
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_38;
      }
      uint64_t v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_37;
    }
LABEL_45:
    uint64_t v19 = *(void *)(v12 + 88);
    uint64_t v20 = *(std::__shared_weak_count **)(v12 + 96);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(v19 + 8), 1, 0, a3);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  if (!memcmp(v24.__r_.__value_.__l.__data_, "ruleset", v24.__r_.__value_.__l.__size_)) {
    goto LABEL_14;
  }
LABEL_41:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
LABEL_42:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C55CBDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentCallBarring::setItemForPath(uint64_t a1, std::string **a2, bambi::XmlParser *a3)
{
  int v4 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) < 2) {
    return 0;
  }
  memset(&v35, 0, sizeof(v35));
  XcapNs::stripXcapNs((uint64_t)v4, &v35);
  uint64_t v7 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (size == 7)
  {
    if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v35.__r_.__value_.__l.__data_, "ruleset", v35.__r_.__value_.__l.__size_)) {
        goto LABEL_45;
      }
    }
    else if (*((unsigned char *)&v35.__r_.__value_.__s + 23))
    {
      char v9 = &v35;
      uint64_t v10 = "ruleset";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        char v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v7) {
          goto LABEL_13;
        }
      }
      goto LABEL_45;
    }
LABEL_13:
    memset(v34, 0, sizeof(v34));
    if (ims::tokenize(*a2 + 1, v34, 0x22u) != 3) {
      goto LABEL_44;
    }
    memset(&v33, 0, sizeof(v33));
    if (*(char *)(v34[0] + 47) < 0) {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v34[0] + 24), *(void *)(v34[0] + 32));
    }
    else {
      std::string v33 = *(std::string *)(v34[0] + 24);
    }
    uint64_t RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 88), *(uint64_t **)(a1 + 96), (unsigned __int8 **)&v33);
    uint64_t v12 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      long long v32 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      XcapCBRule::XcapCBRule((XcapCBRule *)&v26);
      if (bambi::XmlParser::parseXml(a3, (uint64_t)&v26, v13, v14))
      {
        XcapDocumentCallBarring::deleteRule((void *)a1, RuleById);
        XcapDocumentCallBarring::addRule((XcapDocumentCallBarring *)a1, (const XcapCBRule *)&v26);
      }
      *(void *)&long long v26 = &unk_1F20C2EF0;
      *((void *)&v26 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C2F68;
      if ((void)v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
      }
      if (SBYTE7(v31) < 0) {
        operator delete(__p[0]);
      }
      bambi::XmlTreeItem::~XmlTreeItem((void **)&v26 + 1);
      goto LABEL_42;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v12[2], &__s1);
    uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    char v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __s1.__r_.__value_.__l.__size_;
    }
    if (v17 != 10) {
      goto LABEL_39;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v20 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_41;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v19 = "conditions";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v19;
        if (!--v15) {
          goto LABEL_36;
        }
      }
      goto LABEL_39;
    }
LABEL_36:
    __p[0] = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    XcapCBCondition::XcapCBCondition((XcapCBCondition *)&v26);
    if (bambi::XmlParser::parseXml(a3, (uint64_t)&v26, v21, v22))
    {
      v24[0] = 0;
      v24[1] = 0;
      _ZNSt3__115allocate_sharedB8ne180100I15XcapCBConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v24);
      XcapCBCondition::clone((XcapCBCondition *)&v26);
    }
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v26 + 1);
    char v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_39:
    if ((v16 & 0x80) == 0) {
      goto LABEL_42;
    }
    uint64_t v20 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_41:
    operator delete(v20);
LABEL_42:
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
LABEL_44:
    *(void *)&long long v26 = v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  }
LABEL_45:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C55CC284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19)
{
  bambi::XmlTreeItem::~XmlTreeItem(&a19);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 105) < 0) {
    operator delete(*(void **)(v19 - 128));
  }
  a18 = v19 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 57) < 0) {
    operator delete(*(void **)(v19 - 80));
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<XcapCBCondition>::reset[abi:ne180100]<XcapCBCondition,void>()
{
}

void sub_1C55CC3B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void XcapCBCondition::clone(XcapCBCondition *this)
{
}

void sub_1C55CC430(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40BF0C0B6ALL);
  _Unwind_Resume(a1);
}

void XcapDocumentCallBarring::clone(XcapDocumentCallBarring *this)
{
}

void sub_1C55CC680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C878E320](v2, 0x10F3C40CDEF8A80);
  _Unwind_Resume(a1);
}

void std::vector<XcapCBRule *>::__throw_length_error[abi:ne180100]()
{
}

void std::__shared_ptr_pointer<XcapCBCondition *,std::shared_ptr<XcapCBCondition>::__shared_ptr_default_delete<XcapCBCondition,XcapCBCondition>,std::allocator<XcapCBCondition>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCBCondition *,std::shared_ptr<XcapCBCondition>::__shared_ptr_default_delete<XcapCBCondition,XcapCBCondition>,std::allocator<XcapCBCondition>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCBCondition *,std::shared_ptr<XcapCBCondition>::__shared_ptr_default_delete<XcapCBCondition,XcapCBCondition>,std::allocator<XcapCBCondition>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_XcapDocumentCallBarring_cpp()
{
  void v31[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentCallBarring::kNameOutgoing, "outgoing-communication-barring");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &XcapDocumentCallBarring::kNameOutgoing, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentCallBarring::kNameIncoming, "incoming-communication-barring");
  __cxa_atexit(v0, &XcapDocumentCallBarring::kNameIncoming, &dword_1C51D1000);
  char v18 = 0;
  __int16 v17 = 0;
  std::string::basic_string[abi:ne180100]<0>(v19, "BAOC");
  char v21 = 0;
  __int16 v20 = 512;
  std::string::basic_string[abi:ne180100]<0>(v22, "BOIC");
  char v24 = 0;
  __int16 v23 = 768;
  std::string::basic_string[abi:ne180100]<0>(v25, "BOICEXHC");
  char v27 = 0;
  __int16 v26 = 1;
  std::string::basic_string[abi:ne180100]<0>(v28, "BAIC");
  char v30 = 0;
  __int16 v29 = 257;
  std::string::basic_string[abi:ne180100]<0>(v31, "BICROAM");
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  qword_1EBBDB348 = 0;
  uint64_t v3 = &qword_1EBBDB348;
  qword_1EBBDB350 = 0;
  XcapDocumentCallBarring::kDefaultRuleIds = (uint64_t)&qword_1EBBDB348;
  while (1)
  {
    int v4 = &v17 + 16 * v2;
    if (v3 == &qword_1EBBDB348)
    {
      uint64_t v5 = &qword_1EBBDB348;
    }
    else
    {
      if (v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v1;
          uint64_t v1 = *(void *)(v1 + 8);
        }
        while (v1);
      }
      else
      {
        uint64_t v6 = &qword_1EBBDB348;
        do
        {
          uint64_t v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          uint64_t v6 = v5;
        }
        while (v7);
      }
      char v8 = std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>((unsigned __int8 *)v5 + 32, (unsigned __int8 *)&v17 + 32 * v2);
      uint64_t v1 = qword_1EBBDB348;
      if ((v8 & 0x80000000) == 0)
      {
        if (qword_1EBBDB348)
        {
          char v9 = &qword_1EBBDB348;
          do
          {
            while (1)
            {
              uint64_t v5 = (uint64_t *)v1;
              uint64_t v10 = (unsigned __int8 *)(v1 + 32);
              if (((char)std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>((unsigned __int8 *)&v17 + 32 * v2, (unsigned __int8 *)(v1 + 32)) & 0x80000000) == 0)break; {
              uint64_t v1 = *v5;
              }
              char v9 = v5;
              if (!*v5) {
                goto LABEL_23;
              }
            }
            if (((char)std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(v10, (unsigned __int8 *)&v17 + 32 * v2) & 0x80000000) == 0)goto LABEL_20; {
            char v9 = v5 + 1;
            }
            uint64_t v1 = v5[1];
          }
          while (v1);
        }
        else
        {
LABEL_22:
          char v9 = &qword_1EBBDB348;
          uint64_t v5 = &qword_1EBBDB348;
        }
LABEL_23:
        std::locale v11 = (char *)operator new(0x40uLL);
        *((_WORD *)v11 + 16) = *v4;
        v11[34] = *((unsigned char *)v4 + 2);
        uint64_t v12 = (std::string *)(v11 + 40);
        uint64_t v13 = &v17 + 16 * v2;
        std::string::size_type v14 = (const std::string::value_type **)(v13 + 4);
        if (*((char *)v4 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *v14, *((void *)v13 + 2));
        }
        else
        {
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
          *((void *)v11 + 7) = *((void *)v13 + 3);
        }
        *(void *)std::locale v11 = 0;
        *((void *)v11 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        *((void *)v11 + 2) = v5;
        *char v9 = (uint64_t)v11;
        if (*(void *)XcapDocumentCallBarring::kDefaultRuleIds)
        {
          XcapDocumentCallBarring::kDefaultRuleIds = *(void *)XcapDocumentCallBarring::kDefaultRuleIds;
          std::locale v11 = (char *)*v9;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDB348, (uint64_t *)v11);
        ++qword_1EBBDB350;
        goto LABEL_29;
      }
    }
    if (!v1) {
      goto LABEL_22;
    }
    char v9 = v5 + 1;
LABEL_20:
    if (!*v9) {
      goto LABEL_23;
    }
LABEL_29:
    if (++v2 == 5) {
      break;
    }
    uint64_t v3 = (uint64_t *)XcapDocumentCallBarring::kDefaultRuleIds;
    uint64_t v1 = qword_1EBBDB348;
  }
  for (uint64_t i = 0; i != -20; i -= 4)
  {
    if (SHIBYTE(v31[i + 2]) < 0) {
      operator delete((void *)v31[i]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string const>::~map[abi:ne180100], &XcapDocumentCallBarring::kDefaultRuleIds, &dword_1C51D1000);
}

void sub_1C55CCB04(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (1)
  {
    if (*((char *)v9 - 1) < 0) {
      operator delete((void *)*(v9 - 3));
    }
    v9 -= 4;
    if (v9 == &a9) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t std::map<XcapCBCondition::Condition,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<XcapCBCondition::Media,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void XcapCBCondition::XcapCBCondition(XcapCBCondition *this)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v2 = (char *)this + 8;
  unsigned __int8 v4 = 1;
  uint64_t v5 = (char *)&v4;
  uint64_t v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v4, (uint64_t)&std::piecewise_construct, &v5);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)"conditions", (long long *)(v3 + 5));
  *(void *)this = &unk_1F20E15A8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E1620;
  *((_WORD *)this + 32) = 1;
  *((unsigned char *)this + 66) = 0;
}

void XcapCBCondition::XcapCBCondition(XcapCBCondition *this, const XcapCBCondition *a2)
{
  *(void *)this = &unk_1F20C81E8;
  unsigned __int8 v4 = (char *)this + 8;
  unsigned __int8 v6 = 1;
  BOOL v7 = (char *)&v6;
  uint64_t v5 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v6, (uint64_t)&std::piecewise_construct, &v7);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (long long *)"conditions", (long long *)(v5 + 5));
  *(void *)this = &unk_1F20E15A8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E1620;
  *((unsigned char *)this + 64) = 1;
  *(_WORD *)((char *)this + 65) = 0;
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)this + 65) = *((unsigned char *)a2 + 65);
}

uint64_t XcapCBCondition::asString@<X0>(XcapCBCondition *this@<X0>, void *a2@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  memset(v28, 0, sizeof(v28));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  unsigned __int8 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Conditions:[", 12);
  uint64_t v5 = std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCBCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCBCondition::Condition const&>,std::tuple<>>(*((unsigned char *)this + 65), (unsigned char *)this + 65);
  uint64_t v8 = v5[5];
  unsigned __int8 v6 = v5 + 5;
  uint64_t v7 = v8;
  int v9 = *((char *)v6 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)v6;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    uint64_t v11 = v6[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", Media: ", 9);
  unsigned int v14 = *((unsigned __int8 *)this + 66);
  uint64_t v15 = (uint64_t **)&qword_1EBBDC520;
  uint64_t v16 = qword_1EBBDC520;
  if (qword_1EBBDC520)
  {
    while (1)
    {
      while (1)
      {
        __int16 v17 = (uint64_t *)v16;
        unsigned int v18 = *(unsigned __int8 *)(v16 + 32);
        if (v18 <= v14) {
          break;
        }
        uint64_t v16 = *v17;
        uint64_t v15 = (uint64_t **)v17;
        if (!*v17) {
          goto LABEL_15;
        }
      }
      if (v18 >= v14) {
        break;
      }
      uint64_t v16 = v17[1];
      if (!v16)
      {
        uint64_t v15 = (uint64_t **)(v17 + 1);
        goto LABEL_15;
      }
    }
  }
  else
  {
    __int16 v17 = &qword_1EBBDC520;
LABEL_15:
    uint64_t v19 = operator new(0x40uLL);
    v19[32] = v14;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 7) = 0;
    *((void *)v19 + 5) = 0;
    std::__tree<std::__value_type<XcapCBCondition::Media,std::string const>,std::__map_value_compare<XcapCBCondition::Media,std::__value_type<XcapCBCondition::Media,std::string const>,std::less<XcapCBCondition::Media>,true>,std::allocator<std::__value_type<XcapCBCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v17, v15, (uint64_t *)v19);
    __int16 v17 = (uint64_t *)v19;
  }
  uint64_t v22 = v17[5];
  char v21 = v17 + 5;
  uint64_t v20 = v22;
  int v23 = *((char *)v21 + 23);
  if (v23 >= 0) {
    uint64_t v24 = (uint64_t)v21;
  }
  else {
    uint64_t v24 = v20;
  }
  if (v23 >= 0) {
    uint64_t v25 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    uint64_t v25 = v21[1];
  }
  __int16 v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v24, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"], Active: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28 + 8, a2);
  *(void *)&v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(*(void *)&v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v28[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v32);
}

void sub_1C55CD020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XcapCBCondition::parseChild(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  memset(&__n, 0, sizeof(__n));
  XcapNs::stripXcapNs(a2, &__n);
  uint64_t v6 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __n.__r_.__value_.__l.__size_;
  }
  if (v8 != 5)
  {
    if (v8 == 16)
    {
      if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
        if (memcmp(__n.__r_.__value_.__l.__data_, "rule-deactivated", __n.__r_.__value_.__l.__size_)) {
          goto LABEL_24;
        }
      }
      else if (*((unsigned char *)&__n.__r_.__value_.__s + 23))
      {
        p_n = &__n;
        uint64_t v10 = "rule-deactivated";
        while (p_n->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
        {
          p_n = (std::string *)((char *)p_n + 1);
          ++v10;
          if (!--v6) {
            goto LABEL_22;
          }
        }
        goto LABEL_18;
      }
LABEL_22:
      a1[64] = 0;
      goto LABEL_108;
    }
LABEL_18:
    if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      std::string __s1 = __n;
      goto LABEL_25;
    }
    uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
LABEL_24:
    std::string::__init_copy_ctor_external(&__s1, v13, size);
LABEL_25:
    LOBYTE(v63) = 1;
    unsigned int v14 = std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCBCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCBCondition::Condition const&>,std::tuple<>>(1u, &v63);
    char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v17 = *((unsigned __int8 *)v14 + 63);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = v14[6];
    }
    if (v16 != v17) {
      goto LABEL_68;
    }
    uint64_t v21 = v14[5];
    uint64_t v19 = v14 + 5;
    uint64_t v20 = (unsigned __int8 *)v21;
    if (v18 >= 0) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = (uint64_t *)v20;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_68;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v22)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        uint64_t v22 = (uint64_t *)((char *)v22 + 1);
        if (!--v24) {
          goto LABEL_83;
        }
      }
LABEL_68:
      LOBYTE(v63) = 2;
      std::__split_buffer<std::pair<std::string, std::string>> v41 = std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCBCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCBCondition::Condition const&>,std::tuple<>>(2u, &v63);
      char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = *((unsigned __int8 *)v41 + 63);
      int v44 = (char)v43;
      if ((v43 & 0x80u) != 0) {
        uint64_t v43 = v41[6];
      }
      if (v42 == v43)
      {
        uint64_t v47 = v41[5];
        uint64_t v45 = v41 + 5;
        uint64_t v46 = (unsigned __int8 *)v47;
        if (v44 >= 0) {
          std::string::size_type v48 = v45;
        }
        else {
          std::string::size_type v48 = (uint64_t *)v46;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            uint64_t v49 = &__s1;
            uint64_t v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            while (v49->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v48)
            {
              uint64_t v49 = (std::string *)((char *)v49 + 1);
              std::string::size_type v48 = (uint64_t *)((char *)v48 + 1);
              if (!--v50) {
                goto LABEL_100;
              }
            }
            goto LABEL_85;
          }
LABEL_100:
          a1[65] = 2;
          goto LABEL_101;
        }
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v48, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_100;
        }
      }
LABEL_85:
      LOBYTE(v63) = 3;
      unint64_t v52 = std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCBCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCBCondition::Condition const&>,std::tuple<>>(3u, &v63);
      uint64_t v53 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      char v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v54 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v54 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v55 = *((unsigned __int8 *)v52 + 63);
      int v56 = (char)v55;
      if ((v55 & 0x80u) != 0) {
        uint64_t v55 = v52[6];
      }
      if (v54 != v55) {
        goto LABEL_101;
      }
      uint64_t v59 = v52[5];
      char v57 = v52 + 5;
      long long v58 = (unsigned __int8 *)v59;
      if (v56 >= 0) {
        std::string v60 = v57;
      }
      else {
        std::string v60 = (uint64_t *)v58;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v60, __s1.__r_.__value_.__l.__size_))
        {
LABEL_106:
          uint64_t v40 = (void *)__s1.__r_.__value_.__r.__words[0];
          goto LABEL_107;
        }
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        std::string v61 = &__s1;
        while (v61->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v60)
        {
          std::string v61 = (std::string *)((char *)v61 + 1);
          std::string v60 = (uint64_t *)((char *)v60 + 1);
          if (!--v53) {
            goto LABEL_104;
          }
        }
LABEL_101:
        if ((v15 & 0x80) == 0) {
          goto LABEL_108;
        }
        goto LABEL_106;
      }
LABEL_104:
      char v51 = 3;
LABEL_105:
      a1[65] = v51;
      if ((v15 & 0x80) == 0) {
        goto LABEL_108;
      }
      goto LABEL_106;
    }
LABEL_83:
    char v51 = 1;
    goto LABEL_105;
  }
  if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
    if (memcmp(__n.__r_.__value_.__l.__data_, "media", __n.__r_.__value_.__l.__size_)) {
      goto LABEL_24;
    }
  }
  else if (*((unsigned char *)&__n.__r_.__value_.__s + 23))
  {
    uint64_t v11 = &__n;
    uint64_t v12 = "media";
    while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
    {
      uint64_t v11 = (std::string *)((char *)v11 + 1);
      ++v12;
      if (!--v6) {
        goto LABEL_40;
      }
    }
    goto LABEL_18;
  }
LABEL_40:
  int v63 = 0;
  size_t v64 = 0;
  uint64_t v65 = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, a3, &v63);
  uint64_t v25 = &qword_1EBBDC520;
  while (1)
  {
    __int16 v26 = (uint64_t *)*v25;
    if (!*v25) {
      break;
    }
    uint64_t v25 = (uint64_t *)*v25;
    if (!*((unsigned char *)v26 + 32)) {
      goto LABEL_45;
    }
  }
  char v27 = operator new(0x40uLL);
  v27[32] = 0;
  *((void *)v27 + 6) = 0;
  *((void *)v27 + 7) = 0;
  *((void *)v27 + 5) = 0;
  std::__tree<std::__value_type<XcapCBCondition::Media,std::string const>,std::__map_value_compare<XcapCBCondition::Media,std::__value_type<XcapCBCondition::Media,std::string const>,std::less<XcapCBCondition::Media>,true>,std::allocator<std::__value_type<XcapCBCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v25, (uint64_t **)v25, (uint64_t *)v27);
  uint64_t v25 = (uint64_t *)v27;
LABEL_45:
  uint64_t v30 = v25[5];
  __int16 v29 = v25 + 5;
  long long v28 = (uint64_t *)v30;
  int v31 = *((char *)v29 + 23);
  int v32 = SHIBYTE(v65);
  uint64_t v33 = v63;
  if (v65 >= 0) {
    size_t v34 = HIBYTE(v65);
  }
  else {
    size_t v34 = v64;
  }
  if (v65 >= 0) {
    std::string v35 = &v63;
  }
  else {
    std::string v35 = v63;
  }
  if (v31 >= 0) {
    size_t v36 = *((unsigned __int8 *)v29 + 23);
  }
  else {
    size_t v36 = v29[1];
  }
  if (v31 >= 0) {
    int64x2_t v37 = v29;
  }
  else {
    int64x2_t v37 = v28;
  }
  if (v36 >= v34) {
    size_t v38 = v34;
  }
  else {
    size_t v38 = v36;
  }
  if (memcmp(v35, v37, v38) || v36 != v34) {
    a1[66] = 1;
  }
  if (v32 < 0)
  {
    uint64_t v40 = v33;
LABEL_107:
    operator delete(v40);
  }
LABEL_108:
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__n.__r_.__value_.__l.__data_);
  }
}

void sub_1C55CD468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void XcapCBCondition::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C55CD64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::string::size_type v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'XcapCBCondition::constructTree(void *a1@<X8>)
{
}

void XcapCBCondition::~XcapCBCondition(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapCBCondition::~XcapCBCondition(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

uint64_t *std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)_MergedGlobals_26)
  {
    _MergedGlobals_26 = *(void *)_MergedGlobals_26;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDC508, a3);
  ++qword_1EBBDC510;
  return result;
}

uint64_t *std::__tree<std::__value_type<XcapCBCondition::Media,std::string const>,std::__map_value_compare<XcapCBCondition::Media,std::__value_type<XcapCBCondition::Media,std::string const>,std::less<XcapCBCondition::Media>,true>,std::allocator<std::__value_type<XcapCBCondition::Media,std::string const>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_1EBBDC518)
  {
    qword_1EBBDC518 = *(void *)qword_1EBBDC518;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDC520, a3);
  ++qword_1EBBDC528;
  return result;
}

uint64_t *std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCBCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCBCondition::Condition const&>,std::tuple<>>(unsigned __int8 a1, unsigned char *a2)
{
  uint64_t v3 = (uint64_t **)&qword_1EBBDC508;
  uint64_t v4 = qword_1EBBDC508;
  if (qword_1EBBDC508)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t *)v4;
        unsigned int v6 = *(unsigned __int8 *)(v4 + 32);
        if (v6 <= a1) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t v3 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      if (v6 >= a1) {
        break;
      }
      uint64_t v4 = v5[1];
      if (!v4)
      {
        uint64_t v3 = (uint64_t **)(v5 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v5 = &qword_1EBBDC508;
LABEL_9:
    uint64_t v7 = operator new(0x40uLL);
    v7[32] = *a2;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 5) = 0;
    std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__insert_node_at((uint64_t)v5, v3, (uint64_t *)v7);
    return (uint64_t *)v7;
  }
  return v5;
}

uint64_t _GLOBAL__sub_I_XcapCBCondition_cpp()
{
  void v41[3] = *MEMORY[0x1E4F143B8];
  v34[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "unconditional");
  char v36 = 1;
  std::string::basic_string[abi:ne180100]<0>(v37, "roaming");
  char v38 = 2;
  std::string::basic_string[abi:ne180100]<0>(v39, "international");
  char v40 = 3;
  std::string::basic_string[abi:ne180100]<0>(v41, "international-exHC");
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_1EBBDC510 = 0;
  qword_1EBBDC508 = 0;
  uint64_t v2 = &qword_1EBBDC508;
  _MergedGlobals_26 = (uint64_t)&qword_1EBBDC508;
  while (1)
  {
    uint64_t v3 = &v34[32 * v1];
    unsigned int v4 = *v3;
    if (v2 == &qword_1EBBDC508)
    {
      unsigned int v6 = &qword_1EBBDC508;
LABEL_10:
      if (v0)
      {
        int v9 = (uint64_t **)(v6 + 1);
        if (v6[1]) {
          goto LABEL_26;
        }
      }
      else
      {
LABEL_21:
        int v9 = (uint64_t **)&qword_1EBBDC508;
        unsigned int v6 = &qword_1EBBDC508;
      }
LABEL_22:
      uint64_t v12 = (char *)operator new(0x40uLL);
      v12[32] = v4;
      uint64_t v13 = (std::string *)(v12 + 40);
      uint64_t v14 = &v34[32 * v1];
      char v15 = (const std::string::value_type **)(v14 + 8);
      if ((char)v3[31] < 0)
      {
        std::string::__init_copy_ctor_external(v13, *v15, *((void *)v14 + 2));
      }
      else
      {
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v15;
        *((void *)v12 + 7) = *((void *)v14 + 3);
      }
      std::__tree<std::__value_type<XcapCBCondition::Condition,std::string const>,std::__map_value_compare<XcapCBCondition::Condition,std::__value_type<XcapCBCondition::Condition,std::string const>,std::less<XcapCBCondition::Condition>,true>,std::allocator<std::__value_type<XcapCBCondition::Condition,std::string const>>>::__insert_node_at((uint64_t)v6, v9, (uint64_t *)v12);
      goto LABEL_26;
    }
    uint64_t v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        unsigned int v6 = v5;
        uint64_t v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = &qword_1EBBDC508;
      do
      {
        unsigned int v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        uint64_t v7 = v6;
      }
      while (v8);
    }
    if (*((unsigned __int8 *)v6 + 32) < v4) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v10 = v0;
    while (1)
    {
      while (1)
      {
        unsigned int v6 = (uint64_t *)v10;
        unsigned int v11 = *(unsigned __int8 *)(v10 + 32);
        if (v11 <= v4) {
          break;
        }
        uint64_t v10 = *v6;
        int v9 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
      if (v11 >= v4) {
        break;
      }
      uint64_t v10 = v6[1];
      if (!v10)
      {
        int v9 = (uint64_t **)(v6 + 1);
        goto LABEL_22;
      }
    }
LABEL_26:
    if (++v1 == 4) {
      break;
    }
    uint64_t v2 = (uint64_t *)_MergedGlobals_26;
    uint64_t v0 = qword_1EBBDC508;
  }
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v41[i + 2]) < 0) {
      operator delete((void *)v41[i]);
    }
  }
  __cxa_atexit((void (*)(void *))std::map<XcapCBCondition::Condition,std::string const>::~map[abi:ne180100], &_MergedGlobals_26, &dword_1C51D1000);
  v34[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "audio");
  char v36 = 1;
  std::string::basic_string[abi:ne180100]<0>(v37, "video");
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  qword_1EBBDC528 = 0;
  qword_1EBBDC520 = 0;
  uint64_t v19 = &qword_1EBBDC520;
  qword_1EBBDC518 = (uint64_t)&qword_1EBBDC520;
  while (2)
  {
    uint64_t v20 = &v34[32 * v18];
    unsigned int v21 = *v20;
    if (v19 == &qword_1EBBDC520)
    {
      int v23 = &qword_1EBBDC520;
      goto LABEL_41;
    }
    uint64_t v22 = (uint64_t *)v17;
    if (v17)
    {
      do
      {
        int v23 = v22;
        uint64_t v22 = (uint64_t *)v22[1];
      }
      while (v22);
    }
    else
    {
      uint64_t v24 = &qword_1EBBDC520;
      do
      {
        int v23 = (uint64_t *)v24[2];
        BOOL v8 = *v23 == (void)v24;
        uint64_t v24 = v23;
      }
      while (v8);
    }
    if (*((unsigned __int8 *)v23 + 32) >= v21)
    {
      if (v17)
      {
        uint64_t v26 = v17;
        while (1)
        {
          while (1)
          {
            int v23 = (uint64_t *)v26;
            unsigned int v27 = *(unsigned __int8 *)(v26 + 32);
            if (v27 <= v21) {
              break;
            }
            uint64_t v26 = *v23;
            uint64_t v25 = (uint64_t **)v23;
            if (!*v23) {
              goto LABEL_53;
            }
          }
          if (v27 >= v21) {
            goto LABEL_57;
          }
          uint64_t v26 = v23[1];
          if (!v26)
          {
            uint64_t v25 = (uint64_t **)(v23 + 1);
            goto LABEL_53;
          }
        }
      }
LABEL_52:
      uint64_t v25 = (uint64_t **)&qword_1EBBDC520;
      int v23 = &qword_1EBBDC520;
      goto LABEL_53;
    }
LABEL_41:
    if (!v17) {
      goto LABEL_52;
    }
    uint64_t v25 = (uint64_t **)(v23 + 1);
    if (!v23[1])
    {
LABEL_53:
      long long v28 = (char *)operator new(0x40uLL);
      v28[32] = v21;
      __int16 v29 = (std::string *)(v28 + 40);
      uint64_t v30 = &v34[32 * v18];
      int v31 = (const std::string::value_type **)(v30 + 8);
      if ((char)v20[31] < 0)
      {
        std::string::__init_copy_ctor_external(v29, *v31, *((void *)v30 + 2));
      }
      else
      {
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)v31;
        *((void *)v28 + 7) = *((void *)v30 + 3);
      }
      std::__tree<std::__value_type<XcapCBCondition::Media,std::string const>,std::__map_value_compare<XcapCBCondition::Media,std::__value_type<XcapCBCondition::Media,std::string const>,std::less<XcapCBCondition::Media>,true>,std::allocator<std::__value_type<XcapCBCondition::Media,std::string const>>>::__insert_node_at((uint64_t)v23, v25, (uint64_t *)v28);
    }
LABEL_57:
    if (++v18 != 2)
    {
      uint64_t v19 = (uint64_t *)qword_1EBBDC518;
      uint64_t v17 = qword_1EBBDC520;
      continue;
    }
    break;
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    if (SHIBYTE(v37[j + 2]) < 0) {
      operator delete((void *)v37[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<XcapCBCondition::Media,std::string const>::~map[abi:ne180100], &qword_1EBBDC518, &dword_1C51D1000);
}

void sub_1C55CDCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipPAssociatedUriHeader::~SipPAssociatedUriHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPAssociatedUriHeader::clone(SipPAssociatedUriHeader *this)
{
}

void sub_1C55CDEF0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

uint64_t SDPModelBuilder::SDPModelBuilder(uint64_t a1, uint64_t *a2, ImsPrefs *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = &unk_1F20D5210;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  EnableRemoteRTCPDeactivationKey = (void **)ImsPrefs::getEnableRemoteRTCPDeactivationKey((ImsPrefs *)a1);
  *(unsigned char *)(a1 + 24) = ImsPrefs::BOOLValue(a3, EnableRemoteRTCPDeactivationKey);
  return a1;
}

void sub_1C55CDF84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SDPModelBuilder::createSDP(uint64_t *a1@<X0>, const SDPMediaAudioSettings *a2@<X1>, uint64_t a3@<X2>, const SDPMedia **a4@<X3>, unsigned int a5@<W4>, uint64_t **a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>(a1 + 1, a6);
  uint64_t v10 = *a6;
  int v9 = (std::__shared_weak_count *)a6[1];
  char v40 = a6;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v59 = 0;
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(&v59, v10[52], v10[53], 0x8F5C28F5C28F5C29 * ((v10[53] - v10[52]) >> 3));
  char v38 = a2;
  uint64_t v12 = v10[52];
  uint64_t v11 = v10[53];
  if (v11 != v12)
  {
    uint64_t v13 = v11 - 200;
    uint64_t v14 = (void (***)(void))(v11 - 200);
    char v15 = (void (***)(void))(v11 - 200);
    do
    {
      std::string::size_type v16 = *v15;
      v15 -= 25;
      (*v16)(v14);
      v13 -= 200;
      BOOL v17 = v14 == (void (***)(void))v12;
      uint64_t v14 = v15;
    }
    while (!v17);
  }
  v10[53] = v12;
  uint64_t v19 = *a4;
  uint64_t v18 = a4[1];
  if (*a4 != v18)
  {
    do
    {
      uint64_t v20 = v59;
      if (v59 >= v60)
      {
LABEL_12:
        uint64_t v58 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SDPMedia::SDPMedia((SDPMedia *)&v46, v19, (SDPModel *)v10);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        SDPMedia::setPort((SDPMedia *)&v46, 0);
        unint64_t v22 = v10[53];
        if (v22 >= v10[54])
        {
          uint64_t v23 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v10 + 52, (const SDPMedia *)&v46);
        }
        else
        {
          SDPMedia::SDPMedia((SDPMedia *)v10[53], (const SDPMedia *)&v46);
          uint64_t v23 = v22 + 200;
          v10[53] = v22 + 200;
        }
        v10[53] = v23;
      }
      else
      {
        unsigned int v21 = (const SDPMedia *)v59;
        while (*((_DWORD *)v21 + 3) != *((_DWORD *)v19 + 3))
        {
          unsigned int v21 = (const SDPMedia *)((char *)v21 + 200);
          v20 += 200;
          if ((unint64_t)v21 >= v60) {
            goto LABEL_12;
          }
        }
        uint64_t v58 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        SDPMedia::SDPMedia((SDPMedia *)&v46, v21);
        unint64_t v24 = v10[53];
        if (v24 >= v10[54])
        {
          uint64_t v25 = std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v10 + 52, (const SDPMedia *)&v46);
        }
        else
        {
          SDPMedia::SDPMedia((SDPMedia *)v10[53], (const SDPMedia *)&v46);
          uint64_t v25 = v24 + 200;
          v10[53] = v24 + 200;
        }
        v10[53] = v25;
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SDPMedia *,SDPMedia *,SDPMedia *,0>(v20 + 200, v60, v20);
        unint64_t v27 = v26;
        if (v60 != v26)
        {
          unint64_t v28 = v60 - 200;
          __int16 v29 = (void (***)(void))(v60 - 200);
          uint64_t v30 = (void (***)(void))(v60 - 200);
          do
          {
            int v31 = *v30;
            v30 -= 25;
            (*v31)(v29);
            v28 -= 200;
            BOOL v17 = v29 == (void (***)(void))v27;
            __int16 v29 = v30;
          }
          while (!v17);
        }
        unint64_t v60 = v27;
      }
      SDPMedia::~SDPMedia((SDPMedia *)&v46);
      uint64_t v19 = (const SDPMedia *)((char *)v19 + 200);
    }
    while (v19 != v18);
  }
  uint64_t v33 = (const SDPMedia *)v59;
  unint64_t v32 = v60;
  if (v59 != v60)
  {
    size_t v34 = (SDPMedia *)v10[53];
    do
    {
      if ((unint64_t)v34 >= v10[54])
      {
        size_t v34 = (SDPMedia *)std::vector<SDPMedia>::__push_back_slow_path<SDPMedia const&>(v10 + 52, v33);
      }
      else
      {
        SDPMedia::SDPMedia(v34, v33);
        size_t v34 = (SDPMedia *)((char *)v34 + 200);
        v10[53] = (uint64_t)v34;
      }
      v10[53] = (uint64_t)v34;
      uint64_t v33 = (const SDPMedia *)((char *)v33 + 200);
    }
    while (v33 != (const SDPMedia *)v32);
  }
  *(void *)&long long v46 = &v59;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::string v35 = (std::__shared_weak_count *)v40[1];
  int v44 = *v40;
  uint64_t v45 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v42, v38);
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v41, a3);
  (*(void (**)(uint64_t *, uint64_t **, void **, unsigned char *, void))(*a1 + 16))(a1, &v44, v42, v41, a5);
  if (v41[296]) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v41);
  }
  if (v43) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v42);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
}

void sub_1C55CE360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,void *a52)
{
  if (a51) {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&a14);
  }
  if (LOBYTE(STACK[0x308])) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings(&a52);
  }
  if (STACK[0x318]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x318]);
  }
  long long v53 = *(std::__shared_weak_count **)(a13 + 8);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(a1);
}

uint64_t SDPModelBuilder::getResponseDirection(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  switch((int)a2)
  {
    case 0:
      return v3;
    case 1:
      if (a3) {
        uint64_t v3 = 3;
      }
      else {
        uint64_t v3 = 1;
      }
      break;
    case 2:
      uint64_t v3 = 3;
      break;
    case 3:
      if (a3) {
        uint64_t v3 = 4;
      }
      else {
        uint64_t v3 = 2;
      }
      break;
    case 4:
      uint64_t v3 = 4;
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v8, "sdp");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::error((uint64_t)v8, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Got an impossible media direction: ", 35);
      *(unsigned char *)(v4 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (v9 < 0) {
        operator delete(v8[0]);
      }
      uint64_t v3 = 1;
      break;
  }
  return v3;
}

void sub_1C55CE570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPModelBuilder::setBandwidthSpecifiers(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  for (uint64_t i = *(void *)(a3 + 120); i != a3 + 112; uint64_t i = *(void *)(i + 8))
  {
    int v6 = *(_DWORD *)(i + 28);
    if (v6 == 4)
    {
      *(void *)(i + 40) = a5;
      if (*(unsigned char *)(result + 24) && *(unsigned char *)(a4 + 32))
      {
        uint64_t v7 = *(void *)(a4 + 56);
        goto LABEL_11;
      }
    }
    else if (v6 == 3)
    {
      *(void *)(i + 40) = a5;
      if (*(unsigned char *)(result + 24) && *(unsigned char *)(a4 + 33))
      {
        uint64_t v7 = *(void *)(a4 + 64);
LABEL_11:
        *(unsigned char *)(i + 32) = v7 != 0;
        continue;
      }
    }
    else
    {
      *(void *)(i + 40) = a5;
    }
  }
  uint64_t v8 = *(void *)a2 + 296;
  for (uint64_t j = *(void *)(*(void *)a2 + 304); j != v8; uint64_t j = *(void *)(j + 8))
  {
    int v10 = *(_DWORD *)(j + 28);
    if (v10 == 4)
    {
      *(void *)(j + 40) = a5;
      if (*(unsigned char *)(result + 24) && *(unsigned char *)(a4 + 32))
      {
        uint64_t v11 = *(void *)(a4 + 56);
        goto LABEL_24;
      }
    }
    else if (v10 == 3)
    {
      *(void *)(j + 40) = a5;
      if (*(unsigned char *)(result + 24) && *(unsigned char *)(a4 + 33))
      {
        uint64_t v11 = *(void *)(a4 + 64);
LABEL_24:
        *(unsigned char *)(j + 32) = v11 != 0;
        continue;
      }
    }
    else
    {
      *(void *)(j + 40) = a5;
    }
  }
  return result;
}

uint64_t *SipTransportGroup::SipTransportGroup(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(std::__shared_weak_count **)(*a3 + 16);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  if (*(char *)(v9 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v9 + 4160);
  }
  SipTransportInterface::SipTransportInterface((uint64_t)a1, a2 + 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  a1[23] = 0;
  a1[24] = 0;
  uint64_t v10 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 4XcapDocumentCallBarring::~XcapDocumentCallBarring((XcapDocumentCallBarring *)((char *)this - 8)) = a2[5];
  a1[10] = (uint64_t)&unk_1F20E18C8;
  a1[25] = 0;
  a1[26] = 0;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)a1[26];
    a1[25] = v11;
    a1[26] = v12;
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    a1[25] = v11;
    a1[26] = 0;
  }
  return a1;
}

void sub_1C55CE858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTransportGroup::terminationLocksReleased(SipTransportGroup *this)
{
  uint64_t v1 = (char *)this + 80;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"terminating", 11);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

void SipTransportGroup::encodeAndCompressMessageForTransport(uint64_t a1, const std::string *a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *((void *)&v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    long long v7 = 0uLL;
    *(void *)&long long v6 = &unk_1F20CA780;
    uint64_t v8 = 0;
    SipHost::setAddress((uint64_t)&v6, a4);
    (*(void (**)(uint64_t, long long *))(*(void *)a3 + 32))(a3, &v6);
    std::string::operator=((std::string *)(a3 + 104), a2);
    SipHost::~SipHost((SipHost *)&v6);
  }
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6);
}

void sub_1C55CEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipTransportGroup::getTransportName(void *a1, void *a2, std::string *a3)
{
  long long v6 = (std::__shared_weak_count *)a1[26];
  if (v6)
  {
    long long v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = a1[25];
      if (v8)
      {
        BOOL v9 = *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) + 439) != 0;
        goto LABEL_7;
      }
    }
  }
  else
  {
    long long v7 = 0;
  }
  BOOL v9 = 0;
LABEL_7:
  if (*a2)
  {
    uint64_t v11 = a1[10];
    uint64_t v10 = a1 + 10;
    uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 64))(v10);
    (*(void (**)(void *, uint64_t))(*v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"encoding message for existing TCP connection", 44);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = (unsigned char *)(v12 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_11:
    unsigned char *v13 = 0;
    std::string::operator=(a3, &SipTransport::kTransportTCP);
    goto LABEL_12;
  }
  if (v9)
  {
    uint64_t v15 = a1[10];
    uint64_t v14 = a1 + 10;
    uint64_t v16 = (*(uint64_t (**)(void *))(v15 + 64))(v14);
    (*(void (**)(void *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"forcing TCP transport", 21);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v13 = (unsigned char *)(v16 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_11;
  }
  uint64_t v17 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v17 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  if (size == 3)
  {
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, &SipTransport::kTransportTCP, a3->__r_.__value_.__l.__size_)) {
        goto LABEL_12;
      }
    }
    else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
    {
      uint64_t v19 = (char *)&SipTransport::kTransportTCP;
      while (a3->__r_.__value_.__s.__data_[0] == *v19)
      {
        a3 = (std::string *)((char *)a3 + 1);
        ++v19;
        if (!--v17) {
          goto LABEL_28;
        }
      }
      goto LABEL_12;
    }
LABEL_28:
    uint64_t v21 = a1[10];
    uint64_t v20 = a1 + 10;
    uint64_t v22 = (*(uint64_t (**)(void *))(v21 + 64))(v20);
    (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"next hop preferred transport is TCP", 35);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
  }
LABEL_12:
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C55CEE24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTransportGroup::sendMessageViaBestTransport(SipTransportGroup *a1@<X0>, SipMessage *a2@<X1>, void *a3@<X2>, ImsResult *a4@<X8>)
{
  long long v6 = (std::__shared_weak_count *)*((void *)a1 + 26);
  if (!v6)
  {
    BOOL v9 = 0;
    goto LABEL_16;
  }
  BOOL v9 = std::__shared_weak_count::lock(v6);
  if (!v9 || (uint64_t v10 = *((void *)a1 + 25)) == 0)
  {
LABEL_16:
    memset(&v86[1], 0, 48);
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    LODWORD(v86[0]) = 0x40000000;
    uint64_t v17 = (const std::string *)ImsResult::operator<<<char [34]>((uint64_t)__p, "No transport layer to sendMessage");
    ImsResult::ImsResult(a4, v17);
    ImsResult::~ImsResult((ImsResult *)__p);
    if (!v9) {
      return;
    }
    goto LABEL_17;
  }
  (*(void (**)(void, SipMessage *))(*(void *)v10 + 96))(*((void *)a1 + 25), a2);
  (*(void (**)(SipTransportGroup *, SipMessage *))(*(void *)a1 + 152))(a1, a2);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  *((void *)a4 + 7) = 0;
  *((void *)a4 + 8) = 0;
  *((void *)a4 + 5) = 0;
  *((void *)a4 + 6) = 0;
  *(void *)a4 = &unk_1F20B2680;
  *((void *)a4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  *((void *)a4 + 4) = 0;
  if (!(*(unsigned int (**)(SipMessage *))(*(void *)a2 + 96))(a2)) {
    goto LABEL_34;
  }
  uint64_t v11 = (void *)((char *)a1 + 80);
  uint64_t v12 = (*(uint64_t (**)(void *))(*((void *)a1 + 10) + 64))((void *)a1 + 10);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 10) + 16))((void *)a1 + 10, v12);
  (*(void (**)(std::string *__return_ptr, SipMessage *))(*(void *)a2 + 48))(&v77, a2);
  LoggableString::LoggableString((std::string *)__p, &v77);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" message doesn't have a route set.  Adding default route.", 57);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (SHIBYTE(v86[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (const SipUri *)(*(uint64_t (**)(SipTransportGroup *))(*(void *)a1 + 200))(a1);
  if (!v13)
  {
    memset(&v86[1], 0, 48);
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    LODWORD(v86[0]) = 1073741827;
    uint64_t v18 = (const std::string *)ImsResult::operator<<<char [65]>((uint64_t)__p, "unable to add default route: no remote server URI for transport ");
    ImsResult::operator<<<SipTransportGroup>((uint64_t)v18, (uint64_t)a1);
    ImsResult::ImsResult((ImsResult *)&v77, v18);
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_33;
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 26);
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      long long v70 = a3;
      uint64_t v16 = *((void *)a1 + 25);
      if (v16)
      {
        if (*(unsigned char *)((*(uint64_t (**)(void))(*(void *)v16 + 16))(*((void *)a1 + 25)) + 574)) {
          char v75 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 72))(v16);
        }
        else {
          char v75 = 0;
        }
        if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16) + 528))
        {
          uint64_t v107 = 0;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          memset(v86, 0, sizeof(v86));
          *(_OWORD *)std::string __p = 0u;
          SipUri::SipUri((SipUri *)__p, v13);
          std::string::basic_string[abi:ne180100]<0>(&v82, "lr");
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          long long v108 = &v82;
          uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v86[7], &v82, (uint64_t)&std::piecewise_construct, (long long **)&v108);
          std::string::operator=((std::string *)(v20 + 7), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete(v82);
          }
          uint64_t v21 = (*(uint64_t (**)(void *))(*v11 + 64))((void *)a1 + 10);
          (*(void (**)(void *, uint64_t))(*v11 + 16))((void *)a1 + 10, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"adding first route hop ", 23);
          *(unsigned char *)(v21 + 17) = 0;
          (*((void (**)(void **, uint64_t))__p[0] + 5))(__p, v21);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          SipMessage::addRouteHop(a2, (const SipUri *)__p, 0, v75);
        }
        uint64_t v22 = (const SipRouteSet *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
        uint64_t v23 = SipMessage::header<SipRouteHeader>(a2, 1);
        SipRouteSet::addHops((SipHeader *)((char *)v23 + 64), v22, 0, 0, v75);
        long long v78 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v77.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v77.__r_.__value_.__r.__words[2]) = 0;
        a3 = v70;
        goto LABEL_32;
      }
      a3 = v70;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  memset(&v86[1], 0, 48);
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  LODWORD(v86[0]) = 1073741827;
  uint64_t v19 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)__p, "No transport layer ");
  ImsResult::operator<<<SipTransportGroup>((uint64_t)v19, (uint64_t)a1);
  ImsResult::ImsResult((ImsResult *)&v77, v19);
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v15) {
LABEL_32:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_33:
  ImsResult::operator=((uint64_t)a4, (uint64_t)&v77);
  ImsResult::~ImsResult((ImsResult *)&v77);
  if (((*(uint64_t (**)(void, void))(**((void **)a4 + 1) + 24))(*((void *)a4 + 1), *((unsigned int *)a4 + 4)) & 1) == 0)
  {
LABEL_34:
    HopForMessage = (SipHop *)SipTransportGroup::copyNextHopForMessage(a1, a2);
    if (!HopForMessage)
    {
      memset(&v86[1], 0, 48);
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      LODWORD(v86[0]) = 1073741828;
      uint64_t v33 = ImsResult::operator<<<char [39]>((uint64_t)__p, "no next hop found for outgoing message");
      ImsResult::operator=((uint64_t)a4, v33);
      ImsResult::~ImsResult((ImsResult *)__p);
      size_t v34 = (unsigned char *)(*(uint64_t (**)(void *))(*((void *)a1 + 10) + 56))((void *)a1 + 10);
      (*(void (**)(void *, unsigned char *))(*((void *)a1 + 10) + 16))((void *)a1 + 10, v34);
      (*(void (**)(ImsResult *, unsigned char *))(*(void *)a4 + 16))(a4, v34);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v34[17] = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v35 = ims::error((uint64_t)a1 + 88, (uint64_t)__p);
      (*(void (**)(SipMessage *, uint64_t))(*(void *)a2 + 16))(a2, v35);
      if (SHIBYTE(v86[0]) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_17;
    }
    if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) + 437)) {
      SipHop::supportsCompression(HopForMessage);
    }
    long long v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    memset(&__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(__p, "transport");
    uint64_t v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)HopForMessage + 72, __p);
    if ((void **)((char *)HopForMessage + 80) == v25) {
      unint64_t v26 = &ims::kEmptyString;
    }
    else {
      unint64_t v26 = (long long *)(v25 + 7);
    }
    uint64_t v27 = *((unsigned __int8 *)v26 + 23);
    int v28 = (char)v27;
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *((void *)v26 + 1);
    }
    if (v27 == 3)
    {
      if (v28 < 0) {
        unint64_t v26 = *(long long **)v26;
      }
      int v29 = *(unsigned __int16 *)v26;
      int v30 = *((unsigned __int8 *)v26 + 2);
      BOOL v32 = v29 == 25460 && v30 == 112;
    }
    else
    {
      BOOL v32 = 0;
    }
    if (SHIBYTE(v86[0]) < 0)
    {
      operator delete(__p[0]);
      if (!v32) {
        goto LABEL_59;
      }
    }
    else if (!v32)
    {
LABEL_59:
      if (a3)
      {
        char v36 = a3;
        a3 = (void *)*a3;
        int64x2_t v37 = v36;
        char v38 = (std::__shared_weak_count *)v36[1];
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        int64x2_t v37 = 0;
        char v38 = 0;
      }
      if ((*(unsigned int (**)(SipMessage *))(*(void *)a2 + 72))(a2))
      {
        HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 0);
        if (!HeaderWith
          || (char v40 = (uint64_t *)*((void *)HeaderWith + 8), v40 == *((uint64_t **)HeaderWith + 9))
          || (uint64_t v71 = *v40) == 0)
        {
          memset(&v86[1], 0, 48);
          __p[0] = &unk_1F20B2680;
          __p[1] = &_bambiDomain;
          LODWORD(v86[0]) = 1073741828;
          std::__split_buffer<std::pair<std::string, std::string>> v41 = (const std::string *)ImsResult::operator<<<char [34]>((uint64_t)__p, "Message doesn't have a Via header");
          ImsResult::ImsResult((ImsResult *)&v77, v41);
          ImsResult::~ImsResult((ImsResult *)__p);
          goto LABEL_116;
        }
LABEL_103:
        long long v108 = 0;
        uint64_t v109 = 0;
        (*(void (**)(void ***__return_ptr, SipTransportGroup *))(*(void *)a1 + 192))(&v108, a1);
        if (v108)
        {
          __p[0] = a3;
          __p[1] = v38;
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(SipTransportGroup *, void **, std::string *))(*(void *)a1 + 232))(a1, __p, &__str);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (size) {
            SipTransportGroup::encodeAndCompressMessageForTransport((uint64_t)a2, &__str, v71, &v108);
          }
          std::string::operator=(&__str, &SipTransport::kTransportUDP);
          SipTransportGroup::encodeAndCompressMessageForTransport((uint64_t)a2, &SipTransport::kTransportUDP, v71, &v108);
        }
        memset(&v86[1], 0, 48);
        __p[0] = &unk_1F20B2680;
        __p[1] = &_bambiDomain;
        LODWORD(v86[0]) = 1073741826;
        long long v57 = (const std::string *)ImsResult::operator<<<char [29]>((uint64_t)__p, "Missing local server address");
        ImsResult::ImsResult((ImsResult *)&v77, v57);
        ImsResult::~ImsResult((ImsResult *)__p);
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
LABEL_116:
        ImsResult::operator=((uint64_t)a4, (uint64_t)&v77);
        ImsResult::~ImsResult((ImsResult *)&v77);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if ((*(uint64_t (**)(void, void))(**((void **)a4 + 1) + 24))(*((void *)a4 + 1), *((unsigned int *)a4 + 4)))goto LABEL_155; {
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = 0uLL;
        }
        (*(void (**)(void **__return_ptr, SipHop *))(*(void *)HopForMessage + 56))(__p, HopForMessage);
        (*(void (**)(std::string *__return_ptr))(*(void *)__p[0] + 32))(&v77);
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        if (!(*(unsigned int (**)(std::string::size_type))(*(void *)v77.__r_.__value_.__l.__data_ + 56))(v77.__r_.__value_.__r.__words[0]))
        {
          std::string::size_type v58 = v77.__r_.__value_.__r.__words[0];
          uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          (*(void (**)(std::string::size_type, void))(*(void *)v58 + 64))(v58, *(unsigned __int16 *)(v59 + 434));
        }
        uint64_t v60 = qword_1EA3D56A8;
        if (byte_1EA3D56B7 >= 0) {
          uint64_t v60 = byte_1EA3D56B7;
        }
        if (v60) {
          SipRecorder::recordBlob(a2, (uint64_t)&v82, (uint64_t)&__str, 1);
        }
        if ((*(unsigned int (**)(uint64_t, SipMessage *, void))(*(void *)v10 + 32))(v10, a2, 0))
        {
          uint64_t v61 = (*(uint64_t (**)(void *))(*((void *)a1 + 10) + 64))((void *)a1 + 10);
          (*(void (**)(void *, uint64_t))(*((void *)a1 + 10) + 16))((void *)a1 + 10, v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"DROPPING outgoing message to ", 29);
          *(unsigned char *)(v61 + 17) = 0;
          (*(void (**)(std::string::size_type, uint64_t))(*(void *)v77.__r_.__value_.__l.__data_ + 40))(v77.__r_.__value_.__r.__words[0], v61);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v61 + 17) = 0;
          memset(&v86[1], 0, 48);
          __p[0] = &unk_1F20B2680;
          __p[1] = &_bambiDomain;
          LODWORD(v86[0]) = 0;
          ImsResult::operator=((uint64_t)a4, (uint64_t)__p);
        }
        else
        {
          if (v84 >= 0) {
            std::__split_buffer<std::pair<std::string, std::string>> v62 = &v82;
          }
          else {
            std::__split_buffer<std::pair<std::string, std::string>> v62 = v82;
          }
          if (v84 >= 0) {
            uint64_t v63 = HIBYTE(v84);
          }
          else {
            uint64_t v63 = v83;
          }
          (*(void (**)(void **__return_ptr, SipTransportGroup *, void *, uint64_t, std::string *, std::string *, void *))(*(void *)a1 + 128))(__p, a1, v62, v63, &__str, &v77, v37);
          ImsResult::operator=((uint64_t)a4, (uint64_t)__p);
        }
        ImsResult::~ImsResult((ImsResult *)__p);
        if ((*(uint64_t (**)(void, void))(**((void **)a4 + 1) + 24))(*((void *)a4 + 1), *((unsigned int *)a4 + 4)))
        {
LABEL_153:
          if (v77.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
          }
LABEL_155:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v84) < 0) {
            operator delete(v82);
          }
          (*(void (**)(SipHop *))(*(void *)HopForMessage + 8))(HopForMessage);
          goto LABEL_17;
        }
        __p[0] = 0;
        __p[1] = 0;
        if (!v37) {
          goto LABEL_145;
        }
        if (!*v37) {
          goto LABEL_145;
        }
        uint64_t v64 = *(void *)(*v37 + 280);
        if (!v64) {
          goto LABEL_145;
        }
        (*(void (**)(void ***__return_ptr))(*(void *)v64 + 136))(&v108);
        uint64_t v65 = v108;
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
        if (v65)
        {
          uint64_t v66 = *(void *)(*v37 + 280);
          if (!v66)
          {
            long long v67 = 0;
            goto LABEL_150;
          }
          (*(void (**)(void ***__return_ptr))(*(void *)v66 + 136))(&v108);
        }
        else
        {
LABEL_145:
          (*(void (**)(void ***__return_ptr, SipTransportGroup *))(*(void *)a1 + 184))(&v108, a1);
        }
        long long v67 = v108;
        long long v68 = v109;
        if (v109)
        {
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          __p[0] = v67;
          __p[1] = v68;
          if (v109) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          }
          goto LABEL_151;
        }
LABEL_150:
        __p[0] = v67;
        __p[1] = 0;
LABEL_151:
        HIBYTE(v69) = (*(uint64_t (**)(SipTransportGroup *))(*(void *)a1 + 216))(a1);
        LOBYTE(v69) = 0;
        (*(void (**)(uint64_t, SipMessage *, void, void, void, std::string *, void **, std::string *, __int16))(*(void *)v10 + 40))(v10, a2, 0, 0, 0, &__str, __p, &v77, v69);
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        goto LABEL_153;
      }
      char v42 = v76;
      if (a3) {
        char v42 = 1;
      }
      if ((v42 & 1) == 0)
      {
        uint64_t v43 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = __str.__r_.__value_.__l.__size_;
        }
        if (v44 == 3)
        {
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__str.__r_.__value_.__l.__data_, &SipTransport::kTransportTCP, __str.__r_.__value_.__l.__size_)) {
              goto LABEL_102;
            }
          }
          else
          {
            if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
              goto LABEL_102;
            }
            p_str = &__str;
            long long v46 = &SipTransport::kTransportTCP;
            while (p_str->__r_.__value_.__s.__data_[0] == v46->__r_.__value_.__s.__data_[0])
            {
              p_str = (std::string *)((char *)p_str + 1);
              long long v46 = (std::string *)((char *)v46 + 1);
              if (!--v43) {
                goto LABEL_102;
              }
            }
          }
        }
        long long v47 = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 0);
        if (v47)
        {
          long long v48 = (void *)*((void *)v47 + 8);
          if (v48 != *((void **)v47 + 9))
          {
            if (*v48)
            {
              long long v49 = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 0);
              long long v50 = (unsigned __int8 *)(*(uint64_t (**)(void))(***((void ***)v49 + 8) + 24))(**((void **)v49 + 8));
              uint64_t v51 = v50[23];
              uint64_t v52 = (v51 & 0x80u) == 0 ? v50[23] : *((void *)v50 + 1);
              if (v52 == 3)
              {
                if ((v51 & 0x80) == 0)
                {
                  if (v50[23])
                  {
                    long long v53 = &SipTransport::kTransportTCP;
                    while (*v50 == v53->__r_.__value_.__s.__data_[0])
                    {
                      ++v50;
                      long long v53 = (std::string *)((char *)v53 + 1);
                      if (!--v51) {
                        goto LABEL_96;
                      }
                    }
                    goto LABEL_102;
                  }
                  goto LABEL_96;
                }
                if (!memcmp(*(const void **)v50, &SipTransport::kTransportTCP, *((void *)v50 + 1)))
                {
LABEL_96:
                  uint64_t v72 = (*(uint64_t (**)(void))(*((void *)a1 + 10) + 64))();
                  (*(void (**)(void *))(*((void *)a1 + 10) + 16))((void *)a1 + 10);
                  uint64_t v73 = ImsOutStream::operator<<(v72, "don't have a connection, but ");
                  long long v54 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
                  if (v54) {
                    long long v55 = (const std::string *)(v54 + 64);
                  }
                  else {
                    long long v55 = (const std::string *)&ims::kEmptyString;
                  }
                  LoggableString::LoggableString((std::string *)__p, v55);
                  (*(void (**)(uint64_t, void **))(*(void *)v73 + 40))(v73, __p);
                  long long v74 = (unsigned char *)ImsOutStream::operator<<(v73, " response needs to go over TCP");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v74[17] = 0;
                  if (SHIBYTE(v86[0]) < 0) {
                    operator delete(__p[0]);
                  }
                  std::string::operator=(&__str, &SipTransport::kTransportTCP);
                }
              }
            }
          }
        }
      }
LABEL_102:
      uint64_t v71 = 0;
      goto LABEL_103;
    }
    std::string::operator=(&__str, &SipTransport::kTransportTCP);
    goto LABEL_59;
  }
LABEL_17:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C55D0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  ImsResult::~ImsResult(v44);
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  _Unwind_Resume(a1);
}

void sub_1C55D08F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  ImsResult::~ImsResult((ImsResult *)&a29);
  if (!v29) {
    JUMPOUT(0x1C55D08F0);
  }
  JUMPOUT(0x1C55D08E8);
}

uint64_t SipTransportGroup::copyNextHopForMessage(SipTransportGroup *this, const SipMessage *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const SipMessage *))(*(void *)a2 + 64))(a2);
  uint64_t v5 = (*(uint64_t (**)(SipTransportGroup *))(*(void *)this + 200))(this);
  uint64_t v6 = v5;
  if (!v4)
  {
    if (v5)
    {
      long long v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 16);
      goto LABEL_8;
    }
    return 0;
  }
  if (v5
  {
    uint64_t v11 = *((void *)this + 10);
    uint64_t v10 = (char *)this + 80;
    uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 32))(v10);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"replacing host ", 15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + 8) + 8))(v4 + 8, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" in top Route hop with P-CSCF ", 30);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v6 + 8);
    return v9;
  }
  long long v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 16);
  uint64_t v5 = v4;
LABEL_8:
  return v7(v5);
}

void SipTransportGroup::addAccessNetworkInfoHeader(SipTransportGroup *this, SipMessage *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_18:
    uint64_t v15 = *((void *)this + 10);
    uint64_t v14 = (char *)this + 80;
    uint64_t v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(void *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No transport layer. Unable to set ANI", 37);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    goto LABEL_19;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = (void *)*((void *)this + 25);
  if (!v6) {
    goto LABEL_18;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(*v6 + 16))(*((void *)this + 25));
  if (!a2) {
    goto LABEL_34;
  }
  if (!*(unsigned char *)(v7 + 572)) {
    goto LABEL_34;
  }
  if (!v8) {
    goto LABEL_34;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v8 + 112))(v8);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 != 3)
  {
LABEL_23:
    uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v9 + 112))(v9);
    uint64_t v18 = v17[23];
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = v17[23];
    }
    else {
      uint64_t v19 = *((void *)v17 + 1);
    }
    if (v19 == 6)
    {
      if ((v18 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v17, "CANCEL", *((void *)v17 + 1))) {
          goto LABEL_19;
        }
      }
      else
      {
        if (!v17[23]) {
          goto LABEL_19;
        }
        uint64_t v20 = "CANCEL";
        while (*v17 == *(unsigned __int8 *)v20)
        {
          ++v17;
          ++v20;
          if (!--v18) {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_34:
    SipMessage::removeHeadersWithName(a2, "P-Access-Network-Info");
    SipMessage::removeHeadersWithName(a2, SipHeader::kHeaderPLastAccessNetworkInfo);
    SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)SipHeader::kHeaderPCellularNetworkInfo);
    uint64_t v82 = 0;
    long long v81 = 0u;
    memset(v80, 0, sizeof(v80));
    uint64_t v21 = (*(uint64_t (**)(void *))(*v6 + 80))(v6);
    uint64_t v22 = v21;
    if (*(char *)(v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)v21, *(void *)(v21 + 8));
    }
    else
    {
      long long v23 = *(_OWORD *)v21;
      v80[0].__r_.__value_.__r.__words[2] = *(void *)(v21 + 16);
      *(_OWORD *)&v80[0].__r_.__value_.__l.__data_ = v23;
    }
    if (*(char *)(v22 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v80[1], *(const std::string::value_type **)(v22 + 24), *(void *)(v22 + 32));
    }
    else
    {
      long long v24 = *(_OWORD *)(v22 + 24);
      v80[1].__r_.__value_.__r.__words[2] = *(void *)(v22 + 40);
      *(_OWORD *)&v80[1].__r_.__value_.__l.__data_ = v24;
    }
    long long v25 = *(_OWORD *)(v22 + 48);
    LOBYTE(v82) = *(unsigned char *)(v22 + 64);
    long long v81 = v25;
    uint64_t v27 = *((void *)this + 10);
    unint64_t v26 = (char *)this + 80;
    uint64_t v28 = (*(uint64_t (**)(char *))(v27 + 64))(v26);
    (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Reported ANI: ", 14);
    *(unsigned char *)(v28 + 17) = 0;
    LoggableString::LoggableString(&__p, v80);
    (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 40))(v28, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    if (!*(unsigned char *)((*(uint64_t (**)(void *))(*v6 + 104))(v6) + 456)
      && *(unsigned char *)((*(uint64_t (**)(void *))(*v6 + 104))(v6) + 985))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*v6 + 88))(v6);
      uint64_t v41 = *(unsigned __int8 *)(v40 + 95);
      if ((v41 & 0x80u) != 0) {
        uint64_t v41 = *(void *)(v40 + 80);
      }
      if (v41)
      {
        uint64_t v42 = *(unsigned __int8 *)(v40 + 119);
        if ((v42 & 0x80u) != 0) {
          uint64_t v42 = *(void *)(v40 + 104);
        }
        if (v42)
        {
          uint64_t v43 = (*(uint64_t (**)(void *))(*v6 + 88))(v6);
          std::string::operator=(v80, (const std::string *)(v43 + 72));
          std::string::operator=(&v80[1], (const std::string *)(v43 + 96));
          LOBYTE(v82) = *(unsigned char *)(v43 + 136);
          long long v81 = *(_OWORD *)(v43 + 120);
          uint64_t v44 = (*(uint64_t (**)(char *))(*(void *)v26 + 64))(v26);
          (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Using camped ANI:", 17);
          *(unsigned char *)(v44 + 17) = 0;
          LoggableString::LoggableString(&v78, v80);
          (*(void (**)(uint64_t, std::string *))(*(void *)v44 + 40))(v44, &v78);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v44 + 17) = 0;
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
          if (*(unsigned char *)((*(uint64_t (**)(void *))(*v6 + 104))(v6) + 986))
          {
            uint64_t v45 = (SipUserAgentConfig *)(*(uint64_t (**)(void *))(*v6 + 104))(v6);
            if (SipUserAgentConfig::countryOfOriginationAllowedInPANI(v45))
            {
              uint64_t v46 = (*(uint64_t (**)(char *))(*(void *)v26 + 64))(v26);
              (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v46);
              long long v47 = (unsigned char *)ImsOutStream::operator<<(v46, "Set country of origination with camped PANI");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v47[17] = 0;
              long long v48 = (const std::string *)(*(uint64_t (**)(void *))(*v6 + 152))(v6);
              std::string::operator=(&__p, v48);
            }
          }
        }
      }
    }
    uint64_t v29 = (SipUserAgentConfig *)(*(uint64_t (**)(void *))(*v6 + 104))(v6);
    if (SipUserAgentConfig::countryOfOriginationAllowedInPANI(v29)
      && ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80))
    {
      uint64_t v30 = (*(uint64_t (**)(char *))(*(void *)v26 + 64))(v26);
      (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Set country of origination for wifi calls", 41);
      *(unsigned char *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v30 + 17) = 0;
      int v31 = (const std::string *)(*(uint64_t (**)(void *))(*v6 + 152))(v6);
      std::string::operator=(&__p, v31);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
        uint64_t v33 = (*(uint64_t (**)(char *))(*(void *)v26 + 48))(v26);
        (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Country of origination is empty", 31);
        *(unsigned char *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v33 + 17) = 0;
      }
    }
    std::string::size_type v34 = HIBYTE(v80[0].__r_.__value_.__r.__words[2]);
    if ((v80[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v34 = v80[0].__r_.__value_.__l.__size_;
    }
    if (v34)
    {
      std::string::size_type v35 = HIBYTE(v80[1].__r_.__value_.__r.__words[2]);
      if ((v80[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v35 = v80[1].__r_.__value_.__l.__size_;
      }
      if (v35)
      {
        char v36 = (void *)(*(uint64_t (**)(void *))(*v6 + 112))(v6);
        int64x2_t v37 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(v36, (uint64_t)"P-Access-Network-Info");
        if (v37
        {
          uint64_t v39 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v38 + 32))(v38);
        }
        else
        {
          uint64_t v39 = 0;
        }
        uint64_t v49 = (*(uint64_t (**)(void *))(*v6 + 104))(v6);
        if (SipPAccessNetworkInfoHeader::setAccessNetworkInfo((uint64_t)v39, v80, (uint64_t)&__p, *(unsigned __int8 *)(v49 + 913)))
        {
          SipMessage::addHeader(a2, v39, 0);
        }
        else
        {
          uint64_t v50 = (*(uint64_t (**)(char *))(*(void *)v26 + 56))(v26);
          (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"invalid access network info ", 28);
          *(unsigned char *)(v50 + 17) = 0;
          uint64_t v51 = (unsigned char *)ims::operator<<(v50, (uint64_t)v80);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v51[17] = 0;
        }
      }
    }
    if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v80))
    {
      uint64_t v52 = (*(uint64_t (**)(void *))(*v6 + 88))(v6);
      uint64_t v53 = (*(uint64_t (**)(void *))(*v6 + 168))(v6);
      long long v54 = (std::string *)(v52 + 144);
      uint64_t v55 = *(unsigned __int8 *)(v52 + 167);
      if ((v55 & 0x80u) != 0) {
        uint64_t v55 = *(void *)(v52 + 152);
      }
      if (!v55) {
        goto LABEL_81;
      }
      uint64_t v56 = *(unsigned __int8 *)(v52 + 191);
      if ((v56 & 0x80u) != 0) {
        uint64_t v56 = *(void *)(v52 + 176);
      }
      if (!v56)
      {
LABEL_81:
        uint64_t v57 = (*(uint64_t (**)(char *))(*(void *)v26 + 64))(v26);
        (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"invalid last cellular access network info ", 42);
        *(unsigned char *)(v57 + 17) = 0;
        std::string::size_type v58 = (unsigned char *)ims::operator<<(v57, (uint64_t)v54);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v58[17] = 0;
      }
      if (*(unsigned char *)((*(uint64_t (**)(void *))(*v6 + 16))(v6) + 529))
      {
        uint64_t v59 = (void *)(*(uint64_t (**)(void *))(*v6 + 112))(v6);
        uint64_t v60 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(v59, (uint64_t)SipHeader::kHeaderPLastAccessNetworkInfo);
        if (v60
        {
          std::__split_buffer<std::pair<std::string, std::string>> v62 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v61 + 32))(v61);
        }
        else
        {
          std::__split_buffer<std::pair<std::string, std::string>> v62 = 0;
        }
        if (SipPLastAccessNetworkInfoHeader::setAccessNetworkInfo(v62, v54, v53))
        {
          SipMessage::addHeader(a2, v62, 0);
        }
        else
        {
          uint64_t v63 = (*(uint64_t (**)(char *))(*(void *)v26 + 56))(v26);
          (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v63);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)"unable to set P-LANI to ", 24);
          *(unsigned char *)(v63 + 17) = 0;
          uint64_t v64 = (unsigned char *)ims::operator<<(v63, (uint64_t)v54);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v64[17] = 0;
          if (v62) {
            (*(void (**)(SipHeader *))(*(void *)v62 + 8))(v62);
          }
        }
      }
      uint64_t v65 = (ImsPrefs *)(*(uint64_t (**)(void *))(*v6 + 184))(v6);
      AllowPCNIInAirplaneModeKey = (void **)ImsPrefs::getAllowPCNIInAirplaneModeKey(v65);
      if (ImsPrefs::BOOLValue(v65, AllowPCNIInAirplaneModeKey))
      {
        BOOL v67 = 1;
      }
      else
      {
        long long v68 = (std::__shared_weak_count *)v6[2];
        if (v68 && (__int16 v69 = std::__shared_weak_count::lock(v68)) != 0)
        {
          BOOL v67 = *(_DWORD *)(*(void *)(v6[1] + 136) + 704) != 1;
          std::__shared_weak_count::__release_shared[abi:ne180100](v69);
        }
        else
        {
          BOOL v67 = *(_DWORD *)(MEMORY[0x88] + 704) != 1;
        }
      }
      if (*(unsigned char *)((*(uint64_t (**)(void *))(*v6 + 16))(v6) + 530)) {
        BOOL v70 = v67;
      }
      else {
        BOOL v70 = 0;
      }
      if (v70)
      {
        uint64_t v71 = (void *)(*(uint64_t (**)(void *))(*v6 + 112))(v6);
        uint64_t v72 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(v71, (uint64_t)SipHeader::kHeaderPCellularNetworkInfo);
        if (v72
        {
          long long v74 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v73 + 32))(v73);
        }
        else
        {
          long long v74 = 0;
        }
        uint64_t v75 = (*(uint64_t (**)(void *))(*v6 + 104))(v6);
        if (SipPCellularNetworkInfoHeader::setAccessNetworkInfo(v74, v54, v53, *(unsigned char *)(v75 + 1216)))
        {
          SipMessage::addHeader(a2, v74, 0);
        }
        else
        {
          uint64_t v76 = (*(uint64_t (**)(char *))(*(void *)v26 + 56))(v26);
          (*(void (**)(char *, uint64_t))(*(void *)v26 + 16))(v26, v76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v76 + 8), (uint64_t)"unable to set P-CNI to ", 23);
          *(unsigned char *)(v76 + 17) = 0;
          std::string v77 = (unsigned char *)ims::operator<<(v76, (uint64_t)v54);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v77[17] = 0;
          if (v74) {
            (*(void (**)(SipHeader *))(*(void *)v74 + 8))(v74);
          }
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80[0].__r_.__value_.__l.__data_);
    }
LABEL_19:
    if (!v5) {
      return;
    }
    goto LABEL_20;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, &SipRequest::kMethodAck, *((void *)v10 + 1))) {
      goto LABEL_23;
    }
  }
  else if (v10[23])
  {
    uint64_t v13 = &SipRequest::kMethodAck;
    while (*v10 == *(unsigned __int8 *)v13)
    {
      ++v10;
      uint64_t v13 = (long long *)((char *)v13 + 1);
      if (!--v11) {
        goto LABEL_19;
      }
    }
    goto LABEL_23;
  }
LABEL_20:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C55D1D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ims::AccessNetwork::~AccessNetwork(&a21);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void SipTransportGroup::addRoutableLocalAddressHeader(SipTransportGroup *this, SipMessage *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 25);
      if (v6)
      {
        SipMessage::removeHeadersWithName(a2, "Routable-Local-Address");
        uint64_t v33 = 0;
        long long v32 = 0u;
        *(_OWORD *)uint64_t v30 = 0u;
        memset(__p, 0, sizeof(__p));
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
        uint64_t v8 = v7;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v30, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v9 = *(_OWORD *)v7;
          __p[0] = *(void **)(v7 + 16);
          *(_OWORD *)uint64_t v30 = v9;
        }
        if (*(char *)(v8 + 47) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
        }
        else
        {
          long long v13 = *(_OWORD *)(v8 + 24);
          std::string __p[3] = *(void **)(v8 + 40);
          *(_OWORD *)&__p[1] = v13;
        }
        long long v14 = *(_OWORD *)(v8 + 48);
        LOBYTE(v33) = *(unsigned char *)(v8 + 64);
        long long v32 = v14;
        if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v30))
        {
          if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6) + 456))
          {
            uint64_t v15 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
            AddRoutableLocalAddressHeaderKey = (void **)ImsPrefs::getAddRoutableLocalAddressHeaderKey(v15);
            if (ImsPrefs::BOOLValue(v15, AddRoutableLocalAddressHeaderKey))
            {
              uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
              uint64_t v18 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(v17, (uint64_t)"Routable-Local-Address");
              if (v18
              {
                uint64_t v20 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v19 + 32))(v19);
              }
              else
              {
                uint64_t v20 = 0;
              }
              uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v6);
              int v22 = (*(uint64_t (**)(SipHeader *, uint64_t))(*(void *)v20 + 56))(v20, v21);
              uint64_t v25 = *((void *)this + 10);
              long long v24 = (char *)this + 80;
              uint64_t v23 = v25;
              if (v22)
              {
                uint64_t v26 = (*(uint64_t (**)(char *))(v23 + 64))(v24);
                (*(void (**)(char *, uint64_t))(*(void *)v24 + 16))(v24, v26);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Add RoutableLocalAddress header with value ", 43);
                *(unsigned char *)(v26 + 17) = 0;
                uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v6);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 32))(v26, v27);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v26 + 17) = 0;
                SipMessage::addHeader(a2, v20, 0);
              }
              else
              {
                uint64_t v28 = (*(uint64_t (**)(char *))(v23 + 56))(v24);
                (*(void (**)(char *, uint64_t))(*(void *)v24 + 16))(v24, v28);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Can't add RoutableLocalAddress header. Public IP Address (", 58);
                *(unsigned char *)(v28 + 17) = 0;
                uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160))(v6);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 32))(v28, v29);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)") is invalid.", 13);
                *(unsigned char *)(v28 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v28 + 17) = 0;
                (*(void (**)(SipHeader *))(*(void *)v20 + 8))(v20);
              }
            }
          }
        }
        if (SHIBYTE(__p[3]) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v30[0]);
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v11 = *((void *)this + 10);
  uint64_t v10 = (char *)this + 80;
  uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
  (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"No transport layer. Can't add routableLocalAddress", 50);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v5) {
LABEL_27:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C55D23EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<SipTransportGroup>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, v3);
  return a1;
}

void sub_1C55D24CC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipTransportGroup::sendMessage(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = 0;
  long long v14 = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)(a4 + 64) = 0;
  (*(void (**)(void *, uint64_t, uint64_t *))(*a1 + 120))(a1, a2, &v13);
  if ((*(unsigned int (**)(void, void))(**(void **)(a4 + 8) + 24))(*(void *)(a4 + 8), *(unsigned int *)(a4 + 16)))
  {
    if (!a3) {
      goto LABEL_14;
    }
    uint64_t v7 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_14;
  }
  uint64_t v8 = v13;
  if (!v13)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, a1 + 23);
    long long v10 = v12;
    long long v12 = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v10;
    if (!v11) {
      goto LABEL_14;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (!*((void *)&v12 + 1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  long long v9 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = v9;
  if (v7) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_14:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C55D2614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  ImsResult::~ImsResult(v12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void SipTransportGroup::handleTransportError(SipTransportGroup *this, const ImsResult *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 25);
      if (v7) {
        (*(void (**)(uint64_t, const ImsResult *))(*(void *)v7 + 64))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C55D26D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTransportGroup::addUser(SipTransportGroup *this, SipConnectionUser *a2)
{
  (*(void (**)(void **__return_ptr, SipConnectionUser *))(*(void *)a2 + 16))(__p, a2);
  (*(void (**)(SipTransportGroup *, void **))(*(void *)this + 32))(this, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1C55D277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportGroup::removeUser(SipTransportGroup *this, SipConnectionUser *a2)
{
  (*(void (**)(void **__return_ptr, SipConnectionUser *))(*(void *)a2 + 16))(__p, a2);
  (*(void (**)(SipTransportGroup *, void **))(*(void *)this + 40))(this, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C55D2828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipTransportGroup::toStream(SipTransportGroup *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1C55D28D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportGroup::logPrefix(SipTransportGroup *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C55D2994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransportGroup::logPrefix(SipTransportGroup *this, ImsOutStream *a2)
{
}

double SipTransportGroup::sendPing@<D0>(SipTransportGroup *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(SipTransportGroup *))(*(void *)this + 200))(this);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 48))(&v6);
    (*(void (**)(SipTransportGroup *, const char *, uint64_t, std::string *, uint64_t *, void))(*(void *)this + 128))(this, "\r\n", 2, &SipTransport::kTransportUDP, &v6, 0);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741827;
  }
  return result;
}

void sub_1C55D2ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportGroup::removeConnections(SipTransportGroup *this, int a2, int a3, int a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(SipTcpTransport **__return_ptr))(*(void *)this + 144))(&v7);
  if (v7) {
    SipTcpTransport::removeConnections(v7, a2, a3, a4);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C55D2B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipRecordRouteHeader::~SipRecordRouteHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRecordRouteHeader::clone(SipRecordRouteHeader *this)
{
}

void sub_1C55D2CAC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

std::string *LazuliStringHeader::LazuliStringHeader(std::string *a1, const std::string *a2, const std::string *a3)
{
  char v5 = LazuliHeader::LazuliHeader(a1, a2);
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E19F8;
  v5[2].__r_.__value_.__l.__size_ = 0;
  v5[2].__r_.__value_.__r.__words[2] = 0;
  v5[3].__r_.__value_.__r.__words[0] = 0;
  v5[3].__r_.__value_.__s.__data_[8] = 0;
  std::string::operator=((std::string *)((char *)v5 + 56), a3);
  return a1;
}

void sub_1C55D2D3C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  LazuliHeader::~LazuliHeader((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t LazuliStringHeader::LazuliStringHeader(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20D7EA8;
  uint64_t v4 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)a1 = &unk_1F20E19F8;
  uint64_t v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(unsigned char *)(a1 + 80) = 0;
  return a1;
}

void sub_1C55D2E24(_Unwind_Exception *a1)
{
  LazuliHeader::~LazuliHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t LazuliStringHeader::encodeValue(LazuliStringHeader *this, ImsOutStream *a2)
{
  if (*((unsigned char *)this + 80))
  {
    ObfuscatedString::ObfuscatedString((uint64_t)v4, (const std::string *)((char *)this + 56));
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, v4);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
  else
  {
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 56);
  }
  return 1;
}

void sub_1C55D2F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t LazuliStringHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 56));
  return 1;
}

uint64_t LazuliStringHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  ims::chomp("\r\n\t ", a2, 3, &v5);
  uint64_t v3 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 72) = *((void *)&v5.__r_.__value_.__l + 2);
  return 1;
}

void LazuliStringHeader::~LazuliStringHeader(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

void LazuliStringHeader::clone(LazuliStringHeader *this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x70uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E1A70;
  std::string v5 = v4 + 1;
  LazuliStringHeader::LazuliStringHeader((uint64_t)&v4[1], (uint64_t)this);
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    goto LABEL_5;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C55D3144(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliStringHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E1A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliStringHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E1A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliStringHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipMinSEHeader::~SipMinSEHeader(SipMinSEHeader *this)
{
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipMinSEHeader::clone(SipMinSEHeader *this)
{
}

void sub_1C55D3370(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40C8D300F0);
  _Unwind_Resume(a1);
}

void BambiCallHandler::startCall(ImsLogContainer *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  BambiCall::internalStart(*(BambiCall **)a2, (uint64_t)&v29);
  if ((*(unsigned int (**)(void, void))(**((void **)&v29 + 1) + 24))(*((void *)&v29 + 1), v30))
  {
    BambiCall::handleInitializationFailure(*(BambiCall **)a2);
    uint64_t v6 = ImsLogContainer::logResult(a1, (ImsResult *)&v29);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v6);
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    char v7 = *(BambiCall **)a2;
    uint64_t v8 = *(std::__shared_weak_count **)(*(void *)a2 + 368);
    if (v8)
    {
      long long v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *((void *)v7 + 45);
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        if (v10)
        {
          uint64_t v11 = *(BambiCall **)a2;
          long long v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)a2 + 368));
          uint64_t v13 = *(void *)(*((void *)v11 + 45) + 136);
          long long v14 = *(BambiCall **)a2;
          uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
          v25[0] = v14;
          v25[1] = v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BambiClient::unheldCallsExcludingCall(v13, (uint64_t *)&v26, v25);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
    }
    uint64_t v16 = v26;
    for (uint64_t i = v27; v16 != i; v16 += 2)
    {
      uint64_t v19 = *v16;
      uint64_t v18 = (std::__shared_weak_count *)v16[1];
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = (*(uint64_t (**)(ImsLogContainer *))(*(void *)a1 + 64))(a1);
      (*(void (**)(ImsLogContainer *, uint64_t))(*(void *)a1 + 16))(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"holding call ", 13);
      *(unsigned char *)(v20 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v21, (const std::string *)(v19 + 472));
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 56))(v20, v21);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v24 < 0) {
        operator delete(__p);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      BambiCall::performLocalHoldFromHandler((BambiCall *)v19);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    v21[0] = &v26;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  }
  ImsResult::~ImsResult((ImsResult *)&v29);
}

void sub_1C55D3664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  std::string v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  va_copy((va_list)v5, va1);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ImsResult::~ImsResult((ImsResult *)va2);
  _Unwind_Resume(a1);
}

void BambiCallHandler::performLocalHold(uint64_t a1, BambiCall **a2)
{
  if (*a2) {
    BambiCall::performLocalHoldFromHandler(*a2);
  }
}

void BambiCallHandler::performLocalResume(uint64_t a1, BambiCall **a2)
{
  if (*a2) {
    BambiCall::performLocalResumeFromHandler(*a2);
  }
}

unsigned char *BambiCallHandler::performPrepare(uint64_t a1, unsigned char **a2)
{
  double result = *a2;
  if (*a2)
  {
    if (!result[465]) {
      return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 112))();
    }
  }
  return result;
}

uint64_t BambiCallHandler::answerCall@<X0>(BambiCall **a1@<X1>, uint64_t a2@<X8>)
{
  return BambiCall::answerFromHandler(*a1, a2);
}

void *BambiCallHandler::logPrefix(BambiCallHandler *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"CallHandler: ", 13);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t BambiCallHandler::isStrict(BambiCallHandler *this)
{
  return 0;
}

uint64_t SDPParser::parseEVSDTX(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 1)
  {
    if (v3 >= 0) {
      uint64_t v4 = (unsigned char *)a2;
    }
    else {
      uint64_t v4 = *(unsigned char **)a2;
    }
    BOOL v5 = *v4 != 48;
  }
  else
  {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 42) = v5;
  return 1;
}

uint64_t SDPParser::parseEVSDTXRecv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 1)
  {
    if (v3 >= 0) {
      uint64_t v4 = (unsigned char *)a2;
    }
    else {
      uint64_t v4 = *(unsigned char **)a2;
    }
    BOOL v5 = *v4 != 48;
  }
  else
  {
    BOOL v5 = 1;
  }
  *(unsigned char *)(a1 + 43) = v5;
  return 1;
}

uint64_t SDPParser::parseEVSHeaderFullOnly(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(unsigned char *)(a1 + 44) = strtoul(__str, 0, 10);
  return 1;
}

uint64_t SDPParser::parseEVSModeSwitch(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(unsigned char *)(a1 + 45) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 46) = 1;
  return 1;
}

uint64_t SDPParser::parseEVSMaxRed(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 48) = strtoul(__str, 0, 10);
  return 1;
}

uint64_t SDPParser::parseBitrate(const std::string *a1)
{
  memset(&__p, 0, sizeof(__p));
  memset(&v12, 0, sizeof(v12));
  std::string::size_type v2 = std::string::find(a1, 45, 0);
  if (v2 == -1)
  {
    uint64_t v4 = std::string::operator=(&v12, a1);
    std::string::operator=(&__p, v4);
  }
  else
  {
    std::string::size_type v3 = v2;
    std::string::basic_string(&v14, a1, 0, v2, (std::allocator<char> *)v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v14;
    std::string::basic_string(&v14, a1, v3 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v10);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    std::string v12 = v14;
  }
  if (std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::find<std::string>((void **)&__p.__r_.__value_.__l.__data_) == &qword_1EBBDB3F0
    || std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::find<std::string>((void **)&v12.__r_.__value_.__l.__data_) == &qword_1EBBDB3F0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    uint64_t v8 = ims::error((uint64_t)&v14, (uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unknown bitrate range: ", 23);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"-", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    goto LABEL_18;
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  unint64_t v5 = std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((void **)&v12.__r_.__value_.__l.__data_, (long long **)&v14)[7];
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v6 = std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((void **)&__p.__r_.__value_.__l.__data_, (long long **)&v14)[7];
  if (v6 > v5)
  {
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  do
  {
    v7 |= v6;
    v6 *= 2;
  }
  while (v6 <= v5);
LABEL_19:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C55D3B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseEVSBr(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = SDPParser::parseBitrate(a2);
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 109) = 0;
    SDPMediaFormatEVSParams::updateConfigName(a1);
  }
  return v4 != 0;
}

BOOL SDPParser::parseEVSBrSend(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = SDPParser::parseBitrate(a2);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    *(unsigned char *)(a1 + 109) = 0;
  }
  return v3 != 0;
}

BOOL SDPParser::parseEVSBrRecv(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = SDPParser::parseBitrate(a2);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    *(unsigned char *)(a1 + 109) = 0;
  }
  return v3 != 0;
}

BOOL SDPParser::parseEVSBw(uint64_t a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::find<std::string>(a2);
  if (v4 == &qword_1EBBDB408)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Uknown bandwidth setting: ", 26);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    int v5 = 7;
  }
  else
  {
    v10[0] = a2;
    int v5 = *((_DWORD *)std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (long long **)v10)+ 14);
  }
  *(_DWORD *)(a1 + 84) = v5;
  *(unsigned char *)(a1 + 109) = 0;
  SDPMediaFormatEVSParams::updateConfigName(a1);
  return v4 != &qword_1EBBDB408;
}

void sub_1C55D3DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseEVSBwSend(uint64_t a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::find<std::string>(a2);
  if (v4 == &qword_1EBBDB408)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Uknown bandwidth setting: ", 26);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    *(_DWORD *)(a1 + 84) = 7;
    *(unsigned char *)(a1 + 109) = 0;
    SDPMediaFormatEVSParams::updateConfigName(a1);
  }
  else
  {
    v9[0] = a2;
    *(_DWORD *)(a1 + 88) = *((_DWORD *)std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (long long **)v9)+ 14);
    *(unsigned char *)(a1 + 109) = 0;
  }
  return v4 != &qword_1EBBDB408;
}

void sub_1C55D3F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseEVSBwRecv(uint64_t a1, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::find<std::string>(a2);
  if (v4 == &qword_1EBBDB408)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Uknown bandwidth setting: ", 26);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    *(_DWORD *)(a1 + 84) = 7;
    *(unsigned char *)(a1 + 109) = 0;
    SDPMediaFormatEVSParams::updateConfigName(a1);
  }
  else
  {
    v9[0] = a2;
    *(_DWORD *)(a1 + 92) = *((_DWORD *)std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (long long **)v9)+ 14);
    *(unsigned char *)(a1 + 109) = 0;
  }
  return v4 != &qword_1EBBDB408;
}

void sub_1C55D412C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseEVSChSend(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v4 = *(const char **)a2;
  }
  unsigned __int8 v5 = strtoul(v4, 0, 10);
  uint64_t v6 = v5;
  if (v5)
  {
    *(unsigned char *)(a1 + 96) = v5;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::error((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Bad channel setting: ", 21);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  return v6 != 0;
}

void sub_1C55D4298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPParser::parseEVSChRecv(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v4 = *(const char **)a2;
  }
  unsigned __int8 v5 = strtoul(v4, 0, 10);
  uint64_t v6 = v5;
  if (v5)
  {
    *(unsigned char *)(a1 + 97) = v5;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "sdp.evs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::error((uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Bad channel setting: ", 21);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  return v6 != 0;
}

void sub_1C55D4404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseEVSCmr(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(unsigned char *)(a1 + 98) = strtol(__str, 0, 10);
  return 1;
}

uint64_t SDPParser::parseEVSChAwRecv(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(unsigned char *)(a1 + 99) = strtol(__str, 0, 10);
  return 1;
}

uint64_t SDPParser::parseEVSModeSet(uint64_t a1, const std::string *a2)
{
  int v3 = SDPMediaFormatAMRParams::modesetFromString(a2);
  if (v3) {
    __int16 v4 = v3;
  }
  else {
    __int16 v4 = 511;
  }
  *(_WORD *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 110) = 0;
  return 1;
}

uint64_t SDPParser::parseEVSModeChangePeriod(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 102) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 107) = 1;
  return 1;
}

uint64_t SDPParser::parseEVSModeChangeNeighbor(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 104) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 108) = 1;
  return 1;
}

uint64_t SDPParser::parseEVSModeChangeCapability(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 100) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 106) = 1;
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::find<std::string>(void **a1)
{
  uint64_t v1 = qword_1EBBDB3F0;
  if (!qword_1EBBDB3F0) {
    return &qword_1EBBDB3F0;
  }
  int v3 = &qword_1EBBDB3F0;
  do
  {
    char v4 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v1 + 32), a1);
    if (v4 >= 0) {
      unsigned __int8 v5 = (uint64_t *)v1;
    }
    else {
      unsigned __int8 v5 = (uint64_t *)(v1 + 8);
    }
    if (v4 >= 0) {
      int v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EBBDB3F0
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)v3 + 4) & 0x80) != 0)
  {
    return &qword_1EBBDB3F0;
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(void **a1, long long **a2)
{
  uint64_t v10 = 0;
  int v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBitrateMap, &v10, a1);
  char v4 = *v3;
  if (!*v3)
  {
    unsigned __int8 v5 = v3;
    uint64_t v6 = *a2;
    char v4 = (uint64_t *)operator new(0x40uLL);
    uint64_t v7 = (std::string *)(v4 + 4);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v8 = *v6;
      void v4[6] = *((void *)v6 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    v4[7] = 0;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBitrateMap, v10, v5, v4);
  }
  return v4;
}

void sub_1C55D4738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v10, v9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::find<std::string>(void **a1)
{
  uint64_t v1 = qword_1EBBDB408;
  if (!qword_1EBBDB408) {
    return &qword_1EBBDB408;
  }
  int v3 = &qword_1EBBDB408;
  do
  {
    char v4 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v1 + 32), a1);
    if (v4 >= 0) {
      unsigned __int8 v5 = (uint64_t *)v1;
    }
    else {
      unsigned __int8 v5 = (uint64_t *)(v1 + 8);
    }
    if (v4 >= 0) {
      int v3 = (uint64_t *)v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EBBDB408
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)v3 + 4) & 0x80) != 0)
  {
    return &qword_1EBBDB408;
  }
  return v3;
}

char *std::__tree<std::__value_type<std::string,EVSBandwidthTypes>,std::__map_value_compare<std::string,std::__value_type<std::string,EVSBandwidthTypes>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EVSBandwidthTypes>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(void **a1, long long **a2)
{
  uint64_t v10 = 0;
  int v3 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&SDPParser::evsBandwidthMap, &v10, a1);
  char v4 = (char *)*v3;
  if (!*v3)
  {
    unsigned __int8 v5 = (uint64_t **)v3;
    uint64_t v6 = *a2;
    char v4 = (char *)operator new(0x40uLL);
    uint64_t v7 = (std::string *)(v4 + 32);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v8 = *v6;
      *((void *)v4 + 6) = *((void *)v6 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_DWORD *)v4 + 14) = 0;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::evsBandwidthMap, v10, v5, (uint64_t *)v4);
  }
  return v4;
}

void sub_1C55D48A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v10, v9);
  _Unwind_Resume(a1);
}

void SipRSeqHeader::~SipRSeqHeader(void **this)
{
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRSeqHeader::clone(SipRSeqHeader *this)
{
}

void sub_1C55D4970(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C401DA35BB1);
  _Unwind_Resume(a1);
}

uint64_t SipCSeqHeader::encodeValue(SipCSeqHeader *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 64));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C55D4A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipCSeqHeader::setValueFromString(std::string *a1, const std::string *a2)
{
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v4, a2, 8);
  MEMORY[0x1C878DFD0](&v4, (char *)&a1[2].__r_.__value_.__r.__words[1] + 4);
  a1 = (std::string *)((char *)a1 + 64);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v4, (uint64_t)a1);
  ims::chomp(a1, "\r\n\t ", 3);
  *(void *)&long long v4 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v4 + *(void *)(v4 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v5 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v11 + 8);
  return 1;
}

void sub_1C55D4BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipCSeqHeader::~SipCSeqHeader(void **this)
{
  *this = &unk_1F20E1CA8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E1CA8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipCSeqHeader::clone(SipCSeqHeader *this)
{
}

void sub_1C55D4D38(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  SipHeader::~SipHeader((void **)v1);
  MEMORY[0x1C878E320](v1, 0x1093C4055F78521);
  _Unwind_Resume(a1);
}

void SipSubjectHeader::~SipSubjectHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSubjectHeader::clone(SipSubjectHeader *this)
{
}

void sub_1C55D4EB4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

uint64_t LazuliRegistrationPolicy::LazuliRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  int v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  DefaultRegistrationPolicy::DefaultRegistrationPolicy((uint64_t *)a1, (uint64_t *)&off_1F20E2098, v5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = &unk_1F20E1DE0;
  *(void *)(a1 + 104) = &unk_1F20E2040;
  *(void *)(a1 + 184) = &unk_1F20E2088;
  *(unsigned char *)(a1 + 2384) = 0;
  return a1;
}

void sub_1C55D4FC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void LazuliRegistrationPolicy::~LazuliRegistrationPolicy(LazuliRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1F20E2098);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'LazuliRegistrationPolicy::~LazuliRegistrationPolicy(LazuliRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((LazuliRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20E2098);
  JUMPOUT(0x1C878E320);
}

void LazuliRegistrationPolicy::updateConfig(LazuliRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  int v4 = (*(uint64_t (**)(LazuliRegistrationPolicy *))(*(void *)this + 136))(this);
  if (*((unsigned __int8 *)this + 2384) != v4)
  {
    char v5 = v4;
    SipRegistrationPolicy::setProxyOffset(this, 0);
    *((unsigned char *)this + 2384) = v5;
  }
  DefaultRegistrationPolicy::updateConfig(this, a2);
}

void LazuliRegistrationPolicy::currentProxies(LazuliRegistrationPolicy *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::size_type v2 = (SipUri *)*((void *)this + 55);
  for (i = (SipUri *)*((void *)this + 56); v2 != i; std::string::size_type v2 = (SipUri *)((char *)v2 + 480))
    std::deque<SipUri>::push_back((void *)a2, v2);
}

void sub_1C55D5154(_Unwind_Exception *a1)
{
  std::deque<SipUri>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

const char *LazuliRegistrationPolicy::name(LazuliRegistrationPolicy *this)
{
  return "lazuli";
}

void ims::analytics::MessageSendReceiveEvent::create(BOOL a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, BOOL a5@<W4>, BOOL a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v18 = operator new(0x90uLL);
  v18[1] = 0;
  _OWORD v18[2] = 0;
  *uint64_t v18 = &unk_1F20E26D8;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v28 = *(std::string *)a4;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    std::string v27 = *(std::string *)a7;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string __p = *(std::string *)a8;
  }
  _OWORD v18[3] = &unk_1F20E2810;
  std::string::basic_string[abi:ne180100]<0>(&v45, "ims.ca.messagesendreceiveevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v18 + 4), &v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  _OWORD v18[3] = &unk_1F20E2728;
  _OWORD v18[4] = &unk_1F20E2760;
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v20 = v19;
  uint64_t v21 = v18 + 17;
  if (v19)
  {
    *uint64_t v21 = v19;
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    *uint64_t v21 = v20;
    if (!v20)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v20 = 0;
      goto LABEL_19;
    }
  }
  if (MEMORY[0x1C878F160](v20) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v20);
    goto LABEL_20;
  }
  xpc_object_t v22 = xpc_null_create();
LABEL_19:
  *uint64_t v21 = v22;
LABEL_20:
  xpc_release(v20);
  xpc_object_t v43 = xpc_BOOL_create(a1);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"is_success";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_object_t v41 = xpc_int64_create(a2);
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v41, &v42);
  xpc_release(v42);
  xpc_object_t v42 = 0;
  xpc_release(v41);
  xpc_object_t v41 = 0;
  if (a3)
  {
    xpc_object_t v39 = xpc_int64_create(a3);
    if (!v39) {
      xpc_object_t v39 = xpc_null_create();
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v45, &v39, &v40);
    xpc_release(v40);
    xpc_object_t v40 = 0;
    xpc_release(v39);
    xpc_object_t v39 = 0;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v28;
  }
  else {
    uint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v37 = xpc_string_create((const char *)v23);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"direction";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v37, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_object_t v35 = xpc_BOOL_create(a5);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"is_one_to_many";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v35, &v36);
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_object_t v33 = xpc_BOOL_create(a6);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"is_chatbot";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v24 = &v27;
  }
  else {
    char v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v31 = xpc_string_create((const char *)v24);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"transport_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_release(v31);
  xpc_object_t v31 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v29 = xpc_string_create((const char *)p_p);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"security_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_release(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  *a9 = v18 + 3;
  a9[1] = v18;
}

void sub_1C55D5664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E26D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E26D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MessageSendReceiveEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MessageSendReceiveEventImpl::~MessageSendReceiveEventImpl(_anonymous_namespace_::MessageSendReceiveEventImpl *this)
{
  *(void *)this = &unk_1F20E2728;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E2760;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E2728;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E2760;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::MessageSendReceiveEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSendReceiveEventImpl *this@<X0>, void *a2@<X8>)
{
  std::string::size_type v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::MessageSendReceiveEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSPagerMessageSendReceive");
}

void non-virtual thunk to'anonymous namespace'::MessageSendReceiveEventImpl::~MessageSendReceiveEventImpl(_anonymous_namespace_::MessageSendReceiveEventImpl *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E2728;
  *(void *)this = &unk_1F20E2760;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E2728;
  *(void *)this = &unk_1F20E2760;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

uint64_t SDPMediaFormatParams::value@<X0>(SDPMediaFormatParams *this@<X0>, void *a2@<X8>)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  memset(v12, 0, sizeof(v12));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(void **__return_ptr, SDPMediaFormatParams *))(*(void *)this + 48))(&__p, this);
  std::ostream::operator<<();
  uint64_t v4 = HIBYTE(v11);
  if (v11 < 0) {
    uint64_t v4 = v10;
  }
  if (v4)
  {
    char v18 = 32;
    char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v18, 1);
    if (v11 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v11 >= 0) {
      uint64_t v7 = HIBYTE(v11);
    }
    else {
      uint64_t v7 = v10;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v7);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(void *)&v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(*(void *)&v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v12[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v16);
}

void sub_1C55D5D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(SDPMediaFormatAMRParams *this, __int16 a2, int a3)
{
  SDPMediaFormatParams::SDPMediaFormatParams(this, a2);
  *(void *)uint64_t v4 = &unk_1F20E2848;
  *(unsigned char *)(v4 + 42) = a3;
  *(_WORD *)(v4 + 43) = 0;
  *(_WORD *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 50) = 0;
  *(_WORD *)(v4 + 52) = 2;
  *(unsigned char *)(v4 + 54) = 0;
  *(_WORD *)(v4 + 56) = 2;
  *(unsigned char *)(v4 + 58) = 0;
  *(_DWORD *)(v4 + 60) = 0x1000000;
  if (a3) {
    __int16 v5 = 511;
  }
  else {
    __int16 v5 = 255;
  }
  *(_WORD *)(v4 + 46) = v5;
}

uint64_t SDPMediaFormatAMRParams::formatParameters@<X0>(SDPMediaFormatAMRParams *this@<X0>, void *a2@<X8>)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  if (*((unsigned char *)this + 43))
  {
    uint64_t v4 = "octet-align=1";
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v4, 13);
    int v5 = 1;
    goto LABEL_6;
  }
  int v5 = *((unsigned __int8 *)this + 44);
  if (*((unsigned char *)this + 44))
  {
    uint64_t v4 = "octet-align=0";
    goto LABEL_5;
  }
LABEL_6:
  unsigned int v6 = *((unsigned __int16 *)this + 23);
  if (*((_WORD *)this + 23) && !*((unsigned char *)this + 63))
  {
    if (v5)
    {
      char v23 = 59;
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v23, 1);
      char v23 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v23, 1);
      unsigned int v6 = *((unsigned __int16 *)this + 23);
    }
    addModeset(v17, v6);
    if (!*((unsigned char *)this + 50)) {
      goto LABEL_16;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 50)) {
      goto LABEL_17;
    }
    if (!v5) {
      goto LABEL_15;
    }
  }
  char v23 = 59;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v23, 1);
  char v23 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v23, 1);
LABEL_15:
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"max-red", 7);
  char v23 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v23, 1);
  std::ostream::operator<<();
LABEL_16:
  int v5 = 1;
LABEL_17:
  if (*((unsigned char *)this + 54))
  {
    if (v5)
    {
      char v23 = 59;
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v23, 1);
      char v23 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v23, 1);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"mode-change-capability", 22);
    char v23 = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v23, 1);
    std::ostream::operator<<();
    if (!*((unsigned char *)this + 58)) {
      goto LABEL_26;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 58)) {
      goto LABEL_27;
    }
    if (!v5) {
      goto LABEL_25;
    }
  }
  char v23 = 59;
  char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v23, 1);
  char v23 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v23, 1);
LABEL_25:
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"mode-change-period", 18);
  char v23 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v23, 1);
  std::ostream::operator<<();
LABEL_26:
  int v5 = 1;
LABEL_27:
  if (*((unsigned char *)this + 62))
  {
    if (v5)
    {
      char v23 = 59;
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v23, 1);
      char v23 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v23, 1);
    }
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"mode-change-neighbor", 20);
    char v23 = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v23, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, a2);
  *(void *)&v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(*(void *)&v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v17[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v21);
}

void sub_1C55D6164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void addModeset(void *a1, unsigned int a2)
{
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"mode-set", 8);
  LOBYTE(__p) = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  int v5 = 0;
  do
  {
    if (a2)
    {
      if (v12 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v12 >= 0) {
        uint64_t v7 = HIBYTE(v12);
      }
      else {
        uint64_t v7 = v11;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v7);
      std::ostream::operator<<();
      if (SHIBYTE(v12) < 0)
      {
        long long v8 = __p;
        uint64_t v11 = 1;
      }
      else
      {
        HIBYTE(v12) = 1;
        long long v8 = &__p;
      }
      *long long v8 = 44;
    }
    ++v5;
    BOOL v9 = a2 > 1;
    a2 >>= 1;
  }
  while (v9);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_1C55D6270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFormatAMRParams::modesetFromString(const std::string *a1)
{
  __int16 v15 = 0;
  char v14 = 0;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v6, a1, 8);
  int v1 = 0;
  do
  {
    std::string::size_type v2 = (void *)MEMORY[0x1C878DFE0](&v6, &v15);
    if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0) {
      break;
    }
    char v3 = v15;
    uint64_t v4 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(&v6, &v14);
    v1 |= 1 << v3;
    if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
      break;
    }
  }
  while (v14 == 44);
  *(void *)&long long v6 = *MEMORY[0x1E4FBA410];
  *(void *)((char *)&v6 + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v7 = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C878E270]((char *)v13 + 8);
  return (unsigned __int16)v1;
}

void sub_1C55D6464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SDPMediaFormatAMRParams::bandwidthAS(SDPMediaFormatAMRParams *this, int a2)
{
  return SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)*((unsigned __int16 *)this + 23), *((unsigned __int8 *)this + 42), a2, *((unsigned __int8 *)this + 43));
}

uint64_t SDPMediaFormatTTYParams::formatParameters@<X0>(SDPMediaFormatTTYParams *this@<X0>, void *a2@<X8>)
{
  uint64_t v11 = 0;
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  if (*((_DWORD *)this + 11))
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"cps", 3);
    char v12 = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v12, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6 + 8, a2);
  *(void *)&v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v6[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v10);
}

void sub_1C55D661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SDPMediaFormatTTYRedParams::formatParameters@<X0>(SDPMediaFormatTTYRedParams *this@<X0>, void *a2@<X8>)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  if (*((_WORD *)this + 21))
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    char v13 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v13, 1);
    int v5 = (void *)std::ostream::operator<<();
    char v13 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7 + 8, a2);
  *(void *)&v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v7[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v11);
}

void sub_1C55D67CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SDPMediaFormatEVSParams::formatParameters@<X0>(SDPMediaFormatEVSParams *this@<X0>, void *a2@<X8>)
{
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  long long v59 = 0u;
  long long v60 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v57, 0, sizeof(v57));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v57);
  if (!*((unsigned char *)this + 42))
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"dtx", 3);
    LOBYTE(v63) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v63, 1);
    std::ostream::operator<<();
  }
  if (*((unsigned char *)this + 44) == 1)
  {
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"hf-only", 7);
    LOBYTE(v63) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v63, 1);
    std::ostream::operator<<();
    long long v6 = (uint64_t *)((char *)this + 56);
    if (*((void *)this + 7) == 2096640) {
      goto LABEL_58;
    }
    LOBYTE(v63) = 59;
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
    LOBYTE(v63) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v63, 1);
  }
  else
  {
    long long v6 = (uint64_t *)((char *)this + 56);
    if (*((void *)this + 7) == 2096640)
    {
      int v8 = *((_DWORD *)this + 21);
      if (v8 == 6) {
        goto LABEL_81;
      }
      int v9 = 0;
      goto LABEL_60;
    }
  }
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"br", 2);
  LOBYTE(v63) = 61;
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v63, 1);
  uint64_t v12 = *v6;
  memset(&__str, 0, sizeof(__str));
  memset(&v65, 0, sizeof(v65));
  uint64_t v13 = SDPParser::evsBitrateMap;
  if ((uint64_t *)SDPParser::evsBitrateMap != &qword_1EBBDB3F0)
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0x1FFFFFLL;
    do
    {
      long long v63 = 0u;
      long long v64 = 0u;
      if (*(char *)(v13 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v63, *(const std::string::value_type **)(v13 + 32), *(void *)(v13 + 40));
      }
      else
      {
        long long v63 = *(_OWORD *)(v13 + 32);
        *(void *)&long long v64 = *(void *)(v13 + 48);
      }
      unint64_t v16 = *(void *)(v13 + 56);
      *((void *)&v64 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
      if ((v16 & v12) != 0)
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size) {
          BOOL v18 = v16 >= v15;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18)
        {
          if (v16 > v14)
          {
            std::string::operator=(&v65, (const std::string *)&v63);
            unint64_t v14 = *((void *)&v64 + 1);
          }
        }
        else
        {
          std::string::size_type v19 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v19 = v65.__r_.__value_.__l.__size_;
          }
          if (size) {
            BOOL v20 = v19 == 0;
          }
          else {
            BOOL v20 = 0;
          }
          if (v20)
          {
            std::string::operator=(&v65, &__str);
            unint64_t v14 = v15;
          }
          std::string::operator=(&__str, (const std::string *)&v63);
          unint64_t v15 = *((void *)&v64 + 1);
        }
      }
      if (SBYTE7(v64) < 0) {
        operator delete((void *)v63);
      }
      uint64_t v21 = *(uint64_t **)(v13 + 8);
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = *(uint64_t **)(v13 + 16);
          BOOL v20 = *v22 == v13;
          uint64_t v13 = (uint64_t)v22;
        }
        while (!v20);
      }
      uint64_t v13 = (uint64_t)v22;
    }
    while (v22 != &qword_1EBBDB3F0);
    if (v14)
    {
      std::string::append(&__str, 1uLL, 45);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v23 = &v65;
      }
      else {
        char v23 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v65.__r_.__value_.__l.__size_;
      }
      std::string::append(&__str, (const std::string::value_type *)v23, v24);
    }
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_str, v26);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_58:
  int v8 = *((_DWORD *)this + 21);
  if (v8 != 6)
  {
    int v9 = 1;
LABEL_60:
    long long v63 = 0uLL;
    *(void *)&long long v64 = 0;
    switch(v8)
    {
      case 0:
        BYTE7(v64) = 2;
        __int16 v27 = 25198;
        goto LABEL_64;
      case 1:
        BYTE7(v64) = 2;
        __int16 v27 = 25207;
        goto LABEL_64;
      case 2:
        BYTE7(v64) = 5;
        qmemcpy(&v63, "nb-wb", 5);
        if (!v9) {
          goto LABEL_72;
        }
        goto LABEL_71;
      case 3:
        BYTE7(v64) = 3;
        qmemcpy(&v63, "swb", 3);
        if (!v9) {
          goto LABEL_72;
        }
        goto LABEL_71;
      case 4:
        BYTE7(v64) = 6;
        qmemcpy(&v63, "nb-swb", 6);
        if (v9) {
          goto LABEL_71;
        }
        goto LABEL_72;
      default:
        BYTE7(v64) = 2;
        __int16 v27 = 25190;
LABEL_64:
        LOWORD(v63) = v27;
        if (v9)
        {
LABEL_71:
          v65.__r_.__value_.__s.__data_[0] = 59;
          std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v65, 1);
          v65.__r_.__value_.__s.__data_[0] = 32;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v65, 1);
        }
LABEL_72:
        xpc_object_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"bw", 2);
        v65.__r_.__value_.__s.__data_[0] = 61;
        xpc_object_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v65, 1);
        if ((SBYTE7(v64) & 0x80u) == 0) {
          xpc_object_t v31 = &v63;
        }
        else {
          xpc_object_t v31 = (long long *)v63;
        }
        if ((SBYTE7(v64) & 0x80u) == 0) {
          uint64_t v32 = BYTE7(v64);
        }
        else {
          uint64_t v32 = *((void *)&v63 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
        if (SBYTE7(v64) < 0) {
          operator delete((void *)v63);
        }
        break;
    }
  }
  LOBYTE(v63) = 59;
  xpc_object_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
  LOBYTE(v63) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v63, 1);
LABEL_81:
  xpc_object_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"max-red", 7);
  LOBYTE(v63) = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v63, 1);
  std::ostream::operator<<();
  if (*((unsigned char *)this + 98))
  {
    LOBYTE(v63) = 59;
    xpc_object_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
    LOBYTE(v63) = 32;
    xpc_object_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)&v63, 1);
    xpc_object_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"cmr", 3);
    LOBYTE(v63) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)&v63, 1);
    std::ostream::operator<<();
  }
  if (*((unsigned char *)this + 99))
  {
    LOBYTE(v63) = 59;
    char v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
    LOBYTE(v63) = 32;
    xpc_object_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)&v63, 1);
    xpc_object_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"ch-aw-recv", 10);
    LOBYTE(v63) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)&v63, 1);
    std::ostream::operator<<();
  }
  if (*((unsigned char *)this + 45) || *((unsigned char *)this + 46))
  {
    LOBYTE(v63) = 59;
    xpc_object_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
    LOBYTE(v63) = 32;
    xpc_object_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v63, 1);
    xpc_object_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"evs-mode-switch", 15);
    LOBYTE(v63) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v63, 1);
    std::ostream::operator<<();
    if (!*((unsigned char *)this + 110))
    {
      LOBYTE(v63) = 59;
      xpc_object_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
      LOBYTE(v63) = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)&v63, 1);
      addModeset(v57, *((unsigned __int16 *)this + 40));
    }
    if (*((unsigned char *)this + 106))
    {
      LOBYTE(v63) = 59;
      std::string v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
      LOBYTE(v63) = 32;
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v63, 1);
      long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"mode-change-capability", 22);
      LOBYTE(v63) = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v63, 1);
      std::ostream::operator<<();
    }
    if (*((unsigned char *)this + 107))
    {
      LOBYTE(v63) = 59;
      long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
      LOBYTE(v63) = 32;
      uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)&v63, 1);
      uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"mode-change-period", 18);
      LOBYTE(v63) = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)&v63, 1);
      std::ostream::operator<<();
    }
    if (*((unsigned char *)this + 108))
    {
      LOBYTE(v63) = 59;
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
      LOBYTE(v63) = 32;
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)&v63, 1);
      uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"mode-change-neighbor", 20);
      LOBYTE(v63) = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v63, 1);
      std::ostream::operator<<();
    }
  }
  else if (*((_WORD *)this + 40) != 511)
  {
    LOBYTE(v63) = 59;
    uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v63, 1);
    LOBYTE(v63) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)&v63, 1);
    addModeset(v57, *((unsigned __int16 *)this + 40));
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v57 + 8, a2);
  *(void *)&v57[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v57 + *(void *)(*(void *)&v57[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v57[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v61);
}

void sub_1C55D70AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (*(char *)(v16 - 81) < 0) {
    operator delete(*(void **)(v16 - 104));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaFormatEVSParams::updateConfigName(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 84);
  if (v1 == 3)
  {
    uint64_t v3 = *(void *)(this + 56);
    if ((v3 & 0x2000) != 0)
    {
      __int16 v2 = 1;
      goto LABEL_14;
    }
    if ((~(_WORD)v3 & 0x3000) == 0)
    {
      __int16 v2 = 2;
      goto LABEL_14;
    }
    if ((~(_WORD)v3 & 0x9000) == 0)
    {
      __int16 v2 = 4;
      goto LABEL_14;
    }
LABEL_13:
    __int16 v2 = 255;
    goto LABEL_14;
  }
  if (v1 != 4) {
    goto LABEL_13;
  }
  if ((~*(_DWORD *)(this + 56) & 0x2200) != 0)
  {
    if ((~(unsigned __int16)*(void *)(this + 56) & 0x8200) == 0)
    {
      __int16 v2 = 3;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  __int16 v2 = 0;
LABEL_14:
  *(_WORD *)(this + 112) = v2;
  return this;
}

uint64_t SDPMediaFormatEVSParams::bandwidthAS(SDPMediaFormatEVSParams *this, int a2)
{
  return SDPMediaEVSSettings::evsBandwidthASValue(*((void *)this + 7), (SDPMediaAMRSettings *)*((unsigned __int16 *)this + 40), *((unsigned __int8 *)this + 45), a2);
}

void SDPMediaFormatAMRParams::~SDPMediaFormatAMRParams(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

BOOL SDPMediaFormatAMRParams::printable(SDPMediaFormatAMRParams *this)
{
  return !*((unsigned char *)this + 63)
      || *((unsigned char *)this + 44)
      || *((unsigned char *)this + 43)
      || *((unsigned char *)this + 50)
      || *((unsigned char *)this + 54)
      || *((unsigned char *)this + 58)
      || *((unsigned char *)this + 62) != 0;
}

uint64_t SDPMediaFormatAMRParams::isOpenOffer(SDPMediaFormatAMRParams *this)
{
  return *((unsigned __int8 *)this + 63);
}

void SDPMediaFormatEVSParams::~SDPMediaFormatEVSParams(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

BOOL SDPMediaFormatEVSParams::isOpenOffer(SDPMediaFormatEVSParams *this)
{
  return *((unsigned char *)this + 109) && *((unsigned char *)this + 110) != 0;
}

void SDPMediaFormatTTYParams::~SDPMediaFormatTTYParams(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

BOOL SDPMediaFormatTTYParams::printable(SDPMediaFormatTTYParams *this)
{
  return *((_DWORD *)this + 11) != 0;
}

uint64_t SDPMediaFormatTTYParams::bandwidthAS(SDPMediaFormatTTYParams *this)
{
  return *((void *)this + 6);
}

void SDPMediaFormatTTYRedParams::~SDPMediaFormatTTYRedParams(void **this)
{
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t XcapClient::XcapClient(uint64_t a1, long long *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 372) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)a1 = &unk_1F20E2AA0;
  *(void *)(a1 + 376) = &unk_1F20E2B90;
  *(void *)(a1 + 384) = &unk_1F20E2BE0;
  *(void *)(a1 + 392) = a3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 400), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 416) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 400) = v4;
  }
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 520) = a1 + 520;
  *(void *)(a1 + 528) = a1 + 520;
  *(void *)(a1 + 536) = 0;
  std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Creating BambiXcapClient: ", 26);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  return a1;
}

void sub_1C55D7774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)uint64_t v20 = &unk_1F20B88C0;
  XcapConfig::~XcapConfig((void **)(v20 + 16));
  _Unwind_Resume(a1);
}

void XcapClient::~XcapClient(XcapClient *this)
{
  *(void *)this = &unk_1F20E2AA0;
  *((void *)this + 47) = &unk_1F20E2B90;
  *((void *)this + 48) = &unk_1F20E2BE0;
  std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deleting BambiXcapClient: ", 26);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  (*(void (**)(XcapClient *))(*(void *)this + 32))(this);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 65);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  v9[0] = (char *)this + 424;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  *(void *)this = &unk_1F20B88C0;
  XcapConfig::~XcapConfig((void **)this + 2);
}

{
  uint64_t vars8;

  XcapClient::~XcapClient(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapClient::~XcapClient(XcapClient *this)
{
}

{
  uint64_t vars8;

  XcapClient::~XcapClient((XcapClient *)((char *)this - 376));
  JUMPOUT(0x1C878E320);
}

void XcapClient::initialize(XcapClient *this, const XcapConfig *a2)
{
}

void sub_1C55D7DE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XcapClient::deinitialize(XcapClient *this)
{
  uint64_t v2 = *((void *)this + 53);
  for (uint64_t i = *((void *)this + 54); v2 != i; v2 += 16)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Removing ", 9);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" from list of sessions.", 23);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)this + 53);
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Sessions list is empty.", 23);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 65);
  uint64_t result = *((void *)this + 64);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 64) = 0;
  *((unsigned char *)this + 8) = 0;
  return result;
}

void sub_1C55D80C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapClient::setAuthResponse(XcapClient *this, const SipAuthResponse *a2)
{
  uint64_t v2 = *((void *)this + 53);
  if (v2 == *((void *)this + 54))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Failed to fetch client to handle auth response.", 47);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    uint64_t v3 = *(void (**)(void))(**(void **)v2 + 72);
    v3();
  }
}

void sub_1C55D8230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapClient::setGbaNafCredentials(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 424);
  if (v1 == *(void *)(a1 + 432))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Failed to fetch client to handle GBA NAF credentials.", 53);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  else
  {
    uint64_t v2 = *(void (**)(void))(**(void **)v1 + 80);
    v2();
  }
}

void sub_1C55D8394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapClient::fetchAllServices()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v0);
}

void sub_1C55D8498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1C878E320](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN10XcapClient16fetchAllServicesEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  memset(v10, 0, sizeof(v10));
  XcapDocumentSimservs::XcapDocumentSimservs((XcapDocumentSimservs *)v10);
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7); {
  uint64_t v8 = *(void *)(a1 + 32);
  }
  ImsResult::ImsResult((ImsResult *)v9, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  XcapDocumentSimservs::~XcapDocumentSimservs((XcapDocumentSimservs *)v10);
}

void sub_1C55D8598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  XcapDocumentSimservs::~XcapDocumentSimservs((XcapDocumentSimservs *)va1);
  _Unwind_Resume(a1);
}

void XcapClient::_queueRequest(XcapClient *this, XcapRequest *a2)
{
  uint64_t v2 = a2;
  operator new();
}

void sub_1C55D87A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapClient::handleStandardDigestChallenge(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 392) + 16))(*(void *)(a1 + 392), a1 + 400, a2);
}

uint64_t non-virtual thunk to'XcapClient::handleStandardDigestChallenge(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1 + 24, a2);
}

uint64_t XcapClient::handleAkaDigestChallenge(XcapClient *this, const SipAkaAuthChallenge *a2)
{
  return (*(uint64_t (**)(void, char *, const SipAkaAuthChallenge *))(**((void **)this + 49) + 24))(*((void *)this + 49), (char *)this + 400, a2);
}

uint64_t non-virtual thunk to'XcapClient::handleAkaDigestChallenge(XcapClient *this, const SipAkaAuthChallenge *a2)
{
  return (*(uint64_t (**)(void, char *, const SipAkaAuthChallenge *))(**((void **)this + 2) + 24))(*((void *)this + 2), (char *)this + 24, a2);
}

uint64_t XcapClient::fetchKsExtNaf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a1 + 400, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'XcapClient::fetchKsExtNaf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a1 + 24, a2, a3, a4, a5);
}

uint64_t XcapClient::storeAppServerAuthCredentials(XcapClient *this, const SipAuthResponse *a2)
{
  uint64_t v4 = *((void *)this + 64);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const SipAuthResponse *))(*(void *)a2 + 16))(a2);
  *((void *)this + 64) = result;
  return result;
}

uint64_t non-virtual thunk to'XcapClient::storeAppServerAuthCredentials(XcapClient *this, const SipAuthResponse *a2)
{
  return XcapClient::storeAppServerAuthCredentials((XcapClient *)((char *)this - 376), a2);
}

uint64_t XcapClient::operationComplete(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[53];
  uint64_t v5 = (uint64_t *)a1[54];
  if (v4 == v5) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v7 = *v4;
    uint64_t v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (v7 == a2) {
      break;
    }
    v4 += 2;
    if (v4 == v5)
    {
      uint64_t v4 = v5;
      break;
    }
  }
  if (v4 == (uint64_t *)a1[54])
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Session ", 8);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" not found in list of sessions. Current Size: ", 46);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Removing ", 9);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" from list of session. Current Size: ", 37);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uint64_t v9 = v4 + 2;
    uint64_t v10 = (uint64_t *)a1[54];
    if (v4 + 2 != v10)
    {
      do
      {
        long long v11 = *(_OWORD *)v9;
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v12 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v9 += 2;
      }
      while (v9 != v10);
      uint64_t v4 = v9 - 2;
      uint64_t v9 = (uint64_t *)a1[54];
    }
    while (v9 != v4)
    {
      uint64_t v13 = (std::__shared_weak_count *)*(v9 - 1);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      v9 -= 2;
    }
    a1[54] = v4;
  }
  uint64_t v15 = a1[67];
  if (v15)
  {
    uint64_t v16 = (uint64_t *)a1[66];
    uint64_t v17 = *v16;
    *(void *)(v17 + 8) = v16[1];
    *(void *)v16[1] = v17;
    a1[67] = v15 - 1;
    BOOL v18 = (std::__shared_weak_count *)v16[3];
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    operator delete(v16);
  }
  return XcapClient::_processTopRequest((uint64_t)a1);
}

void sub_1C55D8D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapClient::_processTopRequest(uint64_t this)
{
  if (*(void *)(this + 536))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(*(void *)(this + 528) + 24);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(this + 392) + 40))(__p);
    uint64_t v3 = operator new(0x1F0uLL);
    v3[1] = 0;
    _OWORD v3[2] = 0;
    void *v3 = &unk_1F20E2E40;
    XcapSession::XcapSession((uint64_t)(v3 + 3), v1 + 376, (XcapConfig *)(v1 + 16), (long long *)__p);
  }
  return this;
}

void sub_1C55D9558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  XcapUri::~XcapUri((XcapUri *)&a21);
  ims::AccessNetwork::~AccessNetwork(&a32);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'XcapClient::operationComplete(uint64_t a1, uint64_t a2)
{
  return XcapClient::operationComplete((void *)(a1 - 376), a2);
}

void non-virtual thunk to'XcapClient::queueRequest(XcapClient *this, XcapRequest *a2)
{
}

void XcapClient::fetchCallWaiting()
{
}

void XcapClient::setCallWaiting()
{
}

void XcapClient::fetchCallForward(uint64_t a1, unsigned int a2)
{
}

void XcapClient::setCallForward(uint64_t a1, uint64_t a2, int a3, std::string *a4, int a5)
{
}

void XcapClient::activateCallForward(uint64_t a1, uint64_t a2, int a3)
{
}

void XcapClient::fetchOIP()
{
}

void XcapClient::setOIP()
{
}

void XcapClient::fetchOIR()
{
}

void XcapClient::setOIR()
{
}

void XcapClient::fetchCallBarring()
{
}

void XcapClient::setCallBarring(uint64_t a1, int a2, char a3, char a4)
{
}

void XcapClient::activateCallBarring(uint64_t a1, int a2, char a3)
{
}

uint64_t XcapClient::fetchAppServerAuthCredentials(XcapClient *this)
{
  return *((void *)this + 64);
}

uint64_t non-virtual thunk to'XcapClient::fetchAppServerAuthCredentials(XcapClient *this)
{
  return *((void *)this + 17);
}

void std::__shared_ptr_pointer<XcapCallWaitingManager *,std::shared_ptr<XcapCallWaitingManager>::__shared_ptr_default_delete<XcapCallWaitingManager,XcapCallWaitingManager>,std::allocator<XcapCallWaitingManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCallWaitingManager *,std::shared_ptr<XcapCallWaitingManager>::__shared_ptr_default_delete<XcapCallWaitingManager,XcapCallWaitingManager>,std::allocator<XcapCallWaitingManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCallWaitingManager *,std::shared_ptr<XcapCallWaitingManager>::__shared_ptr_default_delete<XcapCallWaitingManager,XcapCallWaitingManager>,std::allocator<XcapCallWaitingManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<XcapCallForwardManager *,std::shared_ptr<XcapCallForwardManager>::__shared_ptr_default_delete<XcapCallForwardManager,XcapCallForwardManager>,std::allocator<XcapCallForwardManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCallForwardManager *,std::shared_ptr<XcapCallForwardManager>::__shared_ptr_default_delete<XcapCallForwardManager,XcapCallForwardManager>,std::allocator<XcapCallForwardManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCallForwardManager *,std::shared_ptr<XcapCallForwardManager>::__shared_ptr_default_delete<XcapCallForwardManager,XcapCallForwardManager>,std::allocator<XcapCallForwardManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<XcapCallerIDManager *,std::shared_ptr<XcapCallerIDManager>::__shared_ptr_default_delete<XcapCallerIDManager,XcapCallerIDManager>,std::allocator<XcapCallerIDManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCallerIDManager *,std::shared_ptr<XcapCallerIDManager>::__shared_ptr_default_delete<XcapCallerIDManager,XcapCallerIDManager>,std::allocator<XcapCallerIDManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCallerIDManager *,std::shared_ptr<XcapCallerIDManager>::__shared_ptr_default_delete<XcapCallerIDManager,XcapCallerIDManager>,std::allocator<XcapCallerIDManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<XcapCallBarringManager *,std::shared_ptr<XcapCallBarringManager>::__shared_ptr_default_delete<XcapCallBarringManager,XcapCallBarringManager>,std::allocator<XcapCallBarringManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCallBarringManager *,std::shared_ptr<XcapCallBarringManager>::__shared_ptr_default_delete<XcapCallBarringManager,XcapCallBarringManager>,std::allocator<XcapCallBarringManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCallBarringManager *,std::shared_ptr<XcapCallBarringManager>::__shared_ptr_default_delete<XcapCallBarringManager,XcapCallBarringManager>,std::allocator<XcapCallBarringManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<XcapSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E2E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E2E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<XcapSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_pointer<XcapRequest *,std::shared_ptr<XcapRequest>::__shared_ptr_default_delete<XcapRequest,XcapRequest>,std::allocator<XcapRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

XcapRequest *std::__shared_ptr_pointer<XcapRequest *,std::shared_ptr<XcapRequest>::__shared_ptr_default_delete<XcapRequest,XcapRequest>,std::allocator<XcapRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(XcapRequest **)(a1 + 24);
  if (result)
  {
    XcapRequest::~XcapRequest(result);
    JUMPOUT(0x1C878E320);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapRequest *,std::shared_ptr<XcapRequest>::__shared_ptr_default_delete<XcapRequest,XcapRequest>,std::allocator<XcapRequest>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

XcapRequest *std::unique_ptr<XcapRequest>::reset[abi:ne180100](XcapRequest **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    XcapRequest::~XcapRequest(result);
    JUMPOUT(0x1C878E320);
  }
  return result;
}

void LazuliDelegate::~LazuliDelegate(LazuliDelegate *this)
{
  *(void *)this = &unk_1F20E2F08;
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<std::string,DelegateInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateInfo>>>::destroy(*((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E2F08;
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<std::string,DelegateInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateInfo>>>::destroy(*((void **)this + 2));
  JUMPOUT(0x1C878E320);
}

void LazuliDelegate::addLazuliDelegate(uint64_t a1, uint64_t a2, NSObject **a3, uint64_t a4)
{
  uint64_t v8 = (void **)(a1 + 8);
  uint64_t v9 = (char **)(a1 + 16);
  if ((void **)(a1 + 16) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, (void **)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "laz.client");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v10 = ims::debug((uint64_t)&v20, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Replacing lazuli delegate for ", 30);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  long long v11 = *a3;
  std::string __p = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v13 = *(NSObject **)a4;
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 8);
  std::string::size_type v24 = v13;
  uint64_t v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  std::string __p = 0;
  object[0] = v11;
  object[1] = v13;
  uint64_t v22 = v12;
  std::string::size_type v24 = 0;
  uint64_t v25 = 0;
  uint64_t v14 = *v9;
  if (!*v9)
  {
    uint64_t v15 = (char **)(a1 + 16);
LABEL_21:
    uint64_t v17 = (char *)operator new(0x50uLL);
    *(std::string *)(v17 + 32) = v20;
    memset(&v20, 0, sizeof(v20));
    long long v18 = *(_OWORD *)object;
    object[0] = 0;
    *(_OWORD *)(v17 + 56) = v18;
    *((void *)v17 + 9) = v22;
    object[1] = 0;
    uint64_t v22 = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
    *((void *)v17 + 2) = v15;
    *uint64_t v9 = v17;
    std::string::size_type v19 = (void *)**v8;
    if (v19)
    {
      *uint64_t v8 = v19;
      uint64_t v17 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), (uint64_t *)v17);
    ++*(void *)(a1 + 24);
    goto LABEL_24;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v15 = (char **)v14;
      uint64_t v16 = v14 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, (void **)v14 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v14 = *v15;
      uint64_t v9 = v15;
      if (!*v15) {
        goto LABEL_21;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (void **)&v20.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
    uint64_t v9 = v15 + 1;
    }
    uint64_t v14 = v15[1];
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (!*v9) {
    goto LABEL_21;
  }
LABEL_24:
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p) {
    dispatch_release((dispatch_object_t)__p);
  }
  LazuliDelegate::garbageCollectExpired((LazuliDelegate *)a1);
}

void sub_1C55D9EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void DelegateInfo::~DelegateInfo(DelegateInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void LazuliDelegate::garbageCollectExpired(LazuliDelegate *this)
{
  uint64_t v2 = (uint64_t **)((char *)this + 32);
  uint64_t v3 = (uint64_t *)*((void *)this + 4);
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  if (v3 != (uint64_t *)((char *)this + 40))
  {
    do
    {
      uint64_t v5 = v3[8];
      if (!v5 || *(void *)(v5 + 8) == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(v19, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v9 = ims::debug((uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Removing expired chat ", 22);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, v3 + 4);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v2, v3);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v3 + 4));
        operator delete(v3);
      }
      else
      {
        uint64_t v6 = (uint64_t *)v3[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (uint64_t *)v3[2];
            BOOL v8 = *v7 == (void)v3;
            uint64_t v3 = v7;
          }
          while (!v8);
        }
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = (uint64_t **)((char *)this + 8);
  long long v11 = v12;
  if (v12 != (uint64_t *)(v10 + 1))
  {
    do
    {
      uint64_t v13 = v11[9];
      if (!v13 || *(void *)(v13 + 8) == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(v19, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v16 = ims::debug((uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Removing expired delegate ", 26);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 32))(v16, v11 + 4);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        uint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v10, v11);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateInfo>,0>((uint64_t)(v11 + 4));
        operator delete(v11);
      }
      else
      {
        uint64_t v14 = (uint64_t *)v11[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (uint64_t *)v11[2];
            BOOL v8 = *v15 == (void)v11;
            long long v11 = v15;
          }
          while (!v8);
        }
      }
      long long v11 = v15;
    }
    while (v15 != (uint64_t *)(v10 + 1));
  }
}

void sub_1C55DA290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliDelegate::removeLazuliDelegate(LazuliDelegate *a1, void **a2)
{
  uint64_t v3 = (uint64_t **)((char *)a1 + 8);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1 + 8, a2);
  if ((uint64_t *)((char *)a1 + 16) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateInfo>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
  LazuliDelegate::garbageCollectExpired(a1);
}

void LazuliDelegate::addChat(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return;
  }
  BOOL v8 = (long long *)a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 32), (void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[8];
  v4[7] = v6;
  v4[8] = v5;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LazuliDelegate::handleIncomingChat(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate18handleIncomingChatENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_58;
      v16[4] = v8;
      uint64_t v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      uint64_t v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DA56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate18handleIncomingChatENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleIncomingChat_block_invoke", 31);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 16))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DA788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

xpc_object_t __copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c44_ZTSNSt3__110shared_ptrIN3ims6lazuli4ChatEEE72c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[8];
  a1[7] = a2[7];
  a1[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[9];
  a1[9] = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  a1[9] = result;
  return result;
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c44_ZTSNSt3__110shared_ptrIN3ims6lazuli4ChatEEE72c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LazuliDelegate::handleMessageReceivedWithCompletion(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 16);
  if (v4 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v9 = v4[7];
      if (v9) {
        dispatch_retain((dispatch_object_t)v4[7]);
      }
      uint64_t v10 = v4[8];
      uint64_t v11 = (std::__shared_weak_count *)v4[9];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN14LazuliDelegate35handleMessageReceivedWithCompletionENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictENS0_8functionIFvvEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_9_4;
      block[4] = v10;
      uint64_t v19 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *a2;
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      char v20 = v4 + 4;
      uint64_t v21 = v13;
      uint64_t v22 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *a3;
      xpc_object_t object = v14;
      if (v14) {
        xpc_retain(v14);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, a4);
      if (v9) {
        dispatch_async(v9, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v24);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      char v15 = (void *)v4[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          char v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v4[2];
          BOOL v17 = *v16 == (void)v4;
          uint64_t v4 = v16;
        }
        while (!v17);
      }
      uint64_t v4 = v16;
    }
    while (v16 != v5);
  }
}

void sub_1C55DAAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, xpc_object_t object)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v20);
  xpc_release(object);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v21)
    {
LABEL_5:
      if (!v19) {
LABEL_10:
      }
        _Unwind_Resume(a1);
LABEL_9:
      dispatch_release(v19);
      goto LABEL_10;
    }
  }
  else if (!v21)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v21);
  if (!v19) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN14LazuliDelegate35handleMessageReceivedWithCompletionENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictENS0_8functionIFvvEEE_block_invoke(void *a1)
{
  _OWORD v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v15, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMessageReceivedWithCompletion_block_invoke", 48);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v11 = a1[7];
        uint64_t v12 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 24))(v5, &v11, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        uint64_t v9 = sImsDispatchQueue;
        if (!sImsDispatchQueue)
        {
          uint64_t v9 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
          sImsDispatchQueue = (uint64_t)v9;
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZN14LazuliDelegate35handleMessageReceivedWithCompletionENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictENS0_8functionIFvvEEE_block_invoke_2;
        block[3] = &__block_descriptor_tmp_8_1;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a1 + 10));
        dispatch_async(v9, block);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v18);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LazuliDelegate35handleMessageReceivedWithCompletionENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictENS0_8functionIFvvEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c44_ZTSNSt3__110shared_ptrIN3ims6lazuli4ChatEEE72c15_ZTSN3xpc4dictE80c27_ZTSNSt3__18functionIFvvEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a2[9];
  a1[9] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    a1[9] = xpc_null_create();
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

void sub_1C55DAF48(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c44_ZTSNSt3__110shared_ptrIN3ims6lazuli4ChatEEE72c15_ZTSN3xpc4dictE80c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 80));
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LazuliDelegate::handleMessageSend(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate17handleMessageSendENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_12_1;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      uint64_t v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DB184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate17handleMessageSendENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMessageSend_block_invoke", 30);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 32))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleSessionReady(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate18handleSessionReadyENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_15_1;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DB5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate18handleSessionReadyENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleSessionReady_block_invoke", 31);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 40))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DB7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleSessionTerminated(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate23handleSessionTerminatedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_18_6;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DB9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate23handleSessionTerminatedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleSessionTerminated_block_invoke", 36);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 48))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DBBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleSessionEvent(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate18handleSessionEventENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_21_4;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DBE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate18handleSessionEventENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleSessionEvent_block_invoke", 31);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 56))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DC024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleGroupChatUpdate(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate21handleGroupChatUpdateENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_24_3;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DC234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate21handleGroupChatUpdateENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleGroupChatUpdate_block_invoke", 34);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 72))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DC450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleLeaveGroupChat(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate20handleLeaveGroupChatENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_27_0;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DC660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate20handleLeaveGroupChatENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleLeaveGroupChat_block_invoke", 33);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 112))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DC87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleGroupChatCreated(uint64_t a1, uint64_t a2, void **a3)
{
  if (!*(void *)a2) {
    goto LABEL_16;
  }
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&v31[1], 0, 24);
  v30[0] = a3;
  v30[1] = "kConferenceFocus";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v30, v31);
  std::string __p = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v31[0]);
  if (SHIBYTE(v31[3]) < 0)
  {
    if (!v31[2])
    {
LABEL_12:
      if (SHIBYTE(v31[3]) < 0) {
        operator delete(v31[1]);
      }
      goto LABEL_14;
    }
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v31[1], (std::string::size_type)v31[2]);
LABEL_10:
    (**v7)(v7, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    goto LABEL_12;
  }
  if (HIBYTE(v31[3]))
  {
    std::string v26 = *(std::string *)&v31[1];
    goto LABEL_10;
  }
LABEL_14:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
LABEL_16:
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = (void *)(a1 + 16);
  if (v9 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v11 = v9[7];
      if (v11) {
        dispatch_retain((dispatch_object_t)v9[7]);
      }
      uint64_t v12 = v9[8];
      char v13 = (std::__shared_weak_count *)v9[9];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 1174405120;
      void v20[2] = ___ZN14LazuliDelegate22handleGroupChatCreatedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      void v20[3] = &__block_descriptor_tmp_30_2;
      void v20[4] = v12;
      uint64_t v21 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v15 = *(const void **)a2;
      char v14 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v22 = v9 + 4;
      char v23 = v15;
      std::string::size_type v24 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v16 = *a3;
      xpc_object_t object = v16;
      if (v16)
      {
        xpc_retain(v16);
        if (!v11) {
          goto LABEL_29;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v11)
        {
LABEL_29:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v20);
          goto LABEL_30;
        }
      }
      dispatch_async(v11, v20);
LABEL_30:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v21) {
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v11) {
        dispatch_release(v11);
      }
      BOOL v17 = (void *)v9[1];
      if (v17)
      {
        do
        {
          char v18 = v17;
          BOOL v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          char v18 = (void *)v9[2];
          BOOL v19 = *v18 == (void)v9;
          uint64_t v9 = v18;
        }
        while (!v19);
      }
      uint64_t v9 = v18;
    }
    while (v18 != v10);
  }
}

void sub_1C55DCBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14LazuliDelegate22handleGroupChatCreatedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleGroupChatCreated_block_invoke", 35);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 104))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DCE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleParticipantAdded(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate22handleParticipantAddedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_33_2;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DD068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate22handleParticipantAddedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleParticipantAdded_block_invoke", 35);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 80))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DD284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleParticipantRemoved(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v7) {
        dispatch_retain((dispatch_object_t)v3[7]);
      }
      uint64_t v8 = v3[8];
      uint64_t v9 = (std::__shared_weak_count *)v3[9];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      v16[2] = ___ZN14LazuliDelegate24handleParticipantRemovedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke;
      v16[3] = &__block_descriptor_tmp_36_4;
      v16[4] = v8;
      BOOL v17 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      char v18 = v3 + 4;
      uint64_t v19 = v11;
      char v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (!v7) {
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v7)
        {
LABEL_14:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
          goto LABEL_15;
        }
      }
      dispatch_async(v7, v16);
LABEL_15:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      char v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1C55DD494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, xpc_object_t object)
{
  xpc_release(object);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate24handleParticipantRemovedENSt3__110shared_ptrIN3ims6lazuli4ChatEEEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v14, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleParticipantRemoved_block_invoke", 37);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        uint64_t v10 = a1[7];
        uint64_t v11 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (void *)a1[9];
        xpc_object_t object = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v5 + 88))(v5, &v10, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55DD6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleIncomingChat(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "IncomingChat");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 16))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1C55DD874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::getChat(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    uint64_t v9 = (uint64_t **)(a2 + 32);
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 32, (void **)a3);
    if ((void **)(a2 + 40) != v10)
    {
      char v11 = (uint64_t *)v10;
      uint64_t v12 = (std::__shared_weak_count *)v10[8];
      if (v12 && (char v13 = std::__shared_weak_count::lock(v12)) != 0)
      {
        uint64_t v14 = v11[7];
        *a1 = v14;
        a1[1] = (uint64_t)v13;
        if (v14) {
          return;
        }
      }
      else
      {
        *a1 = 0;
        a1[1] = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v21, "laz.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v16 = ims::debug((uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"conversationId ", 15);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 32))(v16, a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" expired", 8);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v9, v11);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v11 + 4));
      BOOL v17 = v11;
      goto LABEL_21;
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "laz.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Conversation not found for ", 27);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" conversationId ", 16);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "laz.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::error((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"conversationId is empty for ", 28);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0)
  {
    BOOL v17 = (uint64_t *)v21[0];
LABEL_21:
    operator delete(v17);
  }
}

void sub_1C55DDC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LazuliDelegate::handleMessageReceivedWithCompletion(LazuliDelegate *a1, void **a2, uint64_t a3)
{
  _OWORD v21[4] = *MEMORY[0x1E4F143B8];
  LazuliDelegate::garbageCollectExpired(a1);
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  v17[0] = a2;
  v17[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &object);
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  std::string::basic_string[abi:ne180100]<0>(v12, "MessageReceived");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v19, (uint64_t)v12);
  uint64_t v7 = __p;
  uint64_t v6 = v15;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  uint64_t v10 = v7;
  char v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a2;
  xpc_object_t v9 = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v21, a3);
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *, void *))(*(void *)a1 + 128))(a1, &v10, &v9, v21);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C55DDEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,xpc_object_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LazuliDelegate::handleMessageSend(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "MessageSend");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v8 = v5;
  xpc_object_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 32))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DE0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleSessionReady(LazuliDelegate *a1, std::string::size_type a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v8.__r_.__value_.__r.__words[0] = a2;
  v8.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v8, object);
  memset(&v9, 0, sizeof(v9));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  xpc_release(object[0]);
  std::string::basic_string[abi:ne180100]<0>(&v9, "laz.client");
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  uint64_t v3 = ims::error((uint64_t)&v9, (uint64_t)&v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"empty conversation ID; unable to match incoming",
    47);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v4);
  }
}

void sub_1C55DECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,xpc_object_t a34,xpc_object_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v46);
  if (a42 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v44 - 152));
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  xpc_release(object);
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleSessionTerminated(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  v19[0] = a2;
  v19[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v19, object);
  uint64_t v25 = 0;
  std::string v26 = 0;
  uint64_t v27 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v27) < 0) {
    operator delete(v25);
  }
  xpc_release(object[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "SessionTerminated");
  LazuliDelegate::getChat((uint64_t *)&v25, (uint64_t)a1, (uint64_t)v28, (uint64_t)__p);
  uint64_t v5 = v25;
  uint64_t v4 = (std::__shared_weak_count *)v26;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v25 = a2;
  std::string v26 = "kUserEvictedFromGroup";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v25, v19);
  int v6 = xpc::dyn_cast_or_default();
  xpc_release(v19[0]);
  if (v5) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v7 == 1
  {
    std::string v9 = v8;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = 0;
    std::string v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void ***__return_ptr, void *))(*(void *)v8 + 8))(&v25, v8);
    uint64_t v10 = (const char *)HIBYTE(v27);
    char v11 = HIBYTE(v27);
    if (v27 < 0) {
      uint64_t v10 = v26;
    }
    if (v10)
    {
      (*(void (**)(xpc_object_t *__return_ptr, void *))(*(void *)v9 + 8))(v19, v9);
      if (v20 >= 0) {
        uint64_t v12 = v19;
      }
      else {
        uint64_t v12 = (xpc_object_t *)v19[0];
      }
      xpc_object_t v21 = xpc_string_create((const char *)v12);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      object[0] = a2;
      object[1] = "kConferenceFocus";
      xpc::dict::object_proxy::operator=((uint64_t)object, &v21, &v22);
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      char v11 = HIBYTE(v27);
    }
    if (v11 < 0)
    {
      operator delete(v25);
      if (v4) {
        goto LABEL_25;
      }
    }
    else if (v4)
    {
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      xpc_object_t v16 = v5;
      BOOL v17 = v4;
LABEL_27:
      char v13 = 0;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_31;
    }
    xpc_object_t v16 = v5;
    BOOL v17 = 0;
  }
  else
  {
    xpc_object_t v16 = v5;
    BOOL v17 = v4;
    if (v4) {
      goto LABEL_27;
    }
  }
  char v13 = 1;
LABEL_31:
  uint64_t v14 = *a2;
  xpc_object_t v15 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void ***, xpc_object_t *))(*(void *)a1 + 48))(a1, &v16, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28[0]);
    if (v13) {
      return;
    }
  }
  else if (v13)
  {
    return;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1C55DF2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*(char *)(v26 - 49) < 0) {
    operator delete(*(void **)(v26 - 72));
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void LazuliDelegate::handleSessionEvent(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "SessionEvent");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 56))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DF538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleLeaveGroupChat(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "LeaveGroupChat");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 112))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DF72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleGroupChatUpdate(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "GroupChatUpdate");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 72))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DF920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleGroupChatCreated(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "GroupChatCreated");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 104))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DFB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleParticipantAdded(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "ParticipantAdded");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 80))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DFD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleParticipantRemoved(LazuliDelegate *a1, void **a2)
{
  LazuliDelegate::garbageCollectExpired(a1);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v15[0] = a2;
  v15[1] = "kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v15, &v16);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "ParticipantRemoved");
  LazuliDelegate::getChat((uint64_t *)&__p, (uint64_t)a1, (uint64_t)v17, (uint64_t)v10);
  uint64_t v5 = __p;
  uint64_t v4 = v13;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string v8 = v5;
  std::string v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *a2;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(LazuliDelegate *, void **, xpc_object_t *))(*(void *)a1 + 88))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55DFEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void LazuliDelegate::handleCapabilitiesReceived(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v5 = v2[7];
      if (v5) {
        dispatch_retain((dispatch_object_t)v2[7]);
      }
      uint64_t v6 = v2[8];
      int v7 = (std::__shared_weak_count *)v2[9];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN14LazuliDelegate26handleCapabilitiesReceivedEN3xpc4dictE_block_invoke;
      void v12[3] = &__block_descriptor_tmp_52_1;
      _OWORD v12[4] = v6;
      char v13 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v8 = *a2;
      uint64_t v14 = v2 + 4;
      xpc_object_t object = v8;
      if (v8)
      {
        xpc_retain(v8);
        if (!v5) {
          goto LABEL_12;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v5)
        {
LABEL_12:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v12);
          goto LABEL_13;
        }
      }
      dispatch_async(v5, v12);
LABEL_13:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      std::string v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          std::string v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C55E0114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(object);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate26handleCapabilitiesReceivedEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleCapabilitiesReceived_block_invoke", 39);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        if (v12 < 0) {
          operator delete(v11[0]);
        }
        int v7 = (void *)a1[7];
        xpc_object_t object = v7;
        if (v7) {
          xpc_retain(v7);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v5 + 96))(v5, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55E02FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrIN3ims6lazuli12ChatDelegateEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void LazuliDelegate::handleSpamReportResponse(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v5 = v2[7];
      if (v5) {
        dispatch_retain((dispatch_object_t)v2[7]);
      }
      uint64_t v6 = v2[8];
      int v7 = (std::__shared_weak_count *)v2[9];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN14LazuliDelegate24handleSpamReportResponseEN3xpc4dictE_block_invoke;
      void v12[3] = &__block_descriptor_tmp_55_0;
      _OWORD v12[4] = v6;
      char v13 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v8 = *a2;
      uint64_t v14 = v2 + 4;
      xpc_object_t object = v8;
      if (v8)
      {
        xpc_retain(v8);
        if (!v5) {
          goto LABEL_12;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (!v5)
        {
LABEL_12:
          IMSClientManager::callOnMainQueue((IMSClientManager *)v12);
          goto LABEL_13;
        }
      }
      dispatch_async(v5, v12);
LABEL_13:
      xpc_release(object);
      xpc_object_t object = 0;
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      std::string v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          char v10 = v9;
          std::string v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          char v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C55E0584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(object);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void ___ZN14LazuliDelegate24handleSpamReportResponseEN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "laz.client");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"dispatch ", 9);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleSpamReportResponse_block_invoke", 37);
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, a1[6]);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        if (v12 < 0) {
          operator delete(v11[0]);
        }
        int v7 = (void *)a1[7];
        xpc_object_t object = v7;
        if (v7) {
          xpc_retain(v7);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v5 + 120))(v5, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C55E076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t LazuliDelegate::dumpState(LazuliDelegate *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  LazuliDelegates:", 18);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = (LazuliDelegate *)*((void *)this + 1);
  if (v4 != (LazuliDelegate *)((char *)this + 16))
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, (void *)v4 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 9);
      if (v5)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v5);
        if (v6 && *((void *)v4 + 8))
        {
          std::ostream::operator<<();
          *((unsigned char *)a2 + 17) = 0;
LABEL_8:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"expired", 7);
      *((unsigned char *)a2 + 17) = 0;
      if (v6) {
        goto LABEL_8;
      }
LABEL_9:
      int v7 = (void *)*((void *)a2 + 1);
      char v18 = 41;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v18, 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      std::string v8 = (LazuliDelegate *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          std::string v9 = v8;
          std::string v8 = *(LazuliDelegate **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          std::string v9 = (LazuliDelegate *)*((void *)v4 + 2);
          BOOL v10 = *(void *)v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != (LazuliDelegate *)((char *)this + 16));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Chats:", 6);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  char v12 = (LazuliDelegate *)*((void *)this + 4);
  if (v12 != (LazuliDelegate *)((char *)this + 40))
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, (void *)v12 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      char v13 = (std::__shared_weak_count *)*((void *)v12 + 8);
      if (v13)
      {
        uint64_t v14 = std::__shared_weak_count::lock(v13);
        if (v14 && *((void *)v12 + 7))
        {
          std::ostream::operator<<();
          *((unsigned char *)a2 + 17) = 0;
LABEL_22:
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"expired", 7);
      *((unsigned char *)a2 + 17) = 0;
      if (v14) {
        goto LABEL_22;
      }
LABEL_23:
      xpc_object_t v15 = (void *)*((void *)a2 + 1);
      char v19 = 41;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v19, 1);
      *((unsigned char *)a2 + 17) = 0;
      uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      xpc_object_t v16 = (LazuliDelegate *)*((void *)v12 + 1);
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          xpc_object_t v16 = *(LazuliDelegate **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (LazuliDelegate *)*((void *)v12 + 2);
          BOOL v10 = *(void *)v17 == (void)v12;
          char v12 = v17;
        }
        while (!v10);
      }
      char v12 = v17;
    }
    while (v17 != (LazuliDelegate *)((char *)this + 40));
  }
  return result;
}

void sub_1C55E0B80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,DelegateInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,DelegateInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,DelegateInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateInfo>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    std::string v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  std::string v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C55E0D98(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void std::__shared_ptr_emplace<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper,std::allocator<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E3268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper,std::allocator<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E3268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper,std::allocator<LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliDelegate::getOrCreateChat(std::string &,std::string,xpc::dict)::ClientWrapper::~ClientWrapper(void **a1)
{
  ims::ClientHandle::~ClientHandle(a1);
  JUMPOUT(0x1C878E320);
}

void SipCallIdHeader::~SipCallIdHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipCallIdHeader::clone(SipCallIdHeader *this)
{
}

void sub_1C55E1024(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void IBIResultDomain::~IBIResultDomain(void **this)
{
  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t IBIResultDomain::textForResultCode@<X0>(void *a1@<X8>)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  uint64_t v3 = (const char *)asString();
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7 + 8, a1);
  *(void *)&v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v7[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v11);
}

void sub_1C55E1238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL IBIResultDomain::isError(IBIResultDomain *this, int a2)
{
  return a2 != 0;
}

uint64_t _GLOBAL__sub_I_IBIResultDomain_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "IBI");
  ImsResultDomain::ImsResultDomain((uint64_t)&IBIResultDomain::_domain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  IBIResultDomain::_domain = (uint64_t)&unk_1F20E34F0;
  return __cxa_atexit((void (*)(void *))IBIResultDomain::~IBIResultDomain, &IBIResultDomain::_domain, &dword_1C51D1000);
}

void sub_1C55E1368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentOIP::XcapDocumentOIP(XcapDocumentOIP *this)
{
  unsigned __int8 v3 = 0;
  size_t v4 = (char *)&v3;
  uint64_t v2 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(void *)this = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)&XcapDocumentOIP::kName, v2);
  *((void *)this + 8) = &XcapDocumentOIP::kName;
  *((void *)this + 9) = v2;
  *((unsigned char *)this + 80) = 1;
  *(void *)this = &unk_1F20E3538;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E35D0;
}

uint64_t XcapDocumentOIP::asString@<X0>(XcapDocumentOIP *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"OIP: ", 5);
  if (*((unsigned char *)this + 80)) {
    uint64_t v5 = "Enabled";
  }
  else {
    uint64_t v5 = "Disabled";
  }
  if (*((unsigned char *)this + 80)) {
    uint64_t v6 = 7;
  }
  else {
    uint64_t v6 = 8;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  std::string v8 = std::locale::use_facet(&v16, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v14);
}

void sub_1C55E166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 40));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapDocumentOIP::~XcapDocumentOIP(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void XcapDocumentOIP::clone(XcapDocumentOIP *this)
{
}

void sub_1C55E1834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C878E320](v2, 0x10F3C40F3942DEBLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapDocumentOIP::~XcapDocumentOIP(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_XcapDocumentOIP_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentOIP::kName, "originating-identity-presentation");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &XcapDocumentOIP::kName, &dword_1C51D1000);
}

void *ims::toString<DscpClass>@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  HIDWORD(v5) = *a1;
  LODWORD(v5) = *a1;
  unsigned int v4 = v5 >> 3;
  if (v4 > 0x18) {
    uint64_t v6 = "Unknown";
  }
  else {
    uint64_t v6 = off_1E65120C8[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v6);
}

int *ImsServiceClass::ImsServiceClass(int *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 104;
  char v124 = a1 + 1;
  a1[2] = 0;
  long long v123 = a1 + 2;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  int v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  if (a2)
  {
    ImsDictPref::keysAndValues(a2, &v129, (char **)&v126);
    uint64_t v5 = v129;
    if (v130 != v129)
    {
      for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 3); ++i)
      {
        memset(&v125, 0, sizeof(v125));
        unint64_t v7 = v5 + 24 * i;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v8 = *(_OWORD *)v7;
          v125.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v8;
        }
        std::string::size_type size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        char v10 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v125.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
          int v12 = (char)v11;
          if ((v11 & 0x80u) != 0) {
            uint64_t v11 = *(void *)(a3 + 8);
          }
          if (!v11
            || (v12 >= 0 ? (long long v13 = (const char *)a3) : (long long v13 = *(const char **)a3),
                (v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (uint64_t v14 = &v125)
              : (uint64_t v14 = (std::string *)v125.__r_.__value_.__r.__words[0]),
                !strcasecmp(v13, (const char *)v14)))
          {
            uint64_t v15 = (const void *)*((void *)v126 + i);
            if (v15)
            {
              if (v16)
              {
                uint64_t v138 = 0;
                uint64_t v139 = 0;
                uint64_t v140 = 0;
                uint64_t v135 = 0;
                v136 = 0;
                uint64_t v137 = 0;
                ImsDictPref::keysAndValues((uint64_t)v16, &v138, (char **)&v135);
                uint64_t v17 = v138;
                if (v139 != v138)
                {
                  uint64_t v18 = 0;
                  unint64_t v19 = 0;
                  while (2)
                  {
                    memset(&v134, 0, sizeof(v134));
                    char v20 = (long long *)(v17 + v18);
                    if (*((char *)v20 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v20, *((void *)v20 + 1));
                    }
                    else
                    {
                      long long v21 = *v20;
                      v134.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
                      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v21;
                    }
                    std::string::size_type v22 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
                    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v22 = v134.__r_.__value_.__l.__size_;
                    }
                    if (!v22) {
                      goto LABEL_218;
                    }
                    uint64_t v23 = *((void *)v135 + v19);
                    if (!v23) {
                      __cxa_bad_typeid();
                    }
                    {
                      int v100 = 0;
                      goto LABEL_190;
                    }
                    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v23 + 48))(__p, v23);
                    std::string::basic_string[abi:ne180100]<0>(v141, "CS6");
                    if (v133 >= 0) {
                      char v24 = __p;
                    }
                    else {
                      char v24 = (void **)__p[0];
                    }
                    int v25 = v142;
                    uint64_t v26 = v141[0];
                    if (v142 >= 0) {
                      uint64_t v27 = (const char *)v141;
                    }
                    else {
                      uint64_t v27 = (const char *)v141[0];
                    }
                    int v28 = strcasecmp((const char *)v24, v27);
                    int v29 = v28;
                    if ((v25 & 0x80000000) == 0)
                    {
                      if (v28) {
                        goto LABEL_40;
                      }
LABEL_145:
                      int v100 = 192;
LABEL_188:
                      if (v133 < 0) {
                        operator delete(__p[0]);
                      }
LABEL_190:
                      std::string::basic_string[abi:ne180100]<0>(v141, "Signaling");
                      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        long long v106 = &v134;
                      }
                      else {
                        long long v106 = (std::string *)v134.__r_.__value_.__r.__words[0];
                      }
                      int v107 = v142;
                      long long v108 = v141[0];
                      if (v142 >= 0) {
                        uint64_t v109 = (const char *)v141;
                      }
                      else {
                        uint64_t v109 = (const char *)v141[0];
                      }
                      int v110 = strcasecmp((const char *)v106, v109);
                      if (v107 < 0) {
                        operator delete(v108);
                      }
                      long long v111 = a1;
                      if (!v110) {
                        goto LABEL_217;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v141, "Voice");
                      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v112 = &v134;
                      }
                      else {
                        uint64_t v112 = (std::string *)v134.__r_.__value_.__r.__words[0];
                      }
                      int v113 = v142;
                      uint64_t v114 = v141[0];
                      if (v142 >= 0) {
                        long long v115 = (const char *)v141;
                      }
                      else {
                        long long v115 = (const char *)v141[0];
                      }
                      int v116 = strcasecmp((const char *)v112, v115);
                      if (v113 < 0) {
                        operator delete(v114);
                      }
                      long long v111 = v124;
                      if (!v116) {
                        goto LABEL_217;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v141, "Video");
                      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v117 = &v134;
                      }
                      else {
                        uint64_t v117 = (std::string *)v134.__r_.__value_.__r.__words[0];
                      }
                      int v118 = v142;
                      long long v119 = v141[0];
                      if (v142 >= 0) {
                        long long v120 = (const char *)v141;
                      }
                      else {
                        long long v120 = (const char *)v141[0];
                      }
                      int v121 = strcasecmp((const char *)v117, v120);
                      if (v118 < 0) {
                        operator delete(v119);
                      }
                      long long v111 = v123;
                      if (!v121) {
LABEL_217:
                      }
                        *long long v111 = v100;
LABEL_218:
                      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v134.__r_.__value_.__l.__data_);
                      }
                      ++v19;
                      uint64_t v17 = v138;
                      v18 += 24;
                      if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 3)) {
                        goto LABEL_221;
                      }
                      continue;
                    }
                    break;
                  }
                  operator delete(v26);
                  if (!v29) {
                    goto LABEL_145;
                  }
LABEL_40:
                  std::string::basic_string[abi:ne180100]<0>(v141, "EF");
                  if (v133 >= 0) {
                    xpc_object_t v30 = __p;
                  }
                  else {
                    xpc_object_t v30 = (void **)__p[0];
                  }
                  int v31 = v142;
                  uint64_t v32 = v141[0];
                  if (v142 >= 0) {
                    xpc_object_t v33 = (const char *)v141;
                  }
                  else {
                    xpc_object_t v33 = (const char *)v141[0];
                  }
                  int v34 = strcasecmp((const char *)v30, v33);
                  int v35 = v34;
                  if ((v31 & 0x80000000) == 0)
                  {
                    if (v34) {
                      goto LABEL_48;
                    }
LABEL_147:
                    int v100 = 184;
                    goto LABEL_188;
                  }
                  operator delete(v32);
                  if (!v35) {
                    goto LABEL_147;
                  }
LABEL_48:
                  std::string::basic_string[abi:ne180100]<0>(v141, "CS5");
                  if (v133 >= 0) {
                    xpc_object_t v36 = __p;
                  }
                  else {
                    xpc_object_t v36 = (void **)__p[0];
                  }
                  int v37 = v142;
                  char v38 = v141[0];
                  if (v142 >= 0) {
                    xpc_object_t v39 = (const char *)v141;
                  }
                  else {
                    xpc_object_t v39 = (const char *)v141[0];
                  }
                  int v40 = strcasecmp((const char *)v36, v39);
                  int v41 = v40;
                  if ((v37 & 0x80000000) == 0)
                  {
                    if (v40) {
                      goto LABEL_56;
                    }
LABEL_149:
                    int v100 = 160;
                    goto LABEL_188;
                  }
                  operator delete(v38);
                  if (!v41) {
                    goto LABEL_149;
                  }
LABEL_56:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF41");
                  if (v133 >= 0) {
                    xpc_object_t v42 = __p;
                  }
                  else {
                    xpc_object_t v42 = (void **)__p[0];
                  }
                  int v43 = v142;
                  uint64_t v44 = v141[0];
                  if (v142 >= 0) {
                    std::string v45 = (const char *)v141;
                  }
                  else {
                    std::string v45 = (const char *)v141[0];
                  }
                  int v46 = strcasecmp((const char *)v42, v45);
                  int v47 = v46;
                  if ((v43 & 0x80000000) == 0)
                  {
                    if (v46) {
                      goto LABEL_64;
                    }
LABEL_151:
                    int v100 = 136;
                    goto LABEL_188;
                  }
                  operator delete(v44);
                  if (!v47) {
                    goto LABEL_151;
                  }
LABEL_64:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF42");
                  if (v133 >= 0) {
                    long long v48 = __p;
                  }
                  else {
                    long long v48 = (void **)__p[0];
                  }
                  int v49 = v142;
                  uint64_t v50 = v141[0];
                  if (v142 >= 0) {
                    uint64_t v51 = (const char *)v141;
                  }
                  else {
                    uint64_t v51 = (const char *)v141[0];
                  }
                  int v52 = strcasecmp((const char *)v48, v51);
                  int v53 = v52;
                  if ((v49 & 0x80000000) == 0)
                  {
                    if (v52) {
                      goto LABEL_72;
                    }
LABEL_153:
                    int v100 = 144;
                    goto LABEL_188;
                  }
                  operator delete(v50);
                  if (!v53) {
                    goto LABEL_153;
                  }
LABEL_72:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF43");
                  if (v133 >= 0) {
                    long long v54 = __p;
                  }
                  else {
                    long long v54 = (void **)__p[0];
                  }
                  int v55 = v142;
                  uint64_t v56 = v141[0];
                  if (v142 >= 0) {
                    uint64_t v57 = (const char *)v141;
                  }
                  else {
                    uint64_t v57 = (const char *)v141[0];
                  }
                  int v58 = strcasecmp((const char *)v54, v57);
                  int v59 = v58;
                  if ((v55 & 0x80000000) == 0)
                  {
                    if (v58) {
                      goto LABEL_80;
                    }
LABEL_155:
                    int v100 = 152;
                    goto LABEL_188;
                  }
                  operator delete(v56);
                  if (!v59) {
                    goto LABEL_155;
                  }
LABEL_80:
                  std::string::basic_string[abi:ne180100]<0>(v141, "CS4");
                  if (v133 >= 0) {
                    long long v60 = __p;
                  }
                  else {
                    long long v60 = (void **)__p[0];
                  }
                  int v61 = v142;
                  uint64_t v62 = v141[0];
                  if (v142 >= 0) {
                    long long v63 = (const char *)v141;
                  }
                  else {
                    long long v63 = (const char *)v141[0];
                  }
                  int v64 = strcasecmp((const char *)v60, v63);
                  int v65 = v64;
                  if ((v61 & 0x80000000) == 0)
                  {
                    if (v64) {
                      goto LABEL_88;
                    }
LABEL_157:
                    int v100 = 128;
                    goto LABEL_188;
                  }
                  operator delete(v62);
                  if (!v65) {
                    goto LABEL_157;
                  }
LABEL_88:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF31");
                  if (v133 >= 0) {
                    uint64_t v66 = __p;
                  }
                  else {
                    uint64_t v66 = (void **)__p[0];
                  }
                  int v67 = v142;
                  long long v68 = v141[0];
                  if (v142 >= 0) {
                    __int16 v69 = (const char *)v141;
                  }
                  else {
                    __int16 v69 = (const char *)v141[0];
                  }
                  int v70 = strcasecmp((const char *)v66, v69);
                  int v71 = v70;
                  if ((v67 & 0x80000000) == 0)
                  {
                    if (v70) {
                      goto LABEL_96;
                    }
LABEL_159:
                    int v100 = 104;
                    goto LABEL_188;
                  }
                  operator delete(v68);
                  if (!v71) {
                    goto LABEL_159;
                  }
LABEL_96:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF32");
                  if (v133 >= 0) {
                    uint64_t v72 = __p;
                  }
                  else {
                    uint64_t v72 = (void **)__p[0];
                  }
                  int v73 = v142;
                  long long v74 = v141[0];
                  if (v142 >= 0) {
                    uint64_t v75 = (const char *)v141;
                  }
                  else {
                    uint64_t v75 = (const char *)v141[0];
                  }
                  int v76 = strcasecmp((const char *)v72, v75);
                  int v77 = v76;
                  if ((v73 & 0x80000000) == 0)
                  {
                    if (v76) {
                      goto LABEL_104;
                    }
LABEL_161:
                    int v100 = 112;
                    goto LABEL_188;
                  }
                  operator delete(v74);
                  if (!v77) {
                    goto LABEL_161;
                  }
LABEL_104:
                  std::string::basic_string[abi:ne180100]<0>(v141, "AF33");
                  if (v133 >= 0) {
                    std::string v78 = __p;
                  }
                  else {
                    std::string v78 = (void **)__p[0];
                  }
                  int v79 = v142;
                  long long v80 = v141[0];
                  if (v142 >= 0) {
                    long long v81 = (const char *)v141;
                  }
                  else {
                    long long v81 = (const char *)v141[0];
                  }
                  int v82 = strcasecmp((const char *)v78, v81);
                  int v83 = v82;
                  if (v79 < 0)
                  {
                    operator delete(v80);
                    if (v83) {
                      goto LABEL_112;
                    }
                  }
                  else if (v82)
                  {
LABEL_112:
                    std::string::basic_string[abi:ne180100]<0>(v141, "CS3");
                    if (v133 >= 0) {
                      uint64_t v84 = __p;
                    }
                    else {
                      uint64_t v84 = (void **)__p[0];
                    }
                    int v85 = v142;
                    long long v86 = v141[0];
                    if (v142 >= 0) {
                      long long v87 = (const char *)v141;
                    }
                    else {
                      long long v87 = (const char *)v141[0];
                    }
                    int v88 = strcasecmp((const char *)v84, v87);
                    if (v85 < 0) {
                      operator delete(v86);
                    }
                    if (v88)
                    {
                      std::string::basic_string[abi:ne180100]<0>(v141, "AF21");
                      if (v133 >= 0) {
                        long long v89 = __p;
                      }
                      else {
                        long long v89 = (void **)__p[0];
                      }
                      int v90 = v142;
                      long long v91 = v141[0];
                      if (v142 >= 0) {
                        long long v92 = (const char *)v141;
                      }
                      else {
                        long long v92 = (const char *)v141[0];
                      }
                      int v93 = strcasecmp((const char *)v89, v92);
                      if (v90 < 0) {
                        operator delete(v91);
                      }
                      if (v93)
                      {
                        std::string::basic_string[abi:ne180100]<0>(v141, "AF22");
                        if (v133 >= 0) {
                          long long v94 = __p;
                        }
                        else {
                          long long v94 = (void **)__p[0];
                        }
                        int v95 = v142;
                        long long v96 = v141[0];
                        if (v142 >= 0) {
                          long long v97 = (const char *)v141;
                        }
                        else {
                          long long v97 = (const char *)v141[0];
                        }
                        int v98 = strcasecmp((const char *)v94, v97);
                        if (v95 < 0) {
                          operator delete(v96);
                        }
                        if (v98)
                        {
                          std::string::basic_string[abi:ne180100]<0>(v141, "AF23");
                          BOOL v99 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                          if (v142 < 0) {
                            operator delete(v141[0]);
                          }
                          if (v99)
                          {
                            int v100 = 88;
                          }
                          else
                          {
                            std::string::basic_string[abi:ne180100]<0>(v141, "CS2");
                            BOOL v101 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                            if (v142 < 0) {
                              operator delete(v141[0]);
                            }
                            if (v101)
                            {
                              int v100 = 64;
                            }
                            else
                            {
                              std::string::basic_string[abi:ne180100]<0>(v141, "AF11");
                              BOOL v102 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                              if (v142 < 0) {
                                operator delete(v141[0]);
                              }
                              if (v102)
                              {
                                int v100 = 40;
                              }
                              else
                              {
                                std::string::basic_string[abi:ne180100]<0>(v141, "AF12");
                                BOOL v103 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                                if (v142 < 0) {
                                  operator delete(v141[0]);
                                }
                                if (v103)
                                {
                                  int v100 = 48;
                                }
                                else
                                {
                                  std::string::basic_string[abi:ne180100]<0>(v141, "AF13");
                                  BOOL v104 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                                  if (v142 < 0) {
                                    operator delete(v141[0]);
                                  }
                                  if (v104)
                                  {
                                    int v100 = 56;
                                  }
                                  else
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(v141, "CS1");
                                    BOOL v105 = ims::caseInsensitiveStringCompare((const char *)__p, (const char *)v141);
                                    if (v142 < 0) {
                                      operator delete(v141[0]);
                                    }
                                    if (v105) {
                                      int v100 = 32;
                                    }
                                    else {
                                      int v100 = 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          int v100 = 80;
                        }
                      }
                      else
                      {
                        int v100 = 72;
                      }
                    }
                    else
                    {
                      int v100 = 96;
                    }
                    goto LABEL_188;
                  }
                  int v100 = 120;
                  goto LABEL_188;
                }
LABEL_221:
                if (v135)
                {
                  v136 = v135;
                  operator delete(v135);
                }
                v141[0] = (void **)&v138;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v141);
                char v10 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
              }
            }
          }
        }
        if (v10 < 0) {
          operator delete(v125.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = v129;
      }
    }
    if (v126)
    {
      uint64_t v127 = v126;
      operator delete(v126);
    }
  }
  v141[0] = (void **)&v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v141);
  return a1;
}

void sub_1C55E2344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v34 - 136) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 136));
  _Unwind_Resume(a1);
}

void sub_1C55E23D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C55E2370);
}

BOOL ImsServiceClasses::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2
      && a1[2] == a2[2]
      && a1[1] == a2[1]
      && a1[6] == a2[6]
      && a1[8] == a2[8]
      && a1[7] == a2[7]
      && a1[3] == a2[3]
      && a1[5] == a2[5]
      && a1[4] == a2[4];
}

void RTCPRRPacket::packetize(RTCPRRPacket *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __x[0] = bswap32(*((_DWORD *)this + 6));
  v4.__i_ = 0;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v4, __x);
  RTCPReceiverReports::packetize((RTCPRRPacket *)((char *)this + 32), (uint64_t)__x);
  uint64_t v5 = *(char **)__x;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), *(char **)__x, v10, (uint64_t)&v10[-*(void *)__x] >> 2);
  unsigned int v6 = -73 * ((*((_DWORD *)this + 10) - *((_DWORD *)this + 8)) >> 2);
  v7.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)a2;
  unsigned int v8 = (*(_DWORD *)(a2 + 8) - *(void *)a2) >> 2;
  *((unsigned char *)this + 12) = 0;
  *((unsigned char *)this + 13) = v6;
  *((_DWORD *)this + 4) = 201;
  *((_WORD *)this + 10) = v8;
  __x[0] = bswap32(v8) & 0xFFFF0000 | 0xC900 | v6 & 0x1F | 0x80;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v7, __x);
  if (v5) {
    operator delete(v5);
  }
}

void sub_1C55E2584(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  std::vector<unsigned int>::const_iterator v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPRRPacket::toStream(RTCPRRPacket *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"RTCPRRPacket - Sender SSRC: ", 28);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return RTCPReceiverReports::toStream((RTCPRRPacket *)((char *)this + 32), a2);
}

void RTCPRRPacket::~RTCPRRPacket(RTCPRRPacket *this)
{
  *(void *)this = &unk_1F20E3660;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20E3660;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

void ims::analytics::CallEndEvent::create(ims::analytics::CallEndEvent *this@<X0>, const BambiCallSessionTerminationBaseEvent *a2@<X1>, const uint64_t *a3@<X2>, char a4@<W3>, char a5@<W4>, const AnalyticsLogger::AnalyticsData *a6@<X5>, _anonymous_namespace_::CallEndEventImpl **a7@<X8>)
{
  int v20 = (int)a3;
  uint64_t v14 = operator new(0xA0uLL);
  v14[1] = 0;
  _OWORD v14[2] = 0;
  void *v14 = &unk_1F20E36A8;
  uint64_t v15 = (_anonymous_namespace_::CallEndEventImpl *)(v14 + 3);
  void v14[3] = &unk_1F20E37E0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.endevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v14 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  void v14[3] = &unk_1F20E36F8;
  _OWORD v14[4] = &unk_1F20E3730;
  xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v17 = v16;
  if (v16)
  {
    v14[17] = v16;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
    v14[17] = v17;
    if (!v17)
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v17 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v17) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v17);
    goto LABEL_11;
  }
  xpc_object_t v18 = xpc_null_create();
LABEL_10:
  v14[17] = v18;
LABEL_11:
  xpc_release(v17);
  v14[18] = *(void *)a2;
  *((unsigned char *)v14 + 152) = a4;
  *((unsigned char *)v14 + 153) = a5;
  xpc_object_t v19 = (xpc_object_t)*((void *)a6 + 4);
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  if (MEMORY[0x1C878F160](v19) == MEMORY[0x1E4F14590])
  {
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __p.__r_.__value_.__l.__size_ = 0x40000000;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12_GLOBAL__N_116CallEndEventImpl13applyAddendumEN3xpc4dictE_block_invoke;
    std::string::size_type v22 = &__block_descriptor_tmp_24;
    uint64_t v23 = (char *)(v14 + 3);
    xpc_dictionary_apply(v19, &__p);
  }
  xpc_release(v19);
  *a7 = v15;
  a7[1] = (_anonymous_namespace_::CallEndEventImpl *)v14;
}

void sub_1C55E2964(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 136));
  *(void *)(v1 + 136) = 0;
  *(void *)(v1 + 32) = &unk_1F20C9CA0;
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*(void **)(v1 + 64));
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::CallEndEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E36A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::CallEndEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E36A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::CallEndEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::CallEndEventImpl::processSessionTerminationEvent(_anonymous_namespace_::CallEndEventImpl *this, const BambiCallSessionTerminationBaseEvent *a2, int a3, const AnalyticsLogger::AnalyticsData *a4)
{
  if (a2)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 3);
    if (v5)
    {
      uint64_t v9 = *((void *)a2 + 2);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v10 = std::__shared_weak_count::lock(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v10)
      {
        if (!v9)
        {
LABEL_412:
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          return;
        }
        uint64_t v11 = BambiCall::bambiClient((BambiCall *)v9);
        int v12 = *(std::__shared_weak_count **)(v9 + 368);
        long long v115 = v10;
        if (v12 && (long long v13 = std::__shared_weak_count::lock(v12)) != 0)
        {
          uint64_t v14 = *(void *)(v9 + 360) + 208;
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        else
        {
          uint64_t v14 = 208;
        }
        uint64_t v15 = (char *)this + 8;
        uint64_t v16 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Current call count is ", 22);
        *(unsigned char *)(v16 + 17) = 0;
        long long v236 = 0uLL;
        BambiClient::callCountExcludingCall(v11, &v236);
        std::ostream::operator<<();
        *(unsigned char *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" SIP callID=", 12);
        *(unsigned char *)(v16 + 17) = 0;
        uint64_t v112 = (const std::string *)(v9 + 472);
        ObfuscatedString::ObfuscatedString((uint64_t)&v236, (const std::string *)(v9 + 472));
        (*(void (**)(uint64_t, long long *))(*(void *)v16 + 56))(v16, &v236);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" handover ", 10);
        *(unsigned char *)(v16 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        if (v238 < 0) {
          operator delete(*((void **)&v237 + 1));
        }
        if (SBYTE7(v237) < 0) {
          operator delete((void *)v236);
        }
        uint64_t v17 = *((void *)a2 + 6);
        if (*((unsigned char *)this + 128))
        {
          xpc_object_t v245 = xpc_BOOL_create(1);
          if (!v245) {
            xpc_object_t v245 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "has_redialed";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v245, &v246);
          xpc_release(v246);
          xpc_object_t v246 = 0;
          xpc_release(v245);
          xpc_object_t v245 = 0;
        }
        xpc_object_t v243 = xpc_BOOL_create(*(unsigned char *)(v14 + 1838));
        if (!v243) {
          xpc_object_t v243 = xpc_null_create();
        }
        xpc_object_t v18 = (void **)((char *)this + 112);
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "sec_agree";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v243, &v244);
        xpc_release(v244);
        xpc_object_t v244 = 0;
        xpc_release(v243);
        xpc_object_t v243 = 0;
        uint64_t v19 = *(void *)(v9 + 392);
        if (v19) {
          char v20 = SipPreconditions::preconditionsSatisfiedInAnyFork((SipPreconditions *)(v19 + 1432));
        }
        else {
          char v20 = 0;
        }
        xpc_object_t v241 = xpc_BOOL_create(v20);
        if (!v241) {
          xpc_object_t v241 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "precondition";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v241, &v242);
        xpc_release(v242);
        int v116 = this;
        xpc_object_t v242 = 0;
        xpc_release(v241);
        xpc_object_t v241 = 0;
        BambiCall::firstReportedAccessNetwork((BambiCall *)v9, (uint64_t)&v236);
        if ((SBYTE7(v237) & 0x80u) == 0) {
          long long v21 = (const char *)&v236;
        }
        else {
          long long v21 = (const char *)v236;
        }
        xpc_object_t v239 = xpc_string_create(v21);
        if (!v239) {
          xpc_object_t v239 = xpc_null_create();
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 112;
        v217.__r_.__value_.__l.__size_ = (std::string::size_type)"start_rat_info";
        xpc::dict::object_proxy::operator=((uint64_t)&v217, &v239, &v240);
        xpc_release(v240);
        xpc_object_t v240 = 0;
        xpc_release(v239);
        xpc_object_t v239 = 0;
        if (v238 < 0) {
          operator delete(*((void **)&v237 + 1));
        }
        if (SBYTE7(v237) < 0) {
          operator delete((void *)v236);
        }
        std::string::size_type v22 = *(std::__shared_weak_count **)(v9 + 368);
        if (v22)
        {
          uint64_t v23 = std::__shared_weak_count::lock(v22);
          if (v23) {
            uint64_t v24 = *(void *)(v9 + 360);
          }
          else {
            uint64_t v24 = 0;
          }
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v23 = 0;
        }
        if (*(char *)(v24 + 3255) < 0) {
          uint64_t v25 = *(void *)(v24 + 3240);
        }
        else {
          uint64_t v25 = *(unsigned __int8 *)(v24 + 3255);
        }
        uint64_t v26 = (const char *)(v24 + 3160);
        if (v25)
        {
          uint64_t v27 = (const char *)(v24 + 3232);
          if (*(char *)(v24 + 3279) < 0 ? *(void *)(v24 + 3264) : *(unsigned __int8 *)(v24 + 3279)) {
            uint64_t v26 = v27;
          }
        }
        if (v26[23] < 0) {
          uint64_t v26 = *(const char **)v26;
        }
        xpc_object_t v234 = xpc_string_create(v26);
        if (!v234) {
          xpc_object_t v234 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "rat_info";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v234, &v235);
        xpc_release(v235);
        xpc_object_t v235 = 0;
        xpc_release(v234);
        xpc_object_t v234 = 0;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        uint64_t v29 = *((void *)a4 + 36);
        xpc_object_t v30 = (std::__shared_weak_count *)*((void *)a4 + 37);
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v29)
        {
          long long v236 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)v29 + 16))(&v236);
          int v31 = (const char *)v236;
          if ((void)v236)
          {
            if (*(char *)(v236 + 23) < 0) {
              int v31 = *(const char **)v236;
            }
            xpc_object_t v232 = xpc_string_create(v31);
            if (!v232) {
              xpc_object_t v232 = xpc_null_create();
            }
            v217.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 112;
            v217.__r_.__value_.__l.__size_ = (std::string::size_type)"active_rat";
            xpc::dict::object_proxy::operator=((uint64_t)&v217, &v232, &object);
            xpc_release(object);
            xpc_object_t object = 0;
            xpc_release(v232);
            xpc_object_t v232 = 0;
          }
          if (*((void *)&v236 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v236 + 1));
          }
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        xpc_object_t v230 = xpc_BOOL_create(*(unsigned char *)(v14 + 1839));
        if (!v230) {
          xpc_object_t v230 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "use_tcp";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v230, &v231);
        xpc_release(v231);
        xpc_object_t v231 = 0;
        xpc_release(v230);
        xpc_object_t v230 = 0;
        uint64_t v32 = *(std::__shared_weak_count **)(v9 + 368);
        if (v32
          && (xpc_object_t v33 = std::__shared_weak_count::lock(v32)) != 0
          && (uint64_t v34 = *(void *)(v9 + 360), std::__shared_weak_count::__release_shared[abi:ne180100](v33), v34))
        {
          int v35 = *(std::__shared_weak_count **)(v9 + 368);
          if (v35)
          {
            int v35 = std::__shared_weak_count::lock(v35);
            xpc_object_t v36 = v35;
            if (v35) {
              int v35 = *(std::__shared_weak_count **)(v9 + 360);
            }
          }
          else
          {
            xpc_object_t v36 = 0;
          }
          char isMultisimEnabled = SipStack::isMultisimEnabled((SipStack *)v35);
          xpc_object_t v228 = xpc_BOOL_create(isMultisimEnabled);
          if (!v228) {
            xpc_object_t v228 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "msim_enabled";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v228, &v229);
          xpc_release(v229);
          xpc_object_t v229 = 0;
          xpc_release(v228);
          xpc_object_t v228 = 0;
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
        }
        else
        {
          xpc_object_t v226 = xpc_BOOL_create(0);
          if (!v226) {
            xpc_object_t v226 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "msim_enabled";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v226, &v227);
          xpc_release(v227);
          xpc_object_t v227 = 0;
          xpc_release(v226);
          xpc_object_t v226 = 0;
        }
        if (*(unsigned char *)(v9 + 752) || *(unsigned char *)(v9 + 753))
        {
          xpc_object_t v224 = xpc_string_create("ATM_CALL_TYPE_TTY");
          if (!v224) {
            xpc_object_t v224 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "type";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v224, &v225);
          xpc_release(v225);
          xpc_object_t v225 = 0;
          xpc_release(v224);
          xpc_object_t v224 = 0;
        }
        else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 120))(v9))
        {
          xpc_object_t v222 = xpc_string_create("ATM_CALL_TYPE_Emergency_Unlisted");
          if (!v222) {
            xpc_object_t v222 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "type";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v222, &v223);
          xpc_release(v223);
          xpc_object_t v223 = 0;
          xpc_release(v222);
          xpc_object_t v222 = 0;
        }
        else
        {
          if (*(void *)(v9 + 520)) {
            long long v111 = "ATM_CALL_TYPE_E911";
          }
          else {
            long long v111 = "ATM_CALL_TYPE_Voice";
          }
          xpc_object_t v220 = xpc_string_create(v111);
          if (!v220) {
            xpc_object_t v220 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "type";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v220, &v221);
          xpc_release(v221);
          xpc_object_t v221 = 0;
          xpc_release(v220);
          xpc_object_t v220 = 0;
        }
        long long v236 = 0u;
        long long v237 = 0u;
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v236, (long long *)(v9 + 992));
        if (BYTE8(v237))
        {
          if (SBYTE7(v237) < 0)
          {
            std::string::__init_copy_ctor_external(&v217, (const std::string::value_type *)v236, *((std::string::size_type *)&v236 + 1));
          }
          else
          {
            *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v236;
            v217.__r_.__value_.__r.__words[2] = v237;
          }
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v37 = &v217;
          }
          else {
            int v37 = (std::string *)v217.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v218 = xpc_string_create((const char *)v37);
          if (!v218) {
            xpc_object_t v218 = xpc_null_create();
          }
          v216[0] = (char *)this + 112;
          v216[1] = "phone_number_list_type";
          xpc::dict::object_proxy::operator=((uint64_t)v216, &v218, &v219);
          xpc_release(v219);
          xpc_object_t v219 = 0;
          xpc_release(v218);
          xpc_object_t v218 = 0;
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (BYTE8(v237) && SBYTE7(v237) < 0) {
            operator delete((void *)v236);
          }
        }
        xpc_object_t v214 = xpc_string_create("ATM_CALL_Normal");
        if (!v214) {
          xpc_object_t v214 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "invite_type";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v214, &v215);
        xpc_release(v215);
        xpc_object_t v215 = 0;
        xpc_release(v214);
        xpc_object_t v214 = 0;
        if (a3 == 255)
        {
          uint64_t v38 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
          (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" Conference terminated ", 23);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v38 + 17) = 0;
          xpc_object_t v212 = xpc_string_create("ATM_CALL_TYPE_CONF");
          if (!v212) {
            xpc_object_t v212 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "invite_type";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v212, &v213);
          xpc_release(v213);
          xpc_object_t v213 = 0;
          xpc_release(v212);
          xpc_object_t v212 = 0;
        }
        if (*(unsigned char *)(v9 + 1496))
        {
          if (*(void *)(v9 + 1696))
          {
            uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
            (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v39);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Call setup delay is ", 20);
            *(unsigned char *)(v39 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v39 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" ms", 3);
            *(unsigned char *)(v39 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" reason is ", 11);
            *(unsigned char *)(v39 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v39 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v39 + 17) = 0;
            xpc_object_t v210 = xpc_int64_create((*(_DWORD *)(v9 + 1696) - *(_DWORD *)(v9 + 1712)));
            if (!v210) {
              xpc_object_t v210 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "call_setup_delay";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v210, &v211);
            xpc_release(v211);
            xpc_object_t v211 = 0;
            xpc_release(v210);
            xpc_object_t v210 = 0;
          }
          else
          {
            uint64_t v40 = *(void *)(v9 + 1744);
            if (v40)
            {
              xpc_object_t v208 = xpc_int64_create(v40 - *(void *)(v9 + 1712));
              if (!v208) {
                xpc_object_t v208 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "call_setup_delay";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v208, &v209);
              xpc_release(v209);
              xpc_object_t v209 = 0;
              xpc_release(v208);
              xpc_object_t v208 = 0;
              uint64_t v41 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
              (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v41);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Call setup delay was ", 21);
              *(unsigned char *)(v41 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v41 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)" ms", 3);
              *(unsigned char *)(v41 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)" reason is ", 11);
              *(unsigned char *)(v41 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v41 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v41 + 17) = 0;
            }
          }
          uint64_t v42 = *(void *)(v9 + 1704);
          if (v42)
          {
            xpc_object_t v206 = xpc_int64_create((v42 - *(_DWORD *)(v9 + 1712)));
            if (!v206) {
              xpc_object_t v206 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "call_setup_delay_ringing";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v206, &v207);
            xpc_release(v207);
            xpc_object_t v207 = 0;
            xpc_release(v206);
            xpc_object_t v206 = 0;
          }
        }
        int v43 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 368));
        uint64_t v44 = SipUserAgent::config(*(SipUserAgent **)(*(void *)(v9 + 360) + 144));
        xpc_object_t v204 = xpc_BOOL_create(*(unsigned char *)(v44 + 456));
        if (!v204) {
          xpc_object_t v204 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "is_primary_device";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v204, &v205);
        xpc_release(v205);
        xpc_object_t v205 = 0;
        xpc_release(v204);
        xpc_object_t v204 = 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        xpc_object_t v202 = xpc_int64_create(*(unsigned __int16 *)a4);
        if (!v202) {
          xpc_object_t v202 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "amr_mode";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v202, &v203);
        xpc_release(v203);
        xpc_object_t v203 = 0;
        xpc_release(v202);
        xpc_object_t v202 = 0;
        unint64_t v45 = *((__int16 *)a4 + 1);
        if (v45 > 5) {
          int v46 = "CodecType Undefined";
        }
        else {
          int v46 = off_1E65121B0[v45];
        }
        xpc_object_t v200 = xpc_string_create(v46);
        if (!v200) {
          xpc_object_t v200 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "codec";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v200, &v201);
        xpc_release(v201);
        xpc_object_t v201 = 0;
        xpc_release(v200);
        xpc_object_t v200 = 0;
        xpc_object_t v198 = xpc_BOOL_create(*(unsigned char *)(v9 + 1496));
        if (!v198) {
          xpc_object_t v198 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "outgoing";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v198, &v199);
        xpc_release(v199);
        xpc_object_t v199 = 0;
        xpc_release(v198);
        xpc_object_t v198 = 0;
        xpc_object_t v196 = xpc_BOOL_create(*((unsigned char *)this + 129));
        if (!v196) {
          xpc_object_t v196 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "multiparty";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v196, &v197);
        xpc_release(v197);
        xpc_object_t v197 = 0;
        xpc_release(v196);
        xpc_object_t v196 = 0;
        uint64_t v114 = v17;
        if (*((unsigned char *)a4 + 8))
        {
          if (*((_DWORD *)a4 + 25))
          {
LABEL_130:
            int v113 = 1;
            goto LABEL_133;
          }
        }
        else if (*((_DWORD *)a4 + 53))
        {
          goto LABEL_130;
        }
        int v113 = 0;
LABEL_133:
        uint64_t v47 = *(void *)(v9 + 432);
        if (v47 < 1)
        {
          uint64_t v61 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
          (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" Call ", 6);
          *(unsigned char *)(v61 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v236, v112);
          (*(void (**)(uint64_t, long long *))(*(void *)v61 + 56))(v61, &v236);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" was not set up", 15);
          *(unsigned char *)(v61 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v61 + 17) = 0;
          if (v238 < 0) {
            operator delete(*((void **)&v237 + 1));
          }
          if (SBYTE7(v237) < 0) {
            operator delete((void *)v236);
          }
          xpc_object_t v180 = xpc_BOOL_create(0);
          if (!v180) {
            xpc_object_t v180 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "isConnected";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v180, &v181);
          xpc_release(v181);
          xpc_object_t v181 = 0;
          xpc_release(v180);
          xpc_object_t v180 = 0;
        }
        else
        {
          uint64_t v48 = *((void *)a4 + 2);
          uint64_t v49 = *((void *)a4 + 3);
          xpc_object_t v194 = xpc_int64_create(*((void *)this + 15) - v47);
          if (!v194) {
            xpc_object_t v194 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "duration";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v194, &v195);
          xpc_release(v195);
          xpc_object_t v195 = 0;
          xpc_release(v194);
          xpc_object_t v194 = 0;
          xpc_object_t v192 = xpc_BOOL_create(1);
          if (!v192) {
            xpc_object_t v192 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v192, &v193);
          xpc_release(v193);
          xpc_object_t v193 = 0;
          xpc_release(v192);
          xpc_object_t v192 = 0;
          xpc_object_t v190 = xpc_int64_create(1);
          if (!v190) {
            xpc_object_t v190 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v190, &v191);
          xpc_release(v191);
          xpc_object_t v191 = 0;
          xpc_release(v190);
          xpc_object_t v190 = 0;
          xpc_object_t v188 = xpc_BOOL_create(1);
          if (!v188) {
            xpc_object_t v188 = xpc_null_create();
          }
          *(void *)&long long v236 = (char *)this + 112;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "isConnected";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v188, &v189);
          xpc_release(v189);
          xpc_object_t v189 = 0;
          xpc_release(v188);
          xpc_object_t v188 = 0;
          uint64_t v50 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
          (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"Call-end-duration=", 18);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" time-since-last-recv=", 22);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" time-since-last-send=", 22);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" in-remote-rtcp=", 16);
          *(unsigned char *)(v50 + 17) = 0;
          if (v113) {
            uint64_t v51 = "yes";
          }
          else {
            uint64_t v51 = "no";
          }
          if (v113) {
            uint64_t v52 = 3;
          }
          else {
            uint64_t v52 = 2;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)v51, v52);
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" local-hold=", 12);
          *(unsigned char *)(v50 + 17) = 0;
          int v53 = *(_DWORD *)(v9 + 448);
          if (v53 == 3) {
            long long v54 = "yes";
          }
          else {
            long long v54 = "no";
          }
          if (v53 == 3) {
            uint64_t v55 = 3;
          }
          else {
            uint64_t v55 = 2;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)v54, v55);
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" remote-hold=", 13);
          *(unsigned char *)(v50 + 17) = 0;
          int v56 = *(_DWORD *)(v9 + 452);
          if (v56 <= 2) {
            uint64_t v57 = "no";
          }
          else {
            uint64_t v57 = "yes";
          }
          if (v56 <= 2) {
            uint64_t v58 = 2;
          }
          else {
            uint64_t v58 = 3;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)v57, v58);
          *(unsigned char *)(v50 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v50 + 17) = 0;
          uint64_t v59 = *((void *)this + 15);
          if (v59 - v49 > 9 || (uint64_t v60 = *(void *)(v9 + 432), v60 == v49))
          {
            if (v59 - v48 > 9 || *(void *)(v9 + 432) == v48)
            {
              xpc_object_t v186 = xpc_int64_create(2);
              uint64_t v17 = v114;
              if (!v186) {
                xpc_object_t v186 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v186, &v187);
              xpc_release(v187);
              xpc_object_t v187 = 0;
              xpc_release(v186);
              xpc_object_t v186 = 0;
            }
            else
            {
              xpc_object_t v184 = xpc_int64_create(3);
              uint64_t v17 = v114;
              if (!v184) {
                xpc_object_t v184 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v184, &v185);
              xpc_release(v185);
              xpc_object_t v185 = 0;
              xpc_release(v184);
              xpc_object_t v184 = 0;
            }
          }
          else
          {
            uint64_t v17 = v114;
            if (v113 && (v59 - v48 > 9 || v48 == v60))
            {
              xpc_object_t v182 = xpc_int64_create(4);
              if (!v182) {
                xpc_object_t v182 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v182, &v183);
              xpc_release(v183);
              xpc_object_t v183 = 0;
              xpc_release(v182);
              xpc_object_t v182 = 0;
            }
          }
        }
        if (*((_DWORD *)a4 + 53))
        {
          if (*((void *)a4 + 21))
          {
            uint64_t v62 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
            (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)" volteRtcpRemote.packetLost ", 28);
            *(unsigned char *)(v62 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v62 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v62 + 8), (uint64_t)" volteRtcpLocal.senderCount = ", 30);
            *(unsigned char *)(v62 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v62 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v62 + 17) = 0;
          }
          else
          {
            xpc_object_t v178 = xpc_BOOL_create(0);
            if (!v178) {
              xpc_object_t v178 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v178, &v179);
            xpc_release(v179);
            xpc_object_t v179 = 0;
            xpc_release(v178);
            xpc_object_t v178 = 0;
          }
        }
        else if (*((_DWORD *)a4 + 39))
        {
          if (*((void *)a4 + 25))
          {
            if (*((_DWORD *)a4 + 54) && !*((void *)a4 + 32))
            {
              xpc_object_t v172 = xpc_BOOL_create(0);
              if (!v172) {
                xpc_object_t v172 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v172, &v173);
              xpc_release(v173);
              xpc_object_t v173 = 0;
              xpc_release(v172);
              xpc_object_t v172 = 0;
              if (*((void *)a4 + 21)) {
                int64_t v63 = 4;
              }
              else {
                int64_t v63 = 2;
              }
              xpc_object_t v170 = xpc_int64_create(v63);
              if (!v170) {
                xpc_object_t v170 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v170, &v171);
              xpc_release(v171);
              xpc_object_t v171 = 0;
              xpc_release(v170);
              xpc_object_t v170 = 0;
            }
          }
          else
          {
            xpc_object_t v176 = xpc_BOOL_create(0);
            if (!v176) {
              xpc_object_t v176 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v176, &v177);
            xpc_release(v177);
            xpc_object_t v177 = 0;
            xpc_release(v176);
            xpc_object_t v176 = 0;
            if (*((void *)a4 + 21)) {
              int64_t v65 = 3;
            }
            else {
              int64_t v65 = 2;
            }
            xpc_object_t v174 = xpc_int64_create(v65);
            if (!v174) {
              xpc_object_t v174 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v174, &v175);
            xpc_release(v175);
            xpc_object_t v175 = 0;
            xpc_release(v174);
            xpc_object_t v174 = 0;
          }
        }
        if (*((_DWORD *)a4 + 25))
        {
          if (*((void *)a4 + 7))
          {
            uint64_t v66 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
            (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)" wifiRtcpRemote.packetLost ", 27);
            *(unsigned char *)(v66 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v66 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)" wifiRtcpLocal.senderCount = ", 29);
            *(unsigned char *)(v66 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v66 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v66 + 17) = 0;
          }
          else
          {
            xpc_object_t v168 = xpc_BOOL_create(0);
            if (!v168) {
              xpc_object_t v168 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v168, &v169);
            xpc_release(v169);
            xpc_object_t v169 = 0;
            xpc_release(v168);
            xpc_object_t v168 = 0;
          }
        }
        else if (*((_DWORD *)a4 + 11))
        {
          if (*((void *)a4 + 11))
          {
            if (*((_DWORD *)a4 + 26) && !*((void *)a4 + 18))
            {
              xpc_object_t v162 = xpc_BOOL_create(0);
              if (!v162) {
                xpc_object_t v162 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v162, &v163);
              xpc_release(v163);
              xpc_object_t v163 = 0;
              xpc_release(v162);
              xpc_object_t v162 = 0;
              if (*((void *)a4 + 7)) {
                int64_t v67 = 4;
              }
              else {
                int64_t v67 = 2;
              }
              xpc_object_t v160 = xpc_int64_create(v67);
              if (!v160) {
                xpc_object_t v160 = xpc_null_create();
              }
              *(void *)&long long v236 = (char *)this + 112;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v160, &v161);
              xpc_release(v161);
              xpc_object_t v161 = 0;
              xpc_release(v160);
              xpc_object_t v160 = 0;
            }
          }
          else
          {
            xpc_object_t v166 = xpc_BOOL_create(0);
            if (!v166) {
              xpc_object_t v166 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "two_way_audio";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v166, &v167);
            xpc_release(v167);
            xpc_object_t v167 = 0;
            xpc_release(v166);
            xpc_object_t v166 = 0;
            if (*((void *)a4 + 7)) {
              int64_t v68 = 3;
            }
            else {
              int64_t v68 = 2;
            }
            xpc_object_t v164 = xpc_int64_create(v68);
            if (!v164) {
              xpc_object_t v164 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "audios";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v164, &v165);
            xpc_release(v165);
            xpc_object_t v165 = 0;
            xpc_release(v164);
            xpc_object_t v164 = 0;
          }
        }
        xpc_object_t v158 = xpc_string_create("ATM_CALL_End_Normal");
        if (!v158) {
          xpc_object_t v158 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "callEndStatus";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v158, &v159);
        xpc_release(v159);
        xpc_object_t v159 = 0;
        xpc_release(v158);
        xpc_object_t v158 = 0;
        xpc_object_t v156 = xpc_BOOL_create(0);
        if (!v156) {
          xpc_object_t v156 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "is_televcc";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v156, &v157);
        xpc_release(v157);
        xpc_object_t v157 = 0;
        xpc_release(v156);
        xpc_object_t v156 = 0;
        xpc_object_t v154 = xpc_int64_create(2);
        if (!v154) {
          xpc_object_t v154 = xpc_null_create();
        }
        *(void *)&long long v236 = (char *)this + 112;
        *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "ectStatus";
        xpc::dict::object_proxy::operator=((uint64_t)&v236, &v154, &v155);
        xpc_release(v155);
        xpc_object_t v155 = 0;
        xpc_release(v154);
        xpc_object_t v154 = 0;
        int v69 = *(_DWORD *)(v9 + 1816);
        if (v69)
        {
          if (v69 == 2)
          {
            xpc_object_t v152 = xpc_int64_create(0);
            if (!v152) {
              xpc_object_t v152 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "ectStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v152, &v153);
            xpc_release(v153);
            xpc_object_t v153 = 0;
            xpc_release(v152);
            xpc_object_t v152 = 0;
          }
          else
          {
            xpc_object_t v150 = xpc_int64_create(1);
            if (!v150) {
              xpc_object_t v150 = xpc_null_create();
            }
            *(void *)&long long v236 = (char *)this + 112;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "ectStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v150, &v151);
            xpc_release(v151);
            xpc_object_t v151 = 0;
            xpc_release(v150);
            xpc_object_t v150 = 0;
          }
        }
        int v70 = (long long *)((char *)a2 + 120);
        if (*((char *)a2 + 143) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
        }
        else
        {
          long long v236 = *v70;
          *(void *)&long long v237 = *((void *)a2 + 17);
        }
        if (SBYTE7(v237) < 0)
        {
          uint64_t v71 = *((void *)&v236 + 1);
          operator delete((void *)v236);
          if (!v71) {
            goto LABEL_275;
          }
        }
        else if (!BYTE7(v237))
        {
          goto LABEL_275;
        }
        if (*((char *)a2 + 143) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
        }
        else
        {
          long long v236 = *v70;
          *(void *)&long long v237 = *((void *)a2 + 17);
        }
        if ((SBYTE7(v237) & 0x80u) == 0) {
          uint64_t v72 = (const char *)&v236;
        }
        else {
          uint64_t v72 = (const char *)v236;
        }
        xpc_object_t v148 = xpc_string_create(v72);
        if (!v148) {
          xpc_object_t v148 = xpc_null_create();
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v217.__r_.__value_.__l.__size_ = (std::string::size_type)"q_reason";
        xpc::dict::object_proxy::operator=((uint64_t)&v217, &v148, &v149);
        xpc_release(v149);
        xpc_object_t v149 = 0;
        xpc_release(v148);
        xpc_object_t v148 = 0;
        if (SBYTE7(v237) < 0) {
          operator delete((void *)v236);
        }
LABEL_275:
        if (v17)
        {
          if (!*(_DWORD *)(v17 + 88))
          {
LABEL_389:
            if (*((_WORD *)a4 + 3))
            {
            }
            else
            {
              xpc_object_t v138 = xpc_string_create("ATM_CALL_END_Bchannel_Error");
              if (!v138) {
                xpc_object_t v138 = xpc_null_create();
              }
              *(void *)&long long v236 = v18;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "end_reason";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v138, &v139);
              xpc_release(v139);
              xpc_object_t v139 = 0;
              xpc_release(v138);
              xpc_object_t v138 = 0;
              int v107 = ims::analytics::asString(*((_DWORD *)a4 + 1));
              xpc_object_t v136 = xpc_string_create(v107);
              if (!v136) {
                xpc_object_t v136 = xpc_null_create();
              }
              *(void *)&long long v236 = v18;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v136, &v137);
              xpc_release(v137);
              xpc_object_t v137 = 0;
              xpc_release(v136);
              xpc_object_t v136 = 0;
              atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
              if ((SBYTE7(v237) & 0x80u) == 0) {
                long long v108 = (const char *)&v236;
              }
              else {
                long long v108 = (const char *)v236;
              }
              xpc_object_t v134 = xpc_string_create(v108);
              if (!v134) {
                xpc_object_t v134 = xpc_null_create();
              }
              v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v217.__r_.__value_.__l.__size_ = (std::string::size_type)"callEndStatus";
              xpc::dict::object_proxy::operator=((uint64_t)&v217, &v134, &v135);
              xpc_release(v135);
              xpc_object_t v135 = 0;
              xpc_release(v134);
              xpc_object_t v134 = 0;
              if (SBYTE7(v237) < 0) {
                operator delete((void *)v236);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v115);
            }
LABEL_403:
            uint64_t v109 = *v18;
            xpc_object_t v119 = v109;
            if (v109) {
              xpc_retain(v109);
            }
            else {
              xpc_object_t v119 = xpc_null_create();
            }
            uint64_t v117 = 0;
            int v118 = 0;
            int v110 = *(std::__shared_weak_count **)(v9 + 368);
            if (v110)
            {
              int v118 = std::__shared_weak_count::lock(v110);
              if (v118) {
                uint64_t v117 = *(void *)(v9 + 360);
              }
            }
            char v10 = v115;
            ims::analytics::populateCellularInfo(&v119, (uint64_t)&v117);
            if (v118) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v118);
            }
            xpc_release(v119);
            xpc_object_t v119 = 0;
            goto LABEL_412;
          }
          uint64_t v73 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
          (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)" Call ", 6);
          *(unsigned char *)(v73 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v236, v112);
          (*(void (**)(uint64_t, long long *))(*(void *)v73 + 56))(v73, &v236);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)" IMS code ", 10);
          *(unsigned char *)(v73 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v73 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)" event reason ", 14);
          *(unsigned char *)(v73 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v73 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v73 + 17) = 0;
          if (v238 < 0) {
            operator delete(*((void **)&v237 + 1));
          }
          if (SBYTE7(v237) < 0) {
            operator delete((void *)v236);
          }
          long long v236 = 0uLL;
          *(void *)&long long v237 = 0;
          uint64_t v74 = qword_1EBBDAF88;
          if (qword_1EBBDAF88)
          {
            unsigned int v75 = *(_DWORD *)(v17 + 88);
            int v76 = &qword_1EBBDAF88;
            do
            {
              unsigned int v77 = *(_DWORD *)(v74 + 32);
              BOOL v78 = v77 >= v75;
              if (v77 >= v75) {
                int v79 = (uint64_t *)v74;
              }
              else {
                int v79 = (uint64_t *)(v74 + 8);
              }
              if (v78) {
                int v76 = (uint64_t *)v74;
              }
              uint64_t v74 = *v79;
            }
            while (*v79);
            long long v80 = &ims::kEmptyString;
            if (v76 != &qword_1EBBDAF88)
            {
              unsigned int v81 = *((_DWORD *)v76 + 8);
              int v82 = (long long *)(v76 + 5);
              if (v81 <= v75) {
                long long v80 = v82;
              }
            }
          }
          else
          {
            long long v80 = &ims::kEmptyString;
          }
          if (*((char *)v80 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v236, *(const std::string::value_type **)v80, *((void *)v80 + 1));
          }
          else
          {
            long long v236 = *v80;
            *(void *)&long long v237 = *((void *)v80 + 2);
          }
          uint64_t v86 = BYTE7(v237);
          char v87 = BYTE7(v237);
          if ((SBYTE7(v237) & 0x80u) == 0) {
            uint64_t v88 = BYTE7(v237);
          }
          else {
            uint64_t v88 = *((void *)&v236 + 1);
          }
          if (!v88)
          {
            if (SBYTE7(v237) < 0)
            {
              long long v89 = (char *)v236;
              if (!memcmp((const void *)v236, &ims::kEmptyString, *((size_t *)&v236 + 1))) {
                goto LABEL_316;
              }
LABEL_311:
              xpc_object_t v146 = xpc_string_create(v89);
              if (!v146) {
                xpc_object_t v146 = xpc_null_create();
              }
              v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v217.__r_.__value_.__l.__size_ = (std::string::size_type)"status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v217, &v146, &v147);
              xpc_release(v147);
              xpc_object_t v147 = 0;
              xpc_release(v146);
              xpc_object_t v146 = 0;
              char v87 = BYTE7(v237);
LABEL_314:
              if (v87 < 0)
              {
                long long v89 = (char *)v236;
LABEL_316:
                operator delete(v89);
              }
LABEL_317:
              xpc_object_t v144 = xpc_int64_create(*(unsigned int *)(v17 + 88));
              if (!v144) {
                xpc_object_t v144 = xpc_null_create();
              }
              *(void *)&long long v236 = v18;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "sip_status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v144, &v145);
              xpc_release(v145);
              xpc_object_t v145 = 0;
              xpc_release(v144);
              xpc_object_t v144 = 0;
              if (*(_DWORD *)(v17 + 88) != 380) {
                goto LABEL_389;
              }
              long long v236 = 0uLL;
              *(void *)&long long v237 = 0;
              if (*(char *)(v9 + 1247) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v236, *(const std::string::value_type **)(v9 + 1224), *(void *)(v9 + 1232));
              }
              else
              {
                long long v236 = *(_OWORD *)(v9 + 1224);
                *(void *)&long long v237 = *(void *)(v9 + 1240);
              }
              if (SBYTE7(v237) < 0)
              {
                uint64_t v100 = *((void *)&v236 + 1);
                if (!*((void *)&v236 + 1))
                {
LABEL_376:
                  operator delete((void *)v236);
                  goto LABEL_377;
                }
                BOOL v101 = (unsigned __int8 *)v236;
              }
              else
              {
                uint64_t v100 = BYTE7(v237);
                if (!BYTE7(v237))
                {
LABEL_377:
                  BOOL v103 = SipMessage::header<SipContactHeader>(v17);
                  if (v103)
                  {
                    uint64_t v104 = v103[9];
                    if (v104)
                    {
                      if (v104 != v103[10])
                      {
                        BOOL v105 = (SipUri *)(v104 + 8);
                        if (SipUri::isEmergencyUrn((SipUri *)(v104 + 8))
                          && SipUri::getEmergencySubservice(v105) != 6)
                        {
                          SipUri::asString((uint64_t)v105, &v236);
                          if ((SBYTE7(v237) & 0x80u) == 0) {
                            long long v106 = (const char *)&v236;
                          }
                          else {
                            long long v106 = (const char *)v236;
                          }
                          xpc_object_t v140 = xpc_string_create(v106);
                          if (!v140) {
                            xpc_object_t v140 = xpc_null_create();
                          }
                          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
                          v217.__r_.__value_.__l.__size_ = (std::string::size_type)"redial_contact_urn";
                          xpc::dict::object_proxy::operator=((uint64_t)&v217, &v140, &v141);
                          xpc_release(v141);
                          xpc_object_t v141 = 0;
                          xpc_release(v140);
                          xpc_object_t v140 = 0;
                          if (SBYTE7(v237) < 0) {
                            operator delete((void *)v236);
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_389;
                }
                BOOL v101 = (unsigned __int8 *)&v236;
              }
              uint64_t v102 = 0;
              do
              {
                if (((char)*v101 & 0x80000000) == 0
                  && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v101 + 60) & 0x400) != 0)
                {
                  ++v102;
                }
                ++v101;
                --v100;
              }
              while (v100);
              xpc_object_t v142 = xpc_BOOL_create(v102 > 5);
              if (!v142) {
                xpc_object_t v142 = xpc_null_create();
              }
              v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              v217.__r_.__value_.__l.__size_ = (std::string::size_type)"phone_number_is_long";
              xpc::dict::object_proxy::operator=((uint64_t)&v217, &v142, &v143);
              xpc_release(v143);
              xpc_object_t v143 = 0;
              xpc_release(v142);
              xpc_object_t v142 = 0;
              if ((SBYTE7(v237) & 0x80000000) == 0) {
                goto LABEL_377;
              }
              goto LABEL_376;
            }
            if (!BYTE7(v237)) {
              goto LABEL_317;
            }
            int v90 = &v236;
            long long v91 = &ims::kEmptyString;
            while (*(unsigned __int8 *)v90 == *(unsigned __int8 *)v91)
            {
              int v90 = (long long *)((char *)v90 + 1);
              long long v91 = (long long *)((char *)v91 + 1);
              if (!--v86) {
                goto LABEL_314;
              }
            }
          }
          if ((SBYTE7(v237) & 0x80u) == 0) {
            long long v89 = (char *)&v236;
          }
          else {
            long long v89 = (char *)v236;
          }
          goto LABEL_311;
        }
        uint64_t v83 = *(void *)(v9 + 432);
        if (v83 >= 1)
        {
          xpc_object_t v132 = xpc_int64_create((v83 - *(_DWORD *)(v9 + 424)));
          if (!v132) {
            xpc_object_t v132 = xpc_null_create();
          }
          *(void *)&long long v236 = v18;
          *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "call_answering_delay";
          xpc::dict::object_proxy::operator=((uint64_t)&v236, &v132, &v133);
          xpc_release(v133);
          xpc_object_t v133 = 0;
          xpc_release(v132);
          xpc_object_t v132 = 0;
        }
        uint64_t v84 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
        (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v84 + 8), (uint64_t)" callend reason is  ", 20);
        *(unsigned char *)(v84 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v84 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v84 + 17) = 0;
        int v85 = (long long *)((char *)a2 + 64);
        if (*((char *)a2 + 87) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
        }
        else
        {
          long long v236 = *v85;
          *(void *)&long long v237 = *((void *)a2 + 10);
        }
        if (SBYTE7(v237) < 0)
        {
          uint64_t v92 = *((void *)&v236 + 1);
          operator delete((void *)v236);
          if (!v92)
          {
LABEL_343:
            xpc_object_t v128 = xpc_int64_create((uint64_t)(*((void *)a4 + 34) - *((void *)a4 + 33)) >> 3);
            if (!v128) {
              xpc_object_t v128 = xpc_null_create();
            }
            *(void *)&long long v236 = v18;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "handover_counts";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v128, &v129);
            xpc_release(v129);
            xpc_object_t v129 = 0;
            xpc_release(v128);
            xpc_object_t v128 = 0;
            uint64_t v94 = *((void *)a4 + 33);
            uint64_t v95 = *((void *)a4 + 34);
            if (v94 == v95)
            {
              unsigned int v97 = 0;
              unsigned int v96 = 0;
            }
            else
            {
              unsigned int v96 = 0;
              unsigned int v97 = 0;
              do
              {
                v97 += *(unsigned __int8 *)(v94 + 4);
                if (!*(unsigned char *)(v94 + 4)) {
                  ++v96;
                }
                v94 += 8;
              }
              while (v94 != v95);
            }
            xpc_object_t v126 = xpc_int64_create(v97);
            if (!v126) {
              xpc_object_t v126 = xpc_null_create();
            }
            *(void *)&long long v236 = v18;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "cell_to_wifi_handover_counts";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v126, &v127);
            xpc_release(v127);
            xpc_object_t v127 = 0;
            xpc_release(v126);
            xpc_object_t v126 = 0;
            xpc_object_t v124 = xpc_int64_create(v96);
            if (!v124) {
              xpc_object_t v124 = xpc_null_create();
            }
            *(void *)&long long v236 = v18;
            *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "wifi_to_cell_handover_counts";
            xpc::dict::object_proxy::operator=((uint64_t)&v236, &v124, &v125);
            xpc_release(v125);
            xpc_object_t v125 = 0;
            xpc_release(v124);
            xpc_object_t v124 = 0;
            if (!*((_WORD *)a4 + 3))
            {
              xpc_object_t v122 = xpc_string_create("ATM_CALL_END_Bchannel_Error");
              if (!v122) {
                xpc_object_t v122 = xpc_null_create();
              }
              *(void *)&long long v236 = v18;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "end_reason";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v122, &v123);
              xpc_release(v123);
              xpc_object_t v123 = 0;
              xpc_release(v122);
              xpc_object_t v122 = 0;
              int v98 = ims::analytics::asString(*((_DWORD *)a4 + 1));
              xpc_object_t v120 = xpc_string_create(v98);
              if (!v120) {
                xpc_object_t v120 = xpc_null_create();
              }
              *(void *)&long long v236 = v18;
              *((void *)&v236 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v236, &v120, &v121);
              xpc_release(v121);
              xpc_object_t v121 = 0;
              xpc_release(v120);
              xpc_object_t v120 = 0;
              uint64_t v99 = (*(uint64_t (**)(char *))(*(void *)v15 + 64))(v15);
              (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v99);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v99 + 8), (uint64_t)" reason rtp error code ", 23);
              *(unsigned char *)(v99 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v99 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v99 + 17) = 0;
            }
            goto LABEL_403;
          }
        }
        else if (!BYTE7(v237))
        {
          goto LABEL_343;
        }
        if (*((char *)a2 + 87) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
        }
        else
        {
          long long v236 = *v85;
          *(void *)&long long v237 = *((void *)a2 + 10);
        }
        if ((SBYTE7(v237) & 0x80u) == 0) {
          int v93 = (const char *)&v236;
        }
        else {
          int v93 = (const char *)v236;
        }
        xpc_object_t v130 = xpc_string_create(v93);
        if (!v130) {
          xpc_object_t v130 = xpc_null_create();
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v217.__r_.__value_.__l.__size_ = (std::string::size_type)"q_reason";
        xpc::dict::object_proxy::operator=((uint64_t)&v217, &v130, &v131);
        xpc_release(v131);
        xpc_object_t v131 = 0;
        xpc_release(v130);
        xpc_object_t v130 = 0;
        if (SBYTE7(v237) < 0) {
          operator delete((void *)v236);
        }
        goto LABEL_343;
      }
    }
  }
}

void sub_1C55E52B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
}

void anonymous namespace'::CallEndEventImpl::~CallEndEventImpl(_anonymous_namespace_::CallEndEventImpl *this)
{
  *(void *)this = &unk_1F20E36F8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E3730;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E36F8;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E3730;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::CallEndEventImpl::getDict@<X0>(_anonymous_namespace_::CallEndEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::CallEndEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "atm_CallEndEvent");
}

void non-virtual thunk to'anonymous namespace'::CallEndEventImpl::~CallEndEventImpl(_anonymous_namespace_::CallEndEventImpl *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E36F8;
  *(void *)this = &unk_1F20E3730;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E36F8;
  *(void *)this = &unk_1F20E3730;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void *anonymous namespace'::getDropOrSetupFailStatus(void *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 432);
    if (v3 < 1 || a3 - v3 < 11) {
      uint64_t v5 = "ATM_CALL_Setup_failure";
    }
    else {
      uint64_t v5 = "ATM_CALL_Drop";
    }
    return std::string::basic_string[abi:ne180100]<0>(result, v5);
  }
  else
  {
    *xpc_object_t result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void anonymous namespace'::CallEndEventImpl::processReasonCode(_anonymous_namespace_::CallEndEventImpl *this, const BambiCallSessionTerminationBaseEvent *a2, const AnalyticsLogger::AnalyticsData *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v3)
  {
    std::vector<unsigned int>::const_iterator v7 = (void *)*((void *)a2 + 2);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unsigned int v8 = std::__shared_weak_count::lock(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v8)
    {
      if (v7)
      {
        uint64_t v9 = *((void *)a3 + 34);
        if (v9 == *((void *)a3 + 33))
        {
          BOOL v13 = 0;
        }
        else
        {
          uint64_t v10 = *(unsigned int *)(v9 - 8);
          uint64_t v11 = (std::__shared_weak_count *)v7[46];
          if (v11)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v11);
            int v12 = v11;
            if (v11) {
              uint64_t v11 = (std::__shared_weak_count *)v7[45];
            }
          }
          else
          {
            int v12 = 0;
          }
          uint64_t v14 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
          InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v14);
          int v16 = ImsPrefs::intValue(v14, InactivityTimerRTPSecondsKey);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          BOOL v13 = *((void *)this + 15) - (v7[53] + v10) < v16;
        }
        v218[0] = 0;
        v218[1] = 0;
        uint64_t v219 = 0;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        switch(*((_DWORD *)a2 + 10))
        {
          case 0:
            xpc_object_t v216 = xpc_string_create("ATM_CALL_END_LocalHangup");
            if (!v216) {
              xpc_object_t v216 = xpc_null_create();
            }
            uint64_t v23 = (char *)this + 112;
            xpc_object_t v214 = v23;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v216, &v217);
            xpc_release(v217);
            xpc_object_t v217 = 0;
            xpc_release(v216);
            xpc_object_t v216 = 0;
            xpc_object_t v212 = xpc_string_create("ATM_CALL_END_REASON_LocalHangup");
            if (!v212) {
              xpc_object_t v212 = xpc_null_create();
            }
            xpc_object_t v214 = v23;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v212, &v213);
            xpc_release(v213);
            xpc_object_t v213 = 0;
            xpc_release(v212);
            xpc_object_t v212 = 0;
            break;
          case 1:
            xpc_object_t v210 = xpc_string_create("ATM_CALL_END_RemoteHangup");
            if (!v210) {
              xpc_object_t v210 = xpc_null_create();
            }
            uint64_t v24 = (char *)this + 112;
            xpc_object_t v214 = v24;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v210, &v211);
            xpc_release(v211);
            xpc_object_t v211 = 0;
            xpc_release(v210);
            xpc_object_t v210 = 0;
            xpc_object_t v208 = xpc_string_create("ATM_CALL_END_REASON_RemoteHangup");
            if (!v208) {
              xpc_object_t v208 = xpc_null_create();
            }
            xpc_object_t v214 = v24;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v208, &v209);
            xpc_release(v209);
            xpc_object_t v209 = 0;
            xpc_release(v208);
            xpc_object_t v208 = 0;
            break;
          case 2:
            xpc_object_t v188 = xpc_string_create("ATM_CALL_END_LocalCallRejected");
            if (!v188) {
              xpc_object_t v188 = xpc_null_create();
            }
            uint64_t v25 = (char *)this + 112;
            xpc_object_t v214 = v25;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v188, &v189);
            xpc_release(v189);
            xpc_object_t v189 = 0;
            xpc_release(v188);
            xpc_object_t v188 = 0;
            xpc_object_t v186 = xpc_string_create("ATM_CALL_END_REASON_LocalCallRejected");
            if (!v186) {
              xpc_object_t v186 = xpc_null_create();
            }
            xpc_object_t v214 = v25;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v186, &v187);
            xpc_release(v187);
            xpc_object_t v187 = 0;
            xpc_release(v186);
            xpc_object_t v186 = 0;
            break;
          case 3:
            xpc_object_t v184 = xpc_string_create("ATM_CALL_END_RemoteCallRejected");
            if (!v184) {
              xpc_object_t v184 = xpc_null_create();
            }
            uint64_t v26 = (char *)this + 112;
            xpc_object_t v214 = v26;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v184, &v185);
            xpc_release(v185);
            xpc_object_t v185 = 0;
            xpc_release(v184);
            xpc_object_t v184 = 0;
            xpc_object_t v182 = xpc_string_create("ATM_CALL_END_REASON_RemoteCallRejected");
            if (!v182) {
              xpc_object_t v182 = xpc_null_create();
            }
            xpc_object_t v214 = v26;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v182, &v183);
            xpc_release(v183);
            xpc_object_t v183 = 0;
            xpc_release(v182);
            xpc_object_t v182 = 0;
            break;
          case 4:
            xpc_object_t v202 = xpc_string_create("ATM_CALL_END_LocalRequestCanceled");
            if (!v202) {
              xpc_object_t v202 = xpc_null_create();
            }
            uint64_t v27 = (char *)this + 112;
            xpc_object_t v214 = v27;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v202, &v203);
            xpc_release(v203);
            xpc_object_t v203 = 0;
            xpc_release(v202);
            xpc_object_t v202 = 0;
            xpc_object_t v200 = xpc_string_create("ATM_CALL_END_REASON_LocalRequestCanceled");
            if (!v200) {
              xpc_object_t v200 = xpc_null_create();
            }
            xpc_object_t v214 = v27;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v200, &v201);
            xpc_release(v201);
            xpc_object_t v201 = 0;
            xpc_release(v200);
            xpc_object_t v200 = 0;
            break;
          case 5:
            xpc_object_t v198 = xpc_string_create("ATM_CALL_END_RemoteRequestCanceled");
            if (!v198) {
              xpc_object_t v198 = xpc_null_create();
            }
            int v28 = (char *)this + 112;
            xpc_object_t v214 = v28;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v198, &v199);
            xpc_release(v199);
            xpc_object_t v199 = 0;
            xpc_release(v198);
            xpc_object_t v198 = 0;
            xpc_object_t v196 = xpc_string_create("ATM_CALL_END_REASON_RemoteRequestCanceled");
            if (!v196) {
              xpc_object_t v196 = xpc_null_create();
            }
            xpc_object_t v214 = v28;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v196, &v197);
            xpc_release(v197);
            xpc_object_t v197 = 0;
            xpc_release(v196);
            xpc_object_t v196 = 0;
            break;
          case 6:
            xpc_object_t v180 = xpc_string_create("ATM_CALL_END_CallAnsweredElsewhere");
            if (!v180) {
              xpc_object_t v180 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v180, &v181);
            xpc_release(v181);
            xpc_object_t v181 = 0;
            xpc_release(v180);
            xpc_object_t v180 = 0;
            break;
          case 7:
            xpc_object_t v178 = xpc_string_create("ATM_CALL_END_SecondaryDeviceInUse");
            if (!v178) {
              xpc_object_t v178 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v178, &v179);
            xpc_release(v179);
            xpc_object_t v179 = 0;
            xpc_release(v178);
            xpc_object_t v178 = 0;
            break;
          case 8:
            xpc_object_t v194 = xpc_string_create("ATM_CALL_END_TELEVCC");
            if (!v194) {
              xpc_object_t v194 = xpc_null_create();
            }
            uint64_t v29 = (char *)this + 112;
            xpc_object_t v214 = v29;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v194, &v195);
            xpc_release(v195);
            xpc_object_t v195 = 0;
            xpc_release(v194);
            xpc_object_t v194 = 0;
            xpc_object_t v192 = xpc_BOOL_create(1);
            if (!v192) {
              xpc_object_t v192 = xpc_null_create();
            }
            xpc_object_t v214 = v29;
            xpc_object_t v215 = "is_televcc";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v192, &v193);
            xpc_release(v193);
            xpc_object_t v193 = 0;
            xpc_release(v192);
            xpc_object_t v192 = 0;
            xpc_object_t v190 = xpc_string_create("ATM_CALL_END_REASON_TELEVCC");
            if (!v190) {
              xpc_object_t v190 = xpc_null_create();
            }
            xpc_object_t v214 = v29;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v190, &v191);
            xpc_release(v191);
            xpc_object_t v191 = 0;
            xpc_release(v190);
            xpc_object_t v190 = 0;
            break;
          case 9:
            xpc_object_t v206 = xpc_string_create("ATM_CALL_END_CallTransferred");
            if (!v206) {
              xpc_object_t v206 = xpc_null_create();
            }
            xpc_object_t v30 = (char *)this + 112;
            xpc_object_t v214 = v30;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v206, &v207);
            xpc_release(v207);
            xpc_object_t v207 = 0;
            xpc_release(v206);
            xpc_object_t v206 = 0;
            xpc_object_t v204 = xpc_string_create("ATM_CALL_END_REASON_BYE");
            if (!v204) {
              xpc_object_t v204 = xpc_null_create();
            }
            xpc_object_t v214 = v30;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v204, &v205);
            xpc_release(v205);
            xpc_object_t v205 = 0;
            xpc_release(v204);
            xpc_object_t v204 = 0;
            break;
          case 0xA:
          case 0x26:
            xpc_object_t v68 = xpc_string_create("ATM_CALL_END_UnknownError");
            if (!v68) {
              xpc_object_t v68 = xpc_null_create();
            }
            long long v21 = (char *)this + 112;
            xpc_object_t v214 = v21;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v68, &v69);
            xpc_release(v69);
            xpc_object_t v69 = 0;
            xpc_release(v68);
            xpc_object_t v68 = 0;
            xpc_object_t v66 = xpc_string_create("ATM_CALL_END_REASON_UnknownError");
            if (!v66) {
              xpc_object_t v66 = xpc_null_create();
            }
            xpc_object_t v214 = v21;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v66, &v67);
            xpc_release(v67);
            xpc_object_t v67 = 0;
            xpc_release(v66);
            xpc_object_t v66 = 0;
            if (v219 >= 0) {
              std::string::size_type v22 = (const char *)v218;
            }
            else {
              std::string::size_type v22 = (const char *)v218[0];
            }
            xpc_object_t v64 = xpc_string_create(v22);
            if (!v64) {
              xpc_object_t v64 = xpc_null_create();
            }
            xpc_object_t v214 = v21;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v64, &v65);
            xpc_release(v65);
            xpc_object_t v65 = 0;
            xpc_release(v64);
            xpc_object_t v64 = 0;
            break;
          case 0xB:
          case 0x1D:
          case 0x24:
            xpc_object_t v160 = xpc_string_create("ATM_CALL_END_NetworkError");
            if (!v160) {
              xpc_object_t v160 = xpc_null_create();
            }
            uint64_t v19 = (char *)this + 112;
            xpc_object_t v214 = v19;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v160, &v161);
            xpc_release(v161);
            xpc_object_t v161 = 0;
            xpc_release(v160);
            xpc_object_t v160 = 0;
            xpc_object_t v158 = xpc_string_create("ATM_CALL_END_REASON_NetworkError");
            if (!v158) {
              xpc_object_t v158 = xpc_null_create();
            }
            xpc_object_t v214 = v19;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v158, &v159);
            xpc_release(v159);
            xpc_object_t v159 = 0;
            xpc_release(v158);
            xpc_object_t v158 = 0;
            if (v219 >= 0) {
              char v20 = (const char *)v218;
            }
            else {
              char v20 = (const char *)v218[0];
            }
            xpc_object_t v156 = xpc_string_create(v20);
            if (!v156) {
              xpc_object_t v156 = xpc_null_create();
            }
            xpc_object_t v214 = v19;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v156, &v157);
            xpc_release(v157);
            xpc_object_t v157 = 0;
            xpc_release(v156);
            xpc_object_t v156 = 0;
            break;
          case 0xC:
            xpc_object_t v176 = xpc_string_create("ATM_CALL_END_RemoteRequestTerminated");
            if (!v176) {
              xpc_object_t v176 = xpc_null_create();
            }
            int v31 = (char *)this + 112;
            xpc_object_t v214 = v31;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v176, &v177);
            xpc_release(v177);
            xpc_object_t v177 = 0;
            xpc_release(v176);
            xpc_object_t v176 = 0;
            xpc_object_t v174 = xpc_string_create("ATM_CALL_END_REASON_RemoteRequestTerminated");
            if (!v174) {
              xpc_object_t v174 = xpc_null_create();
            }
            xpc_object_t v214 = v31;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v174, &v175);
            xpc_release(v175);
            xpc_object_t v175 = 0;
            xpc_release(v174);
            xpc_object_t v174 = 0;
            break;
          case 0xD:
            xpc_object_t v154 = xpc_string_create("ATM_CALL_END_RequestTimeout");
            if (!v154) {
              xpc_object_t v154 = xpc_null_create();
            }
            uint64_t v32 = (char *)this + 112;
            xpc_object_t v214 = v32;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v154, &v155);
            xpc_release(v155);
            xpc_object_t v155 = 0;
            xpc_release(v154);
            xpc_object_t v154 = 0;
            xpc_object_t v152 = xpc_string_create("ATM_CALL_END_REASON_RequestTimeout");
            if (!v152) {
              xpc_object_t v152 = xpc_null_create();
            }
            xpc_object_t v214 = v32;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v152, &v153);
            xpc_release(v153);
            xpc_object_t v153 = 0;
            xpc_release(v152);
            xpc_object_t v152 = 0;
            if (v219 >= 0) {
              xpc_object_t v33 = (const char *)v218;
            }
            else {
              xpc_object_t v33 = (const char *)v218[0];
            }
            xpc_object_t v150 = xpc_string_create(v33);
            if (!v150) {
              xpc_object_t v150 = xpc_null_create();
            }
            xpc_object_t v214 = v32;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v150, &v151);
            xpc_release(v151);
            xpc_object_t v151 = 0;
            xpc_release(v150);
            xpc_object_t v150 = 0;
            break;
          case 0xE:
            xpc_object_t v148 = xpc_string_create("ATM_CALL_END_TemporarilyUnavailable");
            if (!v148) {
              xpc_object_t v148 = xpc_null_create();
            }
            uint64_t v34 = (char *)this + 112;
            xpc_object_t v214 = v34;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v148, &v149);
            xpc_release(v149);
            xpc_object_t v149 = 0;
            xpc_release(v148);
            xpc_object_t v148 = 0;
            xpc_object_t v146 = xpc_string_create("ATM_CALL_END_REASON_TemporarilyUnavailable");
            if (!v146) {
              xpc_object_t v146 = xpc_null_create();
            }
            xpc_object_t v214 = v34;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v146, &v147);
            xpc_release(v147);
            xpc_object_t v147 = 0;
            xpc_release(v146);
            xpc_object_t v146 = 0;
            if (v219 >= 0) {
              int v35 = (const char *)v218;
            }
            else {
              int v35 = (const char *)v218[0];
            }
            xpc_object_t v144 = xpc_string_create(v35);
            if (!v144) {
              xpc_object_t v144 = xpc_null_create();
            }
            xpc_object_t v214 = v34;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v144, &v145);
            xpc_release(v145);
            xpc_object_t v145 = 0;
            xpc_release(v144);
            xpc_object_t v144 = 0;
            break;
          case 0xF:
            xpc_object_t v172 = xpc_string_create("ATM_CALL_END_EmergencySessionRequired");
            if (!v172) {
              xpc_object_t v172 = xpc_null_create();
            }
            xpc_object_t v36 = (char *)this + 112;
            xpc_object_t v214 = v36;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v172, &v173);
            xpc_release(v173);
            xpc_object_t v173 = 0;
            xpc_release(v172);
            xpc_object_t v172 = 0;
            xpc_object_t v170 = xpc_string_create("ATM_CALL_END_REASON_EmergencySessionRequired");
            if (!v170) {
              xpc_object_t v170 = xpc_null_create();
            }
            xpc_object_t v214 = v36;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v170, &v171);
            xpc_release(v171);
            xpc_object_t v171 = 0;
            xpc_release(v170);
            xpc_object_t v170 = 0;
            break;
          case 0x10:
            xpc_object_t v142 = xpc_string_create("ATM_CALL_END_Forbidden");
            if (!v142) {
              xpc_object_t v142 = xpc_null_create();
            }
            int v37 = (char *)this + 112;
            xpc_object_t v214 = v37;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v142, &v143);
            xpc_release(v143);
            xpc_object_t v143 = 0;
            xpc_release(v142);
            xpc_object_t v142 = 0;
            xpc_object_t v140 = xpc_string_create("ATM_CALL_END_REASON_Forbidden");
            if (!v140) {
              xpc_object_t v140 = xpc_null_create();
            }
            xpc_object_t v214 = v37;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v140, &v141);
            xpc_release(v141);
            xpc_object_t v141 = 0;
            xpc_release(v140);
            xpc_object_t v140 = 0;
            if (v219 >= 0) {
              uint64_t v38 = (const char *)v218;
            }
            else {
              uint64_t v38 = (const char *)v218[0];
            }
            xpc_object_t v138 = xpc_string_create(v38);
            if (!v138) {
              xpc_object_t v138 = xpc_null_create();
            }
            xpc_object_t v214 = v37;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v138, &v139);
            xpc_release(v139);
            xpc_object_t v139 = 0;
            xpc_release(v138);
            xpc_object_t v138 = 0;
            break;
          case 0x11:
            xpc_object_t v136 = xpc_string_create("ATM_CALL_END_InviteResponseTimeout");
            if (!v136) {
              xpc_object_t v136 = xpc_null_create();
            }
            uint64_t v39 = (char *)this + 112;
            xpc_object_t v214 = v39;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v136, &v137);
            xpc_release(v137);
            xpc_object_t v137 = 0;
            xpc_release(v136);
            xpc_object_t v136 = 0;
            xpc_object_t v134 = xpc_string_create("ATM_CALL_END_REASON_InviteResponseTimeout");
            if (!v134) {
              xpc_object_t v134 = xpc_null_create();
            }
            xpc_object_t v214 = v39;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v134, &v135);
            xpc_release(v135);
            xpc_object_t v135 = 0;
            xpc_release(v134);
            xpc_object_t v134 = 0;
            if (v219 >= 0) {
              uint64_t v40 = (const char *)v218;
            }
            else {
              uint64_t v40 = (const char *)v218[0];
            }
            xpc_object_t v132 = xpc_string_create(v40);
            if (!v132) {
              xpc_object_t v132 = xpc_null_create();
            }
            xpc_object_t v214 = v39;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v132, &v133);
            xpc_release(v133);
            xpc_object_t v133 = 0;
            xpc_release(v132);
            xpc_object_t v132 = 0;
            break;
          case 0x12:
          case 0x20:
          case 0x21:
          case 0x23:
            xpc_object_t v130 = xpc_string_create("ATM_CALL_END_LocalError");
            if (!v130) {
              xpc_object_t v130 = xpc_null_create();
            }
            uint64_t v17 = (char *)this + 112;
            xpc_object_t v214 = v17;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v130, &object);
            xpc_release(object);
            xpc_object_t object = 0;
            xpc_release(v130);
            xpc_object_t v130 = 0;
            xpc_object_t v128 = xpc_string_create("ATM_CALL_END_REASON_LocalError");
            if (!v128) {
              xpc_object_t v128 = xpc_null_create();
            }
            xpc_object_t v214 = v17;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v128, &v129);
            xpc_release(v129);
            xpc_object_t v129 = 0;
            xpc_release(v128);
            xpc_object_t v128 = 0;
            if (v219 >= 0) {
              xpc_object_t v18 = (const char *)v218;
            }
            else {
              xpc_object_t v18 = (const char *)v218[0];
            }
            xpc_object_t v126 = xpc_string_create(v18);
            if (!v126) {
              xpc_object_t v126 = xpc_null_create();
            }
            xpc_object_t v214 = v17;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v126, &v127);
            xpc_release(v127);
            xpc_object_t v127 = 0;
            xpc_release(v126);
            xpc_object_t v126 = 0;
            break;
          case 0x13:
            if (v13)
            {
              xpc_object_t v124 = xpc_string_create("ATM_CALL_END_REASON_MediaHandOverTimeout");
              if (!v124) {
                xpc_object_t v124 = xpc_null_create();
              }
              xpc_object_t v214 = (char *)this + 112;
              xpc_object_t v215 = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v214, &v124, &v125);
              xpc_release(v125);
              xpc_object_t v125 = 0;
              xpc_release(v124);
              xpc_object_t v124 = 0;
              uint64_t v41 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
              (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v41);
              uint64_t v42 = (unsigned char *)ImsOutStream::operator<<(v41, "media timeout after handover ");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v42[17] = 0;
            }
            else
            {
              xpc_object_t v122 = xpc_string_create("ATM_CALL_END_REASON_MediaError");
              if (!v122) {
                xpc_object_t v122 = xpc_null_create();
              }
              xpc_object_t v214 = (char *)this + 112;
              xpc_object_t v215 = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v214, &v122, &v123);
              xpc_release(v123);
              xpc_object_t v123 = 0;
              xpc_release(v122);
              xpc_object_t v122 = 0;
            }
            xpc_object_t v120 = xpc_string_create("ATM_CALL_END_MediaError");
            if (!v120) {
              xpc_object_t v120 = xpc_null_create();
            }
            uint64_t v60 = (char *)this + 112;
            xpc_object_t v214 = v60;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v120, &v121);
            xpc_release(v121);
            xpc_object_t v121 = 0;
            xpc_release(v120);
            xpc_object_t v120 = 0;
            if (v219 >= 0) {
              uint64_t v61 = (const char *)v218;
            }
            else {
              uint64_t v61 = (const char *)v218[0];
            }
            xpc_object_t v118 = xpc_string_create(v61);
            if (!v118) {
              xpc_object_t v118 = xpc_null_create();
            }
            xpc_object_t v214 = v60;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v118, &v119);
            xpc_release(v119);
            xpc_object_t v119 = 0;
            xpc_release(v118);
            xpc_object_t v118 = 0;
            break;
          case 0x14:
            if (v13)
            {
              xpc_object_t v116 = xpc_string_create("ATM_CALL_END_REASON_MediaHandOverTimeout");
              if (!v116) {
                xpc_object_t v116 = xpc_null_create();
              }
              xpc_object_t v214 = (char *)this + 112;
              xpc_object_t v215 = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v214, &v116, &v117);
              xpc_release(v117);
              xpc_object_t v117 = 0;
              xpc_release(v116);
              xpc_object_t v116 = 0;
              uint64_t v43 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
              (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v43);
              uint64_t v44 = (unsigned char *)ImsOutStream::operator<<(v43, "media timeout after handover ");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v44[17] = 0;
            }
            else
            {
              xpc_object_t v114 = xpc_string_create("ATM_CALL_END_REASON_MediaTimeout");
              if (!v114) {
                xpc_object_t v114 = xpc_null_create();
              }
              xpc_object_t v214 = (char *)this + 112;
              xpc_object_t v215 = "status_code";
              xpc::dict::object_proxy::operator=((uint64_t)&v214, &v114, &v115);
              xpc_release(v115);
              xpc_object_t v115 = 0;
              xpc_release(v114);
              xpc_object_t v114 = 0;
            }
            xpc_object_t v112 = xpc_string_create("ATM_CALL_END_MediaTimeout");
            if (!v112) {
              xpc_object_t v112 = xpc_null_create();
            }
            uint64_t v62 = (char *)this + 112;
            xpc_object_t v214 = v62;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v112, &v113);
            xpc_release(v113);
            xpc_object_t v113 = 0;
            xpc_release(v112);
            xpc_object_t v112 = 0;
            if (v219 >= 0) {
              int64_t v63 = (const char *)v218;
            }
            else {
              int64_t v63 = (const char *)v218[0];
            }
            xpc_object_t v110 = xpc_string_create(v63);
            if (!v110) {
              xpc_object_t v110 = xpc_null_create();
            }
            xpc_object_t v214 = v62;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v110, &v111);
            xpc_release(v111);
            xpc_object_t v111 = 0;
            xpc_release(v110);
            xpc_object_t v110 = 0;
            break;
          case 0x15:
            xpc_object_t v108 = xpc_string_create("ATM_CALL_END_MediaHeartbeatTimeout");
            if (!v108) {
              xpc_object_t v108 = xpc_null_create();
            }
            unint64_t v45 = (char *)this + 112;
            xpc_object_t v214 = v45;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v108, &v109);
            xpc_release(v109);
            xpc_object_t v109 = 0;
            xpc_release(v108);
            xpc_object_t v108 = 0;
            xpc_object_t v106 = xpc_string_create("ATM_CALL_END_REASON_MediaHeartbeatTimeout");
            if (!v106) {
              xpc_object_t v106 = xpc_null_create();
            }
            xpc_object_t v214 = v45;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v106, &v107);
            xpc_release(v107);
            xpc_object_t v107 = 0;
            xpc_release(v106);
            xpc_object_t v106 = 0;
            if (v219 >= 0) {
              int v46 = (const char *)v218;
            }
            else {
              int v46 = (const char *)v218[0];
            }
            xpc_object_t v104 = xpc_string_create(v46);
            if (!v104) {
              xpc_object_t v104 = xpc_null_create();
            }
            xpc_object_t v214 = v45;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v104, &v105);
            xpc_release(v105);
            xpc_object_t v105 = 0;
            xpc_release(v104);
            xpc_object_t v104 = 0;
            break;
          case 0x16:
            xpc_object_t v102 = xpc_string_create("ATM_CALL_END_LocalSocketError");
            if (!v102) {
              xpc_object_t v102 = xpc_null_create();
            }
            uint64_t v47 = (char *)this + 112;
            xpc_object_t v214 = v47;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v102, &v103);
            xpc_release(v103);
            xpc_object_t v103 = 0;
            xpc_release(v102);
            xpc_object_t v102 = 0;
            xpc_object_t v100 = xpc_string_create("ATM_CALL_END_REASON_LocalSocketError");
            if (!v100) {
              xpc_object_t v100 = xpc_null_create();
            }
            xpc_object_t v214 = v47;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v100, &v101);
            xpc_release(v101);
            xpc_object_t v101 = 0;
            xpc_release(v100);
            xpc_object_t v100 = 0;
            if (v219 >= 0) {
              uint64_t v48 = (const char *)v218;
            }
            else {
              uint64_t v48 = (const char *)v218[0];
            }
            xpc_object_t v98 = xpc_string_create(v48);
            if (!v98) {
              xpc_object_t v98 = xpc_null_create();
            }
            xpc_object_t v214 = v47;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v98, &v99);
            xpc_release(v99);
            xpc_object_t v99 = 0;
            xpc_release(v98);
            xpc_object_t v98 = 0;
            break;
          case 0x17:
            xpc_object_t v96 = xpc_string_create("ATM_CALL_END_WaitForRingingTimeout");
            if (!v96) {
              xpc_object_t v96 = xpc_null_create();
            }
            uint64_t v49 = (char *)this + 112;
            xpc_object_t v214 = v49;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v96, &v97);
            xpc_release(v97);
            xpc_object_t v97 = 0;
            xpc_release(v96);
            xpc_object_t v96 = 0;
            xpc_object_t v94 = xpc_string_create("ATM_CALL_END_REASON_WaitForRingingTimeout");
            if (!v94) {
              xpc_object_t v94 = xpc_null_create();
            }
            xpc_object_t v214 = v49;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v94, &v95);
            xpc_release(v95);
            xpc_object_t v95 = 0;
            xpc_release(v94);
            xpc_object_t v94 = 0;
            xpc_object_t v92 = xpc_string_create("ATM_CALL_Setup_failure");
            if (!v92) {
              xpc_object_t v92 = xpc_null_create();
            }
            xpc_object_t v214 = v49;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v92, &v93);
            xpc_release(v93);
            xpc_object_t v93 = 0;
            xpc_release(v92);
            xpc_object_t v92 = 0;
            break;
          case 0x18:
            xpc_object_t v84 = xpc_string_create("ATM_CALL_END_LocalQoSTimeout");
            if (!v84) {
              xpc_object_t v84 = xpc_null_create();
            }
            uint64_t v50 = (char *)this + 112;
            xpc_object_t v214 = v50;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v84, &v85);
            xpc_release(v85);
            xpc_object_t v85 = 0;
            xpc_release(v84);
            xpc_object_t v84 = 0;
            if (v219 >= 0) {
              uint64_t v51 = (const char *)v218;
            }
            else {
              uint64_t v51 = (const char *)v218[0];
            }
            xpc_object_t v82 = xpc_string_create(v51);
            if (!v82) {
              xpc_object_t v82 = xpc_null_create();
            }
            xpc_object_t v214 = v50;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v82, &v83);
            xpc_release(v83);
            xpc_object_t v83 = 0;
            xpc_release(v82);
            xpc_object_t v82 = 0;
            break;
          case 0x19:
            xpc_object_t v90 = xpc_string_create("ATM_CALL_END_VoiceNotSupported");
            if (!v90) {
              xpc_object_t v90 = xpc_null_create();
            }
            uint64_t v52 = (char *)this + 112;
            xpc_object_t v214 = v52;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v90, &v91);
            xpc_release(v91);
            xpc_object_t v91 = 0;
            xpc_release(v90);
            xpc_object_t v90 = 0;
            xpc_object_t v88 = xpc_string_create("ATM_CALL_END_REASON_VoiceNotSupported");
            if (!v88) {
              xpc_object_t v88 = xpc_null_create();
            }
            xpc_object_t v214 = v52;
            xpc_object_t v215 = "status_code";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v88, &v89);
            xpc_release(v89);
            xpc_object_t v89 = 0;
            xpc_release(v88);
            xpc_object_t v88 = 0;
            if (v219 >= 0) {
              int v53 = (const char *)v218;
            }
            else {
              int v53 = (const char *)v218[0];
            }
            xpc_object_t v86 = xpc_string_create(v53);
            if (!v86) {
              xpc_object_t v86 = xpc_null_create();
            }
            xpc_object_t v214 = v52;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v86, &v87);
            xpc_release(v87);
            xpc_object_t v87 = 0;
            xpc_release(v86);
            xpc_object_t v86 = 0;
            break;
          case 0x1A:
            xpc_object_t v168 = xpc_string_create("ATM_CALL_END_EmergencyStateExited");
            if (!v168) {
              xpc_object_t v168 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v168, &v169);
            xpc_release(v169);
            xpc_object_t v169 = 0;
            xpc_release(v168);
            xpc_object_t v168 = 0;
            break;
          case 0x1B:
            xpc_object_t v166 = xpc_string_create("ATM_CALL_END_AccessBarring");
            if (!v166) {
              xpc_object_t v166 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v166, &v167);
            xpc_release(v167);
            xpc_object_t v167 = 0;
            xpc_release(v166);
            xpc_object_t v166 = 0;
            break;
          case 0x1C:
            xpc_object_t v80 = xpc_string_create("ATM_CALL_END_OnEmergencyCall");
            if (!v80) {
              xpc_object_t v80 = xpc_null_create();
            }
            long long v54 = (char *)this + 112;
            xpc_object_t v214 = v54;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v80, &v81);
            xpc_release(v81);
            xpc_object_t v81 = 0;
            xpc_release(v80);
            xpc_object_t v80 = 0;
            if (v219 >= 0) {
              uint64_t v55 = (const char *)v218;
            }
            else {
              uint64_t v55 = (const char *)v218[0];
            }
            xpc_object_t v78 = xpc_string_create(v55);
            if (!v78) {
              xpc_object_t v78 = xpc_null_create();
            }
            xpc_object_t v214 = v54;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v78, &v79);
            xpc_release(v79);
            xpc_object_t v79 = 0;
            xpc_release(v78);
            xpc_object_t v78 = 0;
            break;
          case 0x1E:
            xpc_object_t v76 = xpc_string_create("ATM_CALL_END_Deinitializing");
            if (!v76) {
              xpc_object_t v76 = xpc_null_create();
            }
            int v56 = (char *)this + 112;
            xpc_object_t v214 = v56;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v76, &v77);
            xpc_release(v77);
            xpc_object_t v77 = 0;
            xpc_release(v76);
            xpc_object_t v76 = 0;
            if (v219 >= 0) {
              uint64_t v57 = (const char *)v218;
            }
            else {
              uint64_t v57 = (const char *)v218[0];
            }
            xpc_object_t v74 = xpc_string_create(v57);
            if (!v74) {
              xpc_object_t v74 = xpc_null_create();
            }
            xpc_object_t v214 = v56;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v74, &v75);
            xpc_release(v75);
            xpc_object_t v75 = 0;
            xpc_release(v74);
            xpc_object_t v74 = 0;
            break;
          case 0x1F:
            xpc_object_t v72 = xpc_string_create("ATM_CALL_END_NoEmergencyLocation");
            if (!v72) {
              xpc_object_t v72 = xpc_null_create();
            }
            uint64_t v58 = (char *)this + 112;
            xpc_object_t v214 = v58;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v72, &v73);
            xpc_release(v73);
            xpc_object_t v73 = 0;
            xpc_release(v72);
            xpc_object_t v72 = 0;
            if (v219 >= 0) {
              uint64_t v59 = (const char *)v218;
            }
            else {
              uint64_t v59 = (const char *)v218[0];
            }
            xpc_object_t v70 = xpc_string_create(v59);
            if (!v70) {
              xpc_object_t v70 = xpc_null_create();
            }
            xpc_object_t v214 = v58;
            xpc_object_t v215 = "callEndStatus";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v70, &v71);
            xpc_release(v71);
            xpc_object_t v71 = 0;
            xpc_release(v70);
            xpc_object_t v70 = 0;
            break;
          case 0x22:
            xpc_object_t v164 = xpc_string_create("ATM_CALL_END_LocalBusy");
            if (!v164) {
              xpc_object_t v164 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v164, &v165);
            xpc_release(v165);
            xpc_object_t v165 = 0;
            xpc_release(v164);
            xpc_object_t v164 = 0;
            break;
          case 0x25:
            xpc_object_t v162 = xpc_string_create("ATM_CALL_END_RequiresRedial");
            if (!v162) {
              xpc_object_t v162 = xpc_null_create();
            }
            xpc_object_t v214 = (char *)this + 112;
            xpc_object_t v215 = "end_reason";
            xpc::dict::object_proxy::operator=((uint64_t)&v214, &v162, &v163);
            xpc_release(v163);
            xpc_object_t v163 = 0;
            xpc_release(v162);
            xpc_object_t v162 = 0;
            break;
          default:
            break;
        }
        if (SHIBYTE(v219) < 0) {
          operator delete(v218[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C55E7BCC(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 65) < 0) {
    operator delete(*(void **)(v2 - 88));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_116CallEndEventImpl13applyAddendumEN3xpc4dictE_block_invoke(uint64_t a1, const char *a2, xpc_object_t object)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_object_t objecta = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 8) + 64))(v4 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 + 8) + 16))(v4 + 8, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"overriding ", 11);
  *(unsigned char *)(v5 + 17) = 0;
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)a2, v6);
  *(unsigned char *)(v5 + 17) = 0;
  std::vector<unsigned int>::const_iterator v7 = *(void **)(v5 + 8);
  LOBYTE(__p[0]) = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
  *(unsigned char *)(v5 + 17) = 0;
  xpc::object::to_string((uint64_t *)__p, (xpc::object *)&objecta);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v9 = objecta;
  if (objecta) {
    xpc_retain(objecta);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  __p[0] = (void *)(v4 + 112);
  __p[1] = (void *)a2;
  xpc::dict::object_proxy::operator=((uint64_t)__p, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(objecta);
  return 1;
}

void sub_1C55E7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
}

void SipUserAgentHeader::~SipUserAgentHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipUserAgentHeader::clone(SipUserAgentHeader *this)
{
}

void sub_1C55E8048(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void ims::CFType::~CFType(ims::CFType *this)
{
  *(void *)this = &unk_1F20E38B0;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

void ims::CFType::setRef(ims::CFType *this, CFTypeRef cf, int a3)
{
  CFTypeRef v4 = (CFTypeRef)*((void *)this + 1);
  if (v4 != cf)
  {
    if (cf && v4)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 != (*(uint64_t (**)(ims::CFType *))(*(void *)this + 32))(this)) {
        return;
      }
      CFTypeRef v4 = (CFTypeRef)*((void *)this + 1);
    }
    if (v4) {
      CFRelease(v4);
    }
    *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = cf;
    if (cf && a3)
    {
      CFRetain(cf);
    }
  }
}

uint64_t ims::CFType::setRef(ims::CFType *this, const ims::CFType *a2)
{
  return (*(uint64_t (**)(ims::CFType *, void, uint64_t))(*(void *)this + 48))(this, *((void *)a2 + 1), 1);
}

void ims::CFType::shortLog(ims::CFType *this, void *a2, ImsOutStream *a3, char a4)
{
  int v5 = (int)a3;
  if (!this)
  {
    CFTypeID TypeID = CFNullGetTypeID();
    if (TypeID == CFBooleanGetTypeID())
    {
LABEL_25:
      if (a4)
      {
        std::string::basic_string[abi:ne180100](&__b, v5, 32);
        LoggableString::LoggableString(&__p, &__b);
        (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__b.__r_.__value_.__l.__data_);
        }
      }
      int Value = CFBooleanGetValue(this);
      BOOL v19 = Value == 0;
      if (Value) {
        BOOL v13 = "true";
      }
      else {
        BOOL v13 = "false";
      }
      char v12 = (void *)a2[1];
      if (v19) {
        uint64_t v14 = 5;
      }
      else {
        uint64_t v14 = 4;
      }
LABEL_36:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
LABEL_37:
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      return;
    }
    goto LABEL_11;
  }
  CFTypeID v8 = CFGetTypeID(this);
  if (v8 == CFStringGetTypeID())
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__b, v5, 32);
      LoggableString::LoggableString(&__p, &__b);
      (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
    }
    xpc_object_t v9 = (void *)a2[1];
    __p.__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    ims::CFString::asString((const __CFString *)this, (const void *)0x8000100, &__p);
    (*(void (**)(void *, std::string *))(*a2 + 32))(a2, &__p);
    xpc_object_t v10 = (void *)a2[1];
    __b.__r_.__value_.__s.__data_[0] = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__b, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  CFTypeID v15 = CFGetTypeID(this);
  if (v15 == CFNumberGetTypeID())
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__b, v5, 32);
      LoggableString::LoggableString(&__p, &__b);
      (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
    }
    ims::CFNumber::asUint32(this, v16);
    std::ostream::operator<<();
    goto LABEL_37;
  }
  CFTypeID v17 = CFGetTypeID(this);
  if (v17 == CFBooleanGetTypeID()) {
    goto LABEL_25;
  }
  CFTypeID v20 = CFGetTypeID(this);
  if (v20 == CFArrayGetTypeID())
  {
    CFArrayRef theArray = this;
    CFRetain(this);
    xpc_object_t v30 = &unk_1F20E39B8;
    long long v21 = (void *)a2[1];
    __p.__r_.__value_.__s.__data_[0] = 91;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&__p, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = (ims::CFType *)CFArrayGetValueAtIndex(theArray, i);
          ims::CFType::shortLog(ValueAtIndex, a2, (ImsOutStream *)(v5 + 4), 1, v25);
        }
      }
    }
    std::string::basic_string[abi:ne180100](&__b, v5, 32);
    LoggableString::LoggableString(&__p, &__b);
    (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
    uint64_t v26 = (void *)a2[1];
    char v34 = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v34, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_47;
  }
  CFTypeID v27 = CFGetTypeID(this);
  if (v27 != CFDictionaryGetTypeID())
  {
LABEL_11:
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__b, v5, 32);
      LoggableString::LoggableString(&__p, &__b);
      (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
    }
    char v12 = (void *)a2[1];
    BOOL v13 = "???";
    uint64_t v14 = 3;
    goto LABEL_36;
  }
  CFArrayRef theArray = this;
  CFRetain(this);
  xpc_object_t v30 = &unk_1F20E3A10;
  int v28 = (void *)a2[1];
  __p.__r_.__value_.__s.__data_[0] = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  ims::CFDictionary::shortLog((ims::CFDictionary *)&v30, (ImsOutStream *)a2, (ImsOutStream *)(v5 + 4), 1);
  std::string::basic_string[abi:ne180100](&__b, v5, 32);
  LoggableString::LoggableString(&__p, &__b);
  (*(void (**)(void *, std::string *))(*a2 + 40))(a2, &__p);
  uint64_t v29 = (void *)a2[1];
  char v34 = 125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v34, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(void *, void *(*)(void *)))(*a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_47:
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  ims::CFType::~CFType((ims::CFType *)&v30);
}

void sub_1C55E8898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a10);
  _Unwind_Resume(a1);
}

void ims::CFString::asString(const __CFString *this@<X0>, const void *a2@<X1>, std::string *a3@<X8>)
{
  if (this && (CFStringEncoding v4 = a2, v6 = CFGetTypeID(this), v6 == CFStringGetTypeID()))
  {
    memset(&__p, 0, sizeof(__p));
    if (ims::convertCFString(this, &__p, v4))
    {
      *a3 = __p;
    }
    else
    {
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_1C55E89F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ims::CFNumber *ims::CFNumber::asUint32(ims::CFNumber *this, const void *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    CFTypeID v3 = CFGetTypeID(this);
    if (v3 == CFNumberGetTypeID())
    {
      if (ims::CFNumber::isFloatingPointType(v2, v4))
      {
        return (ims::CFNumber *)ims::CFNumber::asDouble(v2, v5);
      }
      else
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(v2, kCFNumberSInt64Type, &valuePtr);
        return (ims::CFNumber *)valuePtr;
      }
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void ims::CFDictionary::shortLog(ims::CFDictionary *this, ImsOutStream *a2, ImsOutStream *a3, int a4)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v14 = 0;
  CFTypeID v15 = 0;
  uint64_t v16 = 0;
  ims::CFDictionary::getKeysAndValues((uint64_t)this, (uint64_t)&v17, (const void ***)&v14);
  uint64_t v7 = v17;
  if (v18 != v17)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      xpc_object_t v10 = (ims::CFType *)*((void *)v14 + v9);
      if (a4)
      {
        std::string::basic_string[abi:ne180100](&v12, (int)a3, 32);
        LoggableString::LoggableString(&__p, &v12);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
      }
      LoggableString::LoggableString(&__p, (const std::string *)(v7 + v8));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ims::CFType::shortLog(v10, a2, a3, 0, v11);
      ++v9;
      uint64_t v7 = v17;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3));
  }
  if (v14)
  {
    CFTypeID v15 = v14;
    operator delete(v14);
  }
  uint64_t v14 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_1C55E8C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *__p,char *a22,uint64_t a23,char a24)
{
  if (__p)
  {
    a22 = __p;
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *ims::CFString::CFString(void *a1, char *a2, CFStringEncoding a3)
{
  *a1 = &unk_1F20E3908;
  a1[1] = 0;
  ims::CFString::set((uint64_t)a1, a2, a3);
  return a1;
}

void sub_1C55E8D10(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

void ims::CFString::set(uint64_t a1, char *cStr, CFStringEncoding encoding)
{
  CFTypeID v6 = *(const void **)(a1 + 8);
  if (v6) {
    CFRelease(v6);
  }
  if (cStr[23] < 0)
  {
    if (!*((void *)cStr + 1))
    {
LABEL_11:
      uint64_t v8 = &stru_1F20EAF20;
      goto LABEL_12;
    }
    cStr = *(char **)cStr;
  }
  else if (!cStr[23])
  {
    goto LABEL_11;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, cStr, encoding);
  if (v7) {
    uint64_t v8 = (__CFString *)v7;
  }
  else {
    uint64_t v8 = &stru_1F20EAF20;
  }
LABEL_12:
  *(void *)(a1 + 8) = v8;
}

ImsOutStream *ims::CFString::log(const __CFString **this, ImsOutStream *a2)
{
  ims::CFString::asString(this[1], (const void *)0x8000100, &__p);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C55E8E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ims::CFNumber *ims::CFNumber::CFNumber(ims::CFNumber *this, uint64_t a2)
{
  *(void *)this = &unk_1F20E3960;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  uint64_t valuePtr = a2;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  return this;
}

void sub_1C55E8EA4(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

ims::CFNumber *ims::CFNumber::CFNumber(ims::CFNumber *this, unsigned int a2)
{
  *(void *)this = &unk_1F20E3960;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  uint64_t valuePtr = a2;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  return this;
}

{
  uint64_t valuePtr;

  *(void *)this = &unk_1F20E3960;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  uint64_t valuePtr = a2;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  return this;
}

void sub_1C55E8F1C(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

void sub_1C55E8F94(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

ims::CFNumber *ims::CFNumber::CFNumber(ims::CFNumber *this, double a2)
{
  *(void *)this = &unk_1F20E3960;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  double valuePtr = a2;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  return this;
}

void sub_1C55E9008(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

double ims::CFNumber::asDouble(ims::CFNumber *this, const void *a2)
{
  double v2 = 0.0;
  if (this)
  {
    CFTypeID v4 = CFGetTypeID(this);
    if (v4 == CFNumberGetTypeID())
    {
      if (ims::CFNumber::isFloatingPointType(this, v5))
      {
        double valuePtr = 0.0;
        CFNumberGetValue(this, kCFNumberDoubleType, &valuePtr);
        return valuePtr;
      }
      else
      {
        return (double)ims::CFNumber::asUint32(this, v6);
      }
    }
  }
  return v2;
}

const __CFNumber *ims::CFNumber::isFloatingPointType(const __CFNumber *this, const void *a2)
{
  if (this)
  {
    CFNumberRef v2 = this;
    CFTypeID v3 = CFGetTypeID(this);
    if (v3 == CFNumberGetTypeID()) {
      return (const __CFNumber *)(CFNumberIsFloatType(v2) != 0);
    }
    else {
      return 0;
    }
  }
  return this;
}

ImsOutStream *ims::CFNumber::log(const __CFNumber **this, ImsOutStream *a2)
{
  unsigned int v5 = ims::CFNumber::isFloatingPointType(this[1], a2);
  CFTypeID v6 = this[1];
  if (v5)
  {
    ims::CFNumber::asDouble(v6, v4);
    std::ostream::operator<<();
  }
  else
  {
    ims::CFNumber::asUint32(v6, v4);
    std::ostream::operator<<();
  }
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

ims::CFData *ims::CFData::CFData(ims::CFData *this, UInt8 *a2, CFIndex a3)
{
  *(void *)this = &unk_1F20D2EE0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  ims::CFData::set(this, a2, a3);
  return this;
}

void sub_1C55E9198(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

CFDataRef ims::CFData::set(ims::CFData *this, UInt8 *bytes, CFIndex length)
{
  CFTypeID v6 = (const void *)*((void *)this + 1);
  if (v6) {
    CFRelease(v6);
  }
  CFDataRef result = CFDataCreate(0, bytes, length);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = result;
  return result;
}

ims::CFData *ims::CFData::CFData(ims::CFData *a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20D2EE0;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  ims::CFData::set(a1, *(UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_1C55E924C(_Unwind_Exception *a1)
{
  ims::CFType::~CFType(v1);
  _Unwind_Resume(a1);
}

void ims::CFMutableArray::appendValue(ims::CFMutableArray *this, const ims::CFType *a2)
{
  CFTypeID v4 = (__CFArray *)*((void *)this + 1);
  if (!v4)
  {
    ims::CFMutableArray::create(this);
    CFTypeID v4 = (__CFArray *)*((void *)this + 1);
  }
  unsigned int v5 = (const void *)*((void *)a2 + 1);
  CFArrayAppendValue(v4, v5);
}

CFMutableArrayRef ims::CFMutableArray::create(ims::CFMutableArray *this)
{
  CFNumberRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  CFMutableArrayRef result = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = result;
  return result;
}

void ims::CFMutableArray::appendValue(ims::CFMutableArray *this, const void *value)
{
  CFTypeID v4 = (__CFArray *)*((void *)this + 1);
  if (!v4)
  {
    ims::CFMutableArray::create(this);
    CFTypeID v4 = (__CFArray *)*((void *)this + 1);
  }
  CFArrayAppendValue(v4, value);
}

void ims::CFDictionary::getKeysAndValues(uint64_t a1, const void ***a2, const void ***a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 8);
  if (v4)
  {
    CFIndex Count = CFDictionaryGetCount(v4);
    if (Count)
    {
      unint64_t v8 = Count;
      std::vector<void const*>::resize(a2, Count);
      std::vector<void const*>::resize(a3, v8);
      CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 8);
      xpc_object_t v10 = *a2;
      BOOL v11 = *a3;
      CFDictionaryGetKeysAndValues(v9, v10, v11);
    }
  }
}

uint64_t ims::CFDictionary::keysAsStrings(uint64_t a1, uint64_t a2, const void *a3)
{
  long long v21 = 0;
  std::string::size_type v22 = 0;
  uint64_t v23 = 0;
  memset(&__p, 0, 24);
  ims::CFDictionary::getKeysAndValues(a1, (const void ***)&v21, (const void ***)&__p);
  if (__p.__first_)
  {
    __p.__begin_ = __p.__first_;
    operator delete(__p.__first_);
  }
  unsigned int v5 = (CFTypeRef *)v21;
  CFTypeID v6 = v22;
  if (v21 == v22)
  {
    uint64_t v18 = 1;
    if (!v21) {
      return v18;
    }
    goto LABEL_22;
  }
  while (1)
  {
    CFStringRef v7 = (const __CFString *)*v5;
    if (!*v5) {
      break;
    }
    CFTypeID v8 = CFGetTypeID(*v5);
    if (v8 != CFStringGetTypeID()) {
      break;
    }
    ims::CFString::asString(v7, a3, &v20);
    xpc_object_t v10 = *(std::string **)(a2 + 8);
    unint64_t v9 = *(void *)(a2 + 16);
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *(void *)a2) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)a2) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v15) {
        uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v16 + v12;
      __p.__first_ = v16;
      __p.__begin_ = v17;
      __p.__end_cap_.__value_ = &v16[v15];
      *uint64_t v17 = v20;
      memset(&v20, 0, sizeof(v20));
      __p.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__p);
      BOOL v11 = *(std::string **)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
    }
    else
    {
      std::string *v10 = v20;
      BOOL v11 = v10 + 1;
    }
    *(void *)(a2 + 8) = v11;
    if (++v5 == v6)
    {
      uint64_t v18 = 1;
      goto LABEL_21;
    }
  }
  uint64_t v18 = 0;
LABEL_21:
  unsigned int v5 = (CFTypeRef *)v21;
  if (v21)
  {
LABEL_22:
    std::string::size_type v22 = v5;
    operator delete(v5);
  }
  return v18;
}

void sub_1C55E95A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<void const*>::resize(void *a1, unint64_t a2)
{
  CFTypeID v3 = (char *)*a1;
  CFDictionaryRef v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    std::string v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    std::string v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v7, v11);
  unint64_t v13 = &v12[8 * v5];
  unint64_t v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  uint64_t v16 = &v13[8 * v6];
  uint64_t v18 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    uint64_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

uint64_t ims::CFDictionary::getKeysAndValues(uint64_t a1, uint64_t a2, const void ***a3)
{
  std::__split_buffer<std::string> __p = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  ims::CFDictionary::getKeysAndValues(a1, (const void ***)&__p, a3);
  CFDictionaryRef v4 = (CFTypeRef *)__p;
  unint64_t v5 = v21;
  if (__p == v21)
  {
    uint64_t v17 = 1;
    if (!__p) {
      return v17;
    }
    goto LABEL_20;
  }
  while (1)
  {
    CFStringRef v6 = (const __CFString *)*v4;
    if (!*v4) {
      break;
    }
    CFTypeID v7 = CFGetTypeID(*v4);
    if (v7 != CFStringGetTypeID()) {
      break;
    }
    ims::CFString::asString(v6, (const void *)0x8000100, &v19);
    uint64_t v9 = *(std::string **)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16);
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a2) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a2) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v14) {
        unint64_t v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v16 = v15 + v11;
      __v.__first_ = v15;
      __v.__begin_ = v16;
      __v.__end_cap_.__value_ = &v15[v14];
      *uint64_t v16 = v19;
      memset(&v19, 0, sizeof(v19));
      __v.__end_ = v16 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v10 = *(std::string **)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      *uint64_t v9 = v19;
      uint64_t v10 = v9 + 1;
    }
    *(void *)(a2 + 8) = v10;
    if (++v4 == v5)
    {
      uint64_t v17 = 1;
      goto LABEL_19;
    }
  }
  uint64_t v17 = 0;
LABEL_19:
  CFDictionaryRef v4 = (CFTypeRef *)__p;
  if (__p)
  {
LABEL_20:
    long long v21 = v4;
    operator delete(v4);
  }
  return v17;
}

void sub_1C55E98DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::CFArray::asStrings(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  CFArrayRef v6 = *(const __CFArray **)(a1 + 8);
  if (v6 && (Count = CFArrayGetCount(v6), CFIndex v34 = 0, Count >= 1))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (ims::CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v9);
      if (!ValueAtIndex)
      {
        __v.__end_cap_ = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20B2680;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)&_bambiDomain;
        LODWORD(__v.__end_) = 0x40000000;
        uint64_t v22 = ImsResult::operator<<<char [6]>((uint64_t)&__v, "item ");
        uint64_t v23 = ImsResult::operator<<<long>(v22);
        uint64_t v24 = (const std::string *)ImsResult::operator<<<char [9]>(v23, " is NULL");
        ImsResult::ImsResult((ImsResult *)a3, v24);
        goto LABEL_22;
      }
      unint64_t v11 = ValueAtIndex;
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFStringGetTypeID()) {
        break;
      }
      uint64_t v29 = &unk_1F20E38B0;
      xpc_object_t v30 = v11;
      CFRetain(v11);
      uint64_t v29 = &unk_1F20E3908;
      ims::CFString::asString((const __CFString *)v30, (const void *)0x8000100, &v28);
      unint64_t v14 = *(std::string **)(a2 + 8);
      unint64_t v13 = *(void *)(a2 + 16);
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *(void *)a2) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a2) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v17;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v19) {
          std::string v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v19);
        }
        else {
          std::string v20 = 0;
        }
        long long v21 = v20 + v16;
        __v.__first_ = v20;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v20[v19];
        *long long v21 = v28;
        memset(&v28, 0, sizeof(v28));
        __v.__end_ = v21 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        unint64_t v15 = *(std::string **)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        std::string *v14 = v28;
        unint64_t v15 = v14 + 1;
      }
      *(void *)(a2 + 8) = v15;
      ims::CFType::~CFType((ims::CFType *)&v29);
      CFIndex v9 = v34 + 1;
      CFIndex v34 = v9;
      if (v9 >= v8) {
        goto LABEL_19;
      }
    }
    __v.__end_cap_ = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20B2680;
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)&_bambiDomain;
    LODWORD(__v.__end_) = 0x40000000;
    uint64_t v25 = ImsResult::operator<<<char [6]>((uint64_t)&__v, "item ");
    uint64_t v26 = ImsResult::operator<<<long>(v25);
    CFTypeID v27 = (const std::string *)ImsResult::operator<<<char [17]>(v26, " is not a string");
    ImsResult::ImsResult((ImsResult *)a3, v27);
LABEL_22:
    ImsResult::~ImsResult((ImsResult *)&__v);
  }
  else
  {
LABEL_19:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
}

void sub_1C55E9C5C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, std::__split_buffer<std::string> *__pa, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void ims::CFArray::asUint32s(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  a2[1] = *a2;
  CFArrayRef v5 = *(const __CFArray **)(a1 + 8);
  if (v5 && (Count = CFArrayGetCount(v5), CFIndex v39 = 0, Count >= 1))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (ims::CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v9);
      if (!ValueAtIndex)
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v33 = &unk_1F20B2680;
        CFIndex v34 = (ims::CFNumber *)&_bambiDomain;
        int v35 = 0x40000000;
        uint64_t v27 = ImsResult::operator<<<char [6]>((uint64_t)&v33, "item ");
        uint64_t v28 = ImsResult::operator<<<long>(v27);
        uint64_t v29 = (const std::string *)ImsResult::operator<<<char [9]>(v28, " is NULL");
        ImsResult::ImsResult((ImsResult *)a3, v29);
        goto LABEL_26;
      }
      unint64_t v11 = ValueAtIndex;
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFNumberGetTypeID()) {
        break;
      }
      long long v33 = &unk_1F20E38B0;
      CFIndex v34 = v11;
      CFRetain(v11);
      long long v33 = &unk_1F20E3960;
      unsigned int v14 = ims::CFNumber::asUint32(v34, v13);
      unsigned int v15 = v14;
      unint64_t v17 = a2[1];
      unint64_t v16 = (unint64_t)a2[2];
      if ((unint64_t)v17 >= v16)
      {
        unint64_t v19 = *a2;
        uint64_t v20 = v17 - *a2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a2 + 2), v23);
          unint64_t v19 = *a2;
          unint64_t v17 = a2[1];
        }
        else
        {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (unsigned int *)&v24[4 * v20];
        *uint64_t v25 = v15;
        unint64_t v18 = v25 + 1;
        while (v17 != v19)
        {
          unsigned int v26 = *--v17;
          *--uint64_t v25 = v26;
        }
        *a2 = v25;
        a2[1] = v18;
        a2[2] = (unsigned int *)&v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unint64_t v17 = v14;
        unint64_t v18 = v17 + 1;
      }
      a2[1] = v18;
      ims::CFType::~CFType((ims::CFType *)&v33);
      CFIndex v9 = v39 + 1;
      CFIndex v39 = v9;
      if (v9 >= v8) {
        goto LABEL_23;
      }
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v33 = &unk_1F20B2680;
    CFIndex v34 = (ims::CFNumber *)&_bambiDomain;
    int v35 = 0x40000000;
    uint64_t v30 = ImsResult::operator<<<char [6]>((uint64_t)&v33, "item ");
    uint64_t v31 = ImsResult::operator<<<long>(v30);
    long long v32 = (const std::string *)ImsResult::operator<<<char [17]>(v31, " is not a number");
    ImsResult::ImsResult((ImsResult *)a3, v32);
LABEL_26:
    ImsResult::~ImsResult((ImsResult *)&v33);
  }
  else
  {
LABEL_23:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
}

void sub_1C55E9F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::CFDictionary::asStringMap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFArrayRef v6 = (void *)(a2 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2, *(void **)(a2 + 8));
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = 0;
  void *v6 = 0;
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 8);
  if (v7)
  {
    CFIndex Count = CFDictionaryGetCount(v7);
    long long v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    CFIndex v34 = 0;
    int v35 = 0;
    uint64_t v36 = 0;
    ims::CFDictionary::getKeysAndValues(a1, &v37, (const void ***)&v34);
    uint64_t v33 = 0;
    if (Count < 1)
    {
LABEL_17:
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = v37[v9];
        if (!v10 || (CFTypeID v11 = CFGetTypeID(v10), v11 != CFStringGetTypeID()))
        {
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v29.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v29.__r_.__value_.__r.__words[2]) = 0x40000000;
          uint64_t v18 = ImsResult::operator<<<char [5]>((uint64_t)&v29, "key ");
          uint64_t v19 = ImsResult::operator<<<long>(v18);
          uint64_t v20 = (const std::string *)ImsResult::operator<<<char [17]>(v19, " is not a string");
          ImsResult::ImsResult((ImsResult *)a3, v20);
          ImsResult::~ImsResult((ImsResult *)&v29);
          goto LABEL_23;
        }
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        CFTypeID v12 = (ims::CFString *)v37[v9];
        uint64_t v27 = &unk_1F20E38B0;
        uint64_t v28 = v12;
        if (v12) {
          CFRetain(v12);
        }
        uint64_t v27 = &unk_1F20E3908;
        unint64_t v13 = (const void *)*((void *)v34 + v9);
        if (!v13) {
          break;
        }
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 != CFStringGetTypeID()) {
          break;
        }
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v15 = (ims::CFString *)*((void *)v34 + v9);
        uint64_t v24 = &unk_1F20E38B0;
        uint64_t v25 = v15;
        if (v15)
        {
          CFRetain(v15);
          unsigned int v15 = v25;
        }
        uint64_t v24 = &unk_1F20E3908;
        ims::CFString::asString((const __CFString *)v15, (const void *)0x8000100, &v29);
        ims::CFString::asString((const __CFString *)v28, (const void *)0x8000100, &__p);
        p_p = &__p;
        unint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        unint64_t v17 = (void **)v16 + 7;
        if (*((char *)v16 + 79) < 0) {
          operator delete(*v17);
        }
        *(std::string *)unint64_t v17 = v29;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ims::CFType::~CFType((ims::CFType *)&v24);
        ims::CFType::~CFType((ims::CFType *)&v27);
        uint64_t v33 = ++v9;
        if (Count == v9) {
          goto LABEL_17;
        }
      }
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v29.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v29.__r_.__value_.__r.__words[2]) = 0x40000000;
      uint64_t v21 = ImsResult::operator<<<char [11]>((uint64_t)&v29, "value for ");
      ims::CFString::asString((const __CFString *)v28, (const void *)0x8000100, &__p);
      uint64_t v22 = ImsResult::operator<<<std::string>(v21, (uint64_t)&__p);
      unint64_t v23 = (const std::string *)ImsResult::operator<<<char [16]>(v22, " isn't a string");
      ImsResult::ImsResult((ImsResult *)a3, v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ImsResult::~ImsResult((ImsResult *)&v29);
      ims::CFType::~CFType((ims::CFType *)&v27);
    }
LABEL_23:
    if (v34)
    {
      int v35 = v34;
      operator delete(v34);
    }
    if (v37)
    {
      long long v38 = v37;
      operator delete(v37);
    }
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
}

void sub_1C55EA3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  ImsResult::~ImsResult((ImsResult *)&a20);
  ims::CFType::~CFType((ims::CFType *)&a18);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v36 = *(void **)(v34 - 120);
  if (v36)
  {
    *(void *)(v34 - 112) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t ims::CFDictionary::getMemorySize(ims::CFDictionary *this)
{
  memset(v21, 0, sizeof(v21));
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (ims::CFDictionary::getKeysAndValues((uint64_t)this, (uint64_t)v21, (const void ***)&__p))
  {
    CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 1);
    if (v2)
    {
      CFIndex Count = CFDictionaryGetCount(v2);
      if (Count >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        while (1)
        {
          if (*(char *)(v21[0] + v4 + 23) < 0) {
            uint64_t v7 = *(void *)(v21[0] + v4 + 8);
          }
          else {
            uint64_t v7 = *(unsigned __int8 *)(v21[0] + v4 + 23);
          }
          CFIndex v8 = (const void *)*((void *)__p + v5);
          v6 += v7;
          if (v8)
          {
            CFTypeID v9 = CFGetTypeID(*((CFTypeRef *)__p + v5));
            if (v9 == CFStringGetTypeID())
            {
              CFStringRef v16 = (const __CFString *)&unk_1F20E38B0;
              unint64_t v17 = v8;
              CFRetain(v8);
              CFStringRef v16 = (const __CFString *)&unk_1F20E3908;
              std::string::size_type MemorySize = ims::CFString::getMemorySize(&v16);
              goto LABEL_24;
            }
            CFTypeID v12 = CFGetTypeID(v8);
            if (v12 == CFNumberGetTypeID())
            {
              CFStringRef v16 = (const __CFString *)&unk_1F20E38B0;
              unint64_t v17 = v8;
              CFRetain(v8);
              CFStringRef v16 = (const __CFString *)&unk_1F20E3960;
              v6 += 4;
LABEL_25:
              ims::CFType::~CFType((ims::CFType *)&v16);
              goto LABEL_26;
            }
            CFTypeID TypeID = CFGetTypeID(v8);
          }
          else
          {
            CFTypeID TypeID = CFNullGetTypeID();
          }
          if (TypeID == CFBooleanGetTypeID())
          {
            CFStringRef v16 = (const __CFString *)&unk_1F20E38B0;
            unint64_t v17 = v8;
            if (v8) {
              CFRetain(v8);
            }
            CFStringRef v16 = (const __CFString *)&unk_1F20E3B50;
            v6 += 16;
            goto LABEL_25;
          }
          if (v8)
          {
            CFTypeID v13 = CFGetTypeID(v8);
            if (v13 == CFArrayGetTypeID())
            {
              CFStringRef v16 = (const __CFString *)&unk_1F20E38B0;
              unint64_t v17 = v8;
              CFRetain(v8);
              CFStringRef v16 = (const __CFString *)&unk_1F20E39B8;
              std::string::size_type MemorySize = ims::CFArray::getMemorySize((ims::CFArray *)&v16);
LABEL_24:
              v6 += MemorySize;
              goto LABEL_25;
            }
            CFTypeID v14 = CFGetTypeID(v8);
            if (v14 == CFDictionaryGetTypeID())
            {
              CFStringRef v16 = (const __CFString *)&unk_1F20E38B0;
              unint64_t v17 = v8;
              CFRetain(v8);
              CFStringRef v16 = (const __CFString *)&unk_1F20E3A10;
              std::string::size_type MemorySize = ims::CFDictionary::getMemorySize((ims::CFDictionary *)&v16);
              goto LABEL_24;
            }
          }
LABEL_26:
          ++v5;
          v4 += 24;
          if (Count == v5) {
            goto LABEL_29;
          }
        }
      }
    }
  }
  uint64_t v6 = 0;
LABEL_29:
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  std::string __p = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v6;
}

void sub_1C55EA768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  std::string __p = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string::size_type ims::CFString::getMemorySize(const __CFString **this)
{
  ims::CFString::asString(this[1], (const void *)0x8000100, &v3);
  if ((SHIBYTE(v3.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return HIBYTE(v3.__r_.__value_.__r.__words[2]);
  }
  std::string::size_type size = v3.__r_.__value_.__l.__size_;
  operator delete(v3.__r_.__value_.__l.__data_);
  return size;
}

uint64_t ims::CFNumber::getMemorySize(ims::CFNumber *this)
{
  return 4;
}

uint64_t ims::CFBoolean::getMemorySize(ims::CFBoolean *this)
{
  return 16;
}

CFMutableDictionaryRef ims::CFMutableDictionary::create(ims::CFMutableDictionary *this)
{
  CFDictionaryRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = result;
  return result;
}

void ims::CFMutableDictionary::setValue(ims::CFMutableDictionary *this, const void *key, const void *value)
{
  uint64_t v6 = (__CFDictionary *)*((void *)this + 1);
  if (!v6)
  {
    ims::CFMutableDictionary::create(this);
    uint64_t v6 = (__CFDictionary *)*((void *)this + 1);
  }
  CFDictionarySetValue(v6, key, value);
}

void ims::CFMutableDictionary::setUintValue(ims::CFMutableDictionary *this, const void *a2, unsigned int a3)
{
  uint64_t v5 = 0;
  value = 0;
  ims::CFNumber::CFNumber((ims::CFNumber *)&v5, a3);
  ims::CFMutableDictionary::setValue(this, a2, value);
  ims::CFType::~CFType((ims::CFType *)&v5);
}

void sub_1C55EA928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::CFMutableDictionary::setStringValue(ims::CFMutableDictionary *a1, const void *a2, char *a3)
{
  ims::CFString::CFString(v5, a3, 0x8000100u);
  ims::CFMutableDictionary::setValue(a1, a2, v5[1]);
  ims::CFType::~CFType((ims::CFType *)v5);
}

void sub_1C55EA994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::CFMutableDictionary::setDataValue(ims::CFMutableDictionary *a1, const void *a2, uint64_t a3)
{
  ims::CFData::CFData((ims::CFData *)&v5, a3);
  ims::CFMutableDictionary::setValue(a1, a2, value);
  ims::CFType::~CFType((ims::CFType *)&v5);
}

void sub_1C55EA9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *ims::CFUUID::CFUUID(void *a1, char *a2)
{
  *a1 = &unk_1F20E3A68;
  a1[1] = 0;
  ims::CFString::CFString(v4, a2, 0x8000100u);
  a1[1] = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4[1]);
  ims::CFType::~CFType((ims::CFType *)v4);
  return a1;
}

void sub_1C55EAA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  ims::CFType::~CFType(v9);
  _Unwind_Resume(a1);
}

ImsOutStream *ims::CFUUID::log(ims::CFUUID *this, ImsOutStream *a2)
{
  CFUUIDRef v3 = (const __CFUUID *)*((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = (ims::CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
    uint64_t v7 = &unk_1F20E38B0;
    CFIndex v8 = v4;
    if (v4)
    {
      CFRetain(v4);
      uint64_t v4 = v8;
    }
    uint64_t v7 = &unk_1F20E3908;
    ims::CFString::asString((const __CFString *)v4, (const void *)0x8000100, &__p);
    ims::CFType::~CFType((ims::CFType *)&v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C55EAB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

ImsOutStream *ims::CFBoolean::log(ims::CFBoolean *this, ImsOutStream *a2)
{
  CFBooleanRef v3 = (const __CFBoolean *)*((void *)this + 1);
  uint64_t v4 = "false";
  if (v3 && CFBooleanGetValue(v3)) {
    uint64_t v4 = "true";
  }
  size_t v5 = strlen(v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v4, v5);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void ims::CFString::~CFString(ims::CFString *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void ims::CFNumber::~CFNumber(ims::CFNumber *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void ims::CFDictionary::~CFDictionary(ims::CFDictionary *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void ims::CFUUID::~CFUUID(ims::CFUUID *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void ims::CFBoolean::~CFBoolean(ims::CFBoolean *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void ims::CFArray::~CFArray(ims::CFArray *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v13 = 0;
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    CFIndex v8 = (uint64_t **)v6;
    v12[2] = 1;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    CFTypeID v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *CFTypeID v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t _GLOBAL__sub_I_ImsCFWrappers_cpp()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFD0];
  _MergedGlobals_27 = (uint64_t)&unk_1F20E3B50;
  *(void *)algn_1EBBDC538 = v0;
  __cxa_atexit((void (*)(void *))ims::CFBoolean::~CFBoolean, &_MergedGlobals_27, &dword_1C51D1000);
  uint64_t v1 = *MEMORY[0x1E4F1CFC8];
  qword_1EBBDC540 = (uint64_t)&unk_1F20E3B50;
  unk_1EBBDC548 = v1;
  __cxa_atexit((void (*)(void *))ims::CFBoolean::~CFBoolean, &qword_1EBBDC540, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(__p, "allowedValues");
  ims::CFString::CFString(qword_1EBBDC550, (char *)__p, 0x8000100u);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit((void (*)(void *))ims::CFString::~CFString, qword_1EBBDC550, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  ims::CFString::CFString(qword_1EBBDC560, (char *)__p, 0x8000100u);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit((void (*)(void *))ims::CFString::~CFString, qword_1EBBDC560, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  ims::CFString::CFString(qword_1EBBDC570, (char *)__p, 0x8000100u);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return __cxa_atexit((void (*)(void *))ims::CFString::~CFString, qword_1EBBDC570, &dword_1C51D1000);
}

void sub_1C55EB034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipDigestAuthChallenge::SipDigestAuthChallenge(SipDigestAuthChallenge *this, SipStandardDigestAuthScheme *a2)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20E3BA8;
  if (!a2) {
    operator new();
  }
  *((void *)this + 8) = a2;
}

void sub_1C55EB130(_Unwind_Exception *a1)
{
  SipAuthChallenge::~SipAuthChallenge(v1);
  _Unwind_Resume(a1);
}

void SipDigestAuthChallenge::~SipDigestAuthChallenge(SipDigestAuthChallenge *this)
{
  *(void *)this = &unk_1F20E3BA8;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  SipAuthChallenge::~SipAuthChallenge((void **)this);
}

{
  uint64_t vars8;

  SipDigestAuthChallenge::~SipDigestAuthChallenge(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipDigestAuthChallenge::scheme(SipDigestAuthChallenge *this)
{
  return *((void *)this + 8);
}

{
  return *((void *)this + 8);
}

void SipDigestAuthChallenge::createResponse()
{
}

void sub_1C55EB2F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C405BF2102ELL);
  _Unwind_Resume(a1);
}

void SipDigestAuthChallenge::clone(SipDigestAuthChallenge *this)
{
}

void sub_1C55EB3AC(_Unwind_Exception *a1)
{
  SipAuthChallenge::~SipAuthChallenge(v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t SipDigestAuthChallenge::isValid(SipDigestAuthChallenge *this)
{
  uint64_t result = *((void *)this + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void XcapBsfServerInfo::XcapBsfServerInfo(XcapBsfServerInfo *this, XcapSession *a2, const XcapConfig *a3, uint64_t a4)
{
}

void sub_1C55EB540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 543) < 0) {
    operator delete(*(void **)(v20 + 520));
  }
  XcapServerInfo::~XcapServerInfo((XcapServerInfo *)v20);
  _Unwind_Resume(a1);
}

void XcapBsfServerInfo::~XcapBsfServerInfo(XcapBsfServerInfo *this)
{
  *(void *)this = &unk_1F20E3C00;
  std::string::basic_string[abi:ne180100]<0>(v6, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deleting BsfServerInfo: ", 24);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  uint64_t v3 = *((void *)this + 64);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  XcapServerInfo::~XcapServerInfo(this);
}

{
  uint64_t vars8;

  XcapBsfServerInfo::~XcapBsfServerInfo(this);
  JUMPOUT(0x1C878E320);
}

void XcapBsfServerInfo::host(XcapBsfServerInfo *this@<X0>, std::string *a2@<X8>)
{
  char v4 = (const std::string::value_type **)((char *)this + 184);
  if (*((char *)this + 207) < 0)
  {
    std::string::size_type v5 = *((void *)this + 24);
    if (v5)
    {
      uint64_t v6 = *v4;
      std::string::__init_copy_ctor_external(a2, v6, v5);
      return;
    }
  }
  else if (*((unsigned char *)this + 207))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 25);
    return;
  }
  memset(&v20, 0, sizeof(v20));
  std::string::basic_string[abi:ne180100]<0>(&v20, "bsf.");
  memset(&__p, 0, sizeof(__p));
  XcapServerInfo::_constructHostSuffix(this, &__p);
  if (*((unsigned char *)this + 240))
  {
    char v7 = XcapServerInfo::k3gppDomain;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int64_t v9 = strlen(XcapServerInfo::k3gppDomain);
    if (v9)
    {
      int64_t v10 = v9;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      if (size >= v9)
      {
        CFTypeID v12 = (char *)p_p + size;
        int v13 = *XcapServerInfo::k3gppDomain;
        CFTypeID v14 = p_p;
        do
        {
          int64_t v15 = size - v10;
          if (v15 == -1) {
            break;
          }
          CFStringRef v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16) {
            break;
          }
          unint64_t v17 = v16;
          if (!memcmp(v16, v7, v10))
          {
            if (v17 == v12 || v17 - (char *)p_p == -1) {
              break;
            }
            goto LABEL_25;
          }
          CFTypeID v14 = (std::string *)(v17 + 1);
          int64_t size = v12 - (v17 + 1);
        }
        while (size >= v10);
      }
    }
    else
    {
LABEL_25:
      size_t v18 = strlen((const char *)XcapServerInfo::kImsPrefix);
      std::string::append(&v20, (const std::string::value_type *)XcapServerInfo::kImsPrefix, v18);
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C55EB8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapBsfServerInfo::port(XcapBsfServerInfo *this)
{
  return *((unsigned int *)this + 52);
}

void XcapBsfServerInfo::_constructInitialHeaders(XcapBsfServerInfo *this)
{
  XcapBsfServerInfo::_constructInitialAuthHeader((XcapBsfServerInfo *)&__p, (uint64_t)this);
}

void sub_1C55EBC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapBsfServerInfo::_constructInitialAuthHeader(XcapBsfServerInfo *this, uint64_t a2)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  SipAkaAuthResponse::SipAkaAuthResponse((SipAkaAuthResponse *)v11, 0);
  uint64_t v3 = v12;
  uint64_t v4 = v12 + 8;
  __p[0] = "username";
  std::string::size_type v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 8, "username", (uint64_t)&std::piecewise_construct, (long long **)__p);
  std::string::operator=((std::string *)(v5 + 40), (const std::string *)(a2 + 80));
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  std::string::operator=((std::string *)(v3 + 56), (const std::string *)__p);
  if (SBYTE7(v9) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 80))(__p, a2);
  int v13 = "realm";
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, "realm", (uint64_t)&std::piecewise_construct, (long long **)&v13);
  std::string::operator=((std::string *)(v6 + 40), (const std::string *)__p);
  if (SBYTE7(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  int v13 = "response";
  char v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, "response", (uint64_t)&std::piecewise_construct, (long long **)&v13);
  std::string::operator=((std::string *)(v7 + 40), (const std::string *)__p);
  if (SBYTE7(v9) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p);
}

void sub_1C55EBE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void *XcapBsfServerInfo::_userAgent@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, (char *)XcapServerInfo::k3gppGbaTmpi);
}

void XcapBsfServerInfo::setDigestCredentials(XcapBsfServerInfo *this, const SipAuthResponse *a2)
{
  memset(&v19, 0, sizeof(v19));
  if (*((char *)this + 151) < 0) {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else {
    std::string v19 = *(std::string *)((char *)this + 128);
  }
  uint64_t v4 = (*(uint64_t (**)(const SipAuthResponse *))(*(void *)a2 + 16))(a2);
  *((void *)this + 63) = v4;
  if (v4)
  {
    if (*((_DWORD *)this + 102)) {
      std::string::size_type v5 = "PUT";
    }
    else {
      std::string::size_type v5 = "GET";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    std::string::basic_string[abi:ne180100]<0>(&v16, "/");
    int v6 = (*(uint64_t (**)(uint64_t, void **, long long *, char *))(*(void *)v4 + 48))(v4, __p, &v16, (char *)this + 464);
    if (SBYTE7(v17) < 0) {
      operator delete((void *)v16);
    }
    if (v11 < 0)
    {
      operator delete(__p[0]);
      if (v6)
      {
LABEL_12:
        uint64_t v18 = 0;
        long long v16 = 0u;
        long long v17 = 0u;
        ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v16);
      }
    }
    else if (v6)
    {
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to compute auth response for AKA", 39);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Auth response is not AKA/Digest", 31);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v7 + 17) = 0;
  if (SBYTE7(v17) < 0) {
    operator delete((void *)v16);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  CFIndex v8 = (XcapSession *)*((void *)this + 5);
  *(void *)&long long v15 = 0;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v10 = 0x40000000;
  long long v14 = 0uLL;
  uint64_t v12 = 0;
  long long v13 = 0uLL;
  XcapSession::operationFailure(v8, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C55EC5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  HttpRequest::~HttpRequest(&a18);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v23 - 128));
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  _Unwind_Resume(a1);
}

void *XcapBsfServerInfo::fetchRand@<X0>(XcapBsfServerInfo *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (void *)*((void *)this + 62);
  if (result)
  {
    if (result)
    {
      uint64_t v4 = (*(uint64_t (**)(void *))(*result + 24))(result);
      return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, (char *)(v4 + 184), (char *)(v4 + 200), 0x10uLL);
    }
  }
  return result;
}

void sub_1C55EC78C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *XcapBsfServerInfo::fetchCk(XcapBsfServerInfo *this)
{
  uint64_t result = (void *)*((void *)this + 63);
  if (result)
  {
    if (result) {
      return (void *)((*(uint64_t (**)(void *))(*(void *)result + 32))(result) + 230);
    }
  }
  return result;
}

void *XcapBsfServerInfo::fetchIk(XcapBsfServerInfo *this)
{
  uint64_t result = (void *)*((void *)this + 63);
  if (result)
  {
    if (result) {
      return (void *)((*(uint64_t (**)(void *))(*(void *)result + 32))(result) + 246);
    }
  }
  return result;
}

void XcapBsfServerInfo::fetchBTid(XcapBsfServerInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 64);
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
    }
    else
    {
      long long v3 = *(_OWORD *)(v2 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void XcapBsfServerInfo::fetchKeyLifetime(XcapBsfServerInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 64);
  if (v2)
  {
    if (*(char *)(v2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
    }
    else
    {
      long long v3 = *(_OWORD *)(v2 + 32);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 48);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void XcapBsfServerInfo::handleHttpResponseSuccess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 512);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator new();
}

void sub_1C55ECC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapBsfServerInfo::handleHttpResponseRedirect(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  uint64_t v2 = ims::warn((uint64_t)__p, (uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Not implemented", 15);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  long long v3 = *(XcapSession **)(a1 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v5 = 0x40000000;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  XcapSession::operationFailure(v3, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C55ECDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void XcapBsfServerInfo::handleHttpResponseAuthChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 496))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v26, "");
    uint64_t v5 = ims::error((uint64_t)v15, (uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" server has challenged us twice. Probably didn't like our response to the 1st challenge. Failing request", 104);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v17 < 0) {
      operator delete(v15[0]);
    }
LABEL_22:
    char v14 = *(XcapSession **)(a1 + 40);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_bambiDomain;
    int v16 = 0x40000000;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    XcapSession::operationFailure(v14, (const ImsResult *)v15);
    ImsResult::~ImsResult((ImsResult *)v15);
    return;
  }
  XcapServerInfo::_saveCookie(a1, a4);
  uint64_t v7 = SipAuthScheme::createFromString(a3);
  if (!v7)
  {
    *(void *)(a1 + 496) = 0;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v26, "");
    uint64_t v13 = ims::error((uint64_t)v15, (uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Cannot create challenge from ", 29);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" client. Challenge Header:", 26);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v17 < 0) {
      operator delete(v15[0]);
    }
    goto LABEL_22;
  }
  uint64_t v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  *(void *)(a1 + 496) = v8;
  if (!v8) {
    goto LABEL_16;
  }
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v9 + 24))(v9);
  v15[0] = "username";
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 8, "username", (uint64_t)&std::piecewise_construct, (long long **)v15);
  std::string::operator=((std::string *)(v11 + 40), (const std::string *)(a1 + 80));
  uint64_t v12 = *(void (**)(void))(**(void **)(*(void *)(a1 + 40) + 424) + 24);
  v12();
}

void sub_1C55ED2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t XcapBsfServerInfo::handleHttpResponseFailure(uint64_t a1, int a2, ImsResult *a3)
{
  return XcapSession::operationFailure(*(XcapSession **)(a1 + 40), a3);
}

void XcapBsfServerInfo::httpVersion(XcapBsfServerInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 49);
  }
}

void *XcapBsfServerInfo::id@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "BSF");
}

void SipPrivacyHeader::~SipPrivacyHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPrivacyHeader::clone(SipPrivacyHeader *this)
{
}

void sub_1C55ED49C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void SipFromHeader::~SipFromHeader(SipFromHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipFromHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipFromHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipFromHeader::clone(SipFromHeader *this)
{
}

void sub_1C55ED670(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

uint64_t std::map<XcapNs::nsType,bambi::XmlTreeNs>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void XcapNs::stripXcapNs(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = XcapNs::_allNamespaces;
  if ((uint64_t *)XcapNs::_allNamespaces == &qword_1EBBDB3A0)
  {
LABEL_47:
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
    return;
  }
  while (1)
  {
    if (*(char *)(v4 + 87) >= 0) {
      size_t v5 = *(unsigned __int8 *)(v4 + 87);
    }
    else {
      size_t v5 = *(void *)(v4 + 72);
    }
    std::string::size_type v26 = 0;
    uint64_t v27 = 0;
    std::string __p = 0;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
    if (v27 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (v5)
    {
      if (*(char *)(v4 + 87) >= 0) {
        uint64_t v7 = (const void *)(v4 + 64);
      }
      else {
        uint64_t v7 = *(const void **)(v4 + 64);
      }
      memmove(p_p, v7, v5);
    }
    *(_WORD *)&p_p[v5] = 58;
    if (v27 >= 0) {
      std::string::size_type v8 = HIBYTE(v27);
    }
    else {
      std::string::size_type v8 = v26;
    }
    std::string::basic_string(&v24, (const std::string *)a1, 0, v8, (std::allocator<char> *)&v28);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    std::string::size_type v10 = HIBYTE(v27);
    char v11 = HIBYTE(v27);
    std::string::size_type v12 = v26;
    if (v27 >= 0) {
      std::string::size_type v13 = HIBYTE(v27);
    }
    else {
      std::string::size_type v13 = v26;
    }
    if (size != v13)
    {
      if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        char v11 = HIBYTE(v27);
      }
      goto LABEL_39;
    }
    char v14 = v27 >= 0 ? &__p : (void **)__p;
    if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)&v24.__r_.__value_.__s + 23)) {
      goto LABEL_51;
    }
    uint64_t v15 = 0;
    do
    {
      int v16 = v24.__r_.__value_.__s.__data_[v15];
      int v17 = *((unsigned __int8 *)v14 + v15);
      BOOL v18 = v16 != v17 || HIBYTE(v24.__r_.__value_.__r.__words[2]) - 1 == v15++;
    }
    while (!v18);
    if (v16 == v17) {
      goto LABEL_51;
    }
LABEL_39:
    if (v11 < 0) {
      operator delete(__p);
    }
    uint64_t v21 = *(uint64_t **)(v4 + 8);
    if (v21)
    {
      do
      {
        uint64_t v22 = v21;
        uint64_t v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        uint64_t v22 = *(uint64_t **)(v4 + 16);
        BOOL v18 = *v22 == v4;
        uint64_t v4 = (uint64_t)v22;
      }
      while (!v18);
    }
    uint64_t v4 = (uint64_t)v22;
    if (v22 == &qword_1EBBDB3A0) {
      goto LABEL_47;
    }
  }
  uint64_t v19 = (void *)v24.__r_.__value_.__r.__words[0];
  int v20 = memcmp(v24.__r_.__value_.__l.__data_, v14, v24.__r_.__value_.__l.__size_);
  operator delete(v19);
  char v11 = HIBYTE(v27);
  if (v20) {
    goto LABEL_39;
  }
  std::string::size_type v12 = v26;
  std::string::size_type v10 = HIBYTE(v27);
LABEL_51:
  if (v11 >= 0) {
    std::string::size_type v23 = v10;
  }
  else {
    std::string::size_type v23 = v12;
  }
  std::string::basic_string(a2, (const std::string *)a1, v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
}

void sub_1C55ED90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>(uint64_t a1, char a2, long long *a3)
{
  *(unsigned char *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  char v6 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 48) = *((void *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1C55ED9B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<SipWarning,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::destroy(*a1);
    std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<SipWarning,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  long long v7 = a1 + 1;
  char v6 = a1[1];
  std::string::size_type v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v11 = *((unsigned __int8 *)v6 + 32);
        if (v10 >= v11) {
          break;
        }
        char v6 = *v9;
        std::string::size_type v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        std::string::size_type v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    _OWORD v14[2] = 1;
    std::string::size_type v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    v12[32] = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t **std::__tree<XcapNs::nsType>::__emplace_unique_key_args<XcapNs::nsType,XcapNs::nsType const&>(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  char v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        std::string::size_type v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    std::string::size_type v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t _GLOBAL__sub_I_XcapNs_cpp()
{
  v56[7] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v45, "http://uri.etsi.org/ngn/params/xml/simservs/xcap");
  std::string::basic_string[abi:ne180100]<0>(&v44, "ss");
  bambi::XmlTreeNs::XmlTreeNs((uint64_t)v46, &v45, &v44);
  std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>((uint64_t)v52, 0, (long long *)v46);
  std::string::basic_string[abi:ne180100]<0>(&v39, "urn:ietf:params:xml:ns:common-policy");
  std::string::basic_string[abi:ne180100]<0>(&v38, "cp");
  bambi::XmlTreeNs::XmlTreeNs((uint64_t)v40, &v39, &v38);
  std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>((uint64_t)&v53, 1, (long long *)v40);
  std::string::basic_string[abi:ne180100]<0>(&v33, "urn:oma:xml:xdm:common-policy");
  std::string::basic_string[abi:ne180100]<0>(&v32, "ocp");
  bambi::XmlTreeNs::XmlTreeNs((uint64_t)v34, &v33, &v32);
  std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>((uint64_t)&v54, 2, (long long *)v34);
  std::string::basic_string[abi:ne180100]<0>(&v27, "urn:com:att:tlv:utx");
  std::string::basic_string[abi:ne180100]<0>(&v26, "utns");
  bambi::XmlTreeNs::XmlTreeNs((uint64_t)v28, &v27, &v26);
  std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>((uint64_t)&v55, 3, (long long *)v28);
  std::string::basic_string[abi:ne180100]<0>(&v21, "urn:ietf:params:xml:ns:xcap-error");
  std::string::basic_string[abi:ne180100]<0>(&v20, "xe");
  bambi::XmlTreeNs::XmlTreeNs((uint64_t)v22, &v21, &v20);
  std::pair<XcapNs::nsType const,bambi::XmlTreeNs>::pair[abi:ne180100]<true,0>((uint64_t)v56, 4, (long long *)v22);
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_1EBBDB3A8 = 0;
  qword_1EBBDB3A0 = 0;
  uint64_t v2 = &qword_1EBBDB3A0;
  XcapNs::_allNamespaces = (uint64_t)&qword_1EBBDB3A0;
  while (1)
  {
    long long v3 = &v52[56 * v1];
    unsigned int v4 = *v3;
    if (v2 == &qword_1EBBDB3A0)
    {
      char v6 = &qword_1EBBDB3A0;
LABEL_10:
      if (v0)
      {
        unsigned int v9 = (uint64_t **)(v6 + 1);
        if (v6[1]) {
          goto LABEL_29;
        }
      }
      else
      {
LABEL_21:
        unsigned int v9 = (uint64_t **)&qword_1EBBDB3A0;
        char v6 = &qword_1EBBDB3A0;
      }
LABEL_22:
      uint64_t v51 = 0;
      std::string::size_type v12 = (char *)operator new(0x58uLL);
      std::string::size_type v13 = v12;
      v50[0] = (uint64_t *)v12;
      v50[1] = &qword_1EBBDB3A0;
      v12[32] = v4;
      char v14 = (const std::string::value_type **)&v52[56 * v1 + 8];
      if ((char)v3[31] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 40), *v14, *(void *)&v52[56 * v1 + 16]);
      }
      else
      {
        *(_OWORD *)(v12 + 40) = *(_OWORD *)v14;
        *((void *)v12 + 7) = *(void *)&v52[56 * v1 + 24];
      }
      uint64_t v15 = (std::string *)(v13 + 64);
      int v16 = (const std::string::value_type **)&v52[56 * v1 + 32];
      if ((char)v3[55] < 0)
      {
        std::string::__init_copy_ctor_external(v15, *v16, *(void *)&v52[56 * v1 + 40]);
      }
      else
      {
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
        *((void *)v13 + 10) = *(void *)&v52[56 * v1 + 48];
      }
      LOBYTE(v5bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&XcapNs::_allNamespaces, (uint64_t)v6, v9, v50[0]);
      v50[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,void *>>>>::reset[abi:ne180100]((uint64_t)v50, 0);
      goto LABEL_29;
    }
    long long v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        char v6 = v5;
        long long v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      unsigned int v7 = &qword_1EBBDB3A0;
      do
      {
        char v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        unsigned int v7 = v6;
      }
      while (v8);
    }
    if (*((unsigned __int8 *)v6 + 32) < v4) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v10 = v0;
    while (1)
    {
      while (1)
      {
        char v6 = (uint64_t *)v10;
        unsigned int v11 = *(unsigned __int8 *)(v10 + 32);
        if (v11 <= v4) {
          break;
        }
        uint64_t v10 = *v6;
        unsigned int v9 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
      if (v11 >= v4) {
        break;
      }
      uint64_t v10 = v6[1];
      if (!v10)
      {
        unsigned int v9 = (uint64_t **)(v6 + 1);
        goto LABEL_22;
      }
    }
LABEL_29:
    if (++v1 == 5) {
      break;
    }
    uint64_t v2 = (uint64_t *)XcapNs::_allNamespaces;
    uint64_t v0 = qword_1EBBDB3A0;
  }
  uint64_t v17 = 280;
  do
  {
    BOOL v18 = (void **)&v52[v17];
    if ((char)v52[v17 - 1] < 0) {
      operator delete(*(v18 - 3));
    }
    if (*((char *)v18 - 25) < 0) {
      operator delete(*(v18 - 6));
    }
    v17 -= 56;
  }
  while (v17);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))std::map<XcapNs::nsType,bambi::XmlTreeNs>::~map[abi:ne180100], &XcapNs::_allNamespaces, &dword_1C51D1000);
}

void sub_1C55EE160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  for (; v91 != &a91; v91 -= 56)
  {
    if (*(v91 - 1) < 0) {
      operator delete(*((void **)v91 - 3));
    }
    if (*(v91 - 25) < 0) {
      operator delete(*((void **)v91 - 6));
    }
  }
  _Unwind_Resume(a1);
}

void SipResponseCodeMap::fromString(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    ims::tokenize((std::string *)a2, &v11, 0x3Bu);
    uint64_t v4 = v11;
    for (uint64_t i = v12; v4 != i; v4 += 24)
    {
      std::string::size_type v6 = std::string::find((const std::string *)v4, 58, 0);
      if (v6 != -1)
      {
        std::string::size_type v7 = v6;
        uint64_t v8 = *(char *)(v4 + 23) < 0 ? *(void *)(v4 + 8) : *(unsigned __int8 *)(v4 + 23);
        if (v6 != v8 - 1)
        {
          memset(&__str, 0, sizeof(__str));
          std::string::basic_string(&__str, (const std::string *)v4, 0, v6, (std::allocator<char> *)&__p);
          ims::chomp(&__str, "\r\n\t ", 3);
          memset(&__p, 0, sizeof(__p));
          std::string::basic_string(&__p, (const std::string *)v4, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
          SipResponseCodeMap::addResponseCodesForMethodFromString(a1, (uint64_t)&__str, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
}

void sub_1C55EE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  a15 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void SipResponseCodeMap::addResponseCodesForMethodFromString(uint64_t a1, uint64_t a2, std::string *a3)
{
  std::string v32 = 0;
  std::string v33 = 0;
  uint64_t v34 = 0;
  ims::tokenize(a3, (uint64_t *)&v32, 0x2Cu);
  if (v32 != (std::string *)v33)
  {
    uint64_t v36 = 0;
    long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1 + 8, &v36, (void **)a2);
    std::string::size_type v6 = *v5;
    if (!*v5)
    {
      v35.__r_.__value_.__r.__words[2] = 0;
      std::string::size_type v7 = operator new(0x50uLL);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      v35.__r_.__value_.__l.__size_ = a1 + 16;
      v35.__r_.__value_.__s.__data_[16] = 0;
      uint64_t v8 = (std::string *)(v7 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        unsigned int v9 = (uint64_t *)v35.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        void v7[6] = *(void *)(a2 + 16);
        unsigned int v9 = v7;
      }
      v7[8] = 0;
      time_t v7[9] = 0;
      v7[7] = v7 + 8;
      v35.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)(a1 + 8), v36, v5, v9);
      std::string::size_type v6 = (uint64_t *)v35.__r_.__value_.__r.__words[0];
      v35.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v35, 0);
    }
    uint64_t v10 = v32;
    uint64_t v11 = v33;
    if (v32 != (std::string *)v33)
    {
      uint64_t v12 = v6 + 7;
      do
      {
        int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
        char v14 = (unsigned __int8 *)HIBYTE(v10->__r_.__value_.__r.__words[2]);
        if (v13 < 0)
        {
          if (!v10->__r_.__value_.__l.__size_) {
            goto LABEL_56;
          }
        }
        else if (!*((unsigned char *)&v10->__r_.__value_.__s + 23))
        {
          goto LABEL_56;
        }
        int v15 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        int v16 = (char)v13;
        std::string::size_type size = (unsigned __int8 *)v10->__r_.__value_.__l.__size_;
        if (v16 >= 0) {
          BOOL v18 = (unsigned __int8 *)HIBYTE(v10->__r_.__value_.__r.__words[2]);
        }
        else {
          BOOL v18 = (unsigned __int8 *)v10->__r_.__value_.__l.__size_;
        }
        if (v18 == (unsigned __int8 *)9)
        {
          uint64_t v19 = v16 >= 0 ? (unsigned __int8 **)v10 : (unsigned __int8 **)v10->__r_.__value_.__r.__words[0];
          std::string v20 = *v19;
          int v21 = *((unsigned __int8 *)v19 + 8);
          if (v20 == (unsigned __int8 *)0x554F44454D495445 && v21 == 84)
          {
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v12, 0x3Cu, 60);
            goto LABEL_56;
          }
        }
        char v23 = v10;
        if ((v15 & 0x80) != 0) {
          char v23 = (std::string *)v10->__r_.__value_.__r.__words[0];
        }
        if (v23->__r_.__value_.__s.__data_[0] == 45)
        {
          std::string::basic_string(&v35, v10, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v36);
          if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10->__r_.__value_.__l.__data_);
          }
          long long v24 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
          unint64_t v25 = v35.__r_.__value_.__r.__words[2];
          v10->__r_.__value_.__r.__words[2] = v35.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v24;
          char v14 = (unsigned __int8 *)HIBYTE(v25);
          std::string::size_type size = (unsigned __int8 *)v10->__r_.__value_.__l.__size_;
          unsigned int v26 = 0x80000000;
          int v15 = (int)v14;
        }
        else
        {
          unsigned int v26 = 0;
        }
        if ((v15 & 0x80u) != 0) {
          char v14 = size;
        }
        if (v14 == (unsigned __int8 *)1)
        {
          std::string v27 = (std::string *)v10->__r_.__value_.__r.__words[0];
          if ((v15 & 0x80u) == 0) {
            std::string v27 = v10;
          }
          if (v27->__r_.__value_.__s.__data_[0] == 42)
          {
            int v28 = 0x40000000;
LABEL_54:
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v12, v28 | v26, v28 | v26);
            goto LABEL_56;
          }
        }
        if ((v15 & 0x80) != 0)
        {
          if (size == (unsigned __int8 *)3)
          {
            char v29 = (std::string *)v10->__r_.__value_.__r.__words[0];
            if (*(unsigned __int8 *)v10->__r_.__value_.__l.__data_ - 48 < 0xA)
            {
LABEL_44:
              if (__tolower(v29->__r_.__value_.__s.__data_[1]) == 120)
              {
                long long v30 = (v10->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? (unsigned __int8 **)v10
                    : (unsigned __int8 **)v10->__r_.__value_.__r.__words[0];
                if (__tolower(*((char *)v30 + 2)) == 120)
                {
                  if ((v10->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    char v31 = v10;
                  }
                  else {
                    char v31 = (std::string *)v10->__r_.__value_.__r.__words[0];
                  }
                  int v28 = (v31->__r_.__value_.__s.__data_[0] - 48) | 0x40000000;
                  goto LABEL_54;
                }
              }
            }
          }
        }
        else if (v15 == 3)
        {
          char v29 = v10;
          if (v10->__r_.__value_.__s.__data_[0] - 48 <= 9) {
            goto LABEL_44;
          }
        }
        int v28 = ims::strToUint32((uint64_t *)v10, 0);
        if (v28) {
          goto LABEL_54;
        }
LABEL_56:
        ++v10;
      }
      while (v10 != (std::string *)v11);
    }
  }
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1C55EE8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, char a13)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL SipResponseCodeMap::containsResponseCodeForMethod(uint64_t a1, void **a2, unsigned __int16 a3, unsigned char *a4)
{
  unsigned int v6 = a3;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2);
  unsigned int v9 = (void **)(a1 + 16);
  if (v9 != v8)
  {
    int v10 = setContainsResponseCodeOrWildcard((uint64_t)(v8 + 7), v6);
    if (a4 && v10 == 2)
    {
      BOOL result = 1;
      *a4 = 1;
      return result;
    }
    if (v10 != 3) {
      return (v10 & 1) == 0;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v7, __p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v12)
  {
    LOBYTE(v10) = setContainsResponseCodeOrWildcard((uint64_t)(v12 + 7), v6);
    return (v10 & 1) == 0;
  }
  return 0;
}

void sub_1C55EE9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t setContainsResponseCodeOrWildcard(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_63;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v6 + 28);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unsigned int v9 = (uint64_t *)v6;
    }
    else {
      unsigned int v9 = (uint64_t *)(v6 + 8);
    }
    if (v8) {
      uint64_t v5 = v6;
    }
    uint64_t v6 = *v9;
  }
  while (*v9);
  if (v5 != v2 && *(_DWORD *)(v5 + 28) <= a2) {
    return 2;
  }
  unsigned int v10 = a2 | 0x80000000;
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  do
  {
    unsigned int v13 = *(_DWORD *)(v12 + 28);
    BOOL v14 = v13 >= v10;
    if (v13 >= v10) {
      int v15 = (uint64_t *)v12;
    }
    else {
      int v15 = (uint64_t *)(v12 + 8);
    }
    if (v14) {
      uint64_t v11 = v12;
    }
    uint64_t v12 = *v15;
  }
  while (*v15);
  if (v11 != v2 && v10 >= *(_DWORD *)(v11 + 28)) {
    return 1;
  }
  unsigned int v16 = (a2 / 0x64) | 0x40000000;
  uint64_t v17 = v2;
  uint64_t v18 = v3;
  do
  {
    unsigned int v19 = *(_DWORD *)(v18 + 28);
    BOOL v20 = v19 >= v16;
    if (v19 >= v16) {
      int v21 = (uint64_t *)v18;
    }
    else {
      int v21 = (uint64_t *)(v18 + 8);
    }
    if (v20) {
      uint64_t v17 = v18;
    }
    uint64_t v18 = *v21;
  }
  while (*v21);
  if (v17 != v2 && v16 >= *(_DWORD *)(v17 + 28)) {
    return 0;
  }
  unsigned int v22 = (a2 / 0x64) | 0xC0000000;
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  do
  {
    unsigned int v25 = *(_DWORD *)(v24 + 28);
    BOOL v26 = v25 >= v22;
    if (v25 >= v22) {
      std::string v27 = (uint64_t *)v24;
    }
    else {
      std::string v27 = (uint64_t *)(v24 + 8);
    }
    if (v26) {
      uint64_t v23 = v24;
    }
    uint64_t v24 = *v27;
  }
  while (*v27);
  if (v23 != v2 && v22 >= *(_DWORD *)(v23 + 28)) {
    return 1;
  }
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  do
  {
    int v30 = *(_DWORD *)(v29 + 28) >> 30;
    BOOL v31 = v30 == 0;
    if (v30) {
      std::string v32 = (uint64_t *)v29;
    }
    else {
      std::string v32 = (uint64_t *)(v29 + 8);
    }
    if (!v31) {
      uint64_t v28 = v29;
    }
    uint64_t v29 = *v32;
  }
  while (*v32);
  if (v28 != v2 && *(_DWORD *)(v28 + 28) < 0x40000001u) {
    return 0;
  }
  uint64_t v34 = v2;
  do
  {
    if (*(_DWORD *)(v3 + 28) >> 30 == 3) {
      std::string v35 = (uint64_t *)v3;
    }
    else {
      std::string v35 = (uint64_t *)(v3 + 8);
    }
    if (*(_DWORD *)(v3 + 28) >> 30 == 3) {
      uint64_t v34 = v3;
    }
    uint64_t v3 = *v35;
  }
  while (*v35);
  if (v34 == v2 || *(_DWORD *)(v34 + 28) >= 0xC0000001) {
LABEL_63:
  }
    uint64_t v34 = v2;
  if (v34 == v2) {
    return 3;
  }
  else {
    return 1;
  }
}

BOOL SipResponseCodeMap::operator==(void *a1, uint64_t a2)
{
  if (a1[3] != *(void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)a1[1];
  uint64_t v3 = (unsigned __int8 *)(a1 + 2);
  if (v2 == (unsigned __int8 *)(a1 + 2)) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,std::pair<std::string const,std::set<unsigned int>>>((uint64_t)&v11, v2 + 32, v4 + 32);
    if (!result) {
      break;
    }
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
    unsigned int v7 = v2;
    if (v6)
    {
      do
      {
        uint64_t v2 = v6;
        uint64_t v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v2 = (unsigned __int8 *)*((void *)v7 + 2);
        BOOL v8 = *(void *)v2 == (void)v7;
        unsigned int v7 = v2;
      }
      while (!v8);
    }
    unsigned int v9 = (unsigned __int8 *)*((void *)v4 + 1);
    if (v9)
    {
      do
      {
        unsigned int v10 = v9;
        unsigned int v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        unsigned int v10 = (unsigned __int8 *)*((void *)v4 + 2);
        BOOL v8 = *(void *)v10 == (void)v4;
        uint64_t v4 = v10;
      }
      while (!v8);
    }
    uint64_t v4 = v10;
  }
  while (v2 != v3);
  return result;
}

ImsOutStream *SipResponseCodeMap::log(SipResponseCodeMap *this, ImsOutStream *a2)
{
  uint64_t v3 = (char *)*((void *)this + 1);
  int v21 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    uint64_t v23 = *MEMORY[0x1E4FBA418];
    char v4 = 1;
    uint64_t v22 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = (void *)*((void *)a2 + 1);
        LOBYTE(v26[0]) = 59;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v26, 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, (void *)v3 + 4);
      uint64_t v6 = (void *)*((void *)a2 + 1);
      LOBYTE(v26[0]) = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v26, 1);
      *((unsigned char *)a2 + 17) = 0;
      unsigned int v7 = (char *)*((void *)v3 + 7);
      if (v7 != v3 + 64) {
        break;
      }
LABEL_33:
      uint64_t v18 = (char *)*((void *)v3 + 1);
      if (v18)
      {
        do
        {
          unsigned int v19 = v18;
          uint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unsigned int v19 = (char *)*((void *)v3 + 2);
          BOOL v14 = *(void *)v19 == (void)v3;
          uint64_t v3 = v19;
        }
        while (!v14);
      }
      char v4 = 0;
      uint64_t v3 = v19;
      if (v19 == v21) {
        return a2;
      }
    }
    char v8 = 1;
    while (1)
    {
      int v9 = *((_DWORD *)v7 + 7);
      if ((v8 & 1) == 0)
      {
        unsigned int v10 = (void *)*((void *)a2 + 1);
        LOBYTE(v26[0]) = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v26, 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      if (v9 < 0)
      {
        v9 &= ~0x80000000;
        char v11 = (void *)*((void *)a2 + 1);
        LOBYTE(v26[0]) = 45;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v26, 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      if (v9 == 60)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ETIMEDOUT", 9);
      }
      else
      {
        if ((v9 & 0x40000000) != 0)
        {
          unsigned int v15 = v9 & 0xBFFFFFFF;
          if (v15)
          {
            if (v15 >= 0xA)
            {
              unsigned int v16 = "???";
              goto LABEL_27;
            }
            uint64_t v31 = 0;
            memset(v30, 0, sizeof(v30));
            long long v28 = 0u;
            long long v29 = 0u;
            *(_OWORD *)std::string __p = 0u;
            memset(v26, 0, sizeof(v26));
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
            uint64_t v17 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"xx", 2);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v26 + 8, v24);
            *(void *)&v26[0] = v23;
            *(void *)((char *)v26 + *(void *)(v23 - 24)) = v22;
            *((void *)&v26[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v28) < 0) {
              operator delete(__p[1]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1C878E270](v30);
          }
          else
          {
            unsigned int v16 = "*";
LABEL_27:
            std::string::basic_string[abi:ne180100]<0>(v24, v16);
          }
          (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, v24);
          if (v25 < 0) {
            operator delete(v24[0]);
          }
          goto LABEL_16;
        }
        std::ostream::operator<<();
      }
      *((unsigned char *)a2 + 17) = 0;
LABEL_16:
      uint64_t v12 = (char *)*((void *)v7 + 1);
      if (v12)
      {
        do
        {
          unsigned int v13 = v12;
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unsigned int v13 = (char *)*((void *)v7 + 2);
          BOOL v14 = *(void *)v13 == (void)v7;
          unsigned int v7 = v13;
        }
        while (!v14);
      }
      char v8 = 0;
      unsigned int v7 = v13;
      if (v13 == v3 + 64) {
        goto LABEL_33;
      }
    }
  }
  return a2;
}

void sub_1C55EF050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipResponseCodeMap::empty(SipResponseCodeMap *this)
{
  uint64_t v1 = (char *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 16;
  if (v1 == (char *)this + 16) {
    return 1;
  }
  do
  {
    uint64_t v3 = *((void *)v1 + 9);
    BOOL result = v3 == 0;
    if (v3) {
      break;
    }
    uint64_t v5 = (char *)*((void *)v1 + 1);
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(char **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v1 + 2);
        BOOL v7 = *(void *)v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void SipResponseCodeMap::~SipResponseCodeMap(SipResponseCodeMap *this)
{
  *(void *)this = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  JUMPOUT(0x1C878E320);
}

void SipResponseCodeMap::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t *result, unsigned int a2, int a3)
{
  char v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<unsigned int>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<unsigned int>>,std::pair<std::string const,std::set<unsigned int>>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    char v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (*((void *)a2 + 5) != *((void *)a3 + 5)) {
    return 0;
  }
  uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 3);
  if (v12 == a2 + 32) {
    return 1;
  }
  unsigned int v13 = (void *)*((void *)a3 + 3);
  do
  {
    int v14 = *((_DWORD *)v12 + 7);
    int v15 = *((_DWORD *)v13 + 7);
    BOOL result = v14 == v15;
    if (v14 != v15) {
      break;
    }
    uint64_t v17 = (unsigned __int8 *)*((void *)v12 + 1);
    uint64_t v18 = v12;
    if (v17)
    {
      do
      {
        uint64_t v12 = v17;
        uint64_t v17 = *(unsigned __int8 **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v12 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v19 = *(void *)v12 == (void)v18;
        uint64_t v18 = v12;
      }
      while (!v19);
    }
    BOOL v20 = (void *)v13[1];
    if (v20)
    {
      do
      {
        int v21 = v20;
        BOOL v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        int v21 = (void *)v13[2];
        BOOL v19 = *v21 == (void)v13;
        unsigned int v13 = v21;
      }
      while (!v19);
    }
    unsigned int v13 = v21;
  }
  while (v12 != a2 + 32);
  return result;
}

void IpAddress::loggableName(IpAddress *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C55EF48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void IpAddress::asString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C55EF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void IpAddress::asString(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  IpAddress::asString();
}

void sub_1C55EF610(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL IpAddress::parseIPv4Address(const std::string *a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_WORD *)a2 = 528;
  memset(&__p, 0, sizeof(__p));
  memset(&v12, 0, sizeof(v12));
  std::string::size_type v4 = std::string::find(a1, 58, 0);
  if (v4 == -1)
  {
    std::string::operator=(&__p, a1);
  }
  else
  {
    std::string::size_type v5 = v4;
    std::string::basic_string(&v11, a1, 0, v4, (std::allocator<char> *)&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v11;
    std::string::basic_string(&v11, a1, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    std::string v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v7 = inet_pton(2, (const char *)p_p, (void *)(a2 + 4));
  int v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (v7 == 1)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      int v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
      if (!v12.__r_.__value_.__l.__size_) {
        goto LABEL_17;
      }
    }
    else
    {
      if (!*((unsigned char *)&v12.__r_.__value_.__s + 23)) {
        goto LABEL_18;
      }
      int v9 = &v12;
    }
    *(_WORD *)(a2 + 2) = bswap32(strtoul((const char *)v9, 0, 10)) >> 16;
  }
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  int v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
LABEL_17:
  operator delete(v9);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7 == 1;
}

void sub_1C55EF788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL IpAddress::parseIPv6Address(std::string *__str, uint64_t a2, BOOL *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)a2 = 7708;
  memset(&__p, 0, sizeof(__p));
  memset(&__stra, 0, sizeof(__stra));
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = __str;
  }
  else {
    uint64_t v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v6->__r_.__value_.__s.__data_[0] == 91)
  {
    std::string::size_type v7 = std::string::find(__str, 93, 0);
    if (v7 == -1) {
      goto LABEL_24;
    }
    std::string::size_type v8 = v7;
    std::string::basic_string(&v25, __str, 1uLL, v7 - 1, (std::allocator<char> *)&v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v25;
    int v9 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (v9 >= 0) {
      std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    if (size != v8 + 1)
    {
      if (v9 >= 0) {
        std::string v11 = __str;
      }
      else {
        std::string v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if (v11->__r_.__value_.__s.__data_[v8 + 1] == 58)
      {
        std::string::basic_string(&v25, __str, v8 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v28);
        std::string __stra = v25;
        goto LABEL_17;
      }
LABEL_24:
      BOOL v15 = 0;
      goto LABEL_47;
    }
  }
  else
  {
    std::string::operator=(&__p, __str);
  }
LABEL_17:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v13 = inet_pton(30, (const char *)p_p, (void *)(a2 + 8));
  int v14 = SHIBYTE(__stra.__r_.__value_.__r.__words[2]);
  BOOL v15 = v13 == 1;
  if (v13 == 1)
  {
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__stra.__r_.__value_.__l.__size_) {
        goto LABEL_28;
      }
      p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&__stra.__r_.__value_.__s + 23)) {
        goto LABEL_28;
      }
      p_stra = &__stra;
    }
    *(_WORD *)(a2 + 2) = bswap32(strtoul((const char *)p_stra, 0, 10)) >> 16;
LABEL_28:
    if (a3)
    {
      int64_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        uint64_t v18 = &__p;
      }
      else
      {
        int64_t v17 = __p.__r_.__value_.__l.__size_;
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v19 = (char *)v18 + v17;
      if (v17 >= 2)
      {
        BOOL v20 = v18;
        do
        {
          int v21 = (char *)memchr(v20, 58, v17 - 1);
          if (!v21) {
            break;
          }
          if (*(_WORD *)v21 == 14906) {
            goto LABEL_38;
          }
          BOOL v20 = (std::string *)(v21 + 1);
          int64_t v17 = v19 - (char *)v20;
        }
        while (v19 - (char *)v20 > 1);
      }
      int v21 = v19;
LABEL_38:
      BOOL v23 = v21 != v19 && v21 - (char *)v18 != -1;
      *a3 = v23;
    }
  }
  if (v14 < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_1C55EFA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL IpAddress::isAddress(std::string *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (IpAddress::parseIPv4Address(a1, (uint64_t)&v3)) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  int v6 = 0;
  uint64_t v5 = 0;
  return IpAddress::parseIPv6Address(a1, (uint64_t)&v3, 0);
}

void IpAddress::createAddress(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v10 = 0uLL;
  long long v7 = 0uLL;
  int v9 = 0;
  uint64_t v8 = 0;
  if (IpAddress::parseIPv4Address(a1, (uint64_t)&v10))
  {
    std::allocate_shared[abi:ne180100]<Ip4Address,std::allocator<Ip4Address>,sockaddr_in &,void>(&v10, &v6);
    long long v4 = v6;
LABEL_5:
    *(_OWORD *)a2 = v4;
    return;
  }
  char v5 = 1;
  if (IpAddress::parseIPv6Address(a1, (uint64_t)&v7, (BOOL *)&v5))
  {
    long long v6 = 0uLL;
    std::allocate_shared[abi:ne180100]<Ip6Address,std::allocator<Ip6Address>,sockaddr_in6 &,void>(&v7, &v6);
    long long v4 = v6;
    *(unsigned char *)(v6 + 56) = v5;
    goto LABEL_5;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
}

void IpAddress::createAddress(IpAddress *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 1);
  if (v4 == 30)
  {
    std::allocate_shared[abi:ne180100]<Ip6Address,std::allocator<Ip6Address>,sockaddr_in6 &,void>(this, &v5);
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    std::allocate_shared[abi:ne180100]<Ip4Address,std::allocator<Ip4Address>,sockaddr_in &,void>(this, &v5);
LABEL_5:
    *(_OWORD *)a2 = v5;
    return;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
}

void IpAddress::addressTypeMaskToString(IpAddress *this)
{
  char v1 = (char)this;
  unint64_t v2 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  if (v1)
  {
    unint64_t v2 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v5, &IpAddress::kAddressTypeIPv4);
    unint64_t v6 = v2;
  }
  if ((v1 & 2) != 0)
  {
    if (v2 >= v7)
    {
      uint64_t v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v5, &IpAddress::kAddressTypeIPv6);
    }
    else
    {
      *(void *)(v2 + 16) = 0x300000000000000;
      *(_OWORD *)unint64_t v2 = IpAddress::kAddressTypeIPv6;
      uint64_t v3 = v2 + 24;
    }
    unint64_t v6 = v3;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C55EFCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL IpAddress::equalsWithDefaultPort(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 104))(a1, a2, 0);
  BOOL result = 0;
  if (v6)
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    int v9 = (*(uint64_t (**)(void))(**(void **)a2 + 56))();
    if (v8 == v9) {
      return 1;
    }
    if (v8 == a3 && v9 == 0) {
      return 1;
    }
    else {
      return !v8 && v9 == a3;
    }
  }
  return result;
}

uint64_t Ip4Address::fromSockaddr(Ip4Address *this, const sockaddr *a2)
{
  if (a2->sa_len != 16 || a2->sa_family != 2) {
    return 0;
  }
  *(sockaddr *)((char *)this + 28) = *a2;
  return 1;
}

BOOL Ip4Address::fromString(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = a1 + 28;
  (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
  return IpAddress::parseIPv4Address(a2, v3);
}

uint64_t Ip4Address::port(Ip4Address *this)
{
  return bswap32(*((unsigned __int16 *)this + 15)) >> 16;
}

uint64_t Ip4Address::setPort(uint64_t this, unsigned int a2)
{
  *(_WORD *)(this + 30) = __rev16(a2);
  return this;
}

uint64_t Ip4Address::sockaddr(Ip4Address *this)
{
  return (uint64_t)this + 28;
}

ImsOutStream *Ip4Address::toStream(Ip4Address *this, ImsOutStream *a2, char a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(void *)BOOL v15 = 0;
  uint64_t v16 = 0;
  int v6 = (char *)inet_ntop(2, (char *)this + 32, v15, 0x10u);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, v6);
    std::string::basic_string[abi:ne180100]<0>(&v9, "x.x.x.x");
    PIIString::PIIString((uint64_t)v11, &v10, &v9);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 48))(a2, v11);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((a3 & 1) == 0) {
        return a2;
      }
    }
    else if ((a3 & 1) == 0)
    {
      return a2;
    }
    if (*((_WORD *)this + 15))
    {
      unint64_t v7 = (void *)*((void *)a2 + 1);
      LOBYTE(v11[0]) = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v11, 1);
      *((unsigned char *)a2 + 17) = 0;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
    }
  }
  return a2;
}

void sub_1C55F001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

BOOL Ip4Address::isValid(Ip4Address *this)
{
  return *((_DWORD *)this + 8) != 0;
}

uint64_t Ip4Address::clear(uint64_t this)
{
  *(_WORD *)(this + 30) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t Ip4Address::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2) {
    return 0;
  }
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  std::string v10 = v6;
  uint64_t v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 208))(a1, &v10, a3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

void sub_1C55F016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Ip4Address::equals(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  return (!a3 || *(unsigned __int16 *)(a1 + 30) == *(unsigned __int16 *)(v3 + 30))
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(v3 + 32);
}

BOOL Ip4Address::isLinkLocal(Ip4Address *this)
{
  return *((__int16 *)this + 16) == -343;
}

uint64_t Ip4Address::makeWildcard(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t Ip4Address::asUintArray(Ip4Address *this, unsigned __int8 *a2, unint64_t a3)
{
  if (a3 < 4) {
    return 0;
  }
  *(_DWORD *)a2 = *((_DWORD *)this + 8);
  return 4;
}

BOOL Ip4Address::isWildcard(Ip4Address *this)
{
  return *((_DWORD *)this + 8) == 0;
}

uint64_t Ip6Address::fromSockaddr(Ip6Address *this, const sockaddr *a2)
{
  if (a2->sa_len != 28 || a2->sa_family != 30) {
    return 0;
  }
  long long v2 = (__int128)*a2;
  *(sockaddr *)((char *)this + 40) = *(sockaddr *)&a2->sa_data[10];
  *(_OWORD *)((char *)this + 28) = v2;
  *((_DWORD *)this + 6) = 0;
  uint64_t v3 = 1;
  *((unsigned char *)this + 56) = 1;
  return v3;
}

BOOL Ip6Address::fromString(BOOL *a1, std::string *a2)
{
  int v4 = a1 + 56;
  (*(void (**)(BOOL *))(*(void *)a1 + 96))(a1);
  return IpAddress::parseIPv6Address(a2, (uint64_t)(a1 + 28), v4);
}

uint64_t Ip6Address::port(Ip6Address *this)
{
  return bswap32(*((unsigned __int16 *)this + 15)) >> 16;
}

uint64_t Ip6Address::setPort(uint64_t this, unsigned int a2)
{
  *(_WORD *)(this + 30) = __rev16(a2);
  return this;
}

uint64_t Ip6Address::sockaddr(Ip6Address *this)
{
  return (uint64_t)this + 28;
}

ImsOutStream *Ip6Address::toStream(Ip6Address *this, ImsOutStream *a2, char a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  memset(&v16, 0, sizeof(v16));
  if (*((unsigned __int8 *)this + 56) | IpAddress::_alwaysCompressIPv6Addresses)
  {
    *(_OWORD *)uint64_t v17 = 0u;
    memset(v18, 0, 30);
    std::string v9 = inet_ntop(30, (char *)this + 36, (char *)v17, 0x2Eu);
    if (!v9) {
      goto LABEL_26;
    }
    std::string::__assign_external(&v16, v9);
  }
  else
  {
    uint64_t v24 = 0;
    long long v22 = 0u;
    memset(v23, 0, sizeof(v23));
    long long v21 = 0u;
    long long v19 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v18, 0, sizeof(v18));
    *(_OWORD *)uint64_t v17 = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    for (unint64_t i = 0; ; i += 2)
    {
      *(void **)((char *)&v18[1] + *((void *)v17[0] - 3)) = (void *)2;
      v15.__r_.__value_.__s.__data_[0] = 48;
      unint64_t v7 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, (char *)&v15);
      *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(void **)((char *)&v18[1] + *((void *)v17[0] - 3)) = (void *)2;
      v15.__r_.__value_.__s.__data_[0] = 48;
      uint64_t v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, (char *)&v15);
      *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      if (i > 0xD) {
        break;
      }
      v15.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v15, 1);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v17[1], &v15);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    std::string v16 = v15;
    v17[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v17 + *((void *)v17[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v23);
  }
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)uint64_t v17 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v15, "xx:xx:xx:xx");
  PIIString::PIIString((uint64_t)v17, &v16, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_18;
  }
  if (*((_WORD *)this + 15))
  {
    std::string v10 = (void *)*((void *)a2 + 1);
    v15.__r_.__value_.__s.__data_[0] = 91;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v15, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v11 = (char *)a2 + 17;
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 48))(a2, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]:", 2);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
LABEL_21:
    unsigned char *v11 = 0;
    goto LABEL_22;
  }
LABEL_18:
  if ((a3 & 2) != 0)
  {
    char v12 = (void *)*((void *)a2 + 1);
    v15.__r_.__value_.__s.__data_[0] = 91;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v15, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v11 = (char *)a2 + 17;
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 48))(a2, v17);
    int v13 = (void *)*((void *)a2 + 1);
    v15.__r_.__value_.__s.__data_[0] = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v15, 1);
    goto LABEL_21;
  }
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 48))(a2, v17);
LABEL_22:
  if (SHIBYTE(v18[3]) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
LABEL_26:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C55F0780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Ip6Address::isValid(Ip6Address *this)
{
  return *(void *)((char *)this + 36) != _invalid_v6_addr || *(void *)((char *)this + 44) != unk_1EA3D57B0;
}

uint64_t Ip6Address::clear(uint64_t this)
{
  *(unsigned char *)(this + 56) = 1;
  *(_WORD *)(this + 30) = 0;
  *(void *)(this + 44) = 0;
  *(void *)(this + 36) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t Ip6Address::equals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2) {
    return 0;
  }
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  std::string v10 = v6;
  uint64_t v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 208))(a1, &v10, a3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

void sub_1C55F0910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Ip6Address::equals(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  if (a3 && *(unsigned __int16 *)(a1 + 30) != *(unsigned __int16 *)(v3 + 30)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 36);
  uint64_t v5 = *(void *)(v3 + 44);
  return *(void *)(a1 + 36) == v4 && *(void *)(a1 + 44) == v5;
}

BOOL Ip6Address::isLinkLocal(Ip6Address *this)
{
  return *((unsigned __int16 *)this + 18) == 33022;
}

__n128 Ip6Address::makeWildcard(Ip6Address *this)
{
  *((unsigned char *)this + 56) = 1;
  __n128 result = *(__n128 *)MEMORY[0x1E4F148B8];
  *(_OWORD *)((char *)this + 36) = *MEMORY[0x1E4F148B8];
  return result;
}

uint64_t Ip6Address::asUintArray(Ip6Address *this, unsigned __int8 *a2, unint64_t a3)
{
  if (a3 < 0x10) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 36);
  return 16;
}

BOOL Ip6Address::isWildcard(Ip6Address *this)
{
  return *(void *)((char *)this + 36) == *MEMORY[0x1E4F148B8]
      && *(void *)((char *)this + 44) == *(void *)(MEMORY[0x1E4F148B8] + 8);
}

uint64_t Ip6Address::isTemporary(Ip6Address *this)
{
  return (*((unsigned __int8 *)this + 24) >> 2) & 1;
}

uint64_t Ip6Address::isDeprecated(Ip6Address *this)
{
  return (*((unsigned __int8 *)this + 24) >> 3) & 1;
}

uint64_t Ip6Address::isNotReady(Ip6Address *this)
{
  return (*((unsigned __int8 *)this + 24) >> 5) & 1;
}

uint64_t Ip6Address::isDetached(Ip6Address *this)
{
  return (*((unsigned __int8 *)this + 24) >> 4) & 1;
}

uint64_t IpAddress::log(IpAddress *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(IpAddress *, ImsOutStream *))(*(void *)this + 40))(this, a2);
}

uint64_t IpAddress::toStream(IpAddress *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(IpAddress *, ImsOutStream *, uint64_t))(*(void *)this + 120))(this, a2, 3);
}

uint64_t IpAddress::isTemporary(IpAddress *this)
{
  return 0;
}

uint64_t IpAddress::isDeprecated(IpAddress *this)
{
  return 0;
}

uint64_t IpAddress::isDetached(IpAddress *this)
{
  return 0;
}

uint64_t IpAddress::isNotReady(IpAddress *this)
{
  return 0;
}

void Ip4Address::~Ip4Address(Ip4Address *this)
{
  char v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  char v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

double Ip4Address::clone@<D0>(Ip4Address *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20CA7B0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 12) = *((_DWORD *)this + 6);
  *((void *)v4 + 3) = &unk_1F20E3E18;
  *(_OWORD *)(v4 + 52) = *(_OWORD *)((char *)this + 28);
  *(void *)&long long v6 = v4 + 24;
  *((void *)&v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, (void *)v4 + 4, (uint64_t)(v4 + 24));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

char *Ip4Address::addressType(Ip4Address *this)
{
  return &IpAddress::kAddressTypeIPv4;
}

uint64_t Ip4Address::addressTypeMask(Ip4Address *this)
{
  return 1;
}

uint64_t Ip4Address::maxPrefix(Ip4Address *this)
{
  return 32;
}

void Ip6Address::~Ip6Address(Ip6Address *this)
{
  char v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  char v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

double Ip6Address::clone@<D0>(Ip6Address *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20E4060;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = *((_DWORD *)this + 6);
  *((void *)v4 + 3) = &unk_1F20E3F00;
  *(_OWORD *)(v4 + 52) = *(_OWORD *)((char *)this + 28);
  *(_OWORD *)(v4 + 65) = *(_OWORD *)((char *)this + 41);
  *(void *)&long long v6 = v4 + 24;
  *((void *)&v6 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, (void *)v4 + 4, (uint64_t)(v4 + 24));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

long long *Ip6Address::addressType(Ip6Address *this)
{
  return &IpAddress::kAddressTypeIPv6;
}

uint64_t Ip6Address::addressTypeMask(Ip6Address *this)
{
  return 2;
}

uint64_t Ip6Address::maxPrefix(Ip6Address *this)
{
  return 128;
}

void std::__shared_ptr_emplace<Ip6Address>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ip6Address>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<Ip6Address>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<Ip4Address,std::allocator<Ip4Address>,sockaddr_in &,void>(_OWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20CA7B0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 3) = &unk_1F20E3E18;
  *(_OWORD *)(v4 + 52) = *a1;
  *a2 = v4 + 24;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, (void *)v4 + 4, (uint64_t)(v4 + 24));
}

void std::allocate_shared[abi:ne180100]<Ip6Address,std::allocator<Ip6Address>,sockaddr_in6 &,void>(_OWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20E4060;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 3) = &unk_1F20E3F00;
  v4[80] = 1;
  *((_DWORD *)v4 + 12) = 0;
  *(_OWORD *)(v4 + 52) = *a1;
  *((_OWORD *)v4 + 4) = *(_OWORD *)((char *)a1 + 12);
  *a2 = v4 + 24;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, (void *)v4 + 4, (uint64_t)(v4 + 24));
}

uint64_t ImsPowerAssertion::ImsPowerAssertion(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::operator=((std::string *)a1, a2);
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_1C55F0F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ImsPowerAssertion::~ImsPowerAssertion(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t ImsPowerAssertion::deinitialize(uint64_t this)
{
  if (*(_DWORD *)(this + 24))
  {
    uint64_t v1 = this;
    std::string::basic_string[abi:ne180100]<0>(v5, "power");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"released power assertion ", 25);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v1);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    this = IOPMAssertionRelease(*(_DWORD *)(v1 + 24));
    *(_DWORD *)(v1 + 24) = 0;
  }
  return this;
}

void sub_1C55F1078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsPowerAssertion::initialize(ImsPowerAssertion *this@<X0>, double a2@<D0>, char a3@<W1>, uint64_t a4@<X8>)
{
  ImsPowerAssertion::deinitialize((uint64_t)this);
  v31[0] = 0;
  v31[1] = 0;
  ims::CFString::CFString(v31, (char *)this, 0x8000100u);
  int v30 = 1;
  uint64_t v8 = (IOPMAssertionID *)((char *)this + 24);
  if (IOPMAssertionDeclareSystemActivity())
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "power");
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v19 = &unk_1F20B2680;
    BOOL v20 = &_bambiDomain;
    int v21 = 0x40000000;
    uint64_t v9 = ImsResult::operator<<<char [34]>((uint64_t)&v19, "Unable to create power assertion ");
    uint64_t v10 = ImsResult::operator<<<std::string>(v9, (uint64_t)this);
    uint64_t v11 = (const std::string *)ims::result::log((uint64_t)__p, v10);
    ImsResult::ImsResult((ImsResult *)a4, v11);
    ImsResult::~ImsResult((ImsResult *)&v19);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "power");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::warn((uint64_t)&v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Sleep not reverted system state returned for power assertion ", 61);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, ImsPowerAssertion *))(*(void *)v12 + 32))(v12, this);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v19);
    }
    uint64_t v26 = 0;
    theint Value = 0;
    ims::CFNumber::CFNumber((ims::CFNumber *)&v26, a2);
    if (IOPMAssertionSetProperty(*v8, @"TimeoutSeconds", theValue))
    {
      IOPMAssertionRelease(*v8);
      *uint64_t v8 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "power");
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v19 = &unk_1F20B2680;
      BOOL v20 = &_bambiDomain;
      int v21 = 0x40000000;
      uint64_t v13 = ImsResult::operator<<<char [43]>((uint64_t)&v19, "Unable to set timeout for power assertion ");
      uint64_t v14 = ImsResult::operator<<<std::string>(v13, (uint64_t)this);
      std::string v15 = (const std::string *)ims::result::log((uint64_t)__p, v14);
      ImsResult::ImsResult((ImsResult *)a4, v15);
      ImsResult::~ImsResult((ImsResult *)&v19);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      ims::CFType::~CFType((ims::CFType *)&v26);
    }
    else
    {
      uint64_t v17 = &unk_1F20B3050;
      CFTypeRef v18 = 0;
      ims::CFMutableArray::create((ims::CFMutableArray *)&v17);
      if (a3) {
        ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v17, @"baseband");
      }
      if ((a3 & 2) != 0) {
        ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v17, @"audio-in");
      }
      if ((a3 & 4) != 0) {
        ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v17, @"audio-out");
      }
      if (IOPMAssertionSetProperty(*v8, @"ResourcesUsed", v18))
      {
        std::string::basic_string[abi:ne180100]<0>(&v19, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v16 = ims::warn((uint64_t)&v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Unable to set assertion resources for power assertion ", 54);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, ImsPowerAssertion *))(*(void *)v16 + 32))(v16, this);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v19);
        }
      }
      ims::CFType::~CFType((ims::CFType *)&v17);
      ims::CFType::~CFType((ims::CFType *)&v26);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
    }
  }
  ims::CFType::~CFType((ims::CFType *)v31);
}

void sub_1C55F15C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a10);
  ims::CFType::~CFType((ims::CFType *)&a24);
  ims::CFType::~CFType((ims::CFType *)(v31 - 80));
  _Unwind_Resume(a1);
}

void PowerAssertionLock::~PowerAssertionLock(PowerAssertionLock **this)
{
  uint64_t v2 = this + 1;
  uint64_t v3 = *this;
  if (*this != (PowerAssertionLock *)(this + 1))
  {
    do
    {
      AssertionCounter::deinitialize(*((AssertionCounter **)v3 + 7));
      char v4 = (PowerAssertionLock *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = (PowerAssertionLock **)v4;
          char v4 = *(PowerAssertionLock **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (PowerAssertionLock **)*((void *)v3 + 2);
          BOOL v6 = *v5 == v3;
          uint64_t v3 = (PowerAssertionLock *)v5;
        }
        while (!v6);
      }
      uint64_t v3 = (PowerAssertionLock *)v5;
    }
    while (v5 != v2);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this, this[1]);
  this[1] = 0;
  this[2] = 0;
  *this = (PowerAssertionLock *)v2;
}

void AssertionCounter::deinitialize(AssertionCounter *this)
{
  if (atomic_load((unsigned int *)this + 6))
  {
    if (atomic_fetch_add((atomic_uint *volatile)this + 6, 0xFFFFFFFF) == 1)
    {
      uint64_t v3 = *((void *)this + 4);
      ImsPowerAssertion::deinitialize(v3);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "power");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"AssertionCounter decreased count - ", 35);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, AssertionCounter *))(*(void *)v4 + 32))(v4, this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)":", 1);
      *(unsigned char *)(v4 + 17) = 0;
      atomic_load((unsigned int *)this + 6);
      std::ostream::operator<<();
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
    }
  }
}

void sub_1C55F18B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PowerAssertionLock::addAssertion(uint64_t **a1, long long *a2)
{
  std::allocate_shared[abi:ne180100]<AssertionCounter,std::allocator<AssertionCounter>,std::string const&,void>((uint64_t)a2, &v7);
  char v8 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  long long v5 = v7;
  long long v7 = 0uLL;
  char v6 = (std::__shared_weak_count *)v4[8];
  *(_OWORD *)(v4 + 7) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void sub_1C55F1964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AssertionCounter::initialize(atomic_uint *this@<X0>, double a2@<D0>, char a3@<W1>, uint64_t a4@<X8>)
{
  atomic_fetch_add(this + 6, 1u);
  std::string::basic_string[abi:ne180100]<0>(v12, "power");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"AssertionCounter increased count - ", 35);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, atomic_uint *))(*(void *)v8 + 32))(v8, this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)":", 1);
  *(unsigned char *)(v8 + 17) = 0;
  atomic_load((unsigned int *)this + 6);
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  uint64_t v9 = (ImsPowerAssertion *)*((void *)this + 4);
  if (*((_DWORD *)v9 + 6))
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    ImsPowerAssertion::initialize(v9, a2, a3, a4);
  }
}

void sub_1C55F1B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PowerAssertionLock::deinitialize(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v9 = (long long *)a2;
    uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (void **)a2, (uint64_t)&std::piecewise_construct, &v9);
    AssertionCounter::deinitialize((AssertionCounter *)v3[7]);
  }
  else
  {
    uint64_t v4 = a1 + 1;
    long long v5 = *a1;
    if (*a1 != (uint64_t *)(a1 + 1))
    {
      do
      {
        AssertionCounter::deinitialize((AssertionCounter *)v5[7]);
        char v6 = (uint64_t *)v5[1];
        if (v6)
        {
          do
          {
            long long v7 = v6;
            char v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            long long v7 = (uint64_t *)v5[2];
            BOOL v8 = *v7 == (void)v5;
            long long v5 = v7;
          }
          while (!v8);
        }
        long long v5 = v7;
      }
      while (v7 != (uint64_t *)v4);
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  BOOL v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C55F1D44(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<AssertionCounter,std::allocator<AssertionCounter>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  double result = std::__shared_ptr_emplace<AssertionCounter>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<AssertionCounter>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1C55F1DA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<AssertionCounter>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<AssertionCounter>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20E40B0;
  std::construct_at[abi:ne180100]<AssertionCounter,std::string const&,AssertionCounter*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C55F1E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AssertionCounter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E40B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AssertionCounter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E40B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<AssertionCounter>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    operator delete(v3);
  }
}

uint64_t std::construct_at[abi:ne180100]<AssertionCounter,std::string const&,AssertionCounter*>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  AssertionCounter::AssertionCounter(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C55F1F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AssertionCounter::AssertionCounter(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)a1, a2);
  atomic_store(0, (unsigned int *)(a1 + 24));
  uint64_t v4 = operator new(0x38uLL);
  v4[1] = 0;
  CFStringRef v4[2] = 0;
  *uint64_t v4 = &unk_1F20E4100;
  uint64_t v5 = ImsPowerAssertion::ImsPowerAssertion((uint64_t)(v4 + 3), a2);
  char v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_1C55F2004(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsPowerAssertion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsPowerAssertion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<ImsPowerAssertion>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void ImsFileManager::moveFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v32, 0, sizeof(v32));
  LOBYTE(v34[0]) = 0;
  char v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (*(char *)(a2 + 23) >= 0) {
    long long v7 = (const std::string::value_type *)a2;
  }
  else {
    long long v7 = *(const std::string::value_type **)a2;
  }
  BOOL v8 = [NSString stringWithCString:v7 encoding:4];
  char v9 = [v6 fileExistsAtPath:v8 isDirectory:v34];

  if (LOBYTE(v34[0])) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  if (v10)
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    memset(v38, 0, sizeof(v38));
    long long v36 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v34, 0, sizeof(v34));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v12, v13);
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) == 0) {
      std::string v15 = (const std::string::value_type *)a2;
    }
    else {
      std::string v15 = *(const std::string::value_type **)a2;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    if (v15[v14 - 1] != 47)
    {
      v33.__r_.__value_.__s.__data_[0] = 47;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v33, 1);
    }
    int v16 = *(char *)(a1 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = *(void *)a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 8);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      while (v19)
      {
        int v20 = *(unsigned __int8 *)(v17 + v19-- - 1);
        if (v20 == 47)
        {
          if (v19 == -1) {
            break;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v17, v18);
          goto LABEL_43;
        }
      }
    }
    std::string::basic_string(&v33, (const std::string *)a1, 0, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v40);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = &v33;
    }
    else {
      int v21 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v21, size);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
LABEL_43:
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v34 + 8, &v32);
    *(void *)&v34[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v34 + *(void *)(*(void *)&v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v34[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v38);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    std::string v32 = *(std::string *)a2;
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = *(void *)a1;
  }
  long long v24 = [NSString stringWithCString:v23 encoding:4];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v25 = &v32;
  }
  else {
    long long v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  uint64_t v26 = [NSString stringWithCString:v25 encoding:4];
  std::string v27 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v31 = 0;
  int v28 = [v27 moveItemAtPath:v24 toPath:v26 error:&v31];
  id v29 = v31;

  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  if (v28) {
    int v30 = 0;
  }
  else {
    int v30 = 0x40000000;
  }
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v30;

  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C55F2514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t ImsNotificationCenter::addObserverForNotification@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result) {
    goto LABEL_19;
  }
  uint64_t v4 = (ims::CFString *)*MEMORY[0x1E4F1C4F0];
  if (!*MEMORY[0x1E4F1C4F0]) {
    goto LABEL_19;
  }
  char v6 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  void v27[2] = ___ZN21ImsNotificationCenter26addObserverForNotificationE15ImsNotificationU13block_pointerFvvE_block_invoke;
  void v27[3] = &unk_1E6512210;
  v27[4] = a2;
  double result = [v6 addObserverForName:v4 object:0 queue:0 usingBlock:v27];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v26 = 0;
    long long v24 = 0u;
    memset(v25, 0, sizeof(v25));
    long long v22 = 0u;
    long long v23 = 0u;
    memset(v21, 0, sizeof(v21));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
    std::ostream::operator<<();
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v21[1], a3);
    int v20 = v4;
    CFRetain(v4);
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F20E3908;
    uint64_t v17 = 0;
    ims::CFString::CFString(&v17, (char *)a3, 0x8000100u);
    std::string::basic_string[abi:ne180100]<0>(v15, "util");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v8 = ims::debug((uint64_t)v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Adding observer ", 16);
    *(unsigned char *)(v8 + 17) = 0;
    LoggableString::LoggableString(&v12, a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for ", 5);
    *(unsigned char *)(v8 + 17) = 0;
    ims::CFString::asString((const __CFString *)v20, (const void *)0x8000100, &v10);
    LoggableString::LoggableString(&__p, &v10);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    id v9 = (id)_dict;
    if (!_dict)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      _dict = (uint64_t)v9;
    }
    [v9 setObject:v7 forKey:v18];
    ims::CFType::~CFType((ims::CFType *)&v17);
    ims::CFType::~CFType((ims::CFType *)&v19);
    v21[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v21[1] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v23) < 0) {
      operator delete(*((void **)&v22 + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x1C878E270](v25);
  }
  else
  {
LABEL_19:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  return result;
}

void sub_1C55F29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  ims::CFType::~CFType((ims::CFType *)&a40);
  ims::CFType::~CFType((ims::CFType *)&a42);
  if (*(char *)(v44 + 23) < 0) {
    operator delete(*(void **)v44);
  }
  std::ostringstream::~ostringstream((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void ___ZN21ImsNotificationCenter26addObserverForNotificationE15ImsNotificationU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    uint64_t v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v2;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21ImsNotificationCenter26addObserverForNotificationE15ImsNotificationU13block_pointerFvvE_block_invoke_2;
  block[3] = &unk_1E65121E8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

uint64_t ___ZN21ImsNotificationCenter26addObserverForNotificationE15ImsNotificationU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ImsNotificationCenter::removeObserver(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1) {
    BOOL v2 = _dict == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    ims::CFString::CFString(&v13, (char *)a1, 0x8000100u);
    uint64_t v4 = v14;
    uint64_t v5 = [(id)_dict objectForKey:v14];
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "util");
      std::string::basic_string[abi:ne180100]<0>(v9, "");
      uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Removing observer ", 18);
      *(unsigned char *)(v6 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)a1);
      (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", v5);
      [(id)_dict removeObjectForKey:v4];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "util");
      std::string::basic_string[abi:ne180100]<0>(v9, "");
      uint64_t v7 = ims::error((uint64_t)v11, (uint64_t)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"no observer found with id ", 26);
      *(unsigned char *)(v7 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)a1);
      (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }
    ims::CFType::~CFType((ims::CFType *)&v13);
  }
}

void sub_1C55F2DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  ims::CFType::~CFType((ims::CFType *)(v27 - 64));
  _Unwind_Resume(a1);
}

void IMSTimerManager::~IMSTimerManager(IMSTimerManager *this)
{
  *(void *)this = &unk_1F20E4150;
  std::__tree<std::__value_type<std::string,IMSTimerManager::TimerData>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSTimerManager::TimerData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSTimerManager::TimerData>>>::destroy(*((void **)this + 10));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E4150;
  std::__tree<std::__value_type<std::string,IMSTimerManager::TimerData>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSTimerManager::TimerData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSTimerManager::TimerData>>>::destroy(*((void **)this + 10));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x1C878E320);
}

void IMSTimerManager::registerTimer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v23 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v23, (uint64_t)&v24);
  ImsResult::~ImsResult((ImsResult *)&v24);
  if (a2)
  {
    if (a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(void *)(a2 + 8)) {
          goto LABEL_5;
        }
      }
      else if (*(unsigned char *)(a2 + 23))
      {
LABEL_5:
        memset(&__p, 0, sizeof(__p));
        SipTimerContainer::fullTimerId(a3, a2, &__p);
        uint64_t v6 = ims::debug(a3 + 48, a3 + 72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"registering timer ", 18);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &__p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        uint64_t v7 = (void **)(a1 + 72);
        uint64_t v8 = (void *)(a1 + 80);
        if ((void **)(a1 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, (void **)&__p.__r_.__value_.__l.__data_))
        {
          uint64_t v9 = ims::warn(a3 + 48, a3 + 72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"overwriting timer for ", 22);
          *(unsigned char *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v24 = __p;
        }
        *(void *)&long long v25 = a2;
        *((void *)&v25 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a3;
        uint64_t v13 = (void *)(a1 + 80);
        uint64_t v14 = (void *)(a1 + 80);
        std::string v15 = (void *)*v8;
        if (!*v8) {
          goto LABEL_27;
        }
        uint64_t v13 = (void *)(a1 + 80);
        while (1)
        {
          while (1)
          {
            uint64_t v14 = v15;
            char v16 = v15 + 4;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)v15 + 4) & 0x80) == 0)break; {
            std::string v15 = (void *)*v14;
            }
            uint64_t v13 = v14;
            if (!*v14) {
              goto LABEL_27;
            }
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (void **)&__p.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
          uint64_t v13 = v14 + 1;
          }
          std::string v15 = (void *)v14[1];
          if (!v15) {
            goto LABEL_27;
          }
        }
        uint64_t v17 = (void *)*v13;
        if (!*v13)
        {
LABEL_27:
          uint64_t v27 = 0;
          uint64_t v18 = operator new(0x60uLL);
          v26[0] = v18;
          v26[1] = (void *)(a1 + 80);
          uint64_t v19 = (std::string *)(v18 + 4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            _OWORD v18[6] = *((void *)&__p.__r_.__value_.__l + 2);
          }
          v18[11] = 0;
          *(_OWORD *)(v18 + 9) = 0u;
          *(_OWORD *)(v18 + 7) = 0u;
          LOBYTE(v27) = 1;
          *uint64_t v18 = 0;
          v18[1] = 0;
          _OWORD v18[2] = v14;
          void *v13 = v18;
          int v20 = (void *)**v7;
          if (v20)
          {
            *uint64_t v7 = v20;
            uint64_t v18 = (void *)*v13;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v18);
          ++*(void *)(a1 + 88);
          uint64_t v17 = v26[0];
          v26[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
        }
        int v21 = (void **)(v17 + 7);
        if (*((char *)v17 + 79) < 0) {
          operator delete(*v21);
        }
        *(_OWORD *)int v21 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
        v17[9] = *((void *)&v24.__r_.__value_.__l + 2);
        *((_OWORD *)v17 + 5) = v25;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          int v11 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_37;
        }
        goto LABEL_38;
      }
      uint64_t v12 = ims::warn(a3 + 48, a3 + 72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"ignoring timer with no timerId", 30);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      goto LABEL_38;
    }
    std::string::basic_string[abi:ne180100]<0>(&v24, "timer");
    std::string::basic_string[abi:ne180100]<0>(v26, "");
    uint64_t v10 = ims::warn((uint64_t)&v24, (uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ignoring timer with no container", 32);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "timer");
    std::string::basic_string[abi:ne180100]<0>(v26, "");
    uint64_t v10 = ims::warn((uint64_t)&v24, (uint64_t)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ignoring timer with no timer information", 40);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    int v11 = (void *)v24.__r_.__value_.__r.__words[0];
LABEL_37:
    operator delete(v11);
  }
LABEL_38:
  ImsLock::~ImsLock(&v23);
}

void sub_1C55F33E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, pthread_mutex_t *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>>>>::reset[abi:ne180100](v21 - 88);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  ImsLock::~ImsLock(&a15);
  _Unwind_Resume(a1);
}

void IMSTimerManager::unregisterTimer(uint64_t a1, void **a2)
{
  uint64_t v12 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v12, (uint64_t)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
  uint64_t v4 = (void ***)(a1 + 72);
  if ((void **)(a1 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2))
  {
    uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
    if ((void **)(a1 + 80) != v5)
    {
      uint64_t v6 = (uint64_t *)v5;
      uint64_t v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        uint64_t v9 = v5;
        do
        {
          uint64_t v8 = (void **)v9[2];
          BOOL v10 = *v8 == v9;
          uint64_t v9 = v8;
        }
        while (!v10);
      }
      if (*v4 == v5) {
        *uint64_t v4 = v8;
      }
      int v11 = *(uint64_t **)(a1 + 80);
      --*(void *)(a1 + 88);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
  ImsLock::~ImsLock(&v12);
}

void IMSTimerManager::timerFired(uint64_t a1, void **a2)
{
  BOOL v10 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v10, (uint64_t)v11);
  ImsResult::~ImsResult((ImsResult *)v11);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "timer");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::warn((uint64_t)v11, (uint64_t)__p);
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" fired, but that timer id is not registered", 43);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    ImsLock::~ImsLock(&v10);
  }
  else
  {
    uint64_t v6 = v4[10];
    uint64_t v5 = v4[11];
    ImsLock::~ImsLock(&v10);
    if (v5) {
      (*(void (**)(void *, void *))(*(void *)v5 + 32))(v5, v6);
    }
  }
}

void sub_1C55F36DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pthread_mutex_t *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  ImsLock::~ImsLock(&a16);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IMSTimerManager::TimerData>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSTimerManager::TimerData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSTimerManager::TimerData>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IMSTimerManager::TimerData>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSTimerManager::TimerData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSTimerManager::TimerData>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,IMSTimerManager::TimerData>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSTimerManager::TimerData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSTimerManager::TimerData>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSTimerManager::TimerData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t QMIRTPStackController::QMIRTPStackController(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, void *a5, long long *a6)
{
  uint64_t v10 = *a2;
  int v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a5;
  char v12 = (std::__shared_weak_count *)a5[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20BC6F8;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 64) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (v11) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v11);
LABEL_10:
  *(void *)a1 = &unk_1F20E4198;
  *(void *)(a1 + 72) = &unk_1F20E4228;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 184) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 192));
  uint64_t v14 = *(NSObject **)(*a5 + 344);
  object[0] = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  std::string v15 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4320;
  uint64_t v16 = QMIRTPCommandDriver::QMIRTPCommandDriver((uint64_t)&v15[1], object, a4);
  *(void *)(a1 + 336) = v16;
  *(void *)(a1 + 344) = v15;
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[1].__shared_owners_ = v16;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_19:
  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 352), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    *(void *)(a1 + 368) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 352) = v18;
  }
  std::string::basic_string[abi:ne180100]<0>(object, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::debug((uint64_t)object, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"QMIRTPStackController", 21);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(object[0]);
  }
  *(void *)(a1 + 296) = a1 + 72;
  return a1;
}

void sub_1C55F3ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char v24 = *(std::__shared_weak_count **)(v20 + 344);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTimerContainer::~SipTimerContainer(v22);
  std::__tree<unsigned int>::destroy(v21, *(void **)(v20 + 176));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(v20 + 152));
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v20 + 128));
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  RTPStackController::~RTPStackController((RTPStackController *)v20);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::~QMIRTPStackController(int8x8_t *this)
{
  *this = (int8x8_t)&unk_1F20E4198;
  this[9] = (int8x8_t)&unk_1F20E4228;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~QMIRTPStackController", 22);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  SipTimerContainer::cancelTimer(this + 24, (std::string *)"UninitializeAllTimer");
  uint64_t v3 = (uint64_t)this[42];
  v5[0] = 0;
  v5[1] = 0;
  QMIRTPCommandDriver::setStackController(v3, v5);
  if (this[46].i8[7] < 0) {
    operator delete(*(void **)&this[44]);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[43];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)&this[24]);
  std::__tree<unsigned int>::destroy((uint64_t)&this[21], *(void **)&this[22]);
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)&this[19]);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)&this[16]);
  v8[0] = &this[12];
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  RTPStackController::~RTPStackController((RTPStackController *)this);
}

{
  uint64_t vars8;

  QMIRTPStackController::~QMIRTPStackController(this);
  JUMPOUT(0x1C878E320);
}

void QMIRTPCommandDriver::setStackController(uint64_t a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setStackController", 18);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 136) = v5;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C55F3E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIRTPStackController::~QMIRTPStackController(int8x8_t *this)
{
}

{
  uint64_t vars8;

  QMIRTPStackController::~QMIRTPStackController(this - 9);
  JUMPOUT(0x1C878E320);
}

void QMIRTPStackController::createRTPSession(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, void **a6@<X5>, dispatch_object_t *a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = a1 + 120;
  if ((void **)(a1 + 128) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, a6))
  {
    char v18 = -1;
  }
  else
  {
    uint64_t v17 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v16, &v60, a6);
    if (!v17) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    char v18 = *(unsigned char *)(v17 + 56);
  }
  uint64_t v19 = (std::__shared_weak_count *)a4[1];
  if (v19)
  {
    uint64_t v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      uint64_t v21 = *a4;
      if (v21)
      {
        char v22 = *(std::__shared_weak_count **)(v21 + 128);
        if (v22 && (char v22 = std::__shared_weak_count::lock(v22)) != 0)
        {
          uint64_t v51 = v22;
          char v22 = *(std::__shared_weak_count **)(v21 + 120);
        }
        else
        {
          uint64_t v51 = 0;
        }
        uint64_t v52 = v20;
        char v49 = a8;
        uint64_t v50 = (ImsPrefs *)SipStack::prefs((SipStack *)v22);
        uint64_t v53 = v21;
        int v54 = a5;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v60, (void *)(a1 + 8));
        char v24 = v60;
        long long v25 = v61[0];
        uint64_t v26 = *(void **)a2;
        uint64_t v27 = *(std::__shared_weak_count **)(a2 + 8);
        int v28 = (std::__shared_weak_count *)operator new(0x250uLL);
        id v29 = v28;
        v28->__shared_owners_ = 0;
        v28->__shared_weak_owners_ = 0;
        v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4370;
        uint64_t v60 = v26;
        v61[0] = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = *(std::__shared_weak_count **)(a1 + 56);
        std::string __p = *(void **)(a1 + 48);
        uint64_t v58 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v64 = v24;
        xpc_object_t v65 = v25;
        id v31 = &v28[1].__vftable;
        QMIRTPSession::QMIRTPSession((uint64_t)&v28[1], (uint64_t *)&v60, a3, (uint64_t *)&__p, v50, &v64, v18, v54, (long long *)a6, a7);
        if (v65) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v65);
        }
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        if (v61[0]) {
          std::__shared_weak_count::__release_weak(v61[0]);
        }
        shared_weak_owners = (std::__shared_weak_count *)v29[1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          if (shared_weak_owners->__shared_owners_ != -1)
          {
LABEL_34:
            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
            atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            unint64_t v33 = *(void *)(a1 + 112);
            uint64_t v34 = *(char **)(a1 + 104);
            if ((unint64_t)v34 >= v33)
            {
              long long v36 = *(char **)(a1 + 96);
              uint64_t v37 = (v34 - v36) >> 4;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 60) {
                std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v33 - (void)v36) >> 3 > v38) {
                unint64_t v38 = (uint64_t)(v33 - (void)v36) >> 3;
              }
              if (v33 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v38;
              }
              uint64_t v63 = a1 + 112;
              if (v39 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              char v40 = (char *)operator new(16 * v39);
              char v41 = &v40[16 * v37];
              *(void *)char v41 = v31;
              *((void *)v41 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29;
              std::string v35 = v41 + 16;
              if (v34 == v36)
              {
                int64x2_t v43 = vdupq_n_s64((unint64_t)v34);
              }
              else
              {
                do
                {
                  long long v42 = *((_OWORD *)v34 - 1);
                  v34 -= 16;
                  *((_OWORD *)v41 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v42;
                  v41 -= 16;
                  *(void *)uint64_t v34 = 0;
                  *((void *)v34 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
                }
                while (v34 != v36);
                int64x2_t v43 = *(int64x2_t *)(a1 + 96);
                unint64_t v33 = *(void *)(a1 + 112);
              }
              *(void *)(a1 + 96) = v41;
              *(void *)(a1 + 104) = v35;
              *(int64x2_t *)uint64_t v61 = v43;
              *(void *)(a1 + 112) = &v40[16 * v39];
              unint64_t v62 = v33;
              uint64_t v60 = (void *)v43.i64[0];
              std::__split_buffer<std::weak_ptr<QMIRTPSession>>::~__split_buffer((uint64_t)&v60);
            }
            else
            {
              *(void *)uint64_t v34 = v31;
              *((void *)v34 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29;
              std::string v35 = v34 + 16;
              *(void *)(a1 + 104) = v34 + 16;
            }
            *(void *)(a1 + 104) = v35;
            uint64_t v55 = v29 + 2;
            int v56 = v29;
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v44 = *(std::__shared_weak_count **)(v53 + 128);
            if (v44)
            {
              uint64_t v44 = std::__shared_weak_count::lock(v44);
              std::string v45 = v44;
              uint64_t v20 = v52;
              int v46 = v49;
              int v47 = v54;
              if (v44) {
                uint64_t v44 = *(std::__shared_weak_count **)(v53 + 120);
              }
            }
            else
            {
              std::string v45 = 0;
              uint64_t v20 = v52;
              int v46 = v49;
              int v47 = v54;
            }
            uint64_t v48 = (ImsPrefs *)SipStack::prefs((SipStack *)v44);
            MediaSessionStateMachine::create((uint64_t *)&v55, v48, v47 == 2, v46);
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
            if (v56) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v56);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
LABEL_59:
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            return;
          }
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v29[1].__shared_owners_ = (uint64_t)v31;
          v29[1].__shared_weak_owners_ = (uint64_t)v29;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
        else
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v29[1].__shared_owners_ = (uint64_t)v31;
          v29[1].__shared_weak_owners_ = (uint64_t)v29;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v23 = ims::error((uint64_t)&v60, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"SDPSession expired in QMIRTPStackController::createRTPSession", 61);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  if (v59 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v61[1]) < 0) {
    operator delete(v60);
  }
  *a8 = 0;
  a8[1] = 0;
  if (v20) {
    goto LABEL_59;
  }
}

void sub_1C55F4328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25,void *__p,std::__shared_weak_count *a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 96);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::getSessionByQMIid(QMIRTPStackController *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"getSessionByQMIid", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v10 = *((void *)this + 13);
  while (v10 != *((void *)this + 12))
  {
    char v11 = *(std::__shared_weak_count **)(v10 - 8);
    v10 -= 16;
    *a3 = 0;
    a3[1] = 0;
    if (v11)
    {
      char v12 = std::__shared_weak_count::lock(v11);
      a3[1] = v12;
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v13 = *(void *)v10;
      *a3 = *(void *)v10;
      if (!v13) {
        goto LABEL_14;
      }
      if (*(unsigned __int8 *)(v13 + 490) == a2) {
        return;
      }
LABEL_19:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    else
    {
      char v12 = 0;
LABEL_14:
      uint64_t v14 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v10 + 16), *((long long **)this + 13), v10);
      for (uint64_t i = *((void *)this + 13); i != v14; i -= 16)
      {
        uint64_t v16 = *(std::__shared_weak_count **)(i - 8);
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      *((void *)this + 13) = v14;
      if (v12) {
        goto LABEL_19;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_1C55F4648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *QMIRTPStackController::getProfileByStackId(uint64_t a1, void **a2)
{
  uint64_t v3 = (void **)(a1 + 128);
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    uint64_t v5 = (void **)(a1 + 128);
    do
    {
      char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a2);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = v4 + 1;
      }
      if (v6 >= 0) {
        uint64_t v5 = (void **)v4;
      }
      uint64_t v4 = (void *)*v7;
    }
    while (*v7);
    if (v5 != v3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
    {
      return v5[7];
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No profile for stackId ", 23);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return 0;
}

void sub_1C55F47E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::setVoiceSystemIdForInstance(uint64_t **this, unsigned int a2, int a3)
{
  unsigned int v14 = a2;
  v12[0] = &v14;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 21, &v14, (uint64_t)&std::piecewise_construct, (unsigned int **)v12)+ 8) = a3;
  uint64_t v5 = (QMIRTPStackController *)this[15];
  if (v5 != (QMIRTPStackController *)(this + 16))
  {
    do
    {
      if (*((_DWORD *)v5 + 16) == v14)
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmidriver");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v6 = ims::debug((uint64_t)v12, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Recording voice system Id ", 26);
        *(unsigned char *)(v6 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ", 5);
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, (uint64_t)v5 + 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" with instance ", 15);
        *(unsigned char *)(v6 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v6 + 17) = 0;
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        if (v13 < 0) {
          operator delete(v12[0]);
        }
        *((_DWORD *)v5 + 15) = a3;
      }
      uint64_t v7 = (QMIRTPStackController *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(QMIRTPStackController **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (QMIRTPStackController *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != (QMIRTPStackController *)(this + 16));
  }
}

void sub_1C55F4A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::initialize(uint64_t a1, std::string::size_type a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 336);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v36, (void *)(a1 + 8));
  std::string::size_type size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  long long v38 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  QMIRTPCommandDriver::setStackController(v6, (uint64_t *)&v38);
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  unsigned int v37 = 0;
  IMSClientManager::instance(v8);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  (*(void (**)(std::string *__return_ptr))(**((void **)__p + 21) + 192))(&v36);
  unsigned int v9 = *(_DWORD *)(v36.__r_.__value_.__r.__words[0] + 4100);
  if (v36.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unsigned int v37 = v9;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, (void **)a2);
  if ((void **)(a1 + 128) != v10 && *((unsigned __int8 *)v10 + 56) == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v11 = ims::warn((uint64_t)&v36, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"AppId : ", 8);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" is already initialized for ", 28);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string::size_type))(*(void *)v11 + 32))(v11, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v35 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  v36.__r_.__value_.__r.__words[0] = a2;
  std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), (void **)a2, (long long **)&v36)[56] = a3;
  unsigned int v12 = v37;
  v36.__r_.__value_.__r.__words[0] = a2;
  *((_DWORD *)std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), (void **)a2, (long long **)&v36)+ 16) = v12;
  uint64_t v13 = *(void *)(a1 + 176);
  unsigned int v14 = v37;
  if (v13)
  {
    uint64_t v15 = a1 + 176;
    do
    {
      unsigned int v16 = *(_DWORD *)(v13 + 28);
      BOOL v17 = v16 >= v37;
      if (v16 >= v37) {
        char v18 = (uint64_t *)v13;
      }
      else {
        char v18 = (uint64_t *)(v13 + 8);
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      uint64_t v13 = *v18;
    }
    while (*v18);
    if (v15 != a1 + 176 && v37 >= *(_DWORD *)(v15 + 28))
    {
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      int v19 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 168), &v37, (uint64_t)&std::piecewise_construct, (unsigned int **)&v36)+ 8);
      v36.__r_.__value_.__r.__words[0] = a2;
      *((_DWORD *)std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), (void **)a2, (long long **)&v36)+ 15) = v19;
      unsigned int v14 = v37;
    }
  }
  uint64_t v20 = *(void *)(a1 + 152);
  if (!v20) {
    goto LABEL_39;
  }
  uint64_t v21 = a1 + 152;
  do
  {
    unsigned int v22 = *(_DWORD *)(v20 + 28);
    BOOL v23 = v22 >= v14;
    if (v22 >= v14) {
      char v24 = (uint64_t *)v20;
    }
    else {
      char v24 = (uint64_t *)(v20 + 8);
    }
    if (v23) {
      uint64_t v21 = v20;
    }
    uint64_t v20 = *v24;
  }
  while (*v24);
  if (v21 == a1 + 152 || v14 < *(_DWORD *)(v21 + 28)) {
    goto LABEL_39;
  }
  int v25 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 144), v14, &v37)+ 8);
  if (v25 == 2)
  {
    memset(&v36, 0, sizeof(v36));
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v36 = *(std::string *)a2;
    }
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 1174405120;
    void v30[2] = ___ZN21QMIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke;
    void v30[3] = &__block_descriptor_tmp_59;
    v30[4] = a1;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v31, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string v31 = v36;
    }
    char v32 = a3;
    ims::performBlock((IMSClientManager *)v30);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    id v29 = (void *)v31.__r_.__value_.__r.__words[0];
    goto LABEL_51;
  }
  if (!v25)
  {
    unsigned int v14 = v37;
LABEL_39:
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 144), v14, &v37)+ 8) = 1;
    uint64_t v26 = *(QMIRTPCommandDriver **)(a1 + 336);
    v36.__r_.__value_.__r.__words[0] = a2;
    uint64_t v27 = std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 120), (void **)a2, (long long **)&v36);
    QMIRTPCommandDriver::initializeDriverForInstance(v26, *((unsigned int *)v27 + 16));
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v28 = ims::warn((uint64_t)&v36, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"not acting on appId ", 20);
  *(unsigned char *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v28 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" while stack is still initializing", 34);
  *(unsigned char *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  if (v35 < 0)
  {
    id v29 = __p;
LABEL_51:
    operator delete(v29);
  }
LABEL_52:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1C55F4F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (void (***)(void, uint64_t *, uint64_t, uint64_t, void *))v2[3];
      if (v6)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, v2 + 1);
        uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        v8[0] = &unk_1F20B2680;
        v8[1] = &_bambiDomain;
        int v9 = 0;
        (**v6)(v6, &v13, a1 + 40, v7, v8);
        ImsResult::~ImsResult((ImsResult *)v8);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C55F50A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

BOOL QMIRTPStackController::controllerInitialized(QMIRTPStackController *this)
{
  if (!*((void *)this + 20)) {
    return 0;
  }
  uint64_t v1 = (char *)*((void *)this + 18);
  uint64_t v2 = (char *)this + 152;
  if (v1 == (char *)this + 152) {
    return 1;
  }
  do
  {
    int v3 = *((_DWORD *)v1 + 8);
    BOOL result = v3 == 2;
    if (v3 != 2) {
      break;
    }
    uint64_t v5 = (char *)*((void *)v1 + 1);
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(char **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v1 + 2);
        BOOL v7 = *(void *)v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void QMIRTPStackController::cleanup(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(&ProfileByStackId, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(v83, "");
  uint64_t v6 = ims::debug((uint64_t)&ProfileByStackId, (uint64_t)v83);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"cleanup", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", deinitialize=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  if (a3) {
    long long v10 = "true";
  }
  else {
    long long v10 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v82 < 0) {
    operator delete(__p[0]);
  }
  if (v84 < 0) {
    operator delete(v83[0]);
  }
  if (v87 < 0) {
    operator delete(ProfileByStackId);
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  int v75 = a3;
  if (v11 == 15
    && (v12 >= 0 ? (uint64_t v13 = (unsigned __int8 *)a2) : (uint64_t v13 = *(unsigned __int8 **)a2),
        (v14 = *(void *)v13, uint64_t v15 = *(void *)(v13 + 7), v14 == 0x536C6C41494D516BLL)
      ? (BOOL v16 = v15 == 0x736E6F6973736553)
      : (BOOL v16 = 0),
        v16))
  {
    char v35 = *(uint64_t **)(a1 + 96);
    for (uint64_t i = *(uint64_t **)(a1 + 104); v35 != i; v35 += 2)
    {
      unsigned int v37 = (std::__shared_weak_count *)v35[1];
      if (v37)
      {
        uint64_t v38 = *v35;
        atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v39 = std::__shared_weak_count::lock(v37);
        if (v39)
        {
          char v40 = v39;
          if (v38)
          {
            uint64_t v42 = *(void *)(v38 + 24);
            uint64_t v41 = v38 + 24;
            (*(void (**)(void **__return_ptr, uint64_t))(v42 + 152))(&ProfileByStackId, v41);
            if (v86)
            {
              int64x2_t v43 = std::__shared_weak_count::lock(v86);
              if (v43) {
                uint64_t v44 = ProfileByStackId;
              }
              else {
                uint64_t v44 = 0;
              }
              if (v86) {
                std::__shared_weak_count::__release_weak(v86);
              }
              if (v44)
              {
                uint64_t v79 = v41;
                xpc_object_t v80 = v40;
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
                (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v44 + 8))(v44, &v79, 13);
                if (v80) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v80);
                }
              }
              if (v43) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
              }
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
    BOOL v18 = 0;
    uint64_t v17 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 96);
    if (v17 != *(void *)(a1 + 104))
    {
      BOOL v18 = 0;
      while (1)
      {
        int v19 = *(std::__shared_weak_count **)(v17 + 8);
        if (!v19) {
          break;
        }
        uint64_t v20 = std::__shared_weak_count::lock(v19);
        if (!v20) {
          goto LABEL_41;
        }
        uint64_t v21 = *(void *)v17;
        if (!*(void *)v17) {
          goto LABEL_41;
        }
        uint64_t v22 = *(unsigned __int8 *)(v21 + 103);
        if ((v22 & 0x80u) == 0) {
          uint64_t v23 = *(unsigned __int8 *)(v21 + 103);
        }
        else {
          uint64_t v23 = *(void *)(v21 + 88);
        }
        uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
        int v25 = (char)v24;
        if ((v24 & 0x80u) != 0) {
          uint64_t v24 = *(void *)(a2 + 8);
        }
        if (v23 != v24) {
          goto LABEL_50;
        }
        uint64_t v26 = (const void **)(v21 + 80);
        if (v25 >= 0) {
          uint64_t v27 = (unsigned __int8 *)a2;
        }
        else {
          uint64_t v27 = *(unsigned __int8 **)a2;
        }
        if ((v22 & 0x80) != 0)
        {
          if (memcmp(*v26, v27, *(void *)(v21 + 88))) {
            goto LABEL_50;
          }
        }
        else if (*(unsigned char *)(v21 + 103))
        {
          while (*(unsigned __int8 *)v26 == *v27)
          {
            uint64_t v26 = (const void **)((char *)v26 + 1);
            ++v27;
            if (!--v22) {
              goto LABEL_51;
            }
          }
LABEL_50:
          v17 += 16;
LABEL_46:
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          goto LABEL_47;
        }
LABEL_51:
        MediaSessionDriver::cancelAllTimers((MediaSessionDriver *)(v21 + 24));
        BOOL v18 = *(unsigned char *)(v21 + 496) != 0;
        v78[0] = v21;
        v78[1] = (uint64_t)v20;
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        QMIRTPStackController::uninitializeQMISession(a1, v78);
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)(v21 + 24) + 152))(&ProfileByStackId, v21 + 24);
        if (v86)
        {
          std::string v31 = std::__shared_weak_count::lock(v86);
          if (v31) {
            char v32 = ProfileByStackId;
          }
          else {
            char v32 = 0;
          }
          if (v86) {
            std::__shared_weak_count::__release_weak(v86);
          }
          if (v32)
          {
            uint64_t v76 = v21 + 24;
            xpc_object_t v77 = v20;
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v32 + 8))(v32, &v76, 13);
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
          }
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)(v21 + 24) + 176))(v21 + 24) == *(void *)(a1 + 80)) {
          *(void *)(a1 + 80) = 0;
        }
        uint64_t v28 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v17 + 16), *(long long **)(a1 + 104), v17);
        for (uint64_t j = *(void *)(a1 + 104); j != v28; j -= 16)
        {
          uint64_t v34 = *(std::__shared_weak_count **)(j - 8);
          if (v34) {
            std::__shared_weak_count::__release_weak(v34);
          }
        }
LABEL_45:
        *(void *)(a1 + 104) = v28;
        if (v20) {
          goto LABEL_46;
        }
LABEL_47:
        if (v17 == *(void *)(a1 + 104)) {
          goto LABEL_89;
        }
      }
      uint64_t v20 = 0;
LABEL_41:
      uint64_t v28 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v17 + 16), *(long long **)(a1 + 104), v17);
      for (uint64_t k = *(void *)(a1 + 104); k != v28; k -= 16)
      {
        int v30 = *(std::__shared_weak_count **)(k - 8);
        if (v30) {
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_45;
    }
    BOOL v18 = 0;
  }
LABEL_89:
  if (*(void *)(a1 + 96) == v17)
  {
    *(void *)(a1 + 80) = 0;
    QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), 0, (void **)a2, 3u, v18);
    QMIRTPCommandDriver::uninitializeAllSessionsReq(*(void **)(a1 + 336), a2, 255);
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (v75)
  {
    uint64_t v45 = *(unsigned __int8 *)(a2 + 23);
    int v46 = (char)v45;
    if ((v45 & 0x80u) != 0) {
      uint64_t v45 = *(void *)(a2 + 8);
    }
    if (v45 == 15
      && (v46 >= 0 ? (int v47 = (unsigned __int8 *)a2) : (int v47 = *(unsigned __int8 **)a2),
          (uint64_t v48 = *(void *)v47, v49 = *(void *)(v47 + 7), v48 == 0x536C6C41494D516BLL)
        ? (BOOL v50 = v49 == 0x736E6F6973736553)
        : (BOOL v50 = 0),
          v50))
    {
      SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 192));
      std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(a1 + 152));
      *(void *)(a1 + 144) = a1 + 152;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 152) = 0;
      std::__tree<unsigned int>::destroy(a1 + 168, *(void **)(a1 + 176));
      *(void *)(a1 + 168) = a1 + 176;
      *(void *)(a1 + 176) = 0;
      xpc_object_t v66 = *(char **)(a1 + 128);
      xpc_object_t v65 = (void *)(a1 + 128);
      v65[7] = 0;
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v66);
      *(v65 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v65;
      *xpc_object_t v65 = 0;
      v65[1] = 0;
    }
    else
    {
      ProfileByStackId = QMIRTPStackController::getProfileByStackId(a1, (void **)a2);
      xpc_object_t v86 = v51;
      if (((unint64_t)v51 & 0xFF00000000) != 0)
      {
        uint64_t v52 = *(void **)(a1 + 120);
        if (v52 != (void *)(a1 + 128))
        {
          unsigned int v53 = v51;
          int v54 = 0;
          do
          {
            if (*((_DWORD *)v52 + 16) == v51) {
              ++v54;
            }
            uint64_t v55 = (void *)v52[1];
            if (v55)
            {
              do
              {
                int v56 = v55;
                uint64_t v55 = (void *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                int v56 = (void *)v52[2];
                BOOL v16 = *v56 == (void)v52;
                uint64_t v52 = v56;
              }
              while (!v16);
            }
            uint64_t v52 = v56;
          }
          while (v56 != (void *)(a1 + 128));
          if (v54 == 1)
          {
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 144), v51, &v86)+ 8) = 0;
            uint64_t v57 = *(uint64_t **)(a1 + 176);
            if (v57)
            {
              uint64_t v58 = a1 + 176;
              uint64_t v59 = *(void *)(a1 + 176);
              do
              {
                unsigned int v60 = *(_DWORD *)(v59 + 28);
                BOOL v61 = v60 >= v53;
                if (v60 >= v53) {
                  unint64_t v62 = (uint64_t *)v59;
                }
                else {
                  unint64_t v62 = (uint64_t *)(v59 + 8);
                }
                if (v61) {
                  uint64_t v58 = v59;
                }
                uint64_t v59 = *v62;
              }
              while (*v62);
              if (v58 != a1 + 176 && *(_DWORD *)(v58 + 28) <= v53)
              {
                uint64_t v63 = *(void **)(v58 + 8);
                if (v63)
                {
                  do
                  {
                    xpc_object_t v64 = v63;
                    uint64_t v63 = (void *)*v63;
                  }
                  while (v63);
                }
                else
                {
                  xpc_object_t v67 = (void *)v58;
                  do
                  {
                    xpc_object_t v64 = (void *)v67[2];
                    BOOL v16 = *v64 == (void)v67;
                    xpc_object_t v67 = v64;
                  }
                  while (!v16);
                }
                if (*(void *)(a1 + 168) == v58) {
                  *(void *)(a1 + 168) = v64;
                }
                --*(void *)(a1 + 184);
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v57, (uint64_t *)v58);
                operator delete((void *)v58);
              }
            }
          }
        }
      }
      xpc_object_t v68 = (void ***)(a1 + 120);
      xpc_object_t v69 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, (void **)a2);
      if ((void **)(a1 + 128) != v69)
      {
        xpc_object_t v70 = v69;
        xpc_object_t v71 = (void **)v69[1];
        if (v71)
        {
          do
          {
            xpc_object_t v72 = v71;
            xpc_object_t v71 = (void **)*v71;
          }
          while (v71);
        }
        else
        {
          xpc_object_t v73 = v69;
          do
          {
            xpc_object_t v72 = (void **)v73[2];
            BOOL v16 = *v72 == v73;
            xpc_object_t v73 = v72;
          }
          while (!v16);
        }
        if (*v68 == v69) {
          *xpc_object_t v68 = v72;
        }
        xpc_object_t v74 = *(uint64_t **)(a1 + 128);
        --*(void *)(a1 + 136);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v74, (uint64_t *)v70);
        if (*((char *)v70 + 55) < 0) {
          operator delete(v70[4]);
        }
        operator delete(v70);
      }
    }
  }
}

void sub_1C55F59FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::uninitializeQMISession(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 336);
  int v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::sessionUninitializeReq(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C55F5B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIRTPStackController::cleanupAfterHandover(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, 0);
}

void QMIRTPStackController::handleStackInitializeResponse(uint64_t **this, unsigned int a2, int a3)
{
  v59[0] = a2;
  std::string::basic_string[abi:ne180100]<0>(&v52, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v52, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStackInitializeResponse", 29);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", result= ", 10);
  *(unsigned char *)(v7 + 17) = 0;
  if (a3) {
    long long v10 = "true";
  }
  else {
    long long v10 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, v10);
  (*(void (**)(uint64_t, void ***))(*(void *)v7 + 32))(v7, &v56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v58) < 0) {
    operator delete(v56);
  }
  if ((v51[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  v52.__r_.__value_.__r.__words[2] = 0;
  if ((a3 & 1) == 0)
  {
    memset(&v51[8], 0, 48);
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    *(_DWORD *)uint64_t v51 = 0x40000000;
    ImsResult::operator=((uint64_t)&v52, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 18, a2, v59)+ 8) = 2;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  int v56 = (void **)&v57;
  uint64_t v11 = (QMIRTPStackController *)this[15];
  if (v11 != (QMIRTPStackController *)(this + 16))
  {
    int v12 = 0;
    uint64_t v13 = &v57;
    while (1)
    {
      __p[0] = 0;
      if (v13 == &v57)
      {
        uint64_t v15 = &v57;
        if (v12) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v14 = &v57;
        if (v12)
        {
          do
          {
            uint64_t v15 = (uint64_t **)v12;
            int v12 = (uint64_t *)v12[1];
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v15 = (uint64_t **)v14[2];
            BOOL v16 = *v15 == (uint64_t *)v14;
            uint64_t v14 = v15;
          }
          while (v16);
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15 + 4, (void **)v11 + 4) & 0x80) == 0)
        {
          uint64_t v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v56, __p, (void **)v11 + 4);
          goto LABEL_24;
        }
        if (v57)
        {
LABEL_23:
          __p[0] = v15;
          uint64_t v17 = v15 + 1;
LABEL_24:
          if (*v17) {
            goto LABEL_34;
          }
          goto LABEL_28;
        }
      }
      __p[0] = &v57;
      uint64_t v17 = &v57;
LABEL_28:
      BOOL v18 = (char *)operator new(0x48uLL);
      int v19 = (std::string *)(v18 + 32);
      if (*((char *)v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)v11 + 4), *((void *)v11 + 5));
      }
      else
      {
        long long v20 = *((_OWORD *)v11 + 2);
        *((void *)v18 + 6) = *((void *)v11 + 6);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      uint64_t v21 = *((void *)v11 + 7);
      *((_DWORD *)v18 + 16) = *((_DWORD *)v11 + 16);
      *((void *)v18 + 7) = v21;
      uint64_t v22 = __p[0];
      *(void *)BOOL v18 = 0;
      *((void *)v18 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      *((void *)v18 + 2) = v22;
      *uint64_t v17 = (uint64_t *)v18;
      if (*v56)
      {
        int v56 = (void **)*v56;
        BOOL v18 = (char *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v57, (uint64_t *)v18);
      ++v58;
LABEL_34:
      uint64_t v23 = (QMIRTPStackController *)*((void *)v11 + 1);
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = *(QMIRTPStackController **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (QMIRTPStackController *)*((void *)v11 + 2);
          BOOL v16 = *(void *)v24 == (void)v11;
          uint64_t v11 = v24;
        }
        while (!v16);
      }
      if (v24 == (QMIRTPStackController *)(this + 16))
      {
        int v25 = (uint64_t *)v56;
        if (v56 != (void **)&v57)
        {
          uint64_t v42 = this + 1;
          unsigned int v26 = v59[0];
          uint64_t v27 = "rtp.qmistackcontroller";
          uint64_t v28 = "";
          id v29 = "QMI Stack Controller initialized!";
          unsigned int v43 = v59[0];
          do
          {
            *(_OWORD *)std::string __p = 0u;
            memset(v51, 0, 24);
            if (*((char *)v25 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v25[4], v25[5]);
            }
            else
            {
              *(_OWORD *)std::string __p = *((_OWORD *)v25 + 2);
              *(void *)uint64_t v51 = v25[6];
            }
            *(_DWORD *)&v51[16] = *((_DWORD *)v25 + 16);
            *(void *)&v51[8] = v25[7];
            if (*(_DWORD *)&v51[16] == v26)
            {
              std::string::basic_string[abi:ne180100]<0>(&v49, v27);
              std::string::basic_string[abi:ne180100]<0>(v47, v28);
              uint64_t v30 = ims::debug((uint64_t)&v49, (uint64_t)v47);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)v29, 33);
              *(unsigned char *)(v30 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v30 + 17) = 0;
              if (v48 < 0) {
                operator delete(v47[0]);
              }
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v49.__r_.__value_.__l.__data_);
              }
              memset(&v49, 0, sizeof(v49));
              if ((v51[7] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                v49.__r_.__value_.__r.__words[2] = *(void *)v51;
              }
              std::string v31 = (std::__shared_weak_count *)this[4];
              if (v31)
              {
                char v32 = std::__shared_weak_count::lock(v31);
                if (v32)
                {
                  unint64_t v33 = v32;
                  uint64_t v34 = v29;
                  char v35 = v28;
                  std::string v36 = (QMIRTPStackController *)this;
                  unsigned int v37 = this[3];
                  if (v37)
                  {
                    uint64_t v38 = v27;
                    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v45, v42);
                    uint64_t v39 = v51[8];
                    ImsResult::ImsResult((ImsResult *)v44, &v52);
                    (*(void (**)(uint64_t *, uint64_t *, std::string *, uint64_t, unsigned char *))*v37)(v37, &v45, &v49, v39, v44);
                    ImsResult::~ImsResult((ImsResult *)v44);
                    uint64_t v27 = v38;
                    if (v46) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                    }
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                  uint64_t v28 = v35;
                  id v29 = v34;
                  this = (uint64_t **)v36;
                  unsigned int v26 = v43;
                }
              }
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v49.__r_.__value_.__l.__data_);
              }
            }
            if ((v51[7] & 0x80000000) != 0) {
              operator delete(__p[0]);
            }
            char v40 = (uint64_t *)v25[1];
            if (v40)
            {
              do
              {
                uint64_t v41 = (uint64_t **)v40;
                char v40 = (uint64_t *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                uint64_t v41 = (uint64_t **)v25[2];
                BOOL v16 = *v41 == v25;
                int v25 = (uint64_t *)v41;
              }
              while (!v16);
            }
            int v25 = (uint64_t *)v41;
          }
          while (v41 != &v57);
        }
        break;
      }
      uint64_t v13 = (uint64_t **)v56;
      int v12 = v57;
      uint64_t v11 = v24;
    }
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)v57);
  ImsResult::~ImsResult((ImsResult *)&v52);
}

void sub_1C55F61EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)(v40 - 200));
  _Unwind_Resume(a1);
}

void QMIRTPStackController::initializeQMISession(uint64_t a1, char **a2, uint64_t a3, int a4, uint64_t *a5, int a6)
{
  if (*a2)
  {
    size_t v9 = (std::__shared_weak_count *)a5[1];
    if (v9)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v9);
      if (v13)
      {
        uint64_t v14 = *a5;
        if (*a5)
        {
          memset(&v52, 0, sizeof(v52));
          uint64_t v15 = *(std::__shared_weak_count **)(v14 + 128);
          if (v15)
          {
            BOOL v16 = std::__shared_weak_count::lock(v15);
            if (v16) {
              uint64_t v17 = *(void *)(v14 + 120);
            }
            else {
              uint64_t v17 = 0;
            }
          }
          else
          {
            uint64_t v17 = 0;
            BOOL v16 = 0;
          }
          if (*(char *)(v17 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
          }
          else {
            std::string v52 = *(std::string *)(v17 + 4160);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          uint64_t v27 = (uint64_t **)(a1 + 120);
          if ((void **)(a1 + 128) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, (void **)&v52.__r_.__value_.__l.__data_))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qistackcontroller");
            std::string::basic_string[abi:ne180100]<0>(v45, "");
            uint64_t v30 = ims::error((uint64_t)&__p, (uint64_t)v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Driver for stack ", 17);
            *(unsigned char *)(v30 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, &v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" does not exist or has not been initialized", 43);
            *(unsigned char *)(v30 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v30 + 17) = 0;
            if (v46 < 0) {
              operator delete(v45[0]);
            }
            if (v51 < 0) {
              operator delete(__p);
            }
            (*(void (**)(void **__return_ptr))(*((void *)*a2 + 3) + 152))(&__p);
            if (!v50) {
              goto LABEL_78;
            }
            std::string v31 = std::__shared_weak_count::lock(v50);
            if (v31) {
              char v32 = (void (***)(void *, uint64_t *, uint64_t))__p;
            }
            else {
              char v32 = 0;
            }
            if (v50) {
              std::__shared_weak_count::__release_weak(v50);
            }
            if (v32)
            {
              unint64_t v33 = (std::__shared_weak_count *)a2[1];
              if (*a2) {
                uint64_t v34 = (uint64_t)(*a2 + 24);
              }
              else {
                uint64_t v34 = 0;
              }
              uint64_t v43 = v34;
              uint64_t v44 = v33;
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (**v32)(v32, &v43, 9);
              if (v44) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v44);
              }
            }
            if (!v31) {
              goto LABEL_78;
            }
            char v35 = v31;
          }
          else
          {
            uint64_t v28 = *a2;
            if (a4 == 2)
            {
              v28[492] = 1;
              if (a6)
              {
                v28[493] = 1;
                if (!*(unsigned char *)(a1 + 88)) {
                  QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), v28[490], (void **)&v52.__r_.__value_.__l.__data_, 5u, v28[496]);
                }
              }
              if (*(unsigned char *)(v14 + 584))
              {
                int v29 = (*(uint64_t (**)(void))(*(void *)(v14 + 152) + 24))();
                uint64_t v28 = *a2;
                if (v29) {
                  v28[491] = 1;
                }
              }
              else
              {
                uint64_t v28 = *a2;
              }
            }
            std::string v36 = *(void **)(a1 + 336);
            unsigned int v37 = (std::__shared_weak_count *)a2[1];
            uint64_t v41 = v28;
            uint64_t v42 = v37;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string __p = &v52;
            char v38 = std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (void **)&v52.__r_.__value_.__l.__data_, (long long **)&__p)[56];
            uint64_t v39 = v14;
            uint64_t v40 = v13;
            atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            QMIRTPCommandDriver::sessionInitializeReq(v36, &v41, v38, a3, a4, &v39);
            if (v40) {
              std::__shared_weak_count::__release_weak(v40);
            }
            char v35 = v42;
            if (!v42) {
              goto LABEL_78;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_78:
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
LABEL_80:
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          return;
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v22 = ims::error((uint64_t)&v52, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"SDPSession expired in QMIRTPStackController::initializeQMISession", 65);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v51 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(*((void *)*a2 + 3) + 152))(&v52);
    if (v52.__r_.__value_.__l.__size_)
    {
      uint64_t v23 = std::__shared_weak_count::lock((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
      if (v23) {
        uint64_t v24 = (void (***)(void, uint64_t *, uint64_t))v52.__r_.__value_.__r.__words[0];
      }
      else {
        uint64_t v24 = 0;
      }
      if (v52.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
      }
      if (v24)
      {
        int v25 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v26 = (uint64_t)(*a2 + 24);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v47 = v26;
        char v48 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v24)(v24, &v47, 9);
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    if (v13) {
      goto LABEL_80;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v18 = ims::error((uint64_t)&v52, (uint64_t)&__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v19 = v18;
    long long v20 = *(void **)(v18 + 8);
    size_t v21 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v21);
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"initializeQMISession", 20);
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v51 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C55F6954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::handleInitializeRequestReceipt(void *a1, uint64_t *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v15, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleInitializeRequestReceipt", 30);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v8 = *a2;
    uint64_t v9 = *a2 + 24;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(v8, &v11);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    void v10[2] = ___ZN21QMIRTPStackController30handleInitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    void v10[3] = &__block_descriptor_tmp_30_1;
    _OWORD v10[4] = a1;
    MediaSessionDriver::startTimerForRequest(v9, 65, (uint64_t *)&v11, v10);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C55F6CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController30handleInitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v2 = ims::error((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Request timer fired for initialize request", 42);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v3 = *(void *)(v1[6] + 296);
  if (v3) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v3 + 120), 23);
  }
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  v4[0] = &unk_1F20B2680;
  v4[1] = &_bambiDomain;
  int v5 = 0x40000000;
  (*(void (**)(void *, void *))(*v1 + 48))(v1, v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1C55F6E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::sessionDidUninitialize(QMIRTPStackController *a1, int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  long long v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionDidUninitialize", 22);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v15 = 0;
  char v16 = 0;
  QMIRTPStackController::getSessionByQMIid(a1, a2, &v15);
  if (v15)
  {
    char v10 = v16;
    v14[0] = v15;
    v14[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPStackController::sessionDidUninitialize((uint64_t)a1, (uint64_t)v14, a3);
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)v19, (uint64_t)__p);
    char v12 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sessionDidUninitialize", 22);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    char v10 = v16;
    if (v16) {
      goto LABEL_16;
    }
  }
}

void sub_1C55F71C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::handleUninitializeRequestReceipt(void *a1, uint64_t *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleUninitializeRequestReceipt", 32);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    uint64_t v8 = *a2 + 24;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(*a2, &v13);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    v11[2] = ___ZN21QMIRTPStackController32handleUninitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    v11[3] = &__block_descriptor_tmp_35_2;
    uint64_t v10 = *a2;
    size_t v9 = (std::__shared_weak_count *)a2[1];
    _OWORD v11[4] = a1;
    void v11[5] = v10;
    char v12 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionDriver::startTimerForRequest(v8, 66, (uint64_t *)&v13, v11);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C55F749C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController32handleUninitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::error((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Request timer is being ignored for session termination timing out", 65);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v4 = *(void *)(*(void *)(v2 + 48) + 296);
  if (v4) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v4 + 120), 23);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  void v7[2] = ___ZN21QMIRTPStackController32handleUninitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2;
  void v7[3] = &__block_descriptor_tmp_32_3;
  uint64_t v6 = a1[5];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  _OWORD v7[4] = v2;
  void v7[5] = v6;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C55F7654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController32handleUninitializeRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v4[0] = a1[5];
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPStackController::sessionDidUninitialize(v2, (uint64_t)v4, 4);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C55F7714(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIRTPStackController::sessionDidUninitialize(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v39, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void **)(v6 + 8);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionDidUninitialize", 22);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(*(void *)(*(void *)a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v39);
    }
    int v34 = a3;
    MediaSessionDriver::cancelTimerForRequest((int8x8_t *)(*(void *)a2 + 24), 66);
    uint64_t v10 = *(void *)(a1 + 96);
    if (v10 != *(void *)(a1 + 104))
    {
      char v11 = 0;
      while (1)
      {
        char v12 = *(std::__shared_weak_count **)(v10 + 8);
        if (!v12) {
          break;
        }
        size_t v13 = std::__shared_weak_count::lock(v12);
        if (!v13 || !*(void *)v10) {
          goto LABEL_15;
        }
        if (*(void *)v10 != *(void *)a2)
        {
          v10 += 16;
LABEL_24:
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          uint64_t v15 = *(void *)(a1 + 104);
          goto LABEL_25;
        }
        std::string::basic_string[abi:ne180100]<0>(&v39, "rtp.qmistackcontroller");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v18 = ims::debug((uint64_t)&v39, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Remove session from _sessions", 29);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (v38 < 0) {
          operator delete(__p[0]);
        }
        if (v41 < 0) {
          operator delete(v39);
        }
        uint64_t v19 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v10 + 16), *(long long **)(a1 + 104), v10);
        uint64_t v15 = v19;
        uint64_t v20 = *(void *)(a1 + 104);
        if (v20 == v19)
        {
          *(void *)(a1 + 104) = v19;
          char v11 = 1;
          goto LABEL_24;
        }
        do
        {
          size_t v21 = *(std::__shared_weak_count **)(v20 - 8);
          if (v21) {
            std::__shared_weak_count::__release_weak(v21);
          }
          v20 -= 16;
        }
        while (v20 != v15);
LABEL_23:
        *(void *)(a1 + 104) = v15;
        char v11 = 1;
        if (v13) {
          goto LABEL_24;
        }
LABEL_25:
        if (v10 == v15) {
          goto LABEL_44;
        }
      }
      size_t v13 = 0;
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(&v39, "rtp.qmistackcontroller");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v14 = ims::debug((uint64_t)&v39, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Remove expired session from _sessions", 37);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v38 < 0) {
        operator delete(__p[0]);
      }
      if (v41 < 0) {
        operator delete(v39);
      }
      uint64_t v15 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v10 + 16), *(long long **)(a1 + 104), v10);
      for (uint64_t i = *(void *)(a1 + 104); i != v15; i -= 16)
      {
        uint64_t v17 = *(std::__shared_weak_count **)(i - 8);
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      goto LABEL_23;
    }
    char v11 = 0;
LABEL_44:
    (*(void (**)(void **__return_ptr))(*(void *)(*(void *)a2 + 24) + 152))(&v39);
    if (v40)
    {
      uint64_t v27 = std::__shared_weak_count::lock(v40);
      if (v27) {
        uint64_t v28 = v39;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v40) {
        std::__shared_weak_count::__release_weak(v40);
      }
      if (v28)
      {
        int v29 = *(std::__shared_weak_count **)(a2 + 8);
        if (*(void *)a2) {
          uint64_t v30 = *(void *)a2 + 24;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v35 = v30;
        std::string v36 = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v34) {
          uint64_t v31 = 9;
        }
        else {
          uint64_t v31 = 0;
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v28 + 8))(v28, &v35, v31);
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    uint64_t v26 = v11 & 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v22 = ims::error((uint64_t)&v39, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v23 = v22;
    uint64_t v24 = *(void **)(v22 + 8);
    size_t v25 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v25);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"sessionDidUninitialize", 22);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v39);
    }
    uint64_t v26 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v32 = ims::debug((uint64_t)&v39, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"_sessions [count=", 17);
  *(unsigned char *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v32 + 17) = 0;
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (v41 < 0) {
    operator delete(v39);
  }
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 88) = 0;
    QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), *(unsigned char *)(*(void *)a2 + 490), (void **)(*(void *)a2 + 80), 3u, *(unsigned char *)(*(void *)a2 + 496));
  }
  return v26;
}

void sub_1C55F7E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(int8x8_t *this, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v23, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v23, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleUninitializeAllSessionsRequestReceipt", 43);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [isError=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0)
  {
    operator delete(v23[0]);
    if (a2) {
      goto LABEL_6;
    }
  }
  else if (a2)
  {
LABEL_6:
    SipTimerContainer::cancelTimer(this + 24, &kUninitializeAllTimer);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v14.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v14.__r_.__value_.__r.__words[2]) = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    RTPStackController::stackError(this, &v14);
    ImsResult::~ImsResult((ImsResult *)&v14);
    return;
  }
  int8x8_t v9 = this[1];
  uint64_t v8 = (std::__shared_weak_count *)this[2];
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[25], (unsigned __int8 *)&kUninitializeAllTimer))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v23, (uint64_t)__p);
    char v11 = (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v11, v12);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleUninitializeAllSessionsRequestReceipt", 43);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" Uninitialize all request timer already exists!", 47);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  else
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = 0;
    size_t v13 = operator new(0x20uLL);
    void *v13 = &unk_1F20E43C0;
    v13[1] = this;
    _OWORD v13[2] = v9;
    void v13[3] = v8;
    uint64_t v26 = v13;
    SipTimerContainer::startTimer(this + 24, (uint64_t)&kUninitializeAllTimer);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v25);
  }
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C55F82DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v30 - 88));
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(a1);
}

void QMIRTPStackController::configureRTPLinkMonitor(uint64_t a1, uint64_t *a2, int a3, __int16 a4)
{
  uint64_t v4 = *(void **)(a1 + 336);
  if (a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = *a2;
    char v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPCommandDriver::configureRTPLinkMonitorReq(v4, &v10, a4);
    uint64_t v6 = v11;
    if (!v11) {
      return;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    return;
  }
  size_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  int8x8_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::configureRTPLinkMonitorReq(v4, &v8, 0);
  uint64_t v6 = v9;
  if (v9) {
    goto LABEL_9;
  }
}

void sub_1C55F842C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C55F8444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x1C55F843CLL);
  }
  JUMPOUT(0x1C55F8438);
}

void QMIRTPStackController::configureRTCPLinkMonitor(uint64_t a1, uint64_t *a2, int a3, __int16 a4)
{
  uint64_t v4 = *(void **)(a1 + 336);
  if (a3)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = *a2;
    char v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPCommandDriver::configureRTCPLinkMonitorReq(v4, &v10, a4);
    uint64_t v6 = v11;
    if (!v11) {
      return;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    return;
  }
  size_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  int8x8_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::configureRTCPLinkMonitorReq(v4, &v8, 0);
  uint64_t v6 = v9;
  if (v9) {
    goto LABEL_9;
  }
}

void sub_1C55F84E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C55F84FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x1C55F84F4);
  }
  JUMPOUT(0x1C55F84F0);
}

void QMIRTPStackController::sessionDidInitialize(uint64_t a1, uint64_t a2, char a3, int a4)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v25, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"getSessionById", 14);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 104))
  {
    while (1)
    {
      size_t v13 = *(std::__shared_weak_count **)(v12 + 8);
      if (!v13) {
        break;
      }
      std::string v14 = std::__shared_weak_count::lock(v13);
      if (!v14) {
        goto LABEL_13;
      }
      uint64_t v15 = *(int8x8_t **)v12;
      if (!*(void *)v12) {
        goto LABEL_13;
      }
      if ((*(uint64_t (**)(void))(*(void *)&v15[3] + 176))() == a2)
      {
        v15[61].i8[7] = 1;
        v22[0] = v15;
        v22[1] = (int8x8_t *)v14;
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        QMIRTPStackController::sessionDidInitialize(a1, v22, a3, a4);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        return;
      }
      v12 += 16;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      uint64_t v16 = *(void *)(a1 + 104);
LABEL_19:
      if (v12 == v16) {
        goto LABEL_20;
      }
    }
    std::string v14 = 0;
LABEL_13:
    uint64_t v16 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>((long long *)(v12 + 16), *(long long **)(a1 + 104), v12);
    for (uint64_t i = *(void *)(a1 + 104); i != v16; i -= 16)
    {
      uint64_t v18 = *(std::__shared_weak_count **)(i - 8);
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    *(void *)(a1 + 104) = v16;
    if (!v14) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v19 = ims::error((uint64_t)v25, (uint64_t)__p);
  uint64_t v20 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  size_t v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)v20, v21);
  *(unsigned char *)(v19 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v19 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"sessionDidInitialize", 20);
  *(unsigned char *)(v19 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" session is null", 16);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
}

void sub_1C55F88A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::sessionDidInitialize(uint64_t a1, int8x8_t **a2, char a3, int a4)
{
  if (*a2)
  {
    MediaSessionDriver::cancelTimerForRequest(*a2 + 3, 65);
    uint64_t v8 = *a2;
    if (a4)
    {
      if (v8[61].i8[5] && !*(unsigned char *)(a1 + 88)) {
        QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), a3, (void **)&v8[10], 3u, v8[62].i8[0]);
      }
      goto LABEL_22;
    }
    QMIRTPSession::setQMISessionId((QMIRTPSession *)v8, a3);
    std::string v14 = *a2;
    if ((*a2)[61].i8[3])
    {
      if (!*(unsigned char *)(a1 + 88) && v14[61].i8[4])
      {
        uint64_t v15 = *(void *)(a1 + 336);
        uint64_t v16 = (void **)&v14[10];
        char v17 = v14[62].i8[0];
        if (v14[61].i8[5]) {
          unsigned int v18 = 6;
        }
        else {
          unsigned int v18 = 0;
        }
        char v19 = a3;
        goto LABEL_21;
      }
    }
    else if (!*(unsigned char *)(a1 + 88) && v14[61].i8[4])
    {
      uint64_t v15 = *(void *)(a1 + 336);
      uint64_t v16 = (void **)&v14[10];
      char v17 = v14[62].i8[0];
      char v19 = a3;
      unsigned int v18 = 0;
LABEL_21:
      QMIRTPCommandDriver::sendAudioCallEvent(v15, v19, v16, v18, v17);
      *(unsigned char *)(a1 + 88) = 1;
    }
LABEL_22:
    (*(void (**)(void **__return_ptr))(*(void *)&(*a2)[3] + 152))(&v28);
    if (v29)
    {
      uint64_t v20 = std::__shared_weak_count::lock(v29);
      if (v20) {
        size_t v21 = (void (***)(void *, uint64_t *, void))v28;
      }
      else {
        size_t v21 = 0;
      }
      if (v29) {
        std::__shared_weak_count::__release_weak(v29);
      }
      if (v21)
      {
        char v22 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v23 = (uint64_t)&(*a2)[3];
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v23;
        size_t v25 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v21)(v21, &v24, 8 * (a4 != 0));
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)&v28, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v10 = v9;
  size_t v11 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v12 = *(void **)(v9 + 8);
  size_t v13 = strlen(v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v11, v13);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"sessionDidInitialize", 20);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" session is null", 16);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v28);
  }
}

void sub_1C55F8BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionDidStart(void *a1, void *a2, int a3)
{
  if (*a2)
  {
    int v6 = (*(uint64_t (**)(void))(*(void *)(*a2 + 24) + 96))();
    if (!a3 && v6 == 4 && ((*(uint64_t (**)(void))(*(void *)*a2 + 104))() & 1) == 0)
    {
      uint64_t v7 = a1[42];
      uint64_t v8 = (std::__shared_weak_count *)a2[1];
      uint64_t v21 = *a2;
      char v22 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMIRTPCommandDriver::sessionSetStreamDirectionReq(v7, &v21, 2, 1);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
    (*(void (**)(void **__return_ptr))(*(void *)(*a2 + 24) + 152))(&v25);
    if (v26)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v26);
      if (v9) {
        uint64_t v10 = v25;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      if (v10)
      {
        size_t v11 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v12 = *a2 + 24;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a3) {
          uint64_t v13 = 9;
        }
        else {
          uint64_t v13 = 0;
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v10 + 24))(v10, &v19, v13);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)&v25, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    char v17 = *(void **)(v14 + 8);
    size_t v18 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v16, v18);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"sessionDidStart", 15);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v25);
    }
  }
}

void sub_1C55F8EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionDidStop(void *a1, void *a2, int a3)
{
  if (*a2)
  {
    (*(void (**)(void **__return_ptr))(*(void *)(*a2 + 24) + 152))(&v19);
    if (v20)
    {
      int v6 = std::__shared_weak_count::lock(v20);
      if (v6) {
        uint64_t v7 = v19;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v7)
      {
        uint64_t v8 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v9 = *a2 + 24;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v15 = v9;
        uint64_t v16 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a3) {
          uint64_t v10 = 9;
        }
        else {
          uint64_t v10 = 0;
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v7 + 32))(v7, &v15, v10);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)&v19, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v12 = v11;
    uint64_t v13 = *(void **)(v11 + 8);
    size_t v14 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v14);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"sessionDidStop", 14);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v19);
    }
  }
}

void sub_1C55F9180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::handleConfigureRequestReceipt(void *a1, uint64_t *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v20, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    int v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleConfigureRequestReceipt", 29);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    uint64_t v8 = *a2;
    uint64_t v9 = *a2 + 24;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(v8, &v16);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN21QMIRTPStackController29handleConfigureRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    void v15[3] = &__block_descriptor_tmp_43_2;
    _OWORD v15[4] = a1;
    MediaSessionDriver::startTimerForRequest(v9, 67, (uint64_t *)&v16, v15);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v11 = v10;
    uint64_t v12 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = *(void **)(v10 + 8);
    size_t v14 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleConfigureRequestReceipt", 29);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_1C55F951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController29handleConfigureRequestReceiptENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v2 = ims::error((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Request timer fired for configure request", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v3 = *(void *)(v1[6] + 296);
  if (v3) {
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v3 + 120), 23);
  }
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  v4[0] = &unk_1F20B2680;
  v4[1] = &_bambiDomain;
  int v5 = 0x40000000;
  (*(void (**)(void *, void *))(*v1 + 48))(v1, v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1C55F96C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::sessionDidConfigure(QMIRTPStackController *a1, int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  long long v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionDidConfigure", 19);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v16 = 0;
  char v17 = 0;
  QMIRTPStackController::getSessionByQMIid(a1, a2, &v16);
  char v10 = v16;
  if (v16)
  {
    if ((*(unsigned int (**)(int8x8_t *))(*(void *)v16 + 136))(v16) == 2) {
      *((void *)a1 + 10) = (*(uint64_t (**)(void))(*(void *)&v10[3] + 176))();
    }
    uint64_t v11 = v17;
    v15[0] = v10;
    v15[1] = (int8x8_t *)v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPStackController::sessionDidConfigure(a1, v15, a3);
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v20, (uint64_t)__p);
    uint64_t v13 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v13, v14);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"sessionDidConfigure", 19);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    uint64_t v11 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_1C55F9A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionDidConfigure(void *a1, int8x8_t **a2, int a3)
{
  if (*a2)
  {
    MediaSessionDriver::cancelTimerForRequest(*a2 + 3, 67);
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 136))() == 2) {
      a1[10] = (*(uint64_t (**)(void))(*(void *)&(*a2)[3] + 176))();
    }
    uint64_t v6 = (uint64_t)*a2;
    if (a3) {
      uint64_t v7 = 9;
    }
    else {
      uint64_t v7 = 0;
    }
    QMIRTPSession::didConfigure(v6, v7);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::error((uint64_t)v15, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v9 = v8;
    char v10 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = *(void **)(v8 + 8);
    size_t v12 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v10, v12);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sessionDidConfigure", 19);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1C55F9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::handleStackUninitializeAllSessions(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v25, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleStackUninitializeAllSessions", 34);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  SipTimerContainer::cancelTimer((int8x8_t *)(a1 + 192), (std::string *)"UninitializeAllTimer");
  char v10 = *(uint64_t **)(a1 + 96);
  if (v10 != *(uint64_t **)(a1 + 104))
  {
    while (1)
    {
      uint64_t v11 = (std::__shared_weak_count *)v10[1];
      if (!v11) {
        goto LABEL_15;
      }
      size_t v12 = std::__shared_weak_count::lock(v11);
      if (!v12) {
        goto LABEL_15;
      }
      uint64_t v13 = v12;
      uint64_t v14 = *v10;
      if (!*v10) {
        break;
      }
      if (!*(unsigned char *)(v14 + 495)) {
        break;
      }
      if (*(unsigned __int8 *)(v14 + 489) != a3) {
        break;
      }
      v22[0] = *v10;
      v22[1] = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      char v15 = QMIRTPStackController::sessionDidUninitialize(a1, (uint64_t)v22, 0);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if ((v15 & 1) == 0) {
        break;
      }
      char v10 = *(uint64_t **)(a1 + 96);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_16:
      if (v10 == *(uint64_t **)(a1 + 104)) {
        goto LABEL_17;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_15:
    v10 += 2;
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  if (v16 == 15)
  {
    if (v17 >= 0) {
      char v18 = (uint64_t *)a2;
    }
    else {
      char v18 = *(uint64_t **)a2;
    }
    uint64_t v19 = *v18;
    uint64_t v20 = *(uint64_t *)((char *)v18 + 7);
    if (v19 == 0x536C6C41494D516BLL && v20 == 0x736E6F6973736553) {
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
    }
  }
}

void sub_1C55F9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::configureQMISession(void *a1, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v3 = (void *)a1[42];
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = *a2;
    uint64_t v11 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPCommandDriver::sessionConfigureReq(v3, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v14, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v6 = v5;
    uint64_t v7 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = *(void **)(v5 + 8);
    size_t v9 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"configureQMISession", 19);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
}

void sub_1C55FA168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::setQMISessionDirection(void *a1, void *a2, unsigned int a3)
{
  unsigned int v26 = a3;
  if (*a2)
  {
    if (a3 == 3 && (*(uint64_t (**)(void))(*(void *)(*a2 + 24) + 176))() != a1[10])
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmistackcontroller");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      uint64_t v17 = ims::debug((uint64_t)v24, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Configure session and only then start it [sessionId=", 52);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" direction=", 11);
      *(unsigned char *)(v17 + 17) = 0;
      ims::toString<ms::MediaServiceDirection>(&v26, &__p);
      (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 32))(v17, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      char v18 = (unsigned char *)*a2;
      v18[562] = 1;
      (*(void (**)(unsigned char *, void))(*(void *)v18 + 64))(v18, 0);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmistackcontroller");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      uint64_t v6 = ims::debug((uint64_t)v24, (uint64_t)v22);
      if (!a1) {
        __cxa_bad_typeid();
      }
      uint64_t v7 = v6;
      uint64_t v8 = *(void **)(v6 + 8);
      size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"setQMISessionDirection", 22);
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
      std::ostream::operator<<();
      *(unsigned char *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" direction=", 11);
      *(unsigned char *)(v7 + 17) = 0;
      ims::toString<ms::MediaServiceDirection>(&v26, &__p);
      (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      uint64_t v10 = (void *)a1[42];
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v19 = *a2;
      uint64_t v20 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMIRTPCommandDriver::sessionSetStreamDirectionReq(v10, &v19, a3, 0);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v12 = ims::error((uint64_t)v24, (uint64_t)v22);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v13 = v12;
    uint64_t v14 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    char v15 = *(void **)(v12 + 8);
    size_t v16 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v14, v16);
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"setQMISessionDirection", 22);
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_1C55FA6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionDirectionChangeFailed(void *a1, void *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)&v22, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    uint64_t v6 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = *(void **)(v4 + 8);
    size_t v8 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sessionDirectionChangeFailed", 28);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v22);
    }
    (*(void (**)(void **__return_ptr))(*(void *)(*a2 + 24) + 152))(&v22);
    if (v23)
    {
      size_t v9 = std::__shared_weak_count::lock(v23);
      if (v9) {
        uint64_t v10 = v22;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v10)
      {
        uint64_t v11 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v12 = *a2 + 24;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v18 = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v10 + 24))(v10, &v18, 9);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)&v22, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v14 = v13;
    char v15 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v16 = *(void **)(v13 + 8);
    size_t v17 = strlen(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"sessionDirectionChangeFailed", 28);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v22);
    }
  }
}

void sub_1C55FAAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionMediaError(QMIRTPStackController *a1, int a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  size_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionMediaError", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v15 = 0;
  size_t v16 = 0;
  QMIRTPStackController::getSessionByQMIid(a1, a2, &v15);
  if (v15)
  {
    uint64_t v10 = v16;
    v14[0] = v15;
    v14[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMIRTPStackController::sessionMediaError(a1, v14, a3);
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::error((uint64_t)v19, (uint64_t)__p);
    uint64_t v12 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sessionMediaError", 17);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    uint64_t v10 = v16;
    if (v16) {
      goto LABEL_16;
    }
  }
}

void sub_1C55FAE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sessionMediaError(void *a1, void *a2, uint64_t a3)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v23, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    size_t v8 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v9 = *(void **)(v6 + 8);
    size_t v10 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sessionMediaError", 17);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v23);
    }
    (*(void (**)(void **__return_ptr))(*(void *)(*a2 + 24) + 152))(&v23);
    if (v24)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v24);
      if (v11) {
        uint64_t v12 = v23;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      if (v12)
      {
        size_t v13 = (std::__shared_weak_count *)a2[1];
        if (*a2) {
          uint64_t v14 = *a2 + 24;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v19 = v14;
        char v20 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v12 + 40))(v12, &v19, a3);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "rtp.qmistackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::error((uint64_t)&v23, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v16 = v15;
    size_t v17 = *(void **)(v15 + 8);
    size_t v18 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"sessionMediaError", 17);
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v23);
    }
  }
}

void sub_1C55FB260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::configureRTCPReports(uint64_t a1, uint64_t *a2, int a3, char a4, uint64_t a5, int a6)
{
  uint64_t v6 = *(void **)(a1 + 336);
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  size_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::configureRTCPReportsReq(v6, &v8, a3, a4, a5, a6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C55FB310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::sendDTMFDigit(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 336);
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::sendDTMFDigit(v3, &v5, a3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C55FB37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::stackError(void *a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "kQMIAllSessions");
  (*(void (**)(void *, void **, uint64_t))(*a1 + 24))(a1, v5, 1);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  ImsResult::ImsResult((ImsResult *)v4, a2);
  RTPStackController::stackError(a1, v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1C55FB430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMIRTPStackController::startAudio(uint64_t a1, void **a2, char a3)
{
  if (!*(unsigned char *)(a1 + 88))
  {
    QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), 0, a2, 0, a3);
    *(unsigned char *)(a1 + 88) = 1;
  }
}

void QMIRTPStackController::stopAudio(uint64_t a1, void **a2, char a3)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    QMIRTPCommandDriver::sendAudioCallEvent(*(void *)(a1 + 336), 0, a2, 3u, a3);
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void QMIRTPStackController::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v4 == 20)
  {
    if ((v3 & 0x80) == 0)
    {
      if (a2[23])
      {
        char v6 = &kUninitializeAllTimer;
        uint64_t v7 = a2;
        while (*v7 == v6->__r_.__value_.__s.__data_[0])
        {
          ++v7;
          char v6 = (std::string *)((char *)v6 + 1);
          if (!--v3) {
            goto LABEL_14;
          }
        }
        goto LABEL_12;
      }
LABEL_14:
      uint64_t v9 = *(void *)(a1 + 48);
      LoggableString::LoggableString((LoggableString *)v13, "uninitalizeAllTimer");
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = ___ZN21QMIRTPStackController11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      void v12[3] = &__block_descriptor_tmp_48_2;
      _OWORD v12[4] = a1;
      RTPManager::performUnprotectedBlock(v9, (uint64_t)v13, (uint64_t)v12);
      goto LABEL_15;
    }
    if (!memcmp(*(const void **)a2, &kUninitializeAllTimer, *((void *)a2 + 1))) {
      goto LABEL_14;
    }
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::warn((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unknown timer fired [timerId=", 29);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
LABEL_15:
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1C55FB6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 - 17) < 0) {
    operator delete(*(void **)(v15 - 40));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21QMIRTPStackController11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  uint64_t v2 = ims::error((uint64_t)v9, (uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Uninitialize all sessions request timed out", 43);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  v3.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v3.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v3.__r_.__value_.__r.__words[2]) = 0x40000000;
  RTPStackController::stackError(v1, &v3);
  ImsResult::~ImsResult((ImsResult *)&v3);
}

void sub_1C55FB82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t QMIRTPStackController::isAssertEnabled(QMIRTPStackController *this)
{
  IMSClientManager::instance(this);
  IPTelephonyManager::getInstance(&v5);
  (*(void (**)(SipStack **__return_ptr))(**(void **)(v5 + 168) + 192))(&v7);
  uint64_t v1 = (ImsPrefs *)SipStack::prefs(v7);
  EnableBasebandAssertOnInitializationFailureKey = (void **)ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(v1);
  uint64_t v3 = ImsPrefs::BOOLValue(v1, EnableBasebandAssertOnInitializationFailureKey);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_1C55FB914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIRTPStackController::sessionExists(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 96);
  long long v4 = *(uint64_t **)(a1 + 104);
  if (v3 == v4) {
    return 0;
  }
  while (1)
  {
    long long v6 = (std::__shared_weak_count *)v3[1];
    if (v6) {
      break;
    }
LABEL_8:
    v3 += 2;
    if (v3 == v4) {
      return 0;
    }
  }
  uint64_t v7 = *v3;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
  {
LABEL_7:
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_8;
  }
  uint64_t v9 = v8;
  if (!v7 || (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 24) + 176))(v7 + 24) != a3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  std::__shared_weak_count::__release_weak(v6);
  return 1;
}

void sub_1C55FBA18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void QMIRTPStackController::handleDownlinkDtmf(QMIRTPStackController *this, unsigned __int8 a2, char a3)
{
  char v10 = a3;
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  uint64_t v4 = ims::debug((uint64_t)v9, (uint64_t)v8);
  if (this)
  {
    uint64_t v5 = v4;
    long long v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleDownlinkDtmf", 18);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [dtmf=", 7);
    *(unsigned char *)(v5 + 17) = 0;
    ims::detail::to_string_impl<char,std::integral_constant<BOOL,false>>::operator()();
  }
  __cxa_bad_typeid();
}

void sub_1C55FBD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPStackController::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'QMIRTPStackController::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t std::__split_buffer<std::weak_ptr<QMIRTPSession>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *,std::weak_ptr<QMIRTPSession> *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      size_t v7 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v6;
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      ++v5;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<QMIRTPSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<QMIRTPSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *std::__tree<std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::__map_value_compare<std::string,std::__value_type<std::string,QMIRTPStackController::ProfileData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,QMIRTPStackController::ProfileData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v6 = (char *)*v5;
  if (!*v5)
  {
    size_t v7 = (uint64_t **)v5;
    char v8 = *a3;
    long long v6 = (char *)operator new(0x48uLL);
    uint64_t v9 = (std::string *)(v6 + 32);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      *((void *)v6 + 6) = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    *((void *)v6 + 7) = 0;
    *((_DWORD *)v6 + 16) = 0;
    v6[56] = -1;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1C55FC0F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RTPStackController::RTPStackControllerState>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        size_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    size_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    size_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *size_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    char *v6 = (uint64_t *)v7;
    long long v10 = (uint64_t *)**a1;
    char v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      char v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E43C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E43C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)BOOL result = &unk_1F20E43C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E43C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C55FC41C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0,std::allocator<QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void MediaSessionStateMachine::~MediaSessionStateMachine(MediaSessionStateMachine *this)
{
  *(void *)this = &unk_1F20E4440;
  uint64_t v2 = (void **)((char *)this + 24);
  *((void *)this + 3) = &unk_1F20E4578;
  uint64_t v3 = (char *)this + 112;
  *((void *)this + 14) = &unk_1F20E4650;
  *((void *)this + 15) = &unk_1F20E4690;
  *((void *)this + 16) = &unk_1F20E46C8;
  std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"~MediaSessionStateMachine", 25);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v16);
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v5 + 152))(&v16);
    if (v17)
    {
      long long v6 = std::__shared_weak_count::lock(v17);
      if (v6) {
        size_t v7 = (char *)v16;
      }
      else {
        size_t v7 = 0;
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      if (v7 && v7 == v3) {
        (*(void (**)(void))(**((void **)this + 21) + 168))(*((void *)this + 21));
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  uint64_t v8 = *((void *)this + 19);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 200))(v8);
  }
  MediaSessionStateMachine::detachFromSocket((RTPTransportManager **)this);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  char v11 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  MediaSessionInterface::~MediaSessionInterface(v2);
  size_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine(this);
  JUMPOUT(0x1C878E320);
}

void MediaSessionStateMachine::detachFromSocket(RTPTransportManager **this)
{
  uint64_t v17 = 0;
  char v18 = 0;
  RTPTransportManager::getTransport(this[6], *((unsigned __int16 *)this + 152), &v17);
  uint64_t v2 = v17;
  if (v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"For the RTP socket, set delegate back to RTPManager.", 52);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v14);
    }
    uint64_t v5 = this[7];
    uint64_t v4 = (std::__shared_weak_count *)this[8];
    if (v5) {
      long long v6 = (char *)v5 + 40;
    }
    else {
      long long v6 = 0;
    }
    long long v10 = v6;
    char v11 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, char **))(*(void *)v2 + 136))(v2, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    aBlocuint64_t k = _Block_copy(&__block_literal_global_9);
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 96))(v2, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  char v14 = 0;
  char v15 = 0;
  RTPTransportManager::getTransport(this[6], (unsigned __int16)(*((_WORD *)this + 152) + 1), (uint64_t *)&v14);
  size_t v7 = v14;
  if (v14)
  {
    uint64_t v8 = _Block_copy(&__block_literal_global_154);
    (*(void (**)(void *, void **))(*(void *)v7 + 96))(v7, &v8);
    if (v8) {
      _Block_release(v8);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_1C55FC948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  unsigned int v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionStateMachine::~MediaSessionStateMachine(MediaSessionStateMachine *this)
{
}

{
  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)((char *)this - 120));
}

{
  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)((char *)this - 128));
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)((char *)this - 120));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)((char *)this - 128));
  JUMPOUT(0x1C878E320);
}

void MediaSessionStateMachine::create(uint64_t *a1@<X0>, ImsPrefs *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x158uLL);
  uint64_t v9 = v8;
  v8[1] = 0;
  void v8[2] = 0;
  *uint64_t v8 = &unk_1F20E4AF8;
  long long v10 = v8 + 3;
  uint64_t v11 = *a1;
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _OWORD v8[4] = 0;
  void v8[5] = 0;
  v8[3] = &unk_1F20C1128;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 152))(&v53, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 176))(v11);
  char v14 = *(std::__shared_weak_count **)(v11 + 40);
  uint64_t v51 = *(void *)(v11 + 32);
  std::string v52 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v15 = *(NSObject **)(v11 + 48);
  object[0] = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  MediaSessionInterface::MediaSessionInterface((uint64_t)(v9 + 6), &v53, v13, &v51, (long long *)(v11 + 56), object);
  if (object[0]) {
    dispatch_release(object[0]);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  uint64_t v39 = a4;
  char v16 = (ImsPrefs *)v54;
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  void v9[3] = &unk_1F20E4440;
  v9[6] = &unk_1F20E4578;
  v9[17] = &unk_1F20E4650;
  v9[18] = &unk_1F20E4690;
  v9[19] = &unk_1F20E46C8;
  *((_DWORD *)v9 + 40) = 0;
  *((unsigned char *)v9 + 164) = a3;
  *((_DWORD *)v9 + 42) = 4;
  v9[22] = 0;
  v9[23] = 0;
  unsigned char v9[24] = v11;
  v9[25] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v16);
  char v18 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EnableAPOnlyModeKey);
  *(_OWORD *)(v9 + 27) = 0u;
  *((unsigned char *)v9 + 208) = (_BYTE)v18;
  v9[34] = 0;
  *((unsigned char *)v9 + 280) = 0;
  *(_OWORD *)(v9 + 2QMIRTPStackController::~QMIRTPStackController(this - 9) = 0u;
  *(_OWORD *)(v9 + 3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0u;
  *((unsigned char *)v9 + 264) = 0;
  *((_OWORD *)v9 + 18) = 0u;
  *((_OWORD *)v9 + 1QMIRTPStackController::~QMIRTPStackController(this - 9) = 0u;
  *(void *)((char *)v9 + 317) = 0;
  UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v18);
  *((unsigned char *)v9 + 325) = ImsPrefs::BOOLValue(a2, UseRTPDetectionAutoStartKey);
  *((unsigned char *)v9 + 326) = 0;
  *((_DWORD *)v9 + 82) = 0;
  *(_DWORD *)((char *)v9 + 33bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((_DWORD *)v9 + 84) = 1;
  *((unsigned char *)v9 + 340) = 0;
  std::string::basic_string[abi:ne180100]<0>(object, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v20 = ims::debug((uint64_t)object, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"MediaSessionStateMachine", 24);
  *(unsigned char *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v20 + 17) = 0;
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0) {
    operator delete(object[0]);
  }
  *((_WORD *)v9 + 80) = 769;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  void *v10 = &unk_1F20E4B48;
  v9[6] = &unk_1F20E4C80;
  v9[17] = &unk_1F20E4D58;
  v9[18] = &unk_1F20E4D98;
  v9[19] = &unk_1F20E4DD0;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  char v21 = (std::__shared_weak_count *)v9[5];
  if (v21)
  {
    uint64_t v22 = (uint64_t)v10;
    if (v21->__shared_owners_ != -1) {
      goto LABEL_28;
    }
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v9 + 2, 1uLL, memory_order_relaxed);
    _OWORD v9[4] = v10;
    void v9[5] = v9;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v9 + 2, 1uLL, memory_order_relaxed);
    uint64_t v22 = (uint64_t)v10;
    _OWORD v9[4] = v10;
    void v9[5] = v9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
LABEL_28:
  RTPSharedPointerBase::getShared<MediaSessionInterface>(v22, &v44);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v9[24] + 152))(&v42);
  char v23 = (void *)v9[24];
  uint64_t v25 = v23[4];
  uint64_t v24 = (std::__shared_weak_count *)v23[5];
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    char v23 = (void *)v9[24];
  }
  unsigned int v26 = v23[6];
  dispatch_object_t v41 = v26;
  if (v26) {
    dispatch_retain(v26);
  }
  char v27 = v44;
  uint64_t v28 = v45;
  int v29 = operator new(0xB8uLL);
  char v30 = v29;
  v29[1] = 0;
  void v29[2] = 0;
  void *v29 = &unk_1F20D8F28;
  uint64_t v31 = (uint64_t)(v29 + 3);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = (long long *)(v23 + 7);
  uint64_t v33 = v42;
  int v34 = v43;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v35 = v9[9];
  v29[4] = 0;
  v29[5] = 0;
  void v29[3] = &unk_1F20C1128;
  uint64_t v53 = v33;
  long long v54 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = v34;
  uint64_t v51 = v25;
  std::string v52 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionInterface::MediaSessionInterface((uint64_t)(v29 + 6), &v53, v35, &v51, v32, &v41);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  void v30[3] = &unk_1F20D81D0;
  v30[6] = &unk_1F20D82D0;
  v30[17] = v30 + 17;
  v30[18] = v30 + 17;
  v30[19] = 0;
  v30[20] = v27;
  v30[21] = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v30 + 44) = 4;
  std::string::basic_string[abi:ne180100]<0>(object, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v36 = ims::debug((uint64_t)object, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"MediaSessionQueue", 17);
  *(unsigned char *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v36 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v36 + 17) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v36 + 32))(v36, v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v36 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v36 + 17) = 0;
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0) {
    operator delete(object[0]);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  *(void *)&long long v46 = v31;
  *((void *)&v46 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v30;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v46, v30 + 4, v31);
  long long v37 = v46;
  long long v46 = 0uLL;
  char v38 = (std::__shared_weak_count *)v9[23];
  *((_OWORD *)v9 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v37;
  if (v38)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    if (*((void *)&v46 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  if (v41) {
    dispatch_release(v41);
  }
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  *uint64_t v39 = v10;
  v39[1] = v9;
}

void sub_1C55FD2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void **a12, uint64_t a13, dispatch_object_t object, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  uint64_t v39 = (std::__shared_weak_count *)v35[7].__vftable;
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear(v37);
  MediaSessionInterface::~MediaSessionInterface(a12);
  shared_weak_owners = (std::__shared_weak_count *)v35[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v41);
  if (object) {
    dispatch_release(object);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void MediaSessionStateMachine::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::string::basic_string[abi:ne180100]<0>(&v68, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v65, "");
  uint64_t v14 = ims::debug((uint64_t)&v68, (uint64_t)&v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v67 < 0) {
    operator delete(v65);
  }
  if (v69 < 0) {
    operator delete((void *)v68);
  }
  *(unsigned char *)(a1 + 302) = a3;
  if (*(unsigned char *)(a1 + 301)
    && a3
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 144))(a1) == 2
    && !*(unsigned char *)(a1 + 306))
  {
    xpc_object_t v65 = 0;
    xpc_object_t v66 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v65);
    uint64_t v25 = *(void *)(a1 + 56);
    LoggableString::LoggableString((LoggableString *)&v68, "rtp.statemachine.initialize");
    unsigned int v26 = v65;
    char v27 = v66;
    v64[0] = (uint64_t)v65;
    v64[1] = (uint64_t)v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v60[0] = MEMORY[0x1E4F143A8];
    v60[1] = 1174405120;
    v60[2] = ___ZN24MediaSessionStateMachine10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
    v60[3] = &__block_descriptor_tmp_60;
    uint64_t v29 = *a7;
    uint64_t v28 = (std::__shared_weak_count *)a7[1];
    v60[4] = a1;
    v60[5] = v29;
    BOOL v61 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v62 = v26;
    uint64_t v63 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RTPManager::performBlock(v25, (uint64_t)&v68, v64, (uint64_t)v60);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v69 < 0) {
      operator delete((void *)v68);
    }
    long long v68 = 0uLL;
    if (*(unsigned char *)(a1 + 184)) {
      RTPManager::getStackControllerByType(*(void *)(a1 + 56), 1, &v68);
    }
    else {
      RTPManager::getActiveStackController(&v68, *(void *)(a1 + 56), (void **)(a1 + 80));
    }
    uint64_t v30 = v68;
    uint64_t v31 = *(void *)v68;
    {
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&v68 + 1);
      if (*((void *)&v68 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v33 = *(const void **)(a1 + 168);
      if (v33)
      {
        if (v34)
        {
          uint64_t v35 = *(std::__shared_weak_count **)(a1 + 176);
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v30 + 64))(v30, a1 + 80, v34[496]);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
        }
      }
      if (!v32)
      {
LABEL_44:
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        if (v61) {
          std::__shared_weak_count::__release_weak(v61);
        }
        uint64_t v36 = v66;
        if (v66) {
          goto LABEL_93;
        }
        return;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, void))(v31 + 64))(v30, a1 + 80, 0);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&v68 + 1);
      if (!*((void *)&v68 + 1)) {
        goto LABEL_44;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    goto LABEL_44;
  }
  char v15 = (std::__shared_weak_count *)a7[1];
  if (v15)
  {
    char v16 = std::__shared_weak_count::lock(v15);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *a7;
      if (!*a7) {
        goto LABEL_79;
      }
      uint64_t v19 = *(std::__shared_weak_count **)(v18 + 128);
      if (v19)
      {
        uint64_t v20 = std::__shared_weak_count::lock(v19);
        if (v20)
        {
          uint64_t v21 = *(void *)(v18 + 120);
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (v21)
          {
            uint64_t v22 = *(std::__shared_weak_count **)(v18 + 128);
            if (v22 && (char v23 = std::__shared_weak_count::lock(v22)) != 0)
            {
              long long v54 = v23;
              uint64_t v24 = *(void *)(v18 + 120);
            }
            else
            {
              uint64_t v24 = 0;
              long long v54 = 0;
            }
            std::string::operator=((std::string *)(a1 + 192), (const std::string *)(v24 + 3160));
            std::string::operator=((std::string *)(a1 + 216), (const std::string *)(v24 + 3184));
            long long v37 = *(_OWORD *)(v24 + 3208);
            *(unsigned char *)(a1 + 256) = *(unsigned char *)(v24 + 3224);
            *(_OWORD *)(a1 + 240) = v37;
            if (v54) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            }
          }
        }
      }
      if (!*(unsigned char *)(a1 + 184)) {
        goto LABEL_79;
      }
      int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
      if (v38 == 2)
      {
        if (*(unsigned char *)(v18 + 584))
        {
          uint64_t v39 = v18 + 152;
          goto LABEL_62;
        }
      }
      else if (v38 == 6 && *(unsigned char *)(v18 + 1856))
      {
        uint64_t v39 = v18 + 1496;
        goto LABEL_62;
      }
      if (!*(unsigned char *)(v18 + 1328))
      {
LABEL_77:
        if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(a1 + 192))) {
          MediaSessionStateMachine::reportAPSession((MediaSessionStateMachine *)a1, 1);
        }
LABEL_79:
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        goto LABEL_80;
      }
      uint64_t v39 = v18 + 1032;
LABEL_62:
      uint64_t v41 = *(void *)(v39 + 8);
      uint64_t v40 = *(std::__shared_weak_count **)(v39 + 16);
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        if (v41)
        {
          uint64_t v41 = *(void *)(v39 + 8);
          uint64_t v42 = *(void *)(v39 + 16);
          if (v42)
          {
            char v53 = 0;
            std::string v52 = *(std::__shared_weak_count **)(v39 + 16);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
            goto LABEL_68;
          }
LABEL_67:
          std::string v52 = 0;
          char v53 = 1;
LABEL_68:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v41 + 32))(&v68, v41);
          long long v43 = v68;
          long long v68 = 0uLL;
          uint64_t v44 = *(std::__shared_weak_count **)(a1 + 272);
          *(_OWORD *)(a1 + 264) = v43;
          if (v44)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            if (*((void *)&v68 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
            }
          }
          if ((v53 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
        }
      }
      else if (v41)
      {
        goto LABEL_67;
      }
      *(_WORD *)(a1 + 296) = *(_WORD *)(v39 + 26);
      (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v68);
      long long v45 = v68;
      long long v68 = 0uLL;
      long long v46 = *(std::__shared_weak_count **)(a1 + 288);
      *(_OWORD *)(a1 + 280) = v45;
      if (v46)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        if (*((void *)&v68 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
        }
      }
      *(_WORD *)(a1 + 298) = *(_WORD *)(v39 + 24);
      goto LABEL_77;
    }
  }
LABEL_80:
  long long v68 = 0uLL;
  RTPSharedPointerBase::getShared<MediaSessionDelegate>(a1, (void **)&v68);
  uint64_t v47 = *(void *)(a1 + 168);
  long long v59 = v68;
  if (*((void *)&v68 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v47 + 160))(v47, &v59);
  if (*((void *)&v59 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v59 + 1));
  }
  uint64_t v48 = *(void *)(a1 + 168);
  std::string v49 = (std::__shared_weak_count *)a7[1];
  uint64_t v57 = *a7;
  uint64_t v58 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::setRTCPInterval(v48, &v57);
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  *(unsigned char *)(a1 + 138) = 1;
  uint64_t v50 = *(void *)(a1 + 168);
  uint64_t v51 = (std::__shared_weak_count *)a7[1];
  uint64_t v55 = *a7;
  int v56 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v50 + 16))(v50, a2, a3, a4, a5, a6, &v55);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v36 = (std::__shared_weak_count *)*((void *)&v68 + 1);
  if (*((void *)&v68 + 1)) {
LABEL_93:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
}

void sub_1C55FDBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 128);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  long long v6 = *(std::__shared_weak_count **)(v2 + 40);
  if (v6)
  {
    size_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(v2 + 32);
      if (!v5)
      {
LABEL_19:
        if (!v8) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (!v5) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    size_t v7 = 0;
    if (!v5) {
      goto LABEL_19;
    }
  }
  if (!v8)
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(v16, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::debug((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SDPSession and Delegate are gone [sessionId=", 44);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_29;
  }
  if (*(unsigned char *)(v5 + 584))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 152) + 24))(v5 + 152);
    *(unsigned char *)(v2 + 30QMIRTPStackController::~QMIRTPStackController(this - 9) = v9;
    if (v9)
    {
      long long v10 = (std::__shared_weak_count *)a1[8];
      uint64_t v20 = a1[7];
      uint64_t v21 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v8 + 16))(v8, &v20, 0);
      uint64_t v11 = v21;
      if (v21) {
        goto LABEL_28;
      }
      goto LABEL_29;
    }
  }
  else
  {
    *(unsigned char *)(v2 + 30QMIRTPStackController::~QMIRTPStackController(this - 9) = 0;
  }
LABEL_25:
  uint64_t v13 = (std::__shared_weak_count *)a1[8];
  uint64_t v18 = a1[7];
  uint64_t v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**(void (***)(uint64_t, uint64_t *, void))v8)(v8, &v18, 0);
  uint64_t v11 = v19;
  if (v19) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_29:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C55FDF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE56c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSKNSt3__18weak_ptrI10SDPSessionEE56c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t **RTPManager::getActiveStackController(void *a1, uint64_t a2, void **a3)
{
  BOOL result = (uint64_t **)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 312, a3);
  if ((uint64_t **)(a2 + 320) == result) {
    int v6 = 0;
  }
  else {
    int v6 = *((_DWORD *)result + 14);
  }
  int v15 = v6;
  uint64_t v9 = *(void *)(a2 + 208);
  uint64_t v8 = a2 + 208;
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_14;
  }
  BOOL result = (uint64_t **)(v8 - 8);
  uint64_t v10 = v8;
  do
  {
    int v11 = *(_DWORD *)(v7 + 32);
    BOOL v12 = v11 < v6;
    if (v11 >= v6) {
      uint64_t v13 = (uint64_t *)v7;
    }
    else {
      uint64_t v13 = (uint64_t *)(v7 + 8);
    }
    if (!v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 != v8 && v6 >= *(_DWORD *)(v10 + 32))
  {
    char v16 = &v15;
    BOOL result = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>(result, &v15, (uint64_t)&std::piecewise_construct, &v16);
    uint64_t v14 = result[6];
    *a1 = result[5];
    a1[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void MediaSessionStateMachine::reportAPSession(MediaSessionStateMachine *this, uint64_t a2)
{
  if (*((void *)this + 35))
  {
    if (*((void *)this + 33))
    {
      uint64_t v15 = 0;
      char v16 = 0;
      RTPManager::getStackControllerByType(*((void *)this + 7), 2, &v15);
      uint64_t v4 = v15;
      if (v15)
      {
        std::string::basic_string[abi:ne180100]<0>(v19, "rtp.statemachine");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Reporting the ", 14);
        *(unsigned char *)(v5 + 17) = 0;
        if (a2) {
          int v6 = "start";
        }
        else {
          int v6 = "end";
        }
        if (a2) {
          uint64_t v7 = 5;
        }
        else {
          uint64_t v7 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v6, v7);
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" of the VoLTE session [sessionId=", 33);
        *(unsigned char *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 36);
        uint64_t v13 = *((void *)this + 35);
        uint64_t v14 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 34);
        uint64_t v11 = *((void *)this + 33);
        BOOL v12 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, void, void, uint64_t))(*(void *)v4 + 88))(v4, &v13, &v11, *((unsigned __int16 *)this + 149), *((unsigned __int16 *)this + 148), a2);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Remote address is null. Unable to report AP session to the baseband", 67);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v10 = ims::debug((uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Local address is null. Unable to report AP session to the baseband", 66);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v10 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_1C55FE490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::getShared<MediaSessionDelegate>(uint64_t a1@<X0>, void **a2@<X8>)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v3, (void *)(a1 + 8));
  std::dynamic_pointer_cast[abi:ne180100]<MediaSessionDelegate,RTPSharedPointerBase>(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void non-virtual thunk to'MediaSessionStateMachine::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
}

void MediaSessionStateMachine::internalTerminate(MediaSessionStateMachine *this)
{
  int v2 = *((unsigned __int8 *)this + 137);
  if ((v2 - 4) < 2)
  {
    uint64_t v4 = *(void (**)(void))(**((void **)this + 21) + 24);
    v4();
  }
  else if (v2 == 3)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 22);
    uint64_t v6 = *((void *)this + 21);
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(MediaSessionStateMachine *, uint64_t *, uint64_t))(*(void *)this + 200))(this, &v6, 2);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Terminate requested on [sessionId=", 34);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"] when state is ", 16);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    *((unsigned char *)this + 138) = 0;
  }
}

void sub_1C55FE7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MediaSessionStateMachine::terminate(MediaSessionStateMachine *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p);
  }
  if (v55 < 0) {
    operator delete(lpsrc);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308))
  {
    lpsrc = 0;
    long long v54 = 0;
    if (*((unsigned char *)this + 184)) {
      RTPManager::getStackControllerByType(*((void *)this + 7), 1, &lpsrc);
    }
    else {
      RTPManager::getActiveStackController(&lpsrc, *((void *)this + 7), (void **)this + 10);
    }
    uint64_t v5 = lpsrc;
    uint64_t v6 = *(void *)lpsrc;
    {
      (*(void (**)(void *, char *, void))(v6 + 72))(v5, (char *)this + 80, 0);
      uint64_t v7 = v54;
      if (!v54) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    uint64_t v7 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = (const void *)*((void *)this + 21);
    if (v8
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 22);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, char *, void))(*(void *)v5 + 72))(v5, (char *)this + 80, v9[496]);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    else
    {
      (*(void (**)(void *, char *, void))(*(void *)v5 + 72))(v5, (char *)this + 80, 0);
    }
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
LABEL_26:
  if (*((void *)this + 19))
  {
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v11 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"terminate", 9);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [actionQueueSize=", 18);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 19) + 216))(*((void *)this + 19));
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v11 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"terminate", 9);
  }
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v52 < 0) {
    operator delete(__p);
  }
  if (v55 < 0) {
    operator delete(lpsrc);
  }
  uint64_t v12 = *((void *)this + 19);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 200))(v12);
  }
  int v13 = *((unsigned __int8 *)this + 138);
  if (*((unsigned char *)this + 138))
  {
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v14 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Queuing terminate [sessionId=", 29);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v52 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(lpsrc);
    }
    uint64_t v15 = *((void *)this + 19);
    if (v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, a2);
    }
  }
  else
  {
    *((unsigned char *)this + 138) = 1;
    if (*((unsigned char *)this + 136) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v16 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Queuing terminate and calling stop [sessionId=", 46);
      *(unsigned char *)(v16 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v52 < 0) {
        operator delete(__p);
      }
      if (v55 < 0) {
        operator delete(lpsrc);
      }
      uint64_t v17 = *((void *)this + 19);
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, a2);
      }
      if (*((unsigned char *)this + 136))
      {
        (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 88))(this);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v24 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"flowstate is None. Clearing the state in CommandDrivers and calling handleMediaSessionTerminated() for upper layer sessions", 123);
        *(unsigned char *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v24 + 17) = 0;
        if (v52 < 0) {
          operator delete(__p);
        }
        if (v55 < 0) {
          operator delete(lpsrc);
        }
        uint64_t v25 = *((void *)this + 19);
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 200))(v25);
        }
        lpsrc = 0;
        long long v54 = 0;
        uint64_t v26 = *((void *)this + 7);
        char v27 = (std::__shared_weak_count *)*((void *)this + 8);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RTPManager::getActiveStackController(&lpsrc, v26, (void **)this + 10);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        uint64_t v28 = lpsrc;
        if (lpsrc)
        {
          if (v29)
          {
            uint64_t v30 = (uint64_t)v29;
            uint64_t v31 = v54;
            if (v54) {
              atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v32 = (const void *)*((void *)this + 21);
            if (v32)
            {
              if (v33)
              {
                int v34 = (std::__shared_weak_count *)*((void *)this + 22);
                if (v34)
                {
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                  std::string v49 = v34;
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  std::string v49 = 0;
                }
                uint64_t v48 = v33;
                QMIRTPStackController::sessionDidUninitialize(v30, (uint64_t)&v48, 0);
                if (v49) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v49);
                }
                if (v34) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                }
              }
            }
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
          }
          if (v35)
          {
            uint64_t v36 = v35;
            long long v37 = v54;
            if (v54) {
              atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v38 = (const void *)*((void *)this + 21);
            if (v38)
            {
              if (v39)
              {
                uint64_t v40 = (std::__shared_weak_count *)*((void *)this + 22);
                if (v40) {
                  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                IBIRTPStackController::handleTerminateMediaSessionResponse(v36, 0, v39[121]);
                if (v40) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                }
              }
            }
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
          }
        }
        uint64_t v41 = (std::__shared_weak_count *)*((void *)this + 22);
        *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
        *((void *)this + 22) = 0;
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        std::string __p = 0;
        uint64_t v51 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &__p);
        uint64_t v42 = (std::__shared_weak_count *)*((void *)this + 5);
        if (v42)
        {
          long long v43 = std::__shared_weak_count::lock(v42);
          if (v43)
          {
            uint64_t v44 = v43;
            uint64_t v45 = *((void *)this + 4);
            if (v45)
            {
              long long v46 = __p;
              uint64_t v47 = v51;
              if (v51) {
                atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, void **, void))(*(void *)v45 + 8))(v45, &v46, 0);
              if (v47) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v47);
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
        }
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v18 = ims::debug((uint64_t)&lpsrc, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Terminating session [sessionId=", 31);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      if (v52 < 0) {
        operator delete(__p);
      }
      if (v55 < 0) {
        operator delete(lpsrc);
      }
      (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 72))(this);
    }
    lpsrc = 0;
    long long v54 = 0;
    uint64_t v19 = *((void *)this + 7);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 8);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RTPManager::getActiveStackController(&__p, v19, (void **)this + 10);
    std::dynamic_pointer_cast[abi:ne180100]<AVCRTPStackController,RTPStackController>(&__p, &lpsrc);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v21 = lpsrc;
    if (lpsrc)
    {
      unint64_t v22 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)this + 184))(this);
      AVCRTPStackController::removeSessionFromCache((uint64_t)v21, (void **)this + 10, v22);
    }
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
  }
  return v13 == 0;
}

void sub_1C55FF4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<AVCRTPStackController,RTPStackController>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  int v2 = a1;
  BOOL result = *a1;
  if (result
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    int v2 = a2;
  }
  std::__shared_weak_count *v2 = 0;
  v2[1] = 0;
  return result;
}

BOOL non-virtual thunk to'MediaSessionStateMachine::terminate(MediaSessionStateMachine *this, uint64_t a2)
{
  return MediaSessionStateMachine::terminate((MediaSessionStateMachine *)((char *)this - 24), a2);
}

void MediaSessionStateMachine::internalStart(MediaSessionStateMachine *this)
{
  switch(*((unsigned char *)this + 136))
  {
    case 0:
    case 3:
    case 4:
    case 5:
      std::string::basic_string[abi:ne180100]<0>(v9, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Start requested on [sessionId=", 30);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"] when state is ", 16);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v2 + 17) = 0;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      goto LABEL_6;
    case 1:
      uint64_t v3 = *(void (**)(void))(**((void **)this + 21) + 32);
      v3();
      break;
    case 2:
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
      uint64_t v5 = *((void *)this + 21);
      uint64_t v6 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(MediaSessionStateMachine *, uint64_t *, uint64_t))(*(void *)this + 216))(this, &v5, 2);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      break;
    default:
LABEL_6:
      *((unsigned char *)this + 138) = 0;
      break;
  }
}

void sub_1C55FF87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionStateMachine::start(MediaSessionStateMachine *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  uint64_t v4 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"start", 5);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v25 < 0) {
    operator delete(v23);
  }
  if (v28 < 0) {
    operator delete(v26);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 307))
  {
    RTPManager::sdpSessionForSession(*((RTPManager **)this + 7), *((void *)this + 6), &v26);
    uint64_t v18 = v27;
    v22[0] = (uint64_t)v26;
    v22[1] = (uint64_t)v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    MediaSessionStateMachine::autoStart((uint64_t)this, v22, 1);
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    return 1;
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5) & 1) == 0
      && (*(unsigned int (**)(void, uint64_t))(**((void **)this + 19) + 208))(*((void *)this + 19), 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(&v23, "");
      uint64_t v6 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Session start is already queued. Drop this one [sessionId=", 58);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v25 < 0) {
        operator delete(v23);
      }
      if (v28 < 0) {
        operator delete(v26);
      }
      return 1;
    }
    uint64_t v7 = *((void *)this + 21);
    if (v7)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
        std::string::basic_string[abi:ne180100]<0>(&v23, "");
        uint64_t v11 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"New start request; session will be started when audio ready notification is received [sessionId=",
          96);
        *(unsigned char *)(v11 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v11 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        if (v25 < 0) {
          operator delete(v23);
        }
        if (v28 < 0) {
          operator delete(v26);
        }
        std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
        std::string::basic_string[abi:ne180100]<0>(&v23, "");
        uint64_t v12 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Queuing start [sessionId=", 25);
        *(unsigned char *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        if (v25 < 0) {
          operator delete(v23);
        }
        if (v28 < 0) {
          operator delete(v26);
        }
        uint64_t v13 = *((void *)this + 19);
        if (v13) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
        }
        char v23 = 0;
        uint64_t v24 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v23);
        uint64_t v14 = *((void *)this + 7);
        LoggableString::LoggableString((LoggableString *)&v26, "rtp.statemachine.handleMediaSessionActivated.fake");
        uint64_t v15 = v23;
        uint64_t v16 = v24;
        v21[0] = (uint64_t)v23;
        v21[1] = (uint64_t)v24;
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v17 = v24;
        }
        else
        {
          uint64_t v17 = 0;
        }
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 1174405120;
        xpc_object_t v19[2] = ___ZN24MediaSessionStateMachine5startEb_block_invoke;
        void v19[3] = &__block_descriptor_tmp_22_0;
        void v19[4] = this;
        void v19[5] = v15;
        uint64_t v20 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RTPManager::performBlock(v14, (uint64_t)&v26, v21, (uint64_t)v19);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v28 < 0) {
          operator delete(v26);
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        return 0;
      }
    }
  }
  if (!*((unsigned char *)this + 138))
  {
    *((_WORD *)this + 6QMIRTPStackController::~QMIRTPStackController(this - 9) = 257;
    std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    uint64_t v10 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Starting session [sessionId=", 28);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v25 < 0) {
      operator delete(v23);
    }
    if (v28 < 0) {
      operator delete(v26);
    }
    (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 80))(this);
    return 1;
  }
  if (*((unsigned char *)this + 139)
    && !(*(unsigned int (**)(void, uint64_t))(**((void **)this + 19) + 208))(*((void *)this + 19), 3))
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  uint64_t v8 = ims::debug((uint64_t)&v26, (uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Queuing start [sessionId=", 25);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v25 < 0) {
    operator delete(v23);
  }
  if (v28 < 0) {
    operator delete(v26);
  }
  uint64_t result = *((void *)this + 19);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a2);
    return 0;
  }
  return result;
}

void sub_1C5600100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 48);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionStateMachine::autoStart(uint64_t a1, uint64_t *a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(v31, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v31, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"autoStart", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isBasebandInitialized=", 23);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" force=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  BOOL started = MediaSessionStateMachine::startConditionsMet((MediaSessionStateMachine *)a1);
  if ((a3 & 1) != 0 || (!*(unsigned char *)(a1 + 307) ? (BOOL v8 = started) : (BOOL v8 = 0), v8))
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v31, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Autostart conditions have been met for session [sessionId=", 58);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" force=", 7);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" _startSent=", 12);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" startConditionMet=", 19);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    *(unsigned char *)(a1 + 306) = 1;
    if ((*(unsigned char *)(a1 + 137) & 0xFE) != 4)
    {
      uint64_t v27 = 0;
      char v28 = 0;
      RTPManager::addressForSession(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48), &v27);
      uint64_t v10 = RTPManager::sessionMobileOriginated(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48));
      RTPManager::interfaceForSession(*(RTPManager **)(a1 + 56), v31);
      RTPManager::awdCallIdForSession(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48), __p);
      uint64_t v11 = *(unsigned int *)(a1 + 312);
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v25 = *a2;
      uint64_t v26 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, void **, uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v27, v10, v31, __p, v11, &v25);
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
    }
    *(unsigned char *)(a1 + 307) = 1;
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 48))(a1, a1 + 312, 0);
    (*(void (**)(void, void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), *(void *)(a1 + 48));
    (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, 0);
    MediaSessionStateMachine::detachFromSocket((RTPTransportManager **)a1);
    uint64_t v13 = *(void *)(a1 + 56);
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
    uint64_t v17 = *(void *)(v13 + 88);
    uint64_t v16 = v13 + 88;
    uint64_t v15 = v17;
    if (!v17) {
      goto LABEL_36;
    }
    uint64_t v18 = v16;
    do
    {
      int v19 = *(_DWORD *)(v15 + 32);
      BOOL v20 = v19 < v14;
      if (v19 >= v14) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v16 || *(_DWORD *)(v18 + 32) > v14 || !*(void *)(v18 + 40))
    {
LABEL_36:
      unint64_t v22 = *(uint64_t **)(a1 + 48);
      uint64_t v23 = *(void *)(a1 + 56);
      int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
      RTPActiveSessionSet::setActive(v23 + 80, v22, v24);
    }
  }
}

void sub_1C56006CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine5startEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 24))(v5, &v12, 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C56008DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::start(MediaSessionStateMachine *this, uint64_t a2)
{
  return MediaSessionStateMachine::start((MediaSessionStateMachine *)((char *)this - 24), a2);
}

void MediaSessionStateMachine::internalStop(MediaSessionStateMachine *this)
{
  switch(*((unsigned char *)this + 136))
  {
    case 0:
    case 3:
    case 4:
    case 5:
      std::string::basic_string[abi:ne180100]<0>(v9, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v2 = ims::debug((uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Stop requested on [sessionId=", 29);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"] when state is ", 16);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v2 + 17) = 0;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      goto LABEL_6;
    case 1:
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
      uint64_t v5 = *((void *)this + 21);
      uint64_t v6 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(MediaSessionStateMachine *, uint64_t *, uint64_t))(*(void *)this + 224))(this, &v5, 2);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      break;
    case 2:
      uint64_t v3 = *(void (**)(void))(**((void **)this + 21) + 40);
      v3();
      break;
    default:
LABEL_6:
      *((unsigned char *)this + 138) = 0;
      break;
  }
}

void sub_1C5600B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionStateMachine::stop(MediaSessionStateMachine *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  uint64_t v4 = ims::debug((uint64_t)v29, (uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"stop", 4);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v28 < 0) {
    operator delete(v26);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v26);
    uint64_t v16 = *((void *)this + 7);
    if (!v16) {
      goto LABEL_47;
    }
    LoggableString::LoggableString((LoggableString *)v29, "rtp.statemachine.handleMediaSessionDeactivated");
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    v25[0] = (uint64_t)v26;
    v25[1] = (uint64_t)v27;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      int v19 = v27;
    }
    else
    {
      int v19 = 0;
    }
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 1174405120;
    uint64_t v23[2] = ___ZN24MediaSessionStateMachine4stopEb_block_invoke;
    uint64_t v23[3] = &__block_descriptor_tmp_28_3;
    v23[4] = this;
    v23[5] = v17;
    int v24 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RTPManager::performBlock(v16, (uint64_t)v29, v25, (uint64_t)v23);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    uint64_t v15 = v24;
    if (!v24) {
      goto LABEL_47;
    }
LABEL_46:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_47:
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    return 1;
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    uint64_t v8 = ims::debug((uint64_t)v29, (uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Stop request negates an earlier start request. Flushing the queue for session ", 78);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v28 < 0) {
      operator delete(v26);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (*((void *)this + 19))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(&v26, "");
      uint64_t v9 = ims::debug((uint64_t)v29, (uint64_t)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"flush", 5);
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [actionQueueSize=", 18);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(void))(**((void **)this + 19) + 216))(*((void *)this + 19));
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v28 < 0) {
        operator delete(v26);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      while (((*(uint64_t (**)(void))(**((void **)this + 19) + 184))(*((void *)this + 19)) & 1) != 0)
        ;
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v26);
    uint64_t v10 = *((void *)this + 7);
    LoggableString::LoggableString((LoggableString *)v29, "rtp.statemachine.handleMediaSessionDeactivated.fake");
    char v11 = v26;
    uint64_t v12 = v27;
    v22[0] = (uint64_t)v26;
    v22[1] = (uint64_t)v27;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = v27;
    }
    else
    {
      uint64_t v13 = 0;
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 1174405120;
    void v20[2] = ___ZN24MediaSessionStateMachine4stopEb_block_invoke_31;
    void v20[3] = &__block_descriptor_tmp_34;
    void v20[4] = this;
    void v20[5] = v11;
    uint64_t v21 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RTPManager::performBlock(v10, (uint64_t)v29, v22, (uint64_t)v20);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    uint64_t v15 = v21;
    if (!v21) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (!*((unsigned char *)this + 138))
  {
    if (*((unsigned char *)this + 140)
      && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 120))(this))
    {
      (*(void (**)(void, void, void))(**((void **)this + 21) + 200))(*((void *)this + 21), 0, 0);
    }
    *((unsigned char *)this + 138) = 1;
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    uint64_t v14 = ims::debug((uint64_t)v29, (uint64_t)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Stopping session [sessionId=", 28);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v28 < 0) {
      operator delete(v26);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 88))(this);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  uint64_t v6 = ims::debug((uint64_t)v29, (uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Queuing stop [sessionId=", 24);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v28 < 0) {
    operator delete(v26);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  uint64_t result = *((void *)this + 19);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, a2);
    return 0;
  }
  return result;
}

void sub_1C5601398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 72);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine4stopEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v12, 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C56015C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine4stopEb_block_invoke_31(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v12, 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C56017A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::stop(MediaSessionStateMachine *this, uint64_t a2)
{
  return MediaSessionStateMachine::stop((MediaSessionStateMachine *)((char *)this - 24), a2);
}

void MediaSessionStateMachine::internalSetDirection(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 136))
  {
    case 0:
    case 3:
    case 4:
    case 5:
      std::string::basic_string[abi:ne180100]<0>(v6, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Set direction requested on [sessionId=", 38);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"] when state is ", 16);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v2 + 17) = 0;
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (v7 < 0) {
        operator delete(v6[0]);
      }
      goto LABEL_6;
    case 1:
    case 2:
      uint64_t v3 = *(void (**)(void))(**(void **)(a1 + 168) + 48);
      v3();
      break;
    default:
LABEL_6:
      *(unsigned char *)(a1 + 138) = 0;
      break;
  }
}

void sub_1C5601980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionStateMachine::setDirection(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 301)
    && *(unsigned char *)(a1 + 302)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 144))(a1) == 2
    && !*(unsigned char *)(a1 + 308)
    && !MediaSessionStateMachine::startConditionsMet((MediaSessionStateMachine *)a1))
  {
    if (*(_DWORD *)(a1 + 312) != *a2)
    {
      *(_DWORD *)(a1 + 312) = *a2;
      RTPManager::sdpSessionForSession(*(RTPManager **)(a1 + 56), *(void *)(a1 + 48), &v15);
      uint64_t v12 = v16;
      v18[0] = (uint64_t)v15;
      v18[1] = (uint64_t)v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionStateMachine::autoStart(a1, v18, 0);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 168);
  if ((!v6
     || !*(void *)(a1 + 152)
     || ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6) & 1) != 0
     || ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 208))(*(void *)(a1 + 152), 2) & 1) == 0)
    && !*(unsigned char *)(a1 + 138))
  {
    int v9 = *a2;
    uint64_t result = 1;
    if (*(_DWORD *)(a1 + 144) == *a2) {
      return result;
    }
    *(unsigned char *)(a1 + 138) = 1;
    if (*(unsigned char *)(a1 + 136) == 1) {
      *(_DWORD *)(a1 + 144) = v9;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::debug((uint64_t)&v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Calling setDirection ", 21);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v15);
    }
    (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 104))(a1, a2);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Queuing setDirection [sessionId=", 32);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" isAudioReady=", 14);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = *(void *)(a1 + 168);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 120))(v8);
  }
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v15);
  }
  uint64_t result = *(void *)(a1 + 152);
  if (result)
  {
    (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)result + 48))(result, a2, a3);
    return 0;
  }
  return result;
}

void sub_1C5601DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL MediaSessionStateMachine::startConditionsMet(MediaSessionStateMachine *this)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"startConditionsMet", 18);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" _configurable=", 15);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" _trafficDetected=", 18);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" _directionActive=", 18);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" startSent=", 11);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return *((unsigned char *)this + 309) && *((unsigned char *)this + 310) && *((_DWORD *)this + 78) != 4 || *((unsigned char *)this + 307) != 0;
}

void sub_1C5602004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::setDirection(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  return MediaSessionStateMachine::setDirection(a1 - 24, a2, a3);
}

void MediaSessionStateMachine::internalConfigure(MediaSessionStateMachine *this)
{
  int v2 = *((unsigned __int8 *)this + 137);
  if ((v2 - 4) < 2)
  {
    uint64_t v4 = *(void (**)(void))(**((void **)this + 21) + 64);
    v4();
  }
  else if (v2 == 3)
  {
    char v5 = (std::__shared_weak_count *)*((void *)this + 22);
    uint64_t v6 = *((void *)this + 21);
    char v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(MediaSessionStateMachine *, uint64_t *, uint64_t))(*(void *)this + 200))(this, &v6, 2);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Configure requested on [sessionId=", 34);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"] when state is ", 16);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    *((unsigned char *)this + 138) = 0;
  }
}

void sub_1C56022B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionStateMachine::configure(MediaSessionStateMachine *this, uint64_t a2)
{
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308)
    && !MediaSessionStateMachine::startConditionsMet(this))
  {
    std::string __p = 0;
    unint64_t v22 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &__p);
    uint64_t v14 = *((void *)this + 7);
    if (v14)
    {
      LoggableString::LoggableString((LoggableString *)v27, "rtp.statemachine.handleMediaSessionConfigured.autoStart");
      uint64_t v15 = __p;
      uint64_t v16 = v22;
      v26[0] = (uint64_t)__p;
      v26[1] = (uint64_t)v22;
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        char v17 = v22;
      }
      else
      {
        char v17 = 0;
      }
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 1174405120;
      void v24[2] = ___ZN24MediaSessionStateMachine9configureEb_block_invoke;
      v24[3] = &__block_descriptor_tmp_46_0;
      v24[4] = this;
      void v24[5] = v15;
      uint64_t v25 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RTPManager::performBlock(v14, (uint64_t)v27, v26, (uint64_t)v24);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    return 1;
  }
  if (*((unsigned char *)this + 184))
  {
    if (*((unsigned char *)this + 300))
    {
      *((unsigned char *)this + 300) = 0;
      if (!ims::AccessNetwork::isWifi((MediaSessionStateMachine *)((char *)this + 192))) {
        MediaSessionStateMachine::reportAPSession(this, 1);
      }
    }
  }
  uint64_t v4 = *((void *)this + 21);
  if ((!v4
     || ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4) & 1) != 0
     || ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 19) + 208))(*((void *)this + 19), 2) & 1) == 0)
    && !*((unsigned char *)this + 138))
  {
    *((unsigned char *)this + 138) = 1;
    std::string::basic_string[abi:ne180100]<0>(v27, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v7 = ims::debug((uint64_t)v27, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Configuring session ", 20);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 184))(this);
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 96))(this);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v5 = ims::debug((uint64_t)v27, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Queuing configure [sessionId=", 29);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" isAudioReady=", 14);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = *((void *)this + 21);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 120))(v6);
  }
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  uint64_t v9 = *((void *)this + 19);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 64))(v9, a2);
  }
  std::string __p = 0;
  unint64_t v22 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &__p);
  uint64_t v10 = *((void *)this + 7);
  LoggableString::LoggableString((LoggableString *)v27, "rtp.statemachine.handleMediaSessionConfigured");
  char v11 = __p;
  uint64_t v12 = v22;
  v20[0] = (uint64_t)__p;
  v20[1] = (uint64_t)v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = v22;
  }
  else
  {
    uint64_t v13 = 0;
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1174405120;
  uint64_t v18[2] = ___ZN24MediaSessionStateMachine9configureEb_block_invoke_49;
  _OWORD v18[3] = &__block_descriptor_tmp_52_2;
  _OWORD v18[4] = this;
  void v18[5] = v11;
  int v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RTPManager::performBlock(v10, (uint64_t)v27, v20, (uint64_t)v18);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 0;
}

void sub_1C5602870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine9configureEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, BOOL))(*(void *)v5 + 16))(v5, &v12, *(unsigned char *)(v2 + 309) == 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5602A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine9configureEb_block_invoke_49(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 16))(v5, &v12, 0);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5602C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::configure(MediaSessionStateMachine *this, uint64_t a2)
{
  return MediaSessionStateMachine::configure((MediaSessionStateMachine *)((char *)this - 24), a2);
}

void MediaSessionStateMachine::setConfiguration(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(v35, "");
  uint64_t v6 = ims::debug((uint64_t)&v37, (uint64_t)v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v38 < 0) {
    operator delete((void *)v37);
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *a2;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_10:
  if (a1[301])
  {
    if (a1[302] && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 144))(a1) == 2 && !a1[309] && v9)
    {
      if (*(unsigned char *)(v9 + 584))
      {
        int v10 = *(unsigned __int16 *)(v9 + 182);
        a1[309] = v10 != 255;
        if (v10 != 255)
        {
          uint64_t v32 = v9;
          uint64_t v33 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *__return_ptr, unsigned char *, uint64_t *))(*(void *)a1 + 56))(v34, a1, &v32);
          ImsResult::~ImsResult((ImsResult *)v34);
          if (v33) {
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      else
      {
        a1[309] = 0;
      }
      v31[0] = v9;
      v31[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      MediaSessionStateMachine::autoStart((uint64_t)a1, v31, 0);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else if (a1[301] {
           && a1[302]
    }
           && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 144))(a1) == 2
           && !a1[308]
           && !MediaSessionStateMachine::startConditionsMet((MediaSessionStateMachine *)a1))
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      goto LABEL_73;
    }
  }
  if (a1[184] && v9)
  {
    int v11 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 144))(a1);
    if (v11 == 2)
    {
      if (*(unsigned char *)(v9 + 584))
      {
        uint64_t v12 = v9 + 152;
        goto LABEL_42;
      }
    }
    else if (v11 == 6 && *(unsigned char *)(v9 + 1856))
    {
      uint64_t v12 = v9 + 1496;
      goto LABEL_42;
    }
    if (*(unsigned char *)(v9 + 1328))
    {
      uint64_t v12 = v9 + 1032;
LABEL_42:
      uint64_t v13 = *(void *)(v12 + 8);
      uint64_t v14 = *(std::__shared_weak_count **)(v12 + 16);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v13)
      {
        uint64_t v15 = *((void *)a1 + 33);
        if (!v15)
        {
          int v17 = 1;
          if (!v14) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
        uint64_t v16 = *(void *)(v12 + 16);
        *(void *)&long long v37 = *(void *)(v12 + 8);
        *((void *)&v37 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        int v17 = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)v15 + 104))(v15, &v37, 0) ^ 1;
        if (*((void *)&v37 + 1))
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
          if (!v14) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
      }
      else
      {
        int v17 = 0;
      }
      if (!v14)
      {
LABEL_54:
        if (v17)
        {
          uint64_t v18 = *(void *)(v12 + 8);
          int v19 = *(std::__shared_weak_count **)(v12 + 16);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v18 + 32))(&v37);
          long long v20 = v37;
          long long v37 = 0uLL;
          uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 34);
          *(_OWORD *)(a1 + 264) = v20;
          if (v21)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            if (*((void *)&v37 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
            }
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          a1[300] = 1;
        }
        int v22 = *(unsigned __int16 *)(v12 + 26);
        if (*((unsigned __int16 *)a1 + 148) != v22)
        {
          *((_WORD *)a1 + 148) = v22;
          a1[300] = 1;
        }
        goto LABEL_65;
      }
LABEL_53:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      goto LABEL_54;
    }
  }
LABEL_65:
  uint64_t v23 = *((void *)a1 + 21);
  int v24 = (std::__shared_weak_count *)a2[1];
  uint64_t v29 = *a2;
  char v30 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionDriver::setRTCPInterval(v23, &v29);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v25 = *((void *)a1 + 21);
  uint64_t v26 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  char v28 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v25 + 56))(v25, &v27);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_73:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C56031AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionStateMachine::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
}

void MediaSessionStateMachine::transactionComplete(MediaSessionStateMachine *this, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)v18, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"transactionComplete", 19);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [isSuccess=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(void))(**((void **)this + 19) + 216))(*((void *)this + 19));
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  *((unsigned char *)this + 138) = 0;
  if (a2)
  {
    do
      uint64_t v5 = *((void *)this + 19);
    while (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(v5) & 1) != 0 && !*((unsigned char *)this + 138));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v6 = ims::debug((uint64_t)v18, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Clearing action queue due to error", 34);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v7 = *((void *)this + 19);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 200))(v7);
    }
    std::string __p = 0;
    uint64_t v16 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &__p);
    uint64_t v8 = *((void *)this + 7);
    LoggableString::LoggableString((LoggableString *)v18, "rtp.statemachine.handleMediaSessionMediaError");
    uint64_t v9 = __p;
    int v10 = v16;
    v14[0] = (uint64_t)__p;
    v14[1] = (uint64_t)v16;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      int v11 = v16;
    }
    else
    {
      int v11 = 0;
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZN24MediaSessionStateMachine19transactionCompleteEb_block_invoke;
    void v12[3] = &__block_descriptor_tmp_60_2;
    _OWORD v12[4] = this;
    void v12[5] = v9;
    uint64_t v13 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RTPManager::performBlock(v8, (uint64_t)v18, v14, (uint64_t)v12);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C5603618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine19transactionCompleteEb_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[6];
        uint64_t v12 = a1[5];
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 40))(v5, &v12, 9);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5603818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void MediaSessionStateMachine::handleMediaSessionInitialized(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v23, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)v23, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionInitialized", 29);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 216))(*(void *)(a1 + 152));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (*(unsigned char *)(a1 + 137) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v7 = ims::debug((uint64_t)v23, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session ", 8);
    *(unsigned char *)(v7 + 17) = 0;
    if (a3) {
      uint64_t v8 = " failed to initialize ";
    }
    else {
      uint64_t v8 = "initialized ";
    }
    if (a3) {
      uint64_t v9 = 22;
    }
    else {
      uint64_t v9 = 12;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(**(void **)a2 + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p);
    }
    if (v24 < 0)
    {
      operator delete(v23[0]);
      if (a3) {
        goto LABEL_16;
      }
    }
    else if (a3)
    {
LABEL_16:
      if (*(unsigned char *)(a1 + 301)
        && *(unsigned char *)(a1 + 302)
        && (int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1), !a3)
        && v10 == 2)
      {
        MediaSessionStateMachine::transactionComplete((MediaSessionStateMachine *)a1, 1);
      }
      else
      {
        std::string __p = 0;
        uint64_t v21 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &__p);
        uint64_t v12 = *(void *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)v23, "rtp.statemachine.handleMediaSessionInitialized");
        uint64_t v13 = __p;
        uint64_t v14 = v21;
        v19[0] = (uint64_t)__p;
        v19[1] = (uint64_t)v21;
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v15 = v21;
        }
        else
        {
          uint64_t v15 = 0;
        }
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 1174405120;
        v16[2] = ___ZN24MediaSessionStateMachine29handleMediaSessionInitializedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke;
        v16[3] = &__block_descriptor_tmp_70_1;
        v16[4] = a1;
        void v16[5] = v13;
        char v17 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v18 = a3;
        RTPManager::performBlock(v12, (uint64_t)v23, v19, (uint64_t)v16);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        MediaSessionStateMachine::transactionComplete((MediaSessionStateMachine *)a1, a3 == 0);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
      return;
    }
    *(unsigned char *)(a1 + 137) = 4;
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v11 = ims::warn((uint64_t)v23, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Received an initialized event while already initialized [sessonId=", 66);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(void))(**(void **)a2 + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
}

void sub_1C5603DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine29handleMediaSessionInitializedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void (****)(void, uint64_t *, void))(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v5)(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}