void ims::CallHandle::playDtmf(uint64_t a1, uint64_t a2)
{
  void v3[4];
  std::string v4;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned char *v9;
  uint64_t v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    v11 = *(std::string *)(a1 + 32);
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v8, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims10CallHandle8playDtmfERKNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
  v3[3] = &__block_descriptor_tmp_83_0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    v4 = v11;
  }
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v9, v9 - (unsigned char *)v8);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1C5430F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  v23 = *(void **)(v21 - 72);
  if (v23)
  {
    *(void *)(v21 - 64) = v23;
    operator delete(v23);
  }
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8playDtmfERKNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  uint64_t v2 = *(void *)(v8 + 200);
  ImsUuid::ImsUuid(v6, a1 + 32);
  __p = 0;
  v4 = 0;
  uint64_t v5 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 64) - *(void *)(a1 + 56));
  IMSCallManager::playDtmf(v2, (uint64_t)v6, (unsigned __int8 **)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  v6[0] = &unk_1F20B3708;
  if (v7 < 0) {
    operator delete((void *)v6[1]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5431058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 24);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 64) - *(void *)(a2 + 56));
}

void sub_1C5431134(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void ims::CallHandle::stopDtmf(ims::CallHandle *this)
{
  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v3 = *(std::string *)((char *)this + 32);
  }
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims10CallHandle8stopDtmfEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_86_1;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C5431294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8stopDtmfEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  IMSCallManager::stopDtmf(v2, (uint64_t)v3);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5431358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::Call::Call(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 78) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F20CD238;
  std::string::operator=((std::string *)(a1 + 32), a2);
  if (a3)
  {
    if (*(char *)(a3 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
    }
    else {
      std::string v7 = *(std::string *)(a3 + 24);
    }
    uint64_t v5 = (void **)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)uint64_t v5 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(void *)(a1 + 72) = *((void *)&v7.__r_.__value_.__l + 2);
  }
  return a1;
}

void sub_1C5431460(_Unwind_Exception *a1)
{
  ims::CallHandle::~CallHandle(v1);
  _Unwind_Resume(a1);
}

void ims::CallHandle::~CallHandle(void **this)
{
  *this = &unk_1F20CD2D8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  uint64_t vars8;

  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ims::Call::Call(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  *(void *)(a1 + 78) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F20CD238;
  std::string::operator=((std::string *)(a1 + 32), a2);
  uint64_t v5 = *a3;
  if (*a3)
  {
    if (*(char *)(v5 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
    }
    else {
      std::string v8 = *(std::string *)(v5 + 24);
    }
    v6 = (void **)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)v6 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(void *)(a1 + 72) = *((void *)&v8.__r_.__value_.__l + 2);
  }
  return a1;
}

void sub_1C54315A4(_Unwind_Exception *a1)
{
  ims::CallHandle::~CallHandle(v1);
  _Unwind_Resume(a1);
}

void *ims::Call::Call(uint64_t a1, long long *a2, long long *a3)
{
  result = (void *)ims::CallHandle::CallHandle(a1, a2, a3);
  void *result = &unk_1F20CD238;
  return result;
}

{
  void *result;

  result = (void *)ims::CallHandle::CallHandle(a1, a2, a3);
  void *result = &unk_1F20CD238;
  return result;
}

uint64_t ims::CallHandle::CallHandle(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20CD2D8;
  *(_WORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (std::string *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 72) = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 0;
  return a1;
}

void sub_1C54316A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  char v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void ims::Call::~Call(void **this)
{
  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C878E320);
}

void ims::Call::dial()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  char v3 = v2;
  long long v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  memset(&v44, 0, sizeof(v44));
  if (*(char *)(v1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v1, *(void *)(v1 + 8));
  }
  else {
    std::string v44 = *(std::string *)v1;
  }
  bzero(v17, 0x1400uLL);
  BYTE1(v17[0]) = -1;
  memset(v21, 0, sizeof(v21));
  v17[1] = &unk_1F20B3708;
  long long __p = 0uLL;
  uint64_t v19 = 0;
  __int16 v20 = 0;
  char v23 = 1;
  char v24 = 1;
  __int16 v26 = 257;
  __int16 v28 = 256;
  uint64_t v25 = 0x200000001;
  uint64_t v27 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  char v30 = 0;
  int v22 = 90;
  int v29 = 0;
  char v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  *(void *)v37 = 0x40A7700000000000;
  memset(&v37[8], 0, 32);
  memset(v38, 0, sizeof(v38));
  memset(v39, 0, sizeof(v39));
  char v40 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)&v42);
  memset(&v43, 0, sizeof(v43));
  std::string::operator=(&v39[1], (const std::string *)(v7 + 8));
  BYTE1(v17[0]) = *(unsigned char *)v7;
  std::string::operator=((std::string *)v21, v5);
  LOBYTE(v20) = *(unsigned char *)(v8 + 25);
  HIBYTE(v20) = *(unsigned char *)(v8 + 24);
  BYTE1(v29) = *(_DWORD *)(v8 + 80) == 2;
  HIWORD(v29) = *(_WORD *)(v8 + 84);
  char v34 = *(unsigned char *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 80);
  long long v35 = *(_OWORD *)(v7 + 64);
  long long v36 = v9;
  *(_OWORD *)v37 = *(_OWORD *)(v7 + 96);
  LOBYTE(v29) = 0;
  std::string::operator=((std::string *)&v37[16], (const std::string *)(v7 + 112));
  std::string::operator=(v38, (const std::string *)(v7 + 136));
  std::string::operator=(&v38[1], (const std::string *)(v7 + 160));
  std::string::operator=(v39, (const std::string *)(v7 + 184));
  char v40 = v3;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v41, (const std::string *)(v7 + 216));
  if (*(char *)(v8 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v8 + 32), *(void *)(v8 + 40));
  }
  else {
    std::string v13 = *(std::string *)(v8 + 32);
  }
  ImsUuid::ImsUuid(&v14, (uint64_t)&v13);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  v14 = &unk_1F20B3708;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  LOBYTE(v17[0]) = 0;
  std::string::operator=(&v43, (const std::string *)(v8 + 56));
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN3ims4Call4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigES9_b_block_invoke;
  v10[3] = &__block_descriptor_tmp_87_0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v44;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v12, (const IMSCallOptions *)v17);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
  IMSCallOptions::~IMSCallOptions(v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  IMSCallOptions::~IMSCallOptions(v17);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_1C5431B58(_Unwind_Exception *a1)
{
  IMSCallOptions::~IMSCallOptions((void **)&STACK[0x1480]);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  _Unwind_Resume(a1);
}

void ___ZN3ims4Call4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigES9_b_block_invoke()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v3);
  uint64_t v1 = *(void *)(v3 + 200);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v2, (const IMSCallOptions *)(v0 + 56));
  IMSCallManager::initializeNonEmergencyCall(v1, (std::string *)(v0 + 32), (uint64_t)v2);
  IMSCallOptions::~IMSCallOptions(v2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5431C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  IMSCallOptions::~IMSCallOptions(&a9);
  std::string v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
}

void sub_1C5431D04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions(uint64_t a1)
{
  IMSCallOptions::~IMSCallOptions((void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void ims::EmergencyCall::dial()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  bzero(v57, 0x1400uLL);
  BYTE1(v57[0]) = -1;
  long long v61 = 0u;
  long long v62 = 0u;
  v57[1] = &unk_1F20B3708;
  long long __p = 0uLL;
  uint64_t v59 = 0;
  __int16 v60 = 0;
  int v63 = 90;
  char v64 = 1;
  char v65 = 1;
  uint64_t v66 = 0x200000001;
  __int16 v67 = 257;
  uint64_t v68 = 0;
  __int16 v69 = 256;
  long long v76 = 0u;
  long long v77 = 0u;
  char v71 = 0;
  int v70 = 0;
  char v75 = 0;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  uint64_t v78 = 0x40A7700000000000;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  memset(v85, 0, sizeof(v85));
  char v86 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)v88);
  memset(&v90, 0, sizeof(v90));
  memset(&__sz, 0, sizeof(__sz));
  if (*(char *)(v8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else {
    std::string __sz = *(std::string *)v8;
  }
  memset(&v55, 0, sizeof(v55));
  if (*(char *)(v6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else {
    std::string v55 = *(std::string *)v6;
  }
  bzero(&v48, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v50);
  memset(v52, 0, sizeof(v52));
  memset(v51, 0, sizeof(v51));
  __int16 v53 = 257;
  LOWORD(v54[1]) = 256;
  BYTE2(v54[1]) = 1;
  HIDWORD(v54[0]) = 0;
  ims::NetworkConfig::operator=((uint64_t)v50, v2 + 24);
  std::string::operator=(v51, (const std::string *)(v2 + 616));
  std::string::operator=(&v51[1], (const std::string *)(v2 + 640));
  std::string::operator=(v52, (const std::string *)(v2 + 664));
  std::string::operator=(&v52[1], (const std::string *)(v2 + 688));
  __int16 v53 = *(_WORD *)(v2 + 712);
  HIDWORD(v54[0]) = *(_DWORD *)(v2 + 724);
  LOBYTE(v54[1]) = *(unsigned char *)(v2 + 728);
  *(_WORD *)((char *)&v54[1] + 1) = *(_WORD *)(v2 + 729);
  LOBYTE(v57[0]) = 1;
  BYTE1(v57[0]) = *(unsigned char *)v4;
  std::string::operator=((std::string *)((char *)v85 + 8), (const std::string *)(v4 + 8));
  char v75 = 0;
  LOBYTE(v60) = *(unsigned char *)(v9 + 25);
  HIBYTE(v60) = *(unsigned char *)(v9 + 24);
  LOBYTE(v70) = 0;
  BYTE1(v70) = *(_DWORD *)(v9 + 80) == 2;
  HIWORD(v70) = *(_WORD *)(v9 + 84);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v87, (const std::string *)(v4 + 216));
  SipUri::fromString((uint64_t)v89, (std::string *)(v4 + 40));
  unsigned int v10 = *(_DWORD *)(v4 + 208) - 1;
  if (v10 > 6) {
    std::string v11 = (const std::string::value_type *)&str_12_4;
  }
  else {
    std::string v11 = off_1E6510558[v10];
  }
  std::string::__assign_external(v88, v11);
  v89[432] = *(unsigned char *)(v4 + 248);
  std::string::operator=(&v90, (const std::string *)(v9 + 56));
  if (*(char *)(v9 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v9 + 32), *(void *)(v9 + 40));
  }
  else {
    std::string v44 = *(std::string *)(v9 + 32);
  }
  ImsUuid::ImsUuid(&v45, (uint64_t)&v44);
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)__p);
  }
  long long __p = cf;
  uint64_t v59 = v47;
  HIBYTE(v47) = 0;
  LOBYTE(cf) = 0;
  v45 = &unk_1F20B3708;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  v12 = *(const void **)(v2 + 8);
  if (v12)
  {
    v45 = &unk_1F20E38B0;
    *(void *)&long long cf = v12;
    CFRetain(v12);
    v45 = &unk_1F20E3A10;
    std::string v13 = *(const void **)(v2 + 16);
    if (v13)
    {
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E38B0;
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      CFRetain(v13);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E3A10;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 1174405120;
      v33[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke;
      v33[3] = &__block_descriptor_tmp_88_1;
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v34, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      }
      else {
        std::string v34 = __sz;
      }
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v35, (const IMSCallOptions *)v57);
      long long v36 = v48;
      uint64_t v37 = v49;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v38, (const ims::NetworkConfig *)v50);
      ims::DeviceConfig::DeviceConfig(v39, (long long *)v51);
      *(_DWORD *)((char *)v40 + 7) = *(_DWORD *)((char *)v54 + 7);
      v40[0] = v54[0];
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v41, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else {
        std::string v41 = v55;
      }
      v42[0] = &unk_1F20E38B0;
      v42[1] = cf;
      if ((void)cf) {
        CFRetain((CFTypeRef)cf);
      }
      v42[0] = &unk_1F20E3A10;
      v43[0] = &unk_1F20E38B0;
      v43[1] = v44.__r_.__value_.__l.__size_;
      if (v44.__r_.__value_.__l.__size_) {
        CFRetain((CFTypeRef)v44.__r_.__value_.__l.__size_);
      }
      v43[0] = &unk_1F20E3A10;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v33);
      ims::CFType::~CFType((ims::CFType *)v43);
      ims::CFType::~CFType((ims::CFType *)v42);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      ims::StackConfig::~StackConfig((void **)&v36);
      IMSCallOptions::~IMSCallOptions(v35);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      ims::CFType::~CFType((ims::CFType *)&v44);
    }
    else
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 1174405120;
      v23[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_89;
      v23[3] = &__block_descriptor_tmp_90_1;
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v24, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      }
      else {
        std::string v24 = __sz;
      }
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v25, (const IMSCallOptions *)v57);
      long long v26 = v48;
      uint64_t v27 = v49;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v28, (const ims::NetworkConfig *)v50);
      ims::DeviceConfig::DeviceConfig(v29, (long long *)v51);
      *(_DWORD *)((char *)v30 + 7) = *(_DWORD *)((char *)v54 + 7);
      v30[0] = v54[0];
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = v55;
      }
      v32[0] = &unk_1F20E38B0;
      v32[1] = cf;
      if ((void)cf) {
        CFRetain((CFTypeRef)cf);
      }
      v32[0] = &unk_1F20E3A10;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v23);
      ims::CFType::~CFType((ims::CFType *)v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      ims::StackConfig::~StackConfig((void **)&v26);
      IMSCallOptions::~IMSCallOptions(v25);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
    ims::CFType::~CFType((ims::CFType *)&v45);
  }
  else
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_91;
    v14[3] = &__block_descriptor_tmp_92;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v15, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v15 = __sz;
    }
    IMSCallOptions::IMSCallOptions((IMSCallOptions *)v16, (const IMSCallOptions *)v57);
    long long v17 = v48;
    uint64_t v18 = v49;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v19, (const ims::NetworkConfig *)v50);
    ims::DeviceConfig::DeviceConfig(v20, (long long *)v51);
    *(_DWORD *)((char *)v21 + 7) = *(_DWORD *)((char *)v54 + 7);
    v21[0] = v54[0];
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v22, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    }
    else {
      std::string v22 = v55;
    }
    IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    ims::StackConfig::~StackConfig((void **)&v17);
    IMSCallOptions::~IMSCallOptions(v16);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  ims::StackConfig::~StackConfig((void **)&v48);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  IMSCallOptions::~IMSCallOptions(v57);
}

void sub_1C54327F8(_Unwind_Exception *a1)
{
  ims::StackConfig::~StackConfig(v2);
  IMSCallOptions::~IMSCallOptions(v1);
  if (*(char *)(v3 + 55) < 0) {
    operator delete((void *)STACK[0x1750]);
  }
  ims::CFType::~CFType((ims::CFType *)&STACK[0x45E0]);
  ims::StackConfig::~StackConfig((void **)&STACK[0x4600]);
  if (*(char *)(v4 + 823) < 0) {
    operator delete((void *)STACK[0x48E0]);
  }
  if (*(char *)(v4 + 855) < 0) {
    operator delete((void *)STACK[0x4900]);
  }
  IMSCallOptions::~IMSCallOptions((void **)&STACK[0x4920]);
  _Unwind_Resume(a1);
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v2);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v1, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5432B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  IMSCallOptions::~IMSCallOptions(&a9);
  std::string v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5936c24_ZTSN3ims12CFDictionaryE5952c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  long long v5 = *(_OWORD *)(a2 + 5176);
  *(void *)(a1 + 5192) = *(void *)(a2 + 5192);
  *(_OWORD *)(a1 + 5176) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5200), (const ims::NetworkConfig *)(a2 + 5200));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5792), (long long *)(a2 + 5792));
  uint64_t v6 = *(void *)(a2 + 5896);
  *(_DWORD *)(a1 + 5903) = *(_DWORD *)(a2 + 5903);
  *(void *)(a1 + 5896) = v6;
  if (*(char *)(a2 + 5935) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 5912), *(const std::string::value_type **)(a2 + 5912), *(void *)(a2 + 5920));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 5912);
    *(void *)(a1 + 5928) = *(void *)(a2 + 5928);
    *(_OWORD *)(a1 + 5912) = v7;
  }
  *(void *)(a1 + 5936) = &unk_1F20E38B0;
  uint64_t v8 = *(const void **)(a2 + 5944);
  *(void *)(a1 + 5944) = v8;
  if (v8) {
    CFRetain(v8);
  }
  *(void *)(a1 + 5936) = &unk_1F20E3A10;
  *(void *)(a1 + 5952) = &unk_1F20E38B0;
  CFTypeRef result = *(CFTypeRef *)(a2 + 5960);
  *(void *)(a1 + 5960) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 5952) = &unk_1F20E3A10;
  return result;
}

void sub_1C5432D00(_Unwind_Exception *a1)
{
  ims::StackConfig::~StackConfig(v4);
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5936c24_ZTSN3ims12CFDictionaryE5952c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v3 = (void **)(a1 + 5176);
  long long v4 = (ims::CFType *)(a1 + 5936);
  ims::CFType::~CFType((ims::CFType *)(a1 + 5952));
  ims::CFType::~CFType(v4);
  if (*(char *)(a1 + 5935) < 0) {
    operator delete(*(void **)(a1 + 5912));
  }
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
  {
    long long v5 = *(void **)(a1 + 32);
    operator delete(v5);
  }
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_89()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v2);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v1, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5432ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  IMSCallOptions::~IMSCallOptions(&a9);
  std::string v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5936c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  long long v5 = *(_OWORD *)(a2 + 5176);
  *(void *)(a1 + 5192) = *(void *)(a2 + 5192);
  *(_OWORD *)(a1 + 5176) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5200), (const ims::NetworkConfig *)(a2 + 5200));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5792), (long long *)(a2 + 5792));
  uint64_t v6 = *(void *)(a2 + 5896);
  *(_DWORD *)(a1 + 5903) = *(_DWORD *)(a2 + 5903);
  *(void *)(a1 + 5896) = v6;
  if (*(char *)(a2 + 5935) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 5912), *(const std::string::value_type **)(a2 + 5912), *(void *)(a2 + 5920));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 5912);
    *(void *)(a1 + 5928) = *(void *)(a2 + 5928);
    *(_OWORD *)(a1 + 5912) = v7;
  }
  *(void *)(a1 + 5936) = &unk_1F20E38B0;
  CFTypeRef result = *(CFTypeRef *)(a2 + 5944);
  *(void *)(a1 + 5944) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(void *)(a1 + 5936) = &unk_1F20E3A10;
  return result;
}

void sub_1C5433054(_Unwind_Exception *a1)
{
  ims::StackConfig::~StackConfig(v4);
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5936c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v3 = (void **)(a1 + 5176);
  ims::CFType::~CFType((ims::CFType *)(a1 + 5936));
  if (*(char *)(a1 + 5935) < 0) {
    operator delete(*(void **)(a1 + 5912));
  }
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_91()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v2);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v1, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5433200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  IMSCallOptions::~IMSCallOptions(&a9);
  std::string v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  long long v5 = *(_OWORD *)(a2 + 5176);
  *(void *)(a1 + 5192) = *(void *)(a2 + 5192);
  *(_OWORD *)(a1 + 5176) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5200), (const ims::NetworkConfig *)(a2 + 5200));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5792), (long long *)(a2 + 5792));
  uint64_t v6 = *(void *)(a2 + 5896);
  *(_DWORD *)(a1 + 5903) = *(_DWORD *)(a2 + 5903);
  *(void *)(a1 + 5896) = v6;
  long long v7 = (std::string *)(a1 + 5912);
  if (*(char *)(a2 + 5935) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 5912), *(void *)(a2 + 5920));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 5912);
    *(void *)(a1 + 5928) = *(void *)(a2 + 5928);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C543332C(_Unwind_Exception *a1)
{
  ims::StackConfig::~StackConfig(v4);
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5176c23_ZTSN3ims11StackConfigE5912c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v3 = (void **)(a1 + 5176);
  if (*(char *)(a1 + 5935) < 0) {
    operator delete(*(void **)(a1 + 5912));
  }
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
  {
    long long v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

void ims::Call::pull()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  long long v4 = v3;
  uint64_t v5 = v0;
  bzero(v13, 0x1400uLL);
  BYTE1(v13[0]) = -1;
  long long v17 = 0u;
  long long v18 = 0u;
  v13[1] = &unk_1F20B3708;
  long long __p = 0uLL;
  uint64_t v15 = 0;
  __int16 v16 = 0;
  char v20 = 1;
  char v21 = 1;
  __int16 v23 = 257;
  __int16 v25 = 256;
  uint64_t v22 = 0x200000001;
  uint64_t v24 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  char v27 = 0;
  int v19 = 90;
  int v26 = 0;
  char v30 = 0;
  memset(v29, 0, sizeof(v29));
  long long v28 = 0u;
  *(void *)long long v33 = 0x40A7700000000000;
  *(_OWORD *)&v33[8] = 0u;
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  memset(v36, 0, sizeof(v36));
  char v37 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)&v38);
  memset(&v39, 0, sizeof(v39));
  std::string::operator=(&v36[1], (const std::string *)(v2 + 8));
  BYTE1(v13[0]) = *(unsigned char *)v2;
  LOBYTE(v16) = *(unsigned char *)(v5 + 25);
  HIBYTE(v16) = *(unsigned char *)(v5 + 24);
  BYTE1(v26) = *(_DWORD *)(v5 + 80) == 2;
  HIWORD(v26) = *(_WORD *)(v5 + 84);
  char v30 = *(unsigned char *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 80);
  long long v31 = *(_OWORD *)(v2 + 64);
  long long v32 = v6;
  *(_OWORD *)long long v33 = *(_OWORD *)(v2 + 96);
  LOBYTE(v26) = 0;
  std::string::operator=((std::string *)&v33[16], (const std::string *)(v2 + 112));
  std::string::operator=(v35, (const std::string *)(v2 + 136));
  std::string::operator=(&v35[1], (const std::string *)(v2 + 160));
  std::string::operator=(v36, (const std::string *)(v2 + 184));
  std::string::operator=((std::string *)((char *)v29 + 8), v4);
  if (*(char *)(v5 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(v5 + 32), *(void *)(v5 + 40));
  }
  else {
    std::string v9 = *(std::string *)(v5 + 32);
  }
  ImsUuid::ImsUuid(&v10, (uint64_t)&v9);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v11;
  uint64_t v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  unsigned int v10 = &unk_1F20B3708;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::string::operator=(&v39, (const std::string *)(v5 + 56));
  LOBYTE(v13[0]) = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN3ims4Call4pullERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigE_block_invoke;
  v7[3] = &__block_descriptor_tmp_93;
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v8, (const IMSCallOptions *)v13);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v7);
  IMSCallOptions::~IMSCallOptions(v8);
  IMSCallOptions::~IMSCallOptions(v13);
}

void sub_1C5433750(_Unwind_Exception *a1)
{
}

void ___ZN3ims4Call4pullERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigE_block_invoke()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v3);
  uint64_t v1 = *(uint64_t **)(v3 + 200);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v2, (const IMSCallOptions *)(v0 + 32));
  IMSCallManager::initializePullCall(v1, (uint64_t)v2);
  IMSCallOptions::~IMSCallOptions(v2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5433844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  IMSCallOptions::~IMSCallOptions(&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c20_ZTS14IMSCallOptions(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32c20_ZTS14IMSCallOptions(uint64_t a1)
{
}

uint64_t ims::CallHandle::setCallIdBlocking(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 24) = a3;
  *(unsigned char *)(this + 25) = a2;
  return this;
}

void ims::Call::ring(ims::Call *this)
{
  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v3 = *(std::string *)((char *)this + 32);
  }
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call4ringEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_96_1;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C5433978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call4ringEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  IMSCallManager::ringCall(v2, (uint64_t)v3);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5433A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::Call::refresh(ims::Call *this, char a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 32);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims4Call7refreshEb_block_invoke;
  void v3[3] = &__block_descriptor_tmp_99;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5433B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call7refreshEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)(a1 + 32));
  IMSCallManager::refreshCall(v2, (uint64_t)v3, a1[56]);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5433C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::Call::hold(ims::Call *this)
{
  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v3 = *(std::string *)((char *)this + 32);
  }
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call4holdEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_102;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C5433D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call4holdEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  IMSCallManager::deactivateCall(v2, (uint64_t)v3);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5433E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::Call::resume(ims::Call *this)
{
  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v3 = *(std::string *)((char *)this + 32);
  }
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call6resumeEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_105_0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1C5433F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 25) < 0) {
    operator delete(*(void **)(v19 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call6resumeEv_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  IMSCallManager::activateCall(v2, (uint64_t)v3);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5434040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::CallHandle::setTextMediaSessionMode(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 80) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v6 = *(std::string *)(a1 + 32);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle23setTextMediaSessionModeENS_20TextMediaSessionModeE_block_invoke;
  void v3[3] = &__block_descriptor_tmp_108;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  int v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5434184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle23setTextMediaSessionModeENS_20TextMediaSessionModeE_block_invoke(int *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)(a1 + 8));
  IMSCallManager::setTextMediaSessionMode(v2, (uint64_t)v3, a1[14]);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C543424C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *ims::EmergencyCall::EmergencyCall(uint64_t a1, long long *a2)
{
  CFTypeRef result = (void *)ims::CallHandle::CallHandle(a1, a2, (long long *)&IMSClientManager::kEmergencyStack);
  void *result = &unk_1F20CD530;
  return result;
}

{
  void *result;

  CFTypeRef result = (void *)ims::CallHandle::CallHandle(a1, a2, (long long *)&IMSClientManager::kEmergencyStack);
  void *result = &unk_1F20CD530;
  return result;
}

void ims::EmergencyCall::~EmergencyCall(void **this)
{
  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C878E320);
}

void ims::CallHandle::hangup(uint64_t a1, _DWORD *a2)
{
  memset(&v15, 0, sizeof(v15));
  std::string::basic_string[abi:ne180100]<0>(&v15, "UserTriggered");
  switch(*a2)
  {
    case 1:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 12;
        uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 12);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[12];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 12;
        uint64_t v5 = &v15;
      }
      qmemcpy(v5, "DoNotDisturb", 12);
      goto LABEL_26;
    case 2:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 19;
        std::string v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 19);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[19];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 19;
        std::string v6 = &v15;
      }
      qmemcpy(v6, "CallWaitingDisabled", 19);
      goto LABEL_26;
    case 3:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 5;
        long long v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 5);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[5];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 5;
        long long v7 = &v15;
      }
      qmemcpy(v7, "SRVCC", 5);
      goto LABEL_26;
    case 4:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 16;
        long long v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 16);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[16];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 16;
        long long v8 = &v15;
      }
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)"DeferToSecondary";
      goto LABEL_26;
    case 5:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 14;
        uint64_t v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 14);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[14];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 14;
        uint64_t v9 = &v15;
      }
      qmemcpy(v9, "AvoidVoicemail", 14);
      goto LABEL_26;
    case 6:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 7;
        unsigned int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
        char v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        char v4 = &v15.__r_.__value_.__s.__data_[7];
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 7;
        unsigned int v10 = &v15;
      }
      qmemcpy(v10, "Blocked", 7);
LABEL_26:
      std::string::value_type *v4 = 0;
      break;
    default:
      break;
  }
  memset(&v14, 0, sizeof(v14));
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v14 = *(std::string *)(a1 + 32);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZNK3ims10CallHandle6hangupERKNS_13CallEndReasonE_block_invoke;
  v11[3] = &__block_descriptor_tmp_111_0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v12, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string v12 = v14;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v15;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C5434694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle6hangupERKNS_13CallEndReasonE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v2 + 40))(v2, v3, (uint64_t)a1 + 56);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C54347C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::CallHandle::answer(uint64_t a1, uint64_t a2)
{
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v7 = *(std::string *)(a1 + 32);
  }
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims10CallHandle6answerERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  void v3[3] = &__block_descriptor_tmp_114_0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = v7;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C5434980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 25) < 0) {
    operator delete(*(void **)(v30 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle6answerERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)a1 + 32);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v2 + 32))(v2, v3, (uint64_t)a1 + 56);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5434A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::CallHandle::setRelayCall(ims::CallHandle *this, char a2)
{
  *((unsigned char *)this + 84) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 32);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle12setRelayCallEb_block_invoke;
  void v3[3] = &__block_descriptor_tmp_117;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5434BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle12setRelayCallEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)(a1 + 32));
  IMSCallManager::setRelayMode(v2, (uint64_t)v3, a1[56]);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5434CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ims::CallHandle::setScreeningCall(ims::CallHandle *this, char a2)
{
  *((unsigned char *)this + 85) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 55) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 32);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle16setScreeningCallEb_block_invoke;
  void v3[3] = &__block_descriptor_tmp_120;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  char v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5434DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle16setScreeningCallEb_block_invoke(unsigned __int8 *a1)
{
  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  uint64_t v2 = *(void *)(v5 + 200);
  ImsUuid::ImsUuid(v3, (uint64_t)(a1 + 32));
  IMSCallManager::setScreeningMode(v2, (uint64_t)v3, a1[56]);
  v3[0] = &unk_1F20B3708;
  if (v4 < 0) {
    operator delete((void *)v3[1]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5434EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::CreateNewClient(ims *this, dispatch_queue_s *a2)
{
  ImsUuid::generate((ImsUuid *)&v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = __p;
  }
  uint64_t Client = IMSClientManager::createClient((void **)&v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  char v4 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return Client;
}

void sub_1C5434FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::CreateImsClient(void *a1@<X8>)
{
  ImsUuid::generate((ImsUuid *)&v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = __p;
  }
  IMSClientManager::createImsClient((void **)&v4.__r_.__value_.__l.__data_, a1);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = &unk_1F20B3708;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54350D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::CreateImsEmergencyClient(NSObject **a1@<X0>, void *a2@<X8>)
{
}

void ims::setBBServerConnection(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSClientManager::setBBServerConnection(v2);
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1C5435198(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ims::addCallEndInfo(xpc_object_t *a1)
{
  xpc_object_t v1 = *a1;
  uint64_t v2 = v1;
  if (v1)
  {
    xpc_retain(v1);
  }
  else
  {
    xpc_object_t v1 = xpc_null_create();
    uint64_t v2 = v1;
  }
  IMSClientManager::addCallEndInfo(&v2);
  xpc_release(v1);
}

void sub_1C543520C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ims::StackEventDelegateWrapper::~StackEventDelegateWrapper(ims::StackEventDelegateWrapper *this)
{
}

void std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::CallEventDelegateWrapper::~CallEventDelegateWrapper(ims::CallEventDelegateWrapper *this)
{
}

void std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::CallManagerEventDelegateWrapper::~CallManagerEventDelegateWrapper(void **this)
{
  *this = &unk_1F20CC218;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20CC218;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t ims::CallManagerEventDelegateWrapper::handleIncomingEvent(ims::CallManagerEventDelegateWrapper *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
  if (a2) {
    return (*(uint64_t (**)(ims::CallHandle *))(*(void *)a2 + 8))(a2);
  }
  return result;
}

void std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::MessageEventDelegateWrapper::~MessageEventDelegateWrapper(ims::MessageEventDelegateWrapper *this)
{
}

void std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::XcapEventDelegateWrapper::~XcapEventDelegateWrapper(ims::XcapEventDelegateWrapper *this)
{
}

void std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

ims::NetworkConfig *ims::NetworkConfig::NetworkConfig(ims::NetworkConfig *this, const ims::NetworkConfig *a2)
{
  std::string v4 = (std::string *)ims::NetworkServices::NetworkServices(this, a2);
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v4 + 13, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 312);
    v4[13].__r_.__value_.__r.__words[2] = *((void *)a2 + 41);
    *(_OWORD *)&v4[13].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 21);
    *((void *)this + 44) = *((void *)a2 + 44);
    *((_OWORD *)this + 21) = v6;
  }
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 15, *((const std::string::value_type **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 360);
    *((void *)this + 47) = *((void *)a2 + 47);
    *(_OWORD *)((char *)this + 360) = v7;
  }
  if (*((char *)a2 + 407) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 16, *((const std::string::value_type **)a2 + 48), *((void *)a2 + 49));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 24);
    *((void *)this + 50) = *((void *)a2 + 50);
    *((_OWORD *)this + 24) = v8;
  }
  if (*((char *)a2 + 431) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 17, *((const std::string::value_type **)a2 + 51), *((void *)a2 + 52));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 408);
    *((void *)this + 53) = *((void *)a2 + 53);
    *(_OWORD *)((char *)this + 408) = v9;
  }
  if (*((char *)a2 + 455) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 18, *((const std::string::value_type **)a2 + 54), *((void *)a2 + 55));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 27);
    *((void *)this + 56) = *((void *)a2 + 56);
    *((_OWORD *)this + 27) = v10;
  }
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 19, *((long long **)a2 + 57), *((long long **)a2 + 58), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 58) - *((void *)a2 + 57)) >> 3));
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 20, *((long long **)a2 + 60), *((long long **)a2 + 61), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 3));
  if (*((char *)a2 + 527) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 21, *((const std::string::value_type **)a2 + 63), *((void *)a2 + 64));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 504);
    *((void *)this + 65) = *((void *)a2 + 65);
    *(_OWORD *)((char *)this + 504) = v11;
  }
  int v12 = *((_DWORD *)a2 + 132);
  *(_DWORD *)((char *)this + 531) = *(_DWORD *)((char *)a2 + 531);
  *((_DWORD *)this + 132) = v12;
  if (*((char *)a2 + 559) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 536), *((const std::string::value_type **)a2 + 67), *((void *)a2 + 68));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 536);
    *((void *)this + 69) = *((void *)a2 + 69);
    *(_OWORD *)((char *)this + 536) = v13;
  }
  std::string v14 = (std::string *)((char *)this + 560);
  if (*((char *)a2 + 583) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 70), *((void *)a2 + 71));
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 35);
    *((void *)this + 72) = *((void *)a2 + 72);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *((_WORD *)this + 292) = *((_WORD *)a2 + 292);
  return this;
}

void sub_1C5435980(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 + 559) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v4 + 527) < 0) {
    operator delete(*v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 455) < 0) {
    operator delete(*v10);
  }
  if (*(char *)(v4 + 431) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v4 + 407) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v4 + 383) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v4 + 359) < 0) {
    operator delete(*a3);
  }
  if (*(char *)(v4 + 335) < 0) {
    operator delete(*a4);
  }
  ims::NetworkServices::~NetworkServices((void **)v4);
  _Unwind_Resume(a1);
}

std::string *ims::DeviceConfig::DeviceConfig(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  return this;
}

void sub_1C5435B70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5435C1C(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallOptions::IMSCallOptions(IMSCallOptions *this, const IMSCallOptions *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  *((void *)this + 1) = &unk_1F20B3708;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 1);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((_OWORD *)this + 1) = v4;
  }
  BambiCallOptions::BambiCallOptions((IMSCallOptions *)((char *)this + 40), (const IMSCallOptions *)((char *)a2 + 40));
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((std::string *)((char *)this + 392), (const IMSCallOptions *)((char *)a2 + 392));
  long long v5 = (std::string *)((char *)this + 5096);
  if (*((char *)a2 + 5119) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 637), *((void *)a2 + 638));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 5096);
    *((void *)this + 639) = *((void *)a2 + 639);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5435D24(_Unwind_Exception *a1)
{
  BambiEmergencyCallOptions::~BambiEmergencyCallOptions(v5);
  BambiCallOptions::~BambiCallOptions(v4);
  *(void *)(v1 + 8) = v3;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void IMSCallOptions::~IMSCallOptions(void **this)
{
  uint64_t v2 = (char *)this + 5087;
  if (*((char *)this + 5119) < 0) {
    operator delete(this[637]);
  }
  if (*v2 < 0) {
    operator delete(this[633]);
  }
  SipUri::~SipUri((SipUri *)(this + 582));
  SipStackConfig::~SipStackConfig(this + 268);
  SipRegistrationConfig::~SipRegistrationConfig(this + 59);
  if (*((char *)this + 463) < 0) {
    operator delete(this[55]);
  }
  if (*((char *)this + 439) < 0) {
    operator delete(this[52]);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  BambiCallOptions::~BambiCallOptions(this + 5);
  this[1] = &unk_1F20B3708;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

ImsOutStream *SipSecurityMechanism::log(SipSecurityMechanism *this, ImsOutStream *a2)
{
  return a2;
}

std::string *SipSecurityMechanism::loggableName@<X0>(SipSecurityMechanism *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

uint64_t tlv::parseV<nas::tlv::SsacInfoVoice>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  long long v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  unsigned int v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)2);
  int v6 = *(unsigned __int16 *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 3);
  return (v6 << 16) | v5;
}

void sub_1C5435F24(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5435F10);
}

uint64_t nas::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  *(unsigned char *)a3 = *(unsigned char *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 3);
  return a1 + 4;
}

unint64_t tlv::parseV<nas::tlv::AcbInfoSignaling>(uint64_t *a1, int a2)
{
  unsigned __int16 v4 = 0;
  unsigned int v3 = 0;
  *a1 = nas::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v3);
  return v3 | ((unint64_t)v4 << 32);
}

void sub_1C5435FFC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5435FE0);
}

unint64_t tlv::parseV<nas::tlv::AcbInfoData>(uint64_t *a1, int a2)
{
  unsigned __int16 v4 = 0;
  unsigned int v3 = 0;
  *a1 = nas::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v3);
  return v3 | ((unint64_t)v4 << 32);
}

void sub_1C543605C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5436040);
}

BOOL tlv::parseV<nas::tlv::AcbInfoSkipVoice>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C54360B0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54360A4);
}

BOOL tlv::parseV<nas::tlv::AcbInfoSkipSms>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C5436108(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54360FCLL);
}

uint64_t tlv::parseV<nas::tlv::SubInfoVSID>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5436158(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C543614CLL);
}

uint64_t tlv::parseV<nas::tlv::CallType>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  uint64_t result = *(void *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

void sub_1C54361A8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C543619CLL);
}

uint64_t tlv::parseV<nas::tlv::SystemMode>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C54361F8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54361ECLL);
}

uint64_t tlv::parseV<nas::tlv::VoiceSystemId>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5436248(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C543623CLL);
}

uint64_t tlv::parseV<nas::tlv::Response>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5436298(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C543628CLL);
}

uint64_t tlv::parseV<nas::tlv::BarringTime>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C54362E8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54362DCLL);
}

BOOL tlv::parseV<nas::tlv::NwCongestion>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  BOOL result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C5436340(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5436334);
}

uint64_t tlv::parseV<nas::tlv::TimerValueRemaining>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5436390(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5436384);
}

uint64_t tlv::parseV<nas::tlv::RemainingTimerValue>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C54363E0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54363D4);
}

uint64_t tlv::parseV<nas::tlv::Status>(tlv **a1, int a2)
{
  unsigned int v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5436430(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5436424);
}

uint64_t SipRetryAfterHeader::SipRetryAfterHeader(uint64_t a1, int a2, const std::string *a3)
{
  uint64_t v6 = SipHeader::SipHeader(a1, (const std::string *)"Retry-After");
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 64) = &unk_1F20B37B0;
  *(void *)(v6 + 72) = v6 + 80;
  *(_WORD *)(v6 + 96) = 256;
  *(void *)uint64_t v6 = &unk_1F20CDF00;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 104) = a2;
  std::string::operator=((std::string *)(v6 + 112), a3);
  return a1;
}

void sub_1C54364F0(_Unwind_Exception *a1)
{
  if (v1[135] < 0) {
    operator delete(*v2);
  }
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  _Unwind_Resume(a1);
}

uint64_t SipRetryAfterHeader::encodeValue(SipRetryAfterHeader *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  if (*((char *)this + 135) < 0)
  {
    if (!*((void *)this + 15)) {
      return 1;
    }
    goto LABEL_3;
  }
  if (*((unsigned char *)this + 135))
  {
LABEL_3:
    unsigned __int16 v4 = (void *)*((void *)a2 + 1);
    char v7 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 112);
    unsigned int v5 = (void *)*((void *)a2 + 1);
    char v8 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
    *((unsigned char *)a2 + 17) = 0;
  }
  return 1;
}

uint64_t SipRetryAfterHeader::setValueFromString(uint64_t a1, std::string *this)
{
  std::string::size_type v4 = std::string::find(this, 40, 0);
  if (v4 == -1 || (std::string::size_type v5 = v4, v6 = std::string::find(this, 41, v4), v6 == -1))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v9 = this;
    }
    else {
      long long v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)(a1 + 104) = strtoul((const char *)v9, 0, 10);
  }
  else
  {
    std::string::basic_string(&__p, this, v5 + 1, v6 - v5, (std::allocator<char> *)&v12);
    char v7 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)char v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 128) = *((void *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string(&__p, this, 0, v5, (std::allocator<char> *)&v12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)(a1 + 104) = strtoul((const char *)p_p, 0, 10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 1;
}

void SipRetryAfterHeader::~SipRetryAfterHeader(void **this)
{
  *this = &unk_1F20CDF00;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20CDF00;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRetryAfterHeader::clone(SipRetryAfterHeader *this)
{
}

void sub_1C54368F0(_Unwind_Exception *a1)
{
  if (v1[135] < 0) {
    operator delete(*v2);
  }
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  MEMORY[0x1C878E320](v1, 0x10B3C4013ADD0EBLL);
  _Unwind_Resume(a1);
}

time_t ims::analytics::ActiveRatField::create@<X0>(ims::analytics::ActiveRatField *this@<X0>, void *a2@<X8>)
{
  std::string::size_type v5 = operator new(0x48uLL);
  v5[1] = 0;
  v5[2] = 0;
  *std::string::size_type v5 = &unk_1F20CDFA0;
  v5[3] = &unk_1F20CDFF0;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  v5[8] = 0;
  *a2 = v5 + 3;
  a2[1] = v5;
  return result;
}

void sub_1C54369C8(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[2].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::ActiveRatFieldImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CDFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ActiveRatFieldImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CDFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::ActiveRatFieldImpl>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

time_t anonymous namespace'::ActiveRatFieldImpl::setLatestRat(time_t this, const ims::AccessNetwork *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (v2)
  {
    uint64_t v3 = *((unsigned __int8 *)a2 + 47);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *((void *)a2 + 4);
    }
    if (v3)
    {
      uint64_t v4 = this;
      std::allocate_shared[abi:ne180100]<ims::AccessNetwork,std::allocator<ims::AccessNetwork>,ims::AccessNetwork const&,void>((long long *)a2, &v7);
      long long v5 = v7;
      long long v7 = 0uLL;
      std::string::size_type v6 = *(std::__shared_weak_count **)(v4 + 32);
      *(_OWORD *)(v4 + 24) = v5;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        if (*((void *)&v7 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
        }
      }
      this = time(0);
      *(void *)(v4 + 40) = this;
    }
  }
  return this;
}

void anonymous namespace'::ActiveRatFieldImpl::trackAudioProgress(_anonymous_namespace_::ActiveRatFieldImpl *this)
{
  if (*((void *)this + 3) && time(0) - *((void *)this + 5) >= 3)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v2 = *((void *)this + 4);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + 1) = v3;
    *((void *)this + 2) = v2;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)this + 4);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "ActiveRat");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Audio is active over RAT: ", 26);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 32))(v6, *((void *)this + 1));
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1C5436C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::ActiveRatFieldImpl::getActiveRat@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void anonymous namespace'::ActiveRatFieldImpl::~ActiveRatFieldImpl(_anonymous_namespace_::ActiveRatFieldImpl *this)
{
  *(void *)this = &unk_1F20CDFF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

std::string *std::allocate_shared[abi:ne180100]<ims::AccessNetwork,std::allocator<ims::AccessNetwork>,ims::AccessNetwork const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0x60uLL);
  time_t result = std::__shared_ptr_emplace<ims::AccessNetwork>::__shared_ptr_emplace[abi:ne180100]<ims::AccessNetwork const&,std::allocator<ims::AccessNetwork>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1C5436D9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<ims::AccessNetwork>::__shared_ptr_emplace[abi:ne180100]<ims::AccessNetwork const&,std::allocator<ims::AccessNetwork>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CE050;
  std::construct_at[abi:ne180100]<ims::AccessNetwork,ims::AccessNetwork const&,ims::AccessNetwork*>(a1 + 1, a2);
  return a1;
}

void sub_1C5436DF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CE050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CE050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

std::string *std::construct_at[abi:ne180100]<ims::AccessNetwork,ims::AccessNetwork const&,ims::AccessNetwork*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = a2[3];
  this[2].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 64);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  return this;
}

void sub_1C5436F68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SDPLazuliBuilder::~SDPLazuliBuilder(SDPLazuliBuilder *this)
{
  *(void *)this = &unk_1F20CE0A0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20CE0A0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void SDPLazuliBuilder::createSDP(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>((uint64_t *)(a1 + 8), a3);
  long long v5 = (std::__shared_weak_count *)a3[1];
  v8[0] = *a3;
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaLazuliSettings *)v7, a2);
  SDPLazuliBuilder::adjustModel((uint64_t)v6, (uint64_t)v8, (uint64_t)v7);
  if (v7[360]) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C54370CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a55) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a10);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  v58 = *(std::__shared_weak_count **)(v55 + 8);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(exception_object);
}

void SDPLazuliBuilder::adjustModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 416);
  uint64_t v3 = *(void *)(*(void *)a2 + 424);
  if (v4 != v3)
  {
    while (*(_DWORD *)(v4 + 12) != 6)
    {
      v4 += 200;
      if (v4 == v3) {
        return;
      }
    }
    if (*(unsigned char *)(a3 + 360))
    {
      memset(&v6, 0, sizeof(v6));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(long long **)(a3 + 280), *(long long **)(a3 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 288) - *(void *)(a3 + 280)) >> 3));
      SDPMedia::setAcceptTypes((void *)v4, (long long **)&v6);
      long long v7 = &v6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
      memset(&v6, 0, sizeof(v6));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(long long **)(a3 + 304), *(long long **)(a3 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 312) - *(void *)(a3 + 304)) >> 3));
      SDPMedia::setAcceptWrappedTypes((void *)v4, (long long **)&v6);
      long long v7 = &v6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    }
  }
}

void sub_1C54371EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

SDPMediaLazuliSettings *std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaLazuliSettings *this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 360) = 0;
  if (*(unsigned char *)(a2 + 360))
  {
    SDPMediaLazuliSettings::SDPMediaLazuliSettings(this, (long long **)a2);
    *((unsigned char *)this + 360) = 1;
  }
  return this;
}

void sub_1C5437254(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 360)) {
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings(v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ims::toString<ms::MediaServiceDirection>@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  switch(*a1)
  {
    case 0u:
      uint64_t v2 = "QMI::Inactive";
      goto LABEL_7;
    case 1u:
      uint64_t v2 = "QMI::SendOnly";
      goto LABEL_7;
    case 2u:
      uint64_t v2 = "QMI::ReceiveOnly";
      goto LABEL_7;
    case 3u:
      uint64_t v2 = "QMI::SendReceive";
LABEL_7:
      time_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
      break;
    default:
      time_t result = std::to_string(a2, *a1);
      break;
  }
  return result;
}

uint64_t QMIRTPCommandDriver::QMIRTPCommandDriver(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20CE0D0;
  *(unsigned char *)(a1 + 24) = 0;
  std::string v6 = (ImsLogger *)ims::logger((ims *)a1);
  long long v7 = (os_log_s *)ImsLogger::osLog(v6);
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 32), v7);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a1 + 80;
  *(void *)(a1 + 88) = a1 + 80;
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = a3;
  return a1;
}

void sub_1C543738C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPCommandDriver::~QMIRTPCommandDriver(QMIRTPCommandDriver *this)
{
  *(void *)this = &unk_1F20CE0D0;
  qmi::ClientRouter::reset((QMIRTPCommandDriver *)((char *)this + 32));
  qmi::Client::release((QMIRTPCommandDriver *)((char *)this + 48));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    dispatch_release(v3);
  }
  std::__list_imp<unsigned long long>::clear((void *)this + 10);
  qmi::Client::~Client((QMIRTPCommandDriver *)((char *)this + 48));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t vars8;

  QMIRTPCommandDriver::~QMIRTPCommandDriver(this);
  JUMPOUT(0x1C878E320);
}

void QMIRTPCommandDriver::initializeDriverForInstance(QMIRTPCommandDriver *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  std::string v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"initializeDriverForInstance", 27);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  uint64_t v8 = *((void *)this + 15);
  if (v8)
  {
    long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v9 || (v10 = *((void *)this + 1), (long long v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v12 = v11;
    uint64_t v13 = v10;
    std::string v14 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 16))(v8, a2, &v13);
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C543766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t QMIRTPCommandDriver::getInstanceType(void *a1, void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"getInstanceType", 15);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string v6 = (std::__shared_weak_count *)a1[17];
  if (!v6)
  {
    size_t v7 = 0;
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    long long v11 = (unsigned char *)ims::error((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v11 + 1), (uint64_t)"No controller associated with this command driver!", 50);
    v11[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_12;
  }
  size_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = a1[16];
  if (!v8) {
    goto LABEL_11;
  }
  QMIRTPStackController::getProfileByStackId(v8, a2);
  int v10 = v9;
  if ((v9 & 0xFF00000000) != 0) {
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  long long v11 = (unsigned char *)ims::error((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v11 + 1), (uint64_t)"No profile for stack ", 21);
  v11[17] = 0;
  (*(void (**)(unsigned char *, void **))(*(void *)v11 + 32))(v11, a2);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_12:
  v11[17] = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  int v10 = -1;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::debug((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Using instance ", 15);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" for stack ", 11);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v10) {
    return 2 * (v10 == 1);
  }
  else {
    return 1;
  }
}

void sub_1C5437AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::voiceSystemIdRetrieved(QMIRTPCommandDriver *this, unsigned int a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v17, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v5 = ims::debug((uint64_t)&v17, (uint64_t)&v15);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = v5;
  size_t v7 = *(void **)(v5 + 8);
  size_t v8 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"voiceSystemIdRetrieved", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", voiceSystemId=", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v18 < 0) {
    operator delete((void *)v17);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10 && *((void *)this + 16))
    {
      QMIRTPStackController::setVoiceSystemIdForInstance(*((uint64_t ***)this + 16), v14, a3);
      long long v11 = sImsDispatchQueue;
      if (sImsDispatchQueue
        || (long long v11 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v11) != 0))
      {
        dispatch_retain(v11);
      }
      memset(&v13, 0, sizeof(v13));
      std::string::basic_string[abi:ne180100]<0>(&v13, "ims::RTP.");
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
    }
  }
  else
  {
    int v10 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  uint64_t v12 = ims::error((uint64_t)&v17, (uint64_t)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"No controller associated with this command driver!", 50);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v18 < 0) {
    operator delete((void *)v17);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C543874C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, dispatch_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,dispatch_object_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,std::__shared_weak_count *a37,int a38,__int16 a39,char a40,char a41)
{
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if ((v44 & 1) == 0) {
    dispatch_release(v42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver22voiceSystemIdRetrievedEjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v2 = (const void **)__p[1];
  if (__p[1] != (void *)v11)
  {
    while (*((unsigned char *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v11) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v11) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  void v3[3] = 1;
  v5[5] = v1 + 48;
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19QMIRTPCommandDriver20onAudioClientStartedEv_block_invoke_2;
  v5[3] = &__block_descriptor_tmp_28;
  v5[4] = v1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio12DownlinkDtmf8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6510B00;
  aBlock[4] = v5;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    uint64_t v4 = v9;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_1C5438C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::voiceSystemIdUpdated(QMIRTPCommandDriver *this, unsigned int a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v16, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"voiceSystemIdUpdated", 20);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", voiceSystemId=", 16);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  int v10 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v10)
  {
    long long v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = (uint64_t **)*((void *)this + 16);
      if (v12)
      {
        QMIRTPStackController::setVoiceSystemIdForInstance(v12, a2, a3);
LABEL_16:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        return;
      }
    }
  }
  else
  {
    long long v11 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::error((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No controller associated with this command driver!", 50);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v11) {
    goto LABEL_16;
  }
}

void sub_1C5438F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver20onAudioClientStartedEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v2 = (char *)qmi::asString();
    std::string::basic_string[abi:ne180100]<0>(&v12, v2);
    std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Failed to register downlink dtmf callback. Error ", 49);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, &v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v12);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    uint64_t v5 = ims::debug((uint64_t)&v12, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Succesfully registered downlink dtmf callback", 45);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v12);
    }
    v8[0] = (void *)MEMORY[0x1E4F143A8];
    v8[1] = (void *)0x40000000;
    size_t v9 = ___ZN19QMIRTPCommandDriver25setDownlinkDtmfIndicationEv_block_invoke;
    int v10 = &__block_descriptor_tmp_286;
    uint64_t v11 = v4;
    uint64_t v12 = (void *)MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    unsigned int v14 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio12DownlinkDtmf10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    char v15 = &unk_1E6510F60;
    char v16 = v8;
    qmi::Client::setIndHandler();
  }
}

void sub_1C5439240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver14serviceBindReqEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  uint64_t result = QMIRTPStackController::isAssertEnabled(*(QMIRTPStackController **)(a1 + 32));
  *a2 = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__110shared_ptrI21QMIRTPStackControllerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__110shared_ptrI21QMIRTPStackControllerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void QMIRTPCommandDriver::sessionInitializeReq(void *a1, void *a2, char a3, uint64_t a4, int a5, void *a6)
{
  if (*a2)
  {
    uint64_t v8 = (std::__shared_weak_count *)a6[1];
    if (v8)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v8);
      if (v13)
      {
        unsigned int v14 = (unsigned char *)*a6;
        if (*a6)
        {
          std::string::basic_string[abi:ne180100]<0>(&v64, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
          uint64_t v15 = ims::debug((uint64_t)&v64, (uint64_t)&aBlock);
          if (!a1) {
            __cxa_bad_typeid();
          }
          uint64_t v16 = v15;
          char v17 = *(void **)(v15 + 8);
          size_t v18 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
          *(unsigned char *)(v16 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"::", 2);
          *(unsigned char *)(v16 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"sessionInitializeReq", 20);
          *(unsigned char *)(v16 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" [sessionId=", 12);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
          std::ostream::operator<<();
          *(unsigned char *)(v16 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" appId=", 7);
          *(unsigned char *)(v16 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v16 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v16 + 17) = 0;
          if (v67 < 0) {
            operator delete(aBlock);
          }
          if (v65 < 0) {
            operator delete((void *)v64.tv_sec);
          }
          long long v62 = 0u;
          long long v63 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v62);
          v60[0] = MEMORY[0x1E4F143A8];
          v60[1] = 0x40000000;
          v60[2] = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke;
          v60[3] = &__block_descriptor_tmp_57_1;
          char v61 = a3;
          uint64_t v19 = (const void **)*((void *)&v62 + 1);
          if (*((void *)&v62 + 1) != (void)v63)
          {
            while (*((unsigned char *)*v19 + 8) != 1)
            {
              if (++v19 == (const void **)v63) {
                goto LABEL_29;
              }
            }
          }
          if (v19 == (const void **)v63) {
LABEL_29:
          }
            operator new();
          if (!v26) {
            goto LABEL_106;
          }
          ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke((uint64_t)v60, v26 + 3);
          v59[0] = MEMORY[0x1E4F143A8];
          v59[1] = 0x40000000;
          v59[2] = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2;
          v59[3] = &__block_descriptor_tmp_59_0;
          v59[4] = a4;
          char v27 = (const void **)*((void *)&v62 + 1);
          if (*((void *)&v62 + 1) != (void)v63)
          {
            while (*((unsigned char *)*v27 + 8) != 2)
            {
              if (++v27 == (const void **)v63) {
                goto LABEL_37;
              }
            }
          }
          if (v27 == (const void **)v63) {
LABEL_37:
          }
            operator new();
          if (!v28) {
LABEL_106:
          }
            __cxa_bad_cast();
          ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2((uint64_t)v59, v28 + 4);
          v52[0] = MEMORY[0x1E4F143A8];
          v52[1] = 1174405120;
          __int16 v53 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3;
          v54 = &__block_descriptor_tmp_60_0;
          uint64_t v55 = v14;
          v56 = v13;
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          int v29 = (std::__shared_weak_count *)a2[1];
          uint64_t v57 = *a2;
          v58 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = (const void **)*((void *)&v62 + 1);
          if (*((void *)&v62 + 1) != (void)v63)
          {
            while (*((unsigned char *)*v30 + 8) != 3)
            {
              if (++v30 == (const void **)v63) {
                goto LABEL_47;
              }
            }
          }
          if (v30 == (const void **)v63) {
LABEL_47:
          }
            operator new();
          if (!v31) {
            __cxa_bad_cast();
          }
          v53((uint64_t)v52, (uint64_t)v31 + 16);
          if (a5 == 2)
          {
            if (v14[584])
            {
              long long v32 = v14 + 152;
              goto LABEL_56;
            }
          }
          else if (a5 == 6 && v14[1856])
          {
            long long v32 = v14 + 1496;
LABEL_56:
            if (v14[584]) {
              long long v33 = v14 + 152;
            }
            else {
              long long v33 = 0;
            }
            v51[0] = MEMORY[0x1E4F143A8];
            v51[1] = 0x40000000;
            std::string v51[2] = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61;
            v51[3] = &__block_descriptor_tmp_63;
            v51[4] = v32;
            long long v34 = (const void **)*((void *)&v62 + 1);
            if (*((void *)&v62 + 1) != (void)v63)
            {
              while (*((unsigned char *)*v34 + 8) != 16)
              {
                if (++v34 == (const void **)v63) {
                  goto LABEL_66;
                }
              }
            }
            if (v34 == (const void **)v63) {
LABEL_66:
            }
              operator new();
            if (!v35) {
              goto LABEL_107;
            }
            ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61((uint64_t)v51, v35 + 5);
            v50[0] = MEMORY[0x1E4F143A8];
            v50[1] = 0x40000000;
            v50[2] = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64;
            v50[3] = &__block_descriptor_tmp_65_0;
            v50[4] = v33;
            long long v36 = (const void **)*((void *)&v62 + 1);
            if (*((void *)&v62 + 1) != (void)v63)
            {
              while (*((unsigned char *)*v36 + 8) != 17)
              {
                if (++v36 == (const void **)v63) {
                  goto LABEL_74;
                }
              }
            }
            if (v36 == (const void **)v63) {
LABEL_74:
            }
              operator new();
            if (!v37) {
LABEL_107:
            }
              __cxa_bad_cast();
            ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64((uint64_t)v50, v37 + 8);
            v45[0] = MEMORY[0x1E4F143A8];
            v45[1] = 1174405120;
            v46 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3_66;
            uint64_t v47 = &__block_descriptor_tmp_68;
            uint64_t v38 = (std::__shared_weak_count *)a2[1];
            uint64_t v48 = *a2;
            uint64_t v49 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v39 = (const void **)*((void *)&v62 + 1);
            if (*((void *)&v62 + 1) != (void)v63)
            {
              while (*((unsigned char *)*v39 + 8) != 18)
              {
                if (++v39 == (const void **)v63) {
                  goto LABEL_84;
                }
              }
            }
            if (v39 == (const void **)v63) {
LABEL_84:
            }
              operator new();
            if (!v40) {
              __cxa_bad_cast();
            }
            v46((uint64_t)v45, v40 + 3);
            std::string v41 = (const void **)*((void *)&v62 + 1);
            if (*((void *)&v62 + 1) != (void)v63)
            {
              while (*((unsigned char *)*v41 + 8) != 20)
              {
                if (++v41 == (const void **)v63) {
                  goto LABEL_92;
                }
              }
            }
            if (v41 == (const void **)v63) {
LABEL_92:
            }
              operator new();
            if (!v42) {
              __cxa_bad_cast();
            }
            std::string v43 = v42 + 16;
            v64.tv_sec = 0;
            *(void *)&v64.tv_usec = 0;
            gettimeofday(&v64, 0);
            *std::string v43 = 1000 * v64.tv_sec + v64.tv_usec / 1000 + 2208988800000;
            if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
            {
              qmi::ClientRouter::get();
              operator new();
            }
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            if (v58) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v58);
            }
            if (v56) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v56);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v62);
            goto LABEL_102;
          }
          long long v32 = v14 + 1032;
          if (!v14[1328]) {
            long long v32 = 0;
          }
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v64, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v25 = ims::error((uint64_t)&v64, (uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"SDPSession expired in QMIRTPCommandDriver::sessionInitializeReq", 63);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    if (v67 < 0) {
      operator delete(aBlock);
    }
    if (v65 < 0) {
      operator delete((void *)v64.tv_sec);
    }
    if (v13) {
LABEL_102:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v20 = ims::error((uint64_t)&v64, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v21 = v20;
    uint64_t v22 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    __int16 v23 = *(void **)(v20 + 8);
    size_t v24 = strlen(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v22, v24);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"sessionInitializeReq", 20);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (v67 < 0) {
      operator delete(aBlock);
    }
    if (v65 < 0) {
      operator delete((void *)v64.tv_sec);
    }
  }
}

void sub_1C543A664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  std::string v41 = *(std::__shared_weak_count **)(v39 - 152);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (a12) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v38, a12);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v39 - 224));
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void sub_1C543A7A4()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  JUMPOUT(0x1C543A79CLL);
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2(uint64_t a1, BOOL *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 128))(**(void **)(a1 + 32));
  uint64_t v4 = v3[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v3[23];
  }
  else {
    uint64_t v5 = *((void *)v3 + 1);
  }
  if (v5 == 3)
  {
    if ((v4 & 0x80) != 0)
    {
      BOOL v7 = memcmp(*(const void **)v3, &IpAddress::kAddressTypeIPv6, *((void *)v3 + 1)) == 0;
LABEL_13:
      *a2 = v7;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      IpAddress::asString();
    }
    if (!v3[23])
    {
LABEL_10:
      BOOL v7 = 1;
      goto LABEL_13;
    }
    uint64_t v6 = &IpAddress::kAddressTypeIPv6;
    while (*v3 == *(unsigned __int8 *)v6)
    {
      ++v3;
      uint64_t v6 = (long long *)((char *)v6 + 1);
      if (!--v4) {
        goto LABEL_10;
      }
    }
  }
  BOOL v7 = 0;
  goto LABEL_13;
}

void sub_1C543AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 128);
  if (v5 && (uint64_t v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    int v7 = *(unsigned __int8 *)(*(void *)(v4 + 120) + 176);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (!v7)
    {
LABEL_4:
      int v8 = 0;
      goto LABEL_7;
    }
  }
  else if (!MEMORY[0xB0])
  {
    goto LABEL_4;
  }
  int v8 = 1;
LABEL_7:
  *(_DWORD *)(a2 + 32) = v8;
  *(unsigned char *)(*(void *)(a1 + 48) + 489) = v8;
  memset(&v31, 0, sizeof(v31));
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 128);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      uint64_t v12 = *(void *)(v9 + 120);
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  if (*(char *)(v12 + 3927) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v12 + 3904), *(void *)(v12 + 3912));
  }
  else {
    std::string v31 = *(std::string *)(v12 + 3904);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::string::size_type v13 = 0;
  std::string::size_type v14 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::value_type v15 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::value_type v15 = v31.__r_.__value_.__s.__data_[8];
  }
  *(unsigned char *)a2 = v15;
  uint64_t v16 = (unint64_t *)(a2 + 8);
  if ((v14 & 0x80) != 0) {
    goto LABEL_23;
  }
  while (v13 < v14)
  {
    char v17 = &v31;
    while (1)
    {
      std::string::value_type v18 = v17->__r_.__value_.__s.__data_[v13];
      uint64_t v20 = *(std::string::value_type **)(a2 + 16);
      unint64_t v19 = *(void *)(a2 + 24);
      if ((unint64_t)v20 >= v19)
      {
        unint64_t v22 = *v16;
        __int16 v23 = &v20[-*v16];
        unint64_t v24 = (unint64_t)(v23 + 1);
        if ((uint64_t)(v23 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = v19 - v22;
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        size_t v26 = v25 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v24;
        char v27 = v26 ? (char *)operator new(v26) : 0;
        long long v28 = &v23[(void)v27];
        v23[(void)v27] = v18;
        uint64_t v21 = (uint64_t)&v23[(void)v27 + 1];
        if (v20 != (std::string::value_type *)v22)
        {
          int v29 = &v20[~v22];
          do
          {
            std::string::value_type v30 = *--v20;
            (v29--)[(void)v27] = v30;
          }
          while (v20 != (std::string::value_type *)v22);
          uint64_t v20 = (std::string::value_type *)*v16;
          long long v28 = v27;
        }
        *(void *)(a2 + 8) = v28;
        *(void *)(a2 + 16) = v21;
        *(void *)(a2 + 24) = &v27[v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v20 = v18;
        uint64_t v21 = (uint64_t)(v20 + 1);
      }
      *(void *)(a2 + 16) = v21;
      ++v13;
      std::string::size_type v14 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((*((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x80) == 0) {
        break;
      }
LABEL_23:
      char v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if (v13 >= v31.__r_.__value_.__l.__size_)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        return;
      }
    }
  }
}

void sub_1C543AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10SDPSessionEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10SDPSessionEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(*(void *)(result + 32) + 24);
  return result;
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = a1;
  memset(&v24, 0, sizeof(v24));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(char *)(v4 + 95) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v4 + 72), *(void *)(v4 + 80));
  }
  else {
    std::string v24 = *(std::string *)(v4 + 72);
  }
  unsigned __int16 v5 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned __int16 v5 = v24.__r_.__value_.__r.__words[1];
  }
  *a2 = v5;
  if (v5)
  {
    uint64_t v23 = v3;
    unint64_t v7 = 0;
    int v8 = (unint64_t *)(a2 + 4);
    uint64_t v9 = (unsigned char *)*((void *)a2 + 2);
    do
    {
      uint64_t v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v24;
      }
      std::string::value_type v11 = v10->__r_.__value_.__s.__data_[v7];
      unint64_t v12 = *((void *)a2 + 3);
      if ((unint64_t)v9 >= v12)
      {
        unint64_t v14 = *v8;
        std::string::value_type v15 = &v9[-*v8];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v12 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          unint64_t v19 = (char *)operator new(v18);
        }
        else {
          unint64_t v19 = 0;
        }
        uint64_t v20 = &v15[(void)v19];
        v15[(void)v19] = v11;
        uint64_t v13 = (uint64_t)&v15[(void)v19 + 1];
        if (v9 != (unsigned char *)v14)
        {
          uint64_t v21 = &v9[~v14];
          do
          {
            char v22 = *--v9;
            (v21--)[(void)v19] = v22;
          }
          while (v9 != (unsigned char *)v14);
          uint64_t v9 = (unsigned char *)*v8;
          uint64_t v20 = v19;
        }
        *((void *)a2 + 1) = v20;
        *((void *)a2 + 2) = v13;
        *((void *)a2 + 3) = &v19[v18];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        unsigned char *v9 = v11;
        uint64_t v13 = (uint64_t)(v9 + 1);
      }
      *((void *)a2 + 2) = v13;
      ++v7;
      uint64_t v9 = (unsigned char *)v13;
    }
    while (v7 < *a2);
    char v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    uint64_t v3 = v23;
  }
  a2[16] = *(_WORD *)(*(void *)(v3 + 32) + 24) + 1;
  *((unsigned char *)a2 + 34) = 1;
  if (v6 < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C543AEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3_66(uint64_t a1, _DWORD *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 176))();
  *a2 = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN19QMIRTPCommandDriver27handleSessionInitializeRespERKN2ms17SessionInitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    if (v4)
    {
      unsigned __int16 v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        char v6 = v5;
        uint64_t v7 = *(void *)(v2 + 128);
        if (!v7) {
          goto LABEL_22;
        }
        uint64_t v8 = *(void *)(v7 + 48);
        uint64_t v9 = *(std::__shared_weak_count **)(v7 + 56);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10) {
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v10 + 120), 4);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        std::string::value_type v11 = *(std::__shared_weak_count **)(a1 + 48);
        char v16 = *(int8x8_t **)(a1 + 40);
        unint64_t v17 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMIRTPStackController::sessionDidInitialize(v7, &v16, 0, 4);
        unint64_t v12 = v17;
        if (!v17) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
  }
  else if (v4)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v4);
    if (v13)
    {
      char v6 = v13;
      unint64_t v14 = *(void **)(v2 + 128);
      if (!v14) {
        goto LABEL_22;
      }
      std::string::value_type v15 = *(std::__shared_weak_count **)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 40);
      unint64_t v19 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMIRTPStackController::handleInitializeRequestReceipt(v14, &v18);
      unint64_t v12 = v19;
      if (!v19) {
        goto LABEL_22;
      }
LABEL_21:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_22:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C543B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke(uint64_t result, unsigned int *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  int v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      unsigned __int16 v5 = v4;
      uint64_t v6 = *(void *)(v2 + 128);
      if (v6) {
        QMIRTPStackController::sessionDidInitialize(v6, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(_DWORD *)(a1 + 56));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C543B1AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionUninitializeReq(void *a1, void *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sessionUninitializeReq", 22);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v33 < 0) {
      operator delete(aBlock);
    }
    if (v31 < 0) {
      operator delete(__p);
    }
    memset(v29, 0, sizeof(v29));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v29);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 1174405120;
    unint64_t v25 = ___ZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    size_t v26 = &__block_descriptor_tmp_82_0;
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v27 = *a2;
    long long v28 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)v29, 1);
    v25((uint64_t)v24, v9);
    int InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
    if (InstanceType)
    {
      qmi::ClientRouter::get();
      int v23 = InstanceType;
      operator new();
    }
    char v16 = (std::__shared_weak_count *)a1[17];
    if (v16)
    {
      unint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = a1[16];
        if (v19)
        {
          uint64_t v20 = (std::__shared_weak_count *)a2[1];
          uint64_t v21 = *a2;
          char v22 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QMIRTPStackController::sessionDidUninitialize(v19, (uint64_t)&v21, 0);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v29);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v11 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v12 = v11;
    uint64_t v13 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    unint64_t v14 = *(void **)(v11 + 8);
    size_t v15 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v13, v15);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"sessionUninitializeReq", 22);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v33 < 0) {
      operator delete(aBlock);
    }
    if (v31 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1C543B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

void ___ZN19QMIRTPCommandDriver29handleSessionUninitializeRespERKN2ms19SessionUninitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)(v2 + 128);
        if (!v7) {
          goto LABEL_22;
        }
        uint64_t v8 = *(void *)(v7 + 48);
        uint64_t v9 = *(std::__shared_weak_count **)(v7 + 56);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10) {
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v10 + 120), 5);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v16 = *(void *)(a1 + 40);
        unint64_t v17 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMIRTPStackController::sessionDidUninitialize(v7, (uint64_t)&v16, 4);
        uint64_t v12 = v17;
        if (!v17) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
  }
  else if (v4)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v4);
    if (v13)
    {
      uint64_t v6 = v13;
      unint64_t v14 = *(void **)(v2 + 128);
      if (!v14) {
        goto LABEL_22;
      }
      size_t v15 = *(std::__shared_weak_count **)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMIRTPStackController::handleUninitializeRequestReceipt(v14, &v18);
      uint64_t v12 = v19;
      if (!v19) {
        goto LABEL_22;
      }
LABEL_21:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_22:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C543B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver35handleSessionUninitializeIndicationERKN2ms19SessionUninitialize10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6) {
        QMIRTPStackController::sessionDidUninitialize(v6, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C543B9DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionConfigureReq(void *a1, void *a2)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v4 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v5 = v4;
    uint64_t v6 = *(void **)(v4 + 8);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"sessionConfigureReq", 19);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v24 < 0) {
      operator delete(aBlock);
    }
    if (v22 < 0) {
      operator delete(__p);
    }
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    LOBYTE(v19[0]) = *(unsigned char *)(*a2 + 536);
    qmi::MutableMessageBase::MutableMessageBase();
    if (LOBYTE(v19[0]))
    {
      if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
      {
        qmi::ClientRouter::get();
        operator new();
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
      uint64_t v13 = ims::warn((uint64_t)&__p, (uint64_t)&aBlock);
      unint64_t v14 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      size_t v15 = strlen(v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v14, v15);
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"sessionConfigureReq", 19);
      *(unsigned char *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" session configuration is null", 30);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v24 < 0) {
        operator delete(aBlock);
      }
      if (v22 < 0) {
        operator delete(__p);
      }
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 1174405120;
      v17[2] = ___ZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
      v17[3] = &__block_descriptor_tmp_92_0;
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      v17[4] = *a2;
      uint64_t v18 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ims::performBlock((IMSClientManager *)v17);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)((char *)v19 + 8));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v8 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v9 = v8;
    uint64_t v10 = (const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = *(void **)(v8 + 8);
    size_t v12 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v10, v12);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sessionConfigureReq", 19);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v24 < 0) {
      operator delete(aBlock);
    }
    if (v22 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1C543C018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  qmi::MutableMessageBase::~MutableMessageBase(v30);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*(void *)(a1 + 32) + 24) + 152))(&v9);
  if (v10)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v10);
    if (v2) {
      uint64_t v3 = v9;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
      if (v5) {
        uint64_t v6 = v5 + 24;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6;
      uint64_t v8 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 16))(v3, &v7, 0);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
}

void sub_1C543C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver26handleSessionConfigureRespERKN2ms16SessionConfigure8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void **)(v2 + 128);
        if (!v7) {
          goto LABEL_22;
        }
        uint64_t v8 = v7[6];
        uint64_t v9 = (std::__shared_weak_count *)v7[7];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 296);
        if (v10) {
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v10 + 120), 6);
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v16 = *(int8x8_t **)(a1 + 40);
        unint64_t v17 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMIRTPStackController::sessionDidConfigure(v7, &v16, 4);
        size_t v12 = v17;
        if (!v17) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
  }
  else if (v4)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v4);
    if (v13)
    {
      uint64_t v6 = v13;
      unint64_t v14 = *(void **)(v2 + 128);
      if (!v14) {
        goto LABEL_22;
      }
      size_t v15 = *(std::__shared_weak_count **)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMIRTPStackController::handleConfigureRequestReceipt(v14, &v18);
      size_t v12 = v19;
      if (!v19) {
        goto LABEL_22;
      }
LABEL_21:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_22:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C543C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver32handleSessionConfigureIndicationERKN2ms16SessionConfigure10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6) {
        QMIRTPStackController::sessionDidConfigure(v6, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C543C3F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionSetStreamDirectionReq(void *a1, void *a2, unsigned int a3, char a4)
{
  unsigned int v31 = a3;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v8 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(v8 + 8);
    size_t v11 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sessionSetStreamDirectionReq", 28);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v35 < 0) {
      operator delete(aBlock);
    }
    if (v33 < 0) {
      operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v12 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v13 = v12;
  unint64_t v14 = *(void **)(v12 + 8);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"sessionSetStreamDirectionReq", 28);
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v13 + 17) = 0;
  ims::toString<ms::MediaServiceDirection>(&v31, (std::string *)v29);
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SBYTE7(v30) < 0) {
    operator delete(v29[0]);
  }
  if (v35 < 0) {
    operator delete(aBlock);
  }
  if (v33 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)int v29 = 0u;
  long long v30 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v29);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  unint64_t v25 = ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke;
  size_t v26 = &__block_descriptor_tmp_100;
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  long long v28 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)v29, 1);
  v25((uint64_t)v24, v17);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  void v21[2] = ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_101;
  v21[3] = &__block_descriptor_tmp_103_0;
  char v23 = a4;
  unsigned int v22 = a3;
  uint64_t v18 = (const void **)v29[1];
  if (v29[1] != (void *)v30)
  {
    while (*((unsigned char *)*v18 + 8) != 2)
    {
      if (++v18 == (const void **)v30) {
        goto LABEL_23;
      }
    }
  }
  if (v18 == (const void **)v30) {
LABEL_23:
  }
    operator new();
  if (!v19) {
    __cxa_bad_cast();
  }
  ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_101((uint64_t)v21, v19 + 3);
  if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
  {
    qmi::ClientRouter::get();
    operator new();
  }
  if (a3 <= 3) {
    QMIRTPCommandDriver::sendAudioCallEvent((uint64_t)a1, *(unsigned char *)(*a2 + 490), (void **)(*a2 + 80), (a3 + 16), *(unsigned char *)(*a2 + 496));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v29);
}

void sub_1C543CB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_101(uint64_t result, _DWORD *a2)
{
  if (*(_DWORD *)(result + 32) != 2 || *(unsigned char *)(result + 36) == 0) {
    int v3 = *(_DWORD *)(result + 32);
  }
  else {
    int v3 = 0;
  }
  *a2 = v3;
  return result;
}

void QMIRTPCommandDriver::sendAudioCallEvent(uint64_t a1, char a2, void **a3, unsigned int a4, char a5)
{
  std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v10 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sendAudioCallEvent", 18);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [event=", 8);
  *(unsigned char *)(v11 + 17) = 0;
  unint64_t v14 = audio::asString(a4);
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v14, v15);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(aBlock[0]);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16)
    {
      unint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 128);
        if (v18)
        {
          ProfileByStackId = QMIRTPStackController::getProfileByStackId(v18, a3);
          uint64_t v21 = v20;
          if ((v20 & 0xFF00000000) != 0)
          {
            unsigned int v22 = ProfileByStackId;
            std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v23 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Using VoiceSystemId ", 20);
            *(unsigned char *)(v23 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" for stack ", 11);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(void *)v23 + 32))(v23, a3);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v23 + 17) = 0;
            if (v36 < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(v47) < 0) {
              operator delete(aBlock[0]);
            }
            long long v44 = 0u;
            long long v45 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
            v40[0] = MEMORY[0x1E4F143A8];
            v40[1] = 0x40000000;
            void v40[2] = ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke;
            v40[3] = &__block_descriptor_tmp_241;
            char v41 = a4;
            char v42 = a5;
            char v43 = a2;
            char v24 = (const void **)*((void *)&v44 + 1);
            if (*((void *)&v44 + 1) != (void)v45)
            {
              while (*((unsigned char *)*v24 + 8) != 1)
              {
                if (++v24 == (const void **)v45) {
                  goto LABEL_37;
                }
              }
            }
            if (v24 == (const void **)v45) {
LABEL_37:
            }
              operator new();
            if (!v27) {
              goto LABEL_54;
            }
            ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke(v40, v27 + 9);
            v39[0] = MEMORY[0x1E4F143A8];
            v39[1] = 0x40000000;
            std::string v39[2] = ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_2;
            v39[3] = &__block_descriptor_tmp_243;
            std::string v39[4] = v22;
            v39[5] = v21;
            int v29 = (const void **)*((void *)&v44 + 1);
            if (*((void *)&v44 + 1) != (void)v45)
            {
              while (*((unsigned char *)*v29 + 8) != 16)
              {
                if (++v29 == (const void **)v45) {
                  goto LABEL_45;
                }
              }
            }
            if (v29 == (const void **)v45) {
LABEL_45:
            }
              operator new();
            if (!v30) {
LABEL_54:
            }
              __cxa_bad_cast();
            ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_2((uint64_t)v39, v30 + 3);
            std::string __p = (void *)(a1 + 48);
            uint64_t v34 = QMIServiceMsg::create();
            int v35 = 25000;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            v32[0] = MEMORY[0x1E4F143A8];
            v32[1] = 0x40000000;
            void v32[2] = ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_3;
            v32[3] = &__block_descriptor_tmp_244;
            v32[4] = a1;
            aBlock[0] = (void *)MEMORY[0x1E4F143A8];
            aBlock[1] = (void *)0x40000000;
            uint64_t v47 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio13SendCallEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            uint64_t v48 = &unk_1E6510F10;
            uint64_t v49 = v32;
            unsigned int v31 = _Block_copy(aBlock);
            uint64_t v38 = v31;
            if (v34)
            {
              qmi::Client::send();
              unsigned int v31 = v38;
            }
            if (v31) {
              _Block_release(v31);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v28 = ims::error((uint64_t)aBlock, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"No profile associated with stack ", 33);
            *(unsigned char *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, a3);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v28 + 17) = 0;
            if (v36 < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(v47) < 0) {
              operator delete(aBlock[0]);
            }
          }
          goto LABEL_51;
        }
      }
    }
    else
    {
      unint64_t v17 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v26 = ims::error((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (v36 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(aBlock[0]);
    }
    if (v17) {
LABEL_51:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v25 = ims::error((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    if (v36 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(aBlock[0]);
    }
  }
}

void sub_1C543D66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver35handleSessionSetStreamDirectionRespERKN2ms25SessionSetStreamDirection8ResponseENSt3__110shared_ptrI13QMIRTPSessionEENS0_21MediaServiceDirectionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  uint64_t v4 = (std::__shared_weak_count *)v2[17];
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = (void *)v2[16];
        if (v7)
        {
          switch(*(_DWORD *)(a1 + 60))
          {
            case 0:
              uint64_t v8 = v7[6];
              uint64_t v9 = (std::__shared_weak_count *)v7[7];
              if (v9) {
                atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v10 = *(void *)(v8 + 296);
              if (v10) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v10 + 120), 8);
              }
              if (v9) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v9);
              }
              uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
              uint64_t v49 = *(void *)(a1 + 40);
              v50 = v11;
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QMIRTPStackController::sessionDidStop(v7, &v49, 4);
              uint64_t v12 = v50;
              if (v50) {
                goto LABEL_78;
              }
              break;
            case 1:
              uint64_t v17 = v7[6];
              uint64_t v18 = (std::__shared_weak_count *)v7[7];
              if (v18) {
                atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v19 = *(void *)(v17 + 296);
              if (v19) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 10);
              }
              if (v18) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
              uint64_t v20 = *(std::__shared_weak_count **)(a1 + 48);
              uint64_t v47 = *(void *)(a1 + 40);
              uint64_t v48 = v20;
              if (v20) {
                atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QMIRTPStackController::sessionDirectionChangeFailed(v7, &v47);
              uint64_t v12 = v48;
              if (v48) {
                goto LABEL_78;
              }
              break;
            case 2:
              uint64_t v21 = v7[6];
              unsigned int v22 = (std::__shared_weak_count *)v7[7];
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v23 = *(void *)(v21 + 296);
              if (v23) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v23 + 120), 9);
              }
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              char v24 = *(std::__shared_weak_count **)(a1 + 48);
              uint64_t v45 = *(void *)(a1 + 40);
              v46 = v24;
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QMIRTPStackController::sessionDirectionChangeFailed(v7, &v45);
              uint64_t v12 = v46;
              if (v46) {
                goto LABEL_78;
              }
              break;
            case 3:
              uint64_t v25 = v7[6];
              uint64_t v26 = (std::__shared_weak_count *)v7[7];
              if (v26) {
                atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v27 = *(void *)(v25 + 296);
              if (v27) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v27 + 120), 7);
              }
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
              uint64_t v28 = *(std::__shared_weak_count **)(a1 + 48);
              uint64_t v43 = *(void *)(a1 + 40);
              long long v44 = v28;
              if (v28) {
                atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QMIRTPStackController::sessionDidStart(v7, &v43, 4);
              uint64_t v12 = v44;
              if (v44) {
                goto LABEL_78;
              }
              break;
            default:
              std::string::basic_string[abi:ne180100]<0>(v60, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v58, "");
              uint64_t v29 = ims::error((uint64_t)v60, (uint64_t)v58);
              long long v30 = (const char *)(*(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
              size_t v31 = strlen(v30);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)v30, v31);
              *(unsigned char *)(v29 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"::", 2);
              *(unsigned char *)(v29 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"handleSessionSetStreamDirectionResp_block_invoke", 48);
              *(unsigned char *)(v29 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" [direction=", 12);
              *(unsigned char *)(v29 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v29 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v29 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v29 + 17) = 0;
              goto LABEL_82;
          }
        }
LABEL_79:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  else if (v4)
  {
    size_t v13 = std::__shared_weak_count::lock(v4);
    if (v13)
    {
      uint64_t v6 = v13;
      unint64_t v14 = (void *)v2[16];
      if (v14)
      {
        switch(*(_DWORD *)(a1 + 60))
        {
          case 0:
            uint64_t v15 = *(void *)(a1 + 40);
            *(unsigned char *)(v15 + 561) = 1;
            uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
            uint64_t v62 = v15;
            long long v63 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QMIRTPStackController::sessionDidStop(v14, &v62, *(_DWORD *)(a1 + 56));
            uint64_t v12 = v63;
            if (v63) {
              goto LABEL_78;
            }
            break;
          case 1:
            std::string::basic_string[abi:ne180100]<0>(v60, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(v58, "");
            uint64_t v32 = ims::debug((uint64_t)v60, (uint64_t)v58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" [session=", 10);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 24) + 176))();
            std::ostream::operator<<();
            *(unsigned char *)(v32 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)" direction=", 11);
            *(unsigned char *)(v32 + 17) = 0;
            ims::toString<ms::MediaServiceDirection>((unsigned int *)(a1 + 60), &__p);
            (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 32))(v32, &__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v32 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v32 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v59 < 0) {
              operator delete(v58[0]);
            }
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            uint64_t v33 = *(void *)(a1 + 40);
            *(unsigned char *)(v33 + 561) = 1;
            uint64_t v34 = *(std::__shared_weak_count **)(a1 + 48);
            uint64_t v55 = v33;
            v56 = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QMIRTPStackController::sessionDidStart(v14, &v55, *(_DWORD *)(a1 + 56));
            uint64_t v12 = v56;
            if (v56) {
              goto LABEL_78;
            }
            break;
          case 2:
            std::string::basic_string[abi:ne180100]<0>(v60, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(v58, "");
            uint64_t v35 = ims::debug((uint64_t)v60, (uint64_t)v58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)" [session=", 10);
            *(unsigned char *)(v35 + 17) = 0;
            (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 24) + 176))();
            std::ostream::operator<<();
            *(unsigned char *)(v35 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)" direction=", 11);
            *(unsigned char *)(v35 + 17) = 0;
            ims::toString<ms::MediaServiceDirection>((unsigned int *)(a1 + 60), &__p);
            (*(void (**)(uint64_t, std::string *))(*(void *)v35 + 32))(v35, &__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v35 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v35 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v59 < 0) {
              operator delete(v58[0]);
            }
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            uint64_t v36 = *(void *)(a1 + 40);
            *(unsigned char *)(v36 + 561) = 1;
            uint64_t v37 = *(std::__shared_weak_count **)(a1 + 48);
            uint64_t v53 = v36;
            v54 = v37;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QMIRTPStackController::sessionDidStart(v14, &v53, *(_DWORD *)(a1 + 56));
            uint64_t v12 = v54;
            if (v54) {
              goto LABEL_78;
            }
            break;
          case 3:
            uint64_t v38 = *(void *)(a1 + 40);
            *(unsigned char *)(v38 + 561) = 0;
            uint64_t v39 = *(std::__shared_weak_count **)(a1 + 48);
            uint64_t v51 = v38;
            v52 = v39;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QMIRTPStackController::sessionDidStart(v14, &v51, *(_DWORD *)(a1 + 56));
            uint64_t v12 = v52;
            if (v52) {
LABEL_78:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            break;
          default:
            std::string::basic_string[abi:ne180100]<0>(v60, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(v58, "");
            uint64_t v40 = ims::error((uint64_t)v60, (uint64_t)v58);
            char v41 = (const char *)(*(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
            size_t v42 = strlen(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)v41, v42);
            *(unsigned char *)(v40 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v40 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"handleSessionSetStreamDirectionResp_block_invoke", 48);
            *(unsigned char *)(v40 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" [direction=", 12);
            *(unsigned char *)(v40 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v40 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v40 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v40 + 17) = 0;
LABEL_82:
            if (v59 < 0) {
              operator delete(v58[0]);
            }
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            break;
        }
      }
      goto LABEL_79;
    }
  }
}

void sub_1C543DFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v30 - 65) < 0) {
    operator delete(*(void **)(v30 - 88));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::configureRTCPReportsReq(void *a1, void *a2, int a3, char a4, uint64_t a5, int a6)
{
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v59, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v11 = ims::error((uint64_t)&v59, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v12 = v11;
    size_t v13 = *(void **)(v11 + 8);
    size_t v14 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v14);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"configureRTCPReportsReq", 23);
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v62 < 0) {
      operator delete(aBlock);
    }
    if (v60 < 0) {
      operator delete(v59);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v15 = ims::debug((uint64_t)&v59, (uint64_t)&aBlock);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void **)(v15 + 8);
  size_t v18 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"configureRTCPReportsReq", 23);
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" enable=", 8);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" local=", 7);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" interval=", 10);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" xrInterval=", 12);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" rtcpInterval()=", 16);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" localRTCPReportInterval()=", 27);
  *(unsigned char *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v62 < 0) {
    operator delete(aBlock);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v19 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 1174405120;
  uint64_t v53 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke;
  v54 = &__block_descriptor_tmp_117_0;
  uint64_t v20 = (std::__shared_weak_count *)a2[1];
  uint64_t v55 = *a2;
  v56 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(v19, 1);
  v53((uint64_t)v52, v21);
  uint64_t v48 = 0;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x2000000000;
  int v51 = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  char v41 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_118;
  size_t v42 = &unk_1F20CE308;
  char v46 = a3;
  char v47 = a4;
  unsigned int v22 = (std::__shared_weak_count *)a2[1];
  uint64_t v44 = *a2;
  uint64_t v45 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = &v48;
  uint64_t v23 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v23 + 8) != 16)
    {
      if (++v23 == (const void **)v58) {
        goto LABEL_23;
      }
    }
  }
  if (v23 == (const void **)v58) {
LABEL_23:
  }
    operator new();
  if (!v24) {
    __cxa_bad_cast();
  }
  v41((uint64_t)v40, v24 + 5);
  if (a6 && a3 && *((_DWORD *)v49 + 6))
  {
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 0x40000000;
    std::string v38[2] = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_124;
    v38[3] = &__block_descriptor_tmp_127;
    __int16 v39 = a6;
    uint64_t v25 = (const void **)*((void *)&v57 + 1);
    if (*((void *)&v57 + 1) != (void)v58)
    {
      while (*((unsigned char *)*v25 + 8) != 17)
      {
        if (++v25 == (const void **)v58) {
          goto LABEL_34;
        }
      }
    }
    if (v25 == (const void **)v58) {
LABEL_34:
    }
      operator new();
    if (!v26) {
      __cxa_bad_cast();
    }
    ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_124((uint64_t)v38, v26 + 5);
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  uint64_t v32 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_2;
  uint64_t v33 = &__block_descriptor_tmp_132;
  char v36 = a3;
  char v37 = a4;
  uint64_t v27 = (std::__shared_weak_count *)a2[1];
  uint64_t v34 = *a2;
  uint64_t v35 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v28 + 8) != 18)
    {
      if (++v28 == (const void **)v58) {
        goto LABEL_44;
      }
    }
  }
  if (v28 == (const void **)v58) {
LABEL_44:
  }
    operator new();
  if (!v29) {
    __cxa_bad_cast();
  }
  v32((uint64_t)v31, v29 + 3);
  if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
  {
    qmi::ClientRouter::get();
    operator new();
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Block_object_dispose(&v48, 8);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v57);
}

void sub_1C543ED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_118(uint64_t a1, _WORD *a2)
{
  LOWORD(v4) = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 57))
    {
      int v4 = *(_DWORD *)(v5 + 432);
      if (!v4) {
        goto LABEL_10;
      }
      uint64_t v6 = 432;
    }
    else
    {
      int v4 = *(_DWORD *)(v5 + 440);
      if (!v4) {
        goto LABEL_10;
      }
      uint64_t v6 = 440;
    }
    int v7 = (*(uint64_t (**)(void))(*(void *)(v5 + 24) + 96))();
    uint64_t v8 = 436;
    if (v7 == 1) {
      uint64_t v8 = v6;
    }
    int v4 = *(_DWORD *)(*(void *)(a1 + 40) + v8);
  }
LABEL_10:
  *a2 = v4;
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"tlv.fRtcpReportingInterval=", 27);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (unsigned __int16)*a2;
}

void sub_1C543EFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_124(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"tlv.fRtcpXrReportingInterval=", 29);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C543F0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_2(uint64_t a1, int *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = 432;
    if (*(unsigned char *)(a1 + 49))
    {
      int v4 = 2;
    }
    else
    {
      uint64_t v3 = 440;
      int v4 = 1;
    }
    if (*(_DWORD *)(*(void *)(a1 + 32) + v3)) {
      int v2 = 3;
    }
    else {
      int v2 = v4;
    }
  }
  *a2 = v2;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"tlv.fRtcpReportTypes=", 21);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1C543F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver30handleConfigureRTCPReportsRespERKN2ms27SessionConfigureRtcpReports8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    int v2 = *(std::__shared_weak_count **)(v1 + 136);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        int v4 = v3;
        uint64_t v5 = *(void *)(v1 + 128);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 48);
          char v7 = *(std::__shared_weak_count **)(v5 + 56);
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v8 = *(void *)(v6 + 296);
          if (v8) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v8 + 120), 11);
          }
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
  }
}

void sub_1C543F308(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::configureRTPLinkMonitorReq(void *a1, void *a2, __int16 a3)
{
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void **)(v6 + 8);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"configureRTPLinkMonitorReq", 26);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v33 < 0) {
      operator delete(aBlock);
    }
    if (v31 < 0) {
      operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"configureRTPLinkMonitorReq", 26);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v33 < 0) {
    operator delete(aBlock);
  }
  if (v31 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  char v24 = ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke;
  uint64_t v25 = &__block_descriptor_tmp_136;
  size_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  uint64_t v27 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)v28, 1);
  v24((uint64_t)v23, v15);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  void v21[2] = ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_137;
  v21[3] = &__block_descriptor_tmp_139;
  __int16 v22 = a3;
  uint64_t v16 = (const void **)v28[1];
  if (v28[1] != (void *)v29)
  {
    while (*((unsigned char *)*v16 + 8) != 16)
    {
      if (++v16 == (const void **)v29) {
        goto LABEL_21;
      }
    }
  }
  if (v16 == (const void **)v29) {
LABEL_21:
  }
    operator new();
  if (!v17) {
    __cxa_bad_cast();
  }
  ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_137((uint64_t)v21, v17 + 5);
  int InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
  int v19 = InstanceType;
  if (InstanceType)
  {
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>(&v20, v19);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_1C543F9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_137(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIRTPCommandDriver::configureRTCPLinkMonitorReq(void *a1, void *a2, __int16 a3)
{
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&aBlock);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void **)(v6 + 8);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"configureRTCPLinkMonitorReq", 27);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v33 < 0) {
      operator delete(aBlock);
    }
    if (v31 < 0) {
      operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"configureRTCPLinkMonitorReq", 27);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v33 < 0) {
    operator delete(aBlock);
  }
  if (v31 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  char v24 = ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke;
  uint64_t v25 = &__block_descriptor_tmp_142;
  size_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  uint64_t v27 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)v28, 1);
  v24((uint64_t)v23, v15);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  void v21[2] = ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_143;
  v21[3] = &__block_descriptor_tmp_145;
  __int16 v22 = a3;
  uint64_t v16 = (const void **)v28[1];
  if (v28[1] != (void *)v29)
  {
    while (*((unsigned char *)*v16 + 8) != 17)
    {
      if (++v16 == (const void **)v29) {
        goto LABEL_21;
      }
    }
  }
  if (v16 == (const void **)v29) {
LABEL_21:
  }
    operator new();
  if (!v17) {
    __cxa_bad_cast();
  }
  ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_143((uint64_t)v21, v17 + 5);
  int InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
  int v19 = InstanceType;
  if (InstanceType)
  {
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>(&v20, v19);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_1C544015C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_143(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIRTPCommandDriver::handleConfigureLinkMonitorResp(void *a1, unsigned __int16 *a2, void *a3)
{
  if (!*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)v28, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void **)(v6 + 8);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleConfigureLinkMonitorResp", 30);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v28, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::debug((uint64_t)v28, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleConfigureLinkMonitorResp", 30);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a3 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  int v14 = *((_DWORD *)a2 + 1);
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v15 = ims::error((uint64_t)v28, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v15 + 17) = 0;
    __n128 v16 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v24, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v15 + 32))(v15, v24, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v15 + 17) = 0;
    uint64_t v17 = (const char *)qmi::asString();
    size_t v18 = strlen(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)v17, v18);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    int v14 = 4;
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1174405120;
  void v21[2] = ___ZN19QMIRTPCommandDriver30handleConfigureLinkMonitorRespERKN2ms27SessionConfigureLinkMonitor8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_148_0;
  int v23 = v14;
  uint64_t v20 = *a3;
  int v19 = (std::__shared_weak_count *)a3[1];
  void v21[4] = a1;
  v21[5] = v20;
  __int16 v22 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_1C54406C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver30handleConfigureLinkMonitorRespERKN2ms27SessionConfigureLinkMonitor8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      int v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void **)(v2 + 128);
        if (v6)
        {
          uint64_t v7 = v6[6];
          uint64_t v8 = (std::__shared_weak_count *)v6[7];
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v9 = *(void *)(v7 + 296);
          if (v9) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 12);
          }
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          uint64_t v10 = *(std::__shared_weak_count **)(a1 + 48);
          uint64_t v11 = *(void *)(a1 + 40);
          uint64_t v12 = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QMIRTPStackController::sessionMediaError(v6, &v11, 5);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C5440804(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"[inactivityType=", 16);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1C5440938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (std::__shared_weak_count *)v2[17];
  if (v3)
  {
    char v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      char v6 = (QMIRTPStackController *)v2[16];
      if (v6)
      {
        int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v7 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v10 = ims::error((uint64_t)v16, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Baseband declared RTCP timeout", 30);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          uint64_t v9 = 6;
        }
        else
        {
          if (v7)
          {
            std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v11 = ims::error((uint64_t)v16, (uint64_t)__p);
            uint64_t v12 = (const char *)(*(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
            size_t v13 = strlen(v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
            *(unsigned char *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleSessionInactivityIndication_block_invoke_2", 48);
            *(unsigned char *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" unknown inactivty type [qmisessionId=", 38);
            *(unsigned char *)(v11 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" inactivityType=", 16);
            *(unsigned char *)(v11 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v11 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v11 + 17) = 0;
            if (v15 < 0) {
              operator delete(__p[0]);
            }
            if (v17 < 0) {
              operator delete(v16[0]);
            }
            goto LABEL_21;
          }
          std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v8 = ims::error((uint64_t)v16, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Baseband declared RTP timeout", 29);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v8 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          uint64_t v9 = 5;
        }
        QMIRTPStackController::sessionMediaError(v6, *(unsigned __int8 *)(a1 + 48), v9);
      }
LABEL_21:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5440CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver28handleServiceErrorIndicationERKN2ms12ServiceError10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    char v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      char v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6)
      {
        if (*(_DWORD *)(a1 + 40) == 4)
        {
          long long v10 = 0u;
          long long v11 = 0u;
          long long v12 = 0u;
          v8[0] = &unk_1F20B2680;
          v8[1] = &_bambiDomain;
          int v9 = 1073741846;
          int v7 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v8, "Fatal baseband driver error");
          ImsResult::ImsResult((ImsResult *)v13, v7);
          (*(void (**)(QMIRTPStackController *, unsigned char *))(*(void *)v6 + 48))(v6, v13);
          ImsResult::~ImsResult((ImsResult *)v13);
          ImsResult::~ImsResult((ImsResult *)v8);
        }
        else
        {
          QMIRTPStackController::sessionMediaError(v6, *(unsigned __int8 *)(a1 + 44), 9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5440E24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke(uint64_t result, int a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 1;
  return result;
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2(uint64_t a1, long long *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = &unk_1F20E0780;
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  char v17 = 0;
  uint64_t v18 = 0;
  __n128 v16 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1174405120;
  void v2[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_3;
  v2[3] = &unk_1F20CE400;
  long long v3 = *(_OWORD *)(a1 + 32);
  char v4 = &unk_1F20E0780;
  memset(v5, 0, sizeof(v5));
  long long v6 = v14;
  uint64_t v7 = v15;
  std::string __p = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(&__p, 0, 0, 0);
  ims::performBlock((IMSClientManager *)v2);
  char v4 = &unk_1F20E0780;
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  long long v11 = &unk_1F20E0780;
  if (v16)
  {
    char v17 = v16;
    operator delete(v16);
  }
}

void sub_1C5440FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v23 - 104) = v22;
  char v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(void *)(v23 - 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_3(void *a1)
{
  uint64_t v2 = a1[5];
  long long v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    char v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 128);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 48);
        uint64_t v8 = *(std::__shared_weak_count **)(v6 + 56);
        if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
        {
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          RTPManager::logLocalRTCPSRPacket(v7, (const RTCPSRPacket *)(a1 + 6));
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        else
        {
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v9 = (const RTCPSRPacket *)(a1 + 6);
          uint64_t v10 = *(void *)(v7 + 296);
          if (v10) {
            AnalyticsLogger::logRemoteRTCPSRPacket(*(AnalyticsLogger **)(v10 + 120), v9);
          }
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v11 = ims::spam((uint64_t)v14, (uint64_t)__p);
          (*(void (**)(const RTCPSRPacket *, uint64_t))(*(void *)v9 + 24))(v9, v11);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          if (v15 < 0) {
            operator delete(v14[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5441128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c18_ZTS12RTCPSRPacket(void *a1, uint64_t a2)
{
  a1[6] = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)((char *)a1 + 62) = *(void *)(a2 + 62);
  a1[6] = &unk_1F20E0780;
  a1[7] = v2;
  long long v3 = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  a1[12] = 0;
  uint64_t v5 = a1 + 12;
  *(v5 - 1) = v4;
  *(_OWORD *)(v5 - 3) = v3;
  v5[1] = 0;
  v5[2] = 0;
  return std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(v5, *(const void **)(a2 + 96), *(void *)(a2 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2));
}

void __destroy_helper_block_e8_48c18_ZTS12RTCPSRPacket(void *a1)
{
  a1[6] = &unk_1F20E0780;
  uint64_t v1 = (void *)a1[12];
  if (v1)
  {
    a1[13] = v1;
    operator delete(v1);
  }
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_168(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  char v30 = 0;
  __int16 v29 = 0;
  char v5 = *((unsigned char *)a2 + 8);
  int v6 = a2[7];
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  int v8 = *a2;
  int v7 = a2[1];
  uint64_t v20 = &unk_1F20E3660;
  LODWORD(v23) = v8;
  char v25 = 0;
  uint64_t v26 = 0;
  int v27 = v7;
  char v28 = v5;
  long long v31 = *(_OWORD *)(a2 + 3);
  int v32 = v6;
  RTCPReceiverReports::addReport(&v24, (long long *)&v27);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_169;
  v10[3] = &unk_1F20CE438;
  void v10[4] = *(void *)(a1 + 32);
  v10[5] = v4;
  v12[0] = 0;
  *(void *)((char *)v12 + 6) = 0;
  uint64_t v11 = &unk_1F20E3660;
  int v13 = v23;
  char v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(&__p, v24, (uint64_t)v25, 0x6DB6DB6DB6DB6DB7 * ((v25 - (unsigned char *)v24) >> 2));
  long long v9 = *((_OWORD *)a2 + 1);
  long long v17 = *(_OWORD *)a2;
  long long v18 = v9;
  int v19 = a2[8];
  ims::performBlock((IMSClientManager *)v10);
  uint64_t v11 = &unk_1F20E3660;
  if (__p)
  {
    char v15 = __p;
    operator delete(__p);
  }
  uint64_t v20 = &unk_1F20E3660;
  if (v24)
  {
    char v25 = v24;
    operator delete(v24);
  }
}

void sub_1C54413E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v22 - 136) = v21;
  char v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_169(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  long long v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      char v5 = v4;
      uint64_t v6 = *(void *)(v2 + 128);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 48);
        int v8 = *(std::__shared_weak_count **)(v6 + 56);
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
        {
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v9 = *(void *)(v7 + 296);
          if (v9) {
            AnalyticsLogger::logLocalRTCPRRPacket(*(AnalyticsLogger **)(v9 + 120), (const RTCPRRPacket *)(a1 + 48), *(_DWORD *)(a1 + 136));
          }
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        else
        {
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = *(void *)(v7 + 296);
          if (v10) {
            AnalyticsLogger::logRemoteRTCPRRPacket(*(AnalyticsLogger **)(v10 + 120), (const RTCPRRPacket *)(a1 + 48), *(_DWORD *)(a1 + 136));
          }
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v11 = ims::spam((uint64_t)v16, (uint64_t)__p);
          uint64_t v12 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 48) + 24))(a1 + 48, v11);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v12[17] = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v16, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v13 = ims::spam((uint64_t)v16, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"RoundTripTime: ", 15);
          *(unsigned char *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5441664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c18_ZTS12RTCPRRPacket(void *a1, uint64_t a2)
{
  a1[6] = &unk_1F20CFB40;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)((char *)a1 + 62) = *(void *)(a2 + 62);
  a1[6] = &unk_1F20E3660;
  a1[7] = v2;
  int v3 = *(_DWORD *)(a2 + 72);
  a1[10] = 0;
  uint64_t v4 = a1 + 10;
  *((_DWORD *)v4 - 2) = v3;
  v4[1] = 0;
  v4[2] = 0;
  return std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(v4, *(const void **)(a2 + 80), *(void *)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
}

void __destroy_helper_block_e8_48c18_ZTS12RTCPRRPacket(void *a1)
{
  a1[6] = &unk_1F20E3660;
  uint64_t v1 = (void *)a1[10];
  if (v1)
  {
    a1[11] = v1;
    operator delete(v1);
  }
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  memset(&v29, 0, sizeof(v29));
  std::string::basic_string[abi:ne180100]<0>(&v29, "");
  unint64_t v5 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a2 + 24) - *(void *)(a2 + 16) < v5) {
    LOWORD(v5) = *(_WORD *)(a2 + 24) - *(_WORD *)(a2 + 16);
  }
  if ((_WORD)v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned __int16)v5;
    do
      std::string::append(&v29, 1uLL, *(unsigned char *)(*(void *)(a2 + 16) + v6++));
    while (v7 != v6);
  }
  memset(v28, 0, sizeof(v28));
  int v8 = *(_DWORD *)(a2 + 4);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v29;
  }
  RTCPSDesItem::RTCPSDesItem((uint64_t)v28, v8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  LODWORD(v23) = *(_DWORD *)a2;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v20 = v28[0];
  char v21 = BYTE4(v28[0]);
  if (SHIBYTE(v28[1]) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)&v28[0] + 1), *(std::string::size_type *)&v28[1]);
  }
  else {
    std::string __p = *(std::string *)((char *)v28 + 8);
  }
  RTCPSDesInfo::addSDesItem((uint64_t)&v23, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v16 = 0uLL;
  char v15 = (void **)&unk_1F20E4F30;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v13 = v23;
  memset(v14, 0, sizeof(v14));
  std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v14, v24, v25, (v25 - v24) >> 5);
  RTCPSDesPacket::addSDesInfo((uint64_t *)&v15, (uint64_t)&v13);
  char v30 = (void **)v14;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v30);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_175;
  v9[3] = &unk_1F20CE470;
  v9[4] = *(void *)(a1 + 32);
  v9[5] = v4;
  v11[0] = v16;
  *(void *)((char *)v11 + 6) = *(void *)((char *)&v16 + 6);
  uint64_t v10 = &unk_1F20E4F30;
  memset(v12, 0, sizeof(v12));
  std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>((uint64_t)v12, v17, v18, (v18 - v17) >> 5);
  ims::performBlock((IMSClientManager *)v9);
  uint64_t v10 = &unk_1F20E4F30;
  char v30 = (void **)v12;
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v30);
  char v15 = (void **)&unk_1F20E4F30;
  char v30 = (void **)&v17;
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v30);
  char v15 = (void **)&v24;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(v28[1]) < 0) {
    operator delete(*((void **)&v28[0] + 1));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_1C5441A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (*(char *)(v37 - 97) < 0) {
    operator delete(*(void **)(v37 - 120));
  }
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_175(void *a1)
{
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v2 = a1[5];
    int v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        unint64_t v5 = v4;
        uint64_t v6 = *(void *)(v2 + 128);
        if (v6)
        {
          std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v7 = ims::spam((uint64_t)v15, (uint64_t)__p);
          int v8 = (unsigned char *)(*(uint64_t (**)(void *, uint64_t))(a1[6] + 24))(a1 + 6, v7);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v8[17] = 0;
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          if (v16 < 0) {
            operator delete(v15[0]);
          }
          uint64_t v9 = *(void *)(v6 + 48);
          uint64_t v10 = *(std::__shared_weak_count **)(v6 + 56);
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = *(void *)(v9 + 296);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 120);
            *(void *)(v12 + 536) = time(0);
          }
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C5441C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c20_ZTS14RTCPSDesPacket(void *a1, void *a2)
{
  a1[6] = &unk_1F20CFB40;
  uint64_t v2 = a2[7];
  uint64_t v3 = *(void *)((char *)a2 + 62);
  a1[9] = 0;
  *(void *)((char *)a1 + 62) = v3;
  a1[7] = v2;
  a1[6] = &unk_1F20E4F30;
  a1[10] = 0;
  a1[11] = 0;
  return std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>((uint64_t)(a1 + 9), a2[9], a2[10], (uint64_t)(a2[10] - a2[9]) >> 5);
}

void __destroy_helper_block_e8_48c20_ZTS14RTCPSDesPacket(uint64_t a1)
{
  *(void *)(a1 + 48) = &unk_1F20E4F30;
  uint64_t v1 = (void **)(a1 + 72);
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_179(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 4;
  uint64_t v8 = a2;
  uint64_t v6 = &unk_1F20C8010;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_180;
  void v3[3] = &unk_1F20CE4A8;
  uint64_t v2 = *(void *)(a1 + 32);
  int v4 = 4;
  void v3[4] = v2;
  v3[5] = &unk_1F20C8010;
  uint64_t v5 = a2;
  ims::performBlock((IMSClientManager *)v3);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_180(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::spam((uint64_t)v5, (uint64_t)__p);
    (**(void (***)(uint64_t, uint64_t))(a1 + 40))(a1 + 40, v2);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
  }
}

void sub_1C5441EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c39_ZTS33RTCPXRReceiverReferenceTimeReport(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(result + 40) = &unk_1F20C8010;
  *(void *)(result + 56) = *(void *)(a2 + 56);
  return result;
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v10 = 5;
  uint64_t v11 = a2;
  uint64_t v9 = &unk_1F20BF140;
  int v12 = a3;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 1174405120;
  v3[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_189;
  void v3[3] = &__block_descriptor_tmp_190;
  int v4 = 5;
  void v3[4] = &unk_1F20BF140;
  int v6 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  ims::performBlock((IMSClientManager *)v3);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_189(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::spam((uint64_t)v6, (uint64_t)__p);
  (**(void (***)(uint64_t, uint64_t))(a1 + 32))(a1 + 32, v2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::spam((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"RoundTripTime: ", 15);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1C5442180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c22_ZTS16RTCPXRDLRRReport(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = &unk_1F20BF140;
  uint64_t v2 = *(void *)(a2 + 44);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(result + 44) = v2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(*(void *)(result + 32) + 490);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_194(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  int v4 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    if (v4)
    {
      char v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        int v6 = v5;
        uint64_t v7 = *(void *)(v2 + 128);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 48);
          uint64_t v9 = *(std::__shared_weak_count **)(v7 + 56);
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = *(void *)(v8 + 296);
          if (v10) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v10 + 120), 14);
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    std::__list_imp<unsigned long long>::clear((void *)(v2 + 80));
  }
  else if (v4)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v4);
    if (v11)
    {
      int v12 = v11;
      if (*(void *)(v2 + 128) && !*(unsigned char *)(v2 + 104))
      {
        *(unsigned char *)(v2 + 104) = 1;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
        uint64_t v14 = *(void *)(v2 + 144);
        std::string::basic_string[abi:ne180100]<0>(v34, "rtp.qmidriver");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v15 = ims::debug((uint64_t)v34, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"QMIRTPCommandDriver::handleSendDTMFResp DispatchInFlight DTMF digit queue size: ", 80);
        *(unsigned char *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" elapsed (ms): ", 15);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v16 = rep / 1000 - v14;
        *(unsigned char *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        if (v35 < 0) {
          operator delete(v34[0]);
        }
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = *(unsigned __int8 *)(v17 + 473);
        int v19 = *(_DWORD *)(v17 + 476);
        if (v19 + v18 >= v16)
        {
          uint64_t v22 = *(void *)(v2 + 128);
          char v21 = *(std::__shared_weak_count **)(v2 + 136);
          if (v21)
          {
            atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v23 = *(void *)(a1 + 40);
            int v18 = *(unsigned __int8 *)(v23 + 473);
            int v19 = *(_DWORD *)(v23 + 476);
          }
          dispatch_time_t v24 = dispatch_time(0, 1000000 * (v18 - v16 + v19));
          uint64_t v25 = *(NSObject **)(v2 + 112);
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 1174405120;
          v27[2] = ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2;
          v27[3] = &__block_descriptor_tmp_203;
          v27[4] = v22;
          char v28 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v26 = *(std::__shared_weak_count **)(a1 + 48);
          uint64_t v29 = *(void *)(a1 + 40);
          char v30 = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          dispatch_after(v24, v25, v27);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if (v28) {
            std::__shared_weak_count::__release_weak(v28);
          }
          if (v21) {
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          int v20 = *(std::__shared_weak_count **)(a1 + 48);
          v31[0] = v17;
          v31[1] = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QMIRTPCommandDriver::processDTMFDigitQueue(v2, v31);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C544255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::processDTMFDigitQueue(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v22 = ims::error((uint64_t)&v51, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v23 = v22;
    dispatch_time_t v24 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = *(void **)(v22 + 8);
    size_t v26 = strlen(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v24, v26);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"processDTMFDigitQueue", 21);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v51, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  int v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"processDTMFDigitQueue", 21);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  *(unsigned char *)(a1 + 104) = 0;
  if (!*(void *)(a1 + 96))
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v23 = ims::debug((uint64_t)&v51, (uint64_t)__p);
    int v27 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v28 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)v27, v28);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"processDTMFDigitQueue", 21);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" doesn't have any digits in the queue", 37);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(unsigned char *)(v23 + 17) = 0;
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
    return;
  }
  char v8 = *(unsigned char *)(*(void *)(a1 + 88) + 16);
  std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)&v51, (uint64_t)__p);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"processDTMFDigitQueue", 21);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [size=", 7);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" digit=", 7);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 88);
  uint64_t v12 = *v11;
  *(void *)(v12 + 8) = v11[1];
  *(void *)v11[1] = v12;
  --*(void *)(a1 + 96);
  operator delete(v11);
  uint64_t v14 = *a2;
  int v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *a2;
  }
  if (v14)
  {
    char v16 = *(unsigned char *)(v15 + 472);
    __int16 v17 = *(unsigned __int8 *)(v15 + 473);
    std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::debug((uint64_t)&v51, (uint64_t)__p);
    size_t v19 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"sendDTMFReq", 11);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(void))(*(void *)(v14 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
    long long v49 = 0u;
    long long v50 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v49);
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    uint64_t v45 = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke;
    char v46 = &__block_descriptor_tmp_193;
    uint64_t v47 = v14;
    uint64_t v48 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v20 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((uint64_t)&v49, 1);
    v45((uint64_t)__p, v20);
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 0x40000000;
    void v42[2] = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_194;
    v42[3] = &__block_descriptor_tmp_196;
    char v43 = v8;
    char v21 = (const void **)*((void *)&v49 + 1);
    if (*((void *)&v49 + 1) != (void)v50)
    {
      while (*((unsigned char *)*v21 + 8) != 2)
      {
        if (++v21 == (const void **)v50) {
          goto LABEL_39;
        }
      }
    }
    if (v21 == (const void **)v50) {
LABEL_39:
    }
      operator new();
    if (!v29) {
      goto LABEL_66;
    }
    ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_194((uint64_t)v42, v29 + 9);
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 0x40000000;
    void v40[2] = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2;
    v40[3] = &__block_descriptor_tmp_198;
    char v41 = v16;
    char v33 = (const void **)*((void *)&v49 + 1);
    if (*((void *)&v49 + 1) != (void)v50)
    {
      while (*((unsigned char *)*v33 + 8) != 3)
      {
        if (++v33 == (const void **)v50) {
          goto LABEL_47;
        }
      }
    }
    if (v33 == (const void **)v50) {
LABEL_47:
    }
      operator new();
    if (!v34) {
      goto LABEL_66;
    }
    ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2((uint64_t)v40, v34 + 9);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 0x40000000;
    std::string v38[2] = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3;
    v38[3] = &__block_descriptor_tmp_200;
    __int16 v39 = v17;
    char v35 = (const void **)*((void *)&v49 + 1);
    if (*((void *)&v49 + 1) != (void)v50)
    {
      while (*((unsigned char *)*v35 + 8) != 4)
      {
        if (++v35 == (const void **)v50) {
          goto LABEL_55;
        }
      }
    }
    if (v35 == (const void **)v50) {
LABEL_55:
    }
      operator new();
    if (!v36) {
LABEL_66:
    }
      __cxa_bad_cast();
    ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3((uint64_t)v38, v36 + 5);
    *(void *)(a1 + 144) = std::chrono::system_clock::now().__d_.__rep_ / 1000;
    if (QMIRTPCommandDriver::getInstanceType((void *)a1, (void **)(v14 + 80)))
    {
      qmi::ClientRouter::get();
      operator new();
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v49);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v30 = ims::error((uint64_t)&v51, (uint64_t)__p);
    long long v31 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    size_t v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)v31, v32);
    *(unsigned char *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"sendDTMFReq", 11);
    *(unsigned char *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5443574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (*(char *)(v37 - 161) < 0) {
    operator delete(*(void **)(v37 - 184));
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 336);
        size_t v7 = *(std::__shared_weak_count **)(v5 + 344);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = a1[6];
        uint64_t v9 = (std::__shared_weak_count *)a1[7];
        v10[0] = v8;
        v10[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMIRTPCommandDriver::processDTMFDigitQueue(v6, v10);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5443760(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrI21QMIRTPStackControllerEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrI21QMIRTPStackControllerEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void QMIRTPCommandDriver::sendDTMFDigit(uint64_t a1, void *a2, char a3)
{
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v26, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void **)(v6 + 8);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"sendDTMFDigit", 13);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(*(void *)(*a2 + 24) + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" digit=", 7);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    size_t v10 = operator new(0x18uLL);
    v10[16] = a3;
    uint64_t v11 = *(void *)(a1 + 80);
    *(void *)size_t v10 = v11;
    *((void *)v10 + 1) = a1 + 80;
    *(void *)(v11 + 8) = v10;
    *(void *)(a1 + 80) = v10;
    ++*(void *)(a1 + 96);
    if (!*(unsigned char *)(a1 + 104))
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v12 = ims::debug((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"LegacyQMIRTPCommandDriver::sendDTMFDigit DispatchInFlight DTMF digit queue size: ", 81);
      *(unsigned char *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      *(unsigned char *)(a1 + 104) = 1;
      dispatch_time_t v13 = dispatch_time(0, 1000000 * (*(_DWORD *)(*a2 + 476) + *(unsigned __int8 *)(*a2 + 473)));
      uint64_t v14 = *(NSObject **)(a1 + 112);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN19QMIRTPCommandDriver13sendDTMFDigitENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke;
      block[3] = &__block_descriptor_tmp_211;
      uint64_t v16 = *a2;
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      block[4] = a1;
      block[5] = v16;
      uint64_t v23 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_after(v13, v14, block);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v17 = ims::error((uint64_t)v26, (uint64_t)__p);
    if (!a1) {
      __cxa_bad_typeid();
    }
    uint64_t v18 = v17;
    size_t v19 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    int v20 = *(void **)(v17 + 8);
    size_t v21 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v19, v21);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"sendDTMFDigit", 13);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
}

void sub_1C5443C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver13sendDTMFDigitENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v4[0] = a1[5];
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::processDTMFDigitQueue(v2, v4);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5443D50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QMIRTPCommandDriver::uninitializeAllSessionsReq(void *a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  uint64_t v6 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" apnType=", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v54 < 0) {
    operator delete(aBlock);
  }
  if (v52 < 0) {
    operator delete(__p);
  }
  *(_OWORD *)long long v49 = 0u;
  long long v50 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v49);
  if (a3 != 255)
  {
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 0x40000000;
    v47[2] = ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke;
    v47[3] = &__block_descriptor_tmp_227;
    int v48 = a3;
    size_t v10 = (const void **)v49[1];
    if (v49[1] != (void *)v50)
    {
      while (*((unsigned char *)*v10 + 8) != 16)
      {
        if (++v10 == (const void **)v50) {
          goto LABEL_14;
        }
      }
    }
    if (v10 == (const void **)v50) {
LABEL_14:
    }
      operator new();
    if (!v11) {
      __cxa_bad_cast();
    }
    ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke((uint64_t)v47, v11 + 3);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[17];
  if (v12)
  {
    dispatch_time_t v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      char v43 = v13;
      uint64_t v14 = a1[16];
      if (v14)
      {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(a2 + 8);
        }
        if (v15 == 15
          && (v16 >= 0 ? (uint64_t v17 = (uint64_t *)a2) : (uint64_t v17 = *(uint64_t **)a2),
              (v18 = *v17, uint64_t v19 = *(uint64_t *)((char *)v17 + 7), v18 == 0x536C6C41494D516BLL)
            ? (BOOL v20 = v19 == 0x736E6F6973736553)
            : (BOOL v20 = 0),
              v20))
        {
          long long v31 = *(void **)(v14 + 120);
          if (v31 != (void *)(v14 + 128))
          {
            size_t v32 = (uint64_t *)(v14 + 152);
            do
            {
              uint64_t v46 = 0;
              memset(v45, 0, sizeof(v45));
              if (*((char *)v31 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v45, (const std::string::value_type *)v31[4], v31[5]);
              }
              else
              {
                *(_OWORD *)uint64_t v45 = *((_OWORD *)v31 + 2);
                *(void *)&v45[16] = v31[6];
              }
              *(void *)&v45[24] = v31[7];
              LODWORD(v46) = *((_DWORD *)v31 + 16);
              std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
              uint64_t v33 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
              size_t v34 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v34);
              *(unsigned char *)(v33 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"::", 2);
              *(unsigned char *)(v33 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
              *(unsigned char *)(v33 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" [instance=", 11);
              *(unsigned char *)(v33 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v33 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v33 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v33 + 17) = 0;
              if (v54 < 0) {
                operator delete(aBlock);
              }
              if (v52 < 0) {
                operator delete(__p);
              }
              if (v46) {
                int v35 = 2 * (v46 == 1);
              }
              else {
                int v35 = 1;
              }
              if (v35)
              {
                uint64_t v36 = *v32;
                if (*v32)
                {
                  uint64_t v37 = v14 + 152;
                  do
                  {
                    unsigned int v38 = *(_DWORD *)(v36 + 28);
                    BOOL v39 = v38 >= v46;
                    if (v38 >= v46) {
                      uint64_t v40 = (uint64_t *)v36;
                    }
                    else {
                      uint64_t v40 = (uint64_t *)(v36 + 8);
                    }
                    if (v39) {
                      uint64_t v37 = v36;
                    }
                    uint64_t v36 = *v40;
                  }
                  while (*v40);
                  if ((uint64_t *)v37 != v32 && *(_DWORD *)(v37 + 28) <= v46 && *(_DWORD *)(v37 + 32) == 2)
                  {
                    qmi::ClientRouter::get();
                    qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>(&v44, v35);
                  }
                }
              }
              QMIRTPStackController::handleStackUninitializeAllSessions(v14, a2, a3);
              if ((v45[23] & 0x80000000) != 0) {
                operator delete(*(void **)v45);
              }
              char v41 = (void *)v31[1];
              if (v41)
              {
                do
                {
                  size_t v42 = v41;
                  char v41 = (void *)*v41;
                }
                while (v41);
              }
              else
              {
                do
                {
                  size_t v42 = (void *)v31[2];
                  BOOL v20 = *v42 == (void)v31;
                  long long v31 = v42;
                }
                while (!v20);
              }
              long long v31 = v42;
            }
            while (v42 != (void *)(v14 + 128));
          }
        }
        else
        {
          QMIRTPStackController::getProfileByStackId(a1[16], (void **)a2);
          unsigned int v22 = v21;
          if ((v21 & 0xFF00000000) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
            uint64_t v23 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
            size_t v24 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" [instance=", 11);
            *(unsigned char *)(v23 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"]", 1);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v23 + 17) = 0;
            if (v54 < 0) {
              operator delete(aBlock);
            }
            if (v52 < 0) {
              operator delete(__p);
            }
            if (v22) {
              int v25 = 2 * (v22 == 1);
            }
            else {
              int v25 = 1;
            }
            if (v25)
            {
              uint64_t v26 = *(void *)(v14 + 152);
              if (v26)
              {
                uint64_t v27 = v14 + 152;
                do
                {
                  unsigned int v28 = *(_DWORD *)(v26 + 28);
                  BOOL v29 = v28 >= v22;
                  if (v28 >= v22) {
                    uint64_t v30 = (uint64_t *)v26;
                  }
                  else {
                    uint64_t v30 = (uint64_t *)(v26 + 8);
                  }
                  if (v29) {
                    uint64_t v27 = v26;
                  }
                  uint64_t v26 = *v30;
                }
                while (*v30);
                if (v27 != v14 + 152 && *(_DWORD *)(v27 + 28) <= v22 && *(_DWORD *)(v27 + 32) == 2)
                {
                  qmi::ClientRouter::get();
                  qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>(v45, v25);
                }
              }
            }
          }
          QMIRTPStackController::handleStackUninitializeAllSessions(v14, a2, a3);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v49);
}

void sub_1C544488C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  uint64_t v44 = a18;
  a18 = 0;
  if (v44) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a18, v44);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a30);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void QMIRTPCommandDriver::handleUninitializeAllSessionsResp(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *((_DWORD *)a2 + 1);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v5 = ims::error((uint64_t)v15, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v5 + 17) = 0;
    __n128 v6 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)__p, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v5 + 32))(v5, __p, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v7 = (const char *)qmi::asString();
    size_t v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)v7, v8);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    int v3 = 4;
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN19QMIRTPCommandDriver33handleUninitializeAllSessionsRespERKN2ms30ServiceUninitializeAllSessions8ResponseEh_block_invoke;
  v9[3] = &__block_descriptor_tmp_229;
  v9[4] = a1;
  int v10 = v3;
  ims::performBlock((IMSClientManager *)v9);
}

void sub_1C5444BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver33handleUninitializeAllSessionsRespERKN2ms30ServiceUninitializeAllSessions8ResponseEh_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  int v3 = *(std::__shared_weak_count **)(v1 + 136);
  if (v2)
  {
    if (!v3) {
      return;
    }
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (!v4) {
      return;
    }
    uint64_t v5 = v4;
    __n128 v6 = *(int8x8_t **)(v1 + 128);
    if (v6) {
      QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(v6, 1);
    }
  }
  else
  {
    if (!v3) {
      return;
    }
    uint64_t v7 = std::__shared_weak_count::lock(v3);
    if (!v7) {
      return;
    }
    uint64_t v5 = v7;
    size_t v8 = *(int8x8_t **)(v1 + 128);
    if (v8) {
      QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(v8, 0);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C5444CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 128);
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "kQMIAllSessionsOnAPN");
        QMIRTPStackController::handleStackUninitializeAllSessions(v6, (uint64_t)__p, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5444D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

unsigned char *___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke(unsigned char *result, unsigned char *a2)
{
  *a2 = result[32];
  if (result[33]) {
    char v2 = 9;
  }
  else {
    char v2 = 2;
  }
  a2[1] = v2;
  a2[2] = result[34];
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 36);
  return result;
}

void ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_3(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)&__p);
  if (!v3) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleSendAudioCallEventResp", 28);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  BOOL v8 = *(_DWORD *)(a2 + 4) != 0;
  memset(&__p, 0, sizeof(__p));
  size_t v9 = (char *)qmi::asString();
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  v10[0] = (void *)MEMORY[0x1E4F143A8];
  v10[1] = (void *)1174405120;
  uint64_t v11 = ___ZN19QMIRTPCommandDriver28handleSendAudioCallEventRespERKN5audio13SendCallEvent8ResponseE_block_invoke;
  char v12 = &__block_descriptor_tmp_246;
  dispatch_time_t v13 = v3;
  BOOL v15 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  ims::performBlock((IMSClientManager *)v10);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5444FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver28handleSendAudioCallEventRespERKN5audio13SendCallEvent8ResponseE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!v1) {
      __cxa_bad_typeid();
    }
    uint64_t v4 = v3;
    uint64_t v5 = *(void **)(v3 + 8);
    size_t v6 = strlen((const char *)(*(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handleSendAudioCallEventResp_block_invoke", 41);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" Error  ", 8);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a1 + 40);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    size_t v7 = (std::__shared_weak_count *)v1[17];
    if (v7)
    {
      BOOL v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        size_t v9 = v8;
        uint64_t v10 = v1[16];
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 48);
          char v12 = *(std::__shared_weak_count **)(v10 + 56);
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = *(void *)(v11 + 296);
          if (v13) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v13 + 120), 19);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v20, (uint64_t)__p);
    if (!v1) {
      __cxa_bad_typeid();
    }
    uint64_t v15 = v14;
    char v16 = *(void **)(v14 + 8);
    size_t v17 = strlen((const char *)(*(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handleSendAudioCallEventResp_block_invoke", 41);
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" Success", 8);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_1C5445338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unsigned int v22 = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

__n128 QMIRTPCommandDriver::nameForRequestId(QMIRTPCommandDriver *this, int a2)
{
  uint64_t v3 = this;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(this, "Unknown");
  uint64_t v5 = "ServiceSubscribeNotifications";
  std::string::size_type v6 = 29;
  switch(a2)
  {
    case '>':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 11;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 11;
      }
      strcpy((char *)v3, "ServiceBind");
      return result;
    case '?':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 17;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 101;
      BOOL v8 = (__n128 *)"ServiceInitialize";
      goto LABEL_66;
    case '@':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 19;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 19;
      }
      *(_DWORD *)((char *)v3 + 15) = 1702521196;
      size_t v9 = (__n128 *)"ServiceUninitialize";
      goto LABEL_47;
    case 'A':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 17;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 101;
      BOOL v8 = (__n128 *)"SessionInitialize";
      goto LABEL_66;
    case 'B':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 19;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 19;
      }
      *(_DWORD *)((char *)v3 + 15) = 1702521196;
      size_t v9 = (__n128 *)"SessionUninitialize";
LABEL_47:
      __n128 result = *v9;
      *(__n128 *)uint64_t v3 = *v9;
      *((unsigned char *)v3 + 19) = 0;
      return result;
    case 'C':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 16;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 16;
      }
      uint64_t v10 = (__n128 *)"SessionConfigure";
      goto LABEL_52;
    case 'D':
      uint64_t v5 = "SessionSetStreamDirection";
      std::string::size_type v6 = 25;
      goto LABEL_36;
    case 'E':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 17;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 99;
      BOOL v8 = (__n128 *)"ServiceStartCodec";
LABEL_66:
      __n128 result = *v8;
      *(__n128 *)uint64_t v3 = *v8;
      return result;
    case 'F':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 16;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 16;
      }
      uint64_t v10 = (__n128 *)"ServiceStopCodec";
LABEL_52:
      __n128 result = *v10;
      *(__n128 *)uint64_t v3 = *v10;
      *((unsigned char *)v3 + 16) = 0;
      return result;
    case 'G':
      uint64_t v5 = "SessionConfigureRTCPReports";
      std::string::size_type v6 = 27;
      goto LABEL_36;
    case 'H':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 20;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 20;
      }
      result.n128_u64[0] = *(void *)"ConfigureLinkMonitor";
      strcpy((char *)v3, "ConfigureLinkMonitor");
      return result;
    case 'I':
      goto LABEL_36;
    case 'J':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 22;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 22;
      }
      result.n128_u64[0] = *(void *)"ServiceErrorIndication";
      strcpy((char *)v3, "ServiceErrorIndication");
      return result;
    case 'K':
      uint64_t v5 = "ServiceRTCPreportsIndication";
      std::string::size_type v6 = 28;
      goto LABEL_36;
    case 'L':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 8;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 8;
      }
      unsigned int v11 = 1684956499;
      goto LABEL_63;
    case 'M':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 9;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 9;
      }
      strcpy((char *)v3, "StartDTMF");
      return result;
    case 'N':
      if (*((char *)v3 + 23) < 0)
      {
        *((void *)v3 + 1) = 8;
        uint64_t v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((unsigned char *)v3 + 23) = 8;
      }
      unsigned int v11 = 1886352467;
LABEL_63:
      *(void *)uint64_t v3 = v11 | 0x464D544400000000;
      *((unsigned char *)v3 + 8) = 0;
      break;
    case 'O':
      uint64_t v5 = "ServiceUninitializeAllSessions";
      std::string::size_type v6 = 30;
LABEL_36:
      std::string::__assign_external((std::string *)v3, v5, v6);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::error((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Couldn't find a QMI MS_EXT request with id: ", 44);
      *(unsigned char *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      break;
  }
  return result;
}

void sub_1C5445800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver26registerAudioCodecChangeCbEj_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN19QMIRTPCommandDriver26registerAudioCodecChangeCbEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    char v2 = (char *)qmi::asString();
    std::string::basic_string[abi:ne180100]<0>(v9, v2);
    std::string::basic_string[abi:ne180100]<0>(v7, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Failed to register audio codec change callback. Error ", 54);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    uint64_t v4 = ims::debug((uint64_t)v9, (uint64_t)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Succesfully registered audio codec change callback", 50);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_1C5445A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver25setDownlinkDtmfIndicationEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(tlv **)(a1 + 32);
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  char v17 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  char v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, __int16 *))___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke;
  unsigned int v11 = &unk_1E6510AB0;
  char v12 = v16;
  char v13 = v14;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  char v6 = TlvValue;
  if (TlvValue)
  {
    int v7 = v5;
    v8[0] = TlvValue;
    __int16 v18 = tlv::parseV<audio::tlv::DtmfEvent>(v8, v5);
    if (v8[0]) {
      v10((uint64_t)v9, &v18);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 1, v6, v7);
    }
  }
  v8[0] = (tlv *)MEMORY[0x1E4F143A8];
  v8[1] = (tlv *)0x40000000;
  void v8[2] = (tlv *)___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke_2;
  v8[3] = (tlv *)&unk_1E6510AD8;
  v8[4] = (tlv *)v14;
  v8[5] = (tlv *)v16;
  v8[6] = v3;
  ims::performBlock((IMSClientManager *)v8);
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v16, 8);
}

void sub_1C5445C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

void ___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = v4;
      char v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6) {
        QMIRTPStackController::handleDownlinkDtmf(v6, *(unsigned char *)(*(void *)(a1[4] + 8) + 24), *(unsigned char *)(*(void *)(a1[5] + 8) + 24));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5445CF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = std::vector<RTCPReceiverReport>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C5445D74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<RTCPReceiverReport>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void *std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<RTCPSDesItem>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RTCPSDesItem>,RTCPSDesItem*,RTCPSDesItem*,RTCPSDesItem*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C5445E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<RTCPSDesItem>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RTCPSDesItem>,RTCPSDesItem*,RTCPSDesItem*,RTCPSDesItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a2 != a3)
  {
    char v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v8 = (uint64_t)v6 - 8;
      int v7 = *((_DWORD *)v6 - 2);
      *(unsigned char *)(v4 + 4) = *((unsigned char *)v6 - 4);
      *(_DWORD *)uint64_t v4 = v7;
      uint64_t v9 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v15;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 32;
      uint64_t v15 = v4;
      v6 += 2;
    }
    while (v8 + 32 != a3);
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C5445FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 32;
  }
}

void std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<RTCPSDesItem>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<RTCPSDesItem>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = (void *)result;
    if (a4 >> 59) {
      std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
    }
    int v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(result + 16, a4);
    uint64_t v8 = v7;
    void *v4 = v7;
    v4[1] = v7;
    void v4[2] = &v7[4 * v9];
    char v12 = v7;
    uint64_t v13 = v7;
    v10[0] = v4 + 2;
    v10[1] = &v12;
    void v10[2] = &v13;
    uint64_t v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_DWORD *)int v7 = *(_DWORD *)a2;
        v7[2] = 0;
        v7[3] = 0;
        v7[1] = 0;
        std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v7 + 1, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
        int v7 = v13 + 4;
        v13 += 4;
        a2 += 32;
      }
      while (a2 != a3);
      uint64_t v8 = v7;
    }
    LOBYTE(v11) = 1;
    __n128 result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesInfo>,RTCPSDesInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v4[1] = v8;
  }
  return result;
}

void sub_1C54461EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesInfo>,RTCPSDesInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v4 = v3 - 32;
        char v6 = (void **)(v3 - 24);
        std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 32;
        int v7 = (void **)(v4 - 24);
        std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio12DownlinkDtmf8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    char v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      char v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5446470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE6D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE6D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  int v3 = *a2 == 2;
  std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v28, (uint64_t)&__p);
  if (!v2) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  char v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"started", 7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v29) < 0) {
    operator delete((void *)v28);
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[17];
  if (!v8)
  {
    uint64_t v9 = 0;
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v22 = ims::error((uint64_t)&v28, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_36;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v8);
  if (!v9) {
    goto LABEL_35;
  }
  uint64_t v10 = v2[16];
  if (!v10) {
    goto LABEL_35;
  }
  uint64_t v11 = *(void **)(v10 + 120);
  char v12 = (void *)(v10 + 128);
  if (v11 != (void *)(v10 + 128))
  {
    int v13 = 0;
    while (1)
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      if (*((char *)v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v28, (const std::string::value_type *)v11[4], v11[5]);
      }
      else
      {
        long long v28 = *((_OWORD *)v11 + 2);
        *(void *)&long long v29 = v11[6];
      }
      LODWORD(v30) = *((_DWORD *)v11 + 16);
      *((void *)&v29 + 1) = v11[7];
      int v14 = HIDWORD(v29);
      int v15 = v30;
      if (v30 == v3) {
        int v13 = HIDWORD(v29);
      }
      if (SBYTE7(v29) < 0) {
        operator delete((void *)v28);
      }
      if (v15 == v3) {
        break;
      }
      char v16 = (void *)v11[1];
      if (v16)
      {
        do
        {
          char v17 = v16;
          char v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = (void *)v11[2];
          BOOL v18 = *v17 == (void)v11;
          uint64_t v11 = v17;
        }
        while (!v18);
      }
      uint64_t v11 = v17;
      if (v17 == v12)
      {
        if (v13) {
          goto LABEL_26;
        }
        goto LABEL_44;
      }
    }
    if (v14)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v19 = ims::debug((uint64_t)&v28, (uint64_t)&__p);
      size_t v20 = strlen((const char *)(*(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), *(void *)(*(void *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v20);
      *(unsigned char *)(v19 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v19 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"serviceBindReq", 14);
      *(unsigned char *)(v19 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" [instance=", 11);
      *(unsigned char *)(v19 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v19 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v32 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v29) < 0) {
        operator delete((void *)v28);
      }
      *(_OWORD *)uint64_t v26 = 0u;
      long long v27 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v26);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      void v24[2] = ___ZN19QMIRTPCommandDriver14serviceBindReqEj_block_invoke;
      v24[3] = &__block_descriptor_tmp_33;
      int v25 = v3;
      uint64_t v21 = (const void **)v26[1];
      if (v26[1] != (void *)v27)
      {
        while (*((unsigned char *)*v21 + 8) != 1)
        {
          if (++v21 == (const void **)v27) {
            goto LABEL_48;
          }
        }
      }
      if (v21 != (const void **)v27)
      {
        if (v23)
        {
          ___ZN19QMIRTPCommandDriver14serviceBindReqEj_block_invoke((uint64_t)v24, v23 + 3);
          qmi::ClientRouter::get();
          operator new();
        }
        __cxa_bad_cast();
      }
LABEL_48:
      operator new();
    }
  }
LABEL_44:
  std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v22 = ims::error((uint64_t)&v28, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"QMI client is supposed to start only after VSID is retrieved. Do not proceed with Service Bind request.", 103);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_36:
  *(unsigned char *)(v22 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v29) < 0) {
    operator delete((void *)v28);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5446DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (a11) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v36, a11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void *std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE760;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!v1) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"stopped", 7);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::error((uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"driver on instance", 18);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" has stopped!", 13);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  size_t v7 = (std::__shared_weak_count *)v1[17];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = v1[16];
      if (v10)
      {
        std::__list_imp<unsigned long long>::clear(v1 + 10);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        __p[0] = &unk_1F20B2680;
        __p[1] = &_bambiDomain;
        int v13 = 1073741846;
        uint64_t v11 = (const std::string *)ImsResult::operator<<<char [56]>((uint64_t)__p, "Baseband driver stopped, the baseband probably crashed.");
        ImsResult::ImsResult((ImsResult *)v18, v11);
        (*(void (**)(uint64_t, void **))(*(void *)v10 + 48))(v10, v18);
        ImsResult::~ImsResult((ImsResult *)v18);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C54472E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE7E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE7E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::error((uint64_t)v13, (uint64_t)__p);
  if (!v1) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"serverError", 11);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[17];
  if (v6)
  {
    size_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)v1[16];
      if (v9)
      {
        uint64_t v10 = v9[6];
        uint64_t v11 = (std::__shared_weak_count *)v9[7];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = *(void *)(v10 + 296);
        if (v12) {
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v12 + 120), 3);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        std::__list_imp<unsigned long long>::clear(v1 + 10);
        long long v16 = 0u;
        long long v18 = 0u;
        long long v17 = 0u;
        v13[0] = &unk_1F20B2680;
        v13[1] = &_bambiDomain;
        int v14 = 0x40000000;
        (*(void (**)(void *, void **))(*v9 + 48))(v9, v13);
        ImsResult::~ImsResult((ImsResult *)v13);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5447680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE860;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v36, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v36);
    if (__p)
    {
      uint64_t v43 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v36);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  unsigned int v7 = v4 == 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)&v47);
  if (!v6) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"handleServiceInitializeIndication", 33);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v49) < 0) {
    operator delete(v47);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  if (v37)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    uint64_t v12 = ims::error((uint64_t)&__p, (uint64_t)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v12 + 17) = 0;
    __n128 v13 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v51, v36[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v12 + 32))(v12, v51, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v12 + 17) = 0;
    int v14 = (const char *)qmi::asString();
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(v47);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
    long long v16 = (std::__shared_weak_count *)v6[17];
    if (v16)
    {
      long long v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        long long v18 = v17;
        uint64_t v19 = v6[16];
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 48);
          uint64_t v21 = *(std::__shared_weak_count **)(v19 + 56);
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = *(void *)(v20 + 296);
          if (v22) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v22 + 120), 24);
          }
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    int v23 = 4;
  }
  else
  {
    uint64_t v47 = 0;
    int v48 = &v47;
    uint64_t v49 = 0x2000000000;
    int v50 = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v43 = 0x40000000;
    uint64_t v44 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17ServiceInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    uint64_t v45 = &unk_1E6510B78;
    uint64_t v46 = &v47;
    v51[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v36, v51);
    if (*((_DWORD *)v48 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      uint64_t v24 = ims::error((uint64_t)v51, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v24 + 17) = 0;
      __n128 v25 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v38, v36[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v24 + 32))(v24, v38, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v24 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v24 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v24 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      uint64_t v24 = ims::spam((uint64_t)v51, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v24 + 17) = 0;
      __n128 v26 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v38, v36[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v24 + 32))(v24, v38, v26);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    int v23 = *((_DWORD *)v48 + 6);
    _Block_object_dispose(&v47, 8);
  }
  long long v27 = (std::__shared_weak_count *)v6[17];
  if (v27)
  {
    long long v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      long long v29 = v28;
      uint64_t v30 = v6[16];
      if (v30)
      {
        uint64_t v31 = *(void *)(v30 + 152);
        if (v31)
        {
          uint64_t v32 = v30 + 152;
          do
          {
            unsigned int v33 = *(_DWORD *)(v31 + 28);
            BOOL v34 = v33 >= v7;
            if (v33 >= v7) {
              int v35 = (uint64_t *)v31;
            }
            else {
              int v35 = (uint64_t *)(v31 + 8);
            }
            if (v34) {
              uint64_t v32 = v31;
            }
            uint64_t v31 = *v35;
          }
          while (*v35);
          if (v32 != v30 + 152 && *(_DWORD *)(v32 + 28) <= v7 && *(_DWORD *)(v32 + 32) == 1) {
            QMIRTPStackController::handleStackInitializeResponse((uint64_t **)v30, v7, v23 == 0);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v36);
}

void sub_1C5447E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void *std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE8F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE8F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v24, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v24);
    if (__p)
    {
      uint64_t v31 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v24);
  }
  size_t v5 = *(void **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  uint64_t v6 = ims::debug((uint64_t)&__p, (uint64_t)&v35);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleServiceUninitializeIndication", 35);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  if (v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    uint64_t v10 = ims::error((uint64_t)&__p, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v10 + 17) = 0;
    __n128 v11 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v39, v24[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v10 + 32))(v10, v39, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v12 = (const char *)qmi::asString();
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v12, v13);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v35);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    int v14 = (std::__shared_weak_count *)v5[17];
    if (v14)
    {
      size_t v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        long long v16 = v15;
        uint64_t v17 = v5[16];
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 48);
          uint64_t v19 = *(std::__shared_weak_count **)(v17 + 56);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = *(void *)(v18 + 296);
          if (v20) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v20 + 120), 24);
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
  }
  else
  {
    int v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2000000000;
    int v38 = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v31 = 0x40000000;
    uint64_t v32 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19ServiceUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    unsigned int v33 = &unk_1E6510BA0;
    BOOL v34 = &v35;
    v39[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v24, v39);
    if (*((_DWORD *)v36 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      uint64_t v21 = ims::error((uint64_t)v39, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v21 + 17) = 0;
      __n128 v22 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v26, v24[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v21 + 32))(v21, v26, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v21 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v21 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v21 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      uint64_t v21 = ims::spam((uint64_t)v39, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v21 + 17) = 0;
      __n128 v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v26, v24[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v21 + 32))(v21, v26, v23);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    _Block_object_dispose(&v35, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v24);
}

void sub_1C54486FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = v30;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE970;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE970;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v32, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v32);
    if (__p)
    {
      uint64_t v35 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v32);
  }
  size_t v5 = *(void **)(a1 + 8);
  v51[0] = 0;
  v51[1] = v51;
  std::string v51[2] = 0x2000000000;
  v51[3] = 0;
  uint64_t v47 = 0;
  int v48 = &v47;
  uint64_t v49 = 0x2000000000;
  char v50 = 0;
  if (v33)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v42, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&p_p, v32[0]);
    (*(void (**)(uint64_t, void ***, __n128))(*(void *)v6 + 32))(v6, &p_p, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v8 = (const char *)qmi::asString();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v60) < 0) {
      operator delete(p_p);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(v42);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = (std::__shared_weak_count *)v5[17];
    if (v10)
    {
      __n128 v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = v5[16];
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 48);
          size_t v15 = *(std::__shared_weak_count **)(v13 + 56);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(void *)(v14 + 296);
          if (v16) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 24);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    int v17 = 4;
  }
  else
  {
    size_t v42 = 0;
    uint64_t v43 = (uint64_t)&v42;
    uint64_t v44 = 0x2000000000;
    LODWORD(v45) = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v35 = 0x40000000;
    uint64_t v36 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17SessionInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    uint64_t v37 = &unk_1E6510BF0;
    int v38 = &v42;
    p_p = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v32, &p_p);
    if (*(_DWORD *)(v43 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&p_p, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      uint64_t v18 = ims::error((uint64_t)&p_p, (uint64_t)v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v54, v32[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v54, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&p_p, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      uint64_t v18 = ims::spam((uint64_t)&p_p, (uint64_t)v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v20 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v54, v32[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v54, v20);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v55 < 0) {
      operator delete(v54[0]);
    }
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete(p_p);
    }
    int v17 = *(_DWORD *)(v43 + 24);
    _Block_object_dispose(&v42, 8);
  }
  size_t v42 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v43 = 0x40000000;
  uint64_t v44 = (uint64_t)___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke;
  uint64_t v45 = &unk_1E6510698;
  uint64_t v46 = v51;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v32);
  __n128 v23 = TlvValue;
  if (TlvValue)
  {
    int v24 = v22;
    std::string __p = TlvValue;
    LODWORD(p_p) = tlv::parseV<ms::tlv::ServiceAppData>((tlv **)&__p, v22);
    if (__p) {
      ((void (*)(void **, void ***))v44)(&v42, &p_p);
    }
    else {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v32[0], 17, v23, v24);
    }
  }
  p_p = 0;
  p_p_p = &p_p;
  uint64_t v60 = 0x2000000000;
  char v61 = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v35 = 0x40000000;
  uint64_t v36 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInitialize10IndicationEEEhRKT__block_invoke;
  uint64_t v37 = &unk_1E6510C18;
  int v38 = (void **)&p_p;
  v56[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v32, 16, v56);
  std::string::basic_string[abi:ne180100]<0>(v56, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v54, "");
  uint64_t v25 = ims::spam((uint64_t)v56, (uint64_t)v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v25 + 17) = 0;
  __n128 v26 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v52, v32[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v25 + 32))(v25, v52, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  char v27 = *((unsigned char *)p_p_p + 24);
  _Block_object_dispose(&p_p, 8);
  *((unsigned char *)v48 + 24) = v27;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&p_p, "");
  uint64_t v28 = ims::debug((uint64_t)&__p, (uint64_t)&p_p);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v29 = v28;
  uint64_t v30 = *(void **)(v28 + 8);
  size_t v31 = strlen((const char *)(*(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, *(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v31);
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"handleSessionInitializeIndication", 33);
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" qmiSessionId=", 14);
  *(unsigned char *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (SHIBYTE(v60) < 0) {
    operator delete(p_p);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v35 = 0x40000000;
  uint64_t v36 = ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke_2;
  uint64_t v37 = &unk_1E65106C0;
  int v38 = (void **)v51;
  char v39 = &v47;
  char v40 = v5;
  int v41 = v17;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(v51, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v32);
}

void sub_1C5449254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  int v38 = v36;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CE9F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CE9F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v28, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v28);
    if (__p)
    {
      uint64_t v31 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v28);
  }
  size_t v5 = *(void ***)(a1 + 8);
  if (v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v43, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v41, v28[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v6 + 32))(v6, v41, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v8 = (const char *)qmi::asString();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v43);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = (std::__shared_weak_count *)v5[17];
    if (v10)
    {
      __n128 v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = v5[16];
        if (v13)
        {
          uint64_t v14 = *((void *)v13 + 6);
          size_t v15 = (std::__shared_weak_count *)*((void *)v13 + 7);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(void *)(v14 + 296);
          if (v16) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 24);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    int v17 = 4;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2000000000;
    int v46 = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v31 = 0x40000000;
    uint64_t v32 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19SessionUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    int v33 = &unk_1E6510C68;
    BOOL v34 = &v43;
    v41[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v28, v41);
    if (*((_DWORD *)v44 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      uint64_t v18 = ims::error((uint64_t)v41, (uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v37, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      uint64_t v18 = ims::spam((uint64_t)v41, (uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v20 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v37, v20);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    int v17 = *((_DWORD *)v44 + 6);
    _Block_object_dispose(&v43, 8);
  }
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  LOBYTE(v46) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms19SessionUninitialize10IndicationEEEhRKT__block_invoke;
  int v33 = &unk_1E6510C90;
  BOOL v34 = &v43;
  v41[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v28, 2, v41);
  std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v39, "");
  uint64_t v21 = ims::spam((uint64_t)v41, (uint64_t)v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v21 + 17) = 0;
  __n128 v22 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v21 + 32))(v21, v37, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v21 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  char v23 = *((unsigned char *)v44 + 24);
  _Block_object_dispose(&v43, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v43, "");
  uint64_t v24 = ims::debug((uint64_t)&__p, (uint64_t)&v43);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v25 = v24;
  __n128 v26 = *(void **)(v24 + 8);
  size_t v27 = strlen((const char *)(*(void *)(*((void *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, *(void *)(*((void *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v27);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"handleSessionUninitializeIndication", 35);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = ___ZN19QMIRTPCommandDriver35handleSessionUninitializeIndicationERKN2ms19SessionUninitialize10IndicationE_block_invoke;
  int v33 = &__block_descriptor_tmp_88_0;
  BOOL v34 = v5;
  char v36 = v23;
  int v35 = v17;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v28);
}

void sub_1C5449D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  char v40 = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CEA70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CEA70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v28, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v28);
    if (__p)
    {
      uint64_t v31 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v28);
  }
  size_t v5 = *(void ***)(a1 + 8);
  if (v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v43, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v41, v28[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v6 + 32))(v6, v41, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v8 = (const char *)qmi::asString();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v43);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = (std::__shared_weak_count *)v5[17];
    if (v10)
    {
      __n128 v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = v5[16];
        if (v13)
        {
          uint64_t v14 = *((void *)v13 + 6);
          size_t v15 = (std::__shared_weak_count *)*((void *)v13 + 7);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(void *)(v14 + 296);
          if (v16) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 24);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    int v17 = 4;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2000000000;
    int v46 = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v31 = 0x40000000;
    uint64_t v32 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms16SessionConfigure10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    int v33 = &unk_1E6510CE0;
    BOOL v34 = &v43;
    v41[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v28, v41);
    if (*((_DWORD *)v44 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      uint64_t v18 = ims::error((uint64_t)v41, (uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v37, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      uint64_t v18 = ims::spam((uint64_t)v41, (uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v20 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v37, v20);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    int v17 = *((_DWORD *)v44 + 6);
    _Block_object_dispose(&v43, 8);
  }
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  LOBYTE(v46) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms16SessionConfigure10IndicationEEEhRKT__block_invoke;
  int v33 = &unk_1E6510D08;
  BOOL v34 = &v43;
  v41[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v28, 2, v41);
  std::string::basic_string[abi:ne180100]<0>(v41, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v39, "");
  uint64_t v21 = ims::spam((uint64_t)v41, (uint64_t)v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v21 + 17) = 0;
  __n128 v22 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v28[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v21 + 32))(v21, v37, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v21 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  char v23 = *((unsigned char *)v44 + 24);
  _Block_object_dispose(&v43, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v43, "");
  uint64_t v24 = ims::debug((uint64_t)&__p, (uint64_t)&v43);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v25 = v24;
  __n128 v26 = *(void **)(v24 + 8);
  size_t v27 = strlen((const char *)(*(void *)(*((void *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, *(void *)(*((void *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v27);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"handleSessionConfigureIndication", 32);
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = ___ZN19QMIRTPCommandDriver32handleSessionConfigureIndicationERKN2ms16SessionConfigure10IndicationE_block_invoke;
  int v33 = &__block_descriptor_tmp_96;
  BOOL v34 = v5;
  char v36 = v23;
  int v35 = v17;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v28);
}

void sub_1C544A774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  char v40 = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CEAF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CEAF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v13, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
    if (__p)
    {
      uint64_t v15 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v13);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v21 = 0;
  uint64_t v22 = (uint64_t)&v21;
  uint64_t v23 = 0x2000000000;
  LOBYTE(v24) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInactivity10IndicationEEEhRKT__block_invoke;
  int v17 = &unk_1E6510DA8;
  uint64_t v18 = (void **)&v21;
  v26[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v13, 1, v26);
  std::string::basic_string[abi:ne180100]<0>(v26, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v6 = ims::spam((uint64_t)v26, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v6 + 17) = 0;
  __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v29, v13[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v6 + 32))(v6, v29, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  char v8 = *(unsigned char *)(v22 + 24);
  _Block_object_dispose(&v21, 8);
  v26[0] = 0;
  v26[1] = v26;
  uint64_t v27 = 0x2000000000;
  int v28 = 255;
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 0x40000000;
  uint64_t v23 = (uint64_t)___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke;
  uint64_t v24 = &unk_1E65107C8;
  uint64_t v25 = v26;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v13);
  __n128 v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    std::string __p = TlvValue;
    LODWORD(v31[0]) = tlv::parseV<ms::tlv::SessionInactivityType>((tlv **)&__p, v10);
    if (__p) {
      ((void (*)(uint64_t *, void **))v23)(&v21, v31);
    }
    else {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v13[0], 2, v11, v12);
    }
  }
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke_2;
  int v17 = &unk_1E65107F0;
  uint64_t v18 = v26;
  uint64_t v19 = v5;
  char v20 = v8;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(v26, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v13);
}

void sub_1C544AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CEB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CEB70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v24, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v24);
    if (__p)
    {
      uint64_t v27 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v24);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v39, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v37, v24[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v6 + 32))(v6, v37, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    char v8 = (const char *)qmi::asString();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v39);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    int v10 = *(std::__shared_weak_count **)(v5 + 136);
    if (v10)
    {
      __n128 v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        int v12 = v11;
        uint64_t v13 = *(void *)(v5 + 128);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 48);
          uint64_t v15 = *(std::__shared_weak_count **)(v13 + 56);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(void *)(v14 + 296);
          if (v16) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 24);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    int v17 = 4;
  }
  else
  {
    char v39 = 0;
    char v40 = &v39;
    uint64_t v41 = 0x2000000000;
    int v42 = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v27 = 0x40000000;
    int v28 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms12ServiceError10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    int v29 = &unk_1E6510DF8;
    char v30 = &v39;
    v37[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v24, v37);
    if (*((_DWORD *)v40 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      uint64_t v18 = ims::error((uint64_t)v37, (uint64_t)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v33, v24[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v33, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      uint64_t v18 = ims::spam((uint64_t)v37, (uint64_t)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v20 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v33, v24[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v18 + 32))(v18, v33, v20);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    int v17 = *((_DWORD *)v40 + 6);
    _Block_object_dispose(&v39, 8);
  }
  char v39 = 0;
  char v40 = &v39;
  uint64_t v41 = 0x2000000000;
  LOBYTE(v42) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v27 = 0x40000000;
  int v28 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms12ServiceError10IndicationEEEhRKT__block_invoke;
  int v29 = &unk_1E6510E20;
  char v30 = &v39;
  v37[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v24, 16, v37);
  std::string::basic_string[abi:ne180100]<0>(v37, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v35, "");
  uint64_t v21 = ims::spam((uint64_t)v37, (uint64_t)v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v21 + 17) = 0;
  __n128 v22 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v33, v24[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v21 + 32))(v21, v33, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v21 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  char v23 = *((unsigned char *)v40 + 24);
  _Block_object_dispose(&v39, 8);
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v27 = 0x40000000;
  int v28 = ___ZN19QMIRTPCommandDriver28handleServiceErrorIndicationERKN2ms12ServiceError10IndicationE_block_invoke;
  int v29 = &__block_descriptor_tmp_162;
  char v30 = (void **)v5;
  int v31 = v17;
  char v32 = v23;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v24);
}

void sub_1C544B58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  char v40 = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CEBF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CEBF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v64 = 0;
    char v65 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v52, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v52);
    if (__p)
    {
      uint64_t v64 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v52);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v53)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v58, "");
    uint64_t v6 = ims::error((uint64_t)&__p, (uint64_t)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    __n128 v7 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v54, v52[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v6 + 32))(v6, v54, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v6 + 17) = 0;
    char v8 = (const char *)qmi::asString();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v8, v9);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SBYTE7(v55) < 0) {
      operator delete(v54[0]);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v58[0]);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(__p);
    }
    int v10 = *(std::__shared_weak_count **)(v5 + 136);
    if (v10)
    {
      __n128 v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        int v12 = v11;
        uint64_t v13 = *(void *)(v5 + 128);
        if (v13)
        {
          uint64_t v14 = *(void *)(v13 + 48);
          uint64_t v15 = *(std::__shared_weak_count **)(v13 + 56);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(void *)(v14 + 296);
          if (v16) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 24);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    int v17 = 4;
  }
  else
  {
    v58[0] = 0;
    v58[1] = v58;
    uint64_t v59 = 0x2000000000;
    LODWORD(v60) = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v64 = 0x40000000;
    char v65 = (void (*)(void **, void **))___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms18ServiceRtcpReports10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    uint64_t v66 = &unk_1E6510E48;
    char v67 = v58;
    v54[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v52, v54);
    if (*((_DWORD *)v58[1] + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(&v80, "");
      uint64_t v18 = ims::error((uint64_t)v54, (uint64_t)&v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v75, v52[0]);
      (*(void (**)(uint64_t, tlv **, __n128))(*(void *)v18 + 32))(v18, &v75, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v18 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(&v80, "");
      uint64_t v18 = ims::spam((uint64_t)v54, (uint64_t)&v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v18 + 17) = 0;
      __n128 v20 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v75, v52[0]);
      (*(void (**)(uint64_t, tlv **, __n128))(*(void *)v18 + 32))(v18, &v75, v20);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (SHIBYTE(v77) < 0) {
      operator delete(v75);
    }
    if (SBYTE7(v81) < 0) {
      operator delete((void *)v80);
    }
    if (SBYTE7(v55) < 0) {
      operator delete(v54[0]);
    }
    int v17 = *((_DWORD *)v58[1] + 6);
    _Block_object_dispose(v58, 8);
  }
  v58[0] = 0;
  v58[1] = v58;
  uint64_t v59 = 0x2000000000;
  LOBYTE(v60) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v64 = 0x40000000;
  char v65 = (void (*)(void **, void **))___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms18ServiceRtcpReports10IndicationEEEhRKT__block_invoke;
  uint64_t v66 = &unk_1E6510E70;
  char v67 = v58;
  v54[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v52, 2, v54);
  std::string::basic_string[abi:ne180100]<0>(v54, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  uint64_t v21 = ims::spam((uint64_t)v54, (uint64_t)&v80);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Indication: ", 12);
  *(unsigned char *)(v21 + 17) = 0;
  __n128 v22 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v75, v52[0]);
  (*(void (**)(uint64_t, tlv **, __n128))(*(void *)v21 + 32))(v21, &v75, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(unsigned char *)(v21 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  if (SBYTE7(v81) < 0) {
    operator delete((void *)v80);
  }
  if (SBYTE7(v55) < 0) {
    operator delete(v54[0]);
  }
  _Block_object_dispose(v58, 8);
  if (!v17)
  {
    v73[0] = 0;
    v73[1] = v73;
    v73[2] = 0x2000000000;
    char v74 = 0;
    v69[0] = MEMORY[0x1E4F143A8];
    v69[1] = 0x40000000;
    int v70 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke;
    char v71 = &unk_1E6510838;
    long long v72 = v73;
    TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    int v25 = TlvValue;
    if (TlvValue)
    {
      int v26 = v24;
      std::string __p = TlvValue;
      int v27 = tlv::parseV<ms::tlv::RTCPReportTypeInfoIncoming>((tlv **)&__p, v24);
      if (__p) {
        v70((uint64_t)v69, v27);
      }
      else {
        ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v52[0], 23, v25, v26);
      }
    }
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v64 = 0x40000000;
    char v65 = (void (*)(void **, void **))___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2;
    uint64_t v66 = &unk_1E6510860;
    char v67 = (void **)v73;
    uint64_t v68 = v5;
    uint64_t v28 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    uint64_t v30 = v28;
    if (v28)
    {
      int v31 = v29;
      *(void *)&long long v80 = v28;
      v58[0] = 0;
      v58[1] = 0;
      uint64_t v59 = 0;
      tlv::parseV<ms::tlv::SenderReportInfo>((uint64_t *)&v80, v29, (uint64_t)v58);
      if ((void)v80)
      {
        *(_OWORD *)char v54 = *(_OWORD *)v58;
        *(void *)&long long v55 = v59;
        v65(&__p, v54);
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118])(v52[0], 16, v30, v31);
      }
    }
    v58[0] = (void *)MEMORY[0x1E4F143A8];
    v58[1] = (void *)0x40000000;
    uint64_t v59 = (uint64_t)___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_168;
    uint64_t v60 = &unk_1E6510888;
    char v61 = v73;
    uint64_t v62 = v5;
    char v32 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    char v34 = v32;
    if (v32)
    {
      int v35 = v33;
      char v75 = v32;
      LODWORD(v56) = 0;
      *(_OWORD *)char v54 = 0u;
      long long v55 = 0u;
      tlv::parseV<ms::tlv::ReceiverReportInfo>((uint64_t *)&v75, v33, (uint64_t)v54);
      if (v75)
      {
        long long v80 = *(_OWORD *)v54;
        long long v81 = v55;
        LODWORD(v82) = v56;
        ((void (*)(void **, long long *))v59)(v58, &v80);
      }
      else
      {
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(v52[0], 17, v34, v35);
      }
    }
    v54[0] = (void *)MEMORY[0x1E4F143A8];
    v54[1] = (void *)0x40000000;
    *(void *)&long long v55 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_174;
    *((void *)&v55 + 1) = &unk_1E65108B0;
    v56 = v73;
    uint64_t v57 = v5;
    char v36 = (char *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    char v38 = v36;
    if (v36)
    {
      int v39 = v37;
      long long v82 = 0;
      long long v83 = v36;
      long long v80 = 0u;
      long long v81 = 0u;
      tlv::parseV<ms::tlv::SDESInfo>(&v83, v37, (uint64_t)&v80);
      char v40 = v83;
      if (v83)
      {
        char v75 = (tlv *)v80;
        __int16 v76 = WORD4(v80);
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        long long v77 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v77, (const void *)v81, *((uint64_t *)&v81 + 1), *((void *)&v81 + 1) - v81);
        ((void (*)(void **, tlv **))v55)(v54, &v75);
        if (v77)
        {
          uint64_t v78 = v77;
          operator delete(v77);
        }
      }
      if ((void)v81)
      {
        *((void *)&v81 + 1) = v81;
        operator delete((void *)v81);
      }
      if (!v40) {
        ((void (*)(void, uint64_t, char *, void))*MEMORY[0x1E4FBA118])(v52[0], 18, v38, v39);
      }
    }
    *(void *)&long long v80 = MEMORY[0x1E4F143A8];
    *((void *)&v80 + 1) = 0x40000000;
    *(void *)&long long v81 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_179;
    *((void *)&v81 + 1) = &unk_1E65108D8;
    long long v82 = v73;
    uint64_t v41 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    uint64_t v43 = v41;
    if (v41)
    {
      int v44 = v42;
      char v75 = v41;
      uint64_t v45 = tlv::parseV<ms::tlv::XRReceiverRefTime>(&v75, v42);
      if (v75) {
        ((void (*)(long long *, uint64_t))v81)(&v80, v45);
      }
      else {
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(v52[0], 19, v43, v44);
      }
    }
    int v46 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v52);
    int v48 = v46;
    if (v46)
    {
      int v49 = v47;
      char v75 = v46;
      uint64_t v50 = tlv::parseV<ms::tlv::XRDLRRReportInfo>((uint64_t *)&v75, v47);
      if (v75) {
        ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_184(v50, v50, v51);
      }
      else {
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(v52[0], 21, v48, v49);
      }
    }
    _Block_object_dispose(v73, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v52);
}

void sub_1C544C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  char v38 = v36;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_1C544C3D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  JUMPOUT(0x1C544C3C4);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20CEC70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20CEC70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v33 = 0;
    char v34 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v30, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v30);
    if (__p)
    {
      uint64_t v33 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v30);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  uint64_t v6 = ims::debug((uint64_t)&__p, (uint64_t)&v38);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  char v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleUninitializeAllSessionsIndication", 39);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v40) < 0) {
    operator delete(v38);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  if (v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v38, "");
    uint64_t v10 = ims::error((uint64_t)&__p, (uint64_t)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Error indication for request: ", 30);
    *(unsigned char *)(v10 + 17) = 0;
    __n128 v11 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v43, v30[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v10 + 32))(v10, v43, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v10 + 17) = 0;
    int v12 = (const char *)qmi::asString();
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v12, v13);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(v38);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(__p);
    }
    uint64_t v14 = (std::__shared_weak_count *)v5[17];
    if (v14)
    {
      uint64_t v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = v5[16];
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 48);
          __n128 v19 = *(std::__shared_weak_count **)(v17 + 56);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = *(void *)(v18 + 296);
          if (v20) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v20 + 120), 24);
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    int v21 = 4;
  }
  else
  {
    char v38 = 0;
    uint64_t v39 = (uint64_t)&v38;
    uint64_t v40 = 0x2000000000;
    LODWORD(v41) = 0;
    std::string __p = (void *)MEMORY[0x1E4F143A8];
    uint64_t v33 = 0x40000000;
    char v34 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms30ServiceUninitializeAllSessions10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    int v35 = &unk_1E6510EE8;
    char v36 = &v38;
    v43[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v30, v43);
    if (*(_DWORD *)(v39 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      uint64_t v22 = ims::error((uint64_t)v43, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Error indication for request: ", 30);
      *(unsigned char *)(v22 + 17) = 0;
      __n128 v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v46, v30[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v22 + 32))(v22, v46, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" [error=", 8);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v22 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      uint64_t v22 = ims::spam((uint64_t)v43, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Success indication for request: ", 32);
      *(unsigned char *)(v22 + 17) = 0;
      __n128 v24 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v46, v30[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v22 + 32))(v22, v46, v24);
    }
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    int v21 = *(_DWORD *)(v39 + 24);
    _Block_object_dispose(&v38, 8);
  }
  v43[0] = 0;
  v43[1] = v43;
  uint64_t v44 = 0x2000000000;
  char v45 = -1;
  char v38 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v39 = 0x40000000;
  uint64_t v40 = (uint64_t)___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke;
  uint64_t v41 = &unk_1E65109A0;
  int v42 = v43;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v30);
  int v27 = TlvValue;
  if (TlvValue)
  {
    int v28 = v26;
    std::string __p = TlvValue;
    LODWORD(v48[0]) = tlv::parseV<ms::tlv::ApnType>((tlv **)&__p, v26);
    if (__p) {
      ((void (*)(void **, void **))v40)(&v38, v48);
    }
    else {
      ((void (*)(void, uint64_t, void *, void))*MEMORY[0x1E4FBA118])(v30[0], 16, v27, v28);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  if (v21)
  {
    uint64_t v29 = ims::error((uint64_t)&__p, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Failed to uninitialize all sessions for [apnType=", 49);
  }
  else
  {
    uint64_t v29 = ims::debug((uint64_t)&__p, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Uninitialized all sessions for [apnType=", 40);
  }
  *(unsigned char *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v29 + 17) = 0;
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v33 = 0x40000000;
  char v34 = ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke_2;
  int v35 = &unk_1E65109C8;
  char v36 = v43;
  int v37 = v5;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(v43, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v30);
}

void sub_1C544CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  char v36 = v34;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::target_type()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)v3;
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v58, (uint64_t)&__p);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  char v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleServiceBindResp", 21);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [instance=", 11);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v59) < 0) {
    operator delete((void *)v58);
  }
  if (!*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v21 = ims::debug((uint64_t)&v58, (uint64_t)&__p);
    size_t v22 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v22);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"handleServiceBindResp", 21);
    *(unsigned char *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" Success", 8);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(v54) < 0) {
      operator delete(__p);
    }
    if (SBYTE7(v59) < 0) {
      operator delete((void *)v58);
    }
    __n128 v23 = (std::__shared_weak_count *)v4[17];
    if (v23)
    {
      uint64_t v18 = std::__shared_weak_count::lock(v23);
      if (v18)
      {
        __n128 v24 = (void *)v4[16];
        if (v24)
        {
          uint64_t v25 = v24[19];
          if (!v25) {
            goto LABEL_77;
          }
          int v26 = v24 + 19;
          do
          {
            unsigned int v27 = *(_DWORD *)(v25 + 28);
            BOOL v28 = v27 >= v5;
            if (v27 >= v5) {
              uint64_t v29 = (uint64_t *)v25;
            }
            else {
              uint64_t v29 = (uint64_t *)(v25 + 8);
            }
            if (v28) {
              int v26 = (void *)v25;
            }
            uint64_t v25 = *v29;
          }
          while (*v29);
          if (v26 == v24 + 19 || *((_DWORD *)v26 + 7) > v5 || !*((_DWORD *)v26 + 8))
          {
LABEL_77:
            std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v42 = ims::error((uint64_t)&v58, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Controller has been deinitialized while waiting for Service Bind response", 73);
            *(unsigned char *)(v42 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v42 + 17) = 0;
            if (SHIBYTE(v54) < 0) {
              operator delete(__p);
            }
            if (SBYTE7(v59) < 0) {
              operator delete((void *)v58);
            }
            goto LABEL_81;
          }
          uint64_t v30 = (void *)v24[15];
          int v31 = v24 + 16;
          if (v30 != v24 + 16)
          {
            int v32 = 0;
            do
            {
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              if (*((char *)v30 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v58, (const std::string::value_type *)v30[4], v30[5]);
              }
              else
              {
                long long v58 = *((_OWORD *)v30 + 2);
                *(void *)&long long v59 = v30[6];
              }
              LODWORD(v60) = *((_DWORD *)v30 + 16);
              *((void *)&v59 + 1) = v30[7];
              int v33 = v60;
              if (v60 == v5)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
                std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
                uint64_t v34 = ims::debug((uint64_t)&__p, (uint64_t)&aBlock);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Using voice system Id ", 22);
                *(unsigned char *)(v34 + 17) = 0;
                std::ostream::operator<<();
                *(unsigned char *)(v34 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" from ", 6);
                *(unsigned char *)(v34 + 17) = 0;
                (*(void (**)(uint64_t, long long *))(*(void *)v34 + 32))(v34, &v58);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v34 + 17) = 0;
                if (SHIBYTE(v67) < 0) {
                  operator delete(aBlock);
                }
                if (SHIBYTE(v54) < 0) {
                  operator delete(__p);
                }
                int v32 = HIDWORD(v59);
              }
              if (SBYTE7(v59) < 0) {
                operator delete((void *)v58);
              }
              if (v33 == v5) {
                break;
              }
              int v35 = (void *)v30[1];
              if (v35)
              {
                do
                {
                  char v36 = v35;
                  int v35 = (void *)*v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  char v36 = (void *)v30[2];
                  BOOL v37 = *v36 == (void)v30;
                  uint64_t v30 = v36;
                }
                while (!v37);
              }
              uint64_t v30 = v36;
            }
            while (v36 != v31);
            if (v32)
            {
              std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              uint64_t v38 = ims::debug((uint64_t)&v58, (uint64_t)&__p);
              size_t v39 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v39);
              *(unsigned char *)(v38 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"::", 2);
              *(unsigned char *)(v38 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"serviceInitializeReq", 20);
              *(unsigned char *)(v38 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" [voiceSystemId=", 16);
              *(unsigned char *)(v38 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v38 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)", instance=", 11);
              *(unsigned char *)(v38 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v38 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v38 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v38 + 17) = 0;
              if (SHIBYTE(v54) < 0) {
                operator delete(__p);
              }
              if (SBYTE7(v59) < 0) {
                operator delete((void *)v58);
              }
              long long v63 = 0u;
              long long v64 = 0u;
              qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v63);
              v61[0] = MEMORY[0x1E4F143A8];
              v61[1] = 0x40000000;
              v61[2] = ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke;
              v61[3] = &__block_descriptor_tmp_47;
              int v62 = v32;
              uint64_t v40 = (const void **)*((void *)&v63 + 1);
              if (*((void *)&v63 + 1) != (void)v64)
              {
                while (*((unsigned char *)*v40 + 8) != 1)
                {
                  if (++v40 == (const void **)v64) {
                    goto LABEL_87;
                  }
                }
              }
              if (v40 != (const void **)v64)
              {
                if (!v44) {
                  __cxa_bad_cast();
                }
                ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke((uint64_t)v61, v44 + 3);
                char v45 = (std::__shared_weak_count *)v4[17];
                if (v45)
                {
                  int v46 = std::__shared_weak_count::lock(v45);
                  if (v46)
                  {
                    char v47 = v46;
                    uint64_t v48 = v4[16];
                    if (v48)
                    {
                      std::string __p = (void *)MEMORY[0x1E4F143A8];
                      uint64_t v53 = 1174405120;
                      char v54 = ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke_2;
                      *(void *)&long long v55 = &__block_descriptor_tmp_49;
                      *((void *)&v55 + 1) = v48;
                      *(void *)&long long v56 = v46;
                      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                      char v49 = (const void **)*((void *)&v63 + 1);
                      if (*((void *)&v63 + 1) != (void)v64)
                      {
                        while (*((unsigned char *)*v49 + 8) != 17)
                        {
                          if (++v49 == (const void **)v64) {
                            goto LABEL_98;
                          }
                        }
                      }
                      if (v49 == (const void **)v64) {
LABEL_98:
                      }
                        operator new();
                      if (!v50) {
                        __cxa_bad_cast();
                      }
                      v54((uint64_t)&__p, v50 + 9);
                      if ((void)v56) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56);
                      }
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                  }
                }
                if (v5) {
                  int v51 = 2 * (v5 == 1);
                }
                else {
                  int v51 = 1;
                }
                qmi::ClientRouter::get();
                LODWORD(v65) = v51;
                operator new();
              }
LABEL_87:
              operator new();
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v43 = ims::warn((uint64_t)&v58, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"Drop ServiceBindResponse [instance=", 35);
          *(unsigned char *)(v43 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v43 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)" voiceSystemId=0]", 17);
          *(unsigned char *)(v43 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v43 + 17) = 0;
LABEL_71:
          if (SHIBYTE(v54) < 0) {
            operator delete(__p);
          }
          if (SBYTE7(v59) < 0) {
            operator delete((void *)v58);
          }
          if (v18) {
            goto LABEL_81;
          }
          return;
        }
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v41 = ims::error((uint64_t)&v58, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(unsigned char *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v41 + 17) = 0;
    goto LABEL_71;
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v10 = ims::error((uint64_t)&v58, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Error response for request: ", 28);
  *(unsigned char *)(v10 + 17) = 0;
  __n128 v11 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&aBlock, *a2);
  (*(void (**)(uint64_t, void **, __n128))(*(void *)v10 + 32))(v10, &aBlock, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" error:", 7);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" reason: ", 9);
  *(unsigned char *)(v10 + 17) = 0;
  int v12 = (const char *)qmi::asString();
  size_t v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete(aBlock);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v59) < 0) {
    operator delete((void *)v58);
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v14 = ims::error((uint64_t)&v58, (uint64_t)&__p);
  size_t v15 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"handleServiceBindResp", 21);
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" Error", 6);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v59) < 0) {
    operator delete((void *)v58);
  }
  uint64_t v16 = (std::__shared_weak_count *)v4[17];
  if (v16)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = v4[16];
      if (v19)
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        std::string __p = &unk_1F20B2680;
        uint64_t v53 = (uint64_t)&_bambiDomain;
        LODWORD(v54) = 1073741846;
        uint64_t v20 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)&__p, "Fatal baseband driver error");
        ImsResult::ImsResult((ImsResult *)&v58, v20);
        (*(void (**)(uint64_t, long long *))(*(void *)v19 + 48))(v19, &v58);
        ImsResult::~ImsResult((ImsResult *)&v58);
        ImsResult::~ImsResult((ImsResult *)&__p);
      }
LABEL_81:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_1C544E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a39);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c72_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c72_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CED70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CED70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms11ServiceBind8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C544ED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = **(void ***)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!v3) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = (const char *)(*(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v7 = *(void **)(v4 + 8);
  size_t v8 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleServiceInitializeResp", 27);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v9 + 17) = 0;
    __n128 v10 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v13, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v9 + 32))(v9, v13, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v9 + 17) = 0;
    __n128 v11 = (const char *)qmi::asString();
    size_t v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)v11, v12);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
}

void sub_1C544F150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CEE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CEE90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17ServiceInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C544F314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17ServiceInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

tlv *qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>(qmi::MessageBase *a1, void *a2)
{
  __n128 result = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    __n128 v11 = result;
    unsigned int v8 = tlv::parseV<ms::tlv::IndicationStatus>(&v11, v5);
    if (v11)
    {
      return (tlv *)(*(uint64_t (**)(void, void))(*a2 + 16))(*a2, v8);
    }
    else
    {
      uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118];
      uint64_t v10 = *(unsigned __int16 *)a1;
      return (tlv *)v9(v10, 1, v6, v7);
    }
  }
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19ServiceUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CEF48;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CEF48;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + 3) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v5 + 7) = *(unsigned char *)(a1 + 20);
  __n128 result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
  uint64_t v8 = v5 + 8 + *(void *)(a1 + 32) - *(void *)(a1 + 24);
  *a2 = v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::clone()
{
}

void sub_1C544F6B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40111C7D32);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CEF98;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CEF98;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v6 = *a2 + 3;
  *a2 = v6;
  *(unsigned char *)(v5 + 3) = *(unsigned char *)(a1 + 16);
  __n128 result = memcpy((void *)(v5 + 4), *(const void **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
  uint64_t v8 = (_DWORD *)(v5 + 4 + *(void *)(a1 + 32) - *(void *)(a1 + 24));
  *v8++ = *(_DWORD *)(a1 + 48);
  *a2 = (uint64_t)v8;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = (_WORD)v8 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::clone()
{
}

void sub_1C544F8C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40FF14D69FLL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CF038;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F20CF038;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::write(uint64_t a1, uint64_t *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  __int16 v6 = *a2 + 3;
  *a2 += 3;
  *(_WORD *)(v5 + 3) = *(_WORD *)(a1 + 16);
  __n128 result = memcpy((void *)(v5 + 5), *(const void **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
  uint64_t v8 = v5 + 5 + *(void *)(a1 + 32) - *(void *)(a1 + 24);
  *(_WORD *)uint64_t v8 = *(_WORD *)(a1 + 48);
  *(unsigned char *)(v8 + 2) = *(unsigned char *)(a1 + 50);
  *a2 = v8 + 3;
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8 + 3 - v6;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::clone()
{
}

void sub_1C544FB88(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1091C40D69D9EE6);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 3) = *(void *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS5_I9IpAddressEEN8SDPMedia9MediaTypeENS4_8weak_ptrI10SDPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!v4) {
      __cxa_bad_typeid();
    }
    uint64_t v17 = v16;
    char v18 = *(void **)(v16 + 8);
    size_t v19 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"handleSessionInitializeResp", 27);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(v20[0]);
      if (!v6) {
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleSessionInitializeResp", 27);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(void))(*(void *)(v5 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" appId=", 7);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  int v11 = *((_DWORD *)a2 + 1);
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v12 + 17) = 0;
    __n128 v13 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v27, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v12 + 32))(v12, v27, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v12 + 17) = 0;
    char v14 = (const char *)qmi::asString();
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    int v11 = 4;
  }
  v20[0] = (void *)MEMORY[0x1E4F143A8];
  v20[1] = (void *)1174405120;
  uint64_t v21 = ___ZN19QMIRTPCommandDriver27handleSessionInitializeRespERKN2ms17SessionInitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke;
  size_t v22 = &__block_descriptor_tmp_74_1;
  int v26 = v11;
  __n128 v23 = v4;
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v20);
  if (!v25)
  {
LABEL_26:
    if (!v6) {
      return;
    }
    goto LABEL_27;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (!v6) {
    return;
  }
LABEL_27:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C545022C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c167_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20sessionInitializeReqENS0_I13QMIRTPSessionEEhRKNS0_I9IpAddressEEN8SDPMedia9MediaTypeENS_8weak_ptrI10SDPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c167_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20sessionInitializeReqENS0_I13QMIRTPSessionEEhRKNS0_I9IpAddressEEN8SDPMedia9MediaTypeENS_8weak_ptrI10SDPSessionEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17SessionInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C545042C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17SessionInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInitialize10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

tlv *qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  __n128 result = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    __n128 v13 = result;
    unsigned __int8 v10 = tlv::parseV<ms::tlv::RTPSessionIdentifier>(&v13, v7);
    if (v13)
    {
      return (tlv *)(*(uint64_t (**)(void, void))(*a3 + 16))(*a3, v10);
    }
    else
    {
      int v11 = (uint64_t (*)(uint64_t, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118];
      uint64_t v12 = *(unsigned __int16 *)a1;
      return (tlv *)v11(v12, a2, v8, v9);
    }
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<ms::tlv::RTPSessionIdentifier>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<ms::tlv::RTPSessionIdentifier>()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v22 = ims::error((uint64_t)&v28, (uint64_t)__p);
    if (!v4) {
      __cxa_bad_typeid();
    }
    uint64_t v23 = v22;
    uint64_t v24 = *(void **)(v22 + 8);
    size_t v25 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v25);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v28);
      if (!v6) {
        return;
      }
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)&v28, (uint64_t)__p);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  int v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(void))(*(void *)(v5 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" qmiSessionId=", 14);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v28);
  }
  int v11 = (std::__shared_weak_count *)v4[17];
  if (!v11 || (uint64_t v12 = std::__shared_weak_count::lock(v11)) == 0)
  {
LABEL_16:
    int v16 = *((_DWORD *)a2 + 1);
    if (v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v17 = ims::error((uint64_t)&v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Error response for request: ", 28);
      *(unsigned char *)(v17 + 17) = 0;
      __n128 v18 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v36, *a2);
      (*(void (**)(uint64_t, void **, __n128))(*(void *)v17 + 32))(v17, v36, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" error:", 7);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" reason: ", 9);
      *(unsigned char *)(v17 + 17) = 0;
      size_t v19 = (const char *)qmi::asString();
      size_t v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v19, v20);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v39 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v28);
      }
      int v16 = 4;
    }
    char v28 = (void *)MEMORY[0x1E4F143A8];
    uint64_t v29 = 1174405120;
    char v30 = ___ZN19QMIRTPCommandDriver29handleSessionUninitializeRespERKN2ms19SessionUninitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    int v31 = &__block_descriptor_tmp_86_2;
    int v35 = v16;
    int v32 = v4;
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ims::performBlock((IMSClientManager *)&v28);
    uint64_t v21 = v34;
    if (v34) {
      goto LABEL_27;
    }
LABEL_33:
    if (!v6) {
      return;
    }
    goto LABEL_34;
  }
  __n128 v13 = v12;
  char v14 = (QMIRTPStackController *)v4[16];
  if (!v14) {
    goto LABEL_15;
  }
  QMIRTPStackController::getSessionByQMIid(v14, *(unsigned __int8 *)(v5 + 490), &v28);
  size_t v15 = v28;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29);
  }
  if (v15)
  {
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "rtp.qmistackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v26 = ims::error((uint64_t)&v28, (uint64_t)__p);
  size_t v27 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v27);
  *(unsigned char *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
  *(unsigned char *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" session is null", 16);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v28);
  }
  uint64_t v21 = v13;
LABEL_27:
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (!v6) {
    return;
  }
LABEL_34:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C5450E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c101_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver22sessionUninitializeReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c101_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver22sessionUninitializeReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms19SessionUninitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C545108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19SessionUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms19SessionUninitialize10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!v4) {
      __cxa_bad_typeid();
    }
    uint64_t v17 = v16;
    __n128 v18 = *(void **)(v16 + 8);
    size_t v19 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"handleSessionConfigureResp", 26);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(v20[0]);
      if (!v6) {
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  int v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleSessionConfigureResp", 26);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(void))(*(void *)(v5 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  int v11 = *((_DWORD *)a2 + 1);
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v12 + 17) = 0;
    __n128 v13 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v27, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v12 + 32))(v12, v27, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v12 + 17) = 0;
    char v14 = (const char *)qmi::asString();
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    int v11 = 4;
  }
  v20[0] = (void *)MEMORY[0x1E4F143A8];
  v20[1] = (void *)1174405120;
  uint64_t v21 = ___ZN19QMIRTPCommandDriver26handleSessionConfigureRespERKN2ms16SessionConfigure8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  uint64_t v22 = &__block_descriptor_tmp_95;
  int v26 = v11;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  size_t v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v20);
  if (!v25)
  {
LABEL_26:
    if (!v6) {
      return;
    }
    goto LABEL_27;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (!v6) {
    return;
  }
LABEL_27:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C54515E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c98_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver19sessionConfigureReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c98_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver19sessionConfigureReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms16SessionConfigure8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C54517E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms16SessionConfigure10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms16SessionConfigure10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = *(_DWORD *)(v3 + 24);
  unsigned int v29 = v7;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v17 = ims::error((uint64_t)v21, (uint64_t)v31);
    if (!v4) {
      __cxa_bad_typeid();
    }
    uint64_t v18 = v17;
    size_t v19 = *(void **)(v17 + 8);
    size_t v20 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v20);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"handleSessionSetStreamDirectionResp", 35);
    *(unsigned char *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v22) < 0)
    {
      operator delete(v21[0]);
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v8 = ims::debug((uint64_t)v21, (uint64_t)v31);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  size_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"handleSessionSetStreamDirectionResp", 35);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(void))(*(void *)(v5 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v9 + 17) = 0;
  ims::toString<ms::MediaServiceDirection>(&v29, &__p);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  int v12 = *((_DWORD *)a2 + 1);
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v13 = ims::error((uint64_t)v21, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v13 + 17) = 0;
    __n128 v14 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&__p, *a2);
    (*(void (**)(uint64_t, std::string *, __n128))(*(void *)v13 + 32))(v13, &__p, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v13 + 17) = 0;
    size_t v15 = (const char *)qmi::asString();
    size_t v16 = strlen(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v15, v16);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    int v12 = 4;
  }
  v21[0] = (void *)MEMORY[0x1E4F143A8];
  v21[1] = (void *)1174405120;
  uint64_t v22 = ___ZN19QMIRTPCommandDriver35handleSessionSetStreamDirectionRespERKN2ms25SessionSetStreamDirection8ResponseENSt3__110shared_ptrI13QMIRTPSessionEENS0_21MediaServiceDirectionE_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_108_0;
  int v27 = v12;
  unsigned int v28 = v7;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  int v26 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v21);
  if (!v26)
  {
LABEL_28:
    if (!v6) {
      return;
    }
    goto LABEL_29;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (!v6) {
    return;
  }
LABEL_29:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C5451E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c136_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENS0_I13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c136_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENS0_I13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms25SessionSetStreamDirection8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5452060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 3) = *(unsigned int *)(result + 12);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbttE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!v5) {
      __cxa_bad_typeid();
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void **)(v7 + 8);
    size_t v10 = strlen((const char *)(*(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleConfigureRTCPReportsResp", 30);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!v5) {
    __cxa_bad_typeid();
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(void **)(v11 + 8);
  size_t v14 = strlen((const char *)(*(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *(void *)(*(void *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v14);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"handleConfigureRTCPReportsResp", 30);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)(v4 + 24) + 176))(v4 + 24);
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  int v15 = *((_DWORD *)a2 + 1);
  if (v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::error((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v16 + 17) = 0;
    __n128 v17 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v25, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v16 + 32))(v16, v25, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v18 = (const char *)qmi::asString();
    size_t v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)v18, v19);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    int v15 = 4;
  }
  v20[0] = (void *)MEMORY[0x1E4F143A8];
  v20[1] = (void *)0x40000000;
  uint64_t v21 = ___ZN19QMIRTPCommandDriver30handleConfigureRTCPReportsRespERKN2ms27SessionConfigureRtcpReports8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  uint64_t v22 = &__block_descriptor_tmp_133;
  uint64_t v23 = v5;
  int v24 = v15;
  ims::performBlock((IMSClientManager *)v20);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C5452774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver23configureRTCPReportsReqENS0_I13QMIRTPSessionEEbbttE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver23configureRTCPReportsReqENS0_I13QMIRTPSessionEEbbttE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF4D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF4D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureRtcpReports8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5452960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5452AC0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  v5[0] = *(void *)(v2 + 8);
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::handleConfigureLinkMonitorResp(v3, a2, v5);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5452B58(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF5A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF5A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureLinkMonitor8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5452CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  v5[0] = *(void *)(v2 + 8);
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIRTPCommandDriver::handleConfigureLinkMonitorResp(v3, a2, v5);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5452E48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInactivity10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 3) = *(unsigned int *)(result + 12);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = **(void ***)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!v3) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  __int16 v6 = (const char *)(*(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v7 = *(void **)(v4 + 8);
  size_t v8 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleSubscribeNotificationsResp", 32);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v9 + 17) = 0;
    __n128 v10 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v14, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v9 + 32))(v9, v14, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v11 = (const char *)qmi::asString();
    size_t v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)v11, v12);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"subscribeNotificationsReq failed", 32);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
}

void sub_1C545330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms29ServiceSubscribeNotifications8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C54534D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms12ServiceError10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms12ServiceError10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms18ServiceRtcpReports10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms18ServiceRtcpReports10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEchtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  __int16 v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::error((uint64_t)v20, (uint64_t)__p);
    if (!v4) {
      __cxa_bad_typeid();
    }
    uint64_t v17 = v16;
    uint64_t v18 = *(void **)(v16 + 8);
    size_t v19 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"handleSendDTMFResp", 18);
    *(unsigned char *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" session is null", 16);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(v20[0]);
      if (!v6) {
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!v4) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handleSendDTMFResp", 18);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(void))(*(void *)(v5 + 24) + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  int v11 = *((_DWORD *)a2 + 1);
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::error((uint64_t)v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Error response for request: ", 28);
    *(unsigned char *)(v12 + 17) = 0;
    __n128 v13 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v27, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)v12 + 32))(v12, v27, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" error:", 7);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" reason: ", 9);
    *(unsigned char *)(v12 + 17) = 0;
    size_t v14 = (const char *)qmi::asString();
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    int v11 = 4;
  }
  v20[0] = (void *)MEMORY[0x1E4F143A8];
  v20[1] = (void *)1174405120;
  uint64_t v21 = ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  uint64_t v22 = &__block_descriptor_tmp_206_0;
  int v26 = v11;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::performBlock((IMSClientManager *)v20);
  if (!v25)
  {
LABEL_26:
    if (!v6) {
      return;
    }
    goto LABEL_27;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (!v6) {
    return;
  }
LABEL_27:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C5453C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver11sendDTMFReqENS0_I13QMIRTPSessionEEchtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver11sendDTMFReqENS0_I13QMIRTPSessionEEchtE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms15SessionSendDTMF8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5453E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5453FA8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
}

uint64_t __copy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CF980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms30ServiceUninitializeAllSessions8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5454144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__1EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
}

uint64_t __copy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms30ServiceUninitializeAllSessions10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::getSize()
{
  return 6;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::write(unsigned char *result, uint64_t *a2)
{
  char v2 = result[8];
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 3) = result[9];
  *(unsigned char *)(v3 + 4) = result[10];
  *(unsigned char *)(v3 + 5) = result[11];
  *a2 = v3 + 6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 3;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio13SendCallEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C545447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio21CodecChangeCbRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5454624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio12DownlinkDtmf10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    __int16 v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      __int16 v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1C5454728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

__CFString *KAStringFromDate(NSDate *a1)
{
  uint64_t v1 = a1;
  if (v1)
  {
    if (qword_1EBBDC0A8 != -1) {
      dispatch_once(&qword_1EBBDC0A8, &__block_literal_global_5);
    }
    uint64_t v2 = [(id)_MergedGlobals_13 stringFromDate:v1];
  }
  else
  {
    uint64_t v2 = @"(null)";
  }

  return v2;
}

void sub_1C54547F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z16KAStringFromDateP6NSDate_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  uint64_t v1 = (void *)_MergedGlobals_13;
  _MergedGlobals_13 = (uint64_t)v0;

  uint64_t v2 = (void *)_MergedGlobals_13;
  return [v2 setDateFormat:@"HH:mm:ss"];
}

void sub_1C5454BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C5454D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  a9.super_class = (Class)KeepAliveManager;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5454FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5455188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C54552D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5455408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5455674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }

  if (a21 < 0) {
    operator delete(__p);
  }

  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

void sub_1C54559A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKNSt3__110shared_ptrI20ImsKeepAliveDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKNSt3__110shared_ptrI20ImsKeepAliveDelegateEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

SipHeader *SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(SipHeader *a1, const SipHeader *a2)
{
  SipHeader::SipHeader(a1, a2);
  v4[8] = 0;
  uint64_t v5 = (char **)(v4 + 8);
  void *v4 = &unk_1F20CFC70;
  v4[9] = 0;
  v4[10] = 0;
  uint64_t v7 = (char *)*((void *)a2 + 8);
  __int16 v6 = (unsigned char *)*((void *)a2 + 9);
  int64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)a1 + 80, v8 >> 3);
    *((void *)a1 + 8) = v9;
    *((void *)a1 + 9) = v9;
    *((void *)a1 + 10) = &v9[8 * v10];
    memmove(v9, v7, v8);
    *((void *)a1 + 9) = &v9[8 * (v8 >> 3)];
    uint64_t v11 = *((void *)a1 + 8);
    uint64_t v7 = (char *)*((void *)a2 + 8);
  }
  *(void *)a1 = &unk_1F20CFBD8;
  *((void *)a1 + 9) = v11;
  for (uint64_t i = (char *)*((void *)a2 + 9); v7 != i; v7 += 8)
  {
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)v7 + 32))();
    uint64_t v14 = v13;
    uint64_t v16 = (uint64_t *)*((void *)a1 + 9);
    unint64_t v15 = *((void *)a1 + 10);
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v18 = ((char *)v16 - *v5) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v15 - (void)*v5;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)a1 + 80, v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = (uint64_t *)&v22[8 * v18];
      uint64_t *v23 = v14;
      uint64_t v17 = v23 + 1;
      uint64_t v25 = (char *)*((void *)a1 + 8);
      uint64_t v24 = (char *)*((void *)a1 + 9);
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v23 = v26;
        }
        while (v24 != v25);
        uint64_t v24 = *v5;
      }
      *((void *)a1 + 8) = v23;
      *((void *)a1 + 9) = v17;
      *((void *)a1 + 10) = &v22[8 * v21];
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v16 = v13;
      uint64_t v17 = v16 + 1;
    }
    *((void *)a1 + 9) = v17;
  }
  return a1;
}

void sub_1C5455CC0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20CFBD8;
  uint64_t v4 = (char *)this + 64;
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 8))(v2[v5]);
        uint64_t v2 = (void *)*((void *)this + 8);
        uint64_t v3 = (void *)*((void *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(void *)this = &unk_1F20CFC70;
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

BOOL SipSecurityAgreementHeader::itemFromString(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v4 = SipSecurityMechanism::fromString(a2);
  if (v4) {
    *a3 = v4;
  }
  return v4 != 0;
}

ImsOutStream *SipPolymorphicVectorHeader<SipSecurityMechanism>::itemToStream(uint64_t a1, uint64_t *a2, ImsOutStream *a3)
{
  uint64_t v4 = *a2;
  (*(void (**)(ImsOutStream *, uint64_t))(*(void *)a3 + 32))(a3, *a2 + 8);
  return SipParameterMap::toStream((SipParameterMap *)(v4 + 32), a3, 0, 0, 0, 0);
}

BOOL SipPolymorphicVectorHeader<SipSecurityMechanism>::itemFromString(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v4 = SipSecurityMechanism::fromString(a2);
  if (v4) {
    *a3 = v4;
  }
  return v4 != 0;
}

BOOL SipVectorHeader<SipSecurityMechanism *>::mergeHeader(void *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = (void *)v3[8];
    uint64_t v6 = (void *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipSecurityMechanism *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipSecurityMechanism *>::~SipVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20CFC70;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void ImsNetworkManager::createTransport(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X5>, int a5@<W6>, void *a6@<X8>)
{
  a6[2] = 0;
  a6[3] = 0;
  a6[7] = 0;
  a6[8] = 0;
  a6[6] = 0;
  *a6 = &unk_1F20B2680;
  a6[1] = &_bambiDomain;
  a6[4] = 0;
  a6[5] = 0;
  uint64_t v11 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (a5)
  {
    uint64_t v12 = (std::__shared_weak_count *)operator new(0x130uLL);
    uint64_t v13 = v12;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFF50;
    uint64_t v14 = v12 + 1;
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipTlsTransportGroup::SipTlsTransportGroup((uint64_t)&v12[1], &v25);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v15 = (std::__shared_weak_count *)v13[9].__vftable;
    if (v15)
    {
      if (v15->__shared_owners_ != -1)
      {
LABEL_18:
        uint64_t v20 = (std::__shared_weak_count *)a1[1];
        *a1 = v14;
        a1[1] = v13;
        if (v20
          && (std::__shared_weak_count::__release_shared[abi:ne180100](v20),
              (uint64_t v14 = (std::__shared_weak_count *)*a1) == 0))
        {
          unint64_t v21 = 0;
        }
        else
        {
          if (v21)
          {
            uint64_t v22 = (std::__shared_weak_count *)a1[1];
            if (v22) {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_32;
          }
        }
        uint64_t v22 = 0;
LABEL_32:
        SipTlsTransportGroup::initialize((uint64_t)v21, (uint64_t)&v25);
        ImsResult::operator=((uint64_t)a6, (uint64_t)&v25);
        goto LABEL_36;
      }
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v13[8].__shared_weak_owners_ = (uint64_t)v14;
      v13[9].__vftable = (std::__shared_weak_count_vtbl *)v13;
      std::__shared_weak_count::__release_weak(v15);
    }
    else
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v13[8].__shared_weak_owners_ = (uint64_t)v14;
      v13[9].__vftable = (std::__shared_weak_count_vtbl *)v13;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_18;
  }
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x118uLL);
  uint64_t v17 = v16;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFFA0;
  uint64_t v18 = v16 + 1;
  uint64_t v25 = v11;
  uint64_t v26 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipInsecureTransportGroup::SipInsecureTransportGroup((uint64_t)&v16[1], &v25);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v19 = (std::__shared_weak_count *)v17[9].__vftable;
  if (!v19)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[8].__shared_weak_owners_ = (uint64_t)v18;
    v17[9].__vftable = (std::__shared_weak_count_vtbl *)v17;
    goto LABEL_24;
  }
  if (v19->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[8].__shared_weak_owners_ = (uint64_t)v18;
    v17[9].__vftable = (std::__shared_weak_count_vtbl *)v17;
    std::__shared_weak_count::__release_weak(v19);
LABEL_24:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v23 = (std::__shared_weak_count *)a1[1];
  *a1 = v18;
  a1[1] = v17;
  if (v23
    && (std::__shared_weak_count::__release_shared[abi:ne180100](v23), (uint64_t v18 = (std::__shared_weak_count *)*a1) == 0))
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (v24)
    {
      uint64_t v22 = (std::__shared_weak_count *)a1[1];
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_35;
    }
  }
  uint64_t v22 = 0;
LABEL_35:
  SipInsecureTransportGroup::initialize((uint64_t)v24, a3, a4, (uint64_t)&v25);
  ImsResult::operator=((uint64_t)a6, (uint64_t)&v25);
LABEL_36:
  ImsResult::~ImsResult((ImsResult *)&v25);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_1C545630C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::SimpleNetworkManager(SimpleNetworkManager *this)
{
  *((unsigned char *)this + 12) = 1;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = &unk_1F20CFD28;
  operator new();
}

void sub_1C5456438(_Unwind_Exception *a1)
{
  SipLockable::~SipLockable(v1, (uint64_t *)off_1F20CFDC8);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::~SimpleNetworkManager(SimpleNetworkManager *this)
{
  *(void *)this = &unk_1F20CFD28;
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipLockable::~SipLockable(this, (uint64_t *)off_1F20CFDC8);
}

{
  uint64_t vars8;

  SimpleNetworkManager::~SimpleNetworkManager(this);
  JUMPOUT(0x1C878E320);
}

void SimpleNetworkManager::copyAllInterfaces(void *a1@<X1>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BOOL v4 = SimpleNetworkManager::copyInterfaces(a1, (const void **)__p);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  if (v4) {
    int v5 = 0;
  }
  else {
    int v5 = 0x40000000;
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54565AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SimpleNetworkManager::copyInterfaces(void *a1, const void **a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  char v32 = 0;
  if (getifaddrs(&v32)) {
    return 0;
  }
  int v5 = v32;
  if (v32)
  {
    while (1)
    {
      int v6 = *((char *)a2 + 23);
      size_t v7 = v6 >= 0 ? *((unsigned __int8 *)a2 + 23) : (size_t)a2[1];
      if (!v7 || v7 == strlen(v5->ifa_name) && (v6 >= 0 ? (int64_t v8 = a2) : (int64_t v8 = *a2), !memcmp(v8, v5->ifa_name, v7)))
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr)
        {
          int sa_family = ifa_addr->sa_family;
          BOOL v11 = sa_family == 30 || sa_family == 2;
          if (v11 && (v5->ifa_flags & 9) == 1) {
            break;
          }
        }
      }
LABEL_67:
      int v5 = v5->ifa_next;
      if (!v5)
      {
        int v27 = v32;
        goto LABEL_70;
      }
    }
    if (sa_family != 30)
    {
      int v12 = socket(2, 2, 0);
      int v17 = 0;
      if (v12 < 0) {
        goto LABEL_53;
      }
      goto LABEL_52;
    }
    int v12 = socket(30, 2, 0);
    if (v12 < 0)
    {
      int v17 = 0;
LABEL_53:
      lpsrc = 0;
      unsigned int v29 = 0;
      IpAddress::createAddress((IpAddress *)v5->ifa_addr, (uint64_t)&lpsrc);
      uint64_t v23 = lpsrc;
      if (lpsrc)
      {
        if (v17)
        {
          if (v24)
          {
            uint64_t v25 = v29;
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v24[6] = v17;
            std::string::basic_string[abi:ne180100]<0>(__dst, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v26 = ims::debug((uint64_t)__dst, (uint64_t)__p);
            (*(void (**)(void *, uint64_t))(*(void *)v23 + 40))(v23, v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)": flavorMask=", 13);
            *(unsigned char *)(v26 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v26 + 17) = 0;
            if (v31 < 0) {
              operator delete(__p[0]);
            }
            if ((v34[7] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
          }
        }
        operator new();
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      goto LABEL_67;
    }
    uint64_t v13 = v5->ifa_addr;
    ifa_name = v5->ifa_name;
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)&v34[24] = 0u;
    strncpy(__dst, ifa_name, 0x10uLL);
    sockaddr v15 = *v13;
    *(sockaddr *)&v34[12] = *(sockaddr *)&v13->sa_data[10];
    *(sockaddr *)uint64_t v34 = v15;
    if (ioctl(v12, 0xC1206949uLL, __dst) < 0)
    {
      close(v12);
      int v17 = 0;
LABEL_52:
      uint64_t v22 = v5->ifa_name;
      *(void *)uint64_t v34 = 0;
      *(void *)&v34[8] = 0;
      strncpy(__dst, v22, 0x10uLL);
      ioctl(v12, 0xC0206933uLL, __dst);
      close(v12);
      goto LABEL_53;
    }
    char v16 = v34[0];
    if ((v34[0] & 0x80) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v18 = ims::debug((uint64_t)__dst, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"flavorMask |= AddressFlavorTemporary", 36);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if ((v34[7] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      int v17 = 4;
      if ((v16 & 0x10) == 0) {
        goto LABEL_40;
      }
    }
    else
    {
      int v17 = 0;
      if ((v34[0] & 0x10) == 0)
      {
LABEL_40:
        if ((v16 & 6) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__dst, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v20 = ims::debug((uint64_t)__dst, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"flavorMask |= AddressFlavorNotReady", 35);
          *(unsigned char *)(v20 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v20 + 17) = 0;
          if (v31 < 0) {
            operator delete(__p[0]);
          }
          if ((v34[7] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          v17 |= 0x20u;
        }
        if ((v16 & 8) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__dst, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v21 = ims::debug((uint64_t)__dst, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"flavorMask |= AddressFlavorDetached", 35);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          if (v31 < 0) {
            operator delete(__p[0]);
          }
          if ((v34[7] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          v17 |= 0x10u;
        }
        goto LABEL_52;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__dst, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::debug((uint64_t)__dst, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"flavorMask |= AddressFlavorDeprecated", 37);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if ((v34[7] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    v17 |= 8u;
    goto LABEL_40;
  }
  int v27 = 0;
LABEL_70:
  MEMORY[0x1C878E760](v27);
  return *a1 != a1[1];
}

void sub_1C5456DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SimpleNetworkManager::copyInterfaceWithName(uint64_t a1, const void **a2)
{
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v2 = SimpleNetworkManager::copyInterfaces(&__p, a2);
  uint64_t v3 = __p;
  if (v2)
  {
    uint64_t v4 = *(void *)__p;
    if ((unint64_t)(v10 - (void)__p) >= 9)
    {
      unint64_t v5 = (v10 - (uint64_t)__p) >> 3;
      if (v5 <= 2) {
        unint64_t v5 = 2;
      }
      unint64_t v6 = v5 - 1;
      size_t v7 = (char *)__p + 8;
      do
      {
        if (*v7) {
          (*(void (**)(void))(*(void *)*v7 + 8))(*v7);
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    goto LABEL_11;
  }
  uint64_t v4 = 0;
  if (__p) {
LABEL_11:
  }
    operator delete(v3);
  return v4;
}

void sub_1C5456FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const __SCNetworkReachability *SimpleNetworkManager::isReachable(uint64_t a1, NetworkInterface *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v5 = (*(uint64_t (**)(void))(**(void **)a3 + 136))();
  NetworkInterface::firstAddress(a2, v5, 1, &v8);
  if (v8) {
    Reachability = ImsNetworkReachabilityMonitor::getReachability(&v8, a3);
  }
  else {
    Reachability = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return Reachability;
}

void sub_1C5457070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

const __SCNetworkReachability *SimpleNetworkManager::isReachable(uint64_t a1, void *a2, uint64_t a3)
{
  return ImsNetworkReachabilityMonitor::getReachability(a2, a3);
}

void SimpleNetworkManager::loggableName(LoggableString *a1@<X8>)
{
}

void SimpleNetworkManager::createTcpSocket(uint64_t *a1@<X1>, int a2@<W3>, int a3@<W4>, int a4@<W5>, void *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = *a1;
    uint64_t v8 = (std::__shared_weak_count *)a1[1];
    uint64_t v10 = (std::__shared_weak_count *)operator new(0xF0uLL);
    uint64_t v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9C10;
    uint64_t v12 = (uint64_t)&v10[1];
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ImsTlsSocket::ImsTlsSocket((uint64_t)&v10[1], &v18, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    uint64_t v14 = *a1;
    uint64_t v13 = (std::__shared_weak_count *)a1[1];
    sockaddr v15 = (std::__shared_weak_count *)operator new(0xC8uLL);
    uint64_t v11 = v15;
    v15->__shared_owners_ = 0;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3D70;
    uint64_t v12 = (uint64_t)&v15[1];
    uint64_t v18 = v14;
    uint64_t v19 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ImsTcpSocket::ImsTcpSocket((uint64_t)&v15[1], &v18, a2, a3);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  uint64_t v18 = v12;
  uint64_t v19 = v11;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v18, &v11[1].__shared_owners_, v12);
  char v16 = v19;
  if (v18) {
    uint64_t v17 = v18 + 80;
  }
  else {
    uint64_t v17 = 0;
  }
  *a5 = v17;
  a5[1] = v16;
}

void sub_1C5457204(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::createUdpSocket(uint64_t *a1@<X1>, int a2@<W3>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  int v5 = (std::__shared_weak_count *)a1[1];
  size_t v7 = (std::__shared_weak_count *)operator new(0x88uLL);
  uint64_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F20;
  uint64_t v9 = (uint64_t)&v7[1];
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ImsUdpSocket::ImsUdpSocket((uint64_t)&v7[1], &v12, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v12 = v9;
  uint64_t v13 = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v12, &v8[1].__shared_owners_, v9);
  uint64_t v10 = v13;
  if (v12) {
    uint64_t v11 = v12 + 80;
  }
  else {
    uint64_t v11 = 0;
  }
  *a3 = v11;
  a3[1] = v10;
}

void sub_1C54572F4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::createListenSocket(uint64_t *a1@<X1>, int a2@<W3>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  int v5 = (std::__shared_weak_count *)a1[1];
  size_t v7 = (std::__shared_weak_count *)operator new(0xA0uLL);
  uint64_t v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B9BC0;
  uint64_t v9 = (uint64_t)&v7[1];
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ImsListenSocket::ImsListenSocket((uint64_t)&v7[1], &v12, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v12 = v9;
  uint64_t v13 = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v12, &v8[1].__shared_owners_, v9);
  uint64_t v10 = v13;
  if (v12) {
    uint64_t v11 = v12 + 80;
  }
  else {
    uint64_t v11 = 0;
  }
  *a3 = v11;
  a3[1] = v10;
}

void sub_1C54573E0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t ImsNetworkManager::usingNullTransport(ImsNetworkManager *this)
{
  return 0;
}

uint64_t SimpleNetworkManager::dnsResolver(SimpleNetworkManager *this)
{
  return *((void *)this + 10);
}

{
  return *((void *)this + 10);
}

void std::__shared_ptr_emplace<SipTlsTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTlsTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipTlsTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipInsecureTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipInsecureTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20CFFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipInsecureTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void XcapCDRule::XcapCDRule(XcapCDRule *this)
{
  *(void *)this = &unk_1F20C81E8;
  BOOL v2 = (char *)this + 8;
  unsigned __int8 v7 = 1;
  *(void *)&long long v6 = &v7;
  uint64_t v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v7, (uint64_t)&std::piecewise_construct, (char **)&v6);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)"rule", (long long *)(v3 + 5));
  *(void *)this = &unk_1F20CFFF0;
  *((void *)this + 1) = &unk_1F20D0068;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  SipUri::SipUri((XcapCDRule *)((char *)this + 112));
  _ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
  long long v4 = v6;
  long long v6 = 0uLL;
  int v5 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1C545767C(_Unwind_Exception *a1)
{
  int v5 = v3;
  SipUri::~SipUri(v5);
  unsigned __int8 v7 = *(std::__shared_weak_count **)(v1 + 96);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v4);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

void XcapCDRule::clone(XcapCDRule *this)
{
}

void sub_1C5457758(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C405FE64821);
  _Unwind_Resume(a1);
}

void XcapCDRule::setAttribute(uint64_t a1, uint64_t a2, const std::string *a3)
{
  XcapNs::stripXcapNs(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size == 2)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
      int v11 = memcmp(__p.__r_.__value_.__l.__data_, XcapCDRule::kId, __p.__r_.__value_.__l.__size_);
      operator delete(v10);
      if (v11) {
        return;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v6 = 0;
      do
      {
        int v7 = __p.__r_.__value_.__s.__data_[v6];
        int v8 = XcapCDRule::kId[v6];
      }
      while (v7 == v8 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v6++);
      if (v7 != v8) {
        return;
      }
    }
    std::string::operator=((std::string *)(a1 + 64), a3);
    return;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t XcapCDRule::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  if (v6 == 10)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      char v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "forward-to", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_38;
      }
LABEL_33:
      if (!memcmp(v16, "conditions", size))
      {
LABEL_35:
        uint64_t v7 = *(void *)(a1 + 88);
        if ((v4 & 0x80) == 0) {
          return v7;
        }
LABEL_36:
        char v16 = (void *)__s1.__r_.__value_.__r.__words[0];
        goto LABEL_37;
      }
      a1 = 0;
LABEL_38:
      operator delete(v16);
      return a1;
    }
    if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v12 = "forward-to";
      uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v12;
        if (!--v13)
        {
LABEL_17:
          uint64_t v7 = a1;
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
            return v7;
          }
          goto LABEL_36;
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (v6 != 7) {
      goto LABEL_30;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      char v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
      {
        uint64_t v7 = 0;
LABEL_37:
        a1 = v7;
        goto LABEL_38;
      }
      goto LABEL_38;
    }
    if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      int v8 = &__s1;
      uint64_t v9 = "actions";
      uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (v8->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v9)
      {
        int v8 = (std::string *)((char *)v8 + 1);
        ++v9;
        if (!--v10) {
          goto LABEL_17;
        }
      }
LABEL_19:
      if (v6 != 10)
      {
LABEL_29:
        uint64_t v7 = 0;
LABEL_30:
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
          return v7;
        }
        goto LABEL_36;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        uint64_t v14 = &__s1;
        sockaddr v15 = "conditions";
        while (v14->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
        {
          uint64_t v14 = (std::string *)((char *)v14 + 1);
          ++v15;
          if (!--v3) {
            goto LABEL_35;
          }
        }
        goto LABEL_29;
      }
      char v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
  }
  return a1;
}

void XcapCDRule::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __s1.__r_.__value_.__l.__size_;
  }
  if (v8 != 6)
  {
    if (v8 == 10)
    {
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
        if (!memcmp(__s1.__r_.__value_.__l.__data_, "forward-to", __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        goto LABEL_41;
      }
      p_s1 = &__s1;
      uint64_t v13 = "forward-to";
      uint64_t v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v13;
        if (!--v14) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      if (v8 != 7) {
        goto LABEL_42;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
LABEL_41:
        bambi::XmlParserItem::parseChild(a1, a2, a3);
        goto LABEL_42;
      }
      uint64_t v9 = &__s1;
      uint64_t v10 = "actions";
      uint64_t v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        uint64_t v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v11) {
          goto LABEL_41;
        }
      }
    }
    if (v8 != 10) {
      goto LABEL_42;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      sockaddr v15 = &__s1;
      char v16 = "conditions";
      while (v15->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        sockaddr v15 = (std::string *)((char *)v15 + 1);
        ++v16;
        if (!--v6) {
          goto LABEL_41;
        }
      }
      goto LABEL_42;
    }
    uint64_t v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_38:
    if (memcmp(v19, "conditions", size))
    {
      if (size != 6) {
        goto LABEL_42;
      }
      goto LABEL_32;
    }
    goto LABEL_41;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_32:
    if (memcmp(v19, "target", size)) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
LABEL_33:
    memset(&__p, 0, sizeof(__p));
    (*(void (**)(uint64_t, uint64_t, uint64_t *, std::string *))(*(void *)a1 + 72))(a1, a2, a3, &__p);
    SipUri::fromString(a1 + 112, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_42;
  }
  uint64_t v17 = &__s1;
  uint64_t v18 = "target";
  while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
  {
    uint64_t v17 = (std::string *)((char *)v17 + 1);
    ++v18;
    if (!--v6) {
      goto LABEL_33;
    }
  }
LABEL_42:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1C5457C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapCDRule::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C5458040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v30 = *(std::__shared_weak_count **)(v28 - 88);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  char v31 = *(std::__shared_weak_count **)(v28 - 72);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  char v32 = *(std::__shared_weak_count **)(v27 + 8);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C54580C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x1C54580A4);
  }
  JUMPOUT(0x1C54580A0);
}

void sub_1C54580D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x1C54580B0);
  }
  JUMPOUT(0x1C54580ACLL);
}

void sub_1C54580E4()
{
  if (!*(void *)(v0 - 56)) {
    JUMPOUT(0x1C54580B0);
  }
  JUMPOUT(0x1C54580ACLL);
}

void non-virtual thunk to'XcapCDRule::constructTree(void *a1@<X8>)
{
}

void XcapCDRule::targetNumber(XcapCDRule *this@<X0>, std::string *a2@<X8>)
{
  if (SipUri::isTelUri((XcapCDRule *)((char *)this + 112)))
  {
    if ((*((char *)this + 311) & 0x80000000) == 0)
    {
      char v4 = (char *)this + 288;
LABEL_6:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      return;
    }
    int v5 = (const std::string::value_type *)*((void *)this + 36);
    std::string::size_type v6 = *((void *)this + 37);
  }
  else
  {
    if ((*((char *)this + 263) & 0x80000000) == 0)
    {
      char v4 = (char *)this + 240;
      goto LABEL_6;
    }
    int v5 = (const std::string::value_type *)*((void *)this + 30);
    std::string::size_type v6 = *((void *)this + 31);
  }
  std::string::__init_copy_ctor_external(a2, v5, v6);
}

uint64_t XcapCDRule::asString@<X0>(XcapCDRule *this@<X0>, void *a2@<X8>)
{
  uint64_t v28 = 0;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)uint64_t v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Rule-Id: ", 9);
  int v5 = *((char *)this + 87);
  if (v5 >= 0) {
    std::string::size_type v6 = (char *)this + 64;
  }
  else {
    std::string::size_type v6 = (char *)*((void *)this + 8);
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)this + 87);
  }
  else {
    uint64_t v7 = *((void *)this + 9);
  }
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",  ", 3);
  uint64_t v10 = (XcapCDCondition *)*((void *)this + 11);
  if (v10) {
    XcapCDCondition::asString(v10, v21);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(v21, "");
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v11 = v21;
  }
  else {
    uint64_t v11 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v12 = v22;
  }
  else {
    uint64_t v12 = (uint64_t)v21[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", Target : ", 11);
  XcapCDRule::targetNumber(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet(&v29, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v29);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23 + 8, a2);
  *(void *)&v23[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v23 + *(void *)(*(void *)&v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v23[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v27);
}

void sub_1C5458454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapCDRule::~XcapCDRule(XcapCDRule *this)
{
  *((void *)this - 1) = &unk_1F20CFFF0;
  *(void *)this = &unk_1F20D0068;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 104));
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20CFFF0;
  *(void *)this = &unk_1F20D0068;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 104));
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C878E320);
}

void XcapDocumentSelector::XcapDocumentSelector(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C5458710(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentSelector::asString@<X0>(XcapDocumentSelector *this@<X0>, void *a2@<X8>)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)std::string __p = 0u;
  long long v20 = 0u;
  memset(v18, 0, sizeof(v18));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  int v4 = *((char *)this + 23);
  if (v4 >= 0) {
    long long v5 = this;
  }
  else {
    long long v5 = *(XcapDocumentSelector **)this;
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v6 = *((void *)this + 1);
  }
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v5, v6);
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/users/", 7);
  uint64_t v11 = *((void *)this + 3);
  uint64_t v10 = (char *)this + 24;
  uint64_t v9 = v11;
  int v12 = v10[23];
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t)v10;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v12 >= 0) {
    uint64_t v14 = v10[23];
  }
  else {
    uint64_t v14 = *((void *)v10 + 1);
  }
  sockaddr v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"simservs.xml", 12);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18 + 8, a2);
  *(void *)&v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(*(void *)&v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v18[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v22);
}

void sub_1C54588F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XcapDocumentSelector::clone(XcapDocumentSelector *this)
{
}

void sub_1C5458950(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::XcapNafServerInfo(XcapNafServerInfo *this, XcapSession *a2, const XcapConfig *a3, const SipAuthResponse *a4, uint64_t a5)
{
}

void sub_1C5458AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  XcapServerInfo::~XcapServerInfo(v20);
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::~XcapNafServerInfo(XcapNafServerInfo *this)
{
  *(void *)this = &unk_1F20D0118;
  std::string::basic_string[abi:ne180100]<0>(v5, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Deleting NafServerInfo: ", 24);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  XcapServerInfo::~XcapServerInfo(this);
}

{
  uint64_t vars8;

  XcapNafServerInfo::~XcapNafServerInfo(this);
  JUMPOUT(0x1C878E320);
}

void XcapNafServerInfo::nafId(XcapNafServerInfo *this@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_14, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_14))
  {
    LODWORD(v45.__r_.__value_.__l.__data_) = 1;
    v45.__r_.__value_.__s.__data_[4] = 2;
    std::vector<unsigned char>::vector[abi:ne180100](&qword_1EBBDC0C8, &v45, 5uLL);
    __cxa_atexit((void (*)(void *))std::vector<unsigned char>::~vector[abi:ne180100], &qword_1EBBDC0C8, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_14);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC0B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC0B8))
  {
    LOWORD(v45.__r_.__value_.__l.__data_) = 1;
    v45.__r_.__value_.__s.__data_[2] = 1;
    std::vector<unsigned char>::vector[abi:ne180100](qword_1EBBDC0E0, &v45, 3uLL);
    __cxa_atexit((void (*)(void *))std::vector<unsigned char>::~vector[abi:ne180100], qword_1EBBDC0E0, &dword_1C51D1000);
    __cxa_guard_release(&qword_1EBBDC0B8);
  }
  std::string __p = 0;
  long long v41 = 0;
  unint64_t v42 = 0;
  if (*((unsigned char *)this + 180))
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)qword_1EBBDC0E0[0], unk_1EBBDC0E8, unk_1EBBDC0E8 - qword_1EBBDC0E0[0]);
    __int16 v4 = (*(uint64_t (**)(void))(**((void **)this + 61) + 32))(*((void *)this + 61));
    __int16 v5 = v4;
    char v6 = v41;
    if ((unint64_t)v41 >= v42)
    {
      std::string::size_type v8 = (char *)__p;
      uint64_t v9 = v41 - (unsigned char *)__p;
      int64_t v10 = v41 - (unsigned char *)__p + 1;
      if (v10 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v42 - (void)__p;
      if (2 * (v42 - (unint64_t)__p) > v10) {
        int64_t v10 = 2 * v11;
      }
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v10;
      }
      if (v12) {
        uint64_t v13 = operator new(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (char *)v13 + v12;
      *((unsigned char *)v13 + v9) = HIBYTE(v5);
      long long v7 = (char *)v13 + v9 + 1;
      if (v6 == v8)
      {
        uint64_t v13 = (char *)v13 + v9;
      }
      else
      {
        sockaddr v15 = &v6[~(unint64_t)v8];
        do
        {
          char v16 = *--v6;
          (v15--)[(void)v13] = v16;
        }
        while (v6 != v8);
        char v6 = (char *)__p;
      }
      std::string __p = v13;
      long long v41 = v7;
      unint64_t v42 = (unint64_t)v14;
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *long long v41 = HIBYTE(v4);
      long long v7 = v6 + 1;
    }
    long long v41 = v7;
    if ((unint64_t)v7 >= v42)
    {
      uint64_t v18 = (char *)__p;
      int64_t v19 = v7 - (unsigned char *)__p;
      uint64_t v20 = v7 - (unsigned char *)__p + 1;
      if (v20 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = v42 - (void)__p;
      if (2 * (v42 - (unint64_t)__p) > v20) {
        uint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22) {
        uint64_t v23 = operator new(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (char *)v23 + v22;
      *((unsigned char *)v23 + v19) = v5;
      uint64_t v17 = (char *)v23 + v19 + 1;
      if (v7 == v18)
      {
        std::string __p = (char *)v23 + v19;
        long long v41 = (char *)v23 + v19 + 1;
        unint64_t v42 = (unint64_t)v24;
      }
      else
      {
        long long v25 = &v7[~(unint64_t)v18];
        do
        {
          char v26 = *--v7;
          (v25--)[(void)v23] = v26;
        }
        while (v7 != v18);
        long long v7 = (char *)__p;
        std::string __p = v23;
        long long v41 = (char *)v23 + v19 + 1;
        unint64_t v42 = (unint64_t)v24;
        if (!v7) {
          goto LABEL_41;
        }
      }
      operator delete(v7);
    }
    else
    {
      *long long v7 = v5;
      uint64_t v17 = v7 + 1;
    }
LABEL_41:
    long long v41 = v17;
    goto LABEL_42;
  }
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)qword_1EBBDC0C8, *(char **)algn_1EBBDC0D0, *(void *)algn_1EBBDC0D0 - qword_1EBBDC0C8);
LABEL_42:
  memset(&v39, 0, sizeof(v39));
  uint64_t v27 = (const void *)*((void *)this + 62);
  if (!v27
  {
LABEL_66:
    (*(void (**)(std::string *__return_ptr, XcapNafServerInfo *))(*(void *)this + 80))(&v39, this);
    goto LABEL_67;
  }
  memset(&v45, 0, sizeof(v45));
  uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v28 + 24))(v28);
  char v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(v29 + 8), "realm");
  char v31 = (long long *)(v30 + 40);
  if (!v30) {
    char v31 = &ims::kEmptyString;
  }
  if (*((char *)v31 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v31, *((void *)v31 + 1));
  }
  else {
    std::string v45 = *(std::string *)v31;
  }
  memset(&__str, 0, sizeof(__str));
  XcapNafServerInfo::_fetchMatchingRealm((uint64_t)&__str, this, &v45);
  memset(&v39, 0, sizeof(v39));
  int v32 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __str.__r_.__value_.__l.__size_;
  }
  if (!size
    || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_str = &__str)
      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
        (long long v35 = memchr(p_str, 64, size)) == 0 || v35 - (unsigned char *)p_str == -1))
  {
    if (v32 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    goto LABEL_66;
  }
  std::string::basic_string(&v43, &__str, v35 - (unsigned char *)p_str + 1, size, (std::allocator<char> *)&v46);
  std::string v39 = v43;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
LABEL_67:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v36 = &v39;
  }
  else {
    long long v36 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v39.__r_.__value_.__l.__size_;
  }
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char **)a2, 0, (char *)v36, (char *)v36 + v37, v37);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a2, *(char **)(a2 + 8), (char *)__p, v41, v41 - (unsigned char *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v45, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  uint64_t v38 = ims::debug((uint64_t)&v45, (uint64_t)&__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v38 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"NAF_ID: ", 8);
  *(unsigned char *)(v38 + 17) = 0;
  logBytes((uint64_t *)a2, &v43);
  (*(void (**)(uint64_t, std::string *))(*(void *)v38 + 32))(v38, &v43);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v38 + 17) = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    long long v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1C54592D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void *std::vector<unsigned char>::vector[abi:ne180100](void *a1, const void *a2, size_t __sz)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, __sz);
    char v6 = (char *)a1[1];
    memmove(v6, a2, __sz);
    a1[1] = &v6[__sz];
  }
  return a1;
}

void sub_1C5459438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned char>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void XcapNafServerInfo::host(XcapNafServerInfo *this@<X0>, std::string *a2@<X8>)
{
  __int16 v4 = (const std::string::value_type **)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    std::string::size_type v5 = *((void *)this + 20);
    if (v5)
    {
      char v6 = *v4;
      std::string::__init_copy_ctor_external(a2, v6, v5);
      return;
    }
  }
  else if (*((unsigned char *)this + 175))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 21);
    return;
  }
  memset(&v20, 0, sizeof(v20));
  std::string::basic_string[abi:ne180100]<0>(&v20, "xcap.");
  memset(&__p, 0, sizeof(__p));
  XcapServerInfo::_constructHostSuffix(this, &__p);
  long long v7 = XcapServerInfo::k3gppDomain;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int64_t v9 = strlen(XcapServerInfo::k3gppDomain);
  if (v9)
  {
    int64_t v10 = v9;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= v9)
    {
      size_t v12 = (char *)p_p + size;
      int v13 = *XcapServerInfo::k3gppDomain;
      uint64_t v14 = p_p;
      do
      {
        int64_t v15 = size - v10;
        if (v15 == -1) {
          break;
        }
        char v16 = (char *)memchr(v14, v13, v15 + 1);
        if (!v16) {
          break;
        }
        uint64_t v17 = v16;
        if (!memcmp(v16, v7, v10))
        {
          if (v17 == v12 || v17 - (char *)p_p == -1) {
            break;
          }
          goto LABEL_24;
        }
        uint64_t v14 = (std::string *)(v17 + 1);
        int64_t size = v12 - (v17 + 1);
      }
      while (size >= v10);
    }
  }
  else
  {
LABEL_24:
    size_t v18 = strlen((const char *)XcapServerInfo::kImsPrefix);
    std::string::append(&v20, (const std::string::value_type *)XcapServerInfo::kImsPrefix, v18);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C5459650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapNafServerInfo::port(XcapNafServerInfo *this)
{
  return *((unsigned int *)this + 44);
}

void XcapNafServerInfo::_constructInitialHeaders(uint64_t **this)
{
  ((void (*)(void **__return_ptr))(*this)[10])(v7);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)XcapServerInfo::kHostHeaderName);
  v6[0] = __p;
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 55, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v6);
  uint64_t v3 = (char *)v2 + 56;
  if (*((char *)v2 + 79) < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v7;
  *((void *)v3 + 2) = v8;
  BYTE7(v8) = 0;
  LOBYTE(v7[0]) = 0;
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[0]);
    if (SBYTE7(v8) < 0) {
      operator delete(v7[0]);
    }
  }
  uint64_t v9 = 0;
  *(_OWORD *)long long v7 = 0u;
  long long v8 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v7);
}

void sub_1C5459B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a30);
  _Unwind_Resume(a1);
}

uint64_t XcapNafServerInfo::setDigestCredentials(XcapNafServerInfo *this, const SipAuthResponse *a2)
{
  uint64_t v4 = *((void *)this + 63);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const SipAuthResponse *))(*(void *)a2 + 16))(a2);
  *((void *)this + 63) = result;
  return result;
}

void XcapNafServerInfo::setGbaNafCredentials(void *a1, uint64_t *a2)
{
  memset(&__str, 0, sizeof(__str));
  base64Encode(*a2, a2[1] - *a2, &__str);
  uint64_t v3 = (const void *)a1[62];
  if (v3
  {
    uint64_t v4 = a1[63];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  uint64_t v5 = ims::error((uint64_t)__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Auth response is not Digest", 27);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  char v6 = (XcapSession *)a1[5];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v8 = 0x40000000;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  XcapSession::operationFailure(v6, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C545A594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a9);
  if (*(char *)(v32 - 49) < 0) {
    operator delete(*(void **)(v32 - 72));
  }
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::_fetchMatchingRealm(uint64_t a1, _DWORD *a2, std::string *this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC0C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC0C0))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC0F8, "3GPP-bootstrapping-uicc@");
    __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBBDC0F8, &dword_1C51D1000);
    __cxa_guard_release(&qword_1EBBDC0C0);
  }
  std::string v45 = 0;
  char v46 = 0;
  unint64_t v47 = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v6 = std::string::find(this, 59, 0);
  if (v6 == -1)
  {
    std::string::size_type v8 = 0;
  }
  else
  {
    std::string::size_type v7 = v6;
    std::string::size_type v8 = 0;
    do
    {
      std::string::basic_string(&v43, this, v8, v7 - v8, (std::allocator<char> *)v48);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v43;
      char v9 = v46;
      if ((unint64_t)v46 >= v47)
      {
        uint64_t v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v45, (long long *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v46->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        uint64_t v11 = v9 + 1;
      }
      char v46 = v11;
      std::string::size_type v8 = v7 + 1;
      std::string::size_type v7 = std::string::find(this, 59, v7 + 1);
    }
    while (v7 != -1);
  }
  std::string::basic_string(&v43, this, v8, ~v8, (std::allocator<char> *)v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v43;
  uint64_t v12 = v46;
  if ((unint64_t)v46 >= v47)
  {
    uint64_t v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v45, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v46->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    uint64_t v14 = v12 + 1;
  }
  char v46 = v14;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  int v15 = a2[68];
  if (v15 == 1)
  {
    uint64_t v24 = (uint64_t)v45;
    if (v45 == v14) {
      goto LABEL_75;
    }
    while (1)
    {
      memset(&v43, 0, sizeof(v43));
      if (*(char *)(v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
      }
      else
      {
        long long v25 = *(_OWORD *)v24;
        v43.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v25;
      }
      int v26 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v28 = (std::string *)v43.__r_.__value_.__r.__words[0];
        size_t v27 = v43.__r_.__value_.__l.__size_ >= 0x13 ? 19 : v43.__r_.__value_.__l.__size_;
      }
      else
      {
        size_t v27 = HIBYTE(v43.__r_.__value_.__r.__words[2]) >= 0x13u ? 19 : HIBYTE(v43.__r_.__value_.__r.__words[2]);
        uint64_t v28 = &v43;
      }
      int v29 = memcmp(v28, "3GPP-bootstrapping@", v27);
      if (v27 >= 0x13 && v29 == 0) {
        break;
      }
      if (v26 < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      v24 += 24;
      if ((std::string *)v24 == v14) {
        goto LABEL_75;
      }
    }
  }
  else
  {
    if (v15) {
      goto LABEL_75;
    }
    uint64_t v16 = (uint64_t)v45;
    if (v45 == v14) {
      goto LABEL_75;
    }
    while (1)
    {
      memset(&v43, 0, sizeof(v43));
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)v16;
        v43.__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
      }
      unint64_t v18 = byte_1EBBDC10F >= 0 ? byte_1EBBDC10F : qword_1EBBDC100;
      char v19 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v18 == -1) {
LABEL_105:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        unint64_t v21 = (std::string *)v43.__r_.__value_.__r.__words[0];
        size_t v20 = v43.__r_.__value_.__l.__size_ >= v18 ? v18 : v43.__r_.__value_.__l.__size_;
      }
      else
      {
        if (v18 == -1) {
          goto LABEL_105;
        }
        size_t v20 = HIBYTE(v43.__r_.__value_.__r.__words[2]) >= v18 ? v18 : HIBYTE(v43.__r_.__value_.__r.__words[2]);
        unint64_t v21 = &v43;
      }
      size_t v22 = byte_1EBBDC10F >= 0 ? &qword_1EBBDC0F8 : (uint64_t *)qword_1EBBDC0F8;
      if (!memcmp(v21, v22, v20) && v20 == v18) {
        break;
      }
      if (v19 < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      v16 += 24;
      if ((std::string *)v16 == v14) {
        goto LABEL_75;
      }
    }
  }
  std::string::operator=((std::string *)a1, &v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
LABEL_75:
  uint64_t v31 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v31 = *(unsigned __int8 *)(a1 + 23);
  }
  if (!v31)
  {
    int v32 = a2[68];
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(void *)a2 + 80))(&v43, a2);
    uint64_t v33 = (const std::string::value_type **)"3GPP-bootstrapping@";
    if (!v32) {
      uint64_t v33 = (const std::string::value_type **)&qword_1EBBDC0F8;
    }
    char v34 = byte_1EBBDC10F;
    if (v32) {
      char v34 = 19;
    }
    uint64_t v35 = qword_1EBBDC100;
    if (v32) {
      uint64_t v35 = 0x6970706172747374;
    }
    if (v34 >= 0) {
      long long v36 = (const std::string::value_type *)v33;
    }
    else {
      long long v36 = *v33;
    }
    if (v34 >= 0) {
      std::string::size_type v37 = v34;
    }
    else {
      std::string::size_type v37 = v35;
    }
    uint64_t v38 = std::string::insert(&v43, 0, v36, v37);
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    *(void *)long long v48 = v38->__r_.__value_.__l.__size_;
    *(void *)&v48[7] = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(void *)a1 = v39;
    *(void *)(a1 + 8) = *(void *)v48;
    *(void *)(a1 + 15) = *(void *)&v48[7];
    *(unsigned char *)(a1 + 23) = v40;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  uint64_t v41 = ims::debug((uint64_t)&v43, (uint64_t)v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v41 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Realm from NAF Response: ", 25);
  *(unsigned char *)(v41 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v41 + 32))(v41, this);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v41 + 17) = 0;
  if (v49 < 0) {
    operator delete(*(void **)v48);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  uint64_t v42 = ims::debug((uint64_t)&v43, (uint64_t)v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Matching Realm: ", 16);
  *(unsigned char *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 32))(v42, a1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v42 + 17) = 0;
  if (v49 < 0) {
    operator delete(*(void **)v48);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C545AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t XcapNafServerInfo::handleHttpResponseSuccess(uint64_t a1)
{
  return XcapSession::operationSuccess(*(void *)(a1 + 40));
}

void XcapNafServerInfo::handleHttpResponseRedirect(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  uint64_t v2 = ims::warn((uint64_t)__p, (uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Not implemented", 15);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = *(XcapSession **)(a1 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v5 = 0x40000000;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  XcapSession::operationFailure(v3, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C545AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void XcapNafServerInfo::handleHttpResponseAuthChallenge(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1[62])
  {
    std::string::basic_string[abi:ne180100]<0>(v12, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v5 = ims::error((uint64_t)v12, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" server has challenged us twice. Probably didn't like our response to the 1st challenge. Failing request", 104);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v14 < 0) {
      operator delete(v12[0]);
    }
LABEL_22:
    uint64_t v11 = (XcapSession *)a1[5];
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    v12[0] = &unk_1F20B2680;
    v12[1] = &_bambiDomain;
    int v13 = 0x40000000;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    XcapSession::operationFailure(v11, (const ImsResult *)v12);
    ImsResult::~ImsResult((ImsResult *)v12);
    return;
  }
  XcapServerInfo::_saveCookie((uint64_t)a1, a4);
  uint64_t v7 = SipAuthScheme::createFromString(a3);
  if (!v7)
  {
    a1[62] = 0;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v12, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    uint64_t v10 = ims::error((uint64_t)v12, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Cannot create challenge from ", 29);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" client. Challenge Header:", 26);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v14 < 0) {
      operator delete(v12[0]);
    }
    goto LABEL_22;
  }
  uint64_t v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  a1[62] = v8;
  if (!v8
  {
    goto LABEL_16;
  }
  uint64_t v9 = (XcapSession *)a1[5];
  XcapSession::handleNafChallenge(v9);
}

void sub_1C545B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t XcapNafServerInfo::handleHttpResponseFailure(uint64_t a1, int a2, ImsResult *a3)
{
  return XcapSession::operationFailure(*(XcapSession **)(a1 + 40), a3);
}

uint64_t XcapNafServerInfo::sendPutRequest(uint64_t a1, const std::string *a2, const std::string *a3)
{
  char v6 = (uint64_t **)(a1 + 440);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)XcapServerInfo::kContentTypeHeaderName);
  uint64_t v11 = __p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  std::string::operator=((std::string *)((char *)v7 + 56), (const std::string *)(a1 + 304));
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return XcapServerInfo::sendPutRequest(a1, a2, a3);
}

void sub_1C545B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *XcapNafServerInfo::_userAgent@<X0>(XcapNafServerInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = &XcapServerInfo::k3gppGbaUicc;
  if (*((_DWORD *)this + 68)) {
    uint64_t v2 = &XcapServerInfo::k3gppGba;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, *v2);
}

void XcapNafServerInfo::httpVersion(XcapNafServerInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 47), *((void *)this + 48));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 49);
  }
}

void *XcapNafServerInfo::id@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "NAF");
}

BOOL XcapServerInfo::challenged(XcapServerInfo *this)
{
  return *((void *)this + 63) != 0;
}

uint64_t XcapServerInfo::getDigestCredentials(XcapServerInfo *this)
{
  return *((void *)this + 63);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint64_t v7 = __src;
  char v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    uint64_t v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      uint64_t v18 = &__src[a5];
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        uint64_t v20 = a1[1];
      }
      else
      {
        int64_t v19 = __src - __dst;
        uint64_t v20 = a1[1];
        unint64_t v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }
      a1[1] = v20;
      if (v17 < 1) {
        return v5;
      }
    }
    int v32 = &__dst[a5];
    uint64_t v33 = &v20[-a5];
    char v34 = v20;
    if (&v20[-a5] < v10)
    {
      uint64_t v35 = &v10[a5] - v20;
      char v34 = v20;
      do
      {
        char v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
    a1[1] = v34;
    if (v20 != v32) {
      memmove(&__dst[a5], __dst, v20 - v32);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v12 = v10 - *a1 + a5;
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    char v22 = &v13[(void)v16];
    uint64_t v23 = &v13[(void)v16 + v6];
    char v24 = v22;
    do
    {
      char v25 = *v7++;
      *v24++ = v25;
      --v6;
    }
    while (v6);
    int v26 = *a1;
    if (*a1 == v5)
    {
      uint64_t v28 = v22;
    }
    else
    {
      size_t v27 = v5;
      uint64_t v28 = v22;
      do
      {
        char v29 = *--v27;
        *--uint64_t v28 = v29;
      }
      while (v27 != v26);
      char v10 = a1[1];
    }
    char v30 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v23, v5, v10 - v5);
    }
    uint64_t v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31) {
      operator delete(v31);
    }
    return v22;
  }
  return v5;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint64_t v7 = __src;
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int v26 = &v13[(void)v16];
    size_t v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    char v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      int v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      int v32 = v26;
      do
      {
        char v33 = *--v31;
        *--int v32 = v33;
      }
      while (v31 != v30);
      char v10 = *(char **)(a1 + 8);
    }
    char v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    uint64_t v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &v5[v6];
    char v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v13 = 0;
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    void v12[2] = 1;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t DeferredRegistration::name@<X0>(DeferredRegistration *this@<X0>, void *a2@<X8>)
{
  uint64_t v24 = 0;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)uint64_t v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"deferred registration (services=", 32);
  int v5 = *((_DWORD *)this + 12);
  std::string::basic_string[abi:ne180100]<0>(&v15, ",");
  BambiServices::namesForServiceMask(v5, __p);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" reason=", 8);
  int v10 = *((char *)this + 1719);
  if (v10 >= 0) {
    uint64_t v11 = (char *)this + 1696;
  }
  else {
    uint64_t v11 = (char *)*((void *)this + 212);
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)this + 1719);
  }
  else {
    uint64_t v12 = *((void *)this + 213);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(void *)&v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(*(void *)&v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v23);
}

void sub_1C545BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void DeferredRegistration::perform(DeferredRegistration *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 1);
      if (v7) {
        SipRegistrationClient::registerWithConfig(v7, (uint64_t)this + 24, (std::string *)((char *)this + 1696), a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C545BD40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::registerWithConfig(uint64_t a1, uint64_t a2, std::string *a3, char a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 360);
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
  if (v9 && (int v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    int v11 = *(_DWORD *)(*(void *)(v8 + 8) + 200);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v11 != 2)
    {
LABEL_4:
      memset(&v107[8], 0, 48);
      v106[0] = &unk_1F20B2680;
      v106[1] = &_bambiDomain;
      *(_DWORD *)v107 = 1073741826;
      uint64_t v12 = (const std::string *)ImsResult::operator<<<char [45]>((uint64_t)v106, "registerWithConfig: stack is not initialized");
      SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v12, -1, 1, 0);
LABEL_18:
      ImsResult::~ImsResult((ImsResult *)v106);
      return;
    }
  }
  else if (MEMORY[0xC8] != 2)
  {
    goto LABEL_4;
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    memset(&v107[8], 0, 48);
    v106[0] = &unk_1F20B2680;
    v106[1] = &_bambiDomain;
    *(_DWORD *)v107 = 1073741825;
    size_t v15 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)v106, "registerWithConfig: no proxies specified");
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v15, -1, 1, 0);
    goto LABEL_18;
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v106);
  if (*(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v106[0] + 16))(v106[0]) + 438))
  {
    SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), &__p);
    uint64_t v13 = *(void *)(__p.__r_.__value_.__r.__words[0] + 264);
    if (v13) {
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1);
    }
    int v14 = v13 ^ 1;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v106[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106[1]);
  }
  if (v14)
  {
    memset(&v107[8], 0, 48);
    v106[0] = &unk_1F20B2680;
    v106[1] = &_bambiDomain;
    *(_DWORD *)v107 = 1073741825;
    char v16 = (const std::string *)ImsResult::operator<<<char [55]>((uint64_t)v106, "registerWithConfig: IPSec is enabled but not available");
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v16, -1, 1, 0);
    goto LABEL_18;
  }
  if ((SipRegistrationClient::shouldDeferRegistration((SipRegistrationClient *)a1) & 1) != 0
    || (*(_DWORD *)(a1 + 520) | 4) != 5)
  {
    long long v21 = *(std::__shared_weak_count **)(a1 + 208);
    v100[0] = *(void *)(a1 + 200);
    if (!v21 || (long long v22 = std::__shared_weak_count::lock(v21), (v100[1] = v22) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v23 = v22;
    SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), (uint64_t)v100, a2, (unsigned __int8 *)a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return;
  }
  if ((a4 & 1) != 0 || !*(_DWORD *)(a1 + 2772))
  {
LABEL_72:
    SipRegistrationConfig::operator=(a1 + 1112, a2);
    if (*(_DWORD *)(a1 + 520) == 5)
    {
      uint64_t v47 = *(void *)(a1 + 16);
      uint64_t v46 = a1 + 16;
      uint64_t v48 = (*(uint64_t (**)(uint64_t))(v47 + 64))(v46);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v48);
      char v49 = (unsigned char *)ImsOutStream::operator<<(v48, "registerWithConfig: still waiting for transport initialization");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v49[17] = 0;
      return;
    }
    uint64_t v50 = *(int8x8_t **)(a1 + 3664);
    if (v50) {
      SipTimerContainer::cancelTimer(v50, (std::string *)(a1 + 3680));
    }
    *(_DWORD *)(a1 + 3672) = 0;
    *(_DWORD *)(a1 + 452) = 0;
    *(unsigned char *)(a1 + 3648) = 0;
    std::string::operator=((std::string *)(a1 + 3896), a3);
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a1 + 2415) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 2392), *(void *)(a1 + 2400));
    }
    else {
      std::string __p = *(std::string *)(a1 + 2392);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = 7;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
        p_p = &__p;
      }
      strcpy((char *)p_p, "default");
    }
    uint64_t v53 = *(void *)(a1 + 3632);
    if (v53)
    {
      char v54 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 384))(v53);
      BOOL v55 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__p, v54);
      uint64_t v56 = a1 + 16;
      long long v57 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64);
      if (v55)
      {
        uint64_t v58 = v57(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(a1 + 16, v58);
        uint64_t v59 = ImsOutStream::operator<<(v58, "sticking with ");
        LoggableString::LoggableString((std::string *)v106, &__p);
        (*(void (**)(uint64_t, void **))(*(void *)v59 + 40))(v59, v106);
        uint64_t v60 = (unsigned char *)ImsOutStream::operator<<(v59, " registration policy");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v60[17] = 0;
        if ((v107[7] & 0x80000000) != 0) {
          operator delete(v106[0]);
        }
LABEL_96:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 3632) + 288))(*(void *)(a1 + 3632), a2);
        uint64_t v68 = *(_DWORD **)(a1 + 3632);
        int v69 = v68[108];
        if (v69 == SipRegistrationMode::kModeDisabled)
        {
          uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v70);
          char v71 = (unsigned char *)ImsOutStream::operator<<(v70, "registerWithConfig: registration is disabled");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v71[17] = 0;
          memset(&v107[8], 0, 48);
          v106[0] = &unk_1F20B2680;
          v106[1] = &_bambiDomain;
          *(_DWORD *)v107 = 1073741826;
          long long v72 = (const std::string *)ImsResult::operator<<<char [25]>((uint64_t)v106, "registration is disabled");
          SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v72, -1, 1, 0);
          goto LABEL_98;
        }
        if (v69 == SipRegistrationMode::kModeDisabledCountry)
        {
          uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v73);
          char v74 = (unsigned char *)ImsOutStream::operator<<(v73, "registerWithConfig: registration is in 'disabled country' mode, if the upper level insists on registration anyway - we are clearing that mode and setting it to 'normal'");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v74[17] = 0;
          SipRegistrationPolicy::setRegistrationMode(*(unsigned int **)(a1 + 3632), (unsigned int *)&SipRegistrationMode::kModeNormal);
          uint64_t v68 = *(_DWORD **)(a1 + 3632);
        }
        if (!(*(unsigned int (**)(_DWORD *))(*(void *)v68 + 368))(v68)) {
          goto LABEL_130;
        }
        uint64_t v75 = a1 + 16;
        uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v76);
        long long v77 = (unsigned char *)ImsOutStream::operator<<(v76, "registerWithConfig: setting to policy SipRegClientRegType::InitialReg");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v77[17] = 0;
        *(_DWORD *)(*(void *)(a1 + 3632) + 2356) = 1;
        if (*(unsigned char *)(a2 + 1376)) {
          goto LABEL_108;
        }
        uint64_t v78 = (capabilities::radio *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
        if ((v78 & 1) != 0 || !capabilities::radio::supportsRel16(v78)) {
          goto LABEL_108;
        }
        uint64_t v79 = *(void *)(a1 + 360);
        long long v80 = *(std::__shared_weak_count **)(v79 + 16);
        if (v80 && (long long v81 = std::__shared_weak_count::lock(v80)) != 0)
        {
          long long v82 = v81;
          BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(void *)(v79 + 8) + 3160));
          std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          if (!isNR) {
            goto LABEL_108;
          }
        }
        else if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC58))
        {
LABEL_108:
          *(_OWORD *)v106 = 0u;
          memset(v107, 0, sizeof(v107));
          SipRegistrationClient::initializeTransport((SipRegistrationClient *)v106, a1);
          if (!(*(unsigned int (**)(void *, void))(*(void *)v106[1] + 24))(v106[1], *(unsigned int *)v107))goto LABEL_98; {
          goto LABEL_109;
          }
        }
        uint64_t v84 = *(void *)(a1 + 360);
        v85 = *(std::__shared_weak_count **)(v84 + 16);
        if (v85 && (char v86 = std::__shared_weak_count::lock(v85)) != 0)
        {
          uint64_t v87 = *(void *)(*(void *)(*(void *)(v84 + 8) + 136) + 240);
          std::__shared_weak_count::__release_shared[abi:ne180100](v86);
        }
        else
        {
          uint64_t v87 = *(void *)(MEMORY[0x88] + 240);
        }
        if (!v87)
        {
          memset(&v107[8], 0, 48);
          v106[0] = &unk_1F20B2680;
          v106[1] = &_bambiDomain;
          *(_DWORD *)v107 = 1073741826;
          SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (const std::string *)v106, -1, 1, 0);
          goto LABEL_98;
        }
        if (*(void *)(v87 + 8) && *(unsigned char *)(v87 + 72))
        {
          uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 64))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 16))(a1 + 16, v88);
          v89 = (unsigned char *)ImsOutStream::operator<<(v88, "InitialRegAccessCheck...");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v89 + 64))(v89, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v89[17] = 0;
          uint64_t v90 = *(void *)(a1 + 360);
          v91 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v90 + 16));
          uint64_t v92 = *(unsigned int *)(*(void *)(v90 + 8) + 4100);
          uint64_t v93 = *(void *)(a1 + 360);
          v94 = *(std::__shared_weak_count **)(v93 + 16);
          if (v94)
          {
            v95 = std::__shared_weak_count::lock(v94);
            if (v95) {
              uint64_t v96 = *(void *)(v93 + 8);
            }
            else {
              uint64_t v96 = 0;
            }
          }
          else
          {
            uint64_t v96 = 0;
            v95 = 0;
          }
          IMSNasDeviceClient::reportCallStatus(v87, v92, 0, 64, v96 + 3160, 1, 0);
          if (v95) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v95);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v91);
          SipRegistrationClient::setClientState((void *)a1, 2u);
          SipRegistrationClient::nasImsRegStart((SipRegistrationClient *)a1);
          uint64_t v99 = *(void *)(a1 + 3632);
          if (v99)
          {
            *(void *)(v99 + 408) = 0;
            *(void *)(v99 + 416) = 0;
          }
          goto LABEL_130;
        }
        uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 16))(a1 + 16, v97);
        v98 = (unsigned char *)ImsOutStream::operator<<(v97, "No Baseband for architecture or Baseband is currently not available: go straight to initializeTransport");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v98[17] = 0;
        *(_OWORD *)v106 = 0u;
        memset(v107, 0, sizeof(v107));
        SipRegistrationClient::initializeTransport((SipRegistrationClient *)v106, a1);
        if (!(*(unsigned int (**)(void *, void))(*(void *)v106[1] + 24))(v106[1], *(unsigned int *)v107))
        {
LABEL_98:
          ImsResult::~ImsResult((ImsResult *)v106);
LABEL_130:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_109:
        SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (const std::string *)v106, -1, 1, 0);
        goto LABEL_98;
      }
      uint64_t v63 = v57(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(a1 + 16, v63);
      uint64_t v64 = ImsOutStream::operator<<(v63, "registration policy changed from ");
      uint64_t v65 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 3632) + 384))(*(void *)(a1 + 3632));
      LoggableString::LoggableString((std::string *)v106, v65);
      (*(void (**)(uint64_t, void **))(*(void *)v64 + 40))(v64, v106);
      uint64_t v66 = ImsOutStream::operator<<(v64, " to '");
      LoggableString::LoggableString(&v104, (const std::string *)(a2 + 1280));
      (*(void (**)(uint64_t, std::string *))(*(void *)v66 + 40))(v66, &v104);
      uint64_t v67 = (unsigned char *)ImsOutStream::operator<<(v66, "'");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v67[17] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if ((v107[7] & 0x80000000) != 0) {
        operator delete(v106[0]);
      }
    }
    else
    {
      uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v61);
      int v62 = (unsigned char *)ImsOutStream::operator<<(v61, "no existing registration policy");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v62[17] = 0;
    }
    SipRegistrationClient::setPolicy((void *)a1, (unsigned __int8 *)(a1 + 2392));
    goto LABEL_96;
  }
  uint64_t v17 = *(void *)(a1 + 360);
  unsigned __int8 v18 = *(std::__shared_weak_count **)(v17 + 16);
  if (v18 && (int64_t v19 = std::__shared_weak_count::lock(v18)) != 0)
  {
    int v20 = *(unsigned __int8 *)(*(void *)(v17 + 8) + 2680);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (!v20) {
      goto LABEL_72;
    }
  }
  else if (!MEMORY[0xA78])
  {
    goto LABEL_72;
  }
  uint64_t v24 = a1 + 16;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"seeing if we need to start reg hysteresis timer", 47);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"registered services = ", 22);
  *(unsigned char *)(v26 + 17) = 0;
  int v27 = *(_DWORD *)(a1 + 1104);
  std::string::basic_string[abi:ne180100]<0>(v102, ",");
  BambiServices::namesForServiceMask(v27, &v104);
  LoggableString::LoggableString(&__p, &v104);
  (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(a1 + 16, v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"new services = ", 15);
  *(unsigned char *)(v28 + 17) = 0;
  int v29 = *(_DWORD *)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(v102, ",");
  BambiServices::namesForServiceMask(v29, &v104);
  LoggableString::LoggableString(&__p, &v104);
  (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 40))(v28, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 224), (unsigned __int8 *)&kRegHysteresisTimer))
    {
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"new registration is SMS-only. Canceling pending hysteresis timer and any deferred registration.", 95);
      *(unsigned char *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v30 + 17) = 0;
      SipTimerContainer::cancelTimer((int8x8_t *)(a1 + 216), &kRegHysteresisTimer);
      SipRegistrationDeferralManager::cancel(a1 + 3976);
      return;
    }
    uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(a1 + 16, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"new registration is SMS-only, but hysteresis timer isn't running. Continuing with normal registration.", 102);
    *(unsigned char *)(v45 + 17) = 0;
    long long v44 = (unsigned char *)(v45 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_71;
  }
  uint64_t v31 = *(void *)(a1 + 360);
  int v32 = *(std::__shared_weak_count **)(v31 + 16);
  if (v32 && (char v33 = std::__shared_weak_count::lock(v32)) != 0)
  {
    uint64_t v34 = *(void *)(v31 + 8) + 3160;
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  else
  {
    uint64_t v34 = 3160;
  }
  if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)v34))
  {
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(a1 + 16, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"don't need reg hysteresis on ", 29);
    *(unsigned char *)(v42 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)v34);
    (*(void (**)(uint64_t, std::string *))(*(void *)v42 + 40))(v42, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v42 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
  if (*(_DWORD *)(a1 + 528) != 2
    || *(_DWORD *)(a1 + 1104) != 4
    || !ims::AccessNetwork::isLTE((ims::AccessNetwork *)(a1 + 536)))
  {
    uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(a1 + 16, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"not registered SMS-only on LTE", 30);
    *(unsigned char *)(v43 + 17) = 0;
    long long v44 = (unsigned char *)(v43 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_71:
    *long long v44 = 0;
    goto LABEL_72;
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"deferring new registration while registered SMS-only", 52);
  *(unsigned char *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v35 + 17) = 0;
  char v36 = *(std::__shared_weak_count **)(a1 + 208);
  v101[0] = *(void *)(a1 + 200);
  if (!v36 || (std::string::size_type v37 = std::__shared_weak_count::lock(v36), (v101[1] = v37) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v38 = v37;
  SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), (uint64_t)v101, a2, (unsigned __int8 *)a3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  uint64_t v40 = *(void *)(a1 + 200);
  std::string::size_type v39 = *(std::__shared_weak_count **)(a1 + 208);
  if (v39)
  {
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 224), (unsigned __int8 *)&kRegHysteresisTimer))
  {
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&v107[8] = 0;
    uint64_t v41 = operator new(0x20uLL);
    *uint64_t v41 = &unk_1F20D0D98;
    v41[1] = a1;
    v41[2] = v40;
    v41[3] = v39;
    *(void *)&v107[8] = v41;
    SipTimerContainer::startTimer((int8x8_t *)(a1 + 216), (uint64_t)&kRegHysteresisTimer);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v106);
  }
  if (v39)
  {
    std::__shared_weak_count::__release_weak(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
}

void sub_1C545D53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void DeferredDeregistration::perform(DeferredDeregistration *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = (SipRegistrationClient *)*((void *)this + 1);
      if (v5) {
        SipRegistrationClient::deregister(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C545D728(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::deregister(SipRegistrationClient *this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v2 = (char *)this + 16;
    uint64_t v4 = (*(uint64_t (**)(char *))(v3 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v4);
    int v5 = *(void **)(v4 + 8);
    uint64_t v6 = "skipping deregistration of emergency client";
    uint64_t v7 = 43;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    return;
  }
  uint64_t v8 = *((void *)this + 45);
  uint64_t v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v8 + 16));
  int v10 = v9;
  if (*(_DWORD *)(*(void *)(v8 + 8) + 200) == 2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    uint64_t v11 = *((void *)this + 45);
    uint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (uint64_t v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      int v14 = *(_DWORD *)(*(void *)(v11 + 8) + 200);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    else
    {
      int v14 = MEMORY[0xC8];
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (v14 != 3)
    {
      uint64_t v27 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"deregister called on uninitialized SIP stack", 44);
      *(unsigned char *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v27 + 17) = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      char v52 = (SipTransportLayer *)&unk_1F20B2680;
      uint64_t v53 = (std::__shared_weak_count *)&_bambiDomain;
      int v54 = 1073741826;
      uint64_t v28 = (const std::string *)ImsResult::operator<<<char [26]>((uint64_t)&v52, "SIP stack not initialized");
      SipRegistrationClient::handleRegistrationError(this, v28, -1, 1, 0);
      ImsResult::~ImsResult((ImsResult *)&v52);
      return;
    }
  }
  SipTimerContainer::cancelTimer((int8x8_t *)this + 27, &kRegHysteresisTimer);
  if (*((_DWORD *)this + 130) == 1) {
    goto LABEL_13;
  }
  uint64_t v20 = *((void *)this + 45);
  if (*((unsigned char *)this + 3648))
  {
    long long v21 = *(std::__shared_weak_count **)(v20 + 16);
    if (v21 && (long long v22 = std::__shared_weak_count::lock(v21)) != 0)
    {
      int v23 = *(_DWORD *)(*(void *)(v20 + 8) + 200);
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (v23 != 3)
      {
LABEL_21:
        if (!*((void *)this + 497))
        {
          uint64_t v48 = *((void *)this + 2);
          uint64_t v47 = (char *)this + 16;
          uint64_t v4 = (*(uint64_t (**)(char *))(v48 + 64))(v47);
          (*(void (**)(char *, uint64_t))(*(void *)v47 + 16))(v47, v4);
          int v5 = *(void **)(v4 + 8);
          uint64_t v6 = "deregister: already have a deregistration in progress, don't need to do it wice";
          uint64_t v7 = 79;
          goto LABEL_3;
        }
        uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 26);
        if (!v24) {
          goto LABEL_62;
        }
        uint64_t v25 = std::__shared_weak_count::lock(v24);
        if (!v25) {
          goto LABEL_62;
        }
        uint64_t v26 = v25;
        SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994);
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        return;
      }
    }
    else if (MEMORY[0xC8] != 3)
    {
      goto LABEL_21;
    }
    int v32 = (std::__shared_weak_count *)*((void *)this + 26);
    if (v32)
    {
      char v33 = std::__shared_weak_count::lock(v32);
      if (v33)
      {
        uint64_t v34 = v33;
        SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        uint64_t v36 = *((void *)this + 2);
        uint64_t v35 = (char *)this + 16;
        uint64_t v4 = (*(uint64_t (**)(char *))(v36 + 64))(v35);
        (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))(v35, v4);
        int v5 = *(void **)(v4 + 8);
        uint64_t v6 = "deferring new deregistration request until current deinit/deregistration completes";
        uint64_t v7 = 82;
        goto LABEL_3;
      }
    }
    goto LABEL_62;
  }
  uint64_t v38 = (char *)this + 16;
  uint64_t v37 = *((void *)this + 2);
  if (!v20)
  {
    uint64_t v42 = (*(uint64_t (**)(char *))(v37 + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v38 + 16))((char *)this + 16, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"cancelPendingRegistration: UA hasn't been initialized", 53);
    *(unsigned char *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v42 + 17) = 0;
    goto LABEL_48;
  }
  uint64_t v39 = (*(uint64_t (**)(char *))(v37 + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"canceling in-progress registration", 34);
  *(unsigned char *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v39 + 17) = 0;
  uint64_t v40 = *((void *)this + 454);
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 376))(v40);
  }
  int v41 = *((_DWORD *)this + 130);
  if ((v41 - 6) < 2) {
    goto LABEL_43;
  }
  if (v41 != 5)
  {
    if (v41 != 9)
    {
LABEL_49:
      uint64_t v43 = (std::__shared_weak_count *)*((void *)this + 26);
      if (v43)
      {
        long long v44 = std::__shared_weak_count::lock(v43);
        if (v44)
        {
          uint64_t v45 = v44;
          SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994);
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          uint64_t v46 = (*(uint64_t (**)(char *))(*(void *)v38 + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*(void *)v38 + 16))(v38, v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"deferring deregistration request until current registration completes", 69);
          *(unsigned char *)(v46 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v46 + 17) = 0;
          return;
        }
      }
      goto LABEL_62;
    }
LABEL_43:
    if (*((unsigned char *)this + 2489)) {
      SipRegistrationClient::setClientState(this, 0xAu);
    }
    goto LABEL_48;
  }
  SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v52);
  SipTransportLayer::cancelTransportInit(v52);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
LABEL_48:
  if (*((_DWORD *)this + 130) != 5) {
    goto LABEL_49;
  }
LABEL_13:
  if (SipRegistrationClient::shouldDeferRegistration(this))
  {
    size_t v15 = (std::__shared_weak_count *)*((void *)this + 26);
    if (v15)
    {
      char v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        uint64_t v17 = v16;
        SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994);
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        uint64_t v19 = *((void *)this + 2);
        unsigned __int8 v18 = (char *)this + 16;
        uint64_t v4 = (*(uint64_t (**)(char *))(v19 + 64))(v18);
        (*(void (**)(char *, uint64_t))(*(void *)v18 + 16))(v18, v4);
        int v5 = *(void **)(v4 + 8);
        uint64_t v6 = "deferring deregistration while in limited connectivity";
        uint64_t v7 = 54;
        goto LABEL_3;
      }
    }
LABEL_62:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_269);
  int v29 = (int8x8_t *)*((void *)this + 458);
  if (v29) {
    SipTimerContainer::cancelTimer(v29, (std::string *)((char *)this + 3680));
  }
  *((_DWORD *)this + 918) = 0;
  int v30 = *((_DWORD *)this + 132);
  if (v30 != 3 && v30)
  {
    SipTimerContainer::cancelTimer((int8x8_t *)this + 27, (std::string *)_MergedGlobals_15);
    *((void *)this + 60) = 0;
    *((void *)this + 61) = 0;
    *((unsigned char *)this + 3648) = 1;
    if (*((char *)this + 3919) < 0)
    {
      **((unsigned char **)this + 487) = 0;
      *((void *)this + 488) = 0;
    }
    else
    {
      *((unsigned char *)this + 3896) = 0;
      *((unsigned char *)this + 3919) = 0;
    }
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    char v52 = (SipTransportLayer *)&unk_1F20B2680;
    uint64_t v53 = (std::__shared_weak_count *)&_bambiDomain;
    int v54 = 0;
    ImsResult::operator=((uint64_t)this + 4104, (uint64_t)&v52);
    ImsResult::~ImsResult((ImsResult *)&v52);
    *((_DWORD *)this + 284) = 0;
    *((unsigned char *)this + 608) = 0;
    if (!*((unsigned char *)this + 2488)) {
      SipRegistrationClient::sendInitialRequest(this);
    }
    uint64_t v50 = *((void *)this + 25);
    char v49 = (std::__shared_weak_count *)*((void *)this + 26);
    if (v49)
    {
      atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v59 = 0;
    int v51 = operator new(0x20uLL);
    *int v51 = &unk_1F20D0E18;
    v51[1] = this;
    std::string v51[2] = v50;
    v51[3] = v49;
    uint64_t v59 = v51;
    SipTimerContainer::startTimer((int8x8_t *)this + 27, (uint64_t)&qword_1EBBDC140);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v58);
    if (v49)
    {
      std::__shared_weak_count::__release_weak(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  else
  {
    uint64_t v31 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"deregister: not registered", 26);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    LODWORD(v52) = 0;
    SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v52, 0);
    (*(void (**)(SipRegistrationClient *, uint64_t, void, void))(*(void *)this + 168))(this, 3, 0, 0);
    SipRegistrationClient::setClientState(this, 1u);
  }
}

void sub_1C545E1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void DeferredDropRegistration::perform(DeferredDropRegistration *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 1);
      if (v5) {
        (*(void (**)(uint64_t, void, void, void))(*(void *)v5 + 168))(v5, *((unsigned int *)this + 6), *((void *)this + 4), 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C545E2DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DeferredSubscription::perform(DeferredSubscription *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 1);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 184))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C545E370(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *SipRegistrationDeferralManager::deferAction(_DWORD *a1)
{
  uint64_t result = *(void **)a1;
  if (result)
  {
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "sip.defer");
      std::string::basic_string[abi:ne180100]<0>(v7, "");
      uint64_t v3 = ims::debug((uint64_t)&v9, (uint64_t)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Canceling deferred action ", 26);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(**(void **)a1 + 24))(&v5);
      LoggableString::LoggableString(&__p, &v5);
      (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 40))(v3, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v5.__r_.__value_.__l.__data_);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      if (v10 < 0) {
        operator delete(v9);
      }
      uint64_t result = *(void **)a1;
      *(void *)a1 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
      }
    }
  }
  else if (a1[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    uint64_t v4 = ims::debug((uint64_t)&v9, (uint64_t)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Deferring new deregistration", 28);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    operator new();
  }
  return result;
}

void sub_1C545E6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationDeferralManager::deferAction(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = *a1;
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v37, "");
    uint64_t v12 = ims::debug((uint64_t)&v39, (uint64_t)v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Deferring new registration (", 28);
    *(unsigned char *)(v12 + 17) = 0;
    int v13 = *(_DWORD *)(a3 + 24);
    std::string::basic_string[abi:ne180100]<0>(&v34, ",");
    BambiServices::namesForServiceMask(v13, __p);
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", ", 2);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v14 = ims::operator<<(v12, a3 + 1008);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)") with reason ", 14);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v14 + 32))(v14, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  memset(&v39, 0, sizeof(v39));
  (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 24))(&v39);
  if (*(_DWORD *)(a3 + 24) != *((_DWORD *)a1 + 2)) {
    goto LABEL_53;
  }
  uint64_t v8 = a4[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = a4[23];
  }
  else {
    uint64_t v9 = *((void *)a4 + 1);
  }
  if (v9 == 7)
  {
    if ((v8 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a4, "Refresh", *((void *)a4 + 1))) {
        goto LABEL_53;
      }
    }
    else
    {
      if (!a4[23]) {
        goto LABEL_53;
      }
      char v10 = "Refresh";
      uint64_t v11 = a4;
      while (*v11 == *(unsigned __int8 *)v10)
      {
        ++v11;
        ++v10;
        if (!--v8) {
          goto LABEL_53;
        }
      }
    }
  }
  uint64_t v15 = *(unsigned __int8 *)(a3 + 1031);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = *(unsigned __int8 *)(a3 + 1031);
  }
  else {
    uint64_t v16 = *(void *)(a3 + 1016);
  }
  uint64_t v17 = *((unsigned __int8 *)a1 + 39);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = a1[3];
  }
  if (v16 != v17)
  {
LABEL_53:
    std::string::basic_string[abi:ne180100]<0>(v37, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v27 = ims::debug((uint64_t)v37, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Updating state with new registration (", 38);
    *(unsigned char *)(v27 + 17) = 0;
    int v28 = *(_DWORD *)(a3 + 24);
    std::string::basic_string[abi:ne180100]<0>(&v32, ",");
    BambiServices::namesForServiceMask(v28, &v34);
    (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)", ", 2);
    *(unsigned char *)(v27 + 17) = 0;
    uint64_t v29 = ims::operator<<(v27, a3 + 1008);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)") with reason ", 14);
    *(unsigned char *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v29 + 32))(v29, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    operator new();
  }
  uint64_t v19 = (const void **)(a3 + 1008);
  if (v18 >= 0) {
    uint64_t v20 = (unsigned __int8 *)(a1 + 2);
  }
  else {
    uint64_t v20 = (unsigned __int8 *)a1[2];
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *(void *)(a3 + 1016))) {
      goto LABEL_53;
    }
  }
  else if (*(unsigned char *)(a3 + 1031))
  {
    while (*(unsigned __int8 *)v19 == *v20)
    {
      uint64_t v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v15) {
        goto LABEL_38;
      }
    }
    goto LABEL_53;
  }
LABEL_38:
  uint64_t v21 = *(unsigned __int8 *)(a3 + 1055);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = *(unsigned __int8 *)(a3 + 1055);
  }
  else {
    uint64_t v22 = *(void *)(a3 + 1040);
  }
  uint64_t v23 = *((unsigned __int8 *)a1 + 63);
  int v24 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = a1[6];
  }
  if (v22 != v23) {
    goto LABEL_53;
  }
  uint64_t v25 = (const void **)(a3 + 1032);
  if (v24 >= 0) {
    uint64_t v26 = (unsigned __int8 *)(a1 + 5);
  }
  else {
    uint64_t v26 = (unsigned __int8 *)a1[5];
  }
  if ((v21 & 0x80) != 0)
  {
    if (memcmp(*v25, v26, *(void *)(a3 + 1040))) {
      goto LABEL_53;
    }
  }
  else if (*(unsigned char *)(a3 + 1055))
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      uint64_t v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v21) {
        goto LABEL_65;
      }
    }
    goto LABEL_53;
  }
LABEL_65:
  std::string::basic_string[abi:ne180100]<0>(v37, "sip.defer");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v30 = ims::debug((uint64_t)v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Canceling deferred action ", 26);
  *(unsigned char *)(v30 + 17) = 0;
  LoggableString::LoggableString(&v34, &v39);
  (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 40))(v30, &v34);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v30 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  uint64_t v31 = *a1;
  *a1 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_1C545EE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *SipRegistrationDeferralManager::deferAction(const void **a1)
{
  uint64_t v1 = *a1;
  if (!v1
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)&v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Deferring new registration subscription", 39);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6);
    }
    operator new();
  }
  return result;
}

void sub_1C545F168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationDeferralManager::cancel(uint64_t this)
{
  if (*(void *)this)
  {
    uint64_t v1 = this;
    std::string::basic_string[abi:ne180100]<0>(v7, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"canceling ", 10);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(std::string *__return_ptr))(**(void **)v1 + 24))(&v3);
    LoggableString::LoggableString(&__p, &v3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v2 + 40))(v2, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v3.__r_.__value_.__l.__data_);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    this = *(void *)v1;
    *(void *)uint64_t v1 = 0;
    if (this) {
      return (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  return this;
}

void sub_1C545F324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *SipRegistrationDeferralManager::perform(void *this, uint64_t a2)
{
  if (*this)
  {
    uint64_t v3 = (uint64_t)this;
    std::string::basic_string[abi:ne180100]<0>(v10, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"performing deferred action ", 27);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(std::string *__return_ptr))(**(void **)v3 + 24))(&v6);
    LoggableString::LoggableString(&__p, &v6);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 40))(v4, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    uint64_t v5 = *(void *)v3;
    *(void *)uint64_t v3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2);
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return this;
}

void sub_1C545F54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::SipRegistrationClient(SipRegistrationClient *this, SipUserAgent *a2)
{
  *(void *)this = &unk_1F20B3658;
  *((void *)this + 1) = &unk_1F20B85A8;
  std::string::basic_string[abi:ne180100]<0>(&v8, "sip.reg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 16, &v8, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *(void *)this = &unk_1F20D0230;
  *((void *)this + 1) = &unk_1F20D0360;
  *((void *)this + 2) = &unk_1F20D0388;
  *((void *)this + 15) = &unk_1F20D03E8;
  *((void *)this + 16) = &unk_1F20D0418;
  *((void *)this + 17) = &unk_1F20D0440;
  *((void *)this + 18) = &unk_1F20D0470;
  *((void *)this + 19) = &unk_1F20D0510;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 23) = &unk_1F20D0530;
  *((void *)this + 24) = &unk_1F20D0550;
  SipTimerContainer::SipTimerContainer((SipRegistrationClient *)((char *)this + 216));
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  SipIdString::SipIdString((SipRegistrationClient *)((char *)this + 392));
  *((void *)this + 49) = &unk_1F20D0918;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((unsigned char *)this + 524) = 0;
  *((void *)this + 74) = 0;
  *((unsigned char *)this + 600) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  char v7 = (char *)this + 528;
  *(_OWORD *)((char *)this + 569) = 0u;
  *((void *)this + 77) = &unk_1F20C3100;
  SipUri::SipUri((SipRegistrationClient *)((char *)this + 624));
  *((void *)this + 129) = &unk_1F20B37B0;
  *((void *)this + 132) = 0;
  *((void *)this + 131) = 0;
  *((void *)this + 130) = (char *)this + 1048;
  *((_WORD *)this + 532) = 256;
  *((void *)this + 137) = 0;
  *((void *)this + 136) = 0;
  *((void *)this + 135) = (char *)this + 1088;
  *((_DWORD *)this + 268) = 0;
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationClient *)((char *)this + 1112));
  *(_OWORD *)((char *)this + 2792) = 0u;
  SipUri::SipUri((SipRegistrationClient *)((char *)this + 2808));
  SipUri::SipUri((SipRegistrationClient *)((char *)this + 3216));
  *((_OWORD *)this + 227) = 0u;
  *((void *)this + 458) = 0;
  *((_DWORD *)this + 918) = 0;
  *((_OWORD *)this + 230) = 0u;
  *((_OWORD *)this + 231) = 0u;
  *((void *)this + 464) = 0;
  *((void *)this + 457) = &unk_1F20B7E20;
  *((void *)this + 465) = 0;
  *((void *)this + 467) = 0;
  *((_DWORD *)this + 936) = 0;
  *(_OWORD *)((char *)this + 3752) = 0u;
  *(_OWORD *)((char *)this + 3768) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *((void *)this + 466) = &unk_1F20B7E20;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *((void *)this + 477) = &unk_1F20B2680;
  *((void *)this + 485) = 0;
  *(_OWORD *)((char *)this + 3864) = 0u;
  *((void *)this + 478) = &_bambiDomain;
  *((_DWORD *)this + 958) = 0;
  *((void *)this + 482) = 0;
  *((_OWORD *)this + 240) = 0u;
  *((_WORD *)this + 1945) = 0;
  *((unsigned char *)this + 3892) = 0;
  *((_DWORD *)this + 981) = 0;
  *((void *)this + 489) = 0;
  *(_OWORD *)((char *)this + 3896) = 0u;
  *((unsigned char *)this + 3920) = 0;
  *((void *)this + 497) = 0;
  *((_DWORD *)this + 996) = 0;
  *((void *)this + 506) = 0;
  *((unsigned char *)this + 4056) = 0;
  *(_OWORD *)((char *)this + 3992) = 0u;
  *(_OWORD *)((char *)this + 4008) = 0u;
  *(_OWORD *)((char *)this + 4024) = 0u;
  *((unsigned char *)this + 4040) = 0;
  *((_DWORD *)this + 992) = 0;
  *((void *)this + 495) = 0;
  *(_OWORD *)((char *)this + 3944) = 0u;
  *((void *)this + 508) = &unk_1F20E8908;
  *((void *)this + 510) = 0;
  *((void *)this + 511) = 0;
  *((void *)this + 509) = (char *)this + 4080;
  *((void *)this + 512) = dispatch_queue_create("com.apple.ipTelephony.eval", 0);
  *((void *)this + 513) = &unk_1F20B2680;
  *((_OWORD *)this + 258) = 0u;
  *((_OWORD *)this + 259) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((void *)this + 514) = &_bambiDomain;
  *((_DWORD *)this + 1030) = 0;
  *((_WORD *)this + 2088) = 0;
  *((void *)this + 45) = a2;
  *((void *)this + 56) = 1;
  *((void *)this + 57) = 0;
  std::string::operator=((std::string *)this + 11, (const std::string *)this + 1);
  std::string::operator=((std::string *)this + 12, (const std::string *)((char *)a2 + 56));
  *((void *)this + 40) = (char *)this + 120;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((_DWORD *)this + 130) = 0;
  if (v7 != (char *)&SipRegistrationState::kStateUnknown) {
    *(_DWORD *)char v7 = 0;
  }
  long long v5 = 0uLL;
  *((_OWORD *)this + 174) = 0u;
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 350);
  *((void *)this + 350) = 0;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    long long v5 = 0uLL;
  }
  *((unsigned char *)this + 3648) = 0;
  *((_DWORD *)this + 276) = 0;
  *(_OWORD *)((char *)this + 3928) = v5;
  *((_DWORD *)this + 992) = SipRegistrationMode::kModeNormal;
}

void sub_1C545FB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, SipUri *a11, SipUri *a12, void **a13, SipContactParam *a14, void **a15, SipTimerContainer *a16, void **a17, uint64_t a18, void *a19, void **a20)
{
  SipUri::~SipUri(a12);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 2800);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  SipRegistrationConfig::~SipRegistrationConfig(a13);
  SipContactParam::~SipContactParam(a14);
  ims::AccessNetwork::~AccessNetwork((void **)(v20 + 536));
  uint64_t v23 = *(std::__shared_weak_count **)(v20 + 512);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  SipSessionId::~SipSessionId(a15);
  if (*(char *)(v20 + 391) < 0) {
    operator delete(*(void **)(v20 + 368));
  }
  SipTimerContainer::~SipTimerContainer(a16);
  int v24 = *(std::__shared_weak_count **)(v20 + 208);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  *a19 = a18;
  std::__tree<std::shared_ptr<SipStack>>::destroy(*a17);
  ImsLogContainer::~ImsLogContainer(a20);
  _Unwind_Resume(a1);
}

void SipRegistrationMetrics::~SipRegistrationMetrics(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 2));
}

void SipSessionId::~SipSessionId(void **this)
{
  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C6DD0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipRegistrationClient::initTimers(SipRegistrationClient *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = *((void *)this + 25);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_12;
  }
  long long v5 = v4;
  std::string::size_type v6 = v3 + 192;
  if (!v3) {
    std::string::size_type v6 = 0;
  }
  v13[0] = v6;
  v13[1] = (std::string::size_type)v4;
  SipSimpleBackoffTimer::initialize((uint64_t)this + 3728, (std::string::size_type)this + 216, v13, (std::string *)"IPSecFailureRetryTimer", 900, 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  char v7 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v7 || (uint64_t v8 = *((void *)this + 25), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
LABEL_12:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  char v10 = v9;
  std::string::size_type v11 = v8 + 192;
  if (!v8) {
    std::string::size_type v11 = 0;
  }
  v12[0] = v11;
  v12[1] = (std::string::size_type)v9;
  SipSimpleBackoffTimer::initialize((uint64_t)this + 3656, (std::string::size_type)this + 216, v12, (std::string *)"TransportRetryTimer", 600, 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C545FDFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::create(SipRegistrationClient *this@<X0>, SipRegistrationClient **a2@<X8>)
{
  uint64_t v4 = this;
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipRegistrationClient,std::allocator<SipRegistrationClient>,SipUserAgent *&,void>(&v4, a2);
  SipRegistrationClient::initTimers(*a2);
}

void sub_1C545FE58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::~SipRegistrationClient(SipRegistrationClient *this)
{
  *(void *)this = &unk_1F20D0230;
  *((void *)this + 1) = &unk_1F20D0360;
  *((void *)this + 2) = &unk_1F20D0388;
  *((void *)this + 15) = &unk_1F20D03E8;
  *((void *)this + 16) = &unk_1F20D0418;
  *((void *)this + 17) = &unk_1F20D0440;
  *((void *)this + 18) = &unk_1F20D0470;
  *((void *)this + 19) = &unk_1F20D0510;
  *((void *)this + 23) = &unk_1F20D0530;
  *((void *)this + 24) = &unk_1F20D0550;
  SipRegistrationClient::deinitialize(this);
  uint64_t v2 = *((void *)this + 491);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *((void *)this + 492);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = *((void *)this + 349);
  if (v4)
  {
    long long v5 = *(std::__shared_weak_count **)(v4 + 360);
    *(void *)(v4 + 352) = 0;
    *(void *)(v4 + 360) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  ImsResult::~ImsResult((SipRegistrationClient *)((char *)this + 4104));
  *((void *)this + 508) = &unk_1F20E8908;
  dispatch_release(*((dispatch_object_t *)this + 512));
  std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy((uint64_t)this + 4072, *((void **)this + 510));
  SipRegistrationDeferralManager::~SipRegistrationDeferralManager((void **)this + 497);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 495, 0);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 494, 0);
  if (*((char *)this + 3919) < 0) {
    operator delete(*((void **)this + 487));
  }
  ImsResult::~ImsResult((SipRegistrationClient *)((char *)this + 3816));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationClient *)((char *)this + 3728));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationClient *)((char *)this + 3656));
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)this + 455);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 3216));
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 2808));
  char v7 = (std::__shared_weak_count *)*((void *)this + 350);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 139);
  *((void *)this + 77) = &unk_1F20C3100;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 1080, *((void **)this + 136));
  *((void *)this + 129) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1040, *((void **)this + 131));
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 624));
  if (*((char *)this + 583) < 0) {
    operator delete(*((void **)this + 70));
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *((void *)this + 49) = &unk_1F20C6DD0;
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  SipTimerContainer::~SipTimerContainer((SipRegistrationClient *)((char *)this + 216));
  char v9 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *((void *)this + 19) = &unk_1F20D08F8;
  std::__tree<std::shared_ptr<SipStack>>::destroy(*((void **)this + 21));
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient(this);
  JUMPOUT(0x1C878E320);
}

void *SipRegistrationClient::deinitialize(SipRegistrationClient *this)
{
  SipRegistrationClient::cleanUpRegistrationArtifacts(this);
  SipTimerContainer::cancelAllTimers((SipRegistrationClient *)((char *)this + 216));
  uint64_t v2 = *((void *)this + 454);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 280))(v2);
  }
  SipRegistrationDeferralManager::cancel((uint64_t)this + 3976);
  int v5 = 0;
  SipRegistrationClient::setRegistrationState((uint64_t)this, &v5, 0);
  SipRegistrationClient::setClientState(this, 1u);
  if ((_UNKNOWN *)((char *)this + 528) != &SipRegistrationState::kStateUnknown) {
    *((_DWORD *)this + 132) = 0;
  }
  *((_DWORD *)this + 276) = 0;
  SipRegistrationClient::clearDeferredNotifications(this);
  uint64_t result = SipRegistrationClient::clearDeferredDrop(this);
  if (*((unsigned char *)this + 2456))
  {
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"clearing Call-ID on deinitialize", 32);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (*((char *)this + 391) < 0)
    {
      **((unsigned char **)this + 46) = 0;
      *((void *)this + 47) = 0;
    }
    else
    {
      *((unsigned char *)this + 368) = 0;
      *((unsigned char *)this + 391) = 0;
    }
  }
  return result;
}

void non-virtual thunk to'SipRegistrationClient::~SipRegistrationClient(SipRegistrationClient *this)
{
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 16));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 120));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 128));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 136));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 144));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 152));
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 120));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 128));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 136));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 144));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 152));
  JUMPOUT(0x1C878E320);
}

void SipRegistrationClient::setClientState(void *a1, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 130);
  if (v2 == a2) {
    return;
  }
  std::string::size_type v6 = a1 + 2;
  uint64_t v5 = a1[2];
  *((_DWORD *)a1 + 130) = a2;
  uint64_t v7 = (*(uint64_t (**)(void *))(v5 + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"state transition [", 18);
  *(unsigned char *)(v7 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, (const std::string *)&_MergedGlobals_15[3 * v2 + 12]);
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" --> ", 5);
  *(unsigned char *)(v7 + 17) = 0;
  LoggableString::LoggableString(&v48, (const std::string *)&_MergedGlobals_15[3 * a2 + 12]);
  (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &v48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v40) < 0) {
    operator delete(__p[0]);
  }
  int v8 = *((_DWORD *)a1 + 130);
  if (v8 > 1)
  {
    char v10 = (ImsPowerAssertion **)(a1 + 495);
    if (a1[495] || a1[494])
    {
      if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
      {
        uint64_t v22 = (ImsPowerAssertion *)a1[494];
        if (*((_DWORD *)v22 + 6)) {
          goto LABEL_40;
        }
        char v23 = 0;
      }
      else
      {
        uint64_t v22 = *v10;
        if (*((_DWORD *)*v10 + 6)) {
          goto LABEL_40;
        }
        char v23 = 1;
      }
      ImsPowerAssertion::initialize(v22, 300.0, v23, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
      goto LABEL_40;
    }
    uint64_t v11 = a1[45];
    uint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (int v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      int v14 = *(unsigned __int8 *)(*(void *)(v11 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (!v14)
      {
LABEL_18:
        uint64_t v15 = ".ims";
        goto LABEL_21;
      }
    }
    else if (!MEMORY[0xA79])
    {
      goto LABEL_18;
    }
    uint64_t v15 = ".rcs";
LABEL_21:
    uint64_t v16 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v48, v15);
    uint64_t v17 = std::string::insert(v16, 0, "com.apple.ipTelephony.registration", 0x22uLL);
    *(_OWORD *)std::string __p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&long long v40 = *((void *)&v17->__r_.__value_.__l + 2);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    int v18 = SBYTE7(v40);
    if ((SBYTE7(v40) & 0x80u) == 0) {
      size_t v19 = BYTE7(v40);
    }
    else {
      size_t v19 = (size_t)__p[1];
    }
    memset(&v48, 0, sizeof(v48));
    uint64_t v20 = &v48;
    std::string::basic_string[abi:ne180100]((uint64_t)&v48, v19 + 5);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if (v19)
    {
      if (v18 >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      memmove(v20, v21, v19);
    }
    strcpy((char *)v20 + v19, ".wifi");
    operator new();
  }
  if (v2 - 2 < 3) {
    goto LABEL_41;
  }
  uint64_t v9 = a1[494];
  if (v9 && *(_DWORD *)(v9 + 24) || (uint64_t v9 = a1[495]) != 0 && *(_DWORD *)(v9 + 24)) {
    ImsPowerAssertion::deinitialize(v9);
  }
LABEL_40:
  int v8 = *((_DWORD *)a1 + 130);
LABEL_41:
  if (v8 == 1)
  {
    SipRegistrationClient::cleanUpRegistrationArtifacts((SipRegistrationClient *)a1);
    if (a1[497])
    {
      uint64_t v25 = a1[25];
      int v24 = (std::__shared_weak_count *)a1[26];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = a1[45];
      uint64_t v27 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v26 + 16));
      uint64_t v28 = *(void *)(*(void *)(v26 + 8) + 136);
      LoggableString::LoggableString((LoggableString *)__p, "deferredRegistrationAction");
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 1174405120;
      v46[2] = ___ZN21SipRegistrationClient14setClientStateENS_11ClientStateE_block_invoke;
      v46[3] = &__block_descriptor_tmp_43;
      v46[4] = a1;
      v46[5] = v25;
      uint64_t v47 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, void *))(*(void *)v28 + 208))(v28, __p, v46);
      if (SBYTE7(v40) < 0) {
        operator delete(__p[0]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      if (v47) {
        std::__shared_weak_count::__release_weak(v47);
      }
      if (v24)
      {
        uint64_t v29 = v24;
LABEL_53:
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else if (v2 == 10 && a1[57])
    {
      *(_OWORD *)long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      memset(v43, 0, sizeof(v43));
      long long v40 = 0u;
      long long v41 = 0u;
      *(_OWORD *)std::string __p = 0u;
      uint64_t v30 = (std::__shared_weak_count *)a1[26];
      v38[0] = a1[25];
      if (!v30 || (uint64_t v31 = std::__shared_weak_count::lock(v30), (v38[1] = (uint64_t)v31) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v32 = v31;
      SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)__p, v38, -1, (uint64_t)(a1 + 475));
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      uint64_t v33 = a1[57];
      uint64_t v34 = a1[45];
      uint64_t v35 = *(std::__shared_weak_count **)(v34 + 16);
      if (v35)
      {
        char v36 = std::__shared_weak_count::lock(v35);
        if (v36) {
          uint64_t v37 = *(void *)(v34 + 8);
        }
        else {
          uint64_t v37 = 0;
        }
      }
      else
      {
        uint64_t v37 = 0;
        char v36 = 0;
      }
      if (*(char *)(v37 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v37 + 4160), *(void *)(v37 + 4168));
      }
      else {
        std::string v48 = *(std::string *)(v37 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, void **, void))(*(void *)v33 + 40))(v33, &v48, __p, 0);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      __p[0] = &unk_1F20E8B10;
      if (SBYTE7(v45) < 0) {
        operator delete(v44[0]);
      }
      ImsResult::~ImsResult((ImsResult *)v43);
      __p[0] = &unk_1F20E8B48;
      uint64_t v29 = (std::__shared_weak_count *)*((void *)&v41 + 1);
      if (*((void *)&v41 + 1)) {
        goto LABEL_53;
      }
    }
  }
}

void sub_1C5460D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  SipRegistrationErrorNotification::~SipRegistrationErrorNotification(&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::cleanUpRegistrationArtifacts(SipRegistrationClient *this)
{
  unsigned int v2 = (char *)this + 504;
  uint64_t v3 = *((void *)this + 63);
  if (v3)
  {
    if (*(SipRegistrationClient **)(v3 + 488) == (SipRegistrationClient *)((char *)this + 128)) {
      *(void *)(v3 + 488) = 0;
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 64);
    *(void *)unsigned int v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = *((void *)this + 348);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 348) = 0;
  uint64_t v6 = *((void *)this + 349);
  if (v6)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 360);
    *(void *)(v6 + 352) = 0;
    *(void *)(v6 + 360) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    int v8 = (std::__shared_weak_count *)*((void *)this + 350);
    *((_OWORD *)v2 + 143) = 0u;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void ___ZN21SipRegistrationClient14setClientStateENS_11ClientStateE_block_invoke(void *a1)
{
  unsigned int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (SipRegistrationClient *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        SipRegistrationClient::performDeferredAction(v3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5460FA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::performDeferredAction(SipRegistrationClient *this)
{
  if (*((void *)this + 497))
  {
    uint64_t v1 = this;
    unsigned int v2 = (void *)((char *)this + 3976);
    uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 28, "RegHysteresisTimer");
    uint64_t v4 = *((void *)v1 + 2);
    uint64_t v1 = (SipRegistrationClient *)((char *)v1 + 16);
    uint64_t v5 = (*(uint64_t (**)(SipRegistrationClient *))(v4 + 64))(v1);
    (*(void (**)(SipRegistrationClient *, uint64_t))(*(void *)v1 + 16))(v1, v5);
    uint64_t v6 = *(void **)(v5 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"delaying deferred action during reg hysteresis: ", 48);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(*(void *)*v2 + 24))(&v7);
      LoggableString::LoggableString(&__p, &v7);
      (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"performing ", 11);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(*(void *)*v2 + 24))(&v7);
      LoggableString::LoggableString(&__p, &v7);
      (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
      SipRegistrationDeferralManager::perform(v2, 0);
    }
  }
}

void sub_1C5461220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21SipRegistrationClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21SipRegistrationClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SipRegistrationErrorNotification::~SipRegistrationErrorNotification(void **this)
{
  *this = &unk_1F20E8B10;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  *this = &unk_1F20E8B48;
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F20E8B10;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  *this = &unk_1F20E8B48;
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void SipRegistrationClient::setRegistrationState(uint64_t a1, int *a2, int a3)
{
  int v6 = *a2;
  uint64_t v7 = a1 + 16;
  int v8 = *(_DWORD *)(a1 + 532);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v9);
  char v10 = *(void **)(v9 + 8);
  if (v6 == v8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"IMS registration state not changed: ", 36);
    *(unsigned char *)(v9 + 17) = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 532) - 1;
    if (v11 > 2) {
      uint64_t v12 = "Deregistered (Idle)";
    }
    else {
      uint64_t v12 = off_1E65110A0[v11];
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, v12);
    LoggableString::LoggableString(&__p, &v27);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"IMS registration state changed from ", 36);
    *(unsigned char *)(v9 + 17) = 0;
    unsigned int v13 = *(_DWORD *)(a1 + 532) - 1;
    if (v13 > 2) {
      int v14 = "Deregistered (Idle)";
    }
    else {
      int v14 = off_1E65110A0[v13];
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, v14);
    LoggableString::LoggableString(&__p, &v27);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v9 + 17) = 0;
    unsigned int v15 = *a2 - 1;
    if (v15 > 2) {
      uint64_t v16 = "Deregistered (Idle)";
    }
    else {
      uint64_t v16 = off_1E65110A0[v15];
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, v16);
    LoggableString::LoggableString(&v26, &v25);
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &v26);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (*(void *)(a1 + 456))
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(v7, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Will", 4);
      *(unsigned char *)(v17 + 17) = 0;
      if (a3) {
        int v18 = " not";
      }
      else {
        int v18 = "";
      }
      if (a3) {
        uint64_t v19 = 4;
      }
      else {
        uint64_t v19 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)v18, v19);
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" notify baseband during handleRegistrationStateChanged", 54);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      uint64_t v20 = *(void *)(a1 + 456);
      uint64_t v21 = *(void *)(a1 + 360);
      uint64_t v22 = *(std::__shared_weak_count **)(v21 + 16);
      if (v22)
      {
        char v23 = std::__shared_weak_count::lock(v22);
        if (v23) {
          uint64_t v24 = *(void *)(v21 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
      }
      else
      {
        uint64_t v24 = 0;
        char v23 = 0;
      }
      if (*(char *)(v24 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v24 + 4160), *(void *)(v24 + 4168));
      }
      else {
        std::string __p = *(std::string *)(v24 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, int *, void))(*(void *)v20 + 64))(v20, &__p, a2, a3 ^ 1u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    *(_DWORD *)(a1 + 532) = *a2;
  }
}

void sub_1C54617D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRegistrationClient::isWifiAccessNetwork(SipRegistrationClient *this)
{
  uint64_t v1 = *((void *)this + 45);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = v3;
    isWifuint64_t i = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v1 + 8) + 3160));
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    return isWifi;
  }
  else
  {
    return ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC58);
  }
}

BOOL non-virtual thunk to'SipRegistrationClient::isWifiAccessNetwork(SipRegistrationClient *this)
{
  return SipRegistrationClient::isWifiAccessNetwork((SipRegistrationClient *)((char *)this - 144));
}

void SipRegistrationClient::resetCallIdAndCseq(SipRegistrationClient *this, int a2)
{
  if (*((char *)this + 391) < 0) {
    uint64_t v3 = *((void *)this + 47);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 391);
  }
  uint64_t v4 = (std::string *)((char *)this + 368);
  if (v3) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    unsigned int v11 = (char *)this + 16;
    uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))((char *)this + 16, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"keeping Call-ID ", 16);
    *(unsigned char *)(v12 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)((char *)this + 368));
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 56))(v12, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" and CSeq ", 10);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (v18 < 0) {
      operator delete(*(void **)&__p[24]);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*((void *)this + 45) + 656), 24, (std::string *)__p);
    if (*((char *)this + 391) < 0) {
      operator delete(v4->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 48) = *(void *)&__p[16];
    uint64_t v6 = *((void *)this + 45);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
    if (v7)
    {
      int v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(v6 + 8);
        if (v10 && *(unsigned char *)(v10 + 2681))
        {
          ImsUuid::generate((ImsUuid *)__p);
          if ((__p[31] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
          }
          else {
            std::string v19 = *(std::string *)&__p[8];
          }
          if (*((char *)this + 391) < 0) {
            operator delete(v4->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          *((void *)this + 48) = *((void *)&v19.__r_.__value_.__l + 2);
          *((unsigned char *)&v19.__r_.__value_.__s + 23) = 0;
          v19.__r_.__value_.__s.__data_[0] = 0;
          *(void *)std::string __p = &unk_1F20B3708;
          if ((__p[31] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[8]);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    SipSessionId::generateFromCallId((uint64_t)this + 392, (uint64_t)this + 368);
    uint64_t v14 = *((void *)this + 2);
    unsigned int v13 = (_DWORD *)((char *)this + 16);
    v13[108] = 1;
    uint64_t v15 = (*(uint64_t (**)(_DWORD *))(v14 + 64))(v13);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"initialized registration Call-ID to ", 36);
    *(unsigned char *)(v15 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)__p, v4);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v15 + 56))(v15, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (v18 < 0) {
      operator delete(*(void **)&__p[24]);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 64))(v13);
    (*(void (**)(_DWORD *, uint64_t))(*(void *)v13 + 16))(v13, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"reset registration CSeq to 1", 28);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
  }
}

void sub_1C5461D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::initialize(SipRegistrationClient *this)
{
  uint64_t v2 = (char *)this + 16;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipRegistrationClient::initialize()", 35);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipRegistrationClient::resetCallIdAndCseq(this, 0);
  *((unsigned char *)this + 3889) = (*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this);
  uint64_t v4 = *((void *)this + 454);
  if (v4) {
    *((_DWORD *)this + 992) = *(_DWORD *)(v4 + 432);
  }
  SipRegistrationClient::setClientState(this, 1u);
}

uint64_t SipRegistrationClient::setPolicy(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1[454];
  if (v4)
  {
    BOOL v5 = *(std::__shared_weak_count **)(v4 + 384);
    *(void *)(v4 + 376) = 0;
    *(void *)(v4 + 384) = 0;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)a1[455];
    *((_OWORD *)a1 + 227) = 0u;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  uint64_t v7 = a2[23];
  size_t v8 = *((void *)a2 + 1);
  if ((v7 & 0x80u) == 0) {
    uint64_t v9 = a2[23];
  }
  else {
    uint64_t v9 = *((void *)a2 + 1);
  }
  switch(v9)
  {
    case 3:
      if ((v7 & 0x80) != 0)
      {
        uint64_t v16 = *(const void **)a2;
        if (memcmp(v16, &ATTRegistrationPolicy::kPolicyName, v8)) {
          goto LABEL_90;
        }
      }
      else if (a2[23])
      {
        uint64_t v10 = &ATTRegistrationPolicy::kPolicyName;
        unsigned int v11 = a2;
        uint64_t v12 = a2[23];
        do
        {
          if (*v11 != *v10) {
            goto LABEL_84;
          }
          ++v11;
          ++v10;
          --v12;
        }
        while (v12);
      }
      uint64_t v18 = a1[25];
      uint64_t v17 = (std::__shared_weak_count *)a1[26];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v19 = (std::__shared_weak_count *)operator new(0x958uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D09B0;
      uint64_t v20 = (uint64_t *)&v19[1];
      std::string __p = 0;
      char v86 = 0;
      if (v17)
      {
        uint64_t v21 = std::__shared_weak_count::lock(v17);
        uint64_t v22 = v21;
        if (v21)
        {
          char v23 = (void *)(v18 + 144);
          if (!v18) {
            char v23 = 0;
          }
          atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::string __p = v23;
          char v86 = v21;
          std::__shared_weak_count::__release_weak(v17);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        else
        {
          std::string __p = 0;
          char v86 = 0;
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      ATTRegistrationPolicy::ATTRegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
      goto LABEL_166;
    case 4:
      if ((v7 & 0x80) != 0)
      {
        uint64_t v24 = *(const void **)a2;
        if (memcmp(v24, "KDDI", v8)) {
          goto LABEL_31;
        }
      }
      else if (a2[23])
      {
        unsigned int v13 = "KDDI";
        uint64_t v14 = a2;
        uint64_t v15 = a2[23];
        do
        {
          if (*v14 != *(unsigned __int8 *)v13)
          {
            switch(v9)
            {
              case 3:
                goto LABEL_84;
              case 4:
                goto LABEL_67;
              case 7:
                goto LABEL_49;
              case 8:
                goto LABEL_113;
              default:
                goto LABEL_140;
            }
          }
          ++v14;
          ++v13;
          --v15;
        }
        while (v15);
      }
      uint64_t v30 = a1[25];
      uint64_t v29 = (std::__shared_weak_count *)a1[26];
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v19 = (std::__shared_weak_count *)operator new(0x9B0uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A00;
      uint64_t v20 = (uint64_t *)&v19[1];
      std::string __p = 0;
      char v86 = 0;
      if (v29)
      {
        uint64_t v31 = std::__shared_weak_count::lock(v29);
        uint64_t v22 = v31;
        if (v31)
        {
          int v32 = (void *)(v30 + 144);
          if (!v30) {
            int v32 = 0;
          }
          atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::string __p = v32;
          char v86 = v31;
          std::__shared_weak_count::__release_weak(v29);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        else
        {
          std::string __p = 0;
          char v86 = 0;
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      KDDIRegistrationPolicy::KDDIRegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
      goto LABEL_166;
    case 7:
LABEL_49:
      if ((v7 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RFC5626", *((void *)a2 + 1))) {
          goto LABEL_140;
        }
LABEL_56:
        uint64_t v37 = a1[25];
        char v36 = (std::__shared_weak_count *)a1[26];
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v19 = (std::__shared_weak_count *)operator new(0x958uLL);
        v19->__shared_owners_ = 0;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A50;
        uint64_t v20 = (uint64_t *)&v19[1];
        std::string __p = 0;
        char v86 = 0;
        if (v36)
        {
          char v38 = std::__shared_weak_count::lock(v36);
          uint64_t v22 = v38;
          if (v38)
          {
            std::string v39 = (void *)(v37 + 144);
            if (!v37) {
              std::string v39 = 0;
            }
            atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::string __p = v39;
            char v86 = v38;
            std::__shared_weak_count::__release_weak(v36);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          else
          {
            std::string __p = 0;
            char v86 = 0;
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
        goto LABEL_166;
      }
      if (!a2[23]) {
        goto LABEL_56;
      }
      uint64_t v33 = "RFC5626";
      uint64_t v34 = a2;
      uint64_t v35 = a2[23];
      while (*v34 == *(unsigned __int8 *)v33)
      {
        ++v34;
        ++v33;
        if (!--v35) {
          goto LABEL_56;
        }
      }
      if (v9 == 3) {
        goto LABEL_84;
      }
      if (v9 != 8)
      {
        if (v9 != 4) {
          goto LABEL_140;
        }
LABEL_67:
        if ((v7 & 0x80) != 0)
        {
          uint64_t v24 = *(const void **)a2;
LABEL_31:
          if (!memcmp(v24, "TTAK", v8))
          {
LABEL_32:
            uint64_t v26 = a1[25];
            std::string v25 = (std::__shared_weak_count *)a1[26];
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v19 = (std::__shared_weak_count *)operator new(0x958uLL);
            v19->__shared_owners_ = 0;
            v19->__shared_weak_owners_ = 0;
            v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AA0;
            uint64_t v20 = (uint64_t *)&v19[1];
            std::string __p = 0;
            char v86 = 0;
            if (v25)
            {
              std::string v27 = std::__shared_weak_count::lock(v25);
              uint64_t v22 = v27;
              if (v27)
              {
                uint64_t v28 = (void *)(v26 + 144);
                if (!v26) {
                  uint64_t v28 = 0;
                }
                atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                std::string __p = v28;
                char v86 = v27;
                std::__shared_weak_count::__release_weak(v25);
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              else
              {
                std::string __p = 0;
                char v86 = 0;
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            else
            {
              uint64_t v22 = 0;
            }
            TTAKRegistrationPolicy::TTAKRegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
            goto LABEL_166;
          }
          goto LABEL_140;
        }
        long long v40 = "TTAK";
        long long v41 = a2;
        uint64_t v42 = a2[23];
        while (*v41 == *(unsigned __int8 *)v40)
        {
          ++v41;
          ++v40;
          if (!--v42) {
            goto LABEL_32;
          }
        }
        if (v9 != 8)
        {
          if (v9 != 3) {
            goto LABEL_140;
          }
LABEL_84:
          if ((v7 & 0x80) == 0)
          {
            uint64_t v43 = &TMORegistrationPolicy::kPolicyName;
            long long v44 = a2;
            uint64_t v45 = a2[23];
            while (*v44 == *v43)
            {
              ++v44;
              ++v43;
              if (!--v45) {
                goto LABEL_93;
              }
            }
            if (v9 == 3)
            {
LABEL_129:
              if ((v7 & 0x80) == 0)
              {
                uint64_t v65 = &VZWRegistrationPolicy::kPolicyName;
                while (*a2 == *v65)
                {
                  ++a2;
                  ++v65;
                  if (!--v7) {
                    goto LABEL_133;
                  }
                }
                goto LABEL_140;
              }
              uint64_t v16 = *(const void **)a2;
LABEL_91:
              if (!memcmp(v16, &VZWRegistrationPolicy::kPolicyName, v8))
              {
LABEL_133:
                uint64_t v67 = a1[25];
                uint64_t v66 = (std::__shared_weak_count *)a1[26];
                if (v66) {
                  atomic_fetch_add_explicit(&v66->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                std::string v19 = (std::__shared_weak_count *)operator new(0x968uLL);
                v19->__shared_owners_ = 0;
                v19->__shared_weak_owners_ = 0;
                v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B90;
                uint64_t v20 = (uint64_t *)&v19[1];
                std::string __p = 0;
                char v86 = 0;
                if (v66)
                {
                  uint64_t v68 = std::__shared_weak_count::lock(v66);
                  uint64_t v22 = v68;
                  if (v68)
                  {
                    int v69 = (void *)(v67 + 144);
                    if (!v67) {
                      int v69 = 0;
                    }
                    atomic_fetch_add_explicit(&v68->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    std::string __p = v69;
                    char v86 = v68;
                    std::__shared_weak_count::__release_weak(v66);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                  }
                  else
                  {
                    std::string __p = 0;
                    char v86 = 0;
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                else
                {
                  uint64_t v22 = 0;
                }
                VZWRegistrationPolicy::VZWRegistrationPolicy(v20, (std::__shared_weak_count **)&__p);
                goto LABEL_166;
              }
              goto LABEL_140;
            }
            if (v9 != 8) {
              goto LABEL_140;
            }
            goto LABEL_113;
          }
          uint64_t v16 = *(const void **)a2;
LABEL_90:
          if (memcmp(v16, &TMORegistrationPolicy::kPolicyName, v8)) {
            goto LABEL_91;
          }
LABEL_93:
          uint64_t v47 = a1[25];
          uint64_t v46 = (std::__shared_weak_count *)a1[26];
          if (v46) {
            atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v48 = a1[45];
          char v49 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v48 + 16));
          int v50 = *(unsigned __int8 *)(*(void *)(v48 + 8) + 3708);
          int v51 = (std::__shared_weak_count *)operator new(0x9C0uLL);
          v51->__shared_owners_ = 0;
          v51->__shared_weak_owners_ = 0;
          v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AF0;
          uint64_t v52 = (uint64_t)&v51[1];
          std::string __p = 0;
          char v86 = 0;
          if (v46)
          {
            uint64_t v53 = std::__shared_weak_count::lock(v46);
            int v54 = v53;
            if (v53)
            {
              long long v55 = (void *)(v47 + 144);
              if (!v47) {
                long long v55 = 0;
              }
              atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              std::string __p = v55;
              char v86 = v53;
              std::__shared_weak_count::__release_weak(v46);
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            }
            else
            {
              std::string __p = 0;
              char v86 = 0;
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            int v54 = 0;
          }
          TMORegistrationPolicy::TMORegistrationPolicy(v52, (std::__shared_weak_count **)&__p, v50 == 0);
          if (v54) {
            std::__shared_weak_count::__release_weak(v54);
          }
          shared_owners = (std::__shared_weak_count *)v51[9].__shared_owners_;
          if (shared_owners)
          {
            if (shared_owners->__shared_owners_ != -1) {
              goto LABEL_109;
            }
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v51[9].__vftable = (std::__shared_weak_count_vtbl *)v52;
            v51[9].__shared_owners_ = (uint64_t)v51;
            std::__shared_weak_count::__release_weak(shared_owners);
          }
          else
          {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            v51[9].__vftable = (std::__shared_weak_count_vtbl *)v52;
            v51[9].__shared_owners_ = (uint64_t)v51;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
LABEL_109:
          a1[454] = v52;
          long long v57 = (std::__shared_weak_count *)a1[455];
          a1[455] = v51;
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          goto LABEL_174;
        }
      }
LABEL_113:
      if ((v7 & 0x80) == 0)
      {
        if (a2[23])
        {
          uint64_t v58 = "Softbank";
          uint64_t v59 = a2;
          uint64_t v60 = a2[23];
          while (*v59 == *(unsigned __int8 *)v58)
          {
            ++v59;
            ++v58;
            if (!--v60) {
              goto LABEL_120;
            }
          }
          if (v9 != 3) {
            goto LABEL_140;
          }
          goto LABEL_129;
        }
LABEL_120:
        uint64_t v62 = a1[25];
        uint64_t v61 = (std::__shared_weak_count *)a1[26];
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v19 = (std::__shared_weak_count *)operator new(0x970uLL);
        v19->__shared_owners_ = 0;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B40;
        uint64_t v20 = (uint64_t *)&v19[1];
        std::string __p = 0;
        char v86 = 0;
        if (v61)
        {
          uint64_t v63 = std::__shared_weak_count::lock(v61);
          uint64_t v22 = v63;
          if (v63)
          {
            uint64_t v64 = (void *)(v62 + 144);
            if (!v62) {
              uint64_t v64 = 0;
            }
            atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::string __p = v64;
            char v86 = v63;
            std::__shared_weak_count::__release_weak(v61);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          else
          {
            std::string __p = 0;
            char v86 = 0;
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        SoftbankRegistrationPolicy::SoftbankRegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
        goto LABEL_166;
      }
      if (!memcmp(*(const void **)a2, "Softbank", *((void *)a2 + 1))) {
        goto LABEL_120;
      }
LABEL_140:
      uint64_t v70 = a1[45];
      char v71 = *(std::__shared_weak_count **)(v70 + 16);
      if (v71 && (long long v72 = std::__shared_weak_count::lock(v71)) != 0)
      {
        int v73 = *(unsigned __int8 *)(*(void *)(v70 + 8) + 2681);
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        if (!v73)
        {
LABEL_143:
          uint64_t v75 = a1[25];
          char v74 = (std::__shared_weak_count *)a1[26];
          if (v74) {
            atomic_fetch_add_explicit(&v74->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v19 = (std::__shared_weak_count *)operator new(0x968uLL);
          v19->__shared_owners_ = 0;
          v19->__shared_weak_owners_ = 0;
          v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0C30;
          uint64_t v20 = (uint64_t *)&v19[1];
          std::string __p = 0;
          char v86 = 0;
          if (v74)
          {
            uint64_t v76 = std::__shared_weak_count::lock(v74);
            uint64_t v22 = v76;
            if (v76)
            {
              long long v77 = (void *)(v75 + 144);
              if (!v75) {
                long long v77 = 0;
              }
              atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              std::string __p = v77;
              char v86 = v76;
              std::__shared_weak_count::__release_weak(v74);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            else
            {
              std::string __p = 0;
              char v86 = 0;
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          else
          {
            uint64_t v22 = 0;
          }
          DefaultRegistrationPolicy::DefaultRegistrationPolicy(v20, (std::__shared_weak_count **)&__p);
          goto LABEL_166;
        }
      }
      else if (!MEMORY[0xA79])
      {
        goto LABEL_143;
      }
      uint64_t v79 = a1[25];
      uint64_t v78 = (std::__shared_weak_count *)a1[26];
      if (v78) {
        atomic_fetch_add_explicit(&v78->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v19 = (std::__shared_weak_count *)operator new(0x970uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0BE0;
      uint64_t v20 = (uint64_t *)&v19[1];
      std::string __p = 0;
      char v86 = 0;
      if (v78)
      {
        long long v80 = std::__shared_weak_count::lock(v78);
        uint64_t v22 = v80;
        if (v80)
        {
          long long v81 = (void *)(v79 + 144);
          if (!v79) {
            long long v81 = 0;
          }
          atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::string __p = v81;
          char v86 = v80;
          std::__shared_weak_count::__release_weak(v78);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        else
        {
          std::string __p = 0;
          char v86 = 0;
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      LazuliRegistrationPolicy::LazuliRegistrationPolicy((uint64_t)v20, (std::__shared_weak_count **)&__p);
LABEL_166:
      if (v22) {
        std::__shared_weak_count::__release_weak(v22);
      }
      long long v82 = (std::__shared_weak_count *)v19[9].__shared_owners_;
      if (v82)
      {
        if (v82->__shared_owners_ != -1) {
          goto LABEL_173;
        }
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v19[9].__vftable = (std::__shared_weak_count_vtbl *)v20;
        v19[9].__shared_owners_ = (uint64_t)v19;
        std::__shared_weak_count::__release_weak(v82);
      }
      else
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v19[9].__vftable = (std::__shared_weak_count_vtbl *)v20;
        v19[9].__shared_owners_ = (uint64_t)v19;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_173:
      a1[454] = v20;
      char v49 = (std::__shared_weak_count *)a1[455];
      a1[455] = v19;
      if (!v49) {
        goto LABEL_175;
      }
LABEL_174:
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
LABEL_175:
      if ((*(unsigned int (**)(void *))(*a1 + 248))(a1)) {
        operator new();
      }
      uint64_t v83 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
      (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)"initializing ", 13);
      *(unsigned char *)(v83 + 17) = 0;
      (*(void (**)(void **__return_ptr))(*(void *)a1[454] + 480))(&__p);
      (*(void (**)(uint64_t, void **))(*(void *)v83 + 40))(v83, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)" registration policy", 20);
      *(unsigned char *)(v83 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v83 + 17) = 0;
      if (v87 < 0) {
        operator delete(__p);
      }
      return (*(uint64_t (**)(void))(*(void *)a1[454] + 272))(a1[454]);
    case 8:
      goto LABEL_113;
    default:
      goto LABEL_140;
  }
}

void sub_1C5462BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void *SipRegistrationClient::clearDeferredNotifications(void *this)
{
  uint64_t v1 = this;
  if (this[491])
  {
    uint64_t v2 = this + 2;
    uint64_t v3 = (*(uint64_t (**)(void *))(this[2] + 64))(this + 2);
    (*(void (**)(void *, uint64_t))(*v2 + 16))(v1 + 2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"clearing deferred termination notification", 42);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    this = (void *)v1[491];
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 16))(this);
    }
    v1[491] = 0;
  }
  if (v1[492])
  {
    uint64_t v4 = (*(uint64_t (**)(void *))(v1[2] + 64))(v1 + 2);
    (*(void (**)(void *, uint64_t))(v1[2] + 16))(v1 + 2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"clearing deferred error notification ", 37);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(void))(*(void *)(v1[492] + 64) + 16))();
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    this = (void *)v1[492];
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 16))(this);
    }
    v1[492] = 0;
  }
  return this;
}

void *SipRegistrationClient::clearDeferredDrop(void *this)
{
  uint64_t v1 = this;
  if (this[493])
  {
    uint64_t v2 = this + 2;
    uint64_t v3 = (*(uint64_t (**)(void *))(this[2] + 64))(this + 2);
    (*(void (**)(void *, uint64_t))(*v2 + 16))(v1 + 2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"clearing deferred drop registration", 35);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    this = (void *)v1[493];
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  v1[493] = 0;
  return this;
}

void SipRegistrationClient::registrationError(SipRegistrationClient *this, const std::string *a2)
{
}

void SipRegistrationClient::handleRegistrationError(SipRegistrationClient *this, const std::string *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (capabilities::radio::supportsRel16(this)
    && SipRegistrationClient::nasImsRegInProgress(this))
  {
    uint64_t v10 = *((void *)this + 45);
    unsigned int v11 = *(std::__shared_weak_count **)(v10 + 16);
    if (v11 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(v10 + 8) + 136) + 240);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (!v13) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(MEMORY[0x88] + 240);
      if (!v13)
      {
LABEL_18:
        SipRegistrationClient::nasImsRegStop(this);
        goto LABEL_19;
      }
    }
    if (*(void *)(v13 + 8) && *(unsigned char *)(v13 + 72))
    {
      uint64_t v14 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"handleRegistrationError: RegAccessCheck done", 44);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      uint64_t v15 = *((void *)this + 45);
      uint64_t v16 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v15 + 16));
      uint64_t v17 = *(unsigned int *)(*(void *)(v15 + 8) + 4100);
      uint64_t v18 = *((void *)this + 45);
      std::string v19 = *(std::__shared_weak_count **)(v18 + 16);
      if (v19)
      {
        uint64_t v20 = std::__shared_weak_count::lock(v19);
        if (v20) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        else {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      IMSNasDeviceClient::reportCallStatus(v13, v17, 2, 64, v21 + 3160, 1, 0);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  ImsResult::ImsResult((ImsResult *)v72, a2);
  if (LODWORD(a2->__r_.__value_.__r.__words[2]) == 401
    && (*(unsigned int (**)(void, void))(**((void **)this + 514) + 24))(*((void *)this + 514), *((unsigned int *)this + 1030)))
  {
    ImsResult::setCause((ImsResult *)v72, (SipRegistrationClient *)((char *)this + 4104));
  }
  ImsResult::operator=((uint64_t)this + 4104, (uint64_t)a2);
  SipRegistrationMetrics::registrationAttemptCompleted((SipRegistrationClient *)((char *)this + 3800), (const ImsResult *)v72, 0);
  uint64_t v22 = *((void *)this + 45);
  char v23 = *(std::__shared_weak_count **)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      int v25 = *(_DWORD *)(*(void *)(v22 + 8) + 200);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (v25 != 2) {
        goto LABEL_25;
      }
LABEL_32:
      if (*((unsigned char *)this + 3648)) {
        goto LABEL_52;
      }
      SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v61);
      uint64_t v29 = *(void *)(v61 + 1040);
      if (v29 && (*(unsigned int (**)(uint64_t))(*(void *)v29 + 224))(v29))
      {
        int v30 = a2->__r_.__value_.__r.__words[2];
        std::string::size_type size = (uint64_t *)a2->__r_.__value_.__l.__size_;
        BOOL v32 = v30 == 60 && size == &_posixDomain || v30 == 408 && size == &SipResultDomain::_domain;
      }
      else
      {
        BOOL v32 = 0;
      }
      if (*((void *)&v61 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
      }
      if (!v32)
      {
LABEL_52:
        int v37 = 0;
        goto LABEL_53;
      }
      uint64_t v33 = *((unsigned __int8 *)this + 3919);
      if ((v33 & 0x80u) == 0) {
        uint64_t v34 = *((unsigned __int8 *)this + 3919);
      }
      else {
        uint64_t v34 = *((void *)this + 488);
      }
      if (v34 != 8) {
        goto LABEL_98;
      }
      uint64_t v35 = (const void **)((char *)this + 3896);
      if ((v33 & 0x80) != 0)
      {
        if (memcmp(*v35, "Handover", *((void *)this + 488))) {
          goto LABEL_98;
        }
      }
      else if (*((unsigned char *)this + 3919))
      {
        char v36 = "Handover";
        while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v36)
        {
          uint64_t v35 = (const void **)((char *)v35 + 1);
          ++v36;
          if (!--v33) {
            goto LABEL_97;
          }
        }
        goto LABEL_98;
      }
LABEL_97:
      if (!*((unsigned char *)this + 2458))
      {
        uint64_t v57 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 48))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"registration timed out on WiFi handover. NOT terminating registration just yet.", 79);
        *(unsigned char *)(v57 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v37 = 0;
        *(unsigned char *)(v57 + 17) = 0;
LABEL_53:
        uint64_t v38 = *((void *)this + 454);
        if (v38)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 528))(v38))
          {
            if ((*(unsigned int (**)(void, void, void))(**((void **)this + 454) + 416))(*((void *)this + 454), 0, LODWORD(a2->__r_.__value_.__r.__words[2])))
            {
              std::string v39 = (SipRegistrationPolicy *)*((void *)this + 454);
              if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v39 + 56) - *((void *)v39 + 55)) >> 5) != SipRegistrationPolicy::countOfProxiesWithErrors(v39))
              {
                uint64_t v40 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
                (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v40);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"registration policy will retry on emergency stack, not reporting registration error: ", 85);
                *(unsigned char *)(v40 + 17) = 0;
                (*(void (**)(const std::string *, uint64_t))(a2->__r_.__value_.__r.__words[0] + 16))(a2, v40);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                a4 = 0;
                *(unsigned char *)(v40 + 17) = 0;
              }
            }
          }
          uint64_t v41 = *((void *)this + 454);
          if (v41 && ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 536))(v41) & 1) == 0)
          {
            uint64_t v42 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
            (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Suppressing error based on recommendation from policy.", 54);
            *(unsigned char *)(v42 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            a4 = 0;
            *(unsigned char *)(v42 + 17) = 0;
          }
        }
        if (v37)
        {
          uint64_t v43 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 48))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"registration over IPSec timed out.  Terminating our existing registration and starting over.", 92);
          *(unsigned char *)(v43 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v43 + 17) = 0;
          (*(void (**)(SipRegistrationClient *, uint64_t, void, void))(*(void *)this + 168))(this, 8, 0, 0);
          a4 = 0;
        }
        long long v44 = (int *)*((void *)this + 454);
        uint64_t v45 = v44 + 108;
        if (!v44) {
          uint64_t v45 = &SipRegistrationMode::kModeNormal;
        }
        if (*v45 == SipRegistrationMode::kModeLimitedAccess)
        {
          if (a4 & (*(unsigned int (**)(int *))(*(void *)v44 + 552))(v44))
          {
            uint64_t v46 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
            (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v46);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"Allowing notification in ", 25);
            *(unsigned char *)(v46 + 17) = 0;
            uint64_t v47 = *((void *)this + 454);
            if (v47) {
              uint64_t v48 = (unsigned int *)(v47 + 432);
            }
            else {
              uint64_t v48 = (unsigned int *)&SipRegistrationMode::kModeNormal;
            }
            operator<<(v46, v48);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v46 + 17) = 0;
            goto LABEL_75;
          }
          long long v44 = (int *)*((void *)this + 454);
        }
        char v49 = v44 + 108;
        if (!v44) {
          char v49 = &SipRegistrationMode::kModeNormal;
        }
        if (*v49 != SipRegistrationMode::kModeNormal)
        {
          uint64_t v53 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"Registration mode is ", 21);
          *(unsigned char *)(v53 + 17) = 0;
          uint64_t v54 = *((void *)this + 454);
          if (v54) {
            long long v55 = (unsigned int *)(v54 + 432);
          }
          else {
            long long v55 = (unsigned int *)&SipRegistrationMode::kModeNormal;
          }
          operator<<(v53, v55);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)", skipping notification to delegate", 35);
          *(unsigned char *)(v53 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v53 + 17) = 0;
LABEL_86:
          SipRegistrationClient::setClientState(this, 1u);
          if (*((unsigned char *)this + 3648))
          {
            LODWORD(v61) = 0;
            SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v61, 0);
            (*(void (**)(SipRegistrationClient *, uint64_t, void, void))(*(void *)this + 168))(this, 4, 0, 0);
          }
          else
          {
            LODWORD(v61) = 1;
            SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v61, a5);
          }
          goto LABEL_89;
        }
LABEL_75:
        if (a4)
        {
          long long __p = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          *(_OWORD *)uint64_t v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          int v50 = (std::__shared_weak_count *)*((void *)this + 26);
          v58[0] = *((void *)this + 25);
          if (!v50 || (int v51 = std::__shared_weak_count::lock(v50), (v58[1] = (uint64_t)v51) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v52 = v51;
          SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)&v61, v58, a3, (uint64_t)this + 3800);
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          SipRegistrationClient::notifyDelegateOfRegistrationError(this, (const SipRegistrationErrorNotification *)&v61, 0, a5);
          *(void *)&long long v61 = &unk_1F20E8B10;
          if (SBYTE7(v71) < 0) {
            operator delete((void *)__p);
          }
          ImsResult::~ImsResult((ImsResult *)&v65);
          *(void *)&long long v61 = &unk_1F20E8B48;
          if (v63[1]) {
            std::__shared_weak_count::__release_weak(v63[1]);
          }
        }
        goto LABEL_86;
      }
LABEL_98:
      int v37 = 1;
      goto LABEL_53;
    }
  }
  if (MEMORY[0xC8] == 2) {
    goto LABEL_32;
  }
LABEL_25:
  long long __p = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  *(_OWORD *)uint64_t v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 26);
  v60[0] = *((void *)this + 25);
  if (!v26 || (std::string v27 = std::__shared_weak_count::lock(v26), (v60[1] = (uint64_t)v27) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = v27;
  SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)&v61, v60, -1, (uint64_t)this + 3800);
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  SipRegistrationClient::notifyDelegateOfRegistrationError(this, (const SipRegistrationErrorNotification *)&v61, 1, a5);
  int v59 = 0;
  SipRegistrationClient::setRegistrationState((uint64_t)this, &v59, 0);
  *(void *)&long long v61 = &unk_1F20E8B10;
  if (SBYTE7(v71) < 0) {
    operator delete((void *)__p);
  }
  ImsResult::~ImsResult((ImsResult *)&v65);
  *(void *)&long long v61 = &unk_1F20E8B48;
  if (v63[1]) {
    std::__shared_weak_count::__release_weak(v63[1]);
  }
LABEL_89:
  ImsResult::~ImsResult((ImsResult *)v72);
}

void sub_1C5463CC4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::registrationError(SipRegistrationClient *this, const std::string *a2)
{
}

void SipRegistrationClient::handleThumperAuthFailure(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Received Thumper registration error: ", 37);
  *(unsigned char *)(v5 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *(void *)(a1 + 360);
  uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
  uint64_t v8 = *(void *)(*(void *)(v6 + 8) + 136);
  uint64_t v9 = *(void *)(a1 + 360);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    unsigned int v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      uint64_t v12 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unsigned int v11 = 0;
  }
  if (*(char *)(v12 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v12 + 4160);
  }
  uint64_t v13 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v15 = qword_1EBBDB2A0;
  if (byte_1EBBDB2AF >= 0) {
    uint64_t v15 = byte_1EBBDB2AF;
  }
  if (size == v15)
  {
    if (byte_1EBBDB2AF >= 0) {
      uint64_t v16 = &SipRegistrationPolicy::kThumperErrorUnauthorized;
    }
    else {
      uint64_t v16 = (uint64_t *)SipRegistrationPolicy::kThumperErrorUnauthorized;
    }
    if ((v13 & 0x80) != 0)
    {
      BOOL v24 = memcmp(a2->__r_.__value_.__l.__data_, v16, a2->__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
    {
      uint64_t v17 = v13 - 1;
      do
      {
        int v19 = a2->__r_.__value_.__s.__data_[0];
        a2 = (const std::string *)((char *)a2 + 1);
        int v18 = v19;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (uint64_t *)((char *)v16 + 1);
        int v20 = v21;
        BOOL v23 = v17-- != 0;
        BOOL v24 = v18 == v20;
      }
      while (v18 == v20 && v23);
    }
    else
    {
      BOOL v24 = 1;
    }
  }
  else
  {
    BOOL v24 = 0;
  }
  uint64_t v25 = *(void *)(v8 + 248);
  if (v25) {
    (*(void (**)(uint64_t, std::string *, BOOL))(*(void *)v25 + 120))(v25, &__p, v24);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C5464004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::handleThumperAuthFailure(uint64_t a1, const std::string *a2)
{
}

void SipRegistrationClient::stackId(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 45);
  if (*(char *)(v2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 56), *(void *)(v2 + 64));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void non-virtual thunk to'SipRegistrationClient::stackId(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 27);
  if (*(char *)(v2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 56), *(void *)(v2 + 64));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t SipRegistrationClient::nasImsRegInProgress(SipRegistrationClient *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"nasImsReg ", 10);
  *(unsigned char *)(v2 + 17) = 0;
  if (v1[508]) {
    long long v3 = "InProgress";
  }
  else {
    long long v3 = "NotInProgress";
  }
  if (v1[508]) {
    uint64_t v4 = 10;
  }
  else {
    uint64_t v4 = 13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  return v1[508];
}

uint64_t SipRegistrationClient::nasImsRegStop(SipRegistrationClient *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"nasImsReg Stop", 14);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  v1[508] = 0;
  return result;
}

void SipRegistrationClient::notifyDelegateOfRegistrationError(SipRegistrationClient *this, const SipRegistrationErrorNotification *a2, char a3, uint64_t a4)
{
  uint64_t v8 = *((void *)this + 454);
  if (v8
    && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 472))(v8)
    && SipRegistrationNotification::secondsUntilNextRetry(a2) != -1)
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 32))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"dropping registration error notification while CSFB mode is enabled", 67);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
  else
  {
    if ((a3 & 1) == 0
      && ((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this) & 1) == 0)
    {
      uint64_t v10 = *((void *)this + 45);
      unsigned int v11 = *(std::__shared_weak_count **)(v10 + 16);
      if (v11)
      {
        unsigned int v11 = std::__shared_weak_count::lock(v11);
        uint64_t v12 = v11;
        if (v11) {
          unsigned int v11 = *(std::__shared_weak_count **)(v10 + 8);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = SipStack::callCount((SipStack *)v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v13)
      {
        uint64_t v14 = *((void *)this + 492);
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        }
        operator new();
      }
    }
    uint64_t v15 = *((void *)this + 57);
    if (v15)
    {
      uint64_t v16 = *((void *)this + 45);
      uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
      if (v17)
      {
        int v18 = std::__shared_weak_count::lock(v17);
        if (v18) {
          uint64_t v19 = *(void *)(v16 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v18 = 0;
      }
      if (*(char *)(v19 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v19 + 4160), *(void *)(v19 + 4168));
      }
      else {
        std::string __p = *(std::string *)(v19 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, const SipRegistrationErrorNotification *, uint64_t))(*(void *)v15 + 40))(v15, &__p, a2, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this) & 1) == 0)
  {
    uint64_t v20 = *((void *)this + 45);
    int v21 = *(std::__shared_weak_count **)(v20 + 16);
    if (v21)
    {
      int v21 = std::__shared_weak_count::lock(v21);
      uint64_t v22 = v21;
      if (v21) {
        int v21 = *(std::__shared_weak_count **)(v20 + 8);
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    SipStack::handleRegistrationError((SipStack *)v21);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1C546461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1C878E320](v14, 0x10F3C40A28041C4);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleErrorResponse(SipRegistrationClient *this, const SipResponse *a2)
{
  uint64_t v4 = (_DWORD *)*((void *)this + 454);
  if (!v4) {
    goto LABEL_4;
  }
  if (*((unsigned char *)this + 3648))
  {
    (*(void (**)(_DWORD *))(*(void *)v4 + 376))(v4);
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    SipResultDomain::makeResult(a2, (uint64_t)v10);
    (*(void (**)(void))(**((void **)this + 454) + 448))();
    ImsResult::~ImsResult((ImsResult *)v10);
LABEL_4:
    int v5 = 1;
    uint64_t v6 = -1;
    goto LABEL_10;
  }
  int v7 = v4[108];
  uint64_t v6 = (*(uint64_t (**)(_DWORD *, const SipResponse *))(*(void *)v4 + 296))(v4, a2);
  if (v7 != SipRegistrationMode::kModeLimitedAccess
    && (uint64_t v8 = (_DWORD *)*((void *)this + 454), v8[108] == SipRegistrationMode::kModeLimitedAccess)
    && (*(unsigned int (**)(_DWORD *))(*(void *)v8 + 552))(v8))
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Error response toggled limited access mode!", 43);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v5 = 0;
    *(unsigned char *)(v9 + 17) = 0;
  }
  else
  {
    int v5 = 1;
  }
LABEL_10:
  SipResultDomain::makeResult(a2, (uint64_t)v10);
  SipRegistrationClient::handleRegistrationError(this, (const std::string *)v10, v6, v5, 0);
  ImsResult::~ImsResult((ImsResult *)v10);
}

void sub_1C54648D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipRegistrationClient::handleTransactionError(SipRegistrationClient *this, ImsResult *a2, void *a3)
{
  if (*a3 != *((void *)this + 349))
  {
    uint64_t v6 = (char *)this + 16;
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 48))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))((char *)this + 16, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ignoring error from old transaction ", 36);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t v8 = *a3 + *(void *)(*(void *)*a3 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  uint64_t v9 = *((void *)this + 454);
  if (!v9) {
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 3648))
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 376))(v9);
    (*(void (**)(void))(**((void **)this + 454) + 448))();
LABEL_6:
    uint64_t v10 = -1;
    goto LABEL_7;
  }
  if (*((uint64_t **)a2 + 1) == &SipResultDomain::_domain && *((_DWORD *)a2 + 4) == 408)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v11 = *((void *)this + 45) + 288;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0;
    LODWORD(v17) = 1065353216;
    *(void *)&long long v18 = v11;
    uint64_t v12 = &unk_1F20DD488;
    std::string __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    SipResponse::setStatusFromImsResult((SipResponse *)&v12, a2);
    uint64_t v10 = (*(uint64_t (**)(void, void **))(**((void **)this + 454) + 296))(*((void *)this + 454), &v12);
    uint64_t v12 = &unk_1F20DD488;
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
    SipMessage::~SipMessage((SipMessage *)&v12);
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, ImsResult *, void))(*(void *)v9 + 304))(v9, a2, 0);
  }
LABEL_7:
  SipRegistrationClient::handleRegistrationError(this, (const std::string *)a2, v10, 1, 0);
}

void sub_1C5464BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::findContactInResponse(const SipUri *a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 == v4)
  {
    uint64_t v6 = 0;
LABEL_46:
    uint64_t v7 = v6;
LABEL_47:
    if (v7 - v6 == 8)
    {
      if (*(void *)(*(void *)v6 + 80) - *(void *)(*(void *)v6 + 72) == 488) {
        int v31 = a3;
      }
      else {
        int v31 = 1;
      }
      if (v31) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = *(void *)(*(void *)v6 + 72);
      }
    }
    else
    {
      uint64_t v30 = 0;
      if (!v6) {
        return v30;
      }
    }
LABEL_55:
    operator delete(v6);
    return v30;
  }
  int v33 = a3;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  do
  {
    uint64_t v12 = *(unsigned __int8 **)(v4 + 8 * v10);
    if ((char)v12[31] < 0)
    {
      long long v13 = (const void *)*((void *)v12 + 1);
      unint64_t v14 = *((void *)v12 + 2);
    }
    else
    {
      long long v13 = v12 + 8;
      unint64_t v14 = v12[31];
    }
    if (v14 >= 7) {
      size_t v15 = 7;
    }
    else {
      size_t v15 = v14;
    }
    if (!memcmp(v13, "Contact", v15) && v14 == 7)
    {
      long long v18 = v17;
      if (v9 >= v8)
      {
        uint64_t v19 = (v9 - v6) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        if ((v8 - v6) >> 2 > v20) {
          unint64_t v20 = (v8 - v6) >> 2;
        }
        if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = (char *)operator new(8 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        BOOL v23 = &v22[8 * v19];
        *(void *)BOOL v23 = v18;
        uint64_t v7 = v23 + 8;
        while (v9 != v6)
        {
          uint64_t v24 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v23 - 1) = v24;
          v23 -= 8;
        }
        uint64_t v8 = &v22[8 * v21];
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v23;
      }
      else
      {
        *(void *)uint64_t v9 = v17;
        uint64_t v7 = v9 + 8;
      }
      uint64_t v4 = *(void *)(a2 + 8);
      uint64_t v3 = *(void *)(a2 + 16);
      uint64_t v9 = v7;
    }
    uint64_t v10 = ++v11;
  }
  while (v11 < (unint64_t)((v3 - v4) >> 3));
  if (v7 == v6)
  {
    a3 = v33;
    goto LABEL_46;
  }
  uint64_t v25 = 0;
  while (1)
  {
    uint64_t v26 = *(void *)&v6[8 * v25];
    uint64_t v27 = *(void *)(v26 + 72);
    if (*(void *)(v26 + 80) != v27) {
      break;
    }
LABEL_40:
    if (++v25 >= (unint64_t)((v7 - v6) >> 3))
    {
      a3 = v33;
      goto LABEL_47;
    }
  }
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  while ((SipUri::equals((SipUri *)(v27 + v28 + 8), a1, 0) & 1) == 0)
  {
    ++v29;
    uint64_t v27 = *(void *)(v26 + 72);
    v28 += 488;
    if (v29 >= 0x4FBCDA3AC10C9715 * ((*(void *)(v26 + 80) - v27) >> 3)) {
      goto LABEL_40;
    }
  }
  uint64_t v30 = v27 + v28;
  if (v6) {
    goto LABEL_55;
  }
  return v30;
}

void sub_1C5464E9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::updateServiceMaskForContact(SipRegistrationClient *this, SipContact *a2)
{
  int v4 = *((_DWORD *)a2 + 126);
  uint64_t result = SipRegistrationClient::allowedServices(this);
  if (v4 != result)
  {
    uint64_t result = SipRegistrationClient::allowedServices(this);
    if (result)
    {
      uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 32))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ignoring reported feature tags (", 32);
      *(unsigned char *)(v6 + 17) = 0;
      int v7 = *((_DWORD *)a2 + 126);
      std::string::basic_string[abi:ne180100]<0>(&v13, ",");
      BambiServices::namesForServiceMask(v7, v15);
      (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)") and reporting (", 17);
      *(unsigned char *)(v6 + 17) = 0;
      int v8 = SipRegistrationClient::allowedServices(this);
      std::string::basic_string[abi:ne180100]<0>(&v9, ",");
      BambiServices::namesForServiceMask(v8, __p);
      (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)") instead", 9);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v10 < 0) {
        operator delete(v9);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (v14 < 0) {
        operator delete(v13);
      }
      uint64_t result = SipRegistrationClient::allowedServices(this);
      *((_DWORD *)a2 + 126) = result;
    }
  }
  return result;
}

void sub_1C54650E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::allowedServices(SipRegistrationClient *this)
{
  uint64_t v2 = *((unsigned int *)this + 284);
  uint64_t v3 = *((void *)this + 45);
  int v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      int v4 = *(std::__shared_weak_count **)(v3 + 8);
    }
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = (ImsPrefs *)SipStack::prefs((SipStack *)v4);
  RegisterSmsWhenAccessBarringZeroKey = (void **)ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(v6);
  int v8 = ImsPrefs::BOOLValue(v6, RegisterSmsWhenAccessBarringZeroKey);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8)
  {
    uint64_t v9 = *((void *)this + 45);
    char v10 = *(std::__shared_weak_count **)(v9 + 16);
    if (v10)
    {
      unsigned int v11 = std::__shared_weak_count::lock(v10);
      if (v11) {
        uint64_t v12 = *(void *)(v9 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unsigned int v11 = 0;
    }
    int isVoiceRegistrationBarred = BambiAccessBarring::isVoiceRegistrationBarred((BambiAccessBarring *)(v12 + 2928));
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (isVoiceRegistrationBarred)
    {
      uint64_t v15 = *((void *)this + 2);
      char v14 = (char *)this + 16;
      uint64_t v16 = (*(uint64_t (**)(char *))(v15 + 64))(v14);
      (*(void (**)(char *, uint64_t))(*(void *)v14 + 16))(v14, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Voice service is barred ", 24);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      return v2 & 0xFFFFFFFE;
    }
  }
  return v2;
}

void sub_1C54652C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::updateRegistrationState(SipRegistrationClient *this, const SipRegistrationStateNotification *a2)
{
  int v4 = *(_DWORD *)(*((void *)a2 + 6) + 504);
  if (*(_DWORD *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(void *)a2 + 40))(a2) != 2)
  {
    SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &__p);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    SipTransportLayer::setIPSecTransport(__p.__r_.__value_.__l.__data_, &v40);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  if ((*(uint64_t (**)(const SipRegistrationStateNotification *))(*(void *)a2 + 48))(a2))
  {
    int v5 = (unsigned int *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(void *)a2 + 40))(a2);
    unsigned int v6 = *v5;
    if (*v5 == *((_DWORD *)this + 132))
    {
      BOOL v7 = v4 == *((_DWORD *)this + 276) && *((unsigned char *)this + 2488) == 0;
    }
    else
    {
      BOOL v7 = 0;
      unsigned int v6 = *((_DWORD *)this + 132);
    }
  }
  else
  {
    BOOL v7 = 0;
    unsigned int v6 = *((_DWORD *)this + 132);
  }
  int v8 = (_DWORD *)((char *)this + 528);
  unsigned int v39 = v6;
  int v9 = *((_DWORD *)this + 276);
  char v10 = (SipRegistrationClient *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(void *)a2 + 40))(a2);
  if ((SipRegistrationClient *)((char *)this + 528) != v10) {
    *int v8 = *(_DWORD *)v10;
  }
  uint64_t v12 = (char *)this + 16;
  uint64_t v11 = *((void *)this + 2);
  *((_DWORD *)this + 276) = v4;
  uint64_t v13 = (*(uint64_t (**)(char *))(v11 + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v13);
  char v14 = *(void **)(v13 + 8);
  if (v7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"received duplicate state change to ", 35);
    *(unsigned char *)(v13 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v13, (unsigned int *)this + 132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v13 + 17) = 0;
    int v15 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(v35, ",");
    BambiServices::namesForServiceMask(v15, &v37);
    LoggableString::LoggableString(&__p, &v37);
    (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"registration state changed from ", 32);
    *(unsigned char *)(v13 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v13, &v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v13 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v35, ",");
    BambiServices::namesForServiceMask(v9, &v37);
    LoggableString::LoggableString(&__p, &v37);
    (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)") to ", 5);
    *(unsigned char *)(v13 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v13, (unsigned int *)this + 132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v13 + 17) = 0;
    int v16 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(&v31, ",");
    BambiServices::namesForServiceMask(v16, &v33);
    LoggableString::LoggableString(&v34, &v33);
    (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (*((_DWORD *)this + 132) == 2)
    {
      uint64_t v17 = *((void *)this + 45);
      long long v18 = *(std::__shared_weak_count **)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = std::__shared_weak_count::lock(v18);
        if (v19) {
          uint64_t v20 = *(void *)(v17 + 8);
        }
        else {
          uint64_t v20 = 0;
        }
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v19 = 0;
      }
      ims::AccessNetwork::set((std::string *)((char *)this + 536), (const std::string *)(v20 + 3160), (const std::string *)(v20 + 3184));
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    else
    {
      ims::AccessNetwork::clear((uint64_t)this + 536);
    }
  }
  time_t Retry = SipRegistrationNotification::secondsUntilNextRetry(a2);
  uint64_t v22 = *((void *)this + 454);
  if (v22) {
    time_t Retry = (*(uint64_t (**)(uint64_t, const SipRegistrationStateNotification *, unsigned int *))(*(void *)v22 + 312))(v22, a2, &v39);
  }
  if (*v8 == 3)
  {
    SipRegistrationClient::terminateRegEvents(this);
    BOOL v23 = (SipAuthClient **)*((void *)this + 45);
    SipUserAgent::clearAssociatedUris((SipUserAgent *)v23);
    SipAuthClient::clear(v23[35]);
    if (v7 && SipRegistrationNotification::secondsUntilNextRetry(a2) <= 0) {
      goto LABEL_55;
    }
  }
  else if (*(_DWORD *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(void *)a2 + 40))(a2) == 2)
  {
    SipRegistrationClient::clearDeferredNotifications(this);
    if (v7 || *((unsigned char *)this + 3648)) {
      goto LABEL_55;
    }
  }
  if (!*((unsigned char *)a2 + 24))
  {
LABEL_55:
    uint64_t v27 = (*(uint64_t (**)(char *))(*(void *)v12 + 64))(v12);
    (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"not notifying delegate of duplicate or surpressed state change", 62);
    *(unsigned char *)(v27 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    return result;
  }
  time_t v24 = SipRegistrationNotification::secondsUntilNextRetry(a2);
  uint64_t v25 = *(void *)a2;
  if (Retry == v24) {
    return (*(uint64_t (**)(const SipRegistrationStateNotification *, void))v25)(a2, 0);
  }
  uint64_t v28 = (void *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(v25 + 24))(a2);
  time_t v29 = time(0);
  if ((unint64_t)(Retry + 1) >= 2) {
    time_t v30 = v29;
  }
  else {
    time_t v30 = 0;
  }
  v28[1] = v29;
  unsigned __int16 v28[2] = v30 + Retry;
  (*(void (**)(void *, void))*v28)(v28, 0);
  return (*(uint64_t (**)(void *))(*v28 + 16))(v28);
}

void sub_1C5465AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationActiveNotification::~SipRegistrationActiveNotification(void **this)
{
  *this = &unk_1F20E8B80;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 9));
  SipRegistrationStateNotification::~SipRegistrationStateNotification((SipRegistrationStateNotification *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E8B80;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 9));
  SipRegistrationStateNotification::~SipRegistrationStateNotification((SipRegistrationStateNotification *)this);
  JUMPOUT(0x1C878E320);
}

void SipRegistrationSubject::actionOnObservers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v5 = v2[4];
      unsigned int v6 = (std::__shared_weak_count *)v2[5];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v10 = v5;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v10);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      BOOL v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1C5465CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN21SipRegistrationClient30updateRegistrationFromResponseERK11SipResponseb_block_invoke(uint64_t a1, void *a2)
{
  return (**(uint64_t (***)(void, void))*a2)(*a2, *(unsigned __int8 *)(*(void *)(a1 + 32) + 1145));
}

uint64_t ___ZN21SipRegistrationClient30updateRegistrationFromResponseERK11SipResponseb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 56))();
}

unsigned __int8 *SipRegistrationClient::updateExpirationTimer(SipRegistrationClient *this, const SipContact *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v3 = a2;
    if ((*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
    {
      uint64_t v4 = *((void *)this + 45);
      uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16);
      if (v5)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v5);
        unsigned int v6 = v5;
        if (v5) {
          uint64_t v5 = *(std::__shared_weak_count **)(v4 + 8);
        }
      }
      else
      {
        unsigned int v6 = 0;
      }
      uint64_t v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v5);
      EnforceMaximumEmergencyExpirationSecondsKey = (void **)ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(v10);
      if (ImsPrefs::intValue(v10, EnforceMaximumEmergencyExpirationSecondsKey))
      {
        uint64_t v12 = *((void *)this + 45);
        uint64_t v13 = *(std::__shared_weak_count **)(v12 + 16);
        if (v13)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v13);
          char v14 = v13;
          if (v13) {
            uint64_t v13 = *(std::__shared_weak_count **)(v12 + 8);
          }
        }
        else
        {
          char v14 = 0;
        }
        int v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
        int v16 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v15);
        int v17 = ImsPrefs::intValue(v15, v16);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        if (!v17)
        {
          uint64_t v18 = *((void *)this + 45);
          uint64_t v19 = *(std::__shared_weak_count **)(v18 + 16);
          if (v19)
          {
            uint64_t v19 = std::__shared_weak_count::lock(v19);
            uint64_t v20 = v19;
            if (v19) {
              uint64_t v19 = *(std::__shared_weak_count **)(v18 + 8);
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v19);
          uint64_t v22 = (void **)ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(v21);
          unsigned int v23 = ImsPrefs::intValue(v21, v22);
          if (v23 < v3) {
            unsigned int v3 = v23;
          }
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          uint64_t v24 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"forcing emergency registration expiration to ", 45);
          *(unsigned char *)(v24 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v24 + 17) = 0;
        }
      }
      else if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    *((void *)this + 59) = time(0) + v3;
    SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &__p);
    uint64_t v25 = (SipIPSecTransportGroup *)*((void *)__p + 126);
    if (v25) {
      SipIPSecTransportGroup::updateExpiration(v25, v3 + 30);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    unsigned int v26 = v3 >> 1;
    if (!(*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
    {
      int v27 = *((_DWORD *)this + 289);
      if (v3 > 2 * v27) {
        unsigned int v26 = v3 - v27;
      }
    }
    uint64_t v28 = 0;
    time_t v29 = time(0) + v26;
    *((void *)this + 60) = v29;
    *((void *)this + 61) = v29;
    uint64_t v30 = *((void *)this + 62);
    if (v30 >= 1)
    {
      BOOL v31 = v29 <= v30;
      time_t v32 = v29 - v30;
      if (!v31)
      {
        time_t v33 = v32 * *((unsigned int *)this + 290);
        if (v33 / 100 >= *((unsigned int *)this + 292)) {
          uint64_t v28 = *((unsigned int *)this + 292);
        }
        else {
          uint64_t v28 = v33 / 100;
        }
      }
    }
    if (!*((unsigned char *)this + 1180) && v28 + v26 < v3)
    {
      uint64_t v34 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"moving actual refresh time forward by ", 38);
      *(unsigned char *)(v34 + 17) = 0;
      ims::formatTimeInterval((ims *)v28);
    }
    uint64_t v35 = *((void *)this + 26);
    if (v35)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"current registration expires ", 29);
    *(unsigned char *)(v36 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), v36, v37);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
    uint64_t v38 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"will attempt re-registration ", 29);
    *(unsigned char *)(v38 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 61), v38, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)", give or take ", 15);
    *(unsigned char *)(v38 + 17) = 0;
    ims::formatTimeInterval((ims *)v28);
  }
  BOOL v7 = (int8x8_t *)((char *)this + 16);
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v7 + 16))(v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"expiration set to 0.  Clearing registration timers.", 51);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  v7[57] = 0;
  v7[58] = 0;
  v7[59] = 0;
  SipTimerContainer::cancelTimer(v7 + 25, (std::string *)_MergedGlobals_15);
  return SipTimerContainer::cancelTimer(v7 + 25, (std::string *)&qword_1EBBDC128);
}

void sub_1C54665CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::triggerRegistrationTermination(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 528) != 2)
  {
    uint64_t v7 = a1 + 16;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"triggerRegistrationTermination: not registered", 46);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = *(void *)(a1 + 360);
    uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
    if (v10 && (uint64_t v11 = std::__shared_weak_count::lock(v10)) != 0)
    {
      int v12 = *(unsigned __int8 *)(*(void *)(v9 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (!v12) {
        goto LABEL_15;
      }
    }
    else if (!MEMORY[0xA79])
    {
      goto LABEL_15;
    }
    if ((a2 - 23) > 1)
    {
      if (a2 == 25) {
        a4 = 1;
      }
    }
    else
    {
      SipRegistrationClient::setClientState((void *)a1, 1u);
      *(void *)&long long v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      SipRegistrationPolicy::lastProxyResult(*(SipRegistrationPolicy **)(a1 + 3632), (uint64_t)&v26);
      if (v27 == 403)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 16, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Will NOT notify SD of connection termination following 403", 58);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
      }
      if (*(_DWORD *)(a1 + 3968) == SipRegistrationMode::kModeDisabled)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 16, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Will NOT notify SD of connection termination due to Disabled registration mode", 78);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
      }
      ImsResult::~ImsResult((ImsResult *)&v26);
    }
  }
LABEL_15:
  int v15 = *(const void **)(a1 + 3976);
  if (!v15)
  {
    if ((a4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!v16)
  {
    if (!a4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v17 = v16[1719];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v16[1719];
  }
  else {
    uint64_t v18 = *((void *)v16 + 213);
  }
  if (v18 == 7)
  {
    uint64_t v19 = (const void **)(v16 + 1696);
    if ((v17 & 0x80) != 0)
    {
      BOOL v22 = memcmp(*v19, &SipRegistrationMetrics::kReasonRefresh, *((void *)v16 + 213)) == 0;
LABEL_36:
      if (((a4 | v22) & 1) == 0)
      {
LABEL_29:
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        SipContact::SipContact((uint64_t)&v26, 0);
        SipUri::operator=((SipUri *)((char *)&v28 + 8), a1 + 624);
        HIDWORD(v26) = 3;
        DWORD2(v54) = 0;
        DWORD2(v57) = 0;
        memset(v25, 0, sizeof(v25));
        unint64_t v21 = *(std::__shared_weak_count **)(a1 + 208);
        uint64_t v23 = *(void *)(a1 + 200);
        if (v21)
        {
          if (std::__shared_weak_count::lock(v21)) {
            SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification(v25, &v23);
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
LABEL_28:
      SipRegistrationDeferralManager::cancel(a1 + 3976);
      goto LABEL_29;
    }
    if (!v16[1719]) {
      goto LABEL_28;
    }
    uint64_t v20 = &SipRegistrationMetrics::kReasonRefresh;
    while (*(unsigned __int8 *)v19 == v20->__r_.__value_.__s.__data_[0])
    {
      uint64_t v19 = (const void **)((char *)v19 + 1);
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      if (!--v17) {
        goto LABEL_28;
      }
    }
  }
  BOOL v22 = 0;
  goto LABEL_36;
}

void sub_1C5466BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::triggerRegistrationTermination(uint64_t a1, int a2, uint64_t a3, int a4)
{
}

void SipRegistrationClient::terminateRegEvents(SipRegistrationClient *this)
{
  SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_185);
  *((unsigned char *)this + 608) = 0;
  uint64_t v2 = (SipEventPackage *)*((void *)this + 58);
  if (v2)
  {
    SipEventPackage::terminateWithoutUnsubscribing(v2);
  }
}

void SipRegistrationClient::notifyDelegateOfRegistrationActive(SipRegistrationClient *this, const SipRegistrationActiveNotification *a2)
{
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this) & 1) == 0)
  {
    uint64_t v4 = *((void *)this + 45);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16);
    if (v5 && (unsigned int v6 = std::__shared_weak_count::lock(v5)) != 0)
    {
      int v7 = *(_DWORD *)(*(void *)(v4 + 8) + 200);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v7 == 3) {
        return;
      }
    }
    else if (MEMORY[0xC8] == 3)
    {
      return;
    }
  }
  uint64_t v8 = *((void *)this + 57);
  uint64_t v9 = *((void *)this + 45);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      uint64_t v12 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  if (*(char *)(v12 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v12 + 4160);
  }
  (*(void (**)(uint64_t, std::string *, const SipRegistrationActiveNotification *))(*(void *)v8 + 16))(v8, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this) & 1) == 0)
  {
    uint64_t v13 = *((void *)this + 45);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
    if (v14)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v14);
      int v15 = v14;
      if (v14) {
        uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
      }
    }
    else
    {
      int v15 = 0;
    }
    SipStack::handleRegistrationActive((SipStack *)v14);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1C5466E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::notifyDelegateOfRegistrationTermination(SipRegistrationClient *this, const SipRegistrationTerminatedNotification *a2, char a3)
{
  if (*((void *)this + 57))
  {
    if (((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this) & 1) == 0)
    {
      uint64_t v6 = *((void *)this + 45);
      int v7 = *(std::__shared_weak_count **)(v6 + 16);
      if (v7)
      {
        int v7 = std::__shared_weak_count::lock(v7);
        uint64_t v8 = v7;
        if (v7) {
          int v7 = *(std::__shared_weak_count **)(v6 + 8);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      SipStack::handleRegistrationTerminated((SipStack *)v7);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    uint64_t v9 = *((void *)this + 454);
    if (v9
      && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 472))(v9)
      && SipRegistrationNotification::secondsUntilNextRetry(a2) != -1)
    {
      uint64_t v11 = *((void *)this + 2);
      uint64_t v10 = (char *)this + 16;
      uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 32))(v10);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"dropping registration terminated notification while CSFB mode is enabled", 72);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
    }
    else
    {
      if ((a3 & 1) == 0)
      {
        uint64_t v13 = *((void *)this + 45);
        uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
        if (v14)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v14);
          int v15 = v14;
          if (v14) {
            uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
          }
        }
        else
        {
          int v15 = 0;
        }
        uint64_t v16 = SipStack::callCount((SipStack *)v14);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (v16)
        {
          uint64_t v17 = *((void *)this + 491);
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
          }
          operator new();
        }
      }
      uint64_t v18 = *((void *)this + 57);
      uint64_t v19 = *((void *)this + 45);
      uint64_t v20 = *(std::__shared_weak_count **)(v19 + 16);
      if (v20)
      {
        unint64_t v21 = std::__shared_weak_count::lock(v20);
        if (v21) {
          uint64_t v22 = *(void *)(v19 + 8);
        }
        else {
          uint64_t v22 = 0;
        }
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v21 = 0;
      }
      if (*(char *)(v22 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v22 + 4160), *(void *)(v22 + 4168));
      }
      else {
        std::string __p = *(std::string *)(v22 + 4160);
      }
      (*(void (**)(uint64_t, std::string *, const SipRegistrationTerminatedNotification *, BOOL))(*(void *)v18 + 24))(v18, &__p, a2, *((void *)this + 497) != 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
  }
}

void sub_1C54671E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRegistrationClient::isImsOutageResponse(SipRegistrationClient *this, const SipResponse *a2)
{
  if (*((_DWORD *)this + 22) != 503) {
    return 0;
  }
  if (*((char *)this + 119) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 4);
  }
  if (isImsOutageText((uint64_t)&v6))
  {
    BOOL v3 = 1;
  }
  else
  {
    SipMessage::reasonText(this, &__p);
    BOOL v3 = isImsOutageText((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1C54672FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL isImsOutageText(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "IMS Outage");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v2 = (const char *)a1;
  }
  else {
    uint64_t v2 = *(const char **)a1;
  }
  char v3 = v14;
  if (v14 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (!strcasecmp(v2, (const char *)v4))
  {
    BOOL v9 = 1;
    if ((v3 & 0x80) == 0) {
      return v9;
    }
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "Service Unavailable: IMS Core Outage");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v5 = (const char *)a1;
  }
  else {
    uint64_t v5 = *(const char **)a1;
  }
  int v6 = v12;
  int v7 = (void *)v11[0];
  if (v12 >= 0) {
    uint64_t v8 = (const char *)v11;
  }
  else {
    uint64_t v8 = (const char *)v11[0];
  }
  BOOL v9 = strcasecmp(v5, v8) == 0;
  if (v6 < 0) {
    operator delete(v7);
  }
  if (v14 < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
  return v9;
}

void sub_1C546740C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::handleResponse(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != *(void *)(a1 + 2792))
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ignoring response from old transaction ", 39);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v7 = *a3 + *(void *)(*(void *)*a3 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    return 1;
  }
  int v9 = *(_DWORD *)(a1 + 520);
  if (v9 == 6 || v9 == 9)
  {
    int v12 = *(_DWORD *)(a2 + 88);
    if ((v12 - 200) <= 0x63)
    {
      ContactInResponse = (capabilities::radio *)SipRegistrationClient::findContactInResponse((const SipUri *)(a1 + 624), a2, 1);
      if (ContactInResponse)
      {
LABEL_12:
        if (capabilities::radio::supportsRel16(ContactInResponse)
          && SipRegistrationClient::nasImsRegInProgress((SipRegistrationClient *)a1))
        {
          uint64_t v14 = *(void *)(a1 + 360);
          int v15 = *(std::__shared_weak_count **)(v14 + 16);
          if (v15 && (uint64_t v16 = std::__shared_weak_count::lock(v15)) != 0)
          {
            uint64_t v17 = *(void *)(*(void *)(*(void *)(v14 + 8) + 136) + 240);
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          else
          {
            uint64_t v17 = *(void *)(MEMORY[0x88] + 240);
          }
          if (v17 && *(void *)(v17 + 8) && *(unsigned char *)(v17 + 72))
          {
            uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"handleSuccessResponse: RegAccessCheck done", 42);
            *(unsigned char *)(v51 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v51 + 17) = 0;
            uint64_t v52 = *(void *)(a1 + 360);
            long long v53 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v52 + 16));
            uint64_t v54 = *(unsigned int *)(*(void *)(v52 + 8) + 4100);
            uint64_t v55 = *(void *)(a1 + 360);
            long long v56 = *(std::__shared_weak_count **)(v55 + 16);
            if (v56)
            {
              long long v57 = std::__shared_weak_count::lock(v56);
              if (v57) {
                uint64_t v58 = *(void *)(v55 + 8);
              }
              else {
                uint64_t v58 = 0;
              }
            }
            else
            {
              uint64_t v58 = 0;
              long long v57 = 0;
            }
            IMSNasDeviceClient::reportCallStatus(v17, v54, 2, 64, v58 + 3160, 1, 0);
            if (v57) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          }
          SipRegistrationClient::nasImsRegStop((SipRegistrationClient *)a1);
        }
        HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a2);
        if (HeaderWith
          && (uint64_t v97 = (SipViaHop **)*((void *)HeaderWith + 8), v97 != *((SipViaHop ***)HeaderWith + 9))
          && *v97)
        {
          int v98 = SipViaHop::keep(*v97);
        }
        else
        {
          int v98 = 0;
        }
        SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
        SipRegistrationMetrics::registrationAttemptCompleted((SipRegistrationMetrics *)(a1 + 3800), (const ImsResult *)__p, v98);
        ImsResult::~ImsResult((ImsResult *)__p);
        if (!*(unsigned char *)(a1 + 3648))
        {
          SipUri::operator=((SipUri *)(a1 + 3216), a1 + 2808);
          uint64_t v99 = *(void *)(a1 + 504);
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 176))(v99))
            {
              SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
              v100 = *(void **)__p;
              v101 = *(std::__shared_weak_count **)(a1 + 512);
              uint64_t v134 = *(void *)(a1 + 504);
              v135 = v101;
              if (v101) {
                atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              SipTransportLayer::setIPSecTransport(v100, &v134);
              if (v135) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v135);
              }
              if (*(void *)&__p[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
              }
            }
            else
            {
              uint64_t v102 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 32))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v102);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)"received 200 response to REGISTER without a 401 challenge.  Unable to initialize new secure transport.", 102);
              *(unsigned char *)(v102 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v102 + 17) = 0;
            }
          }
          *(void *)std::string __p = &unk_1F20E5228;
          memset(&__p[8], 0, 48);
          SipResponse::associatedUris((SipResponse *)a2, (SipRouteSet *)__p);
          char v103 = (const SipUri *)(*(uint64_t (**)(void, unsigned char *))(**(void **)(a1 + 3632) + 344))(*(void *)(a1 + 3632), __p);
          SipUserAgent::setAssociatedUris(*(SipUserAgent **)(a1 + 360), (const SipUri ***)__p, v103);
        }
        SipRegistrationClient::cleanUpRegistrationArtifacts((SipRegistrationClient *)a1);
        *(_DWORD *)(a1 + 452) = 0;
        SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v136);
        std::string v104 = v136[0];
        if (*(unsigned char *)(a1 + 3648)) {
          v105 = "successful deregistration";
        }
        else {
          v105 = "successful registration";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v105);
        SipTransportLayer::resetTransportErrors((uint64_t)v104, (const std::string *)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (v136[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v136[1]);
        }
        *(_DWORD *)std::string __p = 2 * (*(unsigned char *)(a1 + 3648) == 0);
        SipRegistrationClient::setRegistrationState(a1, (int *)__p, 0);
        SipRegistrationClient::setClientState((void *)a1, 1u);
        int v106 = *(unsigned __int8 *)(a1 + 3648);
        uint64_t v107 = SipRegistrationClient::findContactInResponse((const SipUri *)(a1 + 624), a2, 0);
        int v179 = 0;
        long long v177 = 0u;
        long long v178 = 0u;
        *(_OWORD *)v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v171 = 0u;
        long long v172 = 0u;
        long long v169 = 0u;
        long long v170 = 0u;
        long long v167 = 0u;
        long long v168 = 0u;
        long long v165 = 0u;
        long long v166 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v159 = 0u;
        long long v160 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        long long v155 = 0u;
        long long v156 = 0u;
        long long v153 = 0u;
        long long v154 = 0u;
        long long v151 = 0u;
        long long v152 = 0u;
        memset(__p, 0, sizeof(__p));
        SipContact::SipContact((uint64_t)__p, 0);
        SipMessage::headerValueAsUint32(a2, "Expires", &v179);
        if (v107)
        {
          uint64_t v108 = (void **)(v107 + 432);
          if ((void **)(v107 + 432) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v107 + 424, (void **)"expires"))int v179 = SipParameterMap::uintParameter(v107 + 416, (void **)"expires", 0); {
          if (v108 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v107 + 424, (void **)"pub-gruu"))
          }
          {
            uint64_t v109 = *(void *)(a1 + 360);
            v110 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v107 + 424, (void **)"pub-gruu");
            if (v108 == v110) {
              v111 = &ims::kEmptyString;
            }
            else {
              v111 = (long long *)(v110 + 7);
            }
            ims::removeQuotes((uint64_t)v111, (std::string *)v136);
            SipUserAgent::setPublicGruu(v109, (uint64_t)v136);
          }
          SipUri::operator=((SipUri *)&__p[40], v107 + 8);
          DWORD2(v178) = *(_DWORD *)(v107 + 456);
          SipRegistrationClient::updateServiceMaskForContact((SipRegistrationClient *)a1, (SipContact *)__p);
        }
        else
        {
          if (!v106)
          {
            uint64_t v117 = *(void *)(a1 + 16);
            uint64_t v116 = a1 + 16;
            uint64_t v118 = (*(uint64_t (**)(uint64_t))(v117 + 48))(v116);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v116 + 16))(v116, v118);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v118 + 8), (uint64_t)"couldn't find my contact in registration response", 49);
            *(unsigned char *)(v118 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v118 + 64))(v118, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v118 + 17) = 0;
            SipContact::~SipContact((SipContact *)__p);
            return 1;
          }
          SipUri::operator=((SipUri *)&__p[40], a1 + 624);
          DWORD2(v178) = 0;
        }
        if (v106 && v179)
        {
          uint64_t v112 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v112 + 8), (uint64_t)"expected expiration of 0 but got ", 33);
          *(unsigned char *)(v112 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v112 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v112 + 17) = 0;
          int v179 = 0;
          LODWORD(v175[1]) = 0;
          *(_DWORD *)&__p[12] = 3;
        }
        else
        {
          LODWORD(v175[1]) = v179;
          if (v179)
          {
            *(_DWORD *)&__p[12] = 2;
            long long v146 = 0u;
            long long v147 = 0u;
            long long v144 = 0u;
            *(_OWORD *)v145 = 0u;
            long long v142 = 0u;
            long long v143 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            long long v138 = 0u;
            long long v139 = 0u;
            *(_OWORD *)v136 = 0u;
            long long v137 = 0u;
            v114 = *(std::__shared_weak_count **)(a1 + 208);
            uint64_t v148 = *(void *)(a1 + 200);
            if (v114)
            {
              v149 = std::__shared_weak_count::lock(v114);
              if (v149) {
                SipRegistrationActiveNotification::SipRegistrationActiveNotification(v136, &v148);
              }
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          *(_DWORD *)&__p[12] = 3;
          if (!v106)
          {
            uint64_t v115 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v115);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v115 + 8), (uint64_t)"got expires = 0 for a registration. Treating it as a terminated notification.", 77);
            *(unsigned char *)(v115 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v115 + 64))(v115, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v115 + 17) = 0;
          }
        }
        long long v138 = 0u;
        long long v139 = 0u;
        *(_OWORD *)v136 = 0u;
        long long v137 = 0u;
        v113 = *(std::__shared_weak_count **)(a1 + 208);
        uint64_t v148 = *(void *)(a1 + 200);
        if (v113)
        {
          v149 = std::__shared_weak_count::lock(v113);
          if (v149) {
            SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification(v136, &v148);
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v27 = *(void *)(a1 + 360);
      long long v28 = *(std::__shared_weak_count **)(v27 + 16);
      if (v28)
      {
        long long v28 = std::__shared_weak_count::lock(v28);
        long long v29 = v28;
        if (v28) {
          long long v28 = *(std::__shared_weak_count **)(v27 + 8);
        }
      }
      else
      {
        long long v29 = 0;
      }
      long long v38 = (ImsPrefs *)SipStack::prefs((SipStack *)v28);
      long long v39 = (void **)ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(v38);
      ContactInResponse = (capabilities::radio *)ImsPrefs::BOOLValue(v38, v39);
      char v40 = (char)ContactInResponse;
      if (v29)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        if ((v40 & 1) == 0) {
          goto LABEL_12;
        }
      }
      else if (!ContactInResponse)
      {
        goto LABEL_12;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v23);
      uint64_t v24 = *(void **)(v23 + 8);
      uint64_t v25 = "Incoming 200 response does not contain a recognized contact URI";
      uint64_t v26 = 63;
      goto LABEL_51;
    }
    switch(v12)
    {
      case 494:
        goto LABEL_38;
      case 423:
        *(_DWORD *)std::string __p = 0;
        if (!SipMessage::headerValueAsUint32(a2, "Min-Expires", __p))
        {
          uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v43);
          long long v37 = (unsigned char *)ImsOutStream::operator<<(v43, "got a 423 response with no Min-Expires.  Will throttle and retry with expires = ");
          std::ostream::operator<<();
          v37[17] = 0;
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_53;
        }
        *(_DWORD *)(a1 + 1148) = *(_DWORD *)__p;
        long long v30 = (SipRegistrationClient *)a1;
LABEL_83:
        SipRegistrationClient::retryRegistrationAfterProceduralError(v30);
        return 1;
      case 401:
        uint64_t v20 = a1 + 16;
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(a1 + 16, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"received 401 Unauthorized response to registration request.", 59);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if (*(_DWORD *)(a1 + 452) >= *(_DWORD *)(a1 + 2116))
        {
          uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"too many auth retries.  Giving up.", 34);
          *(unsigned char *)(v44 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v44 + 17) = 0;
          *(_DWORD *)(a1 + 452) = 0;
          SipAuthClient::clear(*(SipAuthClient **)(*(void *)(a1 + 360) + 280));
          goto LABEL_55;
        }
        uint64_t v22 = *(void *)(a1 + 504);
        if (v22)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 176))(v22))
          {
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v23);
            uint64_t v24 = *(void **)(v23 + 8);
            uint64_t v25 = "can't handle multiple 401 responses for the same SAs";
            uint64_t v26 = 52;
LABEL_51:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v23 + 17) = 0;
            goto LABEL_55;
          }
          uint64_t v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a2 + 32), "Security-Server");
          if (!v70 {
            || (long long v71 = (const void *)*((void *)v70 + 5)) == 0
          }
          {
            int v74 = 1;
LABEL_95:
            uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(a1 + 16, v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)"unable to initialize IPSec SAs.  Failing registration.", 54);
            *(unsigned char *)(v83 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v83 + 17) = 0;
            if (v74)
            {
              uint64_t v84 = *(void *)(a1 + 360);
              v85 = *(std::__shared_weak_count **)(v84 + 16);
              if (v85)
              {
                v85 = std::__shared_weak_count::lock(v85);
                char v86 = v85;
                if (v85) {
                  v85 = *(std::__shared_weak_count **)(v84 + 8);
                }
              }
              else
              {
                char v86 = 0;
              }
              v119 = (ImsPrefs *)SipStack::prefs((SipStack *)v85);
              v120 = (void **)ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(v119);
              int v121 = ImsPrefs::BOOLValue(v119, v120);
              char v122 = v121;
              if (v86)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v86);
                if ((v122 & 1) == 0) {
                  goto LABEL_55;
                }
              }
              else if (!v121)
              {
                goto LABEL_55;
              }
              SipRegistrationClient::resetCallIdAndCseq((SipRegistrationClient *)a1, 1);
            }
LABEL_55:
            SipRegistrationClient::handleErrorResponse((SipRegistrationClient *)a1, (const SipResponse *)a2);
            return 1;
          }
          SipIPSecTransportGroup::updateFromSecurityServerHeader(*(SipIPSecTransportGroup **)(a1 + 504), v72, (ImsResult *)__p);
          int v73 = (*(uint64_t (**)(void, void))(**(void **)&__p[8] + 24))(*(void *)&__p[8], *(unsigned int *)&__p[16]);
          ImsResult::~ImsResult((ImsResult *)__p);
          if (v73)
          {
            int v74 = 0;
            goto LABEL_95;
          }
          v130 = *(SipIPSecTransportGroup **)(a1 + 504);
          uint64_t v131 = SipUserAgent::config(*(SipUserAgent **)(a1 + 360));
          unsigned int v132 = SipTimers::timerValue((SipTimers *)(v131 + 512), (const SipTimer *)&SipTimers::kTimerRegAwaitAuth, 0);
          SipIPSecTransportGroup::updateExpiration(v130, v132 / 0x3E8);
        }
        SipRegistrationClient::setClientState((void *)a1, 7u);
        if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*(void *)(a1 + 360) + 280), (const SipResponse *)a2, (SipAuthChallengeSource *)(a1 + 136)) & 1) == 0)SipRegistrationClient::handleErrorResponse((SipRegistrationClient *)a1, (const SipResponse *)a2); {
        uint64_t v133 = *(void *)(a1 + 3632);
        }
        if (v133) {
          (*(void (**)(uint64_t))(*(void *)v133 + 360))(v133);
        }
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
    BOOL v31 = SipMessage::requiresOption(a2, (void **)__p);
    BOOL v32 = *(_DWORD *)(a2 + 88) == 421 && v31;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v32)
    {
LABEL_38:
      SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
      int v33 = *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)__p + 16))(*(void *)__p) + 438);
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (v33)
      {
        uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v34);
        long long v35 = "Received security agreement error, but IPSec is enabled";
        uint64_t v36 = v34;
LABEL_42:
        long long v37 = (unsigned char *)ImsOutStream::operator<<(v36, v35);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_53:
        v37[17] = 0;
        goto LABEL_55;
      }
      SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
      uint64_t v41 = *(void *)(*(void *)__p + 264);
      if (v41) {
        char v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, 1);
      }
      else {
        char v42 = 0;
      }
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      uint64_t v62 = *(void *)(a1 + 16);
      if (v42)
      {
        uint64_t v63 = (*(uint64_t (**)(uint64_t))(v62 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v63);
        long long v64 = (unsigned char *)ImsOutStream::operator<<(v63, "Received security agreement error. Enabling IPSec and retrying");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v64[17] = 0;
        uint64_t v65 = *(void *)(a1 + 360);
        long long v66 = *(std::__shared_weak_count **)(v65 + 16);
        if (v66 && (long long v67 = std::__shared_weak_count::lock(v66)) != 0)
        {
          *(unsigned char *)(*(void *)(v65 + 8) + 2046) = 1;
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        else
        {
          MEMORY[0x7FE] = 1;
        }
        long long v30 = (SipRegistrationClient *)a1;
        goto LABEL_83;
      }
      uint64_t v68 = (*(uint64_t (**)(uint64_t))(v62 + 56))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v68);
      long long v69 = (unsigned char *)ImsOutStream::operator<<(v68, "Received security agreement error and IPSec is unavailable for use");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v69[17] = 0;
      SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
      SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (const std::string *)__p, -1, 1, 0);
LABEL_170:
      ImsResult::~ImsResult((ImsResult *)__p);
      return 1;
    }
    unsigned int v45 = *(_DWORD *)(a2 + 88);
    if (v45 != 305)
    {
      if (v45 < 0x12C) {
        return 1;
      }
      uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 32))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v59);
      uint64_t v60 = ImsOutStream::operator<<(v59, "got a non-success response (code = ");
      std::ostream::operator<<();
      *(unsigned char *)(v60 + 17) = 0;
      uint64_t v61 = ImsOutStream::operator<<(v60, ", class = ");
      std::ostream::operator<<();
      *(unsigned char *)(v61 + 17) = 0;
      long long v35 = ")";
      uint64_t v36 = v61;
      goto LABEL_42;
    }
    *(void *)&long long v151 = 0;
    memset(__p, 0, sizeof(__p));
    SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
    long long v46 = *(SipRegistrationPolicy **)(a1 + 3632);
    uint64_t v47 = *((void *)v46 + 55);
    if (v47 && v47 != *((void *)v46 + 56))
    {
      ImsResult::operator=(v47 + 480 * *((void *)v46 + 58) + 408, (uint64_t)__p);
      long long v46 = *(SipRegistrationPolicy **)(a1 + 3632);
    }
    if (SipRegistrationPolicy::allProxiesHaveError(v46, (const ImsResult *)__p))
    {
      uint64_t v48 = *(void *)(a1 + 360);
      long long v49 = *(std::__shared_weak_count **)(v48 + 16);
      if (v49)
      {
        long long v49 = std::__shared_weak_count::lock(v49);
        long long v50 = v49;
        if (v49) {
          long long v49 = *(std::__shared_weak_count **)(v48 + 8);
        }
      }
      else
      {
        long long v50 = 0;
      }
      char v87 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
      DropRegistrationOn305ToAllProxiesKey = (void **)ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(v87);
      int v89 = ImsPrefs::BOOLValue(v87, DropRegistrationOn305ToAllProxiesKey);
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      uint64_t v90 = a1 + 16;
      v91 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48);
      if (v89)
      {
        uint64_t v92 = v91(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v90 + 16))(a1 + 16, v92);
        uint64_t v93 = (unsigned char *)ImsOutStream::operator<<(v92, "received redirects from all proxies. Dropping registration.");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v93[17] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 168))(a1, 19, -1, 0);
      }
      else
      {
        uint64_t v94 = v91(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v90 + 16))(a1 + 16, v94);
        v95 = (unsigned char *)ImsOutStream::operator<<(v94, "received redirects from all proxies. Resetting PDN.");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v95[17] = 0;
        (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
      }
      goto LABEL_170;
    }
    uint64_t v75 = SipMessage::header<SipContactHeader>(a2);
    if (v75)
    {
      uint64_t v76 = v75[9];
      if (v76)
      {
        if (v76 != v75[10])
        {
          unsigned __int16 v77 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
          int v78 = SipHost::equalsWithDefaultPort((SipHost *)(v76 + 16), (const SipHost *)(a1 + 2816), v77);
          uint64_t v80 = a1 + 16;
          uint64_t v79 = *(void *)(a1 + 16);
          if (v78)
          {
            uint64_t v81 = (*(uint64_t (**)(uint64_t))(v79 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 16))(a1 + 16, v81);
            long long v82 = (unsigned char *)ImsOutStream::operator<<(v81, "received redirect to our current proxy. Let's just skip to the next one.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            uint64_t v123 = (*(uint64_t (**)(uint64_t))(v79 + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 16))(a1 + 16, v123);
            uint64_t v124 = ImsOutStream::operator<<(v123, "using proxy ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 + 8) + 40))(v76 + 8, v124);
            uint64_t v125 = ImsOutStream::operator<<(v124, " from 305 response");
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v125 + 64))(v125, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v125 + 17) = 0;
            SipRegistrationPolicy::setProxy(*(SipRegistrationPolicy **)(a1 + 3632), (const SipUri *)(v76 + 8), (uint64_t)v136);
            LOBYTE(v125) = (*(uint64_t (**)(SipTransportLayer *, void))(*(void *)v136[1] + 24))(v136[1], v137);
            ImsResult::~ImsResult((ImsResult *)v136);
            if ((v125 & 1) == 0)
            {
LABEL_169:
              SipRegistrationClient::retryRegistrationAfterProceduralError((SipRegistrationClient *)a1);
              goto LABEL_170;
            }
            uint64_t v126 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 16))(a1 + 16, v126);
            uint64_t v127 = ImsOutStream::operator<<(v126, "unable to select proxy ");
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 + 8) + 40))(v76 + 8, v127);
            long long v82 = (unsigned char *)ImsOutStream::operator<<(v127, ". Let's just skip to the next one.");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          v82[17] = 0;
        }
      }
    }
    uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v128);
    v129 = (unsigned char *)ImsOutStream::operator<<(v128, "skipping to next proxy");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v129 + 64))(v129, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v129[17] = 0;
    (*(void (**)(void))(**(void **)(a1 + 3632) + 504))(*(void *)(a1 + 3632));
    goto LABEL_169;
  }
  if (v9 != 10)
  {
    uint64_t v18 = a1 + 16;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(a1 + 16, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"received unexpected REGISTER response while in state ", 53);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 32))(v19, &_MergedGlobals_15[3 * *(unsigned int *)(a1 + 520) + 12]);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
  }
  SipRegistrationClient::setClientState((void *)a1, 1u);
  return 0;
}

void sub_1C5469B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  SipRouteSet::~SipRouteSet((SipRouteSet *)&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::retryRegistrationAfterProceduralError(SipRegistrationClient *a1)
{
  SipRegistrationClient::cleanUpRegistrationArtifacts(a1);
  uint64_t v2 = (*(uint64_t (**)(void *))(*((void *)a1 + 2) + 64))((void *)a1 + 2);
  (*(void (**)(void *, uint64_t))(*((void *)a1 + 2) + 16))((void *)a1 + 2, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"this is where I will cancel throttling", 38);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  SipRegistrationClient::internalRetryRegistration((uint64_t)a1);
}

void SipRegistrationClient::internalRetryRegistration(uint64_t a1)
{
  char v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 3632) + 416))(*(void *)(a1 + 3632));
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v3);
  uint64_t v4 = *(void **)(v3 + 8);
  if ((v2 & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"not retrying emergency registration", 35);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"retrying registration with proxy (", 34);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 2808) + 40))(a1 + 2808, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (*(void *)(a1 + 3632))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"current policy info:", 20);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void))(**(void **)(a1 + 3632) + 392))();
  }
  if (SipRegistrationClient::shouldDeferRegistration((SipRegistrationClient *)a1))
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 208);
    if (*(unsigned char *)(a1 + 3648))
    {
      std::string::size_type v12[2] = *(void *)(a1 + 200);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        void v12[3] = v7;
        if (v7)
        {
          uint64_t v8 = v7;
          SipRegistrationDeferralManager::deferAction((_DWORD *)(a1 + 3976));
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          return;
        }
      }
    }
    else
    {
      v12[0] = *(void *)(a1 + 200);
      if (v6)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v6);
        v12[1] = v10;
        if (v10)
        {
          uint64_t v8 = v10;
          SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), (uint64_t)v12, a1 + 1112, (unsigned __int8 *)(a1 + 3896));
          goto LABEL_17;
        }
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (*(void *)(a1 + 3632))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"internalRetryRegistration: setting to policy SipRegClientRegType::RetryReg", 74);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    *(_DWORD *)(*(void *)(a1 + 3632) + 2356) = 3;
  }
  SipRegistrationClient::initializeTransport((SipRegistrationClient *)v11, a1);
  ImsResult::~ImsResult((ImsResult *)v11);
}

void sub_1C546A328(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::forceRetry(SipRegistrationClient *this)
{
  char v2 = (void *)((char *)this + 16);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"retry forced by policy", 22);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t v4 = (SipTransaction *)v2[347];
  if (v4) {
    SipTransaction::abort(v4);
  }
  SipRegistrationClient::cleanUpRegistrationArtifacts(this);
  SipRegistrationClient::internalRetryRegistration((uint64_t)this);
}

void non-virtual thunk to'SipRegistrationClient::forceRetry(SipRegistrationClient *this)
{
}

uint64_t SipRegistrationClient::shouldDeferRegistration(SipRegistrationClient *this)
{
  uint64_t v2 = *((void *)this + 45);
  uint64_t v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  if (*(unsigned char *)(*(void *)(v2 + 8) + 4232))
  {
    int v4 = 0;
  }
  else
  {
    uint64_t v5 = *((void *)this + 45);
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 16);
    if (v6)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        uint64_t v6 = *(std::__shared_weak_count **)(v5 + 8);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    int v4 = SipStack::requiresLimitedAvailability((SipStack *)v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  uint64_t v8 = *((void *)this + 454);
  if (v8) {
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 464))(v8);
  }
  else {
    unsigned int v9 = 0;
  }
  if ((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this)) {
    return 0;
  }
  else {
    return v4 | v9;
  }
}

void sub_1C546A55C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::initializeTransport(SipRegistrationClient *this, uint64_t a2)
{
  SipRegistrationClient::setClientState((void *)a2, 5u);
  if (*(void *)(*(void *)(a2 + 3632) + 448) == *(void *)(*(void *)(a2 + 3632) + 440))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v10[0] = &unk_1F20B2680;
    v10[1] = &_bambiDomain;
    int v11 = 1073741826;
    uint64_t v5 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v10, "initializeTransport: no proxy available");
    uint64_t v6 = ImsLogContainer::logResult((ImsLogContainer *)(a2 + 16), v5);
    ImsResult::ImsResult(this, (const std::string *)v6);
    ImsResult::~ImsResult((ImsResult *)v10);
  }
  else
  {
    SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v8);
    int v4 = v8;
    (*(void (**)(int8x8_t *__return_ptr))(**(void **)(a2 + 3632) + 512))(v7);
    SipTransportLayer::initializeTransportToProxy(v4, v7, 0, a2 + 8, (uint64_t)v10);
    ImsLogContainer::logResult(a2 + 16, (uint64_t)v10, (uint64_t)this);
    ImsResult::~ImsResult((ImsResult *)v10);
    std::deque<SipUri>::~deque[abi:ne180100](v7);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C546A6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  int v11 = va_arg(va1, std::__shared_weak_count *);
  ImsResult::~ImsResult((ImsResult *)va1);
  std::deque<SipUri>::~deque[abi:ne180100]((uint64_t *)va);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationClient::retryRegistration(SipRegistrationClient *this)
{
  if (*((_DWORD *)this + 130) == 1)
  {
    if (capabilities::radio::supportsRel16(this))
    {
      uint64_t v2 = *((void *)this + 45);
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
      if (v3 && (int v4 = std::__shared_weak_count::lock(v3)) != 0)
      {
        uint64_t v5 = v4;
        BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(void *)(v2 + 8) + 3160));
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (!isNR) {
          goto LABEL_21;
        }
      }
      else if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC58))
      {
        goto LABEL_21;
      }
      uint64_t v9 = *((void *)this + 45);
      uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
      if (v10 && (int v11 = std::__shared_weak_count::lock(v10)) != 0)
      {
        uint64_t v12 = *(void *)(*(void *)(*(void *)(v9 + 8) + 136) + 240);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        if (!v12)
        {
LABEL_13:
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
          SipRegistrationClient::handleRegistrationError(this, &__p, -1, 1, 0);
          ImsResult::~ImsResult((ImsResult *)&__p);
          return;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(MEMORY[0x88] + 240);
        if (!v12) {
          goto LABEL_13;
        }
      }
      if (*(void *)(v12 + 8) && *(unsigned char *)(v12 + 72))
      {
        uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"RetryRegAccessCheck...", 22);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        uint64_t v14 = *((void *)this + 45);
        int v15 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v14 + 16));
        uint64_t v16 = *(unsigned int *)(*(void *)(v14 + 8) + 4100);
        uint64_t v17 = *((void *)this + 45);
        uint64_t v18 = *(std::__shared_weak_count **)(v17 + 16);
        if (v18)
        {
          uint64_t v19 = std::__shared_weak_count::lock(v18);
          if (v19) {
            uint64_t v20 = *(void *)(v17 + 8);
          }
          else {
            uint64_t v20 = 0;
          }
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
        }
        IMSNasDeviceClient::reportCallStatus(v12, v16, 0, 64, v20 + 3160, 1, 0);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        SipRegistrationClient::setClientState(this, 4u);
        SipRegistrationClient::nasImsRegStart(this);
        uint64_t v22 = *((void *)this + 454);
        if (v22)
        {
          *(void *)(v22 + 408) = 0;
          *(void *)(v22 + 416) = 0;
        }
        return;
      }
      uint64_t v21 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: go straight to internalRetryRegistration", 109);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
    }
LABEL_21:
    SipRegistrationClient::internalRetryRegistration((uint64_t)this);
    return;
  }
  uint64_t v7 = (unsigned int *)((char *)this + 16);
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(unsigned int *, uint64_t))(*(void *)v7 + 16))(v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ignoring retryRegistration request in state ", 44);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&_MergedGlobals_15[3 * v7[126] + 12]);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C546AB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::nasImsRegStart(SipRegistrationClient *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"nasImsReg Start", 15);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  v1[508] = 1;
  return result;
}

void non-virtual thunk to'SipRegistrationClient::retryRegistration(SipRegistrationClient *this)
{
}

void SipRegistrationClient::setConnectivityAvailable(SipRegistrationClient *this, int a2, int a3)
{
  if (a3) {
    SipRegistrationDeferralManager::cancel((uint64_t)this + 3976);
  }
  if (a2)
  {
    uint64_t v5 = *((void *)this + 45);
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 16);
    if (v6)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v6);
      uint64_t v7 = v6;
      if (v6) {
        uint64_t v6 = *(std::__shared_weak_count **)(v5 + 8);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = (ImsPrefs *)SipStack::prefs((SipStack *)v6);
    DeferReRegOnConnectivityDisableKey = (void **)ImsPrefs::getDeferReRegOnConnectivityDisableKey(v8);
    if (ImsPrefs::BOOLValue(v8, DeferReRegOnConnectivityDisableKey))
    {
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
    else
    {
      uint64_t v10 = *((void *)this + 45);
      int v11 = *(std::__shared_weak_count **)(v10 + 16);
      if (v11)
      {
        int v11 = std::__shared_weak_count::lock(v11);
        uint64_t v12 = v11;
        if (v11) {
          int v11 = *(std::__shared_weak_count **)(v10 + 8);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v13 = SipStack::requiresLimitedAvailability((SipStack *)v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        if ((v13 & 1) == 0) {
          return;
        }
      }
      else if (!v13)
      {
        return;
      }
    }
    SipRegistrationClient::performDeferredAction(this);
  }
}

void sub_1C546ADB4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::transactionTerminated(uint64_t a1, void *a2)
{
  if (*a2 == *(void *)(a1 + 2792))
  {
    uint64_t v2 = (void *)(a1 + 2792);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 2800);
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

uint64_t SipRegistrationClient::refreshRegistration(SipRegistrationClient *this)
{
  if (*((_DWORD *)this + 130) != 1)
  {
    uint64_t v10 = (unsigned int *)((char *)this + 16);
    uint64_t v11 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"registration refresh triggered while we're in client state ", 59);
    *(unsigned char *)(v11 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)&_MergedGlobals_15[3 * v10[126] + 12]);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
  {
    uint64_t v2 = *((void *)this + 45);
    uint64_t v3 = *(SipDialogManager **)(v2 + 176);
    int v4 = *(std::__shared_weak_count **)(v2 + 184);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int active = SipDialogManager::activeDialogCount(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (active)
    {
      uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
      uint64_t v7 = *(void **)(v6 + 8);
      uint64_t v8 = "found active emergency dialogs.  Renewing emergency registration.";
      uint64_t v9 = 65;
    }
    else
    {
      uint64_t v12 = *((void *)this + 45);
      int v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v12 + 16));
      LODWORD(v12) = SipTransactionLayer::activeTransactionCount(*(SipTransactionLayer **)(*(void *)(v12 + 8) + 152));
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (v12)
      {
        uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
        uint64_t v7 = *(void **)(v6 + 8);
        uint64_t v8 = "found active emergency transactions. Renewing emergency registration.";
        uint64_t v9 = 69;
      }
      else
      {
        uint64_t v14 = *((void *)this + 45);
        int v15 = *(std::__shared_weak_count **)(v14 + 16);
        if (v15)
        {
          uint64_t v16 = std::__shared_weak_count::lock(v15);
          if (v16) {
            uint64_t v17 = *(void *)(v14 + 8);
          }
          else {
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v16 = 0;
        }
        if (*(unsigned char *)(v17 + 176)
          && (uint64_t v18 = *(void *)(v17 + 4240), *(uint64_t *)(v18 + 4920) >= 1)
          && time(0) < *(void *)(v18 + 4920))
        {
          uint64_t v19 = *((void *)this + 45);
          uint64_t v20 = *(std::__shared_weak_count **)(v19 + 16);
          if (v20)
          {
            uint64_t v20 = std::__shared_weak_count::lock(v20);
            uint64_t v21 = v20;
            if (v20) {
              uint64_t v20 = *(std::__shared_weak_count **)(v19 + 8);
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v44 = (ImsPrefs *)SipStack::prefs((SipStack *)v20);
          RefreshRegistrationDuringECBMKey = (void **)ImsPrefs::getRefreshRegistrationDuringECBMKey(v44);
          int v22 = ImsPrefs::BOOLValue(v44, RefreshRegistrationDuringECBMKey);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        else
        {
          int v22 = 0;
        }
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
        uint64_t v7 = *(void **)(v6 + 8);
        if (!v22)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"no need to renew emergency registration", 39);
          int v23 = 0;
LABEL_30:
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          uint64_t result = 0;
          *(unsigned char *)(v6 + 17) = 0;
          if (!v23) {
            return result;
          }
          goto LABEL_31;
        }
        uint64_t v8 = "ECBM is active.  Renewing emergency registration.";
        uint64_t v9 = 49;
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    int v23 = 1;
    goto LABEL_30;
  }
LABEL_31:
  uint64_t v25 = *((void *)this + 454);
  if (v25 && ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 368))(v25) & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 2);
    uint64_t v34 = (char *)this + 16;
    uint64_t v36 = (*(uint64_t (**)(char *))(v35 + 64))(v34);
    (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"registration refresh triggered while we're being throttled by RegistrationPolicy", 80);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t result = 0;
    *(unsigned char *)(v36 + 17) = 0;
    return result;
  }
  if (SipRegistrationClient::shouldDeferRegistration(this)) {
    goto LABEL_34;
  }
  uint64_t v30 = *((void *)this + 45);
  BOOL v31 = *(std::__shared_weak_count **)(v30 + 16);
  if (!v31)
  {
    if (MEMORY[0x1088]) {
      goto LABEL_55;
    }
    int v33 = 0;
    long long v37 = 0;
    goto LABEL_48;
  }
  BOOL v32 = std::__shared_weak_count::lock(v31);
  int v33 = v32;
  if (*(unsigned char *)(*(void *)(v30 + 8) + 4232))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    goto LABEL_55;
  }
  uint64_t v38 = *((void *)this + 45);
  long long v37 = *(std::__shared_weak_count **)(v38 + 16);
  if (!v37)
  {
LABEL_48:
    long long v39 = 0;
    goto LABEL_49;
  }
  long long v37 = std::__shared_weak_count::lock(v37);
  long long v39 = v37;
  if (v37) {
    long long v37 = *(std::__shared_weak_count **)(v38 + 8);
  }
LABEL_49:
  char v40 = (ImsPrefs *)SipStack::prefs((SipStack *)v37);
  DeferReRegOnConnectivityDisableKey = (void **)ImsPrefs::getDeferReRegOnConnectivityDisableKey(v40);
  int v42 = ImsPrefs::BOOLValue(v40, DeferReRegOnConnectivityDisableKey);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if ((v42 & 1) == 0)
    {
LABEL_55:
      std::string::operator=((std::string *)((char *)this + 3896), &SipRegistrationMetrics::kReasonRefresh);
      if (*((void *)this + 454))
      {
        uint64_t v43 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"refreshRegistration: setting to policy SipRegClientRegType::RefreshReg", 70);
        *(unsigned char *)(v43 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v43 + 17) = 0;
        *(_DWORD *)(*((void *)this + 454) + 2356) = 2;
      }
      SipRegistrationClient::sendInitialRequest(this);
    }
  }
  else if (!v42)
  {
    goto LABEL_55;
  }
LABEL_34:
  uint64_t v26 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"registration refresh triggered while we have no data connectivity -- deferring.", 79);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 26);
  v46[0] = *((void *)this + 25);
  if (!v27 || (long long v28 = std::__shared_weak_count::lock(v27), (v46[1] = v28) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v29 = v28;
  SipRegistrationDeferralManager::deferAction((uint64_t *)this + 497, (uint64_t)v46, (uint64_t)this + 1112, (unsigned __int8 *)&SipRegistrationMetrics::kReasonRefresh);
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  return 0;
}

void sub_1C546B5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::sendInitialRequest(SipRegistrationClient *this)
{
  int v37 = *((_DWORD *)this + 132);
  SipRegistrationMetrics::registrationAttemptStarted((uint64_t)this + 3800, &v37);
  if (*((unsigned char *)this + 2488))
  {
    uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"faking registration", 19);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    SipRegistrationClient::updateContact((SipRegistrationClient *)v45, (uint64_t)this, 0);
    ImsResult::~ImsResult((ImsResult *)v45);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    memset(v40, 0, sizeof(v40));
    SipContact::SipContact((uint64_t)v40, 0);
    SipUri::operator=((SipUri *)&v40[40], (uint64_t)this + 624);
    int v3 = *((_DWORD *)this + 287);
    *(_DWORD *)&v40[12] = 2;
    DWORD2(v41) = v3;
    DWORD2(v44) = *((_DWORD *)this + 284);
    *(_OWORD *)std::string __p = 0u;
    memset(v39, 0, sizeof(v39));
    int v4 = (std::__shared_weak_count *)*((void *)this + 26);
    uint64_t v47 = *((void *)this + 25);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        SipRegistrationActiveNotification::SipRegistrationActiveNotification(__p, &v47);
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  SipRegistrationClient::setClientState(this, 6u);
  uint64_t v5 = *((void *)this + 348);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 348) = 0;
  uint64_t v6 = *((void *)this + 454);
  if (v6 && *(unsigned char *)(v6 + 228))
  {
    uint64_t v7 = *(void *)(*((void *)this + 45) + 280);
    uint64_t v8 = *(void *)(v7 + 144);
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 152);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      uint64_t v10 = *(void *)(v8 + 48);
      if (!v10) {
        goto LABEL_16;
      }
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v10 + 56))(v40);
      memset((char *)v39 + 8, 0, 48);
      __p[0] = &unk_1F20B2680;
      __p[1] = &_bambiDomain;
      LODWORD(v39[0]) = 1073741832;
      uint64_t v11 = *(uint64_t **)&v40[8];
      int v12 = *(_DWORD *)&v40[16];
      ImsResult::~ImsResult((ImsResult *)__p);
      ImsResult::~ImsResult((ImsResult *)v40);
      if (v11 != &_bambiDomain) {
        goto LABEL_16;
      }
      if (v12 == 1073741832)
      {
        uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"keeping auth sync failure info in initial registration", 54);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
      }
      else
      {
LABEL_16:
        uint64_t v14 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"clearing auth info for initial registration", 43);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        SipAuthClient::clear(*(SipAuthClient **)(*((void *)this + 45) + 280));
      }
    }
    uint64_t v15 = *((void *)this + 57);
    if (v15)
    {
      uint64_t v16 = *((void *)this + 45);
      uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        if (v18) {
          uint64_t v19 = *(void *)(v16 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
      }
      if (*(char *)(v19 + 4183) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)(v19 + 4160), *(void *)(v19 + 4168));
      }
      else
      {
        uint64_t v20 = v19 + 4160;
        *(_OWORD *)char v40 = *(_OWORD *)v20;
        *(void *)&v40[16] = *(void *)(v20 + 16);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v15 + 80))(v15, v40);
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  uint64_t v21 = *((void *)this + 45);
  int v22 = *(std::__shared_weak_count **)(v21 + 16);
  if (v22)
  {
    int v22 = std::__shared_weak_count::lock(v22);
    int v23 = v22;
    if (v22) {
      int v22 = *(std::__shared_weak_count **)(v21 + 8);
    }
  }
  else
  {
    int v23 = 0;
  }
  long long v24 = (ImsPrefs *)SipStack::prefs((SipStack *)v22);
  uint64_t v25 = (void **)ImsPrefs::getResetCallIdOnInitialRegistrationKey(v24);
  char v26 = ImsPrefs::BOOLValue(v24, v25);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if ((v26 & 1) == 0) {
    goto LABEL_56;
  }
  uint64_t v27 = *(void *)(*((void *)this + 45) + 280);
  long long v28 = *(SipAuthInfo **)(v27 + 144);
  long long v29 = *(std::__shared_weak_count **)(v27 + 152);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v28 && SipAuthInfo::hasAuthSyncResponse(v28))
  {
    uint64_t v30 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"we have a pending Auth Sync response, not resetting Call-ID", 59);
    *(unsigned char *)(v30 + 17) = 0;
    BOOL v31 = (unsigned char *)(v30 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_52:
    int v34 = 0;
    goto LABEL_53;
  }
  if (SipUri::isValidUri((SipRegistrationClient *)((char *)this + 3216))
    && (SipUri::equals((SipRegistrationClient *)((char *)this + 3216), (SipRegistrationClient *)((char *)this + 2808), 1) & 1) == 0)
  {
    uint64_t v33 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"the current proxy has changed (", 31);
    *(unsigned char *)(v33 + 17) = 0;
    BOOL v31 = (unsigned char *)(v33 + 17);
    (*(void (**)(char *, uint64_t))(*((void *)this + 402) + 40))((char *)this + 3216, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" -> ", 4);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 351) + 40))((char *)this + 2808, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"). Resetting Call-ID", 20);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (*((_DWORD *)this + 132) == 2 && !*(unsigned char *)(*((void *)this + 454) + 228))
    {
      uint64_t v35 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"not an initial registration. Keeping Call-ID as is", 50);
      *(unsigned char *)(v35 + 17) = 0;
      BOOL v31 = (unsigned char *)(v35 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_52;
    }
    uint64_t v32 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"this is an initial registration. Resetting Call-ID", 50);
    *(unsigned char *)(v32 + 17) = 0;
    BOOL v31 = (unsigned char *)(v32 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  int v34 = 1;
LABEL_53:
  *BOOL v31 = 0;
  if (v29)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    if ((v34 & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v34) {
LABEL_55:
  }
    SipRegistrationClient::resetCallIdAndCseq(this, 1);
LABEL_56:
  uint64_t v46 = 0;
  memset(v45, 0, sizeof(v45));
  uint64_t v36 = *((void *)this + 45);
  std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v36 + 16));
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v36 + 8) + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void sub_1C546D134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 97) < 0) {
    operator delete(*(void **)(v43 - 120));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  SipUri::~SipUri((SipUri *)&a38);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::coalesceLazuliRegistrationRefresh(SipRegistrationClient *this)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 45);
  int v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (int v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    int v5 = *(unsigned __int8 *)(*(void *)(v2 + 8) + 2681);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (!v5) {
      return;
    }
  }
  else if (!MEMORY[0xA79])
  {
    return;
  }
  time_t v6 = time(0);
  uint64_t v7 = *((void *)this + 62);
  if (v7 < 1 || (uint64_t v8 = *((void *)this + 60), v9 = __OFSUB__(v8, v7), v10 = v8 - v7, (v10 < 0) ^ v9 | (v10 == 0))) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10 * *((unsigned int *)this + 291) / 100;
  }
  uint64_t v13 = *((void *)this + 25);
  int v12 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (char *)this + 16;
  uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Registration refresh is due at ", 31);
  *(unsigned char *)(v15 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 61), v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)", with cushion ", 15);
  *(unsigned char *)(v15 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(*((void *)this + 61) - v11), v15, v17);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v15 + 17) = 0;
  uint64_t v18 = *((void *)this + 61);
  if (v18 >= 1 && v6 >= v18 - v11)
  {
    uint64_t v19 = (*(uint64_t (**)(char *))(*(void *)v14 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v14 + 16))((char *)this + 16, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Coalescing Lazuli registration with IMS", 39);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    SipTimerContainer::cancelTimer((int8x8_t *)this + 27, (std::string *)&qword_1EBBDC128);
    SipTimerContainer::cancelTimer((int8x8_t *)this + 27, (std::string *)_MergedGlobals_15);
    if ((SipRegistrationClient::refreshRegistration(this) & 1) == 0)
    {
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = operator new(0x20uLL);
      *uint64_t v20 = &unk_1F20D0D18;
      v20[1] = this;
      v20[2] = v13;
      v20[3] = v12;
      v21[3] = v20;
      SipTimerContainer::startTimer((int8x8_t *)this + 27, (uint64_t)&qword_1EBBDC128);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v21);
    }
  }
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1C546D774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::handleHysteresisTimer(SipRegistrationClient *this)
{
  if (*((_DWORD *)this + 132) != 2) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 45);
  int v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (int v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    uint64_t v5 = *(void *)(v2 + 8) + 3160;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    uint64_t v5 = 3160;
  }
  if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)v5))
  {
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = (char *)this + 16;
    uint64_t v19 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
    (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Hysteresis timer fired while not on LTE network, ignoring.", 58);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v16 = 0;
    *(unsigned char *)(v19 + 17) = 0;
    return v16;
  }
  time_t v6 = (const void *)*((void *)this + 497);
  if (!v6) {
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  BOOL v9 = (char *)this + 16;
  uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"hysteresis timer fired with deferred action: ", 45);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, unsigned char *))(*(void *)v8 + 24))(&v27, v8);
  LoggableString::LoggableString(&__p, &v27);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (void *)((char *)this + 3976);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if ((v8[48] & 1) == 0)
  {
    uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 16, v12);
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = "new registration wasn't for voice";
    uint64_t v15 = 33;
    goto LABEL_23;
  }
  uint64_t v20 = *((void *)this + 45);
  uint64_t v21 = *(std::__shared_weak_count **)(v20 + 16);
  if (v21 && (int v22 = std::__shared_weak_count::lock(v21)) != 0)
  {
    uint64_t v23 = *(void *)(v20 + 8) + 2928;
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  else
  {
    uint64_t v23 = 2928;
  }
  int isVoiceRegistrationBarred = BambiAccessBarring::isVoiceRegistrationBarred((BambiAccessBarring *)v23);
  uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 16, v12);
  uint64_t v13 = *(void **)(v12 + 8);
  if (isVoiceRegistrationBarred)
  {
    uint64_t v14 = "hysteresis timer fired while Access Barring is in effect";
    uint64_t v15 = 56;
LABEL_23:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v25 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"ignoring deferred registration action and telling delegate about our current registration", 89);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    SipRegistrationClient::notifyDelegateOfCurrentRegistration(this);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"performing deferred registration on hysteresis timeout", 54);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t v16 = 1;
  SipRegistrationDeferralManager::perform(v11, 1);
  return v16;
}

void sub_1C546DCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::notifyDelegateOfCurrentRegistration(SipRegistrationClient *this)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  SipContact::SipContact((uint64_t)v13, 0);
  SipUri::operator=((SipUri *)((char *)&v13[2] + 8), (uint64_t)this + 624);
  int v2 = *((_DWORD *)this + 276);
  HIDWORD(v13[0]) = 2;
  DWORD2(v17) = v2;
  time_t v3 = time(0);
  uint64_t v4 = *((void *)this + 59);
  if (v4 >= v3) {
    int v5 = v4 - v3;
  }
  else {
    int v5 = 0;
  }
  DWORD2(v14) = v5;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  time_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v7 = *((void *)this + 25);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      SipRegistrationActiveNotification::SipRegistrationActiveNotification(v9, &v7);
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_1C546DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void SipRegistrationClient::handleTimer(SipRegistrationClient *this, uint64_t a2)
{
  int v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = qword_1EBBDC118;
  if (byte_1EBBDC127 >= 0) {
    uint64_t v7 = byte_1EBBDC127;
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (byte_1EBBDC127 >= 0) {
    uint64_t v8 = _MergedGlobals_15;
  }
  else {
    uint64_t v8 = (uint64_t *)_MergedGlobals_15[0];
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v8, v5)) {
      goto LABEL_17;
    }
LABEL_37:
    uint64_t v18 = *((void *)this + 45);
    uint64_t v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19 && (uint64_t v20 = std::__shared_weak_count::lock(v19)) != 0)
    {
      int v21 = *(unsigned __int8 *)(*(void *)(v18 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v21) {
        goto LABEL_40;
      }
    }
    else if (!MEMORY[0xA79])
    {
LABEL_40:
      uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Check if we need to coalesce registration refresh on other stacks", 65);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      uint64_t v23 = *((void *)this + 45);
      long long v24 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v23 + 16));
      uint64_t v25 = *(BambiClient **)(*(void *)(v23 + 8) + 136);
      uint64_t v26 = *((void *)this + 45);
      std::string v27 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v26 + 16));
      BambiClient::coalesceLazuliRegistrationRefresh(v25, *(_DWORD *)(*(void *)(v26 + 8) + 4100));
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      shouldDeferRegistration = (capabilities::radio *)SipRegistrationClient::shouldDeferRegistration(this);
      if (shouldDeferRegistration)
      {
        uint64_t v29 = *((void *)this + 45);
        uint64_t v30 = *(std::__shared_weak_count **)(v29 + 16);
        if (v30)
        {
          uint64_t v30 = std::__shared_weak_count::lock(v30);
          BOOL v31 = v30;
          if (v30) {
            uint64_t v30 = *(std::__shared_weak_count **)(v29 + 8);
          }
        }
        else
        {
          BOOL v31 = 0;
        }
        uint64_t v65 = (ImsPrefs *)SipStack::prefs((SipStack *)v30);
        LimitedConnectivityHysteresisFromRegistrationKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v65);
        shouldDeferRegistration = (capabilities::radio *)ImsPrefs::BOOLValue(v65, LimitedConnectivityHysteresisFromRegistrationKey);
        char v67 = (char)shouldDeferRegistration;
        if (v31)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (v67)
          {
LABEL_130:
            uint64_t v68 = *((void *)this + 45);
            long long v69 = *(std::__shared_weak_count **)(v68 + 16);
            if (v69)
            {
              long long v69 = std::__shared_weak_count::lock(v69);
              uint64_t v70 = v69;
              if (v69) {
                long long v69 = *(std::__shared_weak_count **)(v68 + 8);
              }
            }
            else
            {
              uint64_t v70 = 0;
            }
            SipStack::handleConnectivityHysteresisTimeout((SipStack *)v69);
            if (v70)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v70);
            }
            return;
          }
        }
        else if (shouldDeferRegistration)
        {
          goto LABEL_130;
        }
      }
      if (capabilities::radio::supportsRel16(shouldDeferRegistration))
      {
        uint64_t v71 = *((void *)this + 45);
        long long v72 = *(std::__shared_weak_count **)(v71 + 16);
        if (v72 && (int v73 = std::__shared_weak_count::lock(v72)) != 0)
        {
          int v74 = v73;
          BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(void *)(v71 + 8) + 3160));
          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
          if (!isNR) {
            goto LABEL_46;
          }
        }
        else if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC58))
        {
          goto LABEL_46;
        }
        uint64_t v76 = *((void *)this + 45);
        unsigned __int16 v77 = *(std::__shared_weak_count **)(v76 + 16);
        if (v77 && (int v78 = std::__shared_weak_count::lock(v77)) != 0)
        {
          uint64_t v79 = *(void *)(*(void *)(*(void *)(v76 + 8) + 136) + 240);
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        }
        else
        {
          uint64_t v79 = *(void *)(MEMORY[0x88] + 240);
        }
        if (!v79)
        {
          memset(&v99[1], 0, 48);
          v99[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v99[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v99[0].__r_.__value_.__r.__words[2]) = 1073741826;
          SipRegistrationClient::handleRegistrationError(this, v99, -1, 1, 0);
LABEL_160:
          uint64_t v48 = (ImsResult *)v99;
LABEL_161:
          ImsResult::~ImsResult(v48);
          return;
        }
        if (*(void *)(v79 + 8) && *(unsigned char *)(v79 + 72))
        {
          uint64_t v80 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v80);
          uint64_t v81 = (unsigned char *)ImsOutStream::operator<<(v80, "RefreshRegAccessCheck...");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v81[17] = 0;
          uint64_t v82 = *((void *)this + 45);
          uint64_t v83 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v82 + 16));
          uint64_t v84 = *(unsigned int *)(*(void *)(v82 + 8) + 4100);
          uint64_t v85 = *((void *)this + 45);
          char v86 = *(std::__shared_weak_count **)(v85 + 16);
          if (v86)
          {
            char v87 = std::__shared_weak_count::lock(v86);
            if (v87) {
              uint64_t v88 = *(void *)(v85 + 8);
            }
            else {
              uint64_t v88 = 0;
            }
          }
          else
          {
            uint64_t v88 = 0;
            char v87 = 0;
          }
          IMSNasDeviceClient::reportCallStatus(v79, v84, 0, 64, v88 + 3160, 1, 0);
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          SipRegistrationClient::setClientState(this, 3u);
          SipRegistrationClient::nasImsRegStart(this);
          uint64_t v91 = *((void *)this + 454);
          if (v91)
          {
            *(void *)(v91 + 408) = 0;
            *(void *)(v91 + 416) = 0;
          }
          return;
        }
        uint64_t v89 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v89);
        uint64_t v90 = (unsigned char *)ImsOutStream::operator<<(v89, "No Baseband for architecture or Baseband is currently not available: go straight to refreshRegistration");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v90[17] = 0;
      }
LABEL_46:
      SipRegistrationClient::refreshRegistration(this);
      return;
    }
    uint64_t v32 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Lazuli registration refresh", 27);
    *(unsigned char *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v32 + 17) = 0;
    goto LABEL_46;
  }
  if (!v4) {
    goto LABEL_37;
  }
  BOOL v9 = v2;
  uint64_t v10 = v4;
  while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v8)
  {
    BOOL v9 = (const void **)((char *)v9 + 1);
    uint64_t v8 = (uint64_t *)((char *)v8 + 1);
    if (!--v10) {
      goto LABEL_37;
    }
  }
LABEL_17:
  uint64_t v11 = qword_1EBBDC130;
  if (byte_1EBBDC13F >= 0) {
    uint64_t v11 = byte_1EBBDC13F;
  }
  if (v6 != v11) {
    goto LABEL_29;
  }
  if (byte_1EBBDC13F >= 0) {
    long long v12 = &qword_1EBBDC128;
  }
  else {
    long long v12 = (uint64_t *)qword_1EBBDC128;
  }
  if ((v4 & 0x80) != 0)
  {
    uint64_t v36 = *v2;
    if (memcmp(*v2, v12, v5))
    {
      if (v5 != 19)
      {
        if (v5 != 22) {
          goto LABEL_70;
        }
        goto LABEL_64;
      }
      goto LABEL_69;
    }
LABEL_59:
    LODWORD(v99[0].__r_.__value_.__l.__data_) = 0;
    SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)v99, 0);
    if (SipRegistrationClient::shouldDeferRegistration(this))
    {
      uint64_t v37 = *((void *)this + 45);
      uint64_t v38 = *(std::__shared_weak_count **)(v37 + 16);
      if (v38)
      {
        uint64_t v38 = std::__shared_weak_count::lock(v38);
        long long v39 = v38;
        if (v38) {
          uint64_t v38 = *(std::__shared_weak_count **)(v37 + 8);
        }
      }
      else
      {
        long long v39 = 0;
      }
      uint64_t v52 = (ImsPrefs *)SipStack::prefs((SipStack *)v38);
      long long v53 = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v52);
      int v54 = ImsPrefs::BOOLValue(v52, v53);
      char v55 = v54;
      if (v39)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        if (v55)
        {
LABEL_100:
          uint64_t v56 = *((void *)this + 45);
          long long v57 = *(std::__shared_weak_count **)(v56 + 16);
          if (v57)
          {
            long long v57 = std::__shared_weak_count::lock(v57);
            uint64_t v58 = v57;
            if (v57) {
              long long v57 = *(std::__shared_weak_count **)(v56 + 8);
            }
          }
          else
          {
            uint64_t v58 = 0;
          }
          SipStack::handleConnectivityHysteresisTimeout((SipStack *)v57);
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          return;
        }
      }
      else if (v54)
      {
        goto LABEL_100;
      }
    }
    uint64_t v59 = *((void *)this + 454);
    if (v59 && (*(unsigned int (**)(uint64_t))(*(void *)v59 + 464))(v59)) {
      (*(void (**)(SipRegistrationClient *, uint64_t, uint64_t, void))(*(void *)this + 168))(this, 22, -1, 0);
    }
    else {
      (*(void (**)(SipRegistrationClient *, void, void, void))(*(void *)this + 168))(this, 0, 0, 0);
    }
    return;
  }
  if (!v4) {
    goto LABEL_59;
  }
  uint64_t v13 = v2;
  uint64_t v14 = v4;
  while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v12)
  {
    uint64_t v13 = (const void **)((char *)v13 + 1);
    long long v12 = (uint64_t *)((char *)v12 + 1);
    if (!--v14) {
      goto LABEL_59;
    }
  }
LABEL_29:
  if (v6 != 19)
  {
    if (v6 != 22) {
      goto LABEL_70;
    }
    if ((v4 & 0x80) == 0)
    {
      if (v4)
      {
        long long v15 = "IPSecFailureRetryTimer";
        long long v16 = v2;
        uint64_t v17 = v4;
        while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
        {
          long long v16 = (const void **)((char *)v16 + 1);
          ++v15;
          if (!--v17) {
            goto LABEL_65;
          }
        }
        goto LABEL_70;
      }
LABEL_65:
      char v40 = *(void (**)(SipRegistrationClient *))(*(void *)this + 128);
      v40(this);
      return;
    }
    uint64_t v36 = *v2;
LABEL_64:
    if (memcmp(v36, "IPSecFailureRetryTimer", v5)) {
      goto LABEL_70;
    }
    goto LABEL_65;
  }
  if ((v4 & 0x80) != 0)
  {
    uint64_t v36 = *v2;
LABEL_69:
    if (memcmp(v36, "TransportRetryTimer", v5)) {
      goto LABEL_70;
    }
LABEL_89:
    if (*((_DWORD *)this + 130) != 1) {
      return;
    }
    SipRegistrationClient::initializeTransport((SipRegistrationClient *)v98, (uint64_t)this);
    uint64_t v48 = (ImsResult *)v98;
    goto LABEL_161;
  }
  if (!v4) {
    goto LABEL_89;
  }
  uint64_t v33 = "TransportRetryTimer";
  int v34 = v2;
  uint64_t v35 = v4;
  while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v33)
  {
    int v34 = (const void **)((char *)v34 + 1);
    ++v33;
    if (!--v35) {
      goto LABEL_89;
    }
  }
LABEL_70:
  uint64_t v41 = qword_1EBBDC148;
  if (byte_1EBBDC157 >= 0) {
    uint64_t v41 = byte_1EBBDC157;
  }
  if (v6 != v41) {
    goto LABEL_82;
  }
  if (byte_1EBBDC157 >= 0) {
    long long v42 = &qword_1EBBDC140;
  }
  else {
    long long v42 = (uint64_t *)qword_1EBBDC140;
  }
  if ((v4 & 0x80) != 0)
  {
    long long v49 = *v2;
    if (memcmp(*v2, v42, v5))
    {
      if (v5 != 18) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
LABEL_94:
    uint64_t v50 = (*(uint64_t (**)(char *, uint64_t *))(*((void *)this + 2) + 64))((char *)this + 16, v42);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"faking registration termination", 31);
    *(unsigned char *)(v50 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v50 + 17) = 0;
    uint64_t v51 = *(void (**)(SipRegistrationClient *, uint64_t, void, void))(*(void *)this + 168);
    v51(this, 3, 0, 0);
    return;
  }
  if (!v4) {
    goto LABEL_94;
  }
  uint64_t v43 = v2;
  uint64_t v44 = v4;
  while (*(unsigned __int8 *)v43 == *(unsigned __int8 *)v42)
  {
    uint64_t v43 = (const void **)((char *)v43 + 1);
    long long v42 = (uint64_t *)((char *)v42 + 1);
    if (!--v44) {
      goto LABEL_94;
    }
  }
LABEL_82:
  if (v6 != 18) {
    goto LABEL_110;
  }
  if ((v4 & 0x80) != 0)
  {
    long long v49 = *v2;
LABEL_109:
    if (memcmp(v49, &kRegHysteresisTimer, v5)) {
      goto LABEL_110;
    }
LABEL_121:
    SipRegistrationClient::handleHysteresisTimer(this);
    return;
  }
  if (!v4) {
    goto LABEL_121;
  }
  unsigned int v45 = &kRegHysteresisTimer;
  uint64_t v46 = v2;
  uint64_t v47 = v4;
  while (*(unsigned __int8 *)v46 == v45->__r_.__value_.__s.__data_[0])
  {
    uint64_t v46 = (const void **)((char *)v46 + 1);
    unsigned int v45 = (std::string *)((char *)v45 + 1);
    if (!--v47) {
      goto LABEL_121;
    }
  }
LABEL_110:
  uint64_t v60 = qword_1EBBDC160;
  if (byte_1EBBDC16F >= 0) {
    uint64_t v60 = byte_1EBBDC16F;
  }
  if (v6 != v60) {
    return;
  }
  if (byte_1EBBDC16F >= 0) {
    uint64_t v61 = &qword_1EBBDC158;
  }
  else {
    uint64_t v61 = (uint64_t *)qword_1EBBDC158;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v61, v5)) {
      return;
    }
    goto LABEL_125;
  }
  if (!v4)
  {
LABEL_125:
    if (*((_DWORD *)this + 130) != 8) {
      return;
    }
    memset(v99, 0, sizeof(v99));
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v92 = &unk_1F20B2680;
    uint64_t v93 = (uint64_t)&_bambiDomain;
    LODWORD(v94) = 1073741830;
    uint64_t v62 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)&v92, "timed out waiting for nw path evaluation");
    ImsResult::ImsResult((ImsResult *)v99, v62);
    ImsResult::~ImsResult((ImsResult *)&v92);
    uint64_t v63 = (unsigned char *)(*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, unsigned char *))(*((void *)this + 2) + 16))((char *)this + 16, v63);
    (*(void (**)(std::string *, unsigned char *))(v99[0].__r_.__value_.__r.__words[0] + 16))(v99, v63);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v63[17] = 0;
    long long v64 = *((void *)this + 512);
    uint64_t v92 = (void *)MEMORY[0x1E4F143A8];
    uint64_t v93 = 0x40000000;
    uint64_t v94 = ___ZN21ImsNetworkPathManager5abortEP22ImsNetworkPathDelegate_block_invoke;
    *(void *)&long long v95 = &__block_descriptor_tmp_18_2;
    *((void *)&v95 + 1) = (char *)this + 4064;
    *(void *)&long long v96 = (char *)this + 184;
    dispatch_async(v64, &v92);
    SipRegistrationClient::handleRegistrationError(this, v99, -1, 1, 0);
    SipRegistrationClient::setClientState(this, 1u);
    goto LABEL_160;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v61)
  {
    int v2 = (const void **)((char *)v2 + 1);
    uint64_t v61 = (uint64_t *)((char *)v61 + 1);
    if (!--v4) {
      goto LABEL_125;
    }
  }
}

void sub_1C546ECCC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::handleTimer(uint64_t a1, uint64_t a2)
{
}

void SipRegistrationClient::subscribeToRegEvents(SipRegistrationClient *this)
{
  if (!*((unsigned char *)this + 1145))
  {
    long long v15 = (char *)this + 16;
    uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v8);
    BOOL v9 = *(void **)(v8 + 8);
    uint64_t v10 = "registration subscription is disabled";
    uint64_t v16 = 37;
LABEL_18:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v16);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    return;
  }
  uint64_t v2 = *((void *)this + 45);
  time_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (uint64_t v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    int v5 = *(_DWORD *)(*(void *)(v2 + 8) + 200);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (v5 != 2)
    {
LABEL_5:
      uint64_t v7 = *((void *)this + 2);
      uint64_t v6 = (char *)this + 16;
      uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
      (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
      BOOL v9 = *(void **)(v8 + 8);
      uint64_t v10 = "stack is not initialized.  Skipping reg subscription.";
LABEL_17:
      uint64_t v16 = 53;
      goto LABEL_18;
    }
  }
  else if (MEMORY[0xC8] != 2)
  {
    goto LABEL_5;
  }
  if (*((_DWORD *)this + 132) != 2)
  {
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = (char *)this + 16;
    uint64_t v8 = (*(uint64_t (**)(char *))(v18 + 64))(v17);
    (*(void (**)(char *, uint64_t))(*(void *)v17 + 16))(v17, v8);
    BOOL v9 = *(void **)(v8 + 8);
    uint64_t v10 = "we aren't registered. Not auto-renewing subscription.";
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 130) != 1)
  {
    uint64_t v20 = *((void *)this + 2);
    uint64_t v19 = (char *)this + 16;
    uint64_t v8 = (*(uint64_t (**)(char *))(v20 + 64))(v19);
    (*(void (**)(char *, uint64_t))(*(void *)v19 + 16))(v19, v8);
    BOOL v9 = *(void **)(v8 + 8);
    uint64_t v10 = "we're in the middle of a registration. Not auto-renewing subscription.";
    uint64_t v16 = 70;
    goto LABEL_18;
  }
  uint64_t v11 = *((void *)this + 58);
  if (v11)
  {
    if ((SipUri::equals((SipUri *)(v11 + 56), (SipRegistrationClient *)((char *)this + 2808), 1) & 1) == 0)
    {
      uint64_t v21 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"proxy changed - terminating old reg subscription and starting a new one", 71);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v21 + 17) = 0;
LABEL_29:
      SipRegistrationClient::terminateRegEvents(this);
      goto LABEL_30;
    }
    if (!*(_DWORD *)(*((void *)this + 454) + 224))
    {
      uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v22);
      uint64_t v23 = "initial registration - terminating old reg subscription and starting a new one";
LABEL_28:
      std::string v27 = (unsigned char *)ImsOutStream::operator<<(v22, v23);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v27[17] = 0;
      goto LABEL_29;
    }
    uint64_t v12 = *((void *)this + 45);
    uint64_t v13 = *(std::__shared_weak_count **)(v12 + 16);
    if (v13)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v13 = *(std::__shared_weak_count **)(v12 + 8);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v24 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
    NewSubscriptionOnReRegistrationKey = (void **)ImsPrefs::getNewSubscriptionOnReRegistrationKey(v24);
    int v26 = ImsPrefs::BOOLValue(v24, NewSubscriptionOnReRegistrationKey);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v26)
    {
      uint64_t v22 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v22);
      uint64_t v23 = "terminating old reg subscription and starting a new one";
      goto LABEL_28;
    }
    int v37 = *((unsigned __int8 *)this + 2338);
    uint64_t v38 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v38);
    if (!v37)
    {
      long long v49 = (unsigned char *)ImsOutStream::operator<<(v38, "subscribeToRegEvents: already have an active subscription");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v49[17] = 0;
      return;
    }
    long long v39 = (unsigned char *)ImsOutStream::operator<<(v38, "re-subscribe on re-registration enabled");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v39[17] = 0;
  }
LABEL_30:
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
  {
    uint64_t v29 = *((void *)this + 2);
    long long v28 = (char *)this + 16;
    uint64_t v8 = (*(uint64_t (**)(char *))(v29 + 64))(v28);
    (*(void (**)(char *, uint64_t))(*(void *)v28 + 16))(v28, v8);
    BOOL v9 = *(void **)(v8 + 8);
    uint64_t v10 = "skipping reg event subscription for emergency registration";
    uint64_t v16 = 58;
    goto LABEL_18;
  }
  if (SipRegistrationClient::shouldDeferRegistration(this))
  {
    uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v30 || (BOOL v31 = std::__shared_weak_count::lock(v30)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v32 = v31;
    SipRegistrationDeferralManager::deferAction((const void **)this + 497);
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    return;
  }
  int v33 = *((_DWORD *)this + 288);
  if (v33)
  {
    uint64_t v34 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v34);
    uint64_t v35 = ImsOutStream::operator<<(v34, "using subscription expiration ");
    std::ostream::operator<<();
    *(unsigned char *)(v35 + 17) = 0;
    uint64_t v36 = " from config";
  }
  else
  {
    time_t v40 = *((void *)this + 59);
    time_t v41 = time(0);
    if (v40 <= v41 + 161)
    {
      uint64_t v48 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v48);
      uint64_t v43 = (unsigned char *)ImsOutStream::operator<<(v48, "using default subscription expiration");
      int v33 = 0;
      goto LABEL_45;
    }
    int v33 = v40 - v41 + 161;
    uint64_t v42 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v42);
    uint64_t v35 = ImsOutStream::operator<<(v42, "calculated subscription expiration ");
    std::ostream::operator<<();
    *(unsigned char *)(v35 + 17) = 0;
    uint64_t v36 = " from registration expiration";
  }
  uint64_t v43 = (unsigned char *)ImsOutStream::operator<<(v35, v36);
LABEL_45:
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v43[17] = 0;
  uint64_t v44 = (SipRegistrationEventPackage *)*((void *)this + 58);
  if (!v44) {
    operator new();
  }
  if (!SipRegistrationEventPackage::subscribe(v44, v33))
  {
    uint64_t v45 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 48))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v45);
    uint64_t v46 = (unsigned char *)ImsOutStream::operator<<(v45, "unable to subscribe to reg events");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v46[17] = 0;
    uint64_t v47 = *((void *)this + 58);
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    }
    *((void *)this + 58) = 0;
  }
}

void sub_1C546F748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  MEMORY[0x1C878E320](v1, 0x10B3C40CA5C5AE7);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::subscribeToRegEvents(SipRegistrationClient *this)
{
}

uint64_t ___ZN21SipRegistrationClient24unsubscribeFromRegEventsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 32))();
}

uint64_t ___ZN21SipRegistrationClient18terminateRegEventsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 40))();
}

uint64_t SipRegistrationClient::regEventSubscriptionFailed(SipRegistrationClient *this, SipRegistrationEventPackage *a2, uint64_t **a3)
{
  if (*((SipRegistrationEventPackage **)this + 58) != a2)
  {
    int v5 = (char *)this + 16;
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ignoring subscriptionFailed for unknown subscription", 52);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"registration event subscription failed", 38);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  *((void *)this + 58) = 0;
  if (a3[1] == &SipResultDomain::_domain && *((_DWORD *)a3 + 4) == 489)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"received 489 response to SUBSCRIBE.  Disabling registration subscription.", 73);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    *((unsigned char *)this + 1145) = 0;
  }
  SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_191);
  BOOL v9 = *(uint64_t (**)(void))(**((void **)this + 454) + 400);
  return v9();
}

uint64_t ___ZN21SipRegistrationClient26regEventSubscriptionFailedEP27SipRegistrationEventPackageR9ImsResultj_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 16))();
}

uint64_t ___ZN21SipRegistrationClient27regEventSubscriptionSuccessEP27SipRegistrationEventPackage_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 8))();
}

void SipRegistrationClient::regEventSubscriptionTerminated(SipRegistrationClient *this, SipRegistrationEventPackage *a2, int a3)
{
  uint64_t v6 = (char *)this + 16;
  uint64_t v7 = (SipRegistrationEventPackage *)*((void *)this + 58);
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
  BOOL v9 = *(void **)(v8 + 8);
  if (v7 == a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"registration event subscription terminated", 42);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    *((void *)this + 58) = 0;
    if (*((_DWORD *)this + 132) == 2)
    {
      if (*((_DWORD *)this + 130) == 1)
      {
        SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_202);
        if (a3 && *((unsigned char *)this + 2337))
        {
          uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))(v6);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))(v6, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"assuming our registration was terminated as well", 48);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          uint64_t v11 = *(void (**)(SipRegistrationClient *, uint64_t, void, void))(*(void *)this + 168);
          v11(this, 1, 0, 0);
        }
        else if (*((unsigned char *)this + 608))
        {
          uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))(v6);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))(v6, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"auto-renewing registration event subscription", 45);
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
          uint64_t v16 = *(void (**)(SipRegistrationClient *))(*(void *)this + 184);
          v16(this);
        }
      }
      else
      {
        uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))(v6);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))(v6, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"we're in the middle of a ", 25);
        *(unsigned char *)(v13 + 17) = 0;
        if (*((unsigned char *)this + 3648)) {
          uint64_t v14 = "de";
        }
        else {
          uint64_t v14 = "";
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v14, 2 * *((unsigned __int8 *)this + 3648));
        *(unsigned char *)(v13 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"registration. Not auto-renewing subscription.", 45);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
      }
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v6 + 64))(v6);
      (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"we aren't registered. Not auto-renewing subscription.", 53);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v12 + 17) = 0;
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ignoring subscriptionTerminated for unknown subscription", 56);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
}

uint64_t ___ZN21SipRegistrationClient30regEventSubscriptionTerminatedEP27SipRegistrationEventPackageb_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 24))();
}

void SipRegistrationClient::updateServiceMask(uint64_t a1, int a2, int a3, std::string *a4, int a5)
{
  uint64_t v10 = a1 + 16;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
  uint64_t v12 = *(void **)(v11 + 8);
  if (!a2 && (a3 & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"updateServiceMask: new mask is 0. Resending current state to delegate.", 70);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    SipRegistrationClient::notifyDelegateOfCurrentRegistration((SipRegistrationClient *)a1);
  }
  if (!a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"not reregistering, but updating service mask from (", 51);
    *(unsigned char *)(v11 + 17) = 0;
    int v15 = *(_DWORD *)(a1 + 1136);
    std::string::basic_string[abi:ne180100]<0>(&v46, ",");
    BambiServices::namesForServiceMask(v15, v22);
    LoggableString::LoggableString((std::string *)__p, (const std::string *)v22);
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)") to (", 6);
    *(unsigned char *)(v11 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v36, ",");
    BambiServices::namesForServiceMask(a2, &v37);
    LoggableString::LoggableString(&v38, &v37);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v40) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(a1 + 1136) = a2;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    memset(v41, 0, sizeof(v41));
    *(_OWORD *)std::string __p = 0u;
    long long v40 = 0u;
    SipContact::SipContact((uint64_t)__p, 0);
    SipUri::operator=((SipUri *)((char *)v41 + 8), a1 + 624);
    HIDWORD(__p[1]) = 2;
    DWORD2(v45) = a2;
    time_t v16 = time(0);
    uint64_t v17 = *(void *)(a1 + 472);
    if (v17 >= v16) {
      int v18 = v17 - v16;
    }
    else {
      int v18 = 0;
    }
    DWORD2(v42) = v18;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    *(_OWORD *)BOOL v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    long long v23 = 0u;
    uint64_t v19 = *(std::__shared_weak_count **)(a1 + 208);
    uint64_t v20 = *(void *)(a1 + 200);
    if (v19)
    {
      if (std::__shared_weak_count::lock(v19)) {
        SipRegistrationActiveNotification::SipRegistrationActiveNotification(v22, &v20);
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"reregistering for services (", 28);
  *(unsigned char *)(v11 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v46, ",");
  BambiServices::namesForServiceMask(a2, v22);
  LoggableString::LoggableString((std::string *)__p, (const std::string *)v22);
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SBYTE7(v40) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v23) < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (a2) {
      goto LABEL_13;
    }
LABEL_47:
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 168))(a1, 3, 0, 0);
    LODWORD(__p[0]) = 0;
    SipRegistrationClient::setRegistrationState(a1, (int *)__p, 0);
    return;
  }
  if (!a2) {
    goto LABEL_47;
  }
LABEL_13:
  bzero(__p, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)__p, (const SipRegistrationConfig *)(a1 + 1112));
  if (a5)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"updating configured services mask from (", 40);
    *(unsigned char *)(v13 + 17) = 0;
    int v14 = *(_DWORD *)(a1 + 1136);
    std::string::basic_string[abi:ne180100]<0>(&v38, ",");
    BambiServices::namesForServiceMask(v14, &v46);
    LoggableString::LoggableString((std::string *)v22, &v46);
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)") to (", 6);
    *(unsigned char *)(v13 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v34, ",");
    BambiServices::namesForServiceMask(a2, &v36);
    LoggableString::LoggableString(&v37, &v36);
    (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (SBYTE7(v23) < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    DWORD2(v40) = a2;
  }
  SipRegistrationClient::registerWithConfig(a1, (uint64_t)__p, a4, 0);
  SipRegistrationConfig::~SipRegistrationConfig(__p);
}

void sub_1C54707E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (*(char *)(v59 - 65) < 0) {
    operator delete(*(void **)(v59 - 88));
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  SipRegistrationConfig::~SipRegistrationConfig(&a59);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleAccessCheck(SipRegistrationClient *this, const ImsResult *a2, uint64_t a3)
{
  uint64_t v6 = (_DWORD *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleAccessCheck (barringDurationInSeconds=", 44);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)") ...", 5);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = (capabilities::radio *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if ((v6[126] - 2) >= 3)
  {
    uint64_t v14 = (*(uint64_t (**)(_DWORD *))(*((void *)this + 2) + 48))(v6);
    (*(void (**)(_DWORD *, uint64_t))(*((void *)this + 2) + 16))(v6, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"access check response triggered from unexpected state ", 54);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 32))(v14, &_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  else
  {
    if (capabilities::radio::supportsRel16(v8)
      && (int v9 = (*(uint64_t (**)(void, void))(**((void **)a2 + 1) + 24))(*((void *)a2 + 1), *((unsigned int *)a2 + 4)), a3)&& v9&& (v10 = *((void *)this + 454)) != 0)
    {
      time_t v11 = time(0);
      *(void *)(v10 + 408) = a3;
      *(void *)(v10 + 416) = v11;
      uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 454) + 304))();
      uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*((void *)this + 2) + 64))(v6);
      (*(void (**)(_DWORD *, uint64_t))(*((void *)this + 2) + 16))(v6, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"MAV: updated secondsUntilNextRetry to ", 38);
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 64))(v6);
      (*(void (**)(_DWORD *, uint64_t))(*(void *)v6 + 16))(v6, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Neither r16MAV nor INT: set secondsUntilNextRetry to ", 53);
      uint64_t v12 = -1;
    }
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if ((*(unsigned int (**)(void, void))(**((void **)a2 + 1) + 24))(*((void *)a2 + 1), *((unsigned int *)a2 + 4)))
    {
      SipRegistrationClient::handleRegistrationError(this, (const std::string *)a2, v12, 1, 1);
    }
    else
    {
      int v15 = *((_DWORD *)this + 130);
      switch(v15)
      {
        case 4:
          SipRegistrationClient::setClientState(this, 1u);
          SipRegistrationClient::internalRetryRegistration((uint64_t)this);
          break;
        case 3:
          SipRegistrationClient::setClientState(this, 1u);
          SipRegistrationClient::refreshRegistration(this);
          break;
        case 2:
          uint64_t v20 = 0;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          SipRegistrationClient::initializeTransport((SipRegistrationClient *)&v16, (uint64_t)this);
          if ((*(unsigned int (**)(void, void))(**((void **)&v16 + 1) + 24))(*((void *)&v16 + 1), v17))
          {
            SipRegistrationClient::handleRegistrationError(this, (const std::string *)&v16, -1, 1, 0);
          }
          ImsResult::~ImsResult((ImsResult *)&v16);
          break;
      }
    }
  }
}

void sub_1C5470EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipRegistrationClient::handleAccessCongested(SipRegistrationClient *this, uint64_t a2)
{
  if (capabilities::radio::supportsRel16(this))
  {
    uint64_t v4 = (char *)this + 16;
    unsigned int v5 = *((_DWORD *)this + 130) - 5;
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
    uint64_t v7 = *(void **)(v6 + 8);
    if (v5 >= 5)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"handleAccessCongested: current state is ", 40);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, &_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": Indication ignored.", 21);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"handleAccessCongested (congestionDurationInSeconds=", 51);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)") while in state ", 17);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, &_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" ...", 4);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(void, uint64_t))(**((void **)this + 349) + 32))(*((void *)this + 349), 7);
      if (a2 && (uint64_t v8 = *((void *)this + 454)) != 0)
      {
        time_t v9 = time(0);
        *(void *)(v8 + 408) = a2;
        *(void *)(v8 + 416) = v9;
        uint64_t v10 = *((void *)this + 454);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v16.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v16.__r_.__value_.__r.__words[2]) = 0x40000000;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 304))();
        ImsResult::~ImsResult((ImsResult *)&v16);
        uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 16, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"updated secondsUntilNextRetry to ", 33);
        *(unsigned char *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
      }
      else
      {
        uint64_t v11 = -1;
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v16.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v16.__r_.__value_.__r.__words[2]) = 0x40000000;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      SipRegistrationClient::handleRegistrationError(this, &v16, v11, 1, 0);
      ImsResult::~ImsResult((ImsResult *)&v16);
    }
  }
  else
  {
    uint64_t v14 = *((void *)this + 2);
    uint64_t v13 = (char *)this + 16;
    uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 64))(v13);
    (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handleAccessCongested: not a Rel16CapableMavRadio. Indication ignored.", 70);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
  }
}

void sub_1C5471390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

SipRegistrationPolicy *SipRegistrationClient::handleBarringAccessAlleviated(SipRegistrationClient *this)
{
  uint64_t v2 = (char *)this + 16;
  int v3 = *((_DWORD *)this + 130);
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v4);
  unsigned int v5 = *(void **)(v4 + 8);
  if (v3 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"handleBarringAccessAlleviated...", 32);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t result = (SipRegistrationPolicy *)*((void *)this + 454);
    if (result)
    {
      return (SipRegistrationPolicy *)SipRegistrationPolicy::handleBarringAccessAlleviated(result);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"handleBarringAccessAlleviated: current state is ", 48);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": Indication ignored.", 21);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t result = (SipRegistrationPolicy *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
  }
  return result;
}

void SipRegistrationClient::transportInitializedToProxy(SipRegistrationClient *this, const SipUri *a2, uint64_t **a3)
{
  if ((*(unsigned int (**)(uint64_t *, void))(*a3[1] + 24))(a3[1], *((unsigned int *)a3 + 4)))
  {
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"unable to initialize transport: ", 32);
    *(unsigned char *)(v6 + 17) = 0;
    ((void (*)(uint64_t **, uint64_t))(*a3)[2])(a3, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    v19[0] = &unk_1F20B2680;
    v19[1] = &_bambiDomain;
    int v20 = 1073741842;
    if (a3[1] != &_bambiDomain)
    {
      ImsResult::~ImsResult((ImsResult *)v19);
LABEL_18:
      uint64_t v15 = SipSimpleBackoffTimer::scheduleRetry((SipRegistrationClient *)((char *)this + 3656));
      std::string v16 = this;
      uint64_t v17 = (const std::string *)a3;
LABEL_19:
      SipRegistrationClient::handleRegistrationError(v16, v17, v15, 1, 0);
      return;
    }
    int v9 = *((_DWORD *)a3 + 4);
    ImsResult::~ImsResult((ImsResult *)v19);
    if (v9 != 1073741842) {
      goto LABEL_18;
    }
    uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"A network error occured while trying to initialize transport layer.  We will not retry registration.", 100);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = *((void *)this + 45);
    uint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (uint64_t v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      int v14 = *(unsigned __int8 *)(*(void *)(v11 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (!v14) {
        goto LABEL_22;
      }
    }
    else if (!MEMORY[0xA79])
    {
LABEL_22:
      std::string v16 = this;
      uint64_t v17 = (const std::string *)a3;
      uint64_t v15 = -1;
      goto LABEL_19;
    }
    uint64_t v18 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Skipping to next proxy for lazuli stack.", 40);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 454) + 504))();
    goto LABEL_22;
  }
  (*(void (**)(void, const SipUri *))(**((void **)this + 454) + 488))(*((void *)this + 454), a2);
  SipUri::operator=((SipRegistrationClient *)((char *)this + 2808), (uint64_t)a2);
  uint64_t v7 = (int8x8_t *)*((void *)this + 458);
  if (v7) {
    SipTimerContainer::cancelTimer(v7, (std::string *)((char *)this + 3680));
  }
  *((_DWORD *)this + 918) = 0;
  if (*((_DWORD *)this + 130) == 5)
  {
    SipRegistrationClient::sendInitialRequest(this);
  }
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 48))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"transport initialize callback triggered from unexpected state ", 62);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 32))(v8, &_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  SipRegistrationClient::setClientState(this, 1u);
}

void non-virtual thunk to'SipRegistrationClient::transportInitializedToProxy(SipRegistrationClient *this, const SipUri *a2, uint64_t **a3)
{
}

uint64_t ___ZN21SipRegistrationClient10deregisterEv_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 48))();
}

void SipRegistrationClient::sendRequest(SipRegistrationClient *this, uint64_t a2)
{
  if (!*(void *)(a2 + 2784))
  {
    memset(&v27[1], 0, 48);
    v27[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v27[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v27[0].__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v7 = (ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v27, "no REGISTER request to send");
    uint64_t v8 = ImsLogContainer::logResult((ImsLogContainer *)(a2 + 16), v7);
    ImsResult::ImsResult(this, (const std::string *)v8);
    goto LABEL_34;
  }
  if (*(_DWORD *)(a2 + 520) == 9 && (uint64_t v4 = *(void *)(a2 + 504)) != 0) {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  }
  else {
    int v5 = 0;
  }
  memset(v27, 0, sizeof(v27));
  SipRegistrationClient::updateContact((SipRegistrationClient *)v27, a2, v5);
  if ((*(unsigned int (**)(std::string::size_type, void))(*(void *)v27[0].__r_.__value_.__l.__size_
                                                                      + 24))(v27[0].__r_.__value_.__l.__size_, LODWORD(v27[0].__r_.__value_.__r.__words[2])))
  {
    uint64_t v6 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)(a2 + 16) + 56))(a2 + 16);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)(a2 + 16) + 16))(a2 + 16, v6);
    (*(void (**)(std::string *, unsigned char *))(v27[0].__r_.__value_.__r.__words[0] + 16))(v27, v6);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a2, v27, -1, 1, 0);
    ImsResult::ImsResult((uint64_t)this, (uint64_t)v27);
    goto LABEL_34;
  }
  if (v5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 16) + 64))(a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 16) + 16))(a2 + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sending request through pending SA", 34);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 512);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 3632);
    if (v11 && *(unsigned char *)(v11 + 228))
    {
      uint64_t v12 = a2 + 16;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 16) + 64))(a2 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 16) + 16))(a2 + 16, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"this is an initial registration. Sending request through default transport, and do not drop incoming message on default SIP port", 128);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v26);
      uint64_t v14 = *(void *)(v26.__r_.__value_.__r.__words[0] + 992);
      uint64_t v10 = *(std::__shared_weak_count **)(v26.__r_.__value_.__r.__words[0] + 1000);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v26.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
      }
      SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v26);
      std::string::size_type size = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
      *(unsigned char *)(v26.__r_.__value_.__r.__words[0] + 2017) = 0;
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      if (!v14)
      {
        SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v26);
        uint64_t v16 = *(void *)(v26.__r_.__value_.__r.__words[0] + 1040);
        uint64_t v17 = *(std::__shared_weak_count **)(v26.__r_.__value_.__r.__words[0] + 1048);
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v26.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
        }
        if (v16)
        {
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(a2 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(a2 + 16, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"default transport has been removed, resetting transports and reinitializing", 75);
          *(unsigned char *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v18 + 17) = 0;
          SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v26);
          SipTransportLayer::closeTransports((SipTransportLayer *)v26.__r_.__value_.__l.__data_);
          if (v26.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
          }
          SipRegistrationClient::initializeTransport(this, a2);
          goto LABEL_32;
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*(void *)(a2 + 360) + 280), *(SipRequest **)(a2 + 2784), 0, (uint64_t)&v26);
  ImsResult::operator=((uint64_t)v27, (uint64_t)&v26);
  ImsResult::~ImsResult((ImsResult *)&v26);
  if (!(*(unsigned int (**)(std::string::size_type, void))(*(void *)v27[0].__r_.__value_.__l.__size_
                                                                       + 24))(v27[0].__r_.__value_.__l.__size_, LODWORD(v27[0].__r_.__value_.__r.__words[2])))
  {
    uint64_t v19 = *(SipRequest **)(a2 + 2784);
    int v20 = *(_DWORD *)(a2 + 448);
    *(_DWORD *)(a2 + 448) = v20 + 1;
    SipRequest::setCSeq(v19, v20);
    *(_WORD *)(a2 + 3890) = *(_DWORD *)(a2 + 452);
    uint64_t v21 = *(void *)(a2 + 2792);
    if (v21)
    {
      long long v22 = *(std::__shared_weak_count **)(v21 + 360);
      *(void *)(v21 + 352) = 0;
      *(void *)(v21 + 360) = 0;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
    uint64_t v23 = SipUserAgent::transactionLayer(*(SipUserAgent **)(a2 + 360));
    long long v24 = *(std::__shared_weak_count **)(a2 + 208);
    if (v24)
    {
      long long v25 = *(const SipRequest **)(a2 + 2784);
      if (std::__shared_weak_count::lock(v24))
      {
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipTransactionLayer::sendRequest(v23, v25);
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a2, v27, -1, 1, 0);
  ImsResult::ImsResult((uint64_t)this, (uint64_t)v27);
LABEL_32:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
LABEL_34:
  ImsResult::~ImsResult((ImsResult *)v27);
}

void sub_1C54722EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, std::__shared_weak_count *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  ImsResult::~ImsResult((ImsResult *)&a26);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::updateContact(SipRegistrationClient *this, uint64_t a2, int a3)
{
  uint64_t v6 = (SipContactParam *)(a2 + 616);
  SipContactParam::clear((SipContactParam *)(a2 + 616));
  uint64_t v7 = *(void *)(a2 + 360);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 8);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  AdditionalFeatureTagsKey = (void **)ImsPrefs::getAdditionalFeatureTagsKey(v10);
  uint64_t v12 = (void *)ImsPrefs::typedPrefWithKey<ImsDictPref>(v10, AdditionalFeatureTagsKey);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = AdditionalFeatureTagsKey[11];
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v13)
  {
    uint64_t v14 = (const void *)(*(uint64_t (**)(void *))(*(void *)v13 + 64))(v13);
    SipContactParam::setAdditionalFeatureTags(v6, v14);
  }
  int v15 = SipRegistrationClient::allowedServices((SipRegistrationClient *)a2);
  uint64_t v16 = *(void *)(a2 + 360);
  uint64_t v17 = *(std::__shared_weak_count **)(v16 + 16);
  if (v17)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v17);
    uint64_t v18 = v17;
    if (v17) {
      uint64_t v17 = *(std::__shared_weak_count **)(v16 + 8);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v17);
  TTYOverImsSupportedKey = (void **)ImsPrefs::getTTYOverImsSupportedKey(v19);
  int v21 = ImsPrefs::BOOLValue(v19, TTYOverImsSupportedKey);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unsigned int v22 = v15 & 0xFFFFFFDF;
  if (v21) {
    int v23 = 32;
  }
  else {
    int v23 = 0;
  }
  int v24 = v23 | v22;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  SipUserAgent::fillContactForServicesAndMethod(*(void *)(a2 + 360), v6, v23 | v22, "REGISTER", 0);
  if ((*(unsigned int (**)(void, void))(**((void **)this + 1) + 24))(*((void *)this + 1), *((unsigned int *)this + 4)))
  {
    ImsResult::operator<<<char [33]>((uint64_t)this, "Contact Header generation failed");
    return;
  }
  if (a3 && *(void *)(a2 + 504))
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    SipHost::SipHost((uint64_t)__p, a2 + 632);
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 504) + 192))(&__str);
    SipHost::setAddress((uint64_t)__p, &__str);
    if (__str.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    (*(void (**)(uint64_t, void **))(*(void *)(a2 + 624) + 32))(a2 + 624, __p);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 16) + 64))(a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 16) + 16))(a2 + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"using secure server port for contact", 36);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    SipHost::~SipHost((SipHost *)__p);
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), __p);
  int v26 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(void *)__p[0] + 16))(__p[0]) + 439);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v26)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "transport");
    std::string::basic_string[abi:ne180100]<0>(&__str, "tcp");
    v38[0] = __p;
    long long v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), __p, (uint64_t)&std::piecewise_construct, (long long **)v38);
    std::string::operator=((std::string *)(v27 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), __p);
  int v28 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(void *)__p[0] + 16))(__p[0]) + 441);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v28)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "transport");
    std::string::basic_string[abi:ne180100]<0>(&__str, "tls");
    v38[0] = __p;
    long long v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), __p, (uint64_t)&std::piecewise_construct, (long long **)v38);
    std::string::operator=((std::string *)(v29 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 248))(a2))
  {
    if ((*(char *)(a2 + 2447) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a2 + 2447)) {
        goto LABEL_49;
      }
LABEL_47:
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      __str.__r_.__value_.__r.__words[0] = a2 + 2424;
      long long v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), (void **)(a2 + 2424), (uint64_t)&std::piecewise_construct, (long long **)&__str);
      std::string::operator=((std::string *)(v30 + 7), (const std::string *)__p);
      if (SBYTE7(v42) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_49;
    }
    if (*(void *)(a2 + 2432)) {
      goto LABEL_47;
    }
  }
LABEL_49:
  BOOL v31 = *(SipMessage **)(a2 + 2784);
  if (v31) {
    SipMessage::setContact(v31, v6);
  }
  uint64_t v33 = *(void *)(a2 + 16);
  long long v32 = (unsigned char *)(a2 + 16);
  uint64_t v34 = *(uint64_t (**)(unsigned char *))(v33 + 64);
  if (v32[3632])
  {
    uint64_t v35 = v34(v32);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v32 + 16))(v32, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"deregistering contact: ", 23);
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(SipContactParam *, uint64_t))(*(void *)v6 + 16))(v6, v35);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
  }
  else
  {
    uint64_t v36 = v34(v32);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v32 + 16))(v32, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"registering contact: ", 21);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(SipContactParam *, uint64_t))(*(void *)v6 + 16))(v6, v36);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
    uint64_t v37 = (*(uint64_t (**)(unsigned char *))(*(void *)v32 + 64))(v32);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v32 + 16))(v32, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"based on services: ", 19);
    *(unsigned char *)(v37 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v38, ",");
    BambiServices::namesForServiceMask(v24, &__str);
    LoggableString::LoggableString((std::string *)__p, &__str);
    (*(void (**)(uint64_t, void **))(*(void *)v37 + 40))(v37, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
  }
}

void sub_1C5472B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  ImsResult::~ImsResult(v26);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::sendAuthorizedRequest(SipRegistrationClient *this)
{
  ++*((_DWORD *)this + 113);
  SipRegistrationClient::setClientState(this, 9u);
  *((unsigned char *)this + 3920) = 1;
  SipRegistrationClient::sendRequest((SipRegistrationClient *)v2, (uint64_t)this);
  ImsResult::~ImsResult((ImsResult *)v2);
}

void SipRegistrationClient::handleRegistrationNotification(SipRegistrationClient *this, const SipRegistrationInfo *a2)
{
  (*(void (**)(void))(**((void **)this + 454) + 408))(*((void *)this + 454));
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  if (v4 == v5)
  {
    uint64_t v16 = *((void *)this + 2);
    int v15 = (char *)this + 16;
    uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"no registration info in notification", 36);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    return;
  }
  int64x2_t v129 = 0uLL;
  v130[0] = 0;
  uint64_t v6 = *((void *)this + 45);
  uint64_t v7 = *(const SipUri ***)(v6 + 488);
  uint64_t v8 = *(const SipUri ***)(v6 + 496);
  if (v7 == v8)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v9 = (char *)this + 16;
    do
    {
      uint64_t v10 = *v7;
      uint64_t v11 = *((void *)a2 + 2);
      uint64_t v12 = *((void *)a2 + 3);
      while (v11 != v12)
      {
        uint64_t v13 = *(void **)v11;
        if (SipUri::equals((SipUri *)(*(void *)v11 + 8), v10, 1))
        {
          if (v13) {
            goto LABEL_11;
          }
          break;
        }
        v11 += 8;
      }
      uint64_t v14 = (*(uint64_t (**)(char *))(*(void *)v9 + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*(void *)v9 + 16))((char *)this + 16, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"NOTIFY doesn't have a registration entry for associated URI ", 60);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(void *)v10 + 40))(v10, v14);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      ++v7;
    }
    while (v7 != v8);
    uint64_t v13 = 0;
LABEL_11:
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v4 = *((void *)a2 + 3);
  }
  if (v4 != v5)
  {
    unint64_t v18 = 0;
    do
    {
      if (v18 >= (v4 - v5) >> 3) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v5 + 8 * v18);
      }
      SipUri::asString(v19 + 8, __p);
      int v20 = *(_DWORD *)(v19 + 440);
      if ((v20 - 1) >= 3) {
        int v20 = 4 * (v20 == 4);
      }
      DWORD2(v87) = v20;
      uint64_t v21 = v129.i64[1];
      if (v129.i64[1] >= v130[0])
      {
        uint64_t v23 = (v129.i64[1] - v129.i64[0]) >> 5;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v130[0] - v129.i64[0];
        if ((v130[0] - v129.i64[0]) >> 4 > v24) {
          unint64_t v24 = v25 >> 4;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        *(void *)&long long v99 = v130;
        long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>((uint64_t)v130, v26);
        int v28 = &v27[32 * v23];
        *(void *)int v98 = v27;
        *(void *)&v98[8] = v28;
        *(void *)&v98[24] = &v27[32 * v29];
        long long v30 = *(_OWORD *)__p;
        *((void *)v28 + 2) = v87;
        *(_OWORD *)int v28 = v30;
        __p[1] = 0;
        *(void *)&long long v87 = 0;
        __p[0] = 0;
        *((_DWORD *)v28 + 6) = DWORD2(v87);
        BOOL v31 = v28 + 32;
        *(void *)&v98[16] = v28 + 32;
        uint64_t v32 = v129.i64[1];
        uint64_t v33 = v129.i64[0];
        uint64_t v34 = *(void *)&v98[8];
        if (v129.i64[1] == v129.i64[0])
        {
          int64x2_t v36 = vdupq_n_s64(v129.u64[1]);
        }
        else
        {
          do
          {
            long long v35 = *(_OWORD *)(v32 - 32);
            *(void *)(v34 - 16) = *(void *)(v32 - 16);
            *(_OWORD *)(v34 - 32) = v35;
            *(void *)(v32 - 24) = 0;
            *(void *)(v32 - 16) = 0;
            *(void *)(v32 - 32) = 0;
            *(_DWORD *)(v34 - 8) = *(_DWORD *)(v32 - 8);
            v34 -= 32;
            v32 -= 32;
          }
          while (v32 != v33);
          int64x2_t v36 = v129;
          BOOL v31 = *(char **)&v98[16];
        }
        v129.i64[0] = v34;
        v129.i64[1] = (uint64_t)v31;
        *(int64x2_t *)&v98[8] = v36;
        uint64_t v37 = v130[0];
        v130[0] = *(void *)&v98[24];
        *(void *)&v98[24] = v37;
        *(void *)int v98 = v36.i64[0];
        std::__split_buffer<ims::RegistrationIdentity>::~__split_buffer((uint64_t)v98);
        v129.i64[1] = (uint64_t)v31;
        if (SBYTE7(v87) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v22 = *(_OWORD *)__p;
        *(void *)(v129.i64[1] + 16) = v87;
        *(_OWORD *)uint64_t v21 = v22;
        __p[1] = 0;
        *(void *)&long long v87 = 0;
        __p[0] = 0;
        *(_DWORD *)(v21 + 24) = DWORD2(v87);
        v129.i64[1] = v21 + 32;
      }
      ++v18;
      uint64_t v5 = *((void *)a2 + 2);
      uint64_t v4 = *((void *)a2 + 3);
    }
    while (v18 < (v4 - v5) >> 3);
  }
  if (v129.i64[0] != v129.i64[1])
  {
    uint64_t v38 = *((void *)this + 57);
    if (v38)
    {
      uint64_t v39 = *((void *)this + 45);
      long long v40 = *(std::__shared_weak_count **)(v39 + 16);
      if (v40)
      {
        time_t v41 = std::__shared_weak_count::lock(v40);
        if (v41) {
          uint64_t v42 = *(void *)(v39 + 8);
        }
        else {
          uint64_t v42 = 0;
        }
      }
      else
      {
        uint64_t v42 = 0;
        time_t v41 = 0;
      }
      if (*(char *)(v42 + 4183) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v98, *(const std::string::value_type **)(v42 + 4160), *(void *)(v42 + 4168));
      }
      else
      {
        uint64_t v43 = v42 + 4160;
        *(_OWORD *)int v98 = *(_OWORD *)v43;
        *(void *)&v98[16] = *(void *)(v43 + 16);
      }
      (*(void (**)(uint64_t, unsigned char *, int64x2_t *))(*(void *)v38 + 72))(v38, v98, &v129);
      if ((v98[23] & 0x80000000) != 0) {
        operator delete(*(void **)v98);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
    }
  }
  if (!v13)
  {
    uint64_t v48 = (char *)this + 1184;
    uint64_t v49 = *((void *)a2 + 2);
    uint64_t v50 = *((void *)a2 + 3);
    while (1)
    {
      if (v49 == v50) {
        goto LABEL_67;
      }
      uint64_t v13 = *(void **)v49;
      if (SipUri::equals((SipUri *)(*(void *)v49 + 8), (SipRegistrationClient *)((char *)this + 1184), 1))break; {
      v49 += 8;
      }
    }
    if (!v13)
    {
LABEL_67:
      uint64_t v56 = *((void *)this + 2);
      char v55 = (char *)this + 16;
      uint64_t v57 = (*(uint64_t (**)(char *))(v56 + 48))(v55);
      (*(void (**)(char *, uint64_t))(*(void *)v55 + 16))(v55, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"NOTIFY doesn't have a registration entry for my AOR ", 52);
      *(unsigned char *)(v57 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*(void *)v48 + 40))(v48, v57);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v57 + 17) = 0;
      uint64_t v58 = (*(uint64_t (**)(char *))(*(void *)v55 + 48))(v55);
      (*(void (**)(char *, uint64_t))(*(void *)v55 + 16))(v55, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"existing registration entries are:", 34);
      *(unsigned char *)(v58 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v58 + 17) = 0;
      uint64_t v59 = *((void *)a2 + 2);
      uint64_t v60 = *((void *)a2 + 3);
      if (v60 != v59)
      {
        unint64_t v61 = 0;
        do
        {
          if (v61 >= (v60 - v59) >> 3) {
            uint64_t v62 = 0;
          }
          else {
            uint64_t v62 = *(void *)(v59 + 8 * v61);
          }
          uint64_t v63 = (unsigned char *)(*(uint64_t (**)(char *))(*(void *)v55 + 48))(v55);
          (*(void (**)(char *, unsigned char *))(*(void *)v55 + 16))(v55, v63);
          (*(void (**)(uint64_t, unsigned char *))(*(void *)(v62 + 8) + 40))(v62 + 8, v63);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v63[17] = 0;
          ++v61;
          uint64_t v59 = *((void *)a2 + 2);
          uint64_t v60 = *((void *)a2 + 3);
        }
        while (v61 < (v60 - v59) >> 3);
      }
      goto LABEL_110;
    }
  }
  uint64_t v44 = (char *)this + 624;
  long long v45 = (SipContact **)v13[56];
  std::string v46 = (SipContact **)v13[57];
  while (1)
  {
    if (v45 == v46) {
      goto LABEL_61;
    }
    uint64_t v47 = *v45;
    if (SipUri::equals((SipContact *)((char *)*v45 + 40), (SipRegistrationClient *)((char *)this + 624), 0))break; {
    ++v45;
    }
  }
  if (v47)
  {
    uint64_t v51 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"found matching URI in NOTIFY body", 33);
    *(unsigned char *)(v51 + 17) = 0;
    uint64_t v52 = (unsigned char *)(v51 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_93:
    unsigned char *v52 = 0;
LABEL_94:
    long long v127 = 0u;
    long long v128 = 0u;
    *(_OWORD *)uint64_t v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    memset(v98, 0, sizeof(v98));
    SipContact::SipContact((uint64_t)v98, (uint64_t)v47, 0);
    int v77 = (int)v125[1];
    if (!LODWORD(v125[1]))
    {
      if (*(_DWORD *)&v98[12] == 2 && !*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)this + 45)) + 859))
      {
        uint64_t v78 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v78 + 8), (uint64_t)"received reg NOTIFY with state = active and expires = 0.  Treating it as a termination.", 87);
        *(unsigned char *)(v78 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v78 + 17) = 0;
        *(_DWORD *)&v98[12] = 3;
      }
      int v77 = (int)v125[1];
    }
    if (v77 == -1)
    {
      uint64_t v79 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v79 + 8), (uint64_t)"my contact in NOTIFY doesn't have an expires attribute. Not updating expiration timers.", 87);
      *(unsigned char *)(v79 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v79 + 17) = 0;
    }
    else if (!*(unsigned char *)(SipUserAgent::config(*((SipUserAgent **)this + 45)) + 859))
    {
      SipRegistrationClient::updateExpirationTimer(this, (const SipContact *)LODWORD(v125[1]));
    }
    if (*(_DWORD *)&v98[12] == 2)
    {
      SipRegistrationClient::updateServiceMaskForContact(this, (SipContact *)v98);
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      *(_OWORD *)long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v87 = 0u;
      uint64_t v80 = (std::__shared_weak_count *)*((void *)this + 26);
      uint64_t v84 = *((void *)this + 25);
      if (v80)
      {
        if (std::__shared_weak_count::lock(v80)) {
          SipRegistrationActiveNotification::SipRegistrationActiveNotification(__p, &v84);
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    DWORD2(v128) = 0;
    long long v88 = 0u;
    long long v89 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v87 = 0u;
    uint64_t v81 = (std::__shared_weak_count *)*((void *)this + 26);
    uint64_t v82 = *((void *)this + 25);
    if (v81)
    {
      if (std::__shared_weak_count::lock(v81)) {
        SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification(__p, &v82);
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
LABEL_61:
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v87 = 0;
  SipUserAgent::makeSipInstance(*((SipUserAgent **)this + 45), (uint64_t)__p, (ImsResult *)v98);
  char v53 = (*(uint64_t (**)(void, void))(**(void **)&v98[8] + 24))(*(void *)&v98[8], *(unsigned int *)&v98[16]);
  ImsResult::~ImsResult((ImsResult *)v98);
  if (v53)
  {
    uint64_t v47 = 0;
    goto LABEL_76;
  }
  std::string::basic_string[abi:ne180100]<0>(v98, "+sip.instance");
  uint64_t v54 = SipRegistration::contactForParam((uint64_t)v13, (void **)v98, (unsigned __int8 *)__p);
  uint64_t v47 = (SipContact *)v54;
  if ((v98[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v98);
    if (!v47) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v54)
  {
LABEL_75:
    uint64_t v64 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v64 + 8), (uint64_t)"found matching sip.instance in NOTIFY body", 42);
    *(unsigned char *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v64 + 17) = 0;
  }
LABEL_76:
  if (SBYTE7(v87) < 0)
  {
    operator delete(__p[0]);
    if (v47) {
      goto LABEL_94;
    }
  }
  else if (v47)
  {
    goto LABEL_94;
  }
  uint64_t v65 = (SipContact **)v13[56];
  long long v66 = (SipContact **)v13[57];
  if ((char *)v66 - (char *)v65 == 8 && *((unsigned char *)this + 2336))
  {
    if (v66 == v65) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = *v65;
    }
    uint64_t v76 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v76 + 8), (uint64_t)"couldn't match my contact in notification.  Using the only contact for my AOR: ", 79);
    *(unsigned char *)(v76 + 17) = 0;
    uint64_t v52 = (unsigned char *)(v76 + 17);
    SipContact::log(v47, (ImsOutStream *)v76);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_93;
  }
  uint64_t v68 = *((void *)this + 2);
  char v67 = (char *)this + 16;
  uint64_t v69 = (*(uint64_t (**)(char *))(v68 + 48))(v67);
  (*(void (**)(char *, uint64_t))(*(void *)v67 + 16))(v67, v69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)"registration ", 13);
  *(unsigned char *)(v69 + 17) = 0;
  (*(void (**)(void *, uint64_t))(v13[1] + 40))(v13 + 1, v69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)" does not have an entry for my contact (", 40);
  *(unsigned char *)(v69 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(void *)v44 + 40))(v44, v69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v69 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v69 + 17) = 0;
  uint64_t v70 = (*(uint64_t (**)(char *))(*(void *)v67 + 48))(v67);
  (*(void (**)(char *, uint64_t))(*(void *)v67 + 16))(v67, v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v70 + 8), (uint64_t)"existing contacts are:", 22);
  *(unsigned char *)(v70 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v70 + 17) = 0;
  uint64_t v71 = v13[56];
  uint64_t v72 = v13[57];
  if (v72 != v71)
  {
    unint64_t v73 = 0;
    do
    {
      if (v73 >= (v72 - v71) >> 3) {
        uint64_t v74 = 0;
      }
      else {
        uint64_t v74 = *(void *)(v71 + 8 * v73);
      }
      uint64_t v75 = (*(uint64_t (**)(char *))(*(void *)v67 + 48))(v67);
      (*(void (**)(char *, uint64_t))(*(void *)v67 + 16))(v67, v75);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 + 40) + 40))(v74 + 40, v75);
      ++v73;
      uint64_t v71 = v13[56];
      uint64_t v72 = v13[57];
    }
    while (v73 < (v72 - v71) >> 3);
  }
LABEL_110:
  *(void *)int v98 = &v129;
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v98);
}

void sub_1C5474038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  SipRegistrationStateNotification::~SipRegistrationStateNotification((SipRegistrationStateNotification *)&a26);
  SipContact::~SipContact((SipContact *)&a53);
  a26 = (void *)(v60 - 112);
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void ___ZN21SipRegistrationClient30handleRegistrationNotificationERK19SipRegistrationInfo_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        SipRegistrationPolicy::setRegistrationMode(*(unsigned int **)(v3 + 3632), (unsigned int *)&SipRegistrationMode::kModeDisabled);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C5474218(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleAuthChallengeResponse(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 130);
  if ((v3 - 7) < 2)
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    (*(void (**)(void **__return_ptr))(**((void **)a2 + 6) + 56))(__p);
    if ((*(unsigned int (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], v41))
    {
      ++*((_DWORD *)this + 113);
      SipRegistrationClient::setClientState(this, 1u);
      memset(v50, 0, sizeof(v50));
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v49.__r_.__value_.__r.__words[2]) = 1073741832;
      if (__p[1] == &_bambiDomain)
      {
        int v14 = v41;
        ImsResult::~ImsResult((ImsResult *)&v49);
        if (v14 == 1073741832)
        {
          uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"auth sync failure.  Retrying initial registration.", 50);
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
          SipRegistrationClient::sendInitialRequest(this);
        }
      }
      else
      {
        ImsResult::~ImsResult((ImsResult *)&v49);
      }
      uint64_t v16 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"auth failure: ", 14);
      *(unsigned char *)(v16 + 17) = 0;
      (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v16);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      int v17 = (*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this);
      uint64_t v18 = **((void **)this + 454);
      if (v17)
      {
        uint64_t v19 = (*(uint64_t (**)(void))(v18 + 304))();
        SipRegistrationClient::handleRegistrationError(this, (const std::string *)__p, v19, 1, 0);
      }
      else if ((*(unsigned int (**)(void))(v18 + 320))())
      {
        SipRegistrationClient::internalRetryRegistration((uint64_t)this);
      }
      goto LABEL_36;
    }
    uint64_t v7 = (SipIPSecTransportGroup *)*((void *)this + 63);
    if (v7)
    {
      SipIPSecTransportGroup::updateKeysFromAuthResponse(v7, *((const SipAuthResponse **)a2 + 6), (uint64_t)&v49);
      ImsResult::operator=((uint64_t)__p, (uint64_t)&v49);
      ImsResult::~ImsResult((ImsResult *)&v49);
      int v8 = (*(uint64_t (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], v41);
      uint64_t v9 = *((void *)this + 45);
      if (v8)
      {
        uint64_t v10 = SipUserAgent::config(*((SipUserAgent **)this + 45));
        unsigned int v11 = SipTimers::timerValue((SipTimers *)(v10 + 512), (const SipTimer *)&SipTimers::kTimerRegAwaitAuth, 0);
        uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"unable to update pending SA: ", 29);
        *(unsigned char *)(v12 + 17) = 0;
        (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" - will retry in ", 17);
        unint64_t v13 = v11 / 0x3E8uLL;
        *(unsigned char *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"s", 1);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        SipAuthClient::clear(*(SipAuthClient **)(*((void *)this + 45) + 280));
        SipRegistrationPolicy::scheduleRetry(*((SipRegistrationPolicy **)this + 454), (const ImsResult *)__p, v13, 0);
        SipRegistrationClient::handleRegistrationError(this, (const std::string *)__p, v13, 1, 0);
LABEL_36:
        ImsResult::~ImsResult((ImsResult *)__p);
        return;
      }
      int v20 = *(std::__shared_weak_count **)(v9 + 16);
      if (v20)
      {
        int v20 = std::__shared_weak_count::lock(v20);
        uint64_t v21 = v20;
        if (v20) {
          int v20 = *(std::__shared_weak_count **)(v9 + 8);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      long long v22 = (ImsPrefs *)SipStack::prefs((SipStack *)v20);
      IPSecBringupUseNetworkPathKey = (void **)ImsPrefs::getIPSecBringupUseNetworkPathKey(v22);
      int v24 = ImsPrefs::BOOLValue(v22, IPSecBringupUseNetworkPathKey);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Waiting for network paths to become available", 45);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        SipRegistrationClient::setClientState(this, 8u);
        uint64_t v27 = *((void *)this + 25);
        uint64_t v26 = *((void *)this + 26);
        if (v26)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v48 = 0;
        int v28 = operator new(0x20uLL);
        *int v28 = &unk_1F20D0E98;
        v28[1] = this;
        unsigned __int16 v28[2] = v27;
        v28[3] = v26;
        uint64_t v48 = v28;
        uint64_t v29 = *((void *)this + 45);
        long long v30 = *(std::__shared_weak_count **)(v29 + 16);
        if (v30)
        {
          long long v30 = std::__shared_weak_count::lock(v30);
          BOOL v31 = v30;
          if (v30) {
            long long v30 = *(std::__shared_weak_count **)(v29 + 8);
          }
        }
        else
        {
          BOOL v31 = 0;
        }
        uint64_t v32 = (ImsPrefs *)SipStack::prefs((SipStack *)v30);
        IPSecBringupTimeoutMillisecondsKey = (void **)ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(v32);
        ImsPrefs::intValue(v32, IPSecBringupTimeoutMillisecondsKey);
        SipTimerContainer::startTimer((int8x8_t *)this + 27, (uint64_t)&qword_1EBBDC158);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v47);
        uint64_t v34 = *((void *)this + 63);
        uint64_t v35 = *(void *)(v34 + 296);
        if (*(char *)(v35 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v35 + 56), *(void *)(v35 + 64));
          uint64_t v34 = *((void *)this + 63);
        }
        else
        {
          std::string v49 = *(std::string *)(v35 + 56);
        }
        uint64_t v36 = *(void *)(v34 + 304);
        if (*(char *)(v36 + 79) < 0) {
          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)(v36 + 56), *(void *)(v36 + 64));
        }
        else {
          v50[0] = *(std::string *)(v36 + 56);
        }
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        long long v45 = &v37;
        uint64_t v46 = 0;
        uint64_t v37 = (std::string *)operator new(0x30uLL);
        uint64_t v38 = v37;
        uint64_t v39 = (long long *)&v37[2];
        uint64_t v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (long long *)&v49, (long long *)&v50[1], v37);
        ImsNetworkPathManager::evaluateInterface((uint64_t)this + 4064, (uint64_t)this + 184, (long long **)&v37);
      }
    }
    SipRegistrationClient::sendAuthorizedRequest(this);
    goto LABEL_36;
  }
  if (v3 == 1 || v3 == 10)
  {
    uint64_t v6 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 2) + 64))((char *)this + 16, a2);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"ignoring auth response in state ", 32);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((void *)this + 2) + 56))((char *)this + 16, a2);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received auth response in unexpected state ", 43);
  }
  *(unsigned char *)(v6 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, (const std::string *)&_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  SipRegistrationClient::setClientState(this, 1u);
}

void sub_1C5474CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::handleAuthChallengeResponse(SipRegistrationClient *this, const SipAuthInfo *a2)
{
}

uint64_t SipRegistrationClient::handleAuthChallengeTimeout(uint64_t this, const SipAuthInfo *a2)
{
  if (*(_DWORD *)(this + 520) == 7)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    uint64_t v2 = &unk_1F20B2680;
    int v3 = &_bambiDomain;
    int v4 = 1073741830;
    operator new();
  }
  return this;
}

void sub_1C5474FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1C878E320](v2, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipRegistrationClient::handleAuthChallengeTimeout(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  return SipRegistrationClient::handleAuthChallengeTimeout((uint64_t)this - 136, a2);
}

void SipRegistrationClient::handlePathSatisfied(int8x8_t *this)
{
  if (this[65].i32[0] == 8)
  {
    uint64_t v2 = this + 2;
    uint64_t v3 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[2] + 64))(this + 2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Interface network paths satisfied", 33);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    SipTimerContainer::cancelTimer(this + 27, (std::string *)&qword_1EBBDC158);
    SipRegistrationClient::sendAuthorizedRequest((SipRegistrationClient *)this);
  }
}

void non-virtual thunk to'SipRegistrationClient::handlePathSatisfied(int8x8_t *this)
{
}

void SipRegistrationClient::handlePathFailed(int8x8_t *a1, unsigned __int8 *a2)
{
  if (a1[65].i32[0] != 8) {
    return;
  }
  int8x8_t v3 = a1[63];
  if (!*(void *)&v3) {
    return;
  }
  int v4 = a2;
  uint64_t v5 = *(void *)(*(void *)&v3 + 296);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 79);
  size_t v7 = *(void *)(v5 + 64);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 79);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 64);
  }
  int v9 = (char)a2[23];
  if (v9 >= 0) {
    uint64_t v10 = a2[23];
  }
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v8 == v10)
  {
    long long v11 = (const void **)(v5 + 56);
    if (v9 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((v6 & 0x80) != 0)
    {
      if (!memcmp(*v11, a2, v7)) {
        goto LABEL_31;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_31;
      }
      while (*(unsigned __int8 *)v11 == *a2)
      {
        long long v11 = (const void **)((char *)v11 + 1);
        ++a2;
        if (!--v6) {
          goto LABEL_31;
        }
      }
    }
  }
  uint64_t v12 = *(void *)(*(void *)&v3 + 304);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 79);
  size_t v14 = *(void *)(v12 + 64);
  if ((v13 & 0x80u) == 0) {
    uint64_t v15 = *(unsigned __int8 *)(v12 + 79);
  }
  else {
    uint64_t v15 = *(void *)(v12 + 64);
  }
  if (v15 != v10) {
    return;
  }
  uint64_t v16 = (const void **)(v12 + 56);
  if (v9 >= 0) {
    int v17 = v4;
  }
  else {
    int v17 = *(unsigned __int8 **)v4;
  }
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*v16, v17, v14)) {
      return;
    }
    goto LABEL_31;
  }
  if (!v13)
  {
LABEL_31:
    uint64_t v27 = 0;
    memset(v26, 0, sizeof(v26));
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    v21[0] = &unk_1F20B2680;
    v21[1] = &_bambiDomain;
    int v22 = 1073741842;
    uint64_t v18 = ImsResult::operator<<<char [46]>((uint64_t)v21, "Interface network path evaluation failed for ");
    uint64_t v19 = (const std::string *)ImsResult::operator<<<std::string>(v18, (uint64_t)v4);
    ImsResult::ImsResult((ImsResult *)v26, v19);
    ImsResult::~ImsResult((ImsResult *)v21);
    SipTimerContainer::cancelTimer(a1 + 27, (std::string *)&qword_1EBBDC158);
    int v20 = (unsigned char *)(*(uint64_t (**)(int8x8_t *))(*(void *)&a1[2] + 56))(a1 + 2);
    (*(void (**)(int8x8_t *, unsigned char *))(*(void *)&a1[2] + 16))(a1 + 2, v20);
    (*(void (**)(unsigned char *, unsigned char *))(*(void *)v26 + 16))(v26, v20);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v20[17] = 0;
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (const std::string *)v26, -1, 1, 0);
    SipRegistrationClient::setClientState(a1, 1u);
    ImsResult::~ImsResult((ImsResult *)v26);
    return;
  }
  while (*(unsigned __int8 *)v16 == *v17)
  {
    uint64_t v16 = (const void **)((char *)v16 + 1);
    ++v17;
    if (!--v13) {
      goto LABEL_31;
    }
  }
}

void sub_1C54753EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::handlePathFailed(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t SipRegistrationClient::printRegistrationInfo(SipRegistrationClient *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Registration:", 13);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    State:               ", 25);
  *((unsigned char *)a2 + 17) = 0;
  int v4 = operator<<(a2, (unsigned int *)this + 132);
  (*(void (**)(_anonymous_namespace_ *, void *(*)(void *)))(*(void *)a2 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((_DWORD *)this + 132) == 2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Expiration:          ", 25);
    *((unsigned char *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), (uint64_t)a2, v5);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Configured Services: ", 25);
    *((unsigned char *)a2 + 17) = 0;
    int v6 = *((_DWORD *)this + 284);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v6, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Registered Services: ", 25);
    *((unsigned char *)a2 + 17) = 0;
    int v7 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v7, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"     Allowed   Services: ", 25);
    *((unsigned char *)a2 + 17) = 0;
    int v8 = SipRegistrationClient::allowedServices(this);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v8, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Client state:        ", 25);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&_MergedGlobals_15[3 * *((unsigned int *)this + 130) + 12]);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 63))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Pending SA:          ", 25);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 63) + 264))();
  }
  uint64_t result = *((void *)this + 454);
  if (result) {
    return (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(void *)result + 392))(result, a2);
  }
  return result;
}

void sub_1C5475950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::registrationDomain(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  int8x8_t v3 = (_OWORD *)((char *)this + 2000);
  if ((*((char *)this + 2023) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 2023))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v3;
      a2->__r_.__value_.__r.__words[2] = *((void *)this + 252);
      return;
    }
LABEL_8:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    SipHost::asString();
  }
  std::string::size_type v4 = *((void *)this + 251);
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v5 = *(const std::string::value_type **)v3;
  std::string::__init_copy_ctor_external(a2, v5, v4);
}

void sub_1C5475A4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::loggableName(SipRegistrationClient *this@<X0>, LoggableString *a2@<X8>)
{
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(void *)this + 248))(this)) {
    int8x8_t v3 = "RegistrationClient(EMERGENCY)";
  }
  else {
    int8x8_t v3 = "RegistrationClient";
  }
  LoggableString::LoggableString(a2, v3);
}

void non-virtual thunk to'SipRegistrationClient::loggableName(SipRegistrationClient *this@<X0>, LoggableString *a2@<X8>)
{
  if ((*(unsigned int (**)(void))(*((void *)this - 15) + 248))()) {
    int8x8_t v3 = "RegistrationClient(EMERGENCY)";
  }
  else {
    int8x8_t v3 = "RegistrationClient";
  }
  LoggableString::LoggableString(a2, v3);
}

void SipRegistrationClient::logPrefix(SipRegistrationClient *this, ImsOutStream *a2)
{
  uint64_t v4 = *((void *)this + 45);
  if (v4
    && (uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16)) != 0
    && (int v6 = std::__shared_weak_count::lock(v5)) != 0
    && (uint64_t v7 = *(void *)(v4 + 8), std::__shared_weak_count::__release_shared[abi:ne180100](v6), v7))
  {
    uint64_t v8 = *((void *)this + 45);
    int v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9)
    {
      int v9 = std::__shared_weak_count::lock(v9);
      uint64_t v10 = v9;
      if (v9) {
        int v9 = *(std::__shared_weak_count **)(v8 + 8);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    ((void (*)(void **__return_ptr))v9->__vftable[2].__get_deleter)(__p);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" [", 2);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void **__return_ptr, SipRegistrationClient *))(*(void *)this + 80))(__p, this);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]: ", 3);
  }
  else
  {
    (*(void (**)(void **__return_ptr, SipRegistrationClient *))(*(void *)this + 80))(__p, this);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  }
  *((unsigned char *)a2 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5475D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipRegistrationClient::logPrefix(SipRegistrationClient *this, ImsOutStream *a2)
{
}

uint64_t SipRegistrationClient::isEmergency(SipRegistrationClient *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2 && (int8x8_t v3 = std::__shared_weak_count::lock(v2)) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 8);
      if (v4) {
        uint64_t v1 = *(unsigned __int8 *)(v4 + 176) != 0;
      }
      else {
        uint64_t v1 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t SipRegistrationClient::handleEmergencyStateExited(SipRegistrationClient *this)
{
  if ((*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this))
  {
    uint64_t result = *((void *)this + 454);
    if (result)
    {
      int8x8_t v3 = *(uint64_t (**)(void))(*(void *)result + 456);
      return v3();
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 2);
    uint64_t v4 = (char *)this + 16;
    uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 48))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Exit emergency state call on normal registration client, ignoring", 65);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  return result;
}

void SipRegistrationClient::ipsecTransportExpired(uint64_t a1, void *a2)
{
  int8x8_t v3 = (void *)(a1 + 504);
  if (*a2 != *(void *)(a1 + 504))
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(a1 + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"unknown secure transport ", 25);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = (void *)(a1 + 16);
  uint64_t v9 = (*(uint64_t (**)(void *))(v8 + 64))(v7);
  (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"pending SA expired prior to successful registration", 51);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v10 = (std::__shared_weak_count *)v7[62];
  void *v3 = 0;
  v3[1] = 0;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void non-virtual thunk to'SipRegistrationClient::ipsecTransportExpired(uint64_t a1, void *a2)
{
}

void SipRegistrationClient::dropRegistrationWhenCallsEnd(void *a1, unsigned int a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Deferring drop registration with reason ", 40);
  *(unsigned char *)(v5 + 17) = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((qword_1EBBDAFA0 - _terminationReasonStrings) >> 3) <= a2) {
    uint64_t v6 = "Unknown";
  }
  else {
    uint64_t v6 = (const char *)(_terminationReasonStrings + 24 * a2);
  }
  (*(void (**)(uint64_t, const char *))(*(void *)v5 + 32))(v5, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  SipRegistrationClient::clearDeferredDrop(a1);
  operator new();
}

void sub_1C547632C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C40835D64A5);
  _Unwind_Resume(a1);
}

_DWORD *SipRegistrationClient::allCallsEnded(SipRegistrationClient *this)
{
  uint64_t v2 = *((void *)this + 491);
  if (!v2)
  {
LABEL_6:
    uint64_t v4 = (void (***)(void, uint64_t))*((void *)this + 492);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *((void *)this + 492);
  if (!v3 || *(void *)(v3 + 8) >= *(void *)(v2 + 8))
  {
    (**(void (***)(uint64_t, uint64_t))v2)(v2, 1);
    goto LABEL_6;
  }
  (**(void (***)(void, uint64_t))v3)(*((void *)this + 492), 1);
  uint64_t v4 = (void (***)(void, uint64_t))*((void *)this + 491);
LABEL_7:
  (**v4)(v4, 1);
LABEL_8:
  SipRegistrationClient::clearDeferredNotifications(this);
  if (*((void *)this + 493))
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Registration drop has been deferred, dropping registration now.", 63);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(void, void))(**((void **)this + 493) + 16))(*((void *)this + 493), 0);
  }
  SipRegistrationClient::clearDeferredDrop(this);
  uint64_t result = (_DWORD *)*((void *)this + 454);
  if (result)
  {
    if (result[108] != *((_DWORD *)this + 992))
    {
      uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"while we were in a call, registration mode changed from ", 56);
      *(unsigned char *)(v7 + 17) = 0;
      operator<<(v7, (unsigned int *)this + 992);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" to ", 4);
      *(unsigned char *)(v7 + 17) = 0;
      uint64_t v8 = operator<<(v7, (unsigned int *)(*((void *)this + 454) + 432));
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(SipRegistrationClient *, uint64_t))(*(void *)this + 136))(this, *((void *)this + 454) + 432);
      uint64_t result = (_DWORD *)*((void *)this + 454);
    }
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 440);
    return (_DWORD *)v9();
  }
  return result;
}

uint64_t SipRegistrationClient::checkTimers(int8x8_t *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (ims *)time(0);
  uint64_t v3 = (SipRegistrationPolicy *)this[454];
  if (!v3
    || (SipRegistrationPolicy::checkTimers(v3, v2),
        int8x8_t v4 = this[454],
        (uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(*(void *)&v4 + 240), "ThrottleTimer")) == 0)|| *(uint64_t *)(*(void *)&v4 + 392) <= 0)
  {
    uint64_t result = (uint64_t)SipTimerContainer::timerPastDue((uint64_t)&this[27], (unsigned __int8 *)&kRegHysteresisTimer);
    if (!result
      || (SipTimerContainer::cancelTimer(this + 27, &kRegHysteresisTimer),
          uint64_t result = SipRegistrationClient::handleHysteresisTimer((SipRegistrationClient *)this),
          (result & 1) == 0))
    {
      if (this[66].i32[0] == 2)
      {
        SipTimerContainer::cancelTimer(this + 27, (std::string *)&qword_1EBBDC128);
        SipTimerContainer::cancelTimer(this + 27, (std::string *)_MergedGlobals_15);
        uint64_t v6 = (uint64_t)this[62];
        if (v6 < 1
          || (int8x8_t v7 = this[60], v8 = __OFSUB__(*(void *)&v7, v6), v9 = *(void *)&v7 - v6, (v9 < 0) ^ v8 | (v9 == 0)))
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v10 = v9 * this[145].u32[0];
          if (v10 / 100 >= this[146].u32[0]) {
            uint64_t v11 = this[146].u32[0];
          }
          else {
            uint64_t v11 = v10 / 100;
          }
        }
        uint64_t v12 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[2] + 64))(this + 2);
        (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[2] + 16))(this + 2, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"refresh cushion = ", 18);
        *(unsigned char *)(v12 + 17) = 0;
        ims::formatTimeInterval((ims *)v11);
      }
    }
  }
  return result;
}

void sub_1C5476C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v27 - 104));
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationClient::systemClockDidChange(int8x8_t *this)
{
  uint64_t v2 = (SipRegistrationPolicy *)this[454];
  if (v2) {
    SipRegistrationPolicy::systemClockDidChange(v2);
  }
  if (this[66].i32[0] == 2)
  {
    if (*(void *)&this[62] > time(0) && this[65].i32[0] == 1)
    {
      uint64_t v3 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[2] + 64))(this + 2);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[2] + 16))(this + 2, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"our last registration was from the future! Re-registering just to be safe.", 74);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      SipRegistrationClient::refreshRegistration((SipRegistrationClient *)this);
    }
    SipRegistrationClient::checkTimers(this);
  }
}

void SipRegistrationClient::handleDeviceEvents(SipRegistrationClient *this, __int16 a2)
{
  uint64_t v3 = *((void *)this + 454);
  if (v3)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 464))(v3);
    (*(void (**)(void))(**((void **)this + 454) + 496))();
    if ((a2 & 0x200) != 0)
    {
      if (v5)
      {
        SipRegistrationClient::performDeferredAction(this);
      }
    }
  }
}

void SipRegistrationClient::handleRegistrationModeChange(int8x8_t *a1, unsigned int *a2)
{
  if (*a2 == a1[496].i32[0])
  {
    int8x8_t v4 = a1 + 2;
    uint64_t v5 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[2] + 64))(a1 + 2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ignoring duplicate registration mode change to ", 47);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = operator<<(v5, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  else
  {
    if (*a2 == SipRegistrationMode::kModeNormal) {
      goto LABEL_12;
    }
    int8x8_t v7 = a1[45];
    BOOL v8 = *(std::__shared_weak_count **)(*(void *)&v7 + 16);
    if (v8)
    {
      BOOL v8 = std::__shared_weak_count::lock(v8);
      uint64_t v9 = v8;
      if (v8) {
        BOOL v8 = *(std::__shared_weak_count **)(*(void *)&v7 + 8);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = SipStack::callCount((SipStack *)v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (!v10)
    {
LABEL_12:
      SipTimerContainer::cancelTimer(a1 + 27, &kRegHysteresisTimer);
      a1[496].i32[0] = *a2;
      int8x8_t v14 = a1[57];
      if (v14)
      {
        int8x8_t v15 = a1[45];
        uint64_t v16 = *(std::__shared_weak_count **)(*(void *)&v15 + 16);
        if (v16)
        {
          int v17 = std::__shared_weak_count::lock(v16);
          if (v17) {
            uint64_t v18 = *(void *)(*(void *)&v15 + 8);
          }
          else {
            uint64_t v18 = 0;
          }
        }
        else
        {
          uint64_t v18 = 0;
          int v17 = 0;
        }
        if (*(char *)(v18 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 4160), *(void *)(v18 + 4168));
        }
        else {
          std::string __p = *(std::string *)(v18 + 4160);
        }
        (*(void (**)(int8x8_t, std::string *, unsigned int *))(**(void **)&v14 + 32))(v14, &__p, a2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
    else
    {
      int8x8_t v12 = a1[2];
      uint64_t v11 = a1 + 2;
      uint64_t v13 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v12 + 32))(v11);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"delaying registration mode change notification until all calls have ended", 73);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
    }
  }
}

void sub_1C547720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipRegistrationClient::handleRegistrationModeChange(uint64_t a1, unsigned int *a2)
{
}

void SipRegistrationClient::handleProxyChange(SipRegistrationClient *this, const SipUri *a2)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"proxy changed, clearing auth info", 33);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  SipUri::operator=((SipUri *)(v3 + 349), (uint64_t)a2);
  uint64_t v5 = *(SipAuthClient **)(v3[43] + 280);
  SipAuthClient::clear(v5);
}

void non-virtual thunk to'SipRegistrationClient::handleProxyChange(SipRegistrationClient *this, const SipUri *a2)
{
}

void SipRegistrationClient::requestNetworkReset(SipRegistrationClient *this)
{
  uint64_t v2 = *((void *)this + 45);
  uint64_t v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 136);
  uint64_t v5 = *((void *)this + 45);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 16);
  if (v6)
  {
    int8x8_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int8x8_t v7 = 0;
  }
  if (*(char *)(v8 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v8 + 4160);
  }
  uint64_t v9 = *(void *)(v4 + 248);
  if (v9) {
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 96))(v9, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1C547745C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationClient::requestNetworkReset(SipRegistrationClient *this)
{
}

void SipRegistrationClient::handleRegistrationThrottled(SipRegistrationClient *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 57);
  if (v3)
  {
    uint64_t v6 = *((void *)this + 45);
    int8x8_t v7 = *(std::__shared_weak_count **)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8) {
        uint64_t v9 = *(void *)(v6 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    if (*(char *)(v9 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
    }
    else {
      std::string __p = *(std::string *)(v9 + 4160);
    }
    (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v3 + 56))(v3, &__p, a2, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5477598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipRegistrationClient::handleRegistrationThrottled(SipRegistrationClient *this, uint64_t a2, uint64_t a3)
{
}

uint64_t SipRegistrationClient::defaultProxyPort(SipUserAgent **this)
{
  SipUserAgent::transportLayer(this[45], &v3);
  __int16 v1 = *(_WORD *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) + 434);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_1C547763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SipRegistrationClient::defaultProxyPort(SipUserAgent **this)
{
  return SipRegistrationClient::defaultProxyPort(this - 18);
}

BOOL SipRegistrationClient::hasActiveCalls(SipRegistrationClient *this)
{
  uint64_t v2 = *((void *)this + 45);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = *(SipStack **)(v2 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  int v6 = (*(uint64_t (**)(SipRegistrationClient *))(*(void *)this + 248))(this);
  uint64_t v7 = SipStack::activeCallCount(v5, v6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v7 != 0;
}

void sub_1C5477700(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'SipRegistrationClient::hasActiveCalls(SipRegistrationClient *this)
{
  return SipRegistrationClient::hasActiveCalls((SipRegistrationClient *)((char *)this - 144));
}

uint64_t SipRegistrationClient::disableIfInWrongCountry(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a1 + 3632);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
  uint64_t v9 = *(void **)(v8 + 8);
  if (v7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check if registration needs to be disabled due to : ", 52);
    *(unsigned char *)(v8 + 17) = 0;
    LoggableString::LoggableString(&__p, a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return (*(uint64_t (**)(void, uint64_t, const std::string *))(**(void **)(a1 + 3632) + 544))(*(void *)(a1 + 3632), a2, a3);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No policy present, can't disable registration for wrong country.", 64);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t result = 0;
    *(unsigned char *)(v8 + 17) = 0;
  }
  return result;
}

void sub_1C54778F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::networkInterfaceChanged(SipUserAgent **this)
{
  SipUserAgent::transportLayer(this[45], v29);
  uint64_t v2 = *(void *)(*(void *)&v29[0] + 1072);
  if (*((void *)&v29[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29[0] + 1));
  }
  if (v2)
  {
    memset(&v31, 0, sizeof(v31));
    SipUserAgent::transportLayer(this[45], v29);
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)&v29[0] + 16))(*(void *)&v29[0]);
    if (*(char *)(v3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    }
    else {
      std::string v31 = *(std::string *)v3;
    }
    if (*((void *)&v29[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29[0] + 1));
    }
    uint64_t v8 = this[45];
    uint64_t v9 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v8 + 2));
    uint64_t v10 = *(void *)(*((void *)v8 + 1) + 136);
    uint64_t v11 = *(void *)(v10 + 656);
    int8x8_t v12 = *(std::__shared_weak_count **)(v10 + 664);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, std::string *))(*(void *)v11 + 64))(v11, &v31);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (v13)
    {
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      SipUserAgent::transportLayer(this[45], &v27);
      SipUri::SipUri((SipUri *)v29, (const SipUri *)(v27 + 1528));
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (!SipUri::isValidUri((SipUri *)v29)) {
        goto LABEL_31;
      }
      SipHost::ipAddress((SipHost *)((char *)v29 + 8), &v27);
      uint64_t v14 = v13[1];
      uint64_t v15 = v13[2];
      if (v14 == v15)
      {
        char v18 = 0;
      }
      else
      {
        uint64_t v16 = v14 + 16;
        do
        {
          int v17 = (*(uint64_t (**)(void, uint64_t *, void))(**(void **)(v16 - 16) + 104))(*(void *)(v16 - 16), &v27, 0);
          char v18 = v17;
          if (v16 == v15) {
            int v19 = 1;
          }
          else {
            int v19 = v17;
          }
          v16 += 16;
        }
        while (v19 != 1);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v18)
      {
        uint64_t v7 = 0;
      }
      else
      {
LABEL_31:
        long long v24 = this[2];
        long long v23 = (char *)(this + 2);
        uint64_t v25 = (*((uint64_t (**)(char *))v24 + 8))(v23);
        (*(void (**)(char *, uint64_t))(*(void *)v23 + 16))(v23, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"New interface does not contain old local address ", 49);
        *(unsigned char *)(v25 + 17) = 0;
        SipHost::ipAddress((SipHost *)((char *)v29 + 8), &v27);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 40))(v27, v25);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        uint64_t v7 = 1;
      }
      (*(void (**)(void *))(*v13 + 8))(v13);
      SipUri::~SipUri((SipUri *)v29);
    }
    else
    {
      uint64_t v21 = this[2];
      int v20 = (char *)(this + 2);
      uint64_t v22 = (*((uint64_t (**)(char *))v21 + 8))(v20);
      (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))(v20, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"No interface named ", 19);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, &v31);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      uint64_t v7 = 1;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v5 = this[2];
    uint64_t v4 = (char *)(this + 2);
    uint64_t v6 = (*((uint64_t (**)(char *))v5 + 8))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"No old interface, assuming the interface changed", 48);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    return 1;
  }
  return v7;
}

void sub_1C5477E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SipUri::~SipUri((SipUri *)va);
  if (*(char *)(v3 - 57) < 0) {
    operator delete(*(void **)(v3 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipRegistrationClient::networkInterfaceChanged(SipUserAgent **this)
{
  return SipRegistrationClient::networkInterfaceChanged(this - 18);
}

uint64_t SipRegistrationClient::handleImsOutageResponse(int8x8_t *this)
{
  int8x8_t v2 = this[454];
  if (v2) {
    (*(void (**)(int8x8_t))(**(void **)&v2 + 520))(v2);
  }
  int8x8_t v3 = this[492];
  if (v3) {
    (*(void (**)(int8x8_t))(**(void **)&v3 + 16))(v3);
  }
  this[492] = 0;
  SipTimerContainer::cancelTimer(this + 27, (std::string *)_MergedGlobals_15);
  uint64_t v4 = *(uint64_t (**)(int8x8_t *, uint64_t, void, void))(*(void *)this + 168);
  return v4(this, 9, 0, 0);
}

void DeferredRegistration::~DeferredRegistration(void **this)
{
  *this = &unk_1F20D06A8;
  if (*((char *)this + 1719) < 0) {
    operator delete(this[212]);
  }
  SipRegistrationConfig::~SipRegistrationConfig(this + 3);
  *this = &unk_1F20D08C0;
  int8x8_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F20D06A8;
  if (*((char *)this + 1719) < 0) {
    operator delete(this[212]);
  }
  SipRegistrationConfig::~SipRegistrationConfig(this + 3);
  *this = &unk_1F20D08C0;
  int8x8_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t DeferredRegistration::type(DeferredRegistration *this)
{
  return 1;
}

void DeferredDeregistration::~DeferredDeregistration(DeferredDeregistration *this)
{
  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *DeferredDeregistration::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred deregistration");
}

uint64_t DeferredDeregistration::type(DeferredDeregistration *this)
{
  return 2;
}

void DeferredDropRegistration::~DeferredDropRegistration(DeferredDropRegistration *this)
{
  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *DeferredDropRegistration::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred drop registration");
}

uint64_t DeferredAction::type(DeferredAction *this)
{
  return 0;
}

void DeferredSubscription::~DeferredSubscription(DeferredSubscription *this)
{
  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D08C0;
  __int16 v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *DeferredSubscription::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred subscription");
}

uint64_t DeferredSubscription::type(DeferredSubscription *this)
{
  return 3;
}

BOOL SipRegistrationClient::registrationInProgress(SipRegistrationClient *this)
{
  return *((_DWORD *)this + 130) != 1;
}

BOOL non-virtual thunk to'SipRegistrationClient::registrationInProgress(SipRegistrationClient *this)
{
  return *((_DWORD *)this + 94) != 1;
}

void *DeferredAction::DeferredAction(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20D08C0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    a1[1] = v3;
    a1[2] = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  return a1;
}

void *DeferredRegistration::DeferredRegistration(void *a1, uint64_t a2, std::__shared_weak_count *a3, const SipRegistrationConfig *a4, long long *a5)
{
  v12[0] = a2;
  v12[1] = (uint64_t)a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    DeferredAction::DeferredAction(a1, v12);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    DeferredAction::DeferredAction(a1, v12);
  }
  *a1 = &unk_1F20D06A8;
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 3), a4);
  uint64_t v9 = (std::string *)(a1 + 212);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    a1[214] = *((void *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1C5478474(_Unwind_Exception *a1)
{
  SipRegistrationConfig::~SipRegistrationConfig(v2);
  *__int16 v1 = &unk_1F20D08C0;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationSubject::~SipRegistrationSubject(SipRegistrationSubject *this)
{
  *(void *)this = &unk_1F20D08F8;
  std::__tree<std::shared_ptr<SipStack>>::destroy(*((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D08F8;
  std::__tree<std::shared_ptr<SipStack>>::destroy(*((void **)this + 2));
  JUMPOUT(0x1C878E320);
}

void SipRegistrationDeferralManager::~SipRegistrationDeferralManager(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  int8x8_t v2 = *this;
  *this = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

void SipContact::~SipContact(SipContact *this)
{
  *(void *)this = &unk_1F20E7900;
  *((void *)this + 58) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((void **)this + 60));
  SipUri::~SipUri((SipContact *)((char *)this + 40));
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  SipContact::~SipContact(this);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__split_buffer<ims::RegistrationIdentity>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  int8x8_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      int8x8_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<ims::RegistrationIdentity>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ims::RegistrationIdentity>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::allocate_shared[abi:ne180100]<SipRegistrationClient,std::allocator<SipRegistrationClient>,SipUserAgent *&,void>(SipUserAgent **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1070uLL);
  std::__shared_ptr_emplace<SipRegistrationClient>::__shared_ptr_emplace[abi:ne180100]<SipUserAgent *&,std::allocator<SipRegistrationClient>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 28, (uint64_t)(v4 + 3));
}

void sub_1C5478848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipRegistrationClient>::__shared_ptr_emplace[abi:ne180100]<SipUserAgent *&,std::allocator<SipRegistrationClient>,0>(void *a1, SipUserAgent **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20D0960;
  SipRegistrationClient::SipRegistrationClient((SipRegistrationClient *)(a1 + 3), *a2);
  return a1;
}

void sub_1C54788A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipRegistrationClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipRegistrationClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipRegistrationClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ATTRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D09B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATTRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D09B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ATTRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<KDDIRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KDDIRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<KDDIRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TTAKRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTAKRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<TTAKRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TMORegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TMORegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<TMORegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<VZWRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VZWRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<VZWRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LazuliRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DefaultRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DefaultRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D0C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<DefaultRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0C98;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0C98;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0C98;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0C98;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C547911C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0D18;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0D18;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0D18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0D18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54793C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0D98;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0D98;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0D98;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0D98;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C547966C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0E18;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0E18;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0E18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0E18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5479914(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0E98;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0E98;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0E98;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0E98;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5479BBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0F18;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D0F18;
  __int16 v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D0F18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D0F18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  __int16 v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5479E64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void __cxx_global_array_dtor_3()
{
  uint64_t v0 = 0x21u;
  do
  {
    if (SHIBYTE(_MergedGlobals_15[v0 + 11]) < 0) {
      operator delete((void *)_MergedGlobals_15[v0 + 9]);
    }
    v0 -= 3;
  }
  while (v0 * 8);
}

uint64_t _GLOBAL__sub_I_SipRegistrationClient_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(_MergedGlobals_15, "RegistrationRefreshTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], _MergedGlobals_15, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC128, "RegistrationExpirationTimer");
  __cxa_atexit(v0, &qword_1EBBDC128, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC140, "FakeDeregistrationTimer");
  __cxa_atexit(v0, &qword_1EBBDC140, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC158, "IPSecInterfaceBringupTimer");
  __cxa_atexit(v0, &qword_1EBBDC158, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC170, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC170[3], "Idle");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC1A0, "InitialRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC1B8, "RefreshRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC1D0, "RetryRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC1E8, "InitializingTransport");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC200, "SendingInitialRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC218, "WaitingForAuth");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC230, "WaitingForInterface");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC248, "SendingAuthorizedRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC260, "Cancel");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_3, 0, &dword_1C51D1000);
}

void sub_1C547A100(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*((char *)v1 - 1) < 0) {
      operator delete((void *)*(v1 - 3));
    }
    v1 -= 3;
    if (v1 == qword_1EBBDC170) {
      _Unwind_Resume(exception_object);
    }
  }
}

void ImsOutStream::~ImsOutStream(ImsOutStream *this)
{
  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
  JUMPOUT(0x1C878E320);
}

uint64_t ObfuscatedString::ObfuscatedString(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)(a1 + 24), a2);
  return a1;
}

void sub_1C547A1E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

ObfuscatedString *ObfuscatedString::str(ObfuscatedString *this)
{
  if (*((char *)this + 23) < 0)
  {
    if (*((void *)this + 1)) {
      return this;
    }
  }
  else if (*((unsigned char *)this + 23))
  {
    return this;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((void *)this + 4)) {
      return this;
    }
  }
  else if (!*((unsigned char *)this + 47))
  {
    return this;
  }
  uint64_t v2 = ims::logger(this);
  ImsLogger::obfuscate(v2, (const void **)this + 3, &v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = v4;
  return this;
}

void *ImsOutStream::putRedactedString(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    uint64_t v5 = (void *)result[1];
    if (v3 < 0) {
      a2 = *(void *)a2;
    }
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v4);
    *((unsigned char *)v2 + 17) = 0;
  }
  else
  {
    if (!*((unsigned char *)result + 17)) {
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)result[1], (uint64_t)"xXx", 3);
    }
    *((unsigned char *)v2 + 17) = 1;
  }
  return result;
}

void *ImsOutStream::putPIIString(uint64_t a1, uint64_t a2)
{
  if (ImsOutStream::isRedacting((ImsOutStream *)a1))
  {
    return ImsOutStream::putRedactedString((void *)a1, a2 + 24);
  }
  else
  {
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), v6, v7);
    *(unsigned char *)(a1 + 17) = 0;
  }
  return result;
}

void *ImsOutStream::putObfuscatedString(ImsOutStream *this, const ObfuscatedString *a2)
{
  if (ImsOutStream::isRedacting(this))
  {
    ObfuscatedString::str(a2);
    uint64_t v4 = (void *)*((void *)this + 1);
    int v5 = *((char *)a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(const ObfuscatedString **)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v7 = *((void *)a2 + 1);
    }
  }
  else
  {
    uint64_t v4 = (void *)*((void *)this + 1);
    long long v10 = (const ObfuscatedString *)*((void *)a2 + 3);
    uint64_t v9 = (uint64_t *)((char *)a2 + 24);
    uint64_t v8 = v10;
    int v11 = *((char *)v9 + 23);
    if (v11 >= 0) {
      uint64_t v6 = (const ObfuscatedString *)v9;
    }
    else {
      uint64_t v6 = v8;
    }
    if (v11 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      uint64_t v7 = v9[1];
    }
  }
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  *((unsigned char *)this + 17) = 0;
  return result;
}

void ImsOutStream::putStringStream(ImsOutStream *this, const ImsStringOutStream *a2)
{
  if (ImsOutStream::isRedacting(this) && !ImsOutStream::isRedacting(a2))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((void *)a2 + 3) + 8, __p);
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    ImsOutStream::putRedactedString(this, (uint64_t)v6);
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  else
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((void *)a2 + 3) + 8, __p);
    if ((v9 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 1), (uint64_t)v4, v5);
    *((unsigned char *)this + 17) = 0;
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C547A4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this, const ImsOutStream *a2)
{
}

void sub_1C547A5C8(_Unwind_Exception *a1)
{
  ImsOutStream::~ImsOutStream(v1);
  _Unwind_Resume(a1);
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this, const ImsStringOutStream *a2)
{
}

void sub_1C547A884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ImsOutStream::~ImsOutStream(v14);
  _Unwind_Resume(a1);
}

uint64_t ImsOutStream::isLog(ImsOutStream *this)
{
  return 0;
}

uint64_t ImsOutStream::isDefaultPublic(ImsOutStream *this)
{
  return 1;
}

uint64_t _GLOBAL__sub_I_ImsStream_cpp()
{
  _MergedGlobals_16 = (uint64_t)&unk_1F20D1038;
  unk_1EBBDC280 = MEMORY[0x1E4FBA250];
  word_1EBBDC288 = 0;
  __cxa_atexit((void (*)(void *))ImsOutStream::~ImsOutStream, &_MergedGlobals_16, &dword_1C51D1000);
  qword_1EBBDC290 = (uint64_t)&unk_1F20D1038;
  unk_1EBBDC298 = MEMORY[0x1E4FBA240];
  word_1EBBDC2A0 = 0;
  return __cxa_atexit((void (*)(void *))ImsOutStream::~ImsOutStream, &qword_1EBBDC290, &dword_1C51D1000);
}

SipHeader *SipAuthenticateHeader::SipAuthenticateHeader(SipHeader *a1, const SipHeader *a2)
{
  SipHeader::SipHeader(a1, a2);
  void *v4 = &unk_1F20D10A0;
  uint64_t v5 = *((void *)a2 + 8);
  if (v5) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *((void *)a1 + 8) = v5;
  return a1;
}

void sub_1C547AB5C(_Unwind_Exception *a1)
{
  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

void SipAuthenticateHeader::~SipAuthenticateHeader(SipAuthenticateHeader *this)
{
  *(void *)this = &unk_1F20D10A0;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

BOOL SipAuthenticateHeader::encodeValue(SipAuthenticateHeader *this, ImsOutStream *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 32))(*((void *)this + 8));
    (*(void (**)(uint64_t, ImsOutStream *, void))(*(void *)v4 + 48))(v4, a2, 0);
  }
  return v2 != 0;
}

BOOL SipAuthenticateHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = SipAuthScheme::createFromString(a2);
  if (v3) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  }
  *(void *)(a1 + 64) = v3;
  return v3 != 0;
}

const char *SipAuthenticateHeader::matchingAuthorizationHeaderName(SipAuthenticateHeader *this)
{
  return "Authorization";
}

void SipMessageDecoder::~SipMessageDecoder(SipMessageDecoder *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t SipMessageDecoder::decode(std::string *this, const std::string::value_type *a2, std::string::pointer *a3, unsigned char *a4)
{
  *a3 = 0;
  if (a4) {
    *a4 = 0;
  }
  int v6 = a2[23];
  if (v6 >= 0) {
    std::string::size_type v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v7 = *((void *)a2 + 1);
  }
  if (!v7)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!this->__r_.__value_.__l.__size_) {
        goto LABEL_236;
      }
    }
    else if (!*((unsigned char *)&this->__r_.__value_.__s + 23))
    {
      goto LABEL_236;
    }
  }
  if (!this[2].__r_.__value_.__l.__size_)
  {
    std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    uint64_t v52 = ims::error((uint64_t)v108, (uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"No message encoding specified.", 30);
    *(unsigned char *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v52 + 17) = 0;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if ((v108[23] & 0x80000000) != 0) {
      operator delete(*(void **)v108);
    }
    goto LABEL_273;
  }
  if (v6 < 0) {
    a2 = *(const std::string::value_type **)a2;
  }
  std::string::append(this, a2, v7);
  uint64_t v8 = (SipMessage **)&this[1];
  if (!this[1].__r_.__value_.__r.__words[0])
  {
    std::string::size_type v53 = std::string::find(this, 10, 0);
    if (v53 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v135, "");
      uint64_t v72 = ims::debug((uint64_t)v108, (uint64_t)&v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"Not enough data in decodeStartLine", 34);
      *(unsigned char *)(v72 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_232;
    }
    std::string::size_type v54 = v53;
    memset(&v103, 0, sizeof(v103));
    std::string::basic_string(&v103, this, 0, v53, (std::allocator<char> *)v108);
    std::string::basic_string((std::string *)v108, this, v54 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v135);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v108;
    this->__r_.__value_.__r.__words[2] = *(void *)&v108[16];
    ims::chomp(&v103, "\r\n\t ", 3);
    std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v103.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      memset(&v135, 0, sizeof(v135));
      std::string::size_type v56 = ims::nextToken(&v103, 0, &v135, 0x20u);
      if (v56 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        uint64_t v79 = ims::error((uint64_t)v108, (uint64_t)&__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v79 + 8), (uint64_t)"SipMessageDecoder: no tokens in start line", 42);
        *(unsigned char *)(v79 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v79 + 17) = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((v108[23] & 0x80000000) != 0) {
          operator delete(*(void **)v108);
        }
      }
      else
      {
        std::string::size_type v57 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v57 = v135.__r_.__value_.__l.__size_;
        }
        if (v57 != 7) {
          goto LABEL_146;
        }
        uint64_t v58 = &v135;
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v58 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        int data = (int)v58->__r_.__value_.__l.__data_;
        int v60 = *(_DWORD *)((char *)v58->__r_.__value_.__r.__words + 3);
        if (data == 793790803 && v60 == 808333871)
        {
          memset(v108, 0, 24);
          std::string::size_type v99 = ims::nextToken(&v103, v56, (std::string *)v108, 0x20u);
          if (v99 != -1)
          {
            if (v108[23] >= 0) {
              long long v100 = v108;
            }
            else {
              long long v100 = *(const char **)v108;
            }
            strtoul(v100, 0, 10);
            memset(&__str, 0, sizeof(__str));
            std::string::basic_string(&__str, &v103, v99, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v133);
            operator new();
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v133, "");
          uint64_t v102 = ims::error((uint64_t)&__str, (uint64_t)&v133);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v102 + 8), (uint64_t)"SipMessageDecoder: no status code in response: ", 47);
          *(unsigned char *)(v102 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v102 + 32))(v102, &v103);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v102 + 17) = 0;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if ((v108[23] & 0x80000000) != 0) {
            operator delete(*(void **)v108);
          }
        }
        else
        {
LABEL_146:
          memset(&__str, 0, sizeof(__str));
          std::string::size_type v62 = ims::nextToken(&v103, v56, &__str, 0x20u);
          if (v62 == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
            std::string::basic_string[abi:ne180100]<0>(&v133, "");
            uint64_t v97 = ims::error((uint64_t)v108, (uint64_t)&v133);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v97 + 8), (uint64_t)"SipMessageDecoder: no Request-URI in start line: ", 49);
            *(unsigned char *)(v97 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(void *)v97 + 32))(v97, &v103);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v97 + 17) = 0;
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v133.__r_.__value_.__l.__data_);
            }
            if ((v108[23] & 0x80000000) != 0) {
              operator delete(*(void **)v108);
            }
          }
          else
          {
            uint64_t v132 = 0;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            long long v112 = 0u;
            long long v113 = 0u;
            long long v111 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            memset(v108, 0, sizeof(v108));
            SipUri::SipUri((SipUri *)v108);
            if (SipUri::fromString((uint64_t)v108, &__str))
            {
              memset(&v133, 0, sizeof(v133));
              if (ims::nextToken(&v103, v62, &v133, 0x20u) == -1)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "sip.decode");
                std::string::basic_string[abi:ne180100]<0>(v104, "");
                uint64_t v68 = ims::error((uint64_t)__p, (uint64_t)v104);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"SipMessageDecoder: no version in start line: ", 45);
                *(unsigned char *)(v68 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v68 + 32))(v68, &v103);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                std::string::size_type v63 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
                if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v63 = v133.__r_.__value_.__l.__size_;
                }
                if (v63 == 7)
                {
                  uint64_t v64 = &v133;
                  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v64 = (std::string *)v133.__r_.__value_.__r.__words[0];
                  }
                  int v65 = (int)v64->__r_.__value_.__l.__data_;
                  int v66 = *(_DWORD *)((char *)v64->__r_.__value_.__r.__words + 3);
                  if (v65 == 793790803 && v66 == 808333871) {
                    operator new();
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "sip.decode");
                std::string::basic_string[abi:ne180100]<0>(v104, "");
                uint64_t v68 = ims::error((uint64_t)__p, (uint64_t)v104);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v68 + 8), (uint64_t)"SipMessageDecoder: invalid SIP version in request start line: ", 62);
                *(unsigned char *)(v68 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(void *)v68 + 32))(v68, &v103);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              *(unsigned char *)(v68 + 17) = 0;
              if (v105 < 0) {
                operator delete(v104[0]);
              }
              if (v107 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v133.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v133, "sip.decode");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v98 = ims::error((uint64_t)&v133, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v98 + 8), (uint64_t)"SipMessageDecoder: invalid Request-URI in start line: ", 54);
              *(unsigned char *)(v98 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(void *)v98 + 32))(v98, &v103);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v98 + 17) = 0;
              if (v107 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v133.__r_.__value_.__l.__data_);
              }
            }
            SipUri::~SipUri((SipUri *)v108);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      *uint64_t v8 = 0;
      if ((*((unsigned char *)&v103.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_273;
      }
    }
    else if ((*((unsigned char *)&v103.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_273:
      char v87 = 0;
      return v87 & 1;
    }
    operator delete(v103.__r_.__value_.__l.__data_);
    goto LABEL_273;
  }
  if (this[1].__r_.__value_.__l.__size_) {
    goto LABEL_12;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v70 = (std::string *)this->__r_.__value_.__r.__words[0];
    int64_t v69 = this->__r_.__value_.__l.__size_;
  }
  else
  {
    int64_t v69 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    uint64_t v70 = this;
  }
  if (v69 < 4) {
    goto LABEL_188;
  }
  unint64_t v73 = (char *)v70 + v69;
  uint64_t v74 = v70;
  while (1)
  {
    uint64_t v75 = (char *)memchr(v74, 13, v69 - 3);
    if (!v75) {
      goto LABEL_188;
    }
    if (*(_DWORD *)v75 == 168626701) {
      break;
    }
    uint64_t v74 = (std::string *)(v75 + 1);
    int64_t v69 = v73 - (char *)v74;
    if (v73 - (char *)v74 < 4) {
      goto LABEL_188;
    }
  }
  if (v75 == v73 || v75 - (char *)v70 == -1)
  {
LABEL_188:
    std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    uint64_t v72 = ims::debug((uint64_t)v108, (uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"still waiting for headers", 25);
    *(unsigned char *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_232;
  }
LABEL_12:
  while (!this[1].__r_.__value_.__l.__size_)
  {
    std::string::size_type v9 = 0;
    memset(&__str, 0, sizeof(__str));
    memset(&v135, 0, sizeof(v135));
LABEL_14:
    v135.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v135.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
    while (1)
    {
      std::string::size_type v10 = std::string::find(this, 10, v9);
      if (v10 == -1)
      {
LABEL_44:
        char v22 = 1;
        goto LABEL_48;
      }
      std::string::size_type v11 = v10;
      std::string::basic_string((std::string *)v108, this, v9, v10 - v9, (std::allocator<char> *)&v133);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      std::string v135 = *(std::string *)v108;
      ims::chomp(&v135, "\r\n\t ", 3);
      std::string::size_type v9 = v11 + 1;
      std::string::size_type v12 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      char v13 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = v135.__r_.__value_.__l.__size_;
      if (!((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v135.__r_.__value_.__r.__words[2])
           : v135.__r_.__value_.__l.__size_))
        break;
      std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
      }
      if (v16)
      {
        std::string::push_back(&__str, 32);
        std::string::size_type v12 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        std::string::size_type v14 = v135.__r_.__value_.__l.__size_;
        char v13 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      }
      if (v13 >= 0) {
        int v17 = &v135;
      }
      else {
        int v17 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if (v13 >= 0) {
        std::string::size_type v18 = v12;
      }
      else {
        std::string::size_type v18 = v14;
      }
      std::string::append(&__str, (const std::string::value_type *)v17, v18);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v19 = this->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v19 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      if (v9 >= v19) {
        goto LABEL_44;
      }
      int v20 = this;
      if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
        int v20 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (v20->__r_.__value_.__s.__data_[v9] != 32)
      {
        uint64_t v21 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
          uint64_t v21 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v21->__r_.__value_.__s.__data_[v9] != 9) {
          break;
        }
      }
      if ((*((unsigned char *)&v135.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_14;
      }
      *v135.__r_.__value_.__l.__data_ = 0;
      v135.__r_.__value_.__l.__size_ = 0;
    }
    std::string::basic_string((std::string *)v108, this, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v133);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    char v22 = 0;
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v108;
    this->__r_.__value_.__r.__words[2] = *(void *)&v108[16];
LABEL_48:
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v135.__r_.__value_.__l.__data_);
      if (v22)
      {
LABEL_50:
        int v23 = 0;
        goto LABEL_113;
      }
    }
    else if (v22)
    {
      goto LABEL_50;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v24 = __str.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      uint64_t v26 = memchr(p_str, 58, v24);
      std::string::size_type v27 = v26 - (unsigned char *)p_str;
      if (v26) {
        BOOL v28 = v27 == -1;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28) {
        goto LABEL_98;
      }
      if (v24 <= v27 + 1) {
        size_t v29 = v27 + 1;
      }
      else {
        size_t v29 = v24;
      }
      uint64_t v30 = &p_str->__r_.__value_.__s.__data_[1];
      int64_t v31 = v26 - (unsigned char *)p_str;
      while (1)
      {
        std::string::size_type v32 = v31 + 1;
        if (v31 + 1 >= v24) {
          break;
        }
        int v33 = v30[v31++];
        if (v33 != 32) {
          goto LABEL_74;
        }
      }
      std::string::size_type v32 = v29;
LABEL_74:
      std::string::size_type v37 = this[2].__r_.__value_.__l.__size_;
      std::string::basic_string((std::string *)v108, &__str, 0, v27, (std::allocator<char> *)&v135);
      std::string::basic_string(&v135, &__str, v32, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v133);
      Header = (unsigned char *)SipMessageEncodingMap::createHeader(v37, (uint64_t)v108, (uint64_t)&v135);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if ((v108[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v108);
        if (!Header) {
          goto LABEL_98;
        }
      }
      else if (!Header)
      {
        goto LABEL_98;
      }
      long long v41 = (const void **)(Header + 8);
      uint64_t v42 = Header[31];
      size_t v43 = *((void *)Header + 2);
      if ((v42 & 0x80u) == 0) {
        uint64_t v44 = Header[31];
      }
      else {
        uint64_t v44 = *((void *)Header + 2);
      }
      if (v44 == 12)
      {
        if ((v42 & 0x80) != 0)
        {
          if (memcmp(*v41, "Content-Type", v43)) {
            goto LABEL_111;
          }
        }
        else if (Header[31])
        {
          uint64_t v46 = "Content-Type";
          while (*(unsigned __int8 *)v41 == *(unsigned __int8 *)v46)
          {
            long long v41 = (const void **)((char *)v41 + 1);
            ++v46;
            if (!--v42) {
              goto LABEL_118;
            }
          }
          goto LABEL_111;
        }
LABEL_118:
        uint64_t v49 = *(void *)Header;
        if (!v50)
        {
          (*(void (**)(unsigned char *))(v49 + 8))(Header);
          std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v135, "");
          uint64_t v51 = ims::error((uint64_t)v108, (uint64_t)&v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"Content-Type header isn't a parameter string", 44);
          *(unsigned char *)(v51 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_122:
          *(unsigned char *)(v51 + 17) = 0;
LABEL_82:
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if ((v108[23] & 0x80000000) != 0) {
            operator delete(*(void **)v108);
          }
LABEL_98:
          int v23 = 2;
          goto LABEL_113;
        }
        this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      }
      else
      {
        if (v44 != 14) {
          goto LABEL_111;
        }
        if ((v42 & 0x80) != 0)
        {
          if (memcmp(*v41, "Content-Length", v43)) {
            goto LABEL_111;
          }
        }
        else if (Header[31])
        {
          long long v45 = "Content-Length";
          while (*(unsigned __int8 *)v41 == *(unsigned __int8 *)v45)
          {
            long long v41 = (const void **)((char *)v41 + 1);
            ++v45;
            if (!--v42) {
              goto LABEL_108;
            }
          }
LABEL_111:
          SipMessage::addHeader(*v8, (SipHeader *)Header, 0);
          goto LABEL_112;
        }
LABEL_108:
        uint64_t v47 = *(void *)Header;
        if (!v48)
        {
          (*(void (**)(unsigned char *))(v47 + 8))(Header);
          std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v135, "");
          uint64_t v51 = ims::error((uint64_t)v108, (uint64_t)&v135);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"Content-Length header isn't a uint32", 36);
          *(unsigned char *)(v51 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_122;
        }
        LODWORD(this[1].__r_.__value_.__r.__words[2]) = v48[15];
        (*(void (**)(unsigned char *))(v47 + 8))(Header);
      }
    }
    else
    {
      uint64_t v34 = (const SipContentTypeHeader *)this[2].__r_.__value_.__l.__data_;
      uint64_t v35 = (SipMessageEncodingMap *)this[2].__r_.__value_.__l.__size_;
      if (v34)
      {
        std::string::size_type Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)this[2].__r_.__value_.__l.__size_, v34);
        this[1].__r_.__value_.__l.__size_ = Body;
        if (!Body) {
          goto LABEL_81;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v108, "");
        std::string::size_type v39 = SipMessageEncodingMap::createBody(v35, (const std::string *)v108);
        this[1].__r_.__value_.__l.__size_ = v39;
        if ((v108[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v108);
          if (!this[1].__r_.__value_.__l.__size_)
          {
LABEL_81:
            std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
            std::string::basic_string[abi:ne180100]<0>(&v135, "");
            uint64_t v40 = ims::error((uint64_t)v108, (uint64_t)&v135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Couldn't create message body of type: ", 38);
            *(unsigned char *)(v40 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(void *)v40 + 32))(v40, this[2].__r_.__value_.__r.__words[0] + 104);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v40 + 17) = 0;
            goto LABEL_82;
          }
        }
        else if (!v39)
        {
          goto LABEL_81;
        }
      }
    }
LABEL_112:
    int v23 = 1;
LABEL_113:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v23 == 2) {
      goto LABEL_209;
    }
    if (!v23)
    {
      std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v135, "");
      uint64_t v72 = ims::debug((uint64_t)v108, (uint64_t)&v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"not enough data in decodeHeader", 31);
      *(unsigned char *)(v72 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_232;
    }
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v71 = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v71 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v76 = LODWORD(this[1].__r_.__value_.__r.__words[2]);
  if (v71 >= v76)
  {
    memset(v108, 0, 24);
    std::string::basic_string((std::string *)v108, this, 0, v76, (std::allocator<char> *)&v135);
    std::string::basic_string(&v135, this, LODWORD(this[1].__r_.__value_.__r.__words[2]), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *this = v135;
    if (((*(uint64_t (**)(std::string::size_type, unsigned char *, std::string::size_type))(*(void *)this[1].__r_.__value_.__l.__size_
                                                                                             + 88))(this[1].__r_.__value_.__l.__size_, v108, this[2].__r_.__value_.__l.__size_) & 1) != 0)
    {
      int v78 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v135, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      uint64_t v80 = ims::warn((uint64_t)&v135, (uint64_t)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v80 + 8), (uint64_t)"failed to decode body of type ", 30);
      *(unsigned char *)(v80 + 17) = 0;
      uint64_t v81 = (*(uint64_t (**)(std::string::size_type))(*(void *)this[1].__r_.__value_.__l.__size_ + 40))(this[1].__r_.__value_.__l.__size_);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 32))(v80, v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v80 + 8), (uint64_t)":", 1);
      *(unsigned char *)(v80 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v80 + 17) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v135, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      uint64_t v82 = (unsigned char *)ims::warn((uint64_t)&v135, (uint64_t)&__str);
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)v82 + 32))(v82, v108);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v82[17] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v135, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      uint64_t v83 = ims::warn((uint64_t)&v135, (uint64_t)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v83 + 8), (uint64_t)"Message so far:", 15);
      *(unsigned char *)(v83 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v83 + 17) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      uint64_t v84 = *v8;
      std::string::basic_string[abi:ne180100]<0>(&v135, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      uint64_t v85 = ims::warn((uint64_t)&v135, (uint64_t)&__str);
      (*(void (**)(SipMessage *, uint64_t))(*(void *)v84 + 16))(v84, v85);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      int v78 = 2;
    }
    if ((v108[23] & 0x80000000) != 0) {
      operator delete(*(void **)v108);
    }
    if (v78 != 1)
    {
LABEL_209:
      if (*v8) {
        (*(void (**)(SipMessage *))(*(void *)*v8 + 8))(*v8);
      }
      *uint64_t v8 = 0;
      this[1].__r_.__value_.__l.__size_ = 0;
      std::string::pointer v86 = this[2].__r_.__value_.__l.__data_;
      if (v86) {
        (*(void (**)(std::string::pointer))(*(void *)v86 + 8))(v86);
      }
      char v87 = 0;
      this[2].__r_.__value_.__r.__words[0] = 0;
      LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
      return v87 & 1;
    }
    std::string::pointer v92 = this[1].__r_.__value_.__l.__data_;
    std::string::size_type v93 = this[1].__r_.__value_.__l.__size_;
    uint64_t v94 = *((void *)v92 + 9);
    if (v94 != v93)
    {
      long long v95 = (SipMessage *)this[1].__r_.__value_.__l.__data_;
      if (v94)
      {
        (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
        long long v95 = *v8;
      }
      *((void *)v92 + 9) = v93;
      std::string::pointer v92 = (std::string::pointer)v95;
    }
    *a3 = v92;
    *uint64_t v8 = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    std::string::pointer v96 = this[2].__r_.__value_.__l.__data_;
    if (v96) {
      (*(void (**)(std::string::pointer))(*(void *)v96 + 8))(v96);
    }
    this[2].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    uint64_t v77 = ims::debug((uint64_t)v108, (uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v77 + 8), (uint64_t)"Still waiting for ", 18);
    *(unsigned char *)(v77 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v77 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v77 + 8), (uint64_t)" body bytes", 11);
    *(unsigned char *)(v77 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v77 + 17) = 0;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if ((v108[23] & 0x80000000) != 0) {
      operator delete(*(void **)v108);
    }
    if (*v8)
    {
      std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v135, "");
      uint64_t v88 = ims::spam((uint64_t)v108, (uint64_t)&v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v88 + 8), (uint64_t)"Message so far:", 15);
      *(unsigned char *)(v88 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v88 + 17) = 0;
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if ((v108[23] & 0x80000000) != 0) {
        operator delete(*(void **)v108);
      }
      long long v89 = *v8;
      std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v135, "");
      uint64_t v90 = ims::spam((uint64_t)v108, (uint64_t)&v135);
      (*(void (**)(SipMessage *, uint64_t))(*(void *)v89 + 16))(v89, v90);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if ((v108[23] & 0x80000000) != 0) {
        operator delete(*(void **)v108);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    uint64_t v91 = ims::spam((uint64_t)v108, (uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)"Current buf (", 13);
    *(unsigned char *)(v91 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v91 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)" bytes): '", 10);
    *(unsigned char *)(v91 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v91 + 32))(v91, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v91 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v91 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v91 + 17) = 0;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if ((v108[23] & 0x80000000) != 0) {
      operator delete(*(void **)v108);
    }
    std::string::basic_string[abi:ne180100]<0>(v108, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    uint64_t v72 = ims::debug((uint64_t)v108, (uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"Not enough data in decodeBody", 29);
    *(unsigned char *)(v72 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_232:
    *(unsigned char *)(v72 + 17) = 0;
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if ((v108[23] & 0x80000000) != 0) {
      operator delete(*(void **)v108);
    }
  }
LABEL_236:
  char v87 = 1;
  return v87 & 1;
}

void sub_1C547C894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  MEMORY[0x1C878E320](v33, 0x10F3C40979C6A35);
  if (*(char *)(v34 - 153) < 0) {
    operator delete(*(void **)(v34 - 176));
  }
  SipUri::~SipUri((SipUri *)&a28);
  if (*(char *)(v34 - 129) < 0) {
    operator delete(*(void **)(v34 - 152));
  }
  if (*(char *)(v34 - 105) < 0) {
    operator delete(*(void **)(v34 - 128));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL SipMessageDecoder::decodeSipfrag(uint64_t a1, const std::string::value_type *a2, std::string::pointer *a3)
{
  SipMessageDecoder::decode((std::string *)a1, a2, a3, 0);
  uint64_t v5 = *(char **)(a1 + 24);
  if (v5)
  {
    *a3 = v5;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return v5 != 0;
}

uint64_t KDDIRegistrationPolicy::KDDIRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationPolicy::SipRegistrationPolicy(a1, (uint64_t *)&off_1F20D1420, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1F20D1168;
  *(void *)(a1 + 104) = &unk_1F20D13C8;
  *(void *)(a1 + 184) = &unk_1F20D1410;
  *(void *)(a1 + 2360) = 0;
  *(unsigned char *)(a1 + 2368) = 0;
  *(void *)(a1 + 2376) = &unk_1F20B2680;
  *(void *)(a1 + 2424) = 0;
  *(void *)(a1 + 2440) = 0;
  *(void *)(a1 + 2432) = 0;
  *(void *)(a1 + 2384) = &_bambiDomain;
  *(_DWORD *)(a1 + 2392) = 0;
  *(void *)(a1 + 2400) = 0;
  *(void *)(a1 + 2416) = 0;
  *(void *)(a1 + 2408) = 0;
  *(void *)(a1 + 2448) = 10;
  return a1;
}

void sub_1C547CD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL KDDIRegistrationPolicy::useNextProxy(KDDIRegistrationPolicy *this)
{
  unsigned int v1 = *((_DWORD *)this + 462);
  return *((_DWORD *)this + 590) >= v1 || *((_DWORD *)this + 591) >= v1;
}

time_t KDDIRegistrationPolicy::handleGeneralErrorFromOneProxy(KDDIRegistrationPolicy *this, const ImsResult *a2)
{
  ++*((_DWORD *)this + 590);
  uint64_t v4 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" of ", 4);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  ImsResult::operator=((uint64_t)this + 2376, (uint64_t)a2);
  return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
}

time_t KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(int8x8_t *this, const ImsResult *a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  ImsResult::operator=((uint64_t)&this[297], (uint64_t)a2);
  ++this[295].i32[0];
  uint64_t v4 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" of ", 4);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (this[295].i32[0] >= (unsigned __int32)this[231].i32[0])
  {
    SipRegistrationPolicy::setProxyOffset((SipRegistrationPolicy *)this, 0);
    (*(void (**)(int8x8_t *))(*(void *)this + 192))(this);
    this[296].i8[0] = 1;
    int8x8_t v8 = this[24];
    std::string::size_type v7 = (std::__shared_weak_count *)this[25];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v9 = operator new(0x20uLL);
    void *v9 = &unk_1F20D1798;
    v9[1] = this;
    void v9[2] = v8;
    v9[3] = v7;
    void v10[3] = v9;
    SipTimerContainer::startTimer(this + 29, (uint64_t)"PdnBringupTimer");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v10);
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return -1;
  }
  else
  {
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy((SipRegistrationPolicy *)this, a2);
  }
}

void sub_1C547D2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

BOOL KDDIRegistrationPolicy::shouldNotifyDelegate(KDDIRegistrationPolicy *this)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 30, "PdnBringupTimer") == 0;
}

double KDDIRegistrationPolicy::clearFailureFlags(KDDIRegistrationPolicy *this)
{
  SipRegistrationPolicy::clearFailureFlags(this);
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  v3[0] = &unk_1F20B2680;
  v3[1] = &_bambiDomain;
  int v4 = 0;
  ImsResult::operator=((uint64_t)this + 2376, (uint64_t)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
  double result = 0.0;
  *((void *)this + 295) = 0;
  return result;
}

void sub_1C547D3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t KDDIRegistrationPolicy::startingRegistration(KDDIRegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2368))
  {
    uint64_t v2 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(void *)this + 32))(this);
    (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"registration is blocked until the PDN is reset", 46);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    return 0;
  }
  else
  {
    return SipRegistrationPolicy::startingRegistration(this);
  }
}

void KDDIRegistrationPolicy::deinitialize(KDDIRegistrationPolicy *this)
{
  *((unsigned char *)this + 2368) = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  v2[0] = &unk_1F20B2680;
  v2[1] = &_bambiDomain;
  int v3 = 0;
  ImsResult::operator=((uint64_t)this + 2376, (uint64_t)v2);
  ImsResult::~ImsResult((ImsResult *)v2);
  SipRegistrationPolicy::deinitialize(this);
}

void sub_1C547D534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void KDDIRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5 == 15)
  {
    if ((v4 & 0x80) == 0)
    {
      if (a2[23])
      {
        long long v6 = "PdnBringupTimer";
        long long v7 = a2;
        while (*v7 == *(unsigned __int8 *)v6)
        {
          ++v7;
          ++v6;
          if (!--v4) {
            goto LABEL_15;
          }
        }
        goto LABEL_12;
      }
LABEL_15:
      int8x8_t v8 = (std::__shared_weak_count *)*((void *)a1 + 48);
      if (v8)
      {
        std::string::size_type v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          std::string::size_type v10 = v9;
          uint64_t v11 = *((void *)a1 + 47);
          if (v11)
          {
            uint64_t v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
            (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"time to reset the PDN.", 22);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 80))(v11, 3, -1, 0);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      return;
    }
    if (!memcmp(*(const void **)a2, "PdnBringupTimer", *((void *)a2 + 1))) {
      goto LABEL_15;
    }
  }
LABEL_12:
  SipRegistrationPolicy::handleTimer(a1, a2);
}

void sub_1C547D724(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'KDDIRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
}

double KDDIRegistrationPolicy::handleProxyChange(KDDIRegistrationPolicy *this)
{
  double result = 0.0;
  *((void *)this + 295) = 0;
  return result;
}

time_t KDDIRegistrationPolicy::handleFatalError(ims **this, const ImsResult *a2)
{
  ImsResult::operator=((uint64_t)(this + 297), (uint64_t)a2);
  SipRegistrationPolicy::clearAllThrottling(this);
  ++*((_DWORD *)this + 590);
  uint64_t v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" of ", 4);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  *((unsigned char *)this + 228) = 1;
  *((_DWORD *)this + 56) = 0;
  return SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)this, a2, 1, 0);
}

time_t KDDIRegistrationPolicy::handleForbiddenUser(ims **this, const SipResponse *a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipResultDomain::makeResult(a2, (uint64_t)v7);
  uint64_t v3 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"not incrementing retry counter for error ", 41);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(_OWORD *, uint64_t))(*(void *)&v7[0] + 16))(v7, v3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  ImsResult::operator=((uint64_t)(this + 297), (uint64_t)v7);
  SipRegistrationPolicy::clearAllThrottling(this);
  *((unsigned char *)this + 228) = 1;
  *((_DWORD *)this + 56) = 0;
  uint64_t v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"scheduling retry with interval 1", 32);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  time_t v5 = SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)this, (const ImsResult *)v7, 1, 0);
  ImsResult::~ImsResult((ImsResult *)v7);
  return v5;
}

void sub_1C547DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL KDDIRegistrationPolicy::isFatalError(KDDIRegistrationPolicy *this, unsigned __int16 a2)
{
  return !*((unsigned char *)this + 228)
      && SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2288, (void **)"REGISTER", a2, 0);
}

BOOL KDDIRegistrationPolicy::isForbiddenUserError(KDDIRegistrationPolicy *this, unsigned __int16 a2)
{
  return !*((unsigned char *)this + 228)
      && SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2320, (void **)"REGISTER", a2, 0);
}

uint64_t KDDIRegistrationPolicy::generalErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  if (!*((unsigned char *)this + 228) && *((uint64_t **)this + 298) == &SipResultDomain::_domain)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
    BOOL v2 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2256, __p, *((_DWORD *)this + 598), 0);
    BOOL v3 = v2;
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if (v3) {
        return 1;
      }
    }
    else if (v2)
    {
      return 1;
    }
  }
  return *((void *)this + 306);
}

void sub_1C547DC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void KDDIRegistrationPolicy::updateConfig(KDDIRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  BOOL v2 = (void *)*((void *)a2 + 120);
  if (*((void *)a2 + 121) - (void)v2 == 16) {
    *((void *)this + 306) = *v2;
  }
  SipRegistrationPolicy::updateConfig((ims **)this, a2);
}

void sub_1C547DE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void KDDIRegistrationPolicy::handleSubscriptionFailed(int8x8_t *this, const ImsResult *a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = this[295].i32[1] + 1;
  this[295].i32[1] = v3;
  if (v3 >= this[231].i32[0])
  {
    uint64_t v8 = (std::__shared_weak_count *)this[48];
    if (v8)
    {
      std::string::size_type v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        std::string::size_type v10 = v9;
        int8x8_t v11 = this[47];
        if (v11)
        {
          uint64_t v12 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
          (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"too many subscription failures. Terminating registration.", 57);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(int8x8_t, uint64_t, void, void))(**(void **)&v11 + 80))(v11, 5, 0, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    char v13 = *(void (**)(int8x8_t *))(*(void *)this + 504);
    v13(this);
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(int8x8_t *, const ImsResult *))(*(void *)this + 64))(this, a2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"subscription attempt ", 21);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" of ", 4);
    *(unsigned char *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" failed", 7);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    int8x8_t v6 = this[24];
    time_t v5 = (std::__shared_weak_count *)this[25];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v7 = operator new(0x20uLL);
    *long long v7 = &unk_1F20D1818;
    v7[1] = this;
    v7[2] = v6;
    v7[3] = v5;
    void v14[3] = v7;
    SipTimerContainer::startTimer(this + 29, (uint64_t)&SipRegistrationPolicy::kSubscriptionRetryTimerName);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C547E1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t KDDIRegistrationPolicy::handleSubscriptionSucceeded(uint64_t this)
{
  *(_DWORD *)(this + 2364) = 0;
  return this;
}

BOOL KDDIRegistrationPolicy::isCSFBModeEnabled(KDDIRegistrationPolicy *this)
{
  return *((unsigned char *)this + 1866) == 0;
}

void KDDIRegistrationPolicy::~KDDIRegistrationPolicy(KDDIRegistrationPolicy *this)
{
  *(void *)this = &unk_1F20D1168;
  *((void *)this + 13) = &unk_1F20D13C8;
  *((void *)this + SipRegistrationClient::handlePathSatisfied(this - 23) = &unk_1F20D1410;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2376));
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20D1420);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D1168;
  *((void *)this + 13) = &unk_1F20D13C8;
  *((void *)this + SipRegistrationClient::handlePathSatisfied(this - 23) = &unk_1F20D1410;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2376));
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20D1420);
  JUMPOUT(0x1C878E320);
}

uint64_t KDDIRegistrationPolicy::maxRetryInterval(KDDIRegistrationPolicy *this)
{
  return 0;
}

uint64_t KDDIRegistrationPolicy::fatalErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 208))();
}

uint64_t KDDIRegistrationPolicy::forbiddenErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  return 1;
}

const char *KDDIRegistrationPolicy::name(KDDIRegistrationPolicy *this)
{
  return "KDDI";
}

void non-virtual thunk to'KDDIRegistrationPolicy::~KDDIRegistrationPolicy(KDDIRegistrationPolicy *this)
{
  unsigned int v1 = (KDDIRegistrationPolicy *)((char *)this - 104);
  *((void *)this - 13) = &unk_1F20D1168;
  *(void *)this = &unk_1F20D13C8;
  *((void *)this + 10) = &unk_1F20D1410;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2272));
  SipRegistrationPolicy::~SipRegistrationPolicy(v1, (uint64_t *)&off_1F20D1420);
}

{
  SipRegistrationPolicy *v1;
  uint64_t vars8;

  unsigned int v1 = (KDDIRegistrationPolicy *)((char *)this - 104);
  *((void *)this - 13) = &unk_1F20D1168;
  *(void *)this = &unk_1F20D13C8;
  *((void *)this + 10) = &unk_1F20D1410;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2272));
  SipRegistrationPolicy::~SipRegistrationPolicy(v1, (uint64_t *)&off_1F20D1420);
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D1798;
  BOOL v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D1798;
  unsigned int v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20D1798;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D1798;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C547E744(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D1818;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D1818;
  unsigned int v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20D1818;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D1818;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      long long v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C547E9EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void IMSWrapperDelegate::addCallDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  if (*a4)
  {
    *(_OWORD *)BOOL v28 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    std::string::size_type v9 = *a4;
    uint64_t v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = v28[1];
    v28[0] = v9;
    v28[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int8x8_t v11 = (void **)(a1 + 136);
    uint64_t v12 = (void *)(a1 + 144);
    if ((void **)(a1 + 144) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Replacing call delegate for ", 28);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    std::string::size_type v14 = (void *)*v12;
    uint64_t v15 = (void *)(a1 + 144);
    std::string::size_type v16 = (void *)(a1 + 144);
    if (!*v12) {
      goto LABEL_23;
    }
    uint64_t v15 = (void *)(a1 + 144);
    while (1)
    {
      while (1)
      {
        std::string::size_type v16 = v14;
        int v17 = v14 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void **)v14 + 4) & 0x80) == 0)break; {
        std::string::size_type v14 = (void *)*v16;
        }
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_23;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)a2) & 0x80) == 0) {
        break;
      }
      uint64_t v15 = v16 + 1;
      std::string::size_type v14 = (void *)v16[1];
      if (!v14) {
        goto LABEL_23;
      }
    }
    std::string::size_type v18 = (void *)*v15;
    if (!*v15)
    {
LABEL_23:
      uint64_t v30 = 0;
      std::string::size_type v19 = operator new(0x68uLL);
      v29[0] = v19;
      v29[1] = (void *)(a1 + 144);
      int v20 = (std::string *)(v19 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19[6] = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v19 + 11) = 0u;
      *(_OWORD *)(v19 + 9) = 0u;
      *(_OWORD *)(v19 + 7) = 0u;
      LOBYTE(v30) = 1;
      *std::string::size_type v19 = 0;
      v19[1] = 0;
      void v19[2] = v16;
      *uint64_t v15 = v19;
      uint64_t v21 = (void *)**v11;
      if (v21)
      {
        *int8x8_t v11 = v21;
        std::string::size_type v19 = (void *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), v19);
      ++*(void *)(a1 + 152);
      std::string::size_type v18 = v29[0];
      v29[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
    }
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)__str);
    if (v18 + 10 != (void *)&__str[24]) {
      ims::Dispatch::reset((NSObject **)v18 + 10, *(dispatch_object_t *)&__str[24]);
    }
    int v23 = v28[0];
    char v22 = v28[1];
    if (v28[1]) {
      atomic_fetch_add_explicit(&v28[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v24 = (std::__shared_weak_count *)v18[12];
    v18[11] = v23;
    v18[12] = v22;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v28[1]) {
      std::__shared_weak_count::__release_weak(v28[1]);
    }
    if (*(void *)&__str[24]) {
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
}

void sub_1C547ED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void IMSWrapperDelegate::addStackDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  if (*a4)
  {
    *(_OWORD *)BOOL v28 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    std::string::size_type v9 = *a4;
    uint64_t v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = v28[1];
    v28[0] = v9;
    v28[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int8x8_t v11 = (void **)(a1 + 64);
    uint64_t v12 = (void *)(a1 + 72);
    if ((void **)(a1 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Replacing stack delegate for ", 29);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    std::string::size_type v14 = (void *)*v12;
    uint64_t v15 = (void *)(a1 + 72);
    std::string::size_type v16 = (void *)(a1 + 72);
    if (!*v12) {
      goto LABEL_23;
    }
    uint64_t v15 = (void *)(a1 + 72);
    while (1)
    {
      while (1)
      {
        std::string::size_type v16 = v14;
        int v17 = v14 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void **)v14 + 4) & 0x80) == 0)break; {
        std::string::size_type v14 = (void *)*v16;
        }
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_23;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)a2) & 0x80) == 0) {
        break;
      }
      uint64_t v15 = v16 + 1;
      std::string::size_type v14 = (void *)v16[1];
      if (!v14) {
        goto LABEL_23;
      }
    }
    std::string::size_type v18 = (void *)*v15;
    if (!*v15)
    {
LABEL_23:
      uint64_t v30 = 0;
      std::string::size_type v19 = operator new(0x68uLL);
      v29[0] = v19;
      v29[1] = (void *)(a1 + 72);
      int v20 = (std::string *)(v19 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19[6] = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v19 + 11) = 0u;
      *(_OWORD *)(v19 + 9) = 0u;
      *(_OWORD *)(v19 + 7) = 0u;
      LOBYTE(v30) = 1;
      *std::string::size_type v19 = 0;
      v19[1] = 0;
      void v19[2] = v16;
      *uint64_t v15 = v19;
      uint64_t v21 = (void *)**v11;
      if (v21)
      {
        *int8x8_t v11 = v21;
        std::string::size_type v19 = (void *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v19);
      ++*(void *)(a1 + 80);
      std::string::size_type v18 = v29[0];
      v29[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
    }
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)__str);
    if (v18 + 10 != (void *)&__str[24]) {
      ims::Dispatch::reset((NSObject **)v18 + 10, *(dispatch_object_t *)&__str[24]);
    }
    int v23 = v28[0];
    char v22 = v28[1];
    if (v28[1]) {
      atomic_fetch_add_explicit(&v28[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v24 = (std::__shared_weak_count *)v18[12];
    v18[11] = v23;
    v18[12] = v22;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v28[1]) {
      std::__shared_weak_count::__release_weak(v28[1]);
    }
    if (*(void *)&__str[24]) {
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
}

void sub_1C547F12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void IMSWrapperDelegate::addCallManagerDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  if (*a4)
  {
    *(_OWORD *)uint64_t v30 = 0u;
    memset(v29, 0, sizeof(v29));
    std::string::operator=((std::string *)v29, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&v29[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&v29[24], 0);
    }
    std::string::size_type v9 = *a4;
    uint64_t v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = v30[1];
    v30[0] = v9;
    v30[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int8x8_t v11 = *a4;
    if (v11)
    {
      if (v12) {
        int8x8_t v11 = (std::__shared_weak_count *)v12[4];
      }
      if (*(char *)(a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else {
        std::string __str = *(std::string *)(a1 + 24);
      }
      std::string::operator=((std::string *)&v11->__shared_owners_, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v13 = (void **)(a1 + 88);
    std::string::size_type v14 = (std::string::size_type **)(a1 + 96);
    if ((void **)(a1 + 96) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v15 = ims::debug((uint64_t)&__str, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Replacing manager delegate for ", 31);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v16 = *v14;
    int v17 = (std::string::size_type *)(a1 + 96);
    std::string::size_type v18 = (std::string::size_type *)(a1 + 96);
    if (!*v14) {
      goto LABEL_31;
    }
    int v17 = (std::string::size_type *)(a1 + 96);
    while (1)
    {
      while (1)
      {
        std::string::size_type v18 = v16;
        std::string::size_type v19 = v16 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void **)v16 + 4) & 0x80) == 0)break; {
        std::string::size_type v16 = (std::string::size_type *)*v18;
        }
        int v17 = v18;
        if (!*v18) {
          goto LABEL_31;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (void **)a2) & 0x80) == 0) {
        break;
      }
      int v17 = v18 + 1;
      std::string::size_type v16 = (std::string::size_type *)v18[1];
      if (!v16) {
        goto LABEL_31;
      }
    }
    std::string::size_type v20 = *v17;
    if (!*v17)
    {
LABEL_31:
      __str.__r_.__value_.__r.__words[2] = 0;
      uint64_t v21 = (char *)operator new(0x68uLL);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      __str.__r_.__value_.__l.__size_ = a1 + 96;
      char v22 = (std::string *)(v21 + 32);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        *((void *)v21 + 6) = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v21 + 88) = 0u;
      *(_OWORD *)(v21 + 72) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      __str.__r_.__value_.__s.__data_[16] = 1;
      *(void *)uint64_t v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = v18;
      *int v17 = (std::string::size_type)v21;
      int v23 = (void *)**v13;
      if (v23)
      {
        *uint64_t v13 = v23;
        uint64_t v21 = (char *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), (uint64_t *)v21);
      ++*(void *)(a1 + 104);
      std::string::size_type v20 = __str.__r_.__value_.__r.__words[0];
      __str.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__str);
    }
    std::string::operator=((std::string *)(v20 + 56), (const std::string *)v29);
    if ((unsigned char *)(v20 + 80) != &v29[24]) {
      ims::Dispatch::reset((NSObject **)(v20 + 80), *(dispatch_object_t *)&v29[24]);
    }
    uint64_t v25 = v30[0];
    size_t v24 = v30[1];
    if (v30[1]) {
      atomic_fetch_add_explicit(&v30[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    char v26 = *(std::__shared_weak_count **)(v20 + 96);
    *(void *)(v20 + 88) = v25;
    *(void *)(v20 + 96) = v24;
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
    if (v30[1]) {
      std::__shared_weak_count::__release_weak(v30[1]);
    }
    if (*(void *)&v29[24]) {
      dispatch_release(*(dispatch_object_t *)&v29[24]);
    }
    if ((v29[23] & 0x80000000) != 0) {
      operator delete(*(void **)v29);
    }
  }
}

void sub_1C547F540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void IMSWrapperDelegate::addMessageDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  if (*a4)
  {
    *(_OWORD *)char v28 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    std::string::size_type v9 = *a4;
    uint64_t v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = v28[1];
    v28[0] = v9;
    v28[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int8x8_t v11 = (void **)(a1 + 112);
    uint64_t v12 = (void *)(a1 + 120);
    if ((void **)(a1 + 120) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 112, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Replacing message delegate for ", 31);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    std::string::size_type v14 = (void *)*v12;
    uint64_t v15 = (void *)(a1 + 120);
    std::string::size_type v16 = (void *)(a1 + 120);
    if (!*v12) {
      goto LABEL_23;
    }
    uint64_t v15 = (void *)(a1 + 120);
    while (1)
    {
      while (1)
      {
        std::string::size_type v16 = v14;
        int v17 = v14 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void **)v14 + 4) & 0x80) == 0)break; {
        std::string::size_type v14 = (void *)*v16;
        }
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_23;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)a2) & 0x80) == 0) {
        break;
      }
      uint64_t v15 = v16 + 1;
      std::string::size_type v14 = (void *)v16[1];
      if (!v14) {
        goto LABEL_23;
      }
    }
    std::string::size_type v18 = (void *)*v15;
    if (!*v15)
    {
LABEL_23:
      uint64_t v30 = 0;
      std::string::size_type v19 = operator new(0x68uLL);
      v29[0] = v19;
      v29[1] = (void *)(a1 + 120);
      std::string::size_type v20 = (std::string *)(v19 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19[6] = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v19 + 11) = 0u;
      *(_OWORD *)(v19 + 9) = 0u;
      *(_OWORD *)(v19 + 7) = 0u;
      LOBYTE(v30) = 1;
      *std::string::size_type v19 = 0;
      v19[1] = 0;
      void v19[2] = v16;
      *uint64_t v15 = v19;
      uint64_t v21 = (void *)**v11;
      if (v21)
      {
        *int8x8_t v11 = v21;
        std::string::size_type v19 = (void *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v19);
      ++*(void *)(a1 + 128);
      std::string::size_type v18 = v29[0];
      v29[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
    }
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)__str);
    if (v18 + 10 != (void *)&__str[24]) {
      ims::Dispatch::reset((NSObject **)v18 + 10, *(dispatch_object_t *)&__str[24]);
    }
    int v23 = v28[0];
    char v22 = v28[1];
    if (v28[1]) {
      atomic_fetch_add_explicit(&v28[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v24 = (std::__shared_weak_count *)v18[12];
    v18[11] = v23;
    v18[12] = v22;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v28[1]) {
      std::__shared_weak_count::__release_weak(v28[1]);
    }
    if (*(void *)&__str[24]) {
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
}

void sub_1C547F8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void IMSWrapperDelegate::addXcapDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  if (*a4)
  {
    *(_OWORD *)char v28 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    std::string::size_type v9 = *a4;
    uint64_t v8 = a4[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v10 = v28[1];
    v28[0] = v9;
    v28[1] = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    int8x8_t v11 = (void **)(a1 + 160);
    uint64_t v12 = (void *)(a1 + 168);
    if ((void **)(a1 + 168) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 160, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v29, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Replacing xcap delegate for ", 28);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    std::string::size_type v14 = (void *)*v12;
    uint64_t v15 = (void *)(a1 + 168);
    std::string::size_type v16 = (void *)(a1 + 168);
    if (!*v12) {
      goto LABEL_23;
    }
    uint64_t v15 = (void *)(a1 + 168);
    while (1)
    {
      while (1)
      {
        std::string::size_type v16 = v14;
        int v17 = v14 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, (void **)v14 + 4) & 0x80) == 0)break; {
        std::string::size_type v14 = (void *)*v16;
        }
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_23;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)a2) & 0x80) == 0) {
        break;
      }
      uint64_t v15 = v16 + 1;
      std::string::size_type v14 = (void *)v16[1];
      if (!v14) {
        goto LABEL_23;
      }
    }
    std::string::size_type v18 = (void *)*v15;
    if (!*v15)
    {
LABEL_23:
      uint64_t v30 = 0;
      std::string::size_type v19 = operator new(0x68uLL);
      v29[0] = v19;
      v29[1] = (void *)(a1 + 168);
      std::string::size_type v20 = (std::string *)(v19 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v19[6] = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v19 + 11) = 0u;
      *(_OWORD *)(v19 + 9) = 0u;
      *(_OWORD *)(v19 + 7) = 0u;
      LOBYTE(v30) = 1;
      *std::string::size_type v19 = 0;
      v19[1] = 0;
      void v19[2] = v16;
      *uint64_t v15 = v19;
      uint64_t v21 = (void *)**v11;
      if (v21)
      {
        *int8x8_t v11 = v21;
        std::string::size_type v19 = (void *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v19);
      ++*(void *)(a1 + 176);
      std::string::size_type v18 = v29[0];
      v29[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
    }
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)__str);
    if (v18 + 10 != (void *)&__str[24]) {
      ims::Dispatch::reset((NSObject **)v18 + 10, *(dispatch_object_t *)&__str[24]);
    }
    int v23 = v28[0];
    char v22 = v28[1];
    if (v28[1]) {
      atomic_fetch_add_explicit(&v28[1]->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v24 = (std::__shared_weak_count *)v18[12];
    v18[11] = v23;
    v18[12] = v22;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v28[1]) {
      std::__shared_weak_count::__release_weak(v28[1]);
    }
    if (*(void *)&__str[24]) {
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
}

void sub_1C547FC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void IMSWrapperDelegate::removeCallDelegate(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 136);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, a2);
  if ((uint64_t *)(a1 + 144) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeStackDelegate(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 64);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeCallManagerDelegate(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 88);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, a2);
  if ((uint64_t *)(a1 + 96) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeMessageDelegate(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 112);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 112, a2);
  if ((uint64_t *)(a1 + 120) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeXcapDelegate(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 160);
  uint64_t v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 160, a2);
  if ((uint64_t *)(a1 + 168) != v4)
  {
    uint64_t v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::dumpState(IMSWrapperDelegate *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  StackEventDelegates:", 22);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (char *)*((void *)this + 8);
  uint64_t v42 = this;
  int8x8_t v6 = (char *)this + 72;
  if (v5 != (char *)this + 72)
  {
    do
    {
      uint64_t v8 = (const void *)*((void *)v5 + 11);
      long long v7 = (std::__shared_weak_count *)*((void *)v5 + 12);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, (void *)v5 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (!v7 || v7->__shared_owners_ == -1)
      {
        char v9 = 1;
      }
      else
      {
        uint64_t v2 = std::__shared_weak_count::lock(v7);
        if (v2)
        {
          if (v8
          {
            char v9 = 0;
          }
          else
          {
            char v9 = 0;
          }
        }
        else
        {
          char v9 = 0;
        }
      }
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v2) {
        char v10 = v9;
      }
      else {
        char v10 = 1;
      }
      if ((v10 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      int8x8_t v11 = (char *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          int8x8_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  CallManagerEventDelegates:", 28);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::string::size_type v14 = (void *)*((void *)v42 + 11);
  if (v14 != (void *)((char *)v42 + 96))
  {
    do
    {
      std::string::size_type v16 = (const void *)v14[11];
      uint64_t v15 = (std::__shared_weak_count *)v14[12];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, v14 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (!v15 || v15->__shared_owners_ == -1)
      {
        char v17 = 1;
      }
      else
      {
        uint64_t v2 = std::__shared_weak_count::lock(v15);
        if (v2)
        {
          if (v16
          {
            char v17 = 0;
          }
          else
          {
            char v17 = 0;
          }
        }
        else
        {
          char v17 = 0;
        }
      }
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v2) {
        char v18 = v17;
      }
      else {
        char v18 = 1;
      }
      if ((v18 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      std::string::size_type v19 = (void *)v14[1];
      if (v19)
      {
        do
        {
          std::string::size_type v20 = v19;
          std::string::size_type v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string::size_type v20 = (void *)v14[2];
          BOOL v13 = *v20 == (void)v14;
          std::string::size_type v14 = v20;
        }
        while (!v13);
      }
      std::string::size_type v14 = v20;
    }
    while (v20 != (void *)((char *)v42 + 96));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  MessageEventDelegates:", 24);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v21 = (void *)*((void *)v42 + 14);
  if (v21 != (void *)((char *)v42 + 120))
  {
    do
    {
      int v23 = (const void *)v21[11];
      char v22 = (std::__shared_weak_count *)v21[12];
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, v21 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (!v22 || v22->__shared_owners_ == -1)
      {
        char v24 = 1;
      }
      else
      {
        uint64_t v2 = std::__shared_weak_count::lock(v22);
        if (v2)
        {
          if (v23
          {
            char v24 = 0;
          }
          else
          {
            char v24 = 0;
          }
        }
        else
        {
          char v24 = 0;
        }
      }
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v2) {
        char v25 = v24;
      }
      else {
        char v25 = 1;
      }
      if ((v25 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (v22) {
        std::__shared_weak_count::__release_weak(v22);
      }
      char v26 = (void *)v21[1];
      if (v26)
      {
        do
        {
          std::string::size_type v27 = v26;
          char v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          std::string::size_type v27 = (void *)v21[2];
          BOOL v13 = *v27 == (void)v21;
          uint64_t v21 = v27;
        }
        while (!v13);
      }
      uint64_t v21 = v27;
    }
    while (v27 != (void *)((char *)v42 + 120));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  CallEventDelegates:", 21);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  char v28 = (std::__shared_weak_count *)*((void *)v42 + 17);
  if (v28 != (std::__shared_weak_count *)((char *)v42 + 144))
  {
    do
    {
      shared_weak_owners = (const void *)v28[3].__shared_weak_owners_;
      size_t v29 = (std::__shared_weak_count *)v28[4].__vftable;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, uint64_t *))(*(void *)a2 + 32))(a2, &v28[1].__shared_owners_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (!v29 || v29->__shared_owners_ == -1)
      {
        char v31 = 1;
      }
      else
      {
        uint64_t v2 = std::__shared_weak_count::lock(v29);
        if (v2)
        {
          if (shared_weak_owners
          {
            char v31 = 0;
          }
          else
          {
            char v31 = 0;
          }
        }
        else
        {
          char v31 = 0;
        }
      }
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v2) {
        char v32 = v31;
      }
      else {
        char v32 = 1;
      }
      if ((v32 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (v29) {
        std::__shared_weak_count::__release_weak(v29);
      }
      shared_owners = (std::__shared_weak_count *)v28->__shared_owners_;
      if (shared_owners)
      {
        do
        {
          uint64_t v34 = (std::__shared_weak_count **)shared_owners;
          shared_owners = (std::__shared_weak_count *)shared_owners->__vftable;
        }
        while (shared_owners);
      }
      else
      {
        do
        {
          uint64_t v34 = (std::__shared_weak_count **)v28->__shared_weak_owners_;
          BOOL v13 = *v34 == v28;
          char v28 = (std::__shared_weak_count *)v34;
        }
        while (!v13);
      }
      char v28 = (std::__shared_weak_count *)v34;
    }
    while (v34 != (std::__shared_weak_count **)((char *)v42 + 144));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  XCAPEventDelegates:", 21);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v35 = (void *)*((void *)v42 + 20);
  if (v35 != (void *)((char *)v42 + 168))
  {
    do
    {
      std::string::size_type v37 = (const void *)v35[11];
      uint64_t v36 = (std::__shared_weak_count *)v35[12];
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, v35 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (!v36 || v36->__shared_owners_ == -1)
      {
        char v38 = 1;
      }
      else
      {
        char v28 = std::__shared_weak_count::lock(v36);
        if (v28)
        {
          if (v37
          {
            char v38 = 0;
          }
          else
          {
            char v38 = 0;
          }
        }
        else
        {
          char v38 = 0;
        }
      }
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v28) {
        char v39 = v38;
      }
      else {
        char v39 = 1;
      }
      if ((v39 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v36) {
        std::__shared_weak_count::__release_weak(v36);
      }
      uint64_t v40 = (void *)v35[1];
      if (v40)
      {
        do
        {
          long long v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          long long v41 = (void *)v35[2];
          BOOL v13 = *v41 == (void)v35;
          uint64_t v35 = v41;
        }
        while (!v13);
      }
      uint64_t v35 = v41;
    }
    while (v41 != (void *)((char *)v42 + 168));
  }
}

void sub_1C5480A64(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void IMSWrapperDelegate::handleDisconnectEvent(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  memset(&v37, 0, sizeof(v37));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v37 = *(std::string *)a2;
  }
  memset(&v36, 0, sizeof(v36));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v36 = *(std::string *)a3;
  }
  memset(v35, 0, sizeof(v35));
  __int16 v33 = *a4;
  char v34 = *((unsigned char *)a4 + 2);
  if (*((char *)a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[5], *((const std::string::value_type **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    *(_OWORD *)&v35[5] = *(_OWORD *)(a4 + 4);
    *(void *)&v35[21] = *((void *)a4 + 3);
  }
  *(_DWORD *)&v35[29] = *((_DWORD *)a4 + 8);
  v35[33] = *((unsigned char *)a4 + 36);
  long long v7 = (std::string *)&v35[37];
  if (*((char *)a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[37], *((const std::string::value_type **)a4 + 5), *((void *)a4 + 6));
  }
  else
  {
    *(_OWORD *)&v35[37] = *(_OWORD *)(a4 + 20);
    *(void *)&v35[53] = *((void *)a4 + 7);
  }
  if (*((char *)a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v35[61], *((const std::string::value_type **)a4 + 8), *((void *)a4 + 9));
  }
  else
  {
    *(_OWORD *)&v35[61] = *((_OWORD *)a4 + 4);
    *(void *)&v35[77] = *((void *)a4 + 10);
  }
  uint64_t v8 = *(void **)(a1 + 136);
  char v17 = (void *)(a1 + 144);
  if (v8 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v9 = ims::debug((uint64_t)v31, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Dispatching handleDisconnectEvent callback for ", 47);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, v8 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      char v10 = v7;
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      int8x8_t v11 = v8[10];
      if (v11) {
        dispatch_retain((dispatch_object_t)v8[10]);
      }
      uint64_t v12 = v8[11];
      BOOL v13 = (std::__shared_weak_count *)v8[12];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate21handleDisconnectEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_RKN3ims14DisconnectInfoE_block_invoke;
      block[3] = &__block_descriptor_tmp_44;
      block[4] = v12;
      std::string::size_type v19 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v20, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      }
      else {
        std::string v20 = v37;
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v21, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else {
        std::string v21 = v36;
      }
      __int16 v22 = v33;
      char v23 = v34;
      if ((v35[28] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)&v35[5], *(std::string::size_type *)&v35[13]);
      }
      else {
        std::string v24 = *(std::string *)&v35[5];
      }
      int v25 = *(_DWORD *)&v35[29];
      char v26 = v35[33];
      if ((v35[60] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)&v35[37], *(std::string::size_type *)&v35[45]);
      }
      else {
        std::string v27 = *v10;
      }
      if ((v35[84] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)&v35[61], *(std::string::size_type *)&v35[69]);
      }
      else {
        std::string v28 = *(std::string *)&v35[61];
      }
      if (v11) {
        dispatch_async(v11, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v11) {
        dispatch_release(v11);
      }
      std::string::size_type v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          std::string::size_type v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v8[2];
          BOOL v16 = *v15 == (void)v8;
          uint64_t v8 = v15;
        }
        while (!v16);
      }
      uint64_t v8 = v15;
      long long v7 = v10;
    }
    while (v15 != v17);
  }
  if ((v35[84] & 0x80000000) != 0) {
    operator delete(*(void **)&v35[61]);
  }
  if ((v35[60] & 0x80000000) != 0) {
    operator delete(*(void **)&v35[37]);
  }
  if ((v35[28] & 0x80000000) != 0) {
    operator delete(*(void **)&v35[5]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_1C5481018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v57 - 153) < 0) {
    operator delete(*(void **)(v57 - 176));
  }
  if (*(char *)(v57 - 121) < 0) {
    operator delete(*(void **)(v57 - 144));
  }
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate21handleDisconnectEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_RKN3ims14DisconnectInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, a1 + 48, a1 + 72, a1 + 96);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5481254(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c26_ZTSN3ims14DisconnectInfoE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
  }
  __int16 v7 = *(_WORD *)(a2 + 96);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(_WORD *)(a1 + 96) = v7;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 104), *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v9;
  if (*(char *)(a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v10;
  }
  int8x8_t v11 = (std::string *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_1C54813C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  __int16 v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c26_ZTSN3ims14DisconnectInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void IMSWrapperDelegate::handleEmergencySessionRequired(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v25 = *(std::string *)a2;
  }
  memset(&v24, 0, sizeof(v24));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v24 = *(std::string *)a3;
  }
  __int16 v7 = *(void **)(a1 + 136);
  if (v7 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Dispatching handleEmergencySessionRequired callback for ", 56);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 32))(v8, v7 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      int v9 = v7[10];
      if (v9) {
        dispatch_retain((dispatch_object_t)v7[10]);
      }
      uint64_t v10 = v7[11];
      int8x8_t v11 = (std::__shared_weak_count *)v7[12];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate30handleEmergencySessionRequiredERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_b_block_invoke;
      block[3] = &__block_descriptor_tmp_18_5;
      block[4] = v10;
      BOOL v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v25;
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v18, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        std::string v18 = v24;
      }
      char v19 = a4;
      if (v9) {
        dispatch_async(v9, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      long long v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          __int16 v7 = v13;
        }
        while (!v14);
      }
      __int16 v7 = v13;
    }
    while (v13 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C54817FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 121) < 0) {
    operator delete(*(void **)(v46 - 144));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleEmergencySessionRequiredERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_b_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t, void))(v6 + 24))(v5, a1 + 48, a1 + 72, *(unsigned __int8 *)(a1 + 96));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54819B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C5481A6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void IMSWrapperDelegate::handleActiveEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  uint64_t v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleActiveEvent callback for ", 43);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate17handleActiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_20_1;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5481DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleActiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 32))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5481F28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5481FA4(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void IMSWrapperDelegate::handleInactiveEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleInactiveEvent callback for ", 45);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate19handleInactiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_24_2;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C54822B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate19handleInactiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 40))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5482438(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTryingEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleTryingEvent callback for ", 43);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate17handleTryingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_28_2;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C54826F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleTryingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 48))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5482874(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleRingingEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleRingingEvent callback for ", 44);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate18handleRingingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_32_0;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5482B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate18handleRingingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 56))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5482CB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleJoinedEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleJoinedEvent callback for ", 43);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate17handleJoinedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_36_2;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5482F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleJoinedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 64))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54830EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleInProgressEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleInProgressEvent callback for ", 47);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate21handleInProgressEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_40_0;
      block[4] = v6;
      long long v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C54833A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate21handleInProgressEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 72))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5483528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleProceedingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v22, 0, sizeof(v22));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v21 = *(std::string *)a3;
  }
  long long v5 = *(void **)(a1 + 136);
  if (v5 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleProceedingEvent callback for ", 47);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      long long v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      int v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate21handleProceedingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke;
      v13[3] = &__block_descriptor_tmp_44;
      v13[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v22;
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v21;
      }
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1C548385C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 105) < 0) {
    operator delete(*(void **)(v44 - 128));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate21handleProceedingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 80))(v5, a1 + 48, a1 + 72);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5483A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleMediaStatusEvent(uint64_t a1, uint64_t a2, char a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 136);
  if (v5 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleMediaStatusEvent callback for ", 48);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      long long v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      int v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate22handleMediaStatusEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      v13[3] = &__block_descriptor_tmp_48_4;
      v13[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      char v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5483CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate22handleMediaStatusEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 88))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5483E58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleRingbackToneEvent(uint64_t a1, uint64_t a2, char a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 136);
  if (v5 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleRingbackToneEvent callback for ", 49);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      long long v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      int v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate23handleRingbackToneEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      v13[3] = &__block_descriptor_tmp_52;
      v13[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      char v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5484114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleRingbackToneEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 96))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548429C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleHoldFailed(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleHoldFailed callback for ", 42);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate16handleHoldFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_56_2;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5484554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate16handleHoldFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 104))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54846D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleResumeFailed(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleResumeFailed callback for ", 44);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate18handleResumeFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_60_1;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5484990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate18handleResumeFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 112))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5484B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaDetectedEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleTextMediaDetectedEvent callback for ", 54);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate28handleTextMediaDetectedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_64_1;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5484DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate28handleTextMediaDetectedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 120))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5484F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaDeactivatedEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleTextMediaDeactivatedEvent callback for ", 57);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate31handleTextMediaDeactivatedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_68_0;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5485208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate31handleTextMediaDeactivatedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 128))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548538C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaRemoteDirectionEvent(uint64_t a1, uint64_t a2, char a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 136);
  if (v5 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleTextMediaRemoteDirectionEvent callback for ", 61);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      long long v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      int v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate35handleTextMediaRemoteDirectionEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      v13[3] = &__block_descriptor_tmp_72_0;
      v13[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      char v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5485648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate35handleTextMediaRemoteDirectionEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 136))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54857D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleAcknowledgedEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleAcknowledgedEvent callback for ", 49);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate23handleAcknowledgedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_76_1;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5485A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleAcknowledgedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 144))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5485C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleMediaInitializedEvent(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleMediaInitializedEvent callback for ", 53);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      long long v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate27handleMediaInitializedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_80;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5485EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate27handleMediaInitializedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 152))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5486048(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleAudioStreamTokensEvent(uint64_t a1, uint64_t a2, const void **a3)
{
  memset(&v23, 0, sizeof(v23));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  long long v5 = *a3;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *(void **)(a1 + 136);
  if (v6 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Dispatching handleAudioStreamTokensEvent callback for ", 54);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 32))(v7, v6 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      uint64_t v8 = v6[10];
      if (v8) {
        dispatch_retain((dispatch_object_t)v6[10]);
      }
      uint64_t v9 = v6[11];
      BOOL v10 = (std::__shared_weak_count *)v6[12];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate28handleAudioStreamTokensEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
      block[3] = &__block_descriptor_tmp_82_1;
      block[4] = v9;
      char v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v23;
      }
      CFTypeRef v17 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v8) {
        dispatch_async(v8, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v8) {
        dispatch_release(v8);
      }
      int8x8_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          int8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != (void *)(a1 + 144));
  }
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&cf);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1C5486340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(v41);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v43)
    {
LABEL_5:
      if (!v42)
      {
LABEL_10:
        ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&a35);
        if (a41 < 0) {
          operator delete(a36);
        }
        _Unwind_Resume(a1);
      }
LABEL_9:
      dispatch_release(v42);
      goto LABEL_10;
    }
  }
  else if (!v43)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v43);
  if (!v42) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate28handleAudioStreamTokensEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = (const void *)a1[4];
      if (v5)
      {
        if (v6) {
          long long v5 = (const void *)v6[1];
        }
        uint64_t v7 = (const void *)a1[9];
        uint64_t v8 = v7;
        if (v7) {
          CFRetain(v7);
        }
        (*(void (**)(const void *, void *, const void **))(*(void *)v5 + 176))(v5, a1 + 6, &v8);
        ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54864DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(const void **)(a2 + 72);
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(a1[3].__r_.__value_.__r.__words, v7);
}

void sub_1C5486578(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void IMSWrapperDelegate::handleTextStreamTokenEvent(uint64_t a1, uint64_t a2, const void **a3)
{
  memset(&v23, 0, sizeof(v23));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  long long v5 = *a3;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  long long v6 = *(void **)(a1 + 136);
  if (v6 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Dispatching handleTextStreamTokenEvent callback for ", 52);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 32))(v7, v6 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      uint64_t v8 = v6[10];
      if (v8) {
        dispatch_retain((dispatch_object_t)v6[10]);
      }
      uint64_t v9 = v6[11];
      BOOL v10 = (std::__shared_weak_count *)v6[12];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate26handleTextStreamTokenEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK10__CFNumberEE_block_invoke;
      block[3] = &__block_descriptor_tmp_84;
      block[4] = v9;
      char v15 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v16, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      }
      else {
        std::string v16 = v23;
      }
      CFTypeRef v17 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v8) {
        dispatch_async(v8, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      if (v8) {
        dispatch_release(v8);
      }
      int8x8_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          int8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          long long v6 = v12;
        }
        while (!v13);
      }
      long long v6 = v12;
    }
    while (v12 != (void *)(a1 + 144));
  }
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&cf);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1C54868D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(v41);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v43)
    {
LABEL_5:
      if (!v42)
      {
LABEL_10:
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&a35);
        if (a41 < 0) {
          operator delete(a36);
        }
        _Unwind_Resume(a1);
      }
LABEL_9:
      dispatch_release(v42);
      goto LABEL_10;
    }
  }
  else if (!v43)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v43);
  if (!v42) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate26handleTextStreamTokenEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK10__CFNumberEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      long long v5 = (const void *)a1[4];
      if (v5)
      {
        if (v6) {
          long long v5 = (const void *)v6[1];
        }
        uint64_t v7 = (const void *)a1[9];
        uint64_t v8 = v7;
        if (v7) {
          CFRetain(v7);
        }
        (*(void (**)(const void *, void *, const void **))(*(void *)v5 + 184))(v5, a1 + 6, &v8);
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5486A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c41_ZTSN3ctu2cf11CFSharedRefIK10__CFNumberEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(const void **)(a2 + 72);
  return ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::SharedRef(a1[3].__r_.__value_.__r.__words, v7);
}

void sub_1C5486B08(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c41_ZTSN3ctu2cf11CFSharedRefIK10__CFNumberEE(uint64_t a1)
{
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void IMSWrapperDelegate::handleIncomingDtmfEvent(uint64_t a1, uint64_t a2, char a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 136);
  if (v5 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleIncomingDtmfEvent callback for ", 49);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      uint64_t v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      uint64_t v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate23handleIncomingDtmfEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc_block_invoke;
      v13[3] = &__block_descriptor_tmp_88_2;
      v13[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      char v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C5486E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleIncomingDtmfEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 192))(v5, a1 + 48, *(char *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5486FAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleResumeIndication(uint64_t a1, uint64_t a2, int a3, int a4)
{
  memset(&v24, 0, sizeof(v24));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  uint64_t v7 = *(void **)(a1 + 136);
  if (v7 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Dispatching handleResumeIndication callback for ", 48);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 32))(v8, v7 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      uint64_t v9 = v7[10];
      if (v9) {
        dispatch_retain((dispatch_object_t)v7[10]);
      }
      uint64_t v10 = v7[11];
      int8x8_t v11 = (std::__shared_weak_count *)v7[12];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN18IMSWrapperDelegate22handleResumeIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
      v15[3] = &__block_descriptor_tmp_92_1;
      v15[4] = v10;
      char v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v24;
      }
      int v18 = a3;
      int v19 = a4;
      if (v9) {
        dispatch_async(v9, v15);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v15);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      BOOL v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }
        while (!v14);
      }
      uint64_t v7 = v13;
    }
    while (v13 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C548726C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate22handleResumeIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void, void))(v6 + 200))(v5, a1 + 48, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54873F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleHoldIndication(uint64_t a1, uint64_t a2, int a3, int a4)
{
  memset(&v24, 0, sizeof(v24));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  uint64_t v7 = *(void **)(a1 + 136);
  if (v7 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Dispatching handleHoldIndication callback for ", 46);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 32))(v8, v7 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      uint64_t v9 = v7[10];
      if (v9) {
        dispatch_retain((dispatch_object_t)v7[10]);
      }
      uint64_t v10 = v7[11];
      int8x8_t v11 = (std::__shared_weak_count *)v7[12];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN18IMSWrapperDelegate20handleHoldIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
      v15[3] = &__block_descriptor_tmp_96_2;
      v15[4] = v10;
      char v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v24;
      }
      int v18 = a3;
      int v19 = a4;
      if (v9) {
        dispatch_async(v9, v15);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v15);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      BOOL v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }
        while (!v14);
      }
      uint64_t v7 = v13;
    }
    while (v13 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C54876B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate20handleHoldIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      std::string::size_type v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void, void))(v6 + 208))(v5, a1 + 48, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548783C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleThumperCallRegister(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleThumperCallRegister callback for ", 51);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      uint64_t v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate25handleThumperCallRegisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_100_0;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5487AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate25handleThumperCallRegisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 160))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5487C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleThumperCallDeregister(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  std::string::size_type v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleThumperCallDeregister callback for ", 53);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      uint64_t v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate27handleThumperCallDeregisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_104_0;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C5487F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate27handleThumperCallDeregisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 168))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54880B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleIncomingEvent(IMSWrapperDelegate *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  ims::CallIncomingInfo::CallIncomingInfo((std::string *)&v33, a3);
  long long v5 = (IMSWrapperDelegate *)*((void *)this + 11);
  if (v5 != (IMSWrapperDelegate *)((char *)this + 96))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v31, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleIncomingEvent callback for ", 45);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, (uint64_t)v5 + 56);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v7 = *((void *)v5 + 10);
      if (v7) {
        dispatch_retain(*((dispatch_object_t *)v5 + 10));
      }
      uint64_t v8 = *((void *)v5 + 11);
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v5 + 12);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate19handleIncomingEventEPN3ims10CallHandleERKNS0_16CallIncomingInfoE_block_invoke;
      block[3] = &__block_descriptor_tmp_106;
      block[4] = v8;
      BOOL v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v15 = a2;
      ims::CallIncomingInfo::CallIncomingInfo(&v16, (const ims::CallIncomingInfo *)&v33);
      if (v7) {
        dispatch_async(v7, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (IMSWrapperDelegate *)*((void *)v5 + 1);
      if (v10)
      {
        do
        {
          int8x8_t v11 = v10;
          BOOL v10 = *(IMSWrapperDelegate **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int8x8_t v11 = (IMSWrapperDelegate *)*((void *)v5 + 2);
          BOOL v12 = *(void *)v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (IMSWrapperDelegate *)((char *)this + 96));
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(*((void **)&v43 + 1));
  }
  if (SBYTE7(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(*((void **)&v39 + 1));
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(*((void **)&v37 + 1));
  }
  if (SBYTE7(v37) < 0) {
    operator delete((void *)v36);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(*((void **)&v34 + 1));
  }
  if (SBYTE7(v34) < 0) {
    operator delete((void *)v33);
  }
}

void sub_1C548840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53)
{
  ims::CallIncomingInfo::~CallIncomingInfo(v53);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v55)
    {
LABEL_3:
      if (!v54)
      {
LABEL_8:
        ims::CallIncomingInfo::~CallIncomingInfo(&a53);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v54);
      goto LABEL_8;
    }
  }
  else if (!v55)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v55);
  if (!v54) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate19handleIncomingEventEPN3ims10CallHandleERKNS0_16CallIncomingInfoE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = (uint64_t *)a1[4];
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void, void *))(v6 + 16))(v5, a1[6], a1 + 7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5488584(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE56c28_ZTSN3ims16CallIncomingInfoE(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return ims::CallIncomingInfo::CallIncomingInfo((std::string *)(a1 + 56), (const ims::CallIncomingInfo *)(a2 + 7));
}

void sub_1C54885DC(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE56c28_ZTSN3ims16CallIncomingInfoE(uint64_t a1)
{
  ims::CallIncomingInfo::~CallIncomingInfo((void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleIncomingEvent(IMSWrapperDelegate *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
}

void IMSWrapperDelegate::handleMergeSuccess(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleMergeSuccess callback for ", 44);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate18handleMergeSuccessEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_108_1;
      void v10[4] = v5;
      int8x8_t v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548886C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeSuccessEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 32))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54889A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleMergeSuccess(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleMergeFailure(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleMergeFailure callback for ", 44);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate18handleMergeFailureEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_112;
      void v10[4] = v5;
      int8x8_t v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C5488C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeFailureEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 40))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5488D48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleMergeFailure(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleMergedMediaInit(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleMergedMediaInit callback for ", 47);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate21handleMergedMediaInitEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_116;
      void v10[4] = v5;
      int8x8_t v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C5488F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate21handleMergedMediaInitEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 24))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54890C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleMergedMediaInit(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleConferenceSubscribeEvent(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 11);
  uint64_t v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleConferenceSubscribeEvent callback for ", 56);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate30handleConferenceSubscribeEventEb_block_invoke;
      block[3] = &__block_descriptor_tmp_120_0;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleConferenceSubscribeEventEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 48))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5489448(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleConferenceSubscribeEvent(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleEmergencySessionFinished(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleEmergencySessionFinished callback for ", 56);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate30handleEmergencySessionFinishedEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_124;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C5489688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleEmergencySessionFinishedEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 56))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54897C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleEmergencySessionFinished(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleThumperCallError(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 11);
  uint64_t v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleThumperCallError callback for ", 48);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate22handleThumperCallErrorEb_block_invoke;
      block[3] = &__block_descriptor_tmp_128;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C5489A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate22handleThumperCallErrorEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 64))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5489B48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleThumperCallError(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleMediaStackSwitchComplete(uint64_t a1, char a2, int *a3, uint64_t a4)
{
  int v6 = *a3;
  memset(&v24, 0, sizeof(v24));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v24 = *(std::string *)a4;
  }
  uint64_t v7 = *(void **)(a1 + 88);
  if (v7 != (void *)(a1 + 96))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Dispatching handleMediaStackSwitchComplete callback for ", 56);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 32))(v8, v7 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      BOOL v9 = v7[10];
      if (v9) {
        dispatch_retain((dispatch_object_t)v7[10]);
      }
      uint64_t v10 = v7[11];
      BOOL v11 = (std::__shared_weak_count *)v7[12];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      v15[2] = ___ZN18IMSWrapperDelegate30handleMediaStackSwitchCompleteEbRKN3ims10MediaStackERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke;
      v15[3] = &__block_descriptor_tmp_130;
      v15[4] = v10;
      char v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v19 = a2;
      int v18 = v6;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v24;
      }
      if (v9) {
        dispatch_async(v9, v15);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v15);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        dispatch_release(v9);
      }
      BOOL v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }
        while (!v14);
      }
      uint64_t v7 = v13;
    }
    while (v13 != (void *)(a1 + 96));
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C5489E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate30handleMediaStackSwitchCompleteEbRKN3ims10MediaStackERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 72))(v5, *(unsigned __int8 *)(a1 + 76), a1 + 72, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5489F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C548A018(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleMediaStackSwitchComplete(uint64_t a1, char a2, int *a3, uint64_t a4)
{
}

void IMSWrapperDelegate::handleMergeEnabled(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 11);
  std::string::size_type v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleMergeEnabled callback for ", 44);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate18handleMergeEnabledEb_block_invoke;
      block[3] = &__block_descriptor_tmp_134;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548A2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeEnabledEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 80))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548A3F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleMergeEnabled(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleUssdData(uint64_t a1, uint64_t a2, char a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleUssdData callback for ", 40);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      uint64_t v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      BOOL v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate14handleUssdDataERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
      v13[3] = &__block_descriptor_tmp_136_0;
      v13[4] = v8;
      char v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      char v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      uint64_t v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v12);
      }
      uint64_t v5 = v11;
    }
    while (v11 != (void *)(a1 + 96));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C548A6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate14handleUssdDataERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 88))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548A844(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C548A8C0(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleUssdData(uint64_t a1, uint64_t a2, char a3)
{
}

void IMSWrapperDelegate::handleUssdError(uint64_t a1, uint64_t a2, int a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleUssdError callback for ", 41);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      uint64_t v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      BOOL v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate15handleUssdErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
      v13[3] = &__block_descriptor_tmp_140_0;
      v13[4] = v8;
      char v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      int v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      uint64_t v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 96));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C548ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate15handleUssdErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 96))(v5, a1 + 48, *(unsigned int *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548AD64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleUssdError(uint64_t a1, uint64_t a2, int a3)
{
}

void IMSWrapperDelegate::handleForceLTEFallback(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 11);
  uint64_t v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleForceLTEFallback callback for ", 48);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate22handleForceLTEFallbackEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_144_0;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548AFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate22handleForceLTEFallbackEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 104))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548B0DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleForceLTEFallback(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleTransferEvent(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 11);
  uint64_t v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleTransferEvent callback for ", 45);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate19handleTransferEventEb_block_invoke;
      block[3] = &__block_descriptor_tmp_148_1;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548B328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate19handleTransferEventEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[4];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 112))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548B464(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleTransferEvent(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleRegistrationStateChanged(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    int v4 = *a2;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleRegistrationStateChanged callback for ", 56);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = v2[10];
      if (v6) {
        dispatch_retain((dispatch_object_t)v2[10]);
      }
      uint64_t v7 = v2[11];
      uint64_t v8 = (std::__shared_weak_count *)v2[12];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate30handleRegistrationStateChangedERKN3ims17RegistrationStateE_block_invoke;
      block[3] = &__block_descriptor_tmp_150_0;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = v4;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548B6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleRegistrationStateChangedERKN3ims17RegistrationStateE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 16))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548B7EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleRegistrationStateChanged(uint64_t a1, int *a2)
{
}

void IMSWrapperDelegate::handleRegistrationActive(IMSWrapperDelegate *this, const ims::RegistrationActiveInfo *a2)
{
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  LODWORD(v24[0]) = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v24[1], *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v24[1] = *(_OWORD *)((char *)a2 + 8);
    v24[3] = *((void *)a2 + 3);
  }
  memset(v25, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v25, *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  if (*((char *)a2 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v25[1], *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else {
    v25[1] = *(std::string *)((char *)a2 + 56);
  }
  LODWORD(v26) = *((_DWORD *)a2 + 20);
  int v4 = (char *)*((void *)this + 8);
  uint64_t v5 = (char *)this + 72;
  if (v4 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleRegistrationActive callback for ", 50);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, (void *)v4 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      uint64_t v7 = *((void *)v4 + 10);
      if (v7) {
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      }
      uint64_t v8 = *((void *)v4 + 11);
      BOOL v9 = (std::__shared_weak_count *)*((void *)v4 + 12);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate24handleRegistrationActiveERKN3ims22RegistrationActiveInfoE_block_invoke;
      block[3] = &__block_descriptor_tmp_152_0;
      block[4] = v8;
      int v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v15 = v24[0];
      if (SHIBYTE(v24[3]) < 0) {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v24[1], v24[2]);
      }
      else {
        std::string v16 = *(std::string *)&v24[1];
      }
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, (long long *)v25[0].__r_.__value_.__l.__data_, (long long *)v25[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[0].__r_.__value_.__l.__size_ - v25[0].__r_.__value_.__r.__words[0]) >> 3));
      if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v18, v25[1].__r_.__value_.__l.__data_, v25[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v18 = v25[1];
      }
      int v19 = v26;
      if (v7) {
        dispatch_async(v7, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      v22[0] = &v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      uint64_t v10 = (char *)*((void *)v4 + 1);
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (char *)*((void *)v4 + 2);
          BOOL v12 = *(void *)v11 == (void)v4;
          int v4 = v11;
        }
        while (!v12);
      }
      int v4 = v11;
    }
    while (v11 != v5);
  }
  if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25[1].__r_.__value_.__l.__data_);
  }
  v22[0] = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  if (SHIBYTE(v24[3]) < 0) {
    operator delete((void *)v24[1]);
  }
}

void sub_1C548BC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ims::RegistrationActiveInfo *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a38 = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate24handleRegistrationActiveERKN3ims22RegistrationActiveInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 24))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548BDE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c34_ZTSN3ims22RegistrationActiveInfoE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  uint64_t v6 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
}

void sub_1C548BED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v3);
  }
  long long v5 = *(std::__shared_weak_count **)(v2 + 40);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c34_ZTSN3ims22RegistrationActiveInfoE(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleRegistrationActive(IMSWrapperDelegate *this, const ims::RegistrationActiveInfo *a2)
{
}

void IMSWrapperDelegate::handleRegistrationEvent(uint64_t a1, long long *a2)
{
  long long v19 = *a2;
  int v20 = *((_DWORD *)a2 + 4);
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleRegistrationEvent callback for ", 49);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      long long v5 = v2[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v2[10]);
      }
      uint64_t v6 = v2[11];
      long long v7 = (std::__shared_weak_count *)v2[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate23handleRegistrationEventERKN3ims16RegistrationInfoE_block_invoke;
      block[3] = &__block_descriptor_tmp_156_0;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      long long v13 = v19;
      int v14 = v20;
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
}

void sub_1C548C1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate23handleRegistrationEventERKN3ims16RegistrationInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 32))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548C308(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleRegistrationEvent(uint64_t a1, long long *a2)
{
}

void IMSWrapperDelegate::handleInitialized(IMSWrapperDelegate *this, int a2)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleInitialized callback for ", 43);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate17handleInitializedEj_block_invoke;
      block[3] = &__block_descriptor_tmp_160;
      block[4] = v7;
      long long v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548C554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate17handleInitializedEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 56))(v5, *(unsigned int *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548C690(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleInitialized(IMSWrapperDelegate *this, int a2)
{
}

void IMSWrapperDelegate::handleUninitialized(IMSWrapperDelegate *this, int a2)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleUninitialized callback for ", 45);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate19handleUninitializedEj_block_invoke;
      block[3] = &__block_descriptor_tmp_164_1;
      block[4] = v7;
      long long v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548C8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate19handleUninitializedEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 64))(v5, *(unsigned int *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548CA18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleUninitialized(IMSWrapperDelegate *this, int a2)
{
}

void IMSWrapperDelegate::handlePdnReset(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 8);
  uint64_t v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handlePdnReset callback for ", 40);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate14handlePdnResetEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_168;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548CC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate14handlePdnResetEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 80))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548CD90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handlePdnReset(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleStateDump(uint64_t a1, uint64_t a2)
{
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleStateDump callback for ", 41);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      uint64_t v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      uint64_t v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate15handleStateDumpERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_170;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string v13 = v18;
      }
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != (void *)(a1 + 72));
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1C548D050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate15handleStateDumpERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 88))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548D1D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C548D250(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleStateDump(uint64_t a1, uint64_t a2)
{
}

void IMSWrapperDelegate::handleAuthenticate(IMSWrapperDelegate *this, const ims::aka::Request *a2)
{
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  ims::aka::Request::Request((ims::aka::Request *)&v28, a2);
  std::string::size_type v3 = (IMSWrapperDelegate *)*((void *)this + 8);
  if (v3 != (IMSWrapperDelegate *)((char *)this + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleAuthenticate callback for ", 44);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, (uint64_t)v3 + 56);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      long long v5 = *((void *)v3 + 10);
      if (v5) {
        dispatch_retain(*((dispatch_object_t *)v3 + 10));
      }
      uint64_t v6 = *((void *)v3 + 11);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v3 + 12);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate18handleAuthenticateERKN3ims3aka7RequestE_block_invoke;
      block[3] = &__block_descriptor_tmp_172;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      ims::aka::Request::Request((ims::aka::Request *)&v13, (const ims::aka::Request *)&v28);
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v22)
      {
        char v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        char v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        long long v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        char v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        char v15 = v14;
        operator delete(v14);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (IMSWrapperDelegate *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = *(IMSWrapperDelegate **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (IMSWrapperDelegate *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (IMSWrapperDelegate *)((char *)this + 72));
  }
  if (*((void *)&v34 + 1))
  {
    *(void *)&long long v35 = *((void *)&v34 + 1);
    operator delete(*((void **)&v34 + 1));
  }
  if ((void)v33)
  {
    *((void *)&v33 + 1) = v33;
    operator delete((void *)v33);
  }
  if (*((void *)&v31 + 1))
  {
    *(void *)&long long v32 = *((void *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  if (*((void *)&v28 + 1))
  {
    *(void *)&long long v29 = *((void *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
}

void sub_1C548D5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  ims::aka::Request::~Request(v45);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        ims::aka::Request::~Request((ims::aka::Request *)&a45);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v47);
  if (!v46) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate18handleAuthenticateERKN3ims3aka7RequestE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 96))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548D730(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ims::aka::Request *__copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c22_ZTSN3ims3aka7RequestE(void *a1, void *a2)
{
  uint64_t v2 = a2[5];
  a1[4] = a2[4];
  a1[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return ims::aka::Request::Request((ims::aka::Request *)(a1 + 6), (const ims::aka::Request *)(a2 + 6));
}

void sub_1C548D788(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c22_ZTSN3ims3aka7RequestE(void *a1)
{
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  std::string::size_type v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  long long v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ims::aka::Request::~Request(ims::aka::Request *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  std::string::size_type v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleAuthenticate(IMSWrapperDelegate *this, const ims::aka::Request *a2)
{
}

void IMSWrapperDelegate::handleClientError(uint64_t a1, uint64_t a2, int a3)
{
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  long long v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Dispatching handleClientError callback for ", 43);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v5 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      uint64_t v7 = v5[10];
      if (v7) {
        dispatch_retain((dispatch_object_t)v5[10]);
      }
      uint64_t v8 = v5[11];
      BOOL v9 = (std::__shared_weak_count *)v5[12];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN18IMSWrapperDelegate17handleClientErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
      v13[3] = &__block_descriptor_tmp_176_2;
      v13[4] = v8;
      int v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v21;
      }
      int v16 = a3;
      if (v7) {
        dispatch_async(v7, v13);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v7) {
        dispatch_release(v7);
      }
      BOOL v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          long long v5 = v11;
        }
        while (!v12);
      }
      long long v5 = v11;
    }
    while (v11 != (void *)(a1 + 72));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1C548DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0) {
          operator delete(a34);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleClientErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t, void))(v6 + 112))(v5, a1 + 48, *(unsigned int *)(a1 + 72));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548DCE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleClientError(uint64_t a1, uint64_t a2, int a3)
{
}

void IMSWrapperDelegate::handleRegistrationIdentities(uint64_t a1, long long **a2)
{
  char v18 = 0;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)&v18, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  std::string::size_type v3 = *(void **)(a1 + 64);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleRegistrationIdentities callback for ", 54);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      uint64_t v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate28handleRegistrationIdentitiesERKNSt3__16vectorIN3ims20RegistrationIdentityENS0_9allocatorIS3_EEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_178_0;
      block[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v13, 0, sizeof(v13));
      std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)v13, v18, v19, ((char *)v19 - (char *)v18) >> 5);
      if (v5) {
        dispatch_async(v5, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      v16[0] = v13;
      std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          std::string::size_type v3 = v9;
        }
        while (!v10);
      }
      std::string::size_type v3 = v9;
    }
    while (v9 != (void *)(a1 + 72));
  }
  v16[0] = &v18;
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
}

void sub_1C548DF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v32)
    {
LABEL_3:
      if (!v31)
      {
LABEL_8:
        std::string __p = &a31;
        std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v31);
      goto LABEL_8;
    }
  }
  else if (!v32)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v32);
  if (!v31) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate28handleRegistrationIdentitiesERKNSt3__16vectorIN3ims20RegistrationIdentityENS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::string::size_type v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          long long v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 120))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548E0FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c68_ZTSNSt3__16vectorIN3ims20RegistrationIdentityENS_9allocatorIS2_EEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)(a1 + 6), *(long long **)(a2 + 48), *(long long **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
}

void sub_1C548E168(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c68_ZTSNSt3__16vectorIN3ims20RegistrationIdentityENS_9allocatorIS2_EEEE(uint64_t a1)
{
  std::string::size_type v3 = (void **)(a1 + 48);
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleRegistrationIdentities(uint64_t a1, long long **a2)
{
}

void IMSWrapperDelegate::handleRegistrationAllowed(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 8);
  uint64_t v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleRegistrationAllowed callback for ", 51);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate25handleRegistrationAllowedEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_182;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548E3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate25handleRegistrationAllowedEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 104))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548E528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleRegistrationAllowed(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleNewInitialRegistration(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 8);
  uint64_t v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleNewInitialRegistration callback for ", 54);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate28handleNewInitialRegistrationEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_186;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548E768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate28handleNewInitialRegistrationEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 128))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548E8A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleNewInitialRegistration(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleKeepAliveCompletion(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 8);
  uint64_t v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleKeepAliveCompletion callback for ", 51);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate25handleKeepAliveCompletionEb_block_invoke;
      block[3] = &__block_descriptor_tmp_190_0;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548EAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate25handleKeepAliveCompletionEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 136))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548EC28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleKeepAliveCompletion(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, char a2)
{
  uint64_t v2 = (char *)*((void *)this + 14);
  uint64_t v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleMessageSendFailure callback for ", 50);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, (void *)v2 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v6 = *((void *)v2 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      }
      uint64_t v7 = *((void *)v2 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate24handleMessageSendFailureEb_block_invoke;
      block[3] = &__block_descriptor_tmp_192_0;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v14 = a2;
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1C548EE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendFailureEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, void))(v6 + 16))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548EFB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, char a2)
{
}

void IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  memset(v25, 0, 58);
  int v23 = *(_DWORD *)a2;
  __int16 v24 = *((_WORD *)a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[1], *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25[1] = *(_OWORD *)((char *)a2 + 8);
    *(void *)&v25[9] = *((void *)a2 + 3);
  }
  v25[13] = *((_WORD *)a2 + 16);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[17], *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    *(_OWORD *)&v25[17] = *(_OWORD *)((char *)a2 + 40);
    *(void *)&v25[25] = *((void *)a2 + 7);
  }
  uint64_t v4 = (IMSWrapperDelegate *)*((void *)this + 14);
  if (v4 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleMessageSendFailure callback for ", 50);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, (uint64_t)v4 + 56);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      uint64_t v6 = *((void *)v4 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      }
      uint64_t v7 = *((void *)v4 + 11);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate24handleMessageSendFailureERKN3ims13MessageResultE_block_invoke;
      block[3] = &__block_descriptor_tmp_193_0;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = v23;
      __int16 v15 = v24;
      if (SHIBYTE(v25[12]) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)&v25[1], *(std::string::size_type *)&v25[5]);
      }
      else {
        std::string v16 = *(std::string *)&v25[1];
      }
      __int16 v17 = v25[13];
      if (SHIBYTE(v25[28]) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)&v25[17], *(std::string::size_type *)&v25[21]);
      }
      else {
        std::string v18 = *(std::string *)&v25[17];
      }
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (IMSWrapperDelegate *)*((void *)v4 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(IMSWrapperDelegate **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (IMSWrapperDelegate *)*((void *)v4 + 2);
          BOOL v11 = *(void *)v10 == (void)v4;
          uint64_t v4 = v10;
        }
        while (!v11);
      }
      uint64_t v4 = v10;
    }
    while (v10 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (SHIBYTE(v25[28]) < 0) {
    operator delete(*(void **)&v25[17]);
  }
  if (SHIBYTE(v25[12]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
}

void sub_1C548F36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendFailureERKN3ims13MessageResultE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 24))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548F510(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c25_ZTSN3ims13MessageResultE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C548F5DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c25_ZTSN3ims13MessageResultE(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ims::MessageResult::~MessageResult(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
}

void IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this)
{
  uint64_t v1 = (char *)*((void *)this + 14);
  uint64_t v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v3 = ims::debug((uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Dispatching handleMessageSendSuccess callback for ", 50);
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, (void *)v1 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      uint64_t v4 = *((void *)v1 + 10);
      if (v4) {
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      }
      uint64_t v5 = *((void *)v1 + 11);
      long long v6 = (std::__shared_weak_count *)*((void *)v1 + 12);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessEv_block_invoke;
      void v10[3] = &__block_descriptor_tmp_197;
      void v10[4] = v5;
      BOOL v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        dispatch_async(v4, v10);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v4) {
        dispatch_release(v4);
      }
      uint64_t v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (char *)*((void *)v1 + 2);
          BOOL v9 = *(void *)v8 == (void)v1;
          uint64_t v1 = v8;
        }
        while (!v9);
      }
      uint64_t v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1C548F8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendSuccessEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *))(v6 + 32))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548FA18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this)
{
}

void IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  memset(v25, 0, 58);
  int v23 = *(_DWORD *)a2;
  __int16 v24 = *((_WORD *)a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[1], *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25[1] = *(_OWORD *)((char *)a2 + 8);
    *(void *)&v25[9] = *((void *)a2 + 3);
  }
  v25[13] = *((_WORD *)a2 + 16);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[17], *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    *(_OWORD *)&v25[17] = *(_OWORD *)((char *)a2 + 40);
    *(void *)&v25[25] = *((void *)a2 + 7);
  }
  uint64_t v4 = (IMSWrapperDelegate *)*((void *)this + 14);
  if (v4 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Dispatching handleMessageSendSuccess callback for ", 50);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, (uint64_t)v4 + 56);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      uint64_t v6 = *((void *)v4 + 10);
      if (v6) {
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      }
      uint64_t v7 = *((void *)v4 + 11);
      long long v8 = (std::__shared_weak_count *)*((void *)v4 + 12);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessERKN3ims13MessageResultE_block_invoke;
      block[3] = &__block_descriptor_tmp_200_1;
      block[4] = v7;
      char v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = v23;
      __int16 v15 = v24;
      if (SHIBYTE(v25[12]) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)&v25[1], *(std::string::size_type *)&v25[5]);
      }
      else {
        std::string v16 = *(std::string *)&v25[1];
      }
      __int16 v17 = v25[13];
      if (SHIBYTE(v25[28]) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)&v25[17], *(std::string::size_type *)&v25[21]);
      }
      else {
        std::string v18 = *(std::string *)&v25[17];
      }
      if (v6) {
        dispatch_async(v6, block);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v6) {
        dispatch_release(v6);
      }
      BOOL v9 = (IMSWrapperDelegate *)*((void *)v4 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          BOOL v9 = *(IMSWrapperDelegate **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (IMSWrapperDelegate *)*((void *)v4 + 2);
          BOOL v11 = *(void *)v10 == (void)v4;
          uint64_t v4 = v10;
        }
        while (!v11);
      }
      uint64_t v4 = v10;
    }
    while (v10 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (SHIBYTE(v25[28]) < 0) {
    operator delete(*(void **)&v25[17]);
  }
  if (SHIBYTE(v25[12]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
}

void sub_1C548FDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendSuccessERKN3ims13MessageResultE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 40))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C548FF4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
}

void IMSWrapperDelegate::handleMessageReceived(IMSWrapperDelegate *this, const ims::MessageInfo *a2)
{
  *(_OWORD *)long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  *(_OWORD *)long long v33 = 0u;
  *(_OWORD *)long long v30 = 0u;
  *(_OWORD *)long long v31 = 0u;
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  ims::MessageInfo::MessageInfo((std::string *)v28, a2);
  uint64_t v3 = (IMSWrapperDelegate *)*((void *)this + 14);
  if (v3 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleMessageReceived callback for ", 47);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, (uint64_t)v3 + 56);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      uint64_t v5 = *((void *)v3 + 10);
      if (v5) {
        dispatch_retain(*((dispatch_object_t *)v3 + 10));
      }
      uint64_t v6 = *((void *)v3 + 11);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v3 + 12);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 1174405120;
      void v11[2] = ___ZN18IMSWrapperDelegate21handleMessageReceivedERKN3ims11MessageInfoE_block_invoke;
      v11[3] = &__block_descriptor_tmp_202;
      void v11[4] = v6;
      BOOL v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      ims::MessageInfo::MessageInfo(&v13, (const ims::MessageInfo *)v28);
      if (v5) {
        dispatch_async(v5, v11);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
      }
      if (v22)
      {
        int v23 = v22;
        operator delete(v22);
      }
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      long long v8 = (IMSWrapperDelegate *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          long long v8 = *(IMSWrapperDelegate **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (IMSWrapperDelegate *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (v34[1])
  {
    *(void **)&long long v35 = v34[1];
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  if (SHIBYTE(v31[0]) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)&v28[24]);
  }
  if ((v28[23] & 0x80000000) != 0) {
    operator delete(*(void **)v28);
  }
}

void sub_1C549027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  ims::MessageInfo::~MessageInfo(v45);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        ims::MessageInfo::~MessageInfo((ims::MessageInfo *)&a45);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v47);
  if (!v46) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate21handleMessageReceivedERKN3ims11MessageInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(uint64_t **)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = *v5;
        if (v7)
        {
          uint64_t v5 = (uint64_t *)v7[1];
          uint64_t v6 = *v5;
        }
        (*(void (**)(uint64_t *, uint64_t))(v6 + 48))(v5, a1 + 48);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54903F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c23_ZTSN3ims11MessageInfoE(std::string *a1, void *a2)
{
  std::string::size_type v2 = a2[5];
  a1[1].__r_.__value_.__l.__size_ = a2[4];
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return ims::MessageInfo::MessageInfo(a1 + 2, (const ims::MessageInfo *)(a2 + 6));
}

void sub_1C5490448(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c23_ZTSN3ims11MessageInfoE(uint64_t a1)
{
  std::string::size_type v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ims::MessageInfo::~MessageInfo(ims::MessageInfo *this)
{
  std::string::size_type v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void non-virtual thunk to'IMSWrapperDelegate::handleMessageReceived(IMSWrapperDelegate *this, const ims::MessageInfo *a2)
{
}

const void **IMSWrapperDelegate::handleXcapRequestCompletion(uint64_t a1, const void **a2)
{
  CFTypeRef cf = 0;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, a2);
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3 != (void *)(a1 + 168))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Dispatching handleXcapRequestCompletion callback for ", 53);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, v3 + 7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      uint64_t v5 = v3[10];
      if (v5) {
        dispatch_retain((dispatch_object_t)v3[10]);
      }
      uint64_t v6 = v3[11];
      uint64_t v7 = (std::__shared_weak_count *)v3[12];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      uint64_t v12[2] = ___ZN18IMSWrapperDelegate27handleXcapRequestCompletionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
      void v12[3] = &__block_descriptor_tmp_204;
      void v12[4] = v6;
      std::string v13 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      CFTypeRef v14 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v5) {
        dispatch_async(v5, v12);
      }
      else {
        IMSClientManager::callOnMainQueue((IMSClientManager *)v12);
      }
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v14);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v5) {
        dispatch_release(v5);
      }
      long long v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != (void *)(a1 + 168));
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
}

void sub_1C54907E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,const void *a28)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v28);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a28);
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate27handleXcapRequestCompletionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6) {
          uint64_t v5 = (const void *)v6[1];
        }
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v7, (const void **)(a1 + 48));
        (*(void (**)(const void *, const void **))(*(void *)v5 + 16))(v5, &v7);
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5490934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17XcapEventDelegateEEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)(a1 + 48), (const void **)(a2 + 48));
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17XcapEventDelegateEEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

const void **non-virtual thunk to'IMSWrapperDelegate::handleXcapRequestCompletion(uint64_t a1, const void **a2)
{
  return IMSWrapperDelegate::handleXcapRequestCompletion(a1 - 56, a2);
}

void non-virtual thunk to'IMSWrapperDelegate::~IMSWrapperDelegate(IMSWrapperDelegate *this)
{
}

{
  uint64_t vars8;

  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 16));
}

{
  uint64_t vars8;

  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 48));
}

{
  uint64_t vars8;

  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 48));
  JUMPOUT(0x1C878E320);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 56));
}

{
  uint64_t vars8;

  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 56));
  JUMPOUT(0x1C878E320);
}

void *ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void *ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

std::string *ims::CallIncomingInfo::CallIncomingInfo(std::string *this, const ims::CallIncomingInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
  this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v9;
  }
  BOOL v10 = this + 7;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_1C5490D20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

ims::aka::Request *ims::aka::Request::Request(ims::aka::Request *this, const ims::aka::Request *a2)
{
  __int16 v4 = *(_WORD *)a2;
  *((void *)this + 1) = 0;
  *(_WORD *)this = v4;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), *((void *)a2 + 5) - *((void *)a2 + 4));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), *((void *)a2 + 8) - *((void *)a2 + 7));
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), *((void *)a2 + 11) - *((void *)a2 + 10));
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 13, *((const void **)a2 + 13), *((void *)a2 + 14), *((void *)a2 + 14) - *((void *)a2 + 13));
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  return this;
}

void sub_1C5490E88(_Unwind_Exception *exception_object)
{
  long long v7 = *v5;
  if (*v5)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  long long v8 = *v4;
  if (*v4)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  long long v9 = *v3;
  if (*v3)
  {
    v1[5] = v9;
    operator delete(v9);
  }
  BOOL v10 = *v2;
  if (*v2)
  {
    v1[2] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    __int16 v4 = (void *)result;
    if (a4 >> 59) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    long long v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(result + 16, a4);
    long long v8 = v7;
    void *v4 = v7;
    v4[1] = v7;
    void v4[2] = (char *)v7 + 32 * v9;
    char v15 = v7;
    char v16 = v7;
    v13[0] = v4 + 2;
    v13[1] = &v15;
    std::string::size_type v13[2] = &v16;
    uint64_t v14 = 0;
    if (a2 != a3)
    {
      BOOL v10 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((void *)a2 + 1));
          BOOL v12 = v16;
        }
        else
        {
          long long v11 = *a2;
          v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
          BOOL v12 = v10;
        }
        LODWORD(v10[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
        a2 += 2;
        BOOL v10 = (std::string *)((char *)v12 + 32);
        char v16 = (std::string *)((char *)v12 + 32);
      }
      while (a2 != a3);
      long long v8 = (std::string *)((char *)v12 + 32);
    }
    LOBYTE(v14) = 1;
    double result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ims::RegistrationIdentity>,ims::RegistrationIdentity*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v4[1] = v8;
  }
  return result;
}

void sub_1C5490FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ims::RegistrationIdentity>,ims::RegistrationIdentity*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0) {
        operator delete(*(void **)(i - 32));
      }
    }
  }
  return a1;
}

std::string *ims::MessageInfo::MessageInfo(std::string *this, const ims::MessageInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((void *)a2 + 16), *((void *)a2 + 16) - *((void *)a2 + 15));
  return this;
}

void sub_1C54911B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(const void **a1, const void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::__shared_weak_count **__copy_helper_block_e8_40c54_ZTS23SipTypedTerminationLockI21SipThreadSafeLockableE(uint64_t a1, uint64_t a2)
{
  return SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((std::__shared_weak_count **)(a1 + 40), a2 + 40);
}

uint64_t __destroy_helper_block_e8_40c54_ZTS23SipTypedTerminationLockI21SipThreadSafeLockableE(uint64_t a1)
{
  return SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(a1 + 40);
}

void ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v4 = 0;
  ice::detail::wrapCallback<int>(*a3, &v4);
  aBlock = v4;
  long long v4 = 0;
  ice::Client::regIndicationInternal();
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_1C5491348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_44c31_ZTSN18BambiAccessBarring4InfoE(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 44) = 100;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(unsigned char *)(result + 60) = 0;
  *(_WORD *)(result + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(result + 60) = *(unsigned char *)(a2 + 60);
  return result;
}

BOOL IBINasClient::isInitialized(IBINasClient *this)
{
  return *((_DWORD *)this + 83) == 2;
}

void *IBINasClient::logPrefix(IBINasClient *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IBINasClient: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void IBINasClient::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'IBINasClient::loggableName(LoggableString *a1@<X8>)
{
}

void *non-virtual thunk to'IBINasClient::logPrefix(IBINasClient *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IBINasClient: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

std::__shared_weak_count **SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(std::__shared_weak_count **a1, std::__shared_weak_count **a2, const std::string *a3)
{
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)a1, a3);
  *long long v5 = &unk_1F20D2750;
  v5[4] = 0;
  long long v6 = (std::__shared_weak_count **)(v5 + 4);
  v5[5] = 0;
  long long v7 = *a2;
  long long v8 = a2[1];
  if (!v8)
  {
    a1[5] = 0;
    a1[4] = v7;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v10 = a1 + 5;
  uint64_t v9 = a1[5];
  a1[4] = v7;
  a1[5] = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    long long v8 = *v10;
    long long v7 = *v6;
    if (!*v10)
    {
LABEL_7:
      char v11 = 1;
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  char v11 = 0;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v7) {
LABEL_8:
  }
    ((void (*)(std::__shared_weak_count *, std::__shared_weak_count **))v7->__on_zero_shared_weak)(v7, a1 + 1);
LABEL_9:
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_1C5491568(_Unwind_Exception *exception_object)
{
  char v6 = v4;
  if ((v6 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v5);
  }
  *(void *)uint64_t v1 = &unk_1F20B7918;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  *(void *)a1 = &unk_1F20D2750;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20B7918;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

std::__shared_weak_count **SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(std::__shared_weak_count **a1, uint64_t a2)
{
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)a1, (const std::string *)(a2 + 8));
  void *v4 = &unk_1F20D2750;
  v4[4] = 0;
  long long v5 = (std::__shared_weak_count **)(v4 + 4);
  v4[5] = 0;
  char v6 = *(std::__shared_weak_count **)(a2 + 32);
  long long v7 = *(std::__shared_weak_count **)(a2 + 40);
  if (!v7)
  {
    a1[5] = 0;
    a1[4] = v6;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = a1 + 5;
  long long v8 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    long long v7 = *v9;
    char v6 = *v5;
    if (!*v9)
    {
LABEL_7:
      char v10 = 1;
      if (!v6) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  char v10 = 0;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v6) {
LABEL_8:
  }
    ((void (*)(std::__shared_weak_count *, std::__shared_weak_count **))v6->__on_zero_shared_weak)(v6, a1 + 1);
LABEL_9:
  if ((v10 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_1C54917C4(_Unwind_Exception *exception_object)
{
  char v6 = v4;
  if ((v6 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v5);
  }
  *(void *)uint64_t v1 = &unk_1F20B7918;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  long long v7 = a1 + 1;
  char v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        char v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    char v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void SipAuthScheme::SipAuthScheme(SipAuthScheme *this, const SipAuthScheme *a2)
{
  *(void *)this = &unk_1F20D2798;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  if (this != a2)
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)this + 1, *((uint64_t **)a2 + 3), 0);
  }
}

void sub_1C5491950(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

ImsOutStream *SipAuthScheme::encode(SipAuthScheme *this, ImsOutStream *a2, uint64_t a3)
{
  char v6 = (const std::string *)(*(uint64_t (**)(SipAuthScheme *))(*(void *)this + 40))(this);
  LoggableString::LoggableString((std::string *)__p, v6);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  uint64_t v16 = 1065353216;
  (*(void (**)(SipAuthScheme *, void **, uint64_t))(*(void *)this + 8))(this, __p, a3);
  long long v7 = (uint64_t *)v15;
  if ((void)v15)
  {
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
      {
        uint64_t v9 = (void *)*((void *)a2 + 1);
        v13.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      LoggableString::LoggableString(&v13, (const std::string *)(v7 + 2));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      BOOL v10 = isDirectiveWhitelisted((unsigned __int16 *)v7 + 8);
      char v11 = (void *)*((void *)a2 + 1);
      if (v10)
      {
        v13.__r_.__value_.__s.__data_[0] = 61;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v13, 1);
        *((unsigned char *)a2 + 17) = 0;
        LoggableString::LoggableString(&v13, (const std::string *)(v7 + 5));
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v13);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v13.__r_.__value_.__s.__data_[0] = 61;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v13, 1);
        *((unsigned char *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, uint64_t *))(*(void *)a2 + 32))(a2, v7 + 5);
      }
      char v8 = 0;
      long long v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1C5491BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

BOOL isDirectiveWhitelisted(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (v1 == 3)
  {
    if (v2 >= 0) {
      long long v7 = a1;
    }
    else {
      long long v7 = *(unsigned __int16 **)a1;
    }
    if (*v7 == 29301 && *((unsigned char *)v7 + 2) == 105) {
      return 1;
    }
    int v9 = *v7;
    int v5 = *((unsigned __int8 *)v7 + 2);
    BOOL v6 = v9 == 28529;
    int v10 = 112;
  }
  else
  {
    if (v1 == 5)
    {
      if (v2 >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = *(unsigned __int16 **)a1;
      }
      int v12 = *(_DWORD *)v11;
      int v5 = *((unsigned __int8 *)v11 + 4);
      BOOL v6 = v12 == 1818322290;
    }
    else
    {
      if (v1 != 9) {
        return 0;
      }
      if (v2 >= 0) {
        uint64_t v3 = a1;
      }
      else {
        uint64_t v3 = *(unsigned __int16 **)a1;
      }
      uint64_t v4 = *(void *)v3;
      int v5 = *((unsigned __int8 *)v3 + 8);
      BOOL v6 = v4 == 0x687469726F676C61;
    }
    int v10 = 109;
  }
  return v6 && v5 == v10;
}

ImsOutStream *SipAuthScheme::log(SipAuthScheme *this, ImsOutStream *a2)
{
  uint64_t v4 = (const std::string *)(*(uint64_t (**)(SipAuthScheme *))(*(void *)this + 40))(this);
  LoggableString::LoggableString((std::string *)__p, v4);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  uint64_t v12 = 1065353216;
  (*(void (**)(SipAuthScheme *, void **, uint64_t))(*(void *)this + 8))(this, __p, 1);
  for (uint64_t i = (uint64_t *)v11; i; uint64_t i = (uint64_t *)*i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
    *((unsigned char *)a2 + 17) = 0;
    LoggableString::LoggableString(&v9, (const std::string *)(i + 2));
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    BOOL v6 = isDirectiveWhitelisted((unsigned __int16 *)i + 8);
    long long v7 = (void *)*((void *)a2 + 1);
    if (v6)
    {
      v9.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
      *((unsigned char *)a2 + 17) = 0;
      LoggableString::LoggableString(&v9, (const std::string *)(i + 5));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v9);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v9.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, uint64_t *))(*(void *)a2 + 32))(a2, i + 5);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1C5491FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t SipAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2)
{
  int v2 = *(long long **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *MEMORY[0x1E4FBA418];
    uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    do
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)&v21, v2 + 1);
      uint64_t v20 = 0;
      memset(v19, 0, sizeof(v19));
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v15, 0, sizeof(v15));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
      LOBYTE(v13) = 34;
      int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v13, 1);
      if (v23 >= 0) {
        BOOL v6 = (char *)&v22 + 8;
      }
      else {
        BOOL v6 = (char *)*((void *)&v22 + 1);
      }
      if (v23 >= 0) {
        uint64_t v7 = HIBYTE(v23);
      }
      else {
        uint64_t v7 = v23;
      }
      char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      LOBYTE(v13) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, &v13);
      __int16 v24 = &v21;
      std::string v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&v21, (uint64_t)&std::piecewise_construct, &v24);
      int v10 = v9 + 40;
      if ((char)v9[63] < 0) {
        operator delete(*(void **)v10);
      }
      *(_OWORD *)int v10 = v13;
      *((void *)v10 + 2) = v14;
      *(void *)&v15[0] = v3;
      *(void *)((char *)v15 + *(void *)(v3 - 24)) = v4;
      *((void *)&v15[0] + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C878E270](v19);
      if (SHIBYTE(v23) < 0) {
        operator delete(*((void **)&v22 + 1));
      }
      if (SBYTE7(v22) < 0) {
        operator delete((void *)v21);
      }
      int v2 = *(long long **)v2;
    }
    while (v2);
  }
  return 1;
}

void sub_1C549226C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  ims::AccessNetwork::~AccessNetwork((void **)(v16 - 160));
  _Unwind_Resume(a1);
}

uint64_t SipAuthScheme::parseDirective(uint64_t a1, long long *a2, const std::string *a3)
{
  BOOL v6 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  std::string::operator=((std::string *)(v4 + 40), a3);
  return 1;
}

uint64_t SipAuthScheme::createFromString(uint64_t a1)
{
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)"Digest";
  v20.__r_.__value_.__r.__words[2] = 0x600000000000000;
  std::string::push_back(&v20, 32);
  if (*(char *)(a1 + 23) >= 0) {
    int v2 = (const char *)a1;
  }
  else {
    int v2 = *(const char **)a1;
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v20;
  }
  else {
    uint64_t v3 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (!strncasecmp(v2, (const char *)v3, size))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    uint64_t v19 = 1065353216;
    memset(&__str, 0, sizeof(__str));
    while (1)
    {
      std::string::size_type size = ims::nextTokenQ((std::string *)a1, size, &__str, 0x2Cu);
      if (size == -1) {
        break;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v8 = __str.__r_.__value_.__l.__size_;
      }
      if (!v8
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (p_str = &__str)
          : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
            (v10 = memchr(p_str, 61, v8), std::string::size_type v11 = v10 - (unsigned char *)p_str, v10) ? (v12 = v11 == -1) : (v12 = 1),
            v12))
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "auth");
        std::string::basic_string[abi:ne180100]<0>(&v22, "");
        uint64_t v14 = ims::error((uint64_t)&v23, (uint64_t)&v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Invalid auth header: missing equals at ", 39);
        *(unsigned char *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 32))(v14, &__str);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v14 + 17) = 0;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        break;
      }
      memset(&v23, 0, sizeof(v23));
      std::string::basic_string(&v23, &__str, 0, v11, (std::allocator<char> *)&v22);
      memset(&v22, 0, sizeof(v22));
      std::string::basic_string(&v22, &__str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
      ims::chomp(&v22, "\r\n\t \"", 3);
      long long v21 = &v23;
      long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (long long **)&v21);
      std::string::operator=((std::string *)(v13 + 40), &v22);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (size == -1)
    {
      long long v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(__p, "algorithm");
      if (!v15 || std::string::compare((const std::string *)(v15 + 40), 0, 3uLL, "AKA")) {
        operator new();
      }
      operator new();
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v5 = ims::error((uint64_t)__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"I only support Digest authentication", 36);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    BOOL v6 = (unsigned char *)ims::error((uint64_t)__p, (uint64_t)&__str);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v6 + 32))(v6, a1);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"doesn't start with '", 20);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5492A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  MEMORY[0x1C878E320](v37, 0x10B3C4074E51C00);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    size_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        int v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v8);
        uint64_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        size_t v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (long long *)v4 + 1);
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_1C5492C70(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1C5492C8C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      int8x8_t prime = (int8x8_t)v12;
    }
    else {
      int8x8_t prime = (int8x8_t)v11;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    long long v42 = a3;
    if (*(void *)&prime > v8)
    {
LABEL_13:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * *(void *)&prime);
      long long v15 = *(void **)a1;
      *(void *)a1 = v14;
      if (v15) {
        operator delete(v15);
      }
      uint64_t v16 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v16++) = 0;
      while (*(void *)&prime != v16);
      long long v17 = *(unsigned __int8 ***)(a1 + 16);
      if (v17)
      {
        unint64_t v18 = (unint64_t)v17[1];
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(prime);
        v19.i16[0] = vaddlv_u8(v19);
        unint64_t v20 = v19.u32[0];
        if (v19.u32[0] > 1uLL)
        {
          if (v18 >= *(void *)&prime) {
            v18 %= *(void *)&prime;
          }
        }
        else
        {
          v18 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v18) = a1 + 16;
        __int16 v24 = *v17;
        if (*v17)
        {
          unint64_t v41 = v19.u32[0];
          do
          {
            unint64_t v25 = *((void *)v24 + 1);
            if (v20 > 1)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            if (v25 == v18)
            {
              long long v17 = (unsigned __int8 **)v24;
            }
            else if (*(void *)(*(void *)a1 + 8 * v25))
            {
              uint64_t v26 = *(unsigned __int8 **)v24;
              if (*(void *)v24)
              {
                char v27 = v24;
                while (1)
                {
                  int v28 = std::equal_to<std::string>::operator()[abi:ne180100](v6, v24 + 16, v26 + 16);
                  long long v29 = *(unsigned __int8 **)v27;
                  if (!v28) {
                    break;
                  }
                  uint64_t v26 = *(unsigned __int8 **)v29;
                  char v27 = *(unsigned __int8 **)v27;
                  if (!*(void *)v29) {
                    goto LABEL_46;
                  }
                }
                uint64_t v26 = *(unsigned __int8 **)v27;
                long long v29 = v27;
LABEL_46:
                unint64_t v20 = v41;
              }
              else
              {
                long long v29 = v24;
              }
              *long long v17 = v26;
              *(void *)long long v29 = **(void **)(*(void *)a1 + 8 * v25);
              **(void **)(*(void *)a1 + 8 * v25) = v24;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v25) = v17;
              long long v17 = (unsigned __int8 **)v24;
              unint64_t v18 = v25;
            }
            __int16 v24 = *v17;
          }
          while (*v17);
        }
      }
      goto LABEL_58;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (*(void *)&prime <= v21) {
        int8x8_t prime = (int8x8_t)v21;
      }
      if (*(void *)&prime < v8)
      {
        if (prime) {
          goto LABEL_13;
        }
        long long v30 = *(void **)a1;
        *(void *)a1 = 0;
        if (v30) {
          operator delete(v30);
        }
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    unint64_t v8 = *(void *)(a1 + 8);
    a3 = v42;
  }
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v31.i16[0] = vaddlv_u8(v31);
  unint64_t v32 = v31.u32[0];
  if (v31.u32[0] > 1uLL)
  {
    unint64_t v33 = a2;
    if (v8 <= a2) {
      unint64_t v33 = a2 % v8;
    }
  }
  else
  {
    unint64_t v33 = (v8 - 1) & a2;
  }
  long long v34 = *(unsigned __int8 **)(*(void *)a1 + 8 * v33);
  if (v34)
  {
    long long v35 = *(unsigned __int8 **)v34;
    if (*(void *)v34)
    {
      int v36 = 0;
      do
      {
        unint64_t v37 = *((void *)v35 + 1);
        if (v32 > 1)
        {
          unint64_t v38 = *((void *)v35 + 1);
          if (v37 >= v8) {
            unint64_t v38 = v37 % v8;
          }
        }
        else
        {
          unint64_t v38 = v37 & (v8 - 1);
        }
        if (v38 != v33) {
          break;
        }
        int v39 = v37 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v35 + 16, a3) : 0;
        if (v36 & (v39 ^ 1)) {
          break;
        }
        v36 |= v39;
        long long v34 = *(unsigned __int8 **)v34;
        long long v35 = *(unsigned __int8 **)v34;
      }
      while (*(void *)v34);
    }
  }
  return v34;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(void *a1, long long *a2)
{
  memset(v5, 0, sizeof(v5));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1C54931E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  float v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  a3[1] = v6;
  *((unsigned char *)a3 + 16) = 0;
  *(void *)float v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *((unsigned char *)a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1C549327C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ImsLogStream::~ImsLogStream(ImsLogStream *this)
{
  *(void *)this = &unk_1F20D2818;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1F20D1038;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
}

{
  uint64_t vars8;

  ImsLogStream::~ImsLogStream(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsLogDestinationStderr::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v10 = v9;
  }
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], a2, v10);
  unsigned int v12 = a3 - 3;
  if (v8)
  {
    if (v12 > 5) {
      long long v13 = "?";
    }
    else {
      long long v13 = off_1E6511220[v12];
    }
    size_t v15 = strlen(v13);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v15);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"[", 1);
    int v18 = *(char *)(a4 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a4;
    }
    else {
      uint64_t v19 = *(void *)a4;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a4 + 8);
    }
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    uint8x8_t v22 = "]: ";
    uint64_t v23 = 3;
  }
  else
  {
    if (v12 > 5) {
      uint64_t v14 = "?";
    }
    else {
      uint64_t v14 = off_1E6511220[v12];
    }
    size_t v24 = strlen(v14);
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v14, v24);
    uint8x8_t v22 = ": ";
    uint64_t v23 = 2;
  }
  unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  size_t v26 = strlen(a5);
  char v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a5, v26);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  int v28 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v30);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1C5493560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t ImsLogDestinationStderr::createFromString(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == 6)
  {
    if (v3 >= 0) {
      unint64_t v4 = (int *)a2;
    }
    else {
      unint64_t v4 = (int *)*a2;
    }
    int v5 = *v4;
    int v6 = *((unsigned __int16 *)v4 + 2);
    if (v5 == 1701082227 && v6 == 29298) {
      operator new();
    }
  }
  return 0;
}

uint64_t ImsLogDestinationSyslog::createFromString(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == 6)
  {
    if (v3 >= 0) {
      unint64_t v4 = (int *)a2;
    }
    else {
      unint64_t v4 = (int *)*a2;
    }
    int v5 = *v4;
    int v6 = *((unsigned __int16 *)v4 + 2);
    if (v5 == 1819507059 && v6 == 26479) {
      operator new();
    }
  }
  return 0;
}

void ImsLogDestinationSyslog::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (a3 >= 7) {
    int v5 = 7;
  }
  else {
    int v5 = a3;
  }
  syslog(v5, "%s", a5);
}

void ImsLogDestinationOslog::~ImsLogDestinationOslog(ImsLogDestinationOslog *this)
{
  *(void *)this = &unk_1F20D28C8;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1) {
    os_release(v1);
  }
}

{
  uint64_t vars8;

  ImsLogDestinationOslog::~ImsLogDestinationOslog(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsLogDestinationOslog::createFromString(int a1, std::string *this)
{
  std::string::size_type v3 = std::string::find(this, 58, 0);
  memset(&v13, 0, sizeof(v13));
  std::string::basic_string(&v13, this, 0, v3, (std::allocator<char> *)&v12);
  std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  if (size == 5)
  {
    int v5 = (v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v13
       : (std::string *)v13.__r_.__value_.__r.__words[0];
    int data = (int)v5->__r_.__value_.__l.__data_;
    int v7 = v5->__r_.__value_.__s.__data_[4];
    if (data == 1869378415 && v7 == 103)
    {
      if (v3 != -1)
      {
        std::string::size_type v9 = v3 + 1;
        std::string::size_type v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if ((v10 & 0x80u) != 0) {
          std::string::size_type v10 = this->__r_.__value_.__l.__size_;
        }
        if (v9 < v10) {
          operator new();
        }
      }
      operator new();
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5493950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  MEMORY[0x1C878E320](v18, 0x10A1C4088054FEALL);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsLoggerStreambuf::overflow(char **this, int a2)
{
  if (a2 != -1)
  {
    char v2 = a2;
    ImsLoggerStreambuf::dump((ImsLoggerStreambuf *)this, this[6]);
    *this[6]++ = v2;
  }
  return 0;
}

uint64_t ImsLogFacility::ImsLogFacility(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20D2990;
  *(void *)(a1 + 8) = 0;
  int v6 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v7 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 88), 0);
  *(unsigned char *)(a1 + 152) = 0;
  std::string::operator=(v6, a2);
  *(void *)(a1 + 32) = a3;
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear(v7);
  *(_DWORD *)(a1 + 80) = 4;
  return a1;
}

void sub_1C5493A8C(_Unwind_Exception *a1)
{
  pthread_mutex_destroy(v4);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table(v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void ImsLogFacility::~ImsLogFacility(ImsLogFacility *this)
{
  *(void *)this = &unk_1F20D2990;
  char v2 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear((uint64_t)this + 40);
  *((_DWORD *)this + 20) = 4;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table((uint64_t)v2);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  ImsLogFacility::~ImsLogFacility(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsLogFacility::dumpState(ImsLogFacility *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  for (uint64_t i = (uint64_t *)*((void *)this + 7); i; uint64_t i = (uint64_t *)*i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
    *((unsigned char *)a2 + 17) = 0;
    unsigned int v6 = *((_DWORD *)i + 4) - 3;
    uint64_t v7 = "?";
    if (v6 <= 5) {
      uint64_t v7 = off_1E6511220[v6];
    }
    size_t v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v7, v8);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"(", 1);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)") ", 2);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  return result;
}

void ImsLogger::obfuscate(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&__str, "xxxxxx");
  uint64_t v6 = *(void *)(a1 + 472);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)(a1 + 448), __p);
  if ((v10 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    unint64_t v8 = v10;
  }
  else {
    unint64_t v8 = (unint64_t)__p[1];
  }
  (*(void (**)(uint64_t, void **, unint64_t, std::string *))(*(void *)v6 + 24))(v6, v7, v8, &__str);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string(a3, &__str, 0, 0xAuLL, (std::allocator<char> *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5493E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::addDestination(ImsLogger *a1, uint64_t a2)
{
  uint64_t v3 = (void *)((char *)a1 + 24);
  uint64_t v4 = *((void *)a1 + 4);
  if ((ImsLogger *)v4 == (ImsLogger *)((char *)a1 + 24))
  {
LABEL_4:
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Unknown log destination '", 25);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::string v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"'", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    std::string v13 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = (ImsLogDestination *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16), a2);
      if (v6) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if ((void *)v4 == v3) {
        goto LABEL_4;
      }
    }
    return ImsLogger::addDestination(a1, v6);
  }
}

void sub_1C5493FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t ImsLogger::addDestination(ImsLogger *this, ImsLogDestination *a2)
{
  *((void *)a2 + 1) = this;
  uint64_t v4 = (*(uint64_t (**)(ImsLogDestination *))(*(void *)a2 + 32))(a2);
  if (v4)
  {
    uint64_t v9 = 0;
    ImsLock::set((pthread_mutex_t *)((char *)this + 376), &v9, (uint64_t)v10);
    ImsResult::~ImsResult((ImsResult *)v10);
    int v5 = operator new(0x18uLL);
    v5[1] = this;
    void v5[2] = a2;
    uint64_t v6 = *(void *)this;
    *int v5 = *(void *)this;
    *(void *)(v6 + 8) = v5;
    *(void *)this = v5;
    ++*((void *)this + 2);
    int v7 = *((_DWORD *)a2 + 4);
    if (v7 > *((_DWORD *)this + 120)) {
      *((_DWORD *)this + 120) = v7;
    }
    ImsLock::~ImsLock(&v9);
  }
  return v4;
}

void sub_1C54940C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void *ImsLogger::clearDestinations(ImsLogger *this)
{
  uint64_t v6 = (uint64_t)&v6;
  int v7 = &v6;
  uint64_t v8 = 0;
  int v5 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 376), &v5, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  if (&v6 != (uint64_t *)this) {
    std::list<ImsLogDestination *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(&v6, *((void *)this + 1), (uint64_t)this);
  }
  std::__list_imp<unsigned long long>::clear(this);
  ImsLock::~ImsLock(&v5);
  for (uint64_t i = v7; i != &v6; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v3 = i[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return std::__list_imp<unsigned long long>::clear(&v6);
}

void sub_1C54941A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, pthread_mutex_t *);
  ImsLock::~ImsLock((pthread_mutex_t **)va);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::osLog(ImsLogger *this)
{
  uint64_t v1 = (ImsLogger *)*((void *)this + 1);
  if (v1 == this) {
    return MEMORY[0x1E4F14500];
  }
  uint64_t v3 = MEMORY[0x1E4F14500];
  while (1)
  {
    uint64_t v4 = (const void *)*((void *)v1 + 2);
    if (v4)
    {
      if (v5) {
        break;
      }
    }
    uint64_t v1 = (ImsLogger *)*((void *)v1 + 1);
    if (v1 == this) {
      return v3;
    }
  }
  return v5[3];
}

void ims::createNullStream(ims *this)
{
}

uint64_t ImsLogger::error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  uint64_t v4 = ImsLogger::streamForFacilityAndPriority(a1, (unsigned __int8 *)&__p, 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C5494470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsLogger::addFacility(uint64_t a1)
{
  if (!*(void *)(a1 + 272)) {
    operator new();
  }
  operator new();
}

void sub_1C5494558(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C404807EDE9);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::setPriority(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t result = ImsLogger::facilityWithName(a1, a3, 1);
  if ((a2 - 9) >= 0xFFFFFFFA) {
    *(_DWORD *)(result + 80) = a2;
  }
  if (*(_DWORD *)(a1 + 256) > a2)
  {
    a2 = *(_DWORD *)(a1 + 176);
    uint64_t v6 = *(void *)(a1 + 272);
    if (v6)
    {
      for (uint64_t i = *(void **)(v6 + 16); i; uint64_t i = (void *)*i)
      {
        if (*(_DWORD *)(i[5] + 80) > a2) {
          a2 = *(_DWORD *)(i[5] + 80);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 256) = a2;
  return result;
}

void ImsLogger::setParams(ImsLogger *a1, std::string *a2)
{
  std::string::size_type v4 = 0;
  memset(&__str, 0, sizeof(__str));
  while (1)
  {
    std::string::size_type v4 = ims::nextToken(a2, v4, &__str, 0x2Cu);
    if (v4 == -1) {
      break;
    }
    memset(&v15, 0, sizeof(v15));
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str.__r_.__value_.__l.__size_;
    }
    if (!size
      || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (p_str = &__str)
        : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
          (int v7 = memchr(p_str, 61, size), v8 = v7 - (unsigned char *)p_str, v7) ? (v9 = v8 == -1) : (v9 = 1),
          v9))
    {
      *((unsigned char *)&v15.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 7;
      qmemcpy(&v15, "default", 7);
      int v10 = priorityFromString(&__str);
LABEL_16:
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v15;
      }
      else {
        unint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v11);
      ImsLogger::setPriority((uint64_t)a1, v10, (unsigned __int8 *)&__p);
      goto LABEL_20;
    }
    std::string::basic_string(&__p, &__str, 0, v8, (std::allocator<char> *)&v17);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string v15 = __p;
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    if (v12 != 4
      || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (std::string v13 = &v15)
        : (std::string v13 = (std::string *)v15.__r_.__value_.__r.__words[0]),
          LODWORD(v13->__r_.__value_.__l.__data_) != 1953719652))
    {
      std::string::basic_string(&__p, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
      int v10 = priorityFromString(&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_16;
    }
    std::string::basic_string(&__p, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
    ImsLogger::addDestination(a1, (uint64_t)&__p);
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C549481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t priorityFromString(unsigned char *a1)
{
  uint64_t v1 = (const void **)a1;
  int v2 = (char)a1[23];
  if (v2 >= 0) {
    size_t v3 = a1[23];
  }
  else {
    size_t v3 = *((void *)a1 + 1);
  }
  switch(v3)
  {
    case 1uLL:
      if (v2 >= 0) {
        std::string::size_type v4 = a1;
      }
      else {
        std::string::size_type v4 = *(unsigned __int8 **)a1;
      }
      int v5 = *v4;
      switch(v5)
      {
        case 'e':
          goto LABEL_51;
        case 'n':
          goto LABEL_39;
        case 'w':
          goto LABEL_52;
      }
      if (!memcmp(v4, "i", v3)) {
        goto LABEL_26;
      }
      uint64_t v6 = "d";
      a1 = v4;
      goto LABEL_34;
    case 3uLL:
      if (v2 >= 0) {
        int v7 = (unsigned __int16 *)a1;
      }
      else {
        int v7 = *(unsigned __int16 **)a1;
      }
      int v8 = *v7;
      int v9 = *((unsigned __int8 *)v7 + 2);
      if (v8 != 29285 || v9 != 114) {
        goto LABEL_47;
      }
      goto LABEL_51;
    case 4uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (*(_DWORD *)a1 == 1852989815) {
        goto LABEL_52;
      }
      if (memcmp(a1, "info", v3)) {
        goto LABEL_47;
      }
LABEL_26:
      uint64_t v11 = 6;
      break;
    case 5uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (*(_DWORD *)a1 == 1869771365 && a1[4] == 114)
      {
LABEL_51:
        uint64_t v11 = 3;
      }
      else
      {
        uint64_t v6 = "debug";
LABEL_34:
        if (!memcmp(a1, v6, v3))
        {
          uint64_t v11 = 7;
        }
        else
        {
LABEL_47:
          uint64_t v11 = 8;
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "s"))
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "spam")) {
              uint64_t v11 = 8;
            }
            else {
              uint64_t v11 = 4;
            }
          }
        }
      }
      break;
    case 6uLL:
      if (v2 < 0) {
        a1 = *(unsigned char **)a1;
      }
      if (memcmp(a1, "notice", v3)) {
        goto LABEL_47;
      }
LABEL_39:
      uint64_t v11 = 5;
      break;
    case 7uLL:
      if (v2 >= 0) {
        std::string v13 = (int *)a1;
      }
      else {
        std::string v13 = *(int **)a1;
      }
      int v14 = *v13;
      int v15 = *(int *)((char *)v13 + 3);
      if (v14 != 1852989815 || v15 != 1735289198) {
        goto LABEL_47;
      }
LABEL_52:
      uint64_t v11 = 4;
      break;
    default:
      goto LABEL_47;
  }
  return v11;
}

void ImsLogger::dumpToPath(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 376), &v5, (uint64_t)v6);
  ImsResult::~ImsResult((ImsResult *)v6);
  for (uint64_t i = a1; ; (*(void (**)(void, uint64_t))(**(void **)(i + 16) + 48))(*(void *)(i + 16), a2))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a1) {
      break;
    }
  }
  ImsLock::~ImsLock(&v5);
}

void sub_1C5494B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
}

void ImsLogger::addStackToLogTagMap(void *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6 = (uint64_t)(a1 + 61);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 61, a2))
  {
    switch(a3)
    {
      case 0:
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        int v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&__str);
        if ((char)v7[63] < 0)
        {
          *((void *)v7 + 6) = 4;
          int v8 = (char *)*((void *)v7 + 5);
        }
        else
        {
          int v8 = (char *)(v7 + 40);
          v7[63] = 4;
        }
        strcpy(v8, "emgr");
        return;
      case 1:
        unint64_t v15 = a1[66] + 1;
        a1[66] = v15;
        std::to_string(&v19, v15);
        uint64_t v16 = std::string::insert(&v19, 0, "ims", 3uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        goto LABEL_14;
      case 2:
        unint64_t v9 = a1[67] + 1;
        a1[67] = v9;
        std::to_string(&v19, v9);
        int v10 = std::string::insert(&v19, 0, "laz", 3uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        goto LABEL_14;
      case 3:
        unint64_t v12 = a1[68] + 1;
        a1[68] = v12;
        std::to_string(&v19, v12);
        std::string v13 = std::string::insert(&v19, 0, "thmp", 4uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
LABEL_14:
        v19.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v19);
        std::string::operator=((std::string *)(v18 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_1C5494DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsLogger::removeStackFromLogTagMap(uint64_t a1, unsigned __int8 *a2)
{
  size_t v3 = (void *)(a1 + 488);
  std::string::size_type v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a1 + 488), a2);
  if (v4)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(v3, v4, (uint64_t)v8);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "logger");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_25_2);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    uint64_t v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Unable to remove stackId (", 26);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)") from LogTagMap", 16);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_1C5494F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::error(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  return ImsLogger::error(v4, a1, a2);
}

void ImsLogger::logTagForStack(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a1 + 488), a2);
  if (v4)
  {
    if ((char)v4[63] < 0)
    {
      uint64_t v6 = (const std::string::value_type *)*((void *)v4 + 5);
      std::string::size_type v7 = *((void *)v4 + 6);
      std::string::__init_copy_ctor_external(a3, v6, v7);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 40);
      a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_25_2);
  }
}

uint64_t ImsLogger::dumpState(ImsLogger *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"***** IMS Logger *****", 22);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  ImsLogFacility::dumpState((ImsLogger *)((char *)this + 96), a2);
  uint64_t v4 = *((void *)this + 20);
  for (uint64_t i = *(uint64_t ***)(*((void *)this + 34) + 16); i; uint64_t i = (uint64_t **)*i)
  {
    ImsLogFacility::dumpState((ImsLogFacility *)i[5], a2);
    v4 += i[5][8];
  }
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Total log facilities: ", 22);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Total log streams: ", 19);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void ims::createInstance(ims *this)
{
}

void sub_1C5495700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(&a11);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v24);
  if (*(char *)(v19 + 471) < 0) {
    operator delete(*v25);
  }
  pthread_mutex_destroy(v23);
  pthread_mutex_destroy(v22);
  if (*(char *)(v19 + 311) < 0) {
    operator delete(*(void **)(v19 + 288));
  }
  ImsLogFacility::~ImsLogFacility(v21);
  if (*(char *)(v19 + 95) < 0) {
    operator delete(*(void **)(v19 + 72));
  }
  if (*(char *)(v19 + 71) < 0) {
    operator delete(*(void **)(v19 + 48));
  }
  std::__list_imp<unsigned long long>::clear(v20);
  std::__list_imp<unsigned long long>::clear((void *)v19);
  MEMORY[0x1C878E320](v19, 0x10B2C40891255D7);
  _Unwind_Resume(a1);
}

uint64_t ims::info(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  ImsLogger::getFacilityWithStackTag(ims::_logger, a1, a2, &__p);
  uint64_t v5 = ImsLogger::streamForFacilityAndPriority(v4, (unsigned __int8 *)&__p, 6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5495878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::notice(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  ImsLogger::getFacilityWithStackTag(ims::_logger, a1, a2, &__p);
  uint64_t v5 = ImsLogger::streamForFacilityAndPriority(v4, (unsigned __int8 *)&__p, 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5495928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::warn(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  ImsLogger::getFacilityWithStackTag(ims::_logger, a1, a2, &__p);
  uint64_t v5 = ImsLogger::streamForFacilityAndPriority(v4, (unsigned __int8 *)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C54959D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::spam(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  uint64_t v4 = ims::_logger;
  ImsLogger::getFacilityWithStackTag(ims::_logger, a1, a2, &__p);
  uint64_t v5 = ImsLogger::streamForFacilityAndPriority(v4, (unsigned __int8 *)&__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1C5495A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::dumpMessage(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void **a5, char *a6, int a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDC2C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDC2C0))
  {
    qword_1EBBDC2B8 = (uint64_t)os_log_create("com.apple.ipTelephony", "ims");
    __cxa_guard_release(&qword_1EBBDC2C0);
  }
  std::string v13 = qword_1EBBDC2B8;
  if (os_log_type_enabled((os_log_t)qword_1EBBDC2B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v14 = a1;
    }
    else {
      long long v14 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = &str_25_2;
    _os_log_impl(&dword_1C51D1000, v13, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", buf, 0x16u);
    std::string v13 = qword_1EBBDC2B8;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v15 = a1;
    }
    else {
      unint64_t v15 = (uint64_t *)*a1;
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    _os_log_impl(&dword_1C51D1000, v13, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  ims::tokenizeAsView(a3, (void **)buf, __p);
  long long v43 = a5;
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  long long v17 = *(void ***)buf;
  uint64_t v18 = *(void ***)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    uint64_t v19 = qword_1EBBDC2B8;
    do
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a1 + 23) >= 0) {
          uint64_t v20 = a1;
        }
        else {
          uint64_t v20 = (uint64_t *)*a1;
        }
        unint64_t v21 = (char *)*v17;
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v20;
        __int16 v45 = 2082;
        uint64_t v46 = v21;
        _os_log_impl(&dword_1C51D1000, v19, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
        uint64_t v19 = qword_1EBBDC2B8;
      }
      v17 += 2;
    }
    while (v17 != v18);
  }
  uint64_t v22 = *(unsigned __int8 *)(a4 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a4 + 8);
  }
  if (v22)
  {
    *(void *)&buf[8] = *(void *)buf;
    std::string::basic_string[abi:ne180100]<0>(__p, "\n");
    ims::tokenizeAsView((uint64_t *)a4, (void **)buf, __p);
    if (v47 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v24 = *(void ***)buf;
    for (uint64_t i = *(void ***)&buf[8]; v24 != i; v24 += 2)
    {
      uint64_t v25 = qword_1EBBDC2B8;
      BOOL v26 = os_log_type_enabled((os_log_t)qword_1EBBDC2B8, OS_LOG_TYPE_DEFAULT);
      if (a7)
      {
        if (v26)
        {
          if (*((char *)a1 + 23) >= 0) {
            char v27 = a1;
          }
          else {
            char v27 = (uint64_t *)*a1;
          }
          int v28 = (char *)*v24;
          *(_DWORD *)std::string __p = 136446467;
          *(void *)&__p[4] = v27;
          __int16 v45 = 2085;
          uint64_t v46 = v28;
          long long v29 = v25;
          std::locale v30 = "[%{public}s]: %{sensitive}s";
LABEL_42:
          _os_log_impl(&dword_1C51D1000, v29, OS_LOG_TYPE_DEFAULT, v30, __p, 0x16u);
        }
      }
      else if (v26)
      {
        if (*((char *)a1 + 23) >= 0) {
          uint8x8_t v31 = a1;
        }
        else {
          uint8x8_t v31 = (uint64_t *)*a1;
        }
        unint64_t v32 = (char *)*v24;
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v31;
        __int16 v45 = 2082;
        uint64_t v46 = v32;
        long long v29 = v25;
        std::locale v30 = "[%{public}s]: %{public}s";
        goto LABEL_42;
      }
    }
  }
  unint64_t v33 = (void *)*((unsigned __int8 *)v43 + 23);
  int v34 = (char)v33;
  if ((char)v33 < 0) {
    unint64_t v33 = v43[1];
  }
  long long v35 = qword_1EBBDC2B8;
  if (v33 && os_log_type_enabled((os_log_t)qword_1EBBDC2B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      int v36 = a1;
    }
    else {
      int v36 = (uint64_t *)*a1;
    }
    unint64_t v37 = (char *)*v43;
    if (v34 >= 0) {
      unint64_t v37 = (char *)v43;
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v36;
    __int16 v45 = 2082;
    uint64_t v46 = v37;
    _os_log_impl(&dword_1C51D1000, v35, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    long long v35 = qword_1EBBDC2B8;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v38 = a1;
    }
    else {
      unint64_t v38 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v38;
    __int16 v45 = 2082;
    uint64_t v46 = (char *)&str_25_2;
    _os_log_impl(&dword_1C51D1000, v35, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    long long v35 = qword_1EBBDC2B8;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      int v39 = a1;
    }
    else {
      int v39 = (uint64_t *)*a1;
    }
    if (a6[23] >= 0) {
      long long v40 = a6;
    }
    else {
      long long v40 = *(char **)a6;
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v39;
    __int16 v45 = 2082;
    uint64_t v46 = v40;
    _os_log_impl(&dword_1C51D1000, v35, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    long long v35 = qword_1EBBDC2B8;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v41 = a1;
    }
    else {
      unint64_t v41 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v41;
    __int16 v45 = 2082;
    uint64_t v46 = (char *)&str_25_2;
    _os_log_impl(&dword_1C51D1000, v35, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
  }
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C5496054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogStream::isLog(ImsLogStream *this)
{
  return 1;
}

void ImsLoggerStreambuf::~ImsLoggerStreambuf(ImsLoggerStreambuf *this)
{
  *(void *)this = &unk_1F20D2910;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20D2910;
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x1C878E320);
}

void ImsLogDestinationStderr::~ImsLogDestinationStderr(ImsLogDestinationStderr *this)
{
}

double ImsLogDestinationStderr::name@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x600000000000000;
  double result = *(double *)"stderr";
  *(_OWORD *)a1 = *(_OWORD *)"stderr";
  return result;
}

uint64_t ImsLogDestination::initialize(ImsLogDestination *this)
{
  return 1;
}

void ImsLogDestinationSyslog::~ImsLogDestinationSyslog(ImsLogDestinationSyslog *this)
{
}

double ImsLogDestinationSyslog::name@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x600000000000000;
  double result = *(double *)"syslog";
  *(_OWORD *)a1 = *(_OWORD *)"syslog";
  return result;
}

double ImsLogDestinationOslog::name@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)"oslog";
  *(_OWORD *)a1 = *(_OWORD *)"oslog";
  *(void *)(a1 + 16) = 0x500000000000000;
  return result;
}

uint64_t ImsLogFacility::logger(ImsLogFacility *this)
{
  return *((void *)this + 4);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      long long v11 = (char *)operator new(v10);
    }
    else {
      long long v11 = 0;
    }
    unint64_t v12 = &v11[v7];
    std::string v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      long long v11 = v12;
    }
    else
    {
      long long v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<char>::__throw_length_error[abi:ne180100]()
{
}

void NullStreambuf::~NullStreambuf(NullStreambuf *this)
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1C878E320);
}

uint64_t NullStreambuf::overflow(NullStreambuf *this, uint64_t a2)
{
  return a2;
}

void std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D2B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D2B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap::~ImsLogStreamWrap(ImsLogStream *a1)
{
  ImsLogStream::~ImsLogStream(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      size_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    size_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::list<ImsLogDestination *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    i[2] = *(void *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<ImsLogDestination *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<unsigned long long,long>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<ImsLogDestination *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    unint64_t v8 = operator new(0x18uLL);
    unint64_t v9 = v8;
    *unint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      unint64_t v12 = v8;
      do
      {
        unint64_t v8 = operator new(0x18uLL);
        *unint64_t v8 = v12;
        v8[1] = 0;
        void v8[2] = *(void *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        unint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1C54966D0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C54966F0(_Unwind_Exception *a1)
{
}

char *std::__hash_table<std::__hash_value_type<std::string,ImsLogFacility *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ImsLogFacility *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int64_t v7 = a1 + 3;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    long long v14 = *(void ***)(*a1 + 8 * v13);
    if (v14)
    {
      char v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2))return v15; {
          }
            }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10) {
                v16 %= v10;
              }
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v13) {
              break;
            }
          }
          char v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  long long v17 = *a4;
  char v15 = (char *)operator new(0x30uLL);
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = v9;
  uint64_t v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v19 = *v17;
    *((void *)v15 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((void *)v15 + 5) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v26 = operator new(8 * *(void *)&prime);
          char v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          long long v29 = (void *)a1[2];
          if (v29)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = a1 + 2;
            long long v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *long long v29 = *v35;
                  *long long v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  long long v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                long long v29 = v35;
                long long v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v37 = *a1;
  unint64_t v38 = *(void **)(*a1 + 8 * v13);
  if (v38)
  {
    *(void *)char v15 = *v38;
LABEL_75:
    *unint64_t v38 = v15;
    goto LABEL_76;
  }
  *(void *)char v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(void *)(v37 + 8 * v13) = a1 + 2;
  if (*(void *)v15)
  {
    unint64_t v39 = *(void *)(*(void *)v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10) {
        v39 %= v10;
      }
    }
    else
    {
      v39 &= v10 - 1;
    }
    unint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v15;
}

void sub_1C5496B4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *LazuliFramer::LazuliFramer(void *a1, void *a2, const std::string *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "framer.laz");
  ImsLogContainer::ImsLogContainer((uint64_t)a1, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F20D2C28;
  a1[13] = *a2;
  uint64_t v6 = a2[1];
  a1[14] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  return a1;
}

void sub_1C5496C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL LazuliFramer::processNextFrame(const std::string *a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)&a1[5];
  std::string::size_type v5 = std::string::find(a1 + 5, 10, 0);
  if (v5 == -1) {
    return 0;
  }
  memset(&v70, 0, sizeof(v70));
  uint64_t v6 = std::string::basic_string(&v70, v4, 0, v5, (std::allocator<char> *)&v69);
  ims::chomp(v6, "\r\n\t ", 3);
  memset(&v69, 0, sizeof(v69));
  std::string::size_type v7 = ims::nextToken(&v70, 0, &v69, 0x20u);
  if (v7 == -1)
  {
    unint64_t v10 = (unsigned char *)(*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
    (*(void (**)(const std::string *, unsigned char *))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v10 + 1), (uint64_t)"LazuliMessageDecoder: no tokens in start line", 45);
    v10[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_12;
  }
  std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  if (size == 4)
  {
    unint64_t v9 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v9 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if (LODWORD(v9->__r_.__value_.__l.__data_) == 1347572557)
    {
      memset(&v68, 0, sizeof(v68));
      if (ims::nextToken(&v70, v7, &v68, 0x20u) == -1)
      {
        uint64_t v18 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
        (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"LazuliMessageDecoder: no transaction ID in the message ", 55);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        BOOL v11 = 0;
        *(unsigned char *)(v18 + 17) = 0;
LABEL_110:
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        goto LABEL_13;
      }
      memset(&v67, 0, sizeof(v67));
      std::string::basic_string[abi:ne180100]<0>(&v67, "-------");
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v13 = &v68;
      }
      else {
        unint64_t v13 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v68.__r_.__value_.__l.__size_;
      }
      std::string::append(&v67, (const std::string::value_type *)v13, v14);
      uint64_t v15 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
      (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"MSRP expected endline: ", 23);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 32))(v15, &v67);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      uint64_t v64 = 0;
      int v65 = 0;
      uint64_t v66 = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v67.__r_.__value_.__l.__data_, 36, &v64);
      if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0)
      {
        int data = (std::string *)a1[5].__r_.__value_.__l.__data_;
        int64_t v16 = a1[5].__r_.__value_.__l.__size_;
      }
      else
      {
        int64_t v16 = HIBYTE(a1[5].__r_.__value_.__r.__words[2]);
        int data = v4;
      }
      long long v19 = (char *)HIBYTE(v66);
      char v20 = HIBYTE(v66);
      if (v66 >= 0) {
        float v21 = (char *)&v64;
      }
      else {
        float v21 = (char *)v64;
      }
      std::string __p = v65;
      if (v66 >= 0) {
        int64_t v22 = HIBYTE(v66);
      }
      else {
        int64_t v22 = (int64_t)v65;
      }
      if (v22)
      {
        __s = data;
        if (v16 >= v22)
        {
          BOOL v26 = data;
          char v27 = (char *)data + v16;
          int v28 = *v21;
          do
          {
            int64_t v29 = v16 - v22;
            if (v29 == -1) {
              break;
            }
            unint64_t v30 = (char *)memchr(v26, v28, v29 + 1);
            if (!v30) {
              break;
            }
            uint8x8_t v31 = v30;
            if (!memcmp(v30, v21, v22))
            {
              if (v31 != v27)
              {
                uint64_t v25 = v31 - (char *)__s;
                if (v31 - (char *)__s != -1) {
                  goto LABEL_71;
                }
              }
              break;
            }
            BOOL v26 = (std::string *)(v31 + 1);
            int64_t v16 = v27 - (v31 + 1);
          }
          while (v16 >= v22);
        }
        memset(&v63, 0, sizeof(v63));
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v67.__r_.__value_.__l.__data_, 43, &v63);
        if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v24 = (std::string *)a1[5].__r_.__value_.__l.__data_;
          int64_t v23 = a1[5].__r_.__value_.__l.__size_;
        }
        else
        {
          int64_t v23 = HIBYTE(a1[5].__r_.__value_.__r.__words[2]);
          unint64_t v24 = v4;
        }
        int v32 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
        uint8x8_t v33 = (void *)v63.__r_.__value_.__r.__words[0];
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = &v63;
        }
        else {
          uint64_t v34 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v35 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v35 = v63.__r_.__value_.__l.__size_;
        }
        if (v35)
        {
          unint64_t v36 = (char *)v24 + v23;
          if (v23 >= v35)
          {
            __pa = (void *)v63.__r_.__value_.__r.__words[0];
            int v38 = v34->__r_.__value_.__s.__data_[0];
            unint64_t v39 = v24;
            do
            {
              int64_t v40 = v23 - v35;
              if (v40 == -1) {
                break;
              }
              unint64_t v41 = (char *)memchr(v39, v38, v40 + 1);
              if (!v41) {
                break;
              }
              uint64_t v37 = v41;
              if (!memcmp(v41, v34, v35)) {
                goto LABEL_63;
              }
              unint64_t v39 = (std::string *)(v37 + 1);
              int64_t v23 = v36 - (v37 + 1);
            }
            while (v23 >= v35);
            uint64_t v37 = v36;
LABEL_63:
            uint8x8_t v33 = __pa;
          }
          else
          {
            uint64_t v37 = (char *)v24 + v23;
          }
          if (v37 == v36) {
            uint64_t v25 = -1;
          }
          else {
            uint64_t v25 = v37 - (char *)v24;
          }
        }
        else
        {
          uint64_t v25 = 0;
        }
        if (v32 < 0) {
          operator delete(v33);
        }
        if (v25 == -1)
        {
          uint64_t v50 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
          (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"MSRP endline not found.  received ", 34);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" accumulated ", 13);
          *(unsigned char *)(v50 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v50 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" endline ", 9);
          *(unsigned char *)(v50 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(void *)v50 + 32))(v50, &v67);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          BOOL v11 = 0;
          *(unsigned char *)(v50 + 17) = 0;
LABEL_106:
          if (SHIBYTE(v66) < 0) {
            operator delete(v64);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          goto LABEL_110;
        }
        long long v19 = (char *)HIBYTE(v66);
        std::string __p = v65;
        char v20 = HIBYTE(v66);
      }
      else
      {
        uint64_t v25 = 0;
      }
LABEL_71:
      long long v42 = __p;
      if (v20 >= 0) {
        long long v42 = v19;
      }
      long long v43 = &v42[v25];
      BOOL v44 = __CFADD__(v25, v42);
      if (__CFADD__(v25, v42))
      {
        uint64_t v45 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
        (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Discarding buffer.  Integer overflow detected adding ", 53);
        *(unsigned char *)(v45 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v45 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)" and ", 5);
        *(unsigned char *)(v45 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v45 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v45 + 17) = 0;
        if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0)
        {
          *a1[5].__r_.__value_.__l.__data_ = 0;
          a1[5].__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          a1[5].__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&a1[5].__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
        }
      }
      else
      {
        memset(&v63, 0, sizeof(v63));
        std::string::basic_string(&v63, v4, 0, (std::string::size_type)&v42[v25], (std::allocator<char> *)&v58);
        uint64_t v61 = 0;
        std::string::size_type v62 = 0;
        if (LazuliMessageDecoder::decode((uint64_t *)a1[4].__r_.__value_.__l.__size_, (uint64_t)&v63, (uint64_t)&v61))
        {
          uint64_t v59 = v61;
          int v60 = v62;
          if (v62) {
            atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v47 = *(void *)(a2 + 24);
          if (!v47) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v47 + 48))(v47, &v59);
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
        }
        std::string::size_type v48 = (std::string::size_type)(v43 + 1);
        if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v49 = a1[5].__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v49 = HIBYTE(a1[5].__r_.__value_.__r.__words[2]);
        }
        if (v48 >= v49)
        {
          uint64_t v52 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
          (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v52);
          std::string::size_type v53 = (unsigned char *)ImsOutStream::operator<<(v52, "no trailing data");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v53[17] = 0;
          if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0)
          {
            *a1[5].__r_.__value_.__l.__data_ = 0;
            a1[5].__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            a1[5].__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&a1[5].__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
          }
        }
        else
        {
          std::string::basic_string(&v58, v4, v48, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v71);
          if (SHIBYTE(a1[5].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v4->__r_.__value_.__l.__data_);
          }
          std::string *v4 = v58;
          ims::chomp(v4, "\r\n", 1);
          uint64_t v51 = (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
          (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v51);
          std::ostream::operator<<();
          *(unsigned char *)(v51 + 17) = 0;
          std::string::size_type v54 = (unsigned char *)ImsOutStream::operator<<(v51, " trailing bytes");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v54[17] = 0;
        }
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
      }
      BOOL v11 = !v44;
      goto LABEL_106;
    }
  }
  unint64_t v10 = (unsigned char *)(*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
  (*(void (**)(const std::string *, unsigned char *))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v10 + 1), (uint64_t)"LazuliMessageDecoder: non MSRP protocol: ", 41);
  v10[17] = 0;
  (*(void (**)(unsigned char *, std::string *))(*(void *)v10 + 32))(v10, &v69);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_12:
  BOOL v11 = 0;
  v10[17] = 0;
LABEL_13:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1C54977F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v42 - 121) < 0) {
    operator delete(*(void **)(v42 - 144));
  }
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  _Unwind_Resume(exception_object);
}

void *LazuliFramer::pumpData(uint64_t a1, const std::string::value_type *a2, uint64_t a3)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v5 = (std::string *)(a1 + 120);
  std::string::size_type v6 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v7 = v6;
  }
  std::string::append(v5, a2, v7);
  while (1)
  {
    std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    BOOL Frame = LazuliFramer::processNextFrame((const std::string *)a1, (uint64_t)v10);
    double result = std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::~__value_func[abi:ne180100](v10);
    if (!Frame) {
      break;
    }
    if (*(char *)(a1 + 143) < 0)
    {
      if (!*(void *)(a1 + 128)) {
        return result;
      }
    }
    else if (!*(unsigned char *)(a1 + 143))
    {
      return result;
    }
  }
  return result;
}

void sub_1C5497988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void LazuliFramer::~LazuliFramer(void **this)
{
  *this = &unk_1F20D2C28;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F20D2C28;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LazuliRequest::LazuliRequest(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  std::string::size_type v6 = (void *)LazuliMessage::LazuliMessage(a1, a2, a4);
  void *v6 = &unk_1F20D2CA0;
  std::string::size_type v7 = (std::string *)(v6 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1C5497BFC(_Unwind_Exception *a1)
{
  LazuliMessage::~LazuliMessage(v1);
  _Unwind_Resume(a1);
}

void LazuliRequest::encodeStartLine(LazuliRequest *this, ImsOutStream *a2)
{
  LoggableString::LoggableString((LoggableString *)v9, "MSRP ");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (*((char *)this + 151) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else {
    std::string v6 = *(std::string *)((char *)this + 128);
  }
  LoggableString::LoggableString(&v7, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v7);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1C5497DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(exception_object);
}

void LazuliRequest::encodeEndLine(LazuliRequest *this, ImsOutStream *a2, int a3)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  if (a3) {
    char v5 = "$";
  }
  else {
    char v5 = "+";
  }
  LoggableString::LoggableString((LoggableString *)v11, v5);
  LoggableString::LoggableString((LoggableString *)v9, "-------");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v8);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v11);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C5497FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

void LazuliRequest::~LazuliRequest(void **this)
{
  *this = &unk_1F20D2CA0;
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  LazuliMessage::~LazuliMessage(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20D2CA0;
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  LazuliMessage::~LazuliMessage(this);
  JUMPOUT(0x1C878E320);
}

void LazuliRequest::debugStr(LazuliRequest *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 18);
  }
}

void SipContentTypeHeader::clone(SipContentTypeHeader *this)
{
}

void sub_1C5498240(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

uint64_t tlv::parseV<ms::tlv::RTPSessionIdentifier>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C54982A0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5498294);
}

uint64_t tlv::parseV<ms::tlv::IndicationStatus>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C54982F0(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54982E4);
}

uint64_t tlv::parseV<ms::tlv::ServiceAppData>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5498340(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5498334);
}

uint64_t ms::tlv::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  return a1 + 39;
}

uint64_t tlv::parseV<ms::tlv::SessionInactivityType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C54983FC(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54983F0);
}

uint64_t ms::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  a3[4] = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)4);
  a3[5] = *(_DWORD *)(a1 + 20);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

uint64_t tlv::parseV<ms::tlv::SenderReportInfo>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_DWORD *)a3);
  *a1 = result;
  return result;
}

void sub_1C5498508(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

uint64_t ms::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 29), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 29);
  return a1 + 33;
}

uint64_t tlv::parseV<ms::tlv::ReceiverReportInfo>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t result = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1C5498670(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
}

unsigned __int8 *ms::tlv::parseField(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_DWORD *)(a3 + 4) = a1[4];
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a1 + 5);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(a3 + 16), a1 + 7, (char *)a2, a2 - (unsigned __int8 *)(a1 + 7));
  return a2;
}

unsigned __int8 *tlv::parseV<ms::tlv::SDESInfo>@<X0>(char **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v4 = *a1;
  char v5 = (unsigned __int8 *)&v4[a2];
  uint64_t result = ms::tlv::parseField(v4, v5, a3);
  *a1 = (char *)v5;
  return result;
}

void sub_1C549876C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C549875CLL);
}

void sub_1C549877C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::parseV<ms::tlv::XRReceiverRefTime>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  uint64_t result = *(void *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

void sub_1C54987D4(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54987C8);
}

uint64_t tlv::parseV<ms::tlv::XRDLRRReportInfo>(uint64_t *a1, int a2)
{
  v3[0] = 0;
  v3[1] = 0;
  *a1 = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), v3);
  return v3[0];
}

void sub_1C54988B8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54988A4);
}

uint64_t tlv::parseV<ms::tlv::RTCPReportTypeInfoIncoming>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5498904(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C54988F8);
}

uint64_t tlv::parseV<ms::tlv::ApnType>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  uint64_t result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1C5498954(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C5498948);
}

void SipRecipientListBody::SipRecipientListBody(SipRecipientListBody *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\" xmlns:cp=\"urn:ietf:params:xml:ns:copycontrol\"><list></list></resource-lists>");
  SipGenericXmlBody::SipGenericXmlBody(this, &SipRecipientListBody::kContentType, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20D2D98;
}

void sub_1C54989E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRecipientListBody::addRecipient(uint64_t a1@<X0>, uint64_t *a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (*(void *)(v4 + 2064) == 1)
    {
      uint64_t v7 = *(void *)(v4 + 2048);
      uint64_t v9 = *(void *)(v7 + 56);
      std::string v8 = *(std::__shared_weak_count **)(v7 + 64);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "entry");
        std::string::basic_string[abi:ne180100]<0>(__p, "list");
        XmlParserGenericItem::firstChildAtPath(a1 + 56, (uint64_t)__p, 1);
        XmlParserGenericItem::addChildWithName();
      }
    }
    else
    {
      std::string v8 = 0;
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v15 = &unk_1F20B2680;
    int64_t v16 = &_bambiDomain;
    int v17 = 1073741825;
    uint64_t v11 = ImsResult::operator<<<char [20]>((uint64_t)&v15, "recipient contains ");
    __p[0] = *(void **)(*a2 + 2064);
    uint64_t v12 = ImsResult::operator<<<unsigned long>(v11);
    unint64_t v13 = (const std::string *)ImsResult::operator<<<char [7]>(v12, " forks");
    ImsResult::ImsResult(a3, v13);
    ImsResult::~ImsResult((ImsResult *)&v15);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v15 = &unk_1F20B2680;
    int64_t v16 = &_bambiDomain;
    int v17 = 1073741825;
    char v10 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)&v15, "NULL recipient");
    ImsResult::ImsResult(a3, v10);
    ImsResult::~ImsResult((ImsResult *)&v15);
  }
}

void sub_1C54990E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v41 - 128));
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(a1);
}

void SipRecipientListBody::addedToPart(SipRecipientListBody *this, SipBodyPart *a2)
{
}

void SipRecipientListBody::~SipRecipientListBody(void **this)
{
  SipGenericXmlBody::~SipGenericXmlBody(this);
  JUMPOUT(0x1C878E320);
}

uint64_t _GLOBAL__sub_I_SipRecipientListBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipRecipientListBody::kContentType, "application/resource-lists+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipRecipientListBody::kContentType, &dword_1C51D1000);
}

void *HttpMessage::HttpMessage(void *a1, long long *a2)
{
  *a1 = &unk_1F20D2E40;
  a1[2] = 0;
  a1[1] = a1 + 2;
  a1[3] = 0;
  char v3 = (std::string *)(a1 + 4);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return a1;
}

void sub_1C549939C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t HttpMessage::HttpMessage(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = &unk_1F20D2E40;
  uint64_t v7 = (std::string *)(a1 + 32);
  std::string v8 = (uint64_t **)(a1 + 8);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100]((uint64_t *)(a1 + 8), a3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(void *)(a1 + 64)) {
      return a1;
    }
  }
  else if (!*(unsigned char *)(a1 + 79))
  {
    return a1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Content-Length");
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v8, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 16 == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Content-Length");
    if (*(char *)(a1 + 79) < 0) {
      unint64_t v12 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v12 = *(unsigned __int8 *)(a1 + 79);
    }
    std::to_string(&v15, v12);
    long long v18 = __p;
    unint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v18);
    std::string::operator=((std::string *)(v13 + 7), &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1C5499550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 79) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v20 + 55) < 0) {
    operator delete(*v22);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(void **)(v20 + 16));
  _Unwind_Resume(a1);
}

void HttpMessage::HttpMessage(HttpMessage *this, const HttpMessage *a2)
{
  *(void *)this = &unk_1F20D2E40;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  long long v4 = (std::string *)((char *)this + 32);
  char v5 = (void **)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (this != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 8, *((long long **)a2 + 1), (long long *)a2 + 1);
  }
  if (*((char *)a2 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)((char *)a2 + 56);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*v5);
  }
  *(std::string *)char v5 = v6;
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
}

void sub_1C54996C4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *v4);
  _Unwind_Resume(a1);
}

void HttpMessage::findHeader(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  if (a1 + 16 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 8, a2))
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v5, a2);
    if (*(char *)(v6 + 79) < 0)
    {
      std::string v8 = *(const std::string::value_type **)(v6 + 56);
      std::string::size_type v9 = *(void *)(v6 + 64);
      std::string::__init_copy_ctor_external(a3, v8, v9);
    }
    else
    {
      long long v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
}

void HttpMessage::serialize(HttpMessage *this, __CFHTTPMessage *a2)
{
  long long v4 = (long long *)*((void *)this + 1);
  uint64_t v5 = (char *)this + 16;
  if (v4 != (long long *)((char *)this + 16))
  {
    do
    {
      *(_OWORD *)std::string __p = 0u;
      long long v17 = 0u;
      *(_OWORD *)bodyData = 0u;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)bodyData, v4 + 2);
      uint64_t v13 = 0;
      CFStringRef headerField = 0;
      ims::CFString::CFString(&v13, (char *)bodyData, 0x8000100u);
      uint64_t v11 = 0;
      CFStringRef value = 0;
      ims::CFString::CFString(&v11, (char *)&__p[1], 0x8000100u);
      CFHTTPMessageSetHeaderFieldValue(a2, headerField, value);
      ims::CFType::~CFType((ims::CFType *)&v11);
      ims::CFType::~CFType((ims::CFType *)&v13);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(bodyData[0]);
      }
      uint64_t v6 = (long long *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (long long *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          long long v4 = v7;
        }
        while (!v8);
      }
      long long v4 = v7;
    }
    while (v7 != (long long *)v5);
  }
  std::string::size_type v9 = (UInt8 *)this + 56;
  if (*((char *)this + 79) < 0)
  {
    CFIndex v10 = *((void *)this + 8);
    if (!v10) {
      return;
    }
    bodyData[0] = 0;
    bodyData[1] = 0;
    std::string::size_type v9 = *(UInt8 **)v9;
  }
  else
  {
    CFIndex v10 = *((unsigned __int8 *)this + 79);
    if (!*((unsigned char *)this + 79)) {
      return;
    }
    bodyData[0] = 0;
    bodyData[1] = 0;
  }
  ims::CFData::CFData((ims::CFData *)bodyData, v9, v10);
  CFHTTPMessageSetBody(a2, bodyData[1]);
  ims::CFType::~CFType((ims::CFType *)bodyData);
}

void sub_1C5499900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ims::CFType::~CFType((ims::CFType *)va);
  _Unwind_Resume(a1);
}

void HttpMessage::copySerializedMessage(HttpMessage *this@<X0>, void *a2@<X8>)
{
  char v3 = (__CFHTTPMessage *)(*(uint64_t (**)(HttpMessage *))(*(void *)this + 32))(this);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    long long v4 = v3;
    HttpMessage::copySerializedMessage(v3, &v5);
    *(_OWORD *)a2 = v5;
    a2[2] = v6;
    CFRelease(v4);
  }
}

void sub_1C54999C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void HttpMessage::copySerializedMessage(CFHTTPMessageRef message@<X1>, void *a2@<X8>)
{
  if (!message) {
    goto LABEL_8;
  }
  CFDataRef v4 = CFHTTPMessageCopySerializedMessage(message);
  long long v7 = &unk_1F20D2EE0;
  CFDataRef theData = v4;
  if (!v4 || !CFDataGetLength(v4))
  {
    ims::CFType::~CFType((ims::CFType *)&v7);
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if (theData)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
  }
  else
  {
    BytePtr = 0;
    CFIndex Length = 0;
  }
  std::string::basic_string[abi:ne180100](a2, BytePtr, Length);
  ims::CFType::~CFType((ims::CFType *)&v7);
}

void sub_1C5499A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HttpMessage::deserialize(HttpMessage *this, CFHTTPMessageRef message)
{
  v22[0] = &unk_1F20E3A10;
  v22[1] = CFHTTPMessageCopyAllHeaderFields(message);
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = (long long *)v21;
  ims::CFDictionary::asStringMap((uint64_t)v22, (uint64_t)&v20, (uint64_t)theData);
  int v4 = (*(uint64_t (**)(CFDataRef, void))(*(void *)theData[1] + 24))(theData[1], LODWORD(v18[0]));
  ImsResult::~ImsResult((ImsResult *)theData);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(theData, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)theData, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Unable to fetch HTTP Request headers", 36);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18[0]) < 0) {
      operator delete(theData[0]);
    }
  }
  else
  {
    uint64_t v6 = v20;
    if (v20 != (long long *)v21)
    {
      do
      {
        *(_OWORD *)long long v18 = 0u;
        long long v19 = 0u;
        *(_OWORD *)CFDataRef theData = 0u;
        std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)theData, v6 + 2);
        __p[0] = theData;
        long long v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 1, (uint64_t)theData, (uint64_t)&std::piecewise_construct, (long long **)__p);
        std::string::operator=((std::string *)(v7 + 7), (const std::string *)&v18[1]);
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[1]);
        }
        if (SHIBYTE(v18[0]) < 0) {
          operator delete(theData[0]);
        }
        BOOL v8 = (long long *)*((void *)v6 + 1);
        if (v8)
        {
          do
          {
            std::string::size_type v9 = v8;
            BOOL v8 = *(long long **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            std::string::size_type v9 = (long long *)*((void *)v6 + 2);
            BOOL v10 = *(void *)v9 == (void)v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != (long long *)v21);
    }
    CFDataRef v11 = CFHTTPMessageCopyBody(message);
    if (v11)
    {
      theData[0] = (CFDataRef)&unk_1F20D2EE0;
      theData[1] = v11;
      BytePtr = (const std::string::value_type *)CFDataGetBytePtr(v11);
      if (theData[1]) {
        CFIndex Length = CFDataGetLength(theData[1]);
      }
      else {
        CFIndex Length = 0;
      }
      std::string::__assign_external((std::string *)((char *)this + 56), BytePtr, Length);
      ims::CFType::~CFType((ims::CFType *)theData);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21[0]);
  ims::CFType::~CFType((ims::CFType *)v22);
  return v4 ^ 1u;
}

void sub_1C5499D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a29, a30);
  ims::CFType::~CFType((ims::CFType *)(v30 - 104));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    long long v19 = (uint64_t *)a1;
    uint64_t v20 = v8;
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        std::string::size_type v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          BOOL v10 = v21;
          uint64_t v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v18, (uint64_t)(v21 + 4));
          std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          BOOL v8 = v20;
          uint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          }
          unint64_t v12 = (long long *)*((void *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              unint64_t v12 = *(long long **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v13 = *(void *)a2 == (void)v9;
              std::string::size_type v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          std::string::size_type v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      long long v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>(a1, a2 + 2, &v19);
      uint64_t v18 = 0;
      std::string::size_type v14 = v19;
      std::string v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v18, (uint64_t)(v19 + 4));
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      long long v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19, 0);
      char v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          long long v17 = v16;
          char v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (long long *)*((void *)a2 + 2);
          BOOL v13 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1C5499FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v6 = (const char *)a3;
    }
    else {
      uint64_t v6 = *(const char **)a3;
    }
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        std::string::size_type v9 = (void *)v4[4];
        uint64_t v7 = v4 + 4;
        BOOL v8 = v9;
        BOOL v10 = (const char *)(*((char *)v7 + 23) >= 0 ? v7 : v8);
        if ((strcasecmp(v6, v10) & 0x80000000) == 0) {
          break;
        }
        int v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_14;
        }
      }
      int v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_14:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  uint64_t v7 = *(char *)(v5 + 55) >= 0 ? (const char *)(v5 + 32) : *(const char **)(v5 + 32);
  if (strcasecmp(v6, v7) < 0) {
    return v3;
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const char *)a2;
    }
    else {
      uint64_t v6 = *(const char **)a2;
    }
    do
    {
      if (*(char *)(v5 + 55) >= 0) {
        uint64_t v7 = (const char *)(v5 + 32);
      }
      else {
        uint64_t v7 = *(const char **)(v5 + 32);
      }
      int v8 = strcasecmp(v7, v6);
      std::string::size_type v9 = (uint64_t *)(v5 + 8);
      if (v8 >= 0)
      {
        std::string::size_type v9 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C549A298(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ImsCFDnsResolver::HostInfo::~HostInfo(ImsCFDnsResolver::HostInfo *this)
{
  uint64_t v2 = (__CFHost *)*((void *)this + 2);
  if (v2)
  {
    Main = CFRunLoopGetMain();
    CFHostUnscheduleFromRunLoop(v2, Main, (CFStringRef)*MEMORY[0x1E4F1D410]);
  }
  uint64_t v4 = (const void *)*((void *)this + 10);
  if (v4) {
    _Block_release(v4);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  ims::CFType::~CFType((ImsCFDnsResolver::HostInfo *)((char *)this + 8));
}

void ImsCFDnsResolver::HostInfo::_callback(ImsCFDnsResolver::HostInfo *this, __CFHost *a2, CFHostInfoType a3, const CFStreamError *a4, void *a5)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN16ImsCFDnsResolver8HostInfo9_callbackEP8__CFHost14CFHostInfoTypePK13CFStreamErrorPv_block_invoke;
  v5[3] = &__block_descriptor_tmp_16;
  v5[4] = a4;
  ims::performBlock((IMSClientManager *)v5);
}

void ___ZN16ImsCFDnsResolver8HostInfo9_callbackEP8__CFHost14CFHostInfoTypePK13CFStreamErrorPv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (uint64_t v2 = *(void *)v1) != 0)
  {
    Boolean hasBeenResolved = 0;
    CFArrayRef Addressing = CFHostGetAddressing(*(CFHostRef *)(v1 + 16), &hasBeenResolved);
    uint64_t v34 = &unk_1F20E38B0;
    CFArrayRef v35 = Addressing;
    if (Addressing) {
      CFRetain(Addressing);
    }
    uint64_t v34 = &unk_1F20E39B8;
    if (hasBeenResolved)
    {
      if (v35)
      {
        CFIndex Count = CFArrayGetCount(v35);
        uint8x8_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        if (Count >= 1)
        {
          CFIndex v5 = 0;
          while (1)
          {
            uint64_t v27 = (uint64_t (**)(void **))&unk_1F20D2EE0;
            CFDataRef theData = 0;
            if (!v35
              || (ValueAtIndex = CFArrayGetValueAtIndex(v35, v5), (uint64_t v7 = ValueAtIndex) == 0)
              || (CFTypeID v8 = CFGetTypeID(ValueAtIndex), v8 != v27[4]((void **)&v27)))
            {
              std::string::basic_string[abi:ne180100]<0>(v29, "dns");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v10 = ims::debug((uint64_t)v29, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"couldn't get data for address ", 30);
              *(unsigned char *)(v10 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v10 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v10 + 17) = 0;
              if (v26 < 0) {
                operator delete(__p[0]);
              }
              if (v30 < 0) {
                operator delete(v29[0]);
              }
              goto LABEL_29;
            }
            ((void (*)(uint64_t (***)(void **), const void *, uint64_t))v27[6])(&v27, v7, 1);
            long long v24 = 0uLL;
            BytePtr = theData;
            if (theData) {
              BytePtr = (IpAddress *)CFDataGetBytePtr(theData);
            }
            IpAddress::createAddress(BytePtr, (uint64_t)&v24);
            if (!(void)v24) {
              break;
            }
            if ((*(_DWORD *)(v1 + 72) & (*(unsigned int (**)(void))(*(void *)v24 + 136))(v24)) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v29, "dns");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v12 = ims::debug((uint64_t)v29, (uint64_t)__p);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, v1 + 24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": skipping ", 11);
              *(unsigned char *)(v12 + 17) = 0;
              uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v24 + 128))(v24);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, v13);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" address ", 9);
              *(unsigned char *)(v12 + 17) = 0;
              uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)v24 + 40))(v24, v12);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_23;
            }
            std::vector<std::shared_ptr<IpAddress>>::push_back[abi:ne180100]((uint64_t *)&v31, &v24);
LABEL_27:
            if (*((void *)&v24 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
            }
LABEL_29:
            ims::CFType::~CFType((ims::CFType *)&v27);
            if (Count == ++v5) {
              goto LABEL_40;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v29, "dns");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v11 = ims::debug((uint64_t)v29, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"createAddress failed", 20);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_23:
          *(unsigned char *)(v11 + 17) = 0;
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          goto LABEL_27;
        }
      }
      else
      {
        uint8x8_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
LABEL_40:
      ImsDnsResolver::cleanAddressesAndPerformBlock(v2, v1 + 24, (long long **)&v31, *(void *)(v1 + 80));
      char v16 = (void ***)(v2 + 8);
      long long v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2 + 8, (void **)(v1 + 24));
      if ((void **)(v2 + 16) != v17)
      {
        uint64_t v18 = v17;
        long long v19 = (void **)v17[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            long long v19 = (void **)*v19;
          }
          while (v19);
        }
        else
        {
          uint64_t v21 = v17;
          do
          {
            uint64_t v20 = (void **)v21[2];
            BOOL v22 = *v20 == v21;
            uint64_t v21 = v20;
          }
          while (!v22);
        }
        if (*v16 == v17) {
          *char v16 = v20;
        }
        int64_t v23 = *(uint64_t **)(v2 + 16);
        --*(void *)(v2 + 24);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v23, (uint64_t *)v18);
        if (*((char *)v18 + 55) < 0) {
          operator delete(v18[4]);
        }
        operator delete(v18);
      }
      ImsCFDnsResolver::HostInfo::~HostInfo((ImsCFDnsResolver::HostInfo *)v1);
      MEMORY[0x1C878E320]();
      v29[0] = &v31;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "dns");
      std::string::basic_string[abi:ne180100]<0>(v29, "");
      uint64_t v15 = ims::debug((uint64_t)&v31, (uint64_t)v29);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, v1 + 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" hasn't been resolved", 21);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(v31);
      }
    }
    ims::CFType::~CFType((ims::CFType *)&v34);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "dns");
    std::string::basic_string[abi:ne180100]<0>(v29, "");
    uint64_t v14 = ims::error((uint64_t)&v31, (uint64_t)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"NULL hostInfo or resolver", 25);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
  }
}

void sub_1C549AAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)(v32 - 104));
  _Unwind_Resume(a1);
}

void ImsCFDnsResolver::~ImsCFDnsResolver(ImsCFDnsResolver *this)
{
  *(void *)this = &unk_1F20D2E90;
  uint64_t v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      uint64_t v4 = (ImsCFDnsResolver::HostInfo *)*((void *)v2 + 7);
      if (v4)
      {
        ImsCFDnsResolver::HostInfo::~HostInfo(v4);
        MEMORY[0x1C878E320]();
      }
      CFIndex v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          CFIndex v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 2));
}

{
  uint64_t vars8;

  ImsCFDnsResolver::~ImsCFDnsResolver(this);
  JUMPOUT(0x1C878E320);
}

void ImsCFDnsResolver::resolveHostname(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((void **)(a1 + 16) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2))operator new(); {
  long long v9 = 0uLL;
  }
  *(void *)&long long v10 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  error.domain = (CFIndex)&unk_1F20B2680;
  *(void *)&error.CFStreamError error = &_bambiDomain;
  LODWORD(v12) = 1073741826;
  uint64_t v7 = ImsResult::operator<<<std::string>((uint64_t)&error, (uint64_t)a2);
  uint64_t v8 = ImsResult::operator<<<char [27]>(v7, " is already being resolved");
  (*(void (**)(uint64_t, void **, uint64_t, long long *))(a5 + 16))(a5, a2, v8, &v9);
  ImsResult::~ImsResult((ImsResult *)&error);
  error.domain = (CFIndex)&v9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&error);
}

void sub_1C549B3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::CFHost::~CFHost(ims::CFHost *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ims::CFType::getMemorySize(ims::CFType *this)
{
  return 0;
}

void ims::CFData::~CFData(ims::CFData *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C878E320);
}

void SipEventHeader::~SipEventHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipEventHeader::clone(SipEventHeader *this)
{
}

void sub_1C549B710(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

void LazuliFromPathHeader::LazuliFromPathHeader(LazuliFromPathHeader *this, const LazuliRouteSet *a2)
{
  uint64_t v3 = LazuliHeader::LazuliHeader((std::string *)this, (const std::string *)"From-Path");
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D3048;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v3[2].__r_.__value_.__r.__words[1], a2);
}

void sub_1C549B78C(_Unwind_Exception *a1)
{
  LazuliHeader::~LazuliHeader(v1);
  _Unwind_Resume(a1);
}

void LazuliFromPathHeader::create(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x88uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F20D30C8;
  uint64_t v4 = v3 + 24;
  LazuliHeader::LazuliHeader((std::string *)v3 + 1, (const std::string *)"From-Path");
  *((void *)v3 + 10) = &unk_1F20E7F48;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *((void *)v3 + 3) = &unk_1F20D3118;
  CFIndex v5 = (std::__shared_weak_count *)*((void *)v3 + 5);
  if (!v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    goto LABEL_5;
  }
  if (v5->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 2, 1uLL, memory_order_relaxed);
    *((void *)v3 + 4) = v4;
    *((void *)v3 + 5) = v3;
    std::__shared_weak_count::__release_weak(v5);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  *a1 = v4;
  a1[1] = v3;
}

void sub_1C549B8AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliFromPathHeader::encodeValue(LazuliFromPathHeader *this, ImsOutStream *a2)
{
  return 1;
}

BOOL LazuliFromPathHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v2 = (void *)(a1 + 56);
  BOOL v3 = LazuliRouteSet::fromString((LazuliRouteSet *)(a1 + 56), a2);
  if (!v3) {
    LazuliRouteSet::clear(v2);
  }
  return v3;
}

std::string::size_type LazuliFromPathHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type v3 = 0;
  while (1)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if (v3 >= size) {
      return -1;
    }
    std::string::size_type v5 = std::string::find(this, 60, v3);
    if (v5 == -1) {
      break;
    }
    std::string::size_type v6 = std::string::find(this, 62, v5);
    std::string::size_type v3 = v6 + 1;
    if (v6 == -1) {
      return -1;
    }
  }
  return std::string::find(this, 59, v3);
}

void LazuliFromPathHeader::~LazuliFromPathHeader(void **this)
{
  *this = &unk_1F20D3048;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20D3048;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliFromPathHeader::clone@<D0>(LazuliFromPathHeader *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0x88uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C25D0;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D7EA8;
  std::string::size_type v5 = v4 + 2;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4[2].__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
  v4[3].__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 48);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D3048;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v4[3].__r_.__value_.__r.__words[1], (LazuliFromPathHeader *)((char *)this + 56));
  *(void *)&long long v7 = v4 + 1;
  *((void *)&v7 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1C549BB84(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D30C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D30C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliFromPathHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  *a1 = &unk_1F20D3048;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F20D3048;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  std::string::size_type v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C549BFC0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C878E270](v1);
  _Unwind_Resume(a1);
}

void *SipDialogState::stateStr@<X0>(SipDialogState *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = *(_DWORD *)this - 1;
  if (v4 > 4) {
    std::string::size_type v5 = "unknown";
  }
  else {
    std::string::size_type v5 = off_1E65116C0[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C878E270](a1 + 128);
  return a1;
}

void SipDialogParticipantInfo::participantName(std::string *this, const std::string *a2)
{
  std::string v35[2] = *MEMORY[0x1E4F143B8];
  memset(&v28, 0, sizeof(v28));
  uint64_t v4 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (a2->__r_.__value_.__r.__words[0] == a2->__r_.__value_.__l.__size_) {
    goto LABEL_12;
  }
  while (1)
  {
    std::string::size_type v5 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    LOBYTE(v6) = *((unsigned char *)&v28.__r_.__value_.__s + 23);
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v5 = v28.__r_.__value_.__l.__size_;
    }
    if (v5) {
      break;
    }
    std::string::operator=(&v28, v4);
    v4 += 2;
    if (v4 == (const std::string *)a2->__r_.__value_.__l.__size_)
    {
      LOBYTE(v6) = *((unsigned char *)&v28.__r_.__value_.__s + 23);
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
      break;
    }
  }
  char v8 = v6;
  std::string::size_type v6 = v6;
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = size;
  }
  if (!v6)
  {
LABEL_12:
    SipDialogParticipantInfo::uri(a2, &__p);
    memset(&v27, 0, sizeof(v27));
    char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_25;
        }
        goto LABEL_16;
      }
    }
    else
    {
      std::string v27 = __p;
    }
    if (!v9) {
      goto LABEL_25;
    }
LABEL_16:
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    memset(v32, 0, sizeof(v32));
    memset(v31, 0, sizeof(v31));
    SipUri::SipUri((uint64_t)v31, &__p);
    std::string::operator=(&v27, (const std::string *)&v33[24]);
    std::string::size_type v10 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    char v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = v27.__r_.__value_.__l.__size_;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v27.__r_.__value_.__l.__size_;
    }
    if (!v13)
    {
      std::string::operator=(&v27, v32);
      std::string::size_type v10 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      std::string::size_type v12 = v27.__r_.__value_.__l.__size_;
      char v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0) {
      std::string::size_type v10 = v12;
    }
    if (!v10)
    {
      std::string::operator=(&v27, (const std::string *)v33);
      std::string::size_type v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = v27.__r_.__value_.__l.__size_;
      }
      if (v14)
      {
        memset(&v30, 0, sizeof(v30));
        long long v15 = SipUri::phoneContext((SipUri *)v31);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v16 = *v15;
          v30.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
        }
        char v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v18 = v30.__r_.__value_.__l.__size_;
        }
        if (v18)
        {
          memset(&v29, 0, sizeof(v29));
          long long v19 = &v29;
          std::string::basic_string[abi:ne180100]((uint64_t)&v29, v18 + 1);
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v20 = &v30;
          }
          else {
            uint64_t v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
          }
          memmove(v19, v20, v18);
          *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 45;
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v21 = &v27;
          }
          else {
            uint64_t v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
          }
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v22 = v27.__r_.__value_.__l.__size_;
          }
          int64_t v23 = std::string::append(&v29, (const std::string::value_type *)v21, v22);
          std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
          v35[0] = v23->__r_.__value_.__l.__size_;
          *(void *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
          char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          v27.__r_.__value_.__r.__words[0] = v24;
          v27.__r_.__value_.__l.__size_ = v35[0];
          *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v35 + 7);
          *((unsigned char *)&v27.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = v25;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          char v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        }
        if (v17 < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
      }
    }
    SipUri::~SipUri((SipUri *)v31);
LABEL_25:
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    std::string v28 = v27;
    *((unsigned char *)&v27.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
    v27.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
  if ((v8 & 0x80) == 0)
  {
LABEL_11:
    *this = v28;
    return;
  }
LABEL_30:
  std::string::__init_copy_ctor_external(this, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1C549C4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  SipUri::~SipUri((SipUri *)&a42);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void SipDialogParticipantInfo::uri(const std::string *this@<X0>, std::string *a2@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  std::string::value_type v4 = this[4].__r_.__value_.__s.__data_[0];
  if (!v4) {
    goto LABEL_17;
  }
  std::string::operator=(&v8, this + 1);
  std::string::value_type v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_17:
    std::string::size_type v6 = (const std::string *)this->__r_.__value_.__r.__words[0];
    if (this->__r_.__value_.__r.__words[0] != this->__r_.__value_.__l.__size_)
    {
      while (1)
      {
        std::string::size_type v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
        std::string::value_type v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v7 = v8.__r_.__value_.__l.__size_;
        }
        if (v7) {
          break;
        }
        std::string::operator=(&v8, v6 + 1);
        v6 += 2;
        if (v6 == (const std::string *)this->__r_.__value_.__l.__size_)
        {
          std::string::value_type v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
          break;
        }
      }
    }
  }
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(a2, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = v8;
  }
}

void sub_1C549C674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipDialogParticipantInfo::str(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 96) || *(void *)(a2 + 8) != *(void *)a2)
  {
    uint64_t v81 = 0;
    long long v79 = 0u;
    memset(v80, 0, sizeof(v80));
    *(_OWORD *)uint64_t v77 = 0u;
    long long v78 = 0u;
    memset(v76, 0, sizeof(v76));
    long long v75 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v75);
    std::string::value_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"    <", 5);
    int v5 = *(char *)(a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = *(void *)a3;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a3 + 8);
    }
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">\n", 2);
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = a2;
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      std::string::size_type v71 = (void *)*MEMORY[0x1E4FBA408];
      std::string::size_type v12 = *(void **)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      do
      {
        uint64_t v99 = 0;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        *(_OWORD *)uint64_t v82 = 0u;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"      <identity", 15);
        if (*(char *)(v9 + 23) < 0)
        {
          if (*(void *)(v9 + 8))
          {
LABEL_15:
            std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)" display=\"", 10);
            int v14 = *(char *)(v9 + 23);
            if (v14 >= 0) {
              uint64_t v15 = v9;
            }
            else {
              uint64_t v15 = *(void *)v9;
            }
            if (v14 >= 0) {
              uint64_t v16 = *(unsigned __int8 *)(v9 + 23);
            }
            else {
              uint64_t v16 = *(void *)(v9 + 8);
            }
            char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
          }
        }
        else if (*(unsigned char *)(v9 + 23))
        {
          goto LABEL_15;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)">", 1);
        int v18 = *(char *)(v9 + 47);
        if (v18 >= 0) {
          uint64_t v19 = v9 + 24;
        }
        else {
          uint64_t v19 = *(void *)(v9 + 24);
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v9 + 47);
        }
        else {
          uint64_t v20 = *(void *)(v9 + 32);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, v19, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"</identity>\n", 12);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v83 + 8, &v72);
        v82[0] = v71;
        *(void **)((char *)v82 + *((void *)v71 - 3)) = v12;
        *(void *)&long long v83 = v11;
        *((void *)&v83 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v88) < 0) {
          operator delete(*((void **)&v87 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C878E270](&v90);
        if ((v74 & 0x80u) == 0) {
          uint64_t v21 = &v72;
        }
        else {
          uint64_t v21 = v72;
        }
        if ((v74 & 0x80u) == 0) {
          uint64_t v22 = v74;
        }
        else {
          uint64_t v22 = v73;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v21, v22);
        if ((char)v74 < 0) {
          operator delete(v72);
        }
        v9 += 48;
      }
      while (v9 != *(void *)(v10 + 8));
    }
    if (!*(unsigned char *)(v10 + 96))
    {
LABEL_89:
      if (*(char *)(v10 + 127) < 0)
      {
        if (!*(void *)(v10 + 112))
        {
LABEL_100:
          uint64_t v53 = *(void *)(v10 + 72);
          for (uint64_t i = *(void *)(v10 + 80); v53 != i; v53 += 12)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"      <mediaAttributes>\n", 24);
            char v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"        <mediaType>", 19);
            if ((SBYTE7(v83) & 0x80u) == 0) {
              std::string::size_type v56 = v82;
            }
            else {
              std::string::size_type v56 = (void **)v82[0];
            }
            if ((SBYTE7(v83) & 0x80u) == 0) {
              uint64_t v57 = BYTE7(v83);
            }
            else {
              uint64_t v57 = (uint64_t)v82[1];
            }
            std::string v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"</mediaType>\n", 13);
            if (SBYTE7(v83) < 0) {
              operator delete(v82[0]);
            }
            if (*(unsigned char *)(v53 + 8)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"        <port0/>\n", 17);
            }
            uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"        <mediaDirection>", 24);
            ims::toString<MediaDirection>((unsigned int *)v53, v82);
            if ((SBYTE7(v83) & 0x80u) == 0) {
              int v60 = v82;
            }
            else {
              int v60 = (void **)v82[0];
            }
            if ((SBYTE7(v83) & 0x80u) == 0) {
              uint64_t v61 = BYTE7(v83);
            }
            else {
              uint64_t v61 = (uint64_t)v82[1];
            }
            std::string::size_type v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"</mediaDirection>\n", 18);
            if (SBYTE7(v83) < 0) {
              operator delete(v82[0]);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"      </mediaAttributes>\n", 25);
          }
          std::string v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"    </", 6);
          int v64 = *(char *)(a3 + 23);
          if (v64 >= 0) {
            uint64_t v65 = a3;
          }
          else {
            uint64_t v65 = *(void *)a3;
          }
          if (v64 >= 0) {
            uint64_t v66 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v66 = *(void *)(a3 + 8);
          }
          std::string v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)">\n", 2);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v76 + 8, a1);
          *(void *)&long long v75 = *MEMORY[0x1E4FBA408];
          uint64_t v68 = *(void *)(MEMORY[0x1E4FBA408] + 72);
          *(void *)((char *)&v76[-1] + *(void *)(v75 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
          *(void *)&v76[0] = v68;
          *((void *)&v76[0] + 1) = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v78) < 0) {
            operator delete(v77[1]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          return (void *)MEMORY[0x1C878E270](v80);
        }
      }
      else if (!*(unsigned char *)(v10 + 127))
      {
        goto LABEL_100;
      }
      std::string::size_type v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"      <session-description type=\"", 33);
      int v49 = *(char *)(v10 + 127);
      if (v49 >= 0) {
        uint64_t v50 = v10 + 104;
      }
      else {
        uint64_t v50 = *(void *)(v10 + 104);
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v10 + 127);
      }
      else {
        uint64_t v51 = *(void *)(v10 + 112);
      }
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\"/>\n", 4);
      goto LABEL_100;
    }
    if (*(char *)(v10 + 47) < 0)
    {
      if (*(void *)(v10 + 32)) {
        goto LABEL_45;
      }
    }
    else if (*(unsigned char *)(v10 + 47))
    {
      goto LABEL_45;
    }
    if (!*(void *)(v10 + 64))
    {
      std::string::basic_string[abi:ne180100]<0>(&v72, "");
LABEL_81:
      if ((v74 & 0x80u) == 0) {
        uint64_t v46 = &v72;
      }
      else {
        uint64_t v46 = v72;
      }
      if ((v74 & 0x80u) == 0) {
        uint64_t v47 = v74;
      }
      else {
        uint64_t v47 = v73;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v46, v47);
      if ((char)v74 < 0) {
        operator delete(v72);
      }
      goto LABEL_89;
    }
LABEL_45:
    uint64_t v99 = 0;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v82 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v82);
    int64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"      <target uri=\"", 19);
    int v24 = *(char *)(v10 + 47);
    if (v24 >= 0) {
      uint64_t v25 = v10 + 24;
    }
    else {
      uint64_t v25 = *(void *)(v10 + 24);
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v10 + 47);
    }
    else {
      uint64_t v26 = *(void *)(v10 + 32);
    }
    std::string v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\"", 1);
    if (*(void *)(v10 + 64))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)">\n", 2);
      std::string v28 = *(void **)(v10 + 48);
      if (v28 == (void *)(v10 + 56))
      {
        std::string v30 = "      </target>\n";
        uint64_t v29 = 16;
      }
      else
      {
        uint64_t v29 = 16;
        std::string v30 = "      </target>\n";
        do
        {
          uint8x8_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"        <param pname=\"", 22);
          int v32 = *((char *)v28 + 55);
          if (v32 >= 0) {
            uint64_t v33 = (uint64_t)(v28 + 4);
          }
          else {
            uint64_t v33 = v28[4];
          }
          if (v32 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v28 + 55);
          }
          else {
            uint64_t v34 = v28[5];
          }
          CFArrayRef v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\" pval=\"", 8);
          int v37 = *((char *)v28 + 79);
          if (v37 >= 0) {
            uint64_t v38 = (uint64_t)(v28 + 7);
          }
          else {
            uint64_t v38 = v28[7];
          }
          if (v37 >= 0) {
            uint64_t v39 = *((unsigned __int8 *)v28 + 79);
          }
          else {
            uint64_t v39 = v28[8];
          }
          int64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"/>\n", 4);
          uint64_t v41 = (void *)v28[1];
          if (v41)
          {
            do
            {
              uint64_t v42 = v41;
              uint64_t v41 = (void *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              uint64_t v42 = (void *)v28[2];
              BOOL v43 = *v42 == (void)v28;
              std::string v28 = v42;
            }
            while (!v43);
          }
          std::string v28 = v42;
        }
        while (v42 != (void *)(v10 + 56));
      }
    }
    else
    {
      std::string v30 = "/>\n";
      uint64_t v29 = 3;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v30, v29);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v83 + 8, &v72);
    v82[0] = *(void **)MEMORY[0x1E4FBA408];
    uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void **)((char *)v82 + *((void *)v82[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&long long v83 = v45;
    *((void *)&v83 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v88) < 0) {
      operator delete(*((void **)&v87 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C878E270](&v90);
    goto LABEL_81;
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void sub_1C549D080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
}

void SipDialogParticipantInfo::copyFrom(SipDialogParticipantInfo *this, const SipDialogParticipantInfo *a2)
{
  if (this != a2 && *((void *)this + 1) == *(void *)this) {
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)this, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
  }
  if (*((unsigned char *)this + 96)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *((unsigned char *)a2 + 96) == 0;
  }
  if (!v4)
  {
    *((unsigned char *)this + 96) = 1;
    std::string::operator=((std::string *)this + 1, (const std::string *)a2 + 1);
    if (this != a2) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 6, *((long long **)a2 + 6), (long long *)((char *)a2 + 56));
    }
  }
  if (*((char *)this + 127) < 0)
  {
    if (*((void *)this + 14)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 127))
  {
    return;
  }
  std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
}

void SipDialogDirection::str(SipDialogDirection *this@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "direction=\"");
    uint64_t v6 = (const std::string::value_type *)*((void *)this + 1);
    int v5 = (char *)this + 8;
    BOOL v4 = v6;
    int v7 = v5[23];
    if (v7 >= 0) {
      std::string v8 = v5;
    }
    else {
      std::string v8 = v4;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = v5[23];
    }
    else {
      std::string::size_type v9 = *((void *)v5 + 1);
    }
    uint64_t v10 = std::string::append(&v14, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v12 = std::string::append(&v15, "\"", 1uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1C549D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipDialogInfo::copyFrom(SipDialogInfo *this, const SipDialogInfo *a2)
{
  if (*((unsigned char *)a2 + 456))
  {
    if (*((unsigned char *)this + 456)) {
      SipDialogParticipantInfo::copyFrom((SipDialogInfo *)((char *)this + 328), (const SipDialogInfo *)((char *)a2 + 328));
    }
    else {
      SipDialogInfo::setLocal(this, (const SipDialogInfo *)((char *)a2 + 328));
    }
  }
  if (*((unsigned char *)a2 + 592))
  {
    if (*((unsigned char *)this + 592)) {
      SipDialogParticipantInfo::copyFrom((SipDialogInfo *)((char *)this + 464), (const SipDialogInfo *)((char *)a2 + 464));
    }
    else {
      SipDialogInfo::setRemote(this, (const SipDialogInfo *)((char *)a2 + 464));
    }
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 47)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (!*((void *)this + 4)) {
LABEL_11:
  }
    std::string::operator=((std::string *)this + 1, (const std::string *)a2 + 1);
LABEL_12:
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 71)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (!*((void *)this + 7)) {
LABEL_14:
  }
    std::string::operator=((std::string *)this + 2, (const std::string *)a2 + 2);
LABEL_15:
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 95)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!*((void *)this + 10)) {
LABEL_17:
  }
    std::string::operator=((std::string *)this + 3, (const std::string *)a2 + 3);
LABEL_18:
  if (*((char *)this + 127) < 0)
  {
    if (*((void *)this + 14)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)this + 127))
  {
LABEL_20:
    *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
    *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  }
LABEL_21:
  if (!*((unsigned char *)this + 264) && *((unsigned char *)a2 + 264)) {
    SipDialogInfo::setReplaces((std::string *)this, (const std::string *)a2 + 8);
  }
  if (!*((unsigned char *)this + 320) && *((unsigned char *)a2 + 320))
  {
    std::string::operator=((std::string *)((char *)this + 272), (const std::string *)((char *)a2 + 272));
    std::string::operator=((std::string *)((char *)this + 296), (const std::string *)((char *)a2 + 296));
    *((unsigned char *)this + 320) = 1;
  }
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
}

void SipDialogInfo::event(SipDialogInfo *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 48) = 0u;
  BOOL v4 = (std::string *)(a2 + 48);
  *(_OWORD *)(a2 + 96) = 0u;
  int v5 = (std::string *)(a2 + 96);
  *(_OWORD *)(a2 + 144) = 0u;
  uint64_t v6 = (std::string *)(a2 + 144);
  *(_OWORD *)(a2 + 208) = 0u;
  int v7 = (std::string *)(a2 + 208);
  *(void *)(a2 + 288) = 0;
  std::string v8 = (std::string *)(a2 + 24);
  std::string::size_type v9 = (std::string *)(a2 + 72);
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  uint64_t v10 = (std::string *)(a2 + 120);
  long long v11 = (std::string *)(a2 + 168);
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a2 + 208), "");
  *(unsigned char *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialogState::SipDialogState(a2 + 248, (uint64_t *)__str, &v38, (uint64_t)__p);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  *(_WORD *)(a2 + 288) = 256;
  std::string::operator=((std::string *)a2, (const std::string *)this);
  std::string::operator=(v8, (const std::string *)this + 1);
  *(unsigned char *)(a2 + 200) = *((unsigned char *)this + 96);
  std::string::operator=(v7, (const std::string *)((char *)this + 104));
  *(unsigned char *)(a2 + 232) = *((unsigned char *)this + 128);
  *(_DWORD *)(a2 + 192) = *((_DWORD *)this + 45);
  *(unsigned char *)(a2 + 196) = 1;
  SipDialogParticipantInfo::participantName((std::string *)__str, (const std::string *)((char *)this + 328));
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  SipDialogParticipantInfo::participantName((std::string *)__str, (const std::string *)((char *)this + 464));
  std::string::operator=(v9, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::string::operator=(v5, (const std::string *)this + 18);
  std::string::operator=(v10, (const std::string *)((char *)this + 568));
  SipDialogParticipantInfo::uri((const std::string *)((char *)this + 328), (std::string *)__str);
  std::string::operator=(v6, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  SipDialogParticipantInfo::uri((const std::string *)((char *)this + 464), (std::string *)__str);
  std::string::operator=(v11, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (!*((unsigned char *)this + 456) || !*((unsigned char *)this + 424))
  {
    BOOL v14 = 0;
    goto LABEL_38;
  }
  memset(__str, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  memset(&v38, 0, sizeof(v38));
  std::string::basic_string[abi:ne180100]<0>(&v38, "sip.rendering");
  std::string::size_type v12 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, (void **)&v38.__r_.__value_.__l.__data_);
  if ((void **)((char *)this + 384) == v12)
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v38.__r_.__value_.__l.__size_ = 14;
      long long v13 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&v38.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 14;
      long long v13 = &v38;
    }
    strcpy((char *)v13, "+sip.rendering");
    std::string v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, (void **)&v38.__r_.__value_.__l.__data_);
    if (v12 == v15) {
      goto LABEL_32;
    }
    std::string::size_type v12 = v15;
  }
  std::string::operator=((std::string *)__str, (const std::string *)(v12 + 7));
  uint64_t v16 = __str[23];
  if (__str[23] < 0) {
    uint64_t v16 = *(void *)&__str[8];
  }
  if (v16 == 2)
  {
    char v17 = __str;
    if (__str[23] < 0) {
      char v17 = *(_WORD **)__str;
    }
    BOOL v14 = *v17 == 28526 || *v17 == 28494 || *v17 == 20302;
    goto LABEL_34;
  }
LABEL_32:
  BOOL v14 = 0;
LABEL_34:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
LABEL_38:
  *(unsigned char *)(a2 + 240) = v14;
  *(_DWORD *)(a2 + 248) = *((_DWORD *)this + 34);
  std::string::operator=((std::string *)(a2 + 256), (const std::string *)this + 6);
  *(_WORD *)(a2 + 280) = *((_WORD *)this + 84);
  *(unsigned char *)(a2 + 282) = *((unsigned char *)this + 170);
  char v18 = *((unsigned char *)this + 592);
  if (v18)
  {
    for (uint64_t i = (std::string *)*((void *)this + 58); i != *((std::string **)this + 59); i += 2)
    {
      uint64_t v63 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(__str, 0, sizeof(__str));
      SipUri::SipUri((uint64_t)__str, i + 1);
      BOOL isEmergencyUrn = SipUri::isEmergencyUrn((SipUri *)__str);
      SipUri::~SipUri((SipUri *)__str);
      if (isEmergencyUrn) {
        goto LABEL_45;
      }
    }
    if (*((unsigned char *)this + 560))
    {
      uint64_t v63 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(__str, 0, sizeof(__str));
      SipUri::SipUri((uint64_t)__str, (std::string *)((char *)this + 488));
      BOOL v21 = SipUri::isEmergencyUrn((SipUri *)__str);
      SipUri::~SipUri((SipUri *)__str);
      if (v21)
      {
LABEL_45:
        char v18 = 1;
        goto LABEL_47;
      }
    }
    char v18 = 0;
  }
LABEL_47:
  *(unsigned char *)(a2 + 288) = v18;
  if (*((unsigned char *)this + 176))
  {
    if (*((unsigned char *)this + 176) == 1)
    {
LABEL_71:
      BOOL v34 = 0;
      goto LABEL_73;
    }
  }
  else if (*((unsigned char *)this + 424))
  {
    memset(__str, 0, 24);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)__str, (uint64_t)this + 376);
    std::string::basic_string[abi:ne180100]<0>(&v38, "+sip.rendering");
    uint64_t v22 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)__str, (void **)&v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (&__str[8] == (unsigned char *)v22) {
      goto LABEL_61;
    }
    int64_t v23 = (void *)*((unsigned __int8 *)v22 + 79);
    int v24 = (char)v23;
    if ((char)v23 < 0) {
      int64_t v23 = v22[8];
    }
    if (v23 != (void *)2)
    {
LABEL_61:
      BOOL v29 = 1;
    }
    else
    {
      std::string v27 = (void **)v22[7];
      uint64_t v26 = v22 + 7;
      uint64_t v25 = v27;
      std::string v28 = v24 >= 0 ? v26 : v25;
      BOOL v29 = bswap32(*(unsigned __int16 *)v28) >> 16 != 28271;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__str, *(void **)&__str[8]);
    if (!v29) {
      goto LABEL_71;
    }
  }
  uint64_t v31 = *((void *)this + 50);
  uint64_t v30 = *((void *)this + 51);
  if (v31 == v30)
  {
    BOOL v34 = 1;
  }
  else
  {
    uint64_t v32 = v31 + 12;
    do
    {
      int v33 = *(_DWORD *)(v32 - 8);
      BOOL v35 = v33 == 3;
      BOOL v34 = v33 != 3;
      BOOL v35 = v35 || v32 == v30;
      v32 += 12;
    }
    while (!v35);
  }
LABEL_73:
  *(unsigned char *)(a2 + 289) = v34;
}

void sub_1C549DA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  SipDialogEventData::~SipDialogEventData(v26);
  _Unwind_Resume(a1);
}

uint64_t SipDialogTable::str@<X0>(SipDialogTable *this@<X0>, void *a2@<X8>)
{
  uint64_t v104 = 0;
  long long v102 = 0u;
  memset(v103, 0, sizeof(v103));
  *(_OWORD *)long long v100 = 0u;
  long long v101 = 0u;
  memset(v99, 0, sizeof(v99));
  long long v98 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v98);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"<?xml version=\"1.0\"?>\n<dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"", 77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n  version=\"", 12);
  BOOL v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\"", 1);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n  state=\"", 10);
  if (*((unsigned char *)this + 24)) {
    uint64_t v6 = "full";
  }
  else {
    uint64_t v6 = "partial";
  }
  if (*((unsigned char *)this + 24)) {
    uint64_t v7 = 4;
  }
  else {
    uint64_t v7 = 7;
  }
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"", 1);
  if (*((char *)this + 63) < 0)
  {
    if (!*((void *)this + 6)) {
      goto LABEL_18;
    }
  }
  else if (!*((unsigned char *)this + 63))
  {
    goto LABEL_18;
  }
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n  entity=\"", 11);
  int v10 = *((char *)this + 63);
  if (v10 >= 0) {
    long long v11 = (char *)this + 40;
  }
  else {
    long long v11 = (char *)*((void *)this + 5);
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)this + 63);
  }
  else {
    uint64_t v12 = *((void *)this + 6);
  }
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"", 1);
LABEL_18:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)">\n", 2);
  BOOL v14 = *(void **)this;
  long long v92 = (char *)this + 8;
  if (*(SipDialogTable **)this != (SipDialogTable *)((char *)this + 8))
  {
    long long v94 = *(void **)(MEMORY[0x1E4FBA408] + 64);
    long long v95 = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v93 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    do
    {
      uint64_t v113 = 0;
      long long v111 = 0u;
      memset(v112, 0, sizeof(v112));
      long long v109 = 0u;
      long long v110 = 0u;
      memset(v108, 0, sizeof(v108));
      long long v107 = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v107);
      if (*((char *)v14 + 79) < 0)
      {
        if (v14[8])
        {
LABEL_24:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"  <dialog", 9);
          std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)" id=\"", 5);
          int v16 = *((char *)v14 + 79);
          if (v16 >= 0) {
            uint64_t v17 = (uint64_t)(v14 + 7);
          }
          else {
            uint64_t v17 = v14[7];
          }
          if (v16 >= 0) {
            uint64_t v18 = *((unsigned __int8 *)v14 + 79);
          }
          else {
            uint64_t v18 = v14[8];
          }
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
          if (*((char *)v14 + 103) < 0)
          {
            if (!v14[11]) {
              goto LABEL_41;
            }
          }
          else if (!*((unsigned char *)v14 + 103))
          {
            goto LABEL_41;
          }
          uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)" call-id=\"", 10);
          int v21 = *((char *)v14 + 103);
          if (v21 >= 0) {
            uint64_t v22 = (uint64_t)(v14 + 10);
          }
          else {
            uint64_t v22 = v14[10];
          }
          if (v21 >= 0) {
            uint64_t v23 = *((unsigned __int8 *)v14 + 103);
          }
          else {
            uint64_t v23 = v14[11];
          }
          int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
LABEL_41:
          if (*((char *)v14 + 127) < 0)
          {
            if (!v14[14]) {
              goto LABEL_52;
            }
          }
          else if (!*((unsigned char *)v14 + 127))
          {
            goto LABEL_52;
          }
          uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\n    local-tag=\"", 16);
          int v26 = *((char *)v14 + 127);
          if (v26 >= 0) {
            uint64_t v27 = (uint64_t)(v14 + 13);
          }
          else {
            uint64_t v27 = v14[13];
          }
          if (v26 >= 0) {
            uint64_t v28 = *((unsigned __int8 *)v14 + 127);
          }
          else {
            uint64_t v28 = v14[14];
          }
          BOOL v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"", 1);
LABEL_52:
          if (*((char *)v14 + 151) < 0)
          {
            if (v14[17]) {
              goto LABEL_56;
            }
          }
          else
          {
            if (!*((unsigned char *)v14 + 151)) {
              goto LABEL_63;
            }
LABEL_56:
            uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\n    remote-tag=\"", 17);
            int v31 = *((char *)v14 + 151);
            if (v31 >= 0) {
              uint64_t v32 = (uint64_t)(v14 + 16);
            }
            else {
              uint64_t v32 = v14[16];
            }
            if (v31 >= 0) {
              uint64_t v33 = *((unsigned __int8 *)v14 + 151);
            }
            else {
              uint64_t v33 = v14[17];
            }
            BOOL v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\"", 1);
          }
LABEL_63:
          if (*((unsigned char *)v14 + 152))
          {
            BOOL v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\n    ", 5);
            SipDialogDirection::str((SipDialogDirection *)(v14 + 19), __p);
            unint64_t v36 = (SBYTE7(v118) & 0x80u) == 0 ? __p : (void **)__p[0];
            char v37 = (SBYTE7(v118) & 0x80u) == 0 ? (void *)BYTE7(v118) : __p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, (uint64_t)v37);
            if (SBYTE7(v118) < 0) {
              operator delete(__p[0]);
            }
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)">\n", 2);
          uint64_t v134 = 0;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          *(_OWORD *)std::string __p = 0u;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          if (*((_DWORD *)v14 + 48))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"    <state", 10);
            if (*((char *)v14 + 223) < 0)
            {
              if (!v14[26]) {
                goto LABEL_84;
              }
            }
            else if (!*((unsigned char *)v14 + 223))
            {
              goto LABEL_84;
            }
            std::string v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" event=\"", 8);
            int v39 = *((char *)v14 + 223);
            if (v39 >= 0) {
              uint64_t v40 = (uint64_t)(v14 + 25);
            }
            else {
              uint64_t v40 = v14[25];
            }
            if (v39 >= 0) {
              uint64_t v41 = *((unsigned __int8 *)v14 + 223);
            }
            else {
              uint64_t v41 = v14[26];
            }
            long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"\"", 1);
LABEL_84:
            if (*((unsigned char *)v14 + 226))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" code=\"", 7);
              long long v43 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\"", 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)">", 1);
            SipDialogState::stateStr((SipDialogState *)(v14 + 24), &v114);
            if ((v116 & 0x80u) == 0) {
              long long v44 = &v114;
            }
            else {
              long long v44 = v114;
            }
            if ((v116 & 0x80u) == 0) {
              uint64_t v45 = v116;
            }
            else {
              uint64_t v45 = v115;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)v44, v45);
            if ((char)v116 < 0) {
              operator delete(v114);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"</state>\n", 9);
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v118 + 8, v105);
          __p[0] = v95;
          *(void **)((char *)__p + *((void *)v95 - 3)) = v94;
          *(void *)&long long v118 = v93;
          *((void *)&v118 + 1) = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v123) < 0) {
            operator delete(*((void **)&v122 + 1));
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C878E270](&v125);
          if ((v106 & 0x80u) == 0) {
            long long v46 = v105;
          }
          else {
            long long v46 = (void **)v105[0];
          }
          if ((v106 & 0x80u) == 0) {
            uint64_t v47 = v106;
          }
          else {
            uint64_t v47 = (uint64_t)v105[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v46, v47);
          if ((char)v106 < 0) {
            operator delete(v105[0]);
          }
          long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"    <sa:exclusive>", 18);
          if (*((unsigned char *)v14 + 232)) {
            long long v49 = "true";
          }
          else {
            long long v49 = "false";
          }
          if (*((unsigned char *)v14 + 232)) {
            uint64_t v50 = 4;
          }
          else {
            uint64_t v50 = 5;
          }
          long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"</sa:exclusive>\n", 16);
          if (*((unsigned char *)v14 + 240))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"    <duration>", 14);
            long long v52 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"</duration>\n", 12);
          }
          if (*((unsigned char *)v14 + 320))
          {
            uint64_t v134 = 0;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            *(_OWORD *)std::string __p = 0u;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"    <replaces", 13);
            if (*((char *)v14 + 271) < 0)
            {
              if (!v14[32]) {
                goto LABEL_125;
              }
            }
            else if (!*((unsigned char *)v14 + 271))
            {
              goto LABEL_125;
            }
            long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" call-id=\"", 10);
            int v54 = *((char *)v14 + 271);
            if (v54 >= 0) {
              uint64_t v55 = (uint64_t)(v14 + 31);
            }
            else {
              uint64_t v55 = v14[31];
            }
            if (v54 >= 0) {
              uint64_t v56 = *((unsigned __int8 *)v14 + 271);
            }
            else {
              uint64_t v56 = v14[32];
            }
            long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"\"", 1);
LABEL_125:
            if (*((char *)v14 + 295) < 0)
            {
              if (!v14[35]) {
                goto LABEL_136;
              }
            }
            else if (!*((unsigned char *)v14 + 295))
            {
              goto LABEL_136;
            }
            long long v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" local-tag=\"", 12);
            int v59 = *((char *)v14 + 295);
            if (v59 >= 0) {
              uint64_t v60 = (uint64_t)(v14 + 34);
            }
            else {
              uint64_t v60 = v14[34];
            }
            if (v59 >= 0) {
              uint64_t v61 = *((unsigned __int8 *)v14 + 295);
            }
            else {
              uint64_t v61 = v14[35];
            }
            long long v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\"", 1);
LABEL_136:
            if (*((char *)v14 + 319) < 0)
            {
              if (!v14[38]) {
                goto LABEL_147;
              }
            }
            else if (!*((unsigned char *)v14 + 319))
            {
              goto LABEL_147;
            }
            uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" remote-tag=\"", 13);
            int v64 = *((char *)v14 + 319);
            if (v64 >= 0) {
              uint64_t v65 = (uint64_t)(v14 + 37);
            }
            else {
              uint64_t v65 = v14[37];
            }
            if (v64 >= 0) {
              uint64_t v66 = *((unsigned __int8 *)v14 + 319);
            }
            else {
              uint64_t v66 = v14[38];
            }
            std::string v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\"", 1);
LABEL_147:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"/>\n", 3);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v118 + 8, &v114);
            __p[0] = v95;
            *(void **)((char *)__p + *((void *)v95 - 3)) = v94;
            *(void *)&long long v118 = v93;
            *((void *)&v118 + 1) = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v123) < 0) {
              operator delete(*((void **)&v122 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1C878E270](&v125);
            if ((v116 & 0x80u) == 0) {
              uint64_t v68 = &v114;
            }
            else {
              uint64_t v68 = v114;
            }
            if ((v116 & 0x80u) == 0) {
              uint64_t v69 = v116;
            }
            else {
              uint64_t v69 = v115;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v68, v69);
            if ((char)v116 < 0) {
              operator delete(v114);
            }
          }
          if (*((unsigned char *)v14 + 376))
          {
            uint64_t v134 = 0;
            long long v132 = 0u;
            long long v133 = 0u;
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            long long v126 = 0u;
            long long v127 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            *(_OWORD *)std::string __p = 0u;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"    <referred-by", 16);
            if (*((char *)v14 + 351) < 0)
            {
              if (!v14[42]) {
                goto LABEL_169;
              }
            }
            else if (!*((unsigned char *)v14 + 351))
            {
              goto LABEL_169;
            }
            std::string v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)" display=\"", 10);
            int v71 = *((char *)v14 + 351);
            if (v71 >= 0) {
              uint64_t v72 = (uint64_t)(v14 + 41);
            }
            else {
              uint64_t v72 = v14[41];
            }
            if (v71 >= 0) {
              uint64_t v73 = *((unsigned __int8 *)v14 + 351);
            }
            else {
              uint64_t v73 = v14[42];
            }
            unsigned __int8 v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\"", 1);
LABEL_169:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"/>", 2);
            int v75 = *((char *)v14 + 375);
            if (v75 >= 0) {
              uint64_t v76 = (uint64_t)(v14 + 44);
            }
            else {
              uint64_t v76 = v14[44];
            }
            if (v75 >= 0) {
              uint64_t v77 = *((unsigned __int8 *)v14 + 375);
            }
            else {
              uint64_t v77 = v14[45];
            }
            long long v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, v76, v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"</referred-by>\n", 15);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v118 + 8, &v114);
            __p[0] = v95;
            *(void **)((char *)__p + *((void *)v95 - 3)) = v94;
            *(void *)&long long v118 = v93;
            *((void *)&v118 + 1) = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v123) < 0) {
              operator delete(*((void **)&v122 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1C878E270](&v125);
            if ((v116 & 0x80u) == 0) {
              long long v79 = &v114;
            }
            else {
              long long v79 = v114;
            }
            if ((v116 & 0x80u) == 0) {
              uint64_t v80 = v116;
            }
            else {
              uint64_t v80 = v115;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v79, v80);
            if ((char)v116 < 0) {
              operator delete(v114);
            }
          }
          if (*((unsigned char *)v14 + 512))
          {
            std::string::basic_string[abi:ne180100]<0>(&v114, "local");
            SipDialogParticipantInfo::str(__p, (uint64_t)(v14 + 48), (uint64_t)&v114);
            if ((SBYTE7(v118) & 0x80u) == 0) {
              uint64_t v81 = __p;
            }
            else {
              uint64_t v81 = (void **)__p[0];
            }
            if ((SBYTE7(v118) & 0x80u) == 0) {
              uint64_t v82 = BYTE7(v118);
            }
            else {
              uint64_t v82 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v81, v82);
            if (SBYTE7(v118) < 0) {
              operator delete(__p[0]);
            }
            if ((char)v116 < 0) {
              operator delete(v114);
            }
          }
          if (*((unsigned char *)v14 + 648))
          {
            std::string::basic_string[abi:ne180100]<0>(&v114, "remote");
            SipDialogParticipantInfo::str(__p, (uint64_t)(v14 + 65), (uint64_t)&v114);
            if ((SBYTE7(v118) & 0x80u) == 0) {
              long long v83 = __p;
            }
            else {
              long long v83 = (void **)__p[0];
            }
            if ((SBYTE7(v118) & 0x80u) == 0) {
              uint64_t v84 = BYTE7(v118);
            }
            else {
              uint64_t v84 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v83, v84);
            if (SBYTE7(v118) < 0) {
              operator delete(__p[0]);
            }
            if ((char)v116 < 0) {
              operator delete(v114);
            }
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"  </dialog>\n", 12);
        }
      }
      else if (*((unsigned char *)v14 + 79))
      {
        goto LABEL_24;
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v108[1], v96);
      *(void *)&long long v107 = v95;
      *(void *)((char *)&v108[-2] + *((void *)v95 - 3)) = v94;
      v108[0] = v93;
      v108[1] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v110) < 0) {
        operator delete(*((void **)&v109 + 1));
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C878E270](v112);
      if ((v97 & 0x80u) == 0) {
        long long v85 = v96;
      }
      else {
        long long v85 = (void **)v96[0];
      }
      if ((v97 & 0x80u) == 0) {
        uint64_t v86 = v97;
      }
      else {
        uint64_t v86 = (uint64_t)v96[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v85, v86);
      if ((char)v97 < 0) {
        operator delete(v96[0]);
      }
      long long v87 = (char *)v14[1];
      if (v87)
      {
        do
        {
          long long v88 = v87;
          long long v87 = *(char **)v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          long long v88 = (char *)v14[2];
          BOOL v89 = *(void *)v88 == (void)v14;
          BOOL v14 = v88;
        }
        while (!v89);
      }
      BOOL v14 = v88;
    }
    while (v88 != v92);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"</dialog-info>\n", 15);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v99 + 8, a2);
  *(void *)&long long v98 = *MEMORY[0x1E4FBA408];
  uint64_t v90 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v99[-1] + *(void *)(v98 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v99[0] = v90;
  *((void *)&v99[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C878E270](v103);
}

void sub_1C549EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a63);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

BOOL SipDialogTable::fillReplacesHeaderData(uint64_t a1, void **a2, uint64_t a3)
{
  int v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, a2);
  uint64_t v6 = v5;
  uint64_t v7 = a1 + 8;
  if ((void **)(a1 + 8) == v5) {
    return v7 != (void)v6;
  }
  std::string::operator=((std::string *)a3, (const std::string *)(v5 + 10));
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v12 = *(std::string *)(a3 + 24);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
    operator delete(v12.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!*((unsigned char *)&v12.__r_.__value_.__s + 23)) {
LABEL_7:
  }
    std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v6 + 13));
LABEL_8:
  std::string v8 = (std::string *)(a3 + 48);
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 48), *(void *)(a3 + 56));
  }
  else
  {
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = *(void *)(a3 + 64);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = v12.__r_.__value_.__l.__size_;
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v11) {
      return v7 != (void)v6;
    }
    goto LABEL_15;
  }
  if (!*((unsigned char *)&v12.__r_.__value_.__s + 23)) {
LABEL_15:
  }
    std::string::operator=(v8, (const std::string *)(v6 + 16));
  return v7 != (void)v6;
}

BOOL SipDialogTable::update(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 28) <= *(_DWORD *)(a1 + 28) && *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  memset(v43, 0, sizeof(v43));
  long long v41 = 0u;
  long long v42 = 0u;
  std::map<std::string,SipDialogInfo>::map[abi:ne180100]((uint64_t *)&v41, a1);
  *((void *)&v42 + 1) = *(void *)(a1 + 24);
  LOBYTE(v43[0]) = *(unsigned char *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&v43[1] = *(_OWORD *)(a1 + 40);
    v43[3] = *(void **)(a1 + 56);
  }
  if (*(unsigned char *)(a2 + 24))
  {
    if (a1 != a2) {
      std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>((uint64_t *)a1, *(long long **)a2, (long long *)(a2 + 8));
    }
    uint64_t v7 = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 24) = v7;
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
    std::string v8 = (void **)v41;
    if ((long long *)v41 != (long long *)((char *)&v41 + 8))
    {
      do
      {
        if ((void **)(a1 + 8) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, v8 + 7))
        {
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 7);
          std::string::size_type v9 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v8 + 7, (uint64_t)&std::piecewise_construct, (long long **)&v50);
          SipDialogInfo::copyFrom((SipDialogInfo *)(v9 + 7), (const SipDialogInfo *)(v8 + 7));
        }
        int v10 = (void **)v8[1];
        if (v10)
        {
          do
          {
            std::string::size_type v11 = v10;
            int v10 = (void **)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            std::string::size_type v11 = (void **)v8[2];
            BOOL v35 = *v11 == v8;
            std::string v8 = v11;
          }
          while (!v35);
        }
        std::string v8 = v11;
      }
      while (v11 != (void **)((char *)&v41 + 8));
    }
    BOOL v40 = 0;
  }
  else
  {
    int v12 = *(_DWORD *)(a2 + 28);
    BOOL v13 = (v12 - *(_DWORD *)(a1 + 28)) > 1;
    *(_DWORD *)(a1 + 28) = v12;
    uint64_t v14 = *(unsigned __int8 *)(a2 + 63);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a2 + 48);
    }
    if (v14) {
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
    }
    std::string v15 = *(long long **)a2;
    BOOL v40 = v13;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)v15 + 7))
        {
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          uint64_t v19 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (long long **)&v50);
          SipDialogInfo::operator=((uint64_t)(v19 + 7), (uint64_t)v15 + 56);
        }
        else
        {
          bzero(&v50, 0x258uLL);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          int v16 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (long long **)&v44);
          SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)(v16 + 7));
          std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__erase_unique<std::string>((uint64_t **)a1, (void **)v15 + 7);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          uint64_t v17 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (long long **)&v44);
          SipDialogInfo::operator=((uint64_t)(v17 + 7), (uint64_t)v15 + 56);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          uint64_t v18 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (long long **)&v44);
          SipDialogInfo::copyFrom((SipDialogInfo *)(v18 + 7), (const SipDialogInfo *)&v50);
          SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
        }
        uint64_t v20 = (long long *)*((void *)v15 + 1);
        if (v20)
        {
          do
          {
            int v21 = v20;
            uint64_t v20 = *(long long **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            int v21 = (long long *)*((void *)v15 + 2);
            BOOL v35 = *(void *)v21 == (void)v15;
            std::string v15 = v21;
          }
          while (!v35);
        }
        std::string v15 = v21;
      }
      while (v21 != (long long *)(a2 + 8));
    }
  }
  if (a3)
  {
    uint64_t v23 = (void **)(a2 + 8);
    uint64_t v22 = *(long long **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        memset(&v55, 0, sizeof(v55));
        if (*((char *)v22 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v22 + 7), *((void *)v22 + 8));
        }
        else {
          std::string v55 = *(std::string *)((char *)v22 + 56);
        }
        int v24 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&v55.__r_.__value_.__l.__data_);
        if ((void **)(a1 + 8) == v24)
        {
          bzero(&v50, 0x258uLL);
          SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)((char *)v22 + 56));
          uint64_t v49 = 0;
          *(_OWORD *)uint64_t v47 = 0u;
          long long v48 = 0u;
          std::string::basic_string[abi:ne180100]<0>(&v44, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          SipDialogState::SipDialogState((uint64_t)v47, 5, &v44, (uint64_t)__p);
          if (v46 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          int v51 = (int)v47[0];
          std::string::operator=(&v52, (const std::string *)&v47[1]);
          __int16 v53 = v49;
          char v54 = BYTE2(v49);
          int v26 = (char *)a3[1];
          SipDialogInfo::event((SipDialogInfo *)&v50, (uint64_t)&v44);
          std::vector<SipDialogEventData>::insert(a3, v26, (long long *)&v44);
          SipDialogEventData::~SipDialogEventData((void **)&v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48) < 0) {
            operator delete(v47[1]);
          }
          SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
        }
        else
        {
          uint64_t v25 = (char *)a3[1];
          SipDialogInfo::event((SipDialogInfo *)(v24 + 7), (uint64_t)&v50);
          std::vector<SipDialogEventData>::insert(a3, v25, (long long *)&v50);
          SipDialogEventData::~SipDialogEventData((void **)&v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        uint64_t v27 = (long long *)*((void *)v22 + 1);
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            uint64_t v27 = *(long long **)v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (long long *)*((void *)v22 + 2);
            BOOL v35 = *(void *)v28 == (void)v22;
            uint64_t v22 = v28;
          }
          while (!v35);
        }
        uint64_t v22 = v28;
      }
      while (v28 != (long long *)v23);
    }
    if (*(unsigned char *)(a2 + 24))
    {
      BOOL v29 = (_OWORD *)v41;
      if ((long long *)v41 != (long long *)((char *)&v41 + 8))
      {
        do
        {
          memset(&v55, 0, sizeof(v55));
          if (*((char *)v29 + 79) < 0) {
            std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v29 + 7), *((void *)v29 + 8));
          }
          else {
            std::string v55 = *(std::string *)((char *)v29 + 56);
          }
          if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&v55.__r_.__value_.__l.__data_)&& v23 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2, (void **)&v55.__r_.__value_.__l.__data_))
          {
            bzero(&v50, 0x258uLL);
            SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)((char *)v29 + 56));
            uint64_t v49 = 0;
            *(_OWORD *)uint64_t v47 = 0u;
            long long v48 = 0u;
            std::string::basic_string[abi:ne180100]<0>(&v44, "");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            SipDialogState::SipDialogState((uint64_t)v47, 5, &v44, (uint64_t)__p);
            if (v46 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
            int v51 = (int)v47[0];
            std::string::operator=(&v52, (const std::string *)&v47[1]);
            __int16 v53 = v49;
            char v54 = BYTE2(v49);
            uint64_t v30 = (char *)a3[1];
            SipDialogInfo::event((SipDialogInfo *)&v50, (uint64_t)&v44);
            std::vector<SipDialogEventData>::insert(a3, v30, (long long *)&v44);
            SipDialogEventData::~SipDialogEventData((void **)&v44.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48) < 0) {
              operator delete(v47[1]);
            }
            SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          int v31 = (void *)*((void *)v29 + 1);
          if (v31)
          {
            do
            {
              uint64_t v32 = v31;
              int v31 = (void *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              uint64_t v32 = (_OWORD *)*((void *)v29 + 2);
              BOOL v35 = *(void *)v32 == (void)v29;
              BOOL v29 = v32;
            }
            while (!v35);
          }
          BOOL v29 = v32;
        }
        while (v32 != (long long *)((char *)&v41 + 8));
      }
    }
  }
  *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50.__r_.__value_.__l.__size_;
  uint64_t v33 = *(void *)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      int v34 = *(_DWORD *)(v33 + 192);
      if (v34) {
        BOOL v35 = v34 == 5;
      }
      else {
        BOOL v35 = 1;
      }
      if (!v35)
      {
        v44.__r_.__value_.__r.__words[0] = v33 + 56;
        unint64_t v36 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v50, (void **)(v33 + 56), (uint64_t)&std::piecewise_construct, (long long **)&v44);
        SipDialogInfo::operator=((uint64_t)(v36 + 7), v33 + 56);
      }
      char v37 = *(void **)(v33 + 8);
      if (v37)
      {
        do
        {
          std::string v38 = v37;
          char v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          std::string v38 = *(void **)(v33 + 16);
          BOOL v35 = *v38 == v33;
          uint64_t v33 = (uint64_t)v38;
        }
        while (!v35);
      }
      uint64_t v33 = (uint64_t)v38;
    }
    while (v38 != (void *)(a1 + 8));
  }
  if (&v50 != (std::string *)a1) {
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>((uint64_t *)a1, (long long *)v50.__r_.__value_.__l.__data_, (long long *)&v50.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)&v50, (void *)v50.__r_.__value_.__l.__size_);
  BOOL v6 = v40;
  if (SHIBYTE(v43[3]) < 0) {
    operator delete(v43[1]);
  }
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)&v41, *((void **)&v41 + 1));
  return v6;
}

void sub_1C549F4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
}

uint64_t std::vector<SipDialogEventData>::insert(void *a1, char *a2, long long *a3)
{
  int v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 / 296;
  uint64_t v9 = *a1 + 296 * (v7 / 296);
  std::string::size_type v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v15 = 0x14C1BACF914C1BADLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v15 > 0xDD67C8A60DD67CLL) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0x14C1BACF914C1BADLL * ((uint64_t)(v10 - (void)v5) >> 3);
    if (2 * v17 > v15) {
      unint64_t v15 = 2 * v17;
    }
    if (v17 >= 0x6EB3E45306EB3ELL) {
      unint64_t v18 = 0xDD67C8A60DD67CLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v47 = v11;
    if (v18)
    {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v22 = (uint64_t)&v20[296 * v8];
    std::string v44 = v20;
    *(void *)&long long v45 = v22;
    *((void *)&v45 + 1) = v22;
    char v46 = &v20[296 * v19];
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = 2 * v8;
        }
        int v51 = v11;
        int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(v25);
        uint64_t v27 = (uint64_t)&v26[296 * (v25 >> 2)];
        long long v48 = v26;
        v49.i64[0] = v27;
        BOOL v29 = &v26[296 * v28];
        v49.i64[1] = v27;
        std::string v50 = v29;
        uint64_t v30 = (long long *)v45;
        if (*((void *)&v45 + 1) == (void)v45)
        {
          int64x2_t v34 = vdupq_n_s64(v45);
          uint64_t v32 = v27;
        }
        else
        {
          uint64_t v31 = (*((void *)&v45 + 1) - (void)v45) / 296;
          uint64_t v32 = v27 + 296 * v31;
          uint64_t v33 = 296 * v31;
          do
          {
            SipDialogEventData::SipDialogEventData(v27, v30);
            v27 += 296;
            uint64_t v30 = (long long *)((char *)v30 + 296);
            v33 -= 296;
          }
          while (v33);
          int v26 = v48;
          uint64_t v27 = v49.i64[0];
          int64x2_t v34 = (int64x2_t)v45;
          BOOL v29 = v50;
        }
        BOOL v35 = v46;
        long long v48 = v44;
        std::string v44 = v26;
        *(void *)&long long v45 = v27;
        int64x2_t v49 = v34;
        *((void *)&v45 + 1) = v32;
        char v46 = v29;
        std::string v50 = v35;
        std::__split_buffer<SipDialogEventData>::~__split_buffer((uint64_t)&v48);
        uint64_t v22 = v32;
      }
      else
      {
        uint64_t v23 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v23 = v8 + 1;
        }
        v22 -= 296 * (v23 >> 1);
        *(void *)&long long v45 = v22;
        *((void *)&v45 + 1) = v22;
      }
    }
    SipDialogEventData::SipDialogEventData(v22, a3);
    uint64_t v36 = 0;
    *((void *)&v45 + 1) += 296;
    char v37 = (char *)*a1;
    while ((char *)(v9 + v36) != v37)
    {
      v36 -= 296;
      SipDialogEventData::SipDialogEventData((std::string *)(v36 + v45), (const SipDialogEventData *)(v36 + v9));
    }
    uint64_t v38 = v45 + v36;
    *(void *)&long long v45 = v45 + v36;
    uint64_t v39 = a1[1];
    uint64_t v40 = *((void *)&v45 + 1);
    if (v39 != v9)
    {
      uint64_t v41 = 0;
      do
      {
        SipDialogEventData::SipDialogEventData((std::string *)(*((void *)&v45 + 1) + v41), (const SipDialogEventData *)(v9 + v41));
        v41 += 296;
      }
      while (v9 + v41 != v39);
      uint64_t v38 = v45;
      uint64_t v9 = a1[1];
      uint64_t v40 = *((void *)&v45 + 1) + v41;
    }
    long long v42 = (char *)*a1;
    *a1 = v38;
    a1[1] = v40;
    long long v43 = (char *)a1[2];
    a1[2] = v46;
    *((void *)&v45 + 1) = v9;
    char v46 = v43;
    std::string v44 = v42;
    *(void *)&long long v45 = v42;
    return std::__split_buffer<SipDialogEventData>::~__split_buffer((uint64_t)&v44);
  }
  else if (v9 == v6)
  {
    uint64_t result = SipDialogEventData::SipDialogEventData(*a1 + 296 * (v7 / 296), a3);
    a1[1] = v9 + 296;
  }
  else
  {
    uint64_t v12 = v6 - 296;
    if (v6 < 0x128)
    {
      uint64_t v14 = a1[1];
    }
    else
    {
      BOOL v13 = (long long *)(v6 - 296);
      uint64_t v14 = a1[1];
      do
      {
        SipDialogEventData::SipDialogEventData(v14, v13);
        BOOL v13 = (long long *)((char *)v13 + 296);
        v14 += 296;
      }
      while ((unint64_t)v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v9 + 296)
    {
      uint64_t v24 = 8 * ((uint64_t)(v6 - (v9 + 296)) >> 3);
      do
      {
        SipDialogEventData::operator=(v12, (long long *)&v5[296 * v8 - 296 + v24]);
        v12 -= 296;
        v24 -= 296;
      }
      while (v24);
    }
    return SipDialogEventData::operator=(v9, a3);
  }
  return result;
}

void sub_1C549F98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v17 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void SipDialogEventData::~SipDialogEventData(void **this)
{
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t SipDialogEventData::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
  *(unsigned char *)a2 = 0;
  int v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)int v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  uint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  std::string::size_type v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)std::string::size_type v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  BOOL v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)BOOL v13 = v14;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  unint64_t v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)unint64_t v15 = v16;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  uint64_t v17 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)uint64_t v17 = v18;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  char v19 = *((unsigned char *)a2 + 196);
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 48);
  *(unsigned char *)(a1 + 196) = v19;
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 13));
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 16));
  *(_WORD *)(a1 + 280) = *((_WORD *)a2 + 140);
  *(unsigned char *)(a1 + 282) = *((unsigned char *)a2 + 282);
  *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
  return a1;
}

uint64_t SipDialogEventData::SipDialogEventData(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v6 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v6;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v7 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v7;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v8 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v8;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  long long v9 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v9;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  long long v10 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 144) = v10;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  long long v11 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v11;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
  int v12 = *((_DWORD *)a2 + 48);
  *(unsigned char *)(a1 + 196) = *((unsigned char *)a2 + 196);
  *(_DWORD *)(a1 + 192) = v12;
  SipDialogDirection::SipDialogDirection((unsigned char *)(a1 + 200), (uint64_t)a2 + 200);
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
  SipDialogState::SipDialogState(a1 + 248, (uint64_t)a2 + 248);
  *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
  return a1;
}

void sub_1C549FDF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 231) < 0) {
    operator delete(*(void **)(v1 + 208));
  }
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*(void **)(v1 + 168));
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*(void **)(v1 + 144));
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*(void **)(v1 + 120));
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(unint64_t a1)
{
  if (a1 >= 0xDD67C8A60DD67DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(296 * a1);
}

void SipDialogEventData::SipDialogEventData(std::string *this, const SipDialogEventData *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((void *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v11;
  }
  int v12 = *((_DWORD *)a2 + 48);
  this[8].__r_.__value_.__s.__data_[4] = *((unsigned char *)a2 + 196);
  LODWORD(this[8].__r_.__value_.__l.__data_) = v12;
  SipDialogDirection::SipDialogDirection(&this[8].__r_.__value_.__s.__data_[8], (uint64_t)a2 + 200);
  this[10].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 240);
  SipDialogState::SipDialogState((uint64_t)&this[10].__r_.__value_.__l.__size_, (uint64_t)a2 + 248);
  LOWORD(this[12].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 144);
}

void sub_1C54A00FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipDialogEventData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 296;
    SipDialogEventData::~SipDialogEventData((void **)(i - 296));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, int a2, std::string *__str, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)a1 = a2;
  std::string::operator=((std::string *)(a1 + 8), __str);
  uint64_t v6 = *(unsigned __int8 *)(a4 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a4 + 8);
  }
  if (v6)
  {
    *(unsigned char *)(a1 + 34) = 1;
    if (*(char *)(a4 + 23) >= 0) {
      long long v7 = (const char *)a4;
    }
    else {
      long long v7 = *(const char **)a4;
    }
    *(_WORD *)(a1 + 32) = strtoul(v7, 0, 10);
  }
  return a1;
}

void sub_1C54A02B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>(uint64_t *a1, long long *a2, long long *a3)
{
  if (a1[2])
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(void *)(v6 + 8)) {
      long long v8 = *(void **)(v6 + 8);
    }
    else {
      long long v8 = (void *)v6;
    }
    long long v18 = a1;
    char v19 = v8;
    uint64_t v20 = v8;
    if (v8)
    {
      char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          SipDialogInfo::operator=((uint64_t)(v8 + 7), (uint64_t)v9 + 56);
          long long v10 = v20;
          uint64_t v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v17, leaf_high, v10);
          long long v8 = v19;
          uint64_t v20 = v19;
          if (v19) {
            char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          int v12 = (long long *)*((void *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              int v12 = *(long long **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v13 = *(void *)a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      long long v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>((uint64_t)a1, a2 + 2, &v18);
      uint64_t v17 = 0;
      long long v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v17, v18 + 4);
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v17, v14, v18);
      long long v18 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v18, 0);
      unint64_t v15 = (long long *)*((void *)a2 + 1);
      if (v15)
      {
        do
        {
          long long v16 = v15;
          unint64_t v15 = *(long long **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (long long *)*((void *)a2 + 2);
          BOOL v13 = *(void *)v16 == (void)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

void sub_1C54A0498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void LazuliResponse::encodeStartLine(LazuliResponse *this, ImsOutStream *a2)
{
  memset(&v22, 0, sizeof(v22));
  uint64_t v4 = qword_1EBBDAF88;
  if (qword_1EBBDAF88)
  {
    unsigned int v5 = *((_DWORD *)this + 32);
    uint64_t v6 = &qword_1EBBDAF88;
    do
    {
      unsigned int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (v8) {
        uint64_t v6 = (uint64_t *)v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    long long v10 = &ims::kEmptyString;
    if (v6 != &qword_1EBBDAF88)
    {
      unsigned int v11 = *((_DWORD *)v6 + 8);
      int v12 = (long long *)(v6 + 5);
      if (v11 <= v5) {
        long long v10 = v12;
      }
    }
  }
  else
  {
    long long v10 = &ims::kEmptyString;
  }
  if (*((char *)v10 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else {
    std::string v22 = *(std::string *)v10;
  }
  LoggableString::LoggableString((LoggableString *)v20, "MSRP ");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v20);
  LoggableString::LoggableString(&v19, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v19);
  LoggableString::LoggableString((LoggableString *)v17, " ");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v17);
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString((LoggableString *)v15, " ");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v15);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 32))(a2, &v22);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1C54A0788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  _Unwind_Resume(exception_object);
}

void LazuliResponse::encodeEndLine(LazuliResponse *this, ImsOutStream *a2)
{
  LoggableString::LoggableString((LoggableString *)v9, "-------");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v8);
  LoggableString::LoggableString((LoggableString *)v6, "$");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, v6);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1C54A0984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliResponse::debugStr@<X0>(void *a1@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5[1] + 8, a1);
  *(void *)&v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v5[1] = v3;
  *((void *)&v5[1] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C878E270](v9);
}

void sub_1C54A0B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LazuliResponse::~LazuliResponse(void **this)
{
  LazuliMessage::~LazuliMessage(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ibiBarringFactorToActualBarringFactor(unsigned int a1)
{
  if (a1 > 0xF) {
    return 100;
  }
  else {
    return word_1C56D5EDE[a1];
  }
}

uint64_t ___ZN12IBINasClient20handleSsacBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 70);
  LOWORD(v13) = *(_WORD *)(a1 + 68);
  HIDWORD(v13) = v3;
  LOBYTE(v15) = 1;
  if ((unsigned __int16)v13 > 0x64u || v3 >= 0x201)
  {
    LOWORD(v13) = 100;
    HIDWORD(v13) = 0;
    LOBYTE(v15) = 0;
  }
  HIDWORD(v14) = 1;
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v4 = v2 + 56;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 64))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v6);
  if (*(_DWORD *)(a1 + 64) == 1) {
    long long v7 = "[SIM 2]: ";
  }
  else {
    long long v7 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Got SSAC voice barring indication, Factor = ", 44);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v8);
  if (*(_DWORD *)(a1 + 64) == 1) {
    long long v9 = "[SIM 2]: ";
  }
  else {
    long long v9 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Indication converted to SSAC info, Factor = ", 44);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  IMSNasClient::notifyDelegates(*(void **)(a1 + 40), *(_DWORD *)(a1 + 64), (__int16 *)&v13, 1);
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C54A0F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t IBINasClient::requestSsacBarringInfo(IBINasClient *this, int a2)
{
  uint64_t v4 = (char *)this + 56;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 7) + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  if (a2 == 1) {
    uint64_t v6 = "[SIM 2]: ";
  }
  else {
    uint64_t v6 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, v6);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"requesting current SSAC info", 28);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK::ARI_IBINetDcSsacBarringInfoReq_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK *)v23);
  LODWORD(v34.__r_.__value_.__l.__data_) = a2;
  if (!v24) {
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
  }
  if (*((unsigned char *)this + 328) && *((_DWORD *)this + 83) == 2)
  {
    memset(&v41, 0, sizeof(v41));
    std::string::basic_string[abi:ne180100]<0>(&v41, "ibi.nas.");
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    (*(void (**)(std::string *__return_ptr, IBINasClient *, unint64_t))(*(void *)this + 136))(&v34, this, (GMID >> 17) & 0xFFFF8000 | (GMID << 26));
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v34;
    }
    else {
      uint64_t v8 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v34.__r_.__value_.__l.__size_;
    }
    std::string::append(&v41, (const std::string::value_type *)v8, size);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    memset(v40, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v32, (void *)this + 38);
    if (*(void *)&v32[0]) {
      uint64_t v10 = (std::__shared_weak_count *)(*(void *)&v32[0] + 160);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v38 = v10;
    uint64_t v39 = (std::__shared_weak_count *)*((void *)&v32[0] + 1);
    v32[0] = 0uLL;
    LoggableString::LoggableString(&v34, &v41);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v40, &v38, &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (*((void *)&v32[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32[0] + 1));
    }
    unint64_t v11 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    char v12 = (std::__shared_weak_count *)(*(uint64_t (**)(IBINasClient *, void))(*(void *)this + 144))(this, (v11 >> 17) & 0xFFFF8000 | (v11 << 26));
    v34.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v34.__r_.__value_.__l.__size_ = 1174405120;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient4sendIN6AriSdk34ARI_IBINetDcSsacBarringInfoReq_SDKEEE9ImsResultRT__block_invoke;
    BOOL v35 = &__block_descriptor_tmp_117_1;
    uint64_t v36 = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v37, (uint64_t)v40);
    v37[6] = v12;
    uint64_t v13 = *((void *)this + 42);
    __p[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&v34, __p);
    LODWORD(v32[0]) = 0;
    if (!v24) {
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    memset(v32, 0, sizeof(v32));
    uint64_t v33 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v29, (void *)(v13 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    aBlock[0] = __p[0];
    __p[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (aBlock[0]) {
      _Block_release(aBlock[0]);
    }
    if (__p[0]) {
      _Block_release(__p[0]);
    }
    MEMORY[0x1C878D520](v32);
    std::string::basic_string[abi:ne180100]<0>(&v29, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)&v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Sent: ", 6);
    *(unsigned char *)(v14 + 17) = 0;
    unint64_t v15 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    (*(void (**)(void **__return_ptr, IBINasClient *, unint64_t))(*(void *)this + 136))(aBlock, this, (v15 >> 17) & 0xFFFF8000 | (v15 << 26));
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" successfully", 13);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v26 < 0) {
      operator delete(aBlock[0]);
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(v29);
    }
    long long v22 = 0uLL;
    uint64_t v17 = &unk_1F20B2680;
    char v18 = &_bambiDomain;
    int v19 = 0;
    long long v21 = 0uLL;
    long long v20 = 0uLL;
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v37);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v40);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v17 = &unk_1F20B2680;
    char v18 = &_bambiDomain;
    int v19 = 1073741826;
  }
  ImsResult::~ImsResult((ImsResult *)&v17);
  return MEMORY[0x1C878D940](v23);
}

void sub_1C54A1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v47);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v48 - 128);
  if (*(char *)(v48 - 49) < 0) {
    operator delete(*(void **)(v48 - 72));
  }
  MEMORY[0x1C878D940](&a19);
  _Unwind_Resume(a1);
}

void sub_1C54A168C()
{
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x1C54A1684);
}

uint64_t IBINasClient::handleRequestSsacBarringResp(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::ARI_IBINetDcSsacBarringInfoRspCb_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *)v17, a1);
  if (!AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *)v17))
  {
    ibiBarringFactorToActualBarringFactor(*(_DWORD *)v18);
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    uint64_t v16 = 0;
    long long v7 = (const unsigned __int8 *)a2;
    uint64_t v8 = *a3;
    uint64_t BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, v7);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 136))(&v14, v8, BufGmid);
    memset(&v13, 0, sizeof(v13));
    std::string::basic_string[abi:ne180100]<0>(&v13, "ibi.nas.");
    if (v16 >= 0) {
      uint64_t v10 = (const std::string::value_type *)&v14;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v14;
    }
    if (v16 >= 0) {
      std::string::size_type v11 = HIBYTE(v16);
    }
    else {
      std::string::size_type v11 = v15;
    }
    std::string::append(&v13, v10, v11);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  uint64_t v6 = ims::error((uint64_t)&v14, (uint64_t)&v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"failed to extract SSAC response params", 38);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  return MEMORY[0x1C878DA30](v17);
}

void sub_1C54A1988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  MEMORY[0x1C878E320](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  MEMORY[0x1C878DA30](&a38);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient28handleRequestSsacBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  unsigned int v2 = *(unsigned __int16 *)(a1 + 62);
  LOWORD(v14) = *(_WORD *)(a1 + 60);
  HIDWORD(v14) = v2;
  LOBYTE(v16) = 1;
  if ((unsigned __int16)v14 > 0x64u || v2 >= 0x201)
  {
    LOWORD(v14) = 100;
    HIDWORD(v14) = 0;
    LOBYTE(v16) = 0;
  }
  HIDWORD(v15) = 1;
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  uint64_t v3 = ims::debug((uint64_t)v12, (uint64_t)v10);
  if (*(_DWORD *)(a1 + 56) == 1) {
    uint64_t v4 = "[SIM 2]: ";
  }
  else {
    uint64_t v4 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Got SSAC voice barring response, Factor = ", 42);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  uint64_t v5 = ims::debug((uint64_t)v12, (uint64_t)v10);
  if (*(_DWORD *)(a1 + 56) == 1) {
    uint64_t v6 = "[SIM 2]: ";
  }
  else {
    uint64_t v6 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Response converted to SSAC info, Factor = ", 42);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  IMSNasClient::notifyDelegates(*(void **)(a1 + 32), *(_DWORD *)(a1 + 56), (__int16 *)&v14, 1);
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C54A1D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN12IBINasClient19handleAcbBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (*(unsigned char *)(a1 + 70)) {
    __int16 v3 = 0;
  }
  else {
    __int16 v3 = 100;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 68);
  LOWORD(v19) = v3;
  HIDWORD(v19) = v4;
  LOBYTE(v20) = 0;
  HIDWORD(v20) = 1;
  int v21 = 1;
  if (v4 < 0x201)
  {
    if (*(unsigned char *)(a1 + 71))
    {
      HIDWORD(v20) = 0;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 56) + 64))(v2 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 56) + 16))(v2 + 56, v6);
      if (*(_DWORD *)(a1 + 64) == 1) {
        long long v7 = "[SIM 2]: ";
      }
      else {
        long long v7 = "[SIM 1]: ";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"removed voice service flag from barring indication.", 51);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
    }
  }
  else
  {
    LOWORD(v19) = 100;
    LOBYTE(v21) = 0;
    char v5 = 1;
    HIDWORD(v19) = 0;
    HIDWORD(v20) = 0;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v8 = v2 + 56;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v10);
  if (*(_DWORD *)(a1 + 64) == 1) {
    char v11 = "[SIM 2]: ";
  }
  else {
    char v11 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v11);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Got ACB barring indication, Factor = ", 37);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v12);
  if (*(_DWORD *)(a1 + 64) == 1) {
    char v13 = "[SIM 2]: ";
  }
  else {
    char v13 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Indication converted to ACB info, Factor = ", 43);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_31;
    }
  }
  else if (v5)
  {
    goto LABEL_31;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v14);
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v15 = "[SIM 2]: ";
  }
  else {
    uint64_t v15 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"ACB barring applies to voice", 28);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
LABEL_31:
  IMSNasClient::notifyDelegates(*(void **)(a1 + 40), *(_DWORD *)(a1 + 64), (__int16 *)&v19, 2);
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C54A235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IBINasClient::requestAcbBarringInfo(IBINasClient *this, int a2)
{
  unsigned int v4 = (char *)this + 56;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 7) + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  if (a2 == 1) {
    uint64_t v6 = "[SIM 2]: ";
  }
  else {
    uint64_t v6 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, v6);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Getting current ACB info.", 25);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::ARI_IBINetGetAcBarringInfoReq_SDK((AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *)v23);
  LODWORD(v34.__r_.__value_.__l.__data_) = a2;
  if (!v24) {
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
  }
  if (*((unsigned char *)this + 328) && *((_DWORD *)this + 83) == 2)
  {
    memset(&v41, 0, sizeof(v41));
    std::string::basic_string[abi:ne180100]<0>(&v41, "ibi.nas.");
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    (*(void (**)(std::string *__return_ptr, IBINasClient *, unint64_t))(*(void *)this + 136))(&v34, this, (GMID >> 17) & 0xFFFF8000 | (GMID << 26));
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v34;
    }
    else {
      uint64_t v8 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v34.__r_.__value_.__l.__size_;
    }
    std::string::append(&v41, (const std::string::value_type *)v8, size);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    memset(v40, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v32, (void *)this + 38);
    if (*(void *)&v32[0]) {
      uint64_t v10 = (std::__shared_weak_count *)(*(void *)&v32[0] + 160);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v38 = v10;
    uint64_t v39 = (std::__shared_weak_count *)*((void *)&v32[0] + 1);
    v32[0] = 0uLL;
    LoggableString::LoggableString(&v34, &v41);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v40, &v38, &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (*((void *)&v32[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32[0] + 1));
    }
    unint64_t v11 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    uint64_t v12 = (std::__shared_weak_count *)(*(uint64_t (**)(IBINasClient *, void))(*(void *)this + 144))(this, (v11 >> 17) & 0xFFFF8000 | (v11 << 26));
    v34.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v34.__r_.__value_.__l.__size_ = 1174405120;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient4sendIN6AriSdk33ARI_IBINetGetAcBarringInfoReq_SDKEEE9ImsResultRT__block_invoke;
    BOOL v35 = &__block_descriptor_tmp_124_0;
    uint64_t v36 = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v37, (uint64_t)v40);
    v37[6] = v12;
    uint64_t v13 = *((void *)this + 42);
    __p[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&v34, __p);
    LODWORD(v32[0]) = 0;
    if (!v24) {
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>();
    }
    memset(v32, 0, sizeof(v32));
    uint64_t v33 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v29, (void *)(v13 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    aBlock[0] = __p[0];
    __p[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (aBlock[0]) {
      _Block_release(aBlock[0]);
    }
    if (__p[0]) {
      _Block_release(__p[0]);
    }
    MEMORY[0x1C878D520](v32);
    std::string::basic_string[abi:ne180100]<0>(&v29, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)&v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Sent: ", 6);
    *(unsigned char *)(v14 + 17) = 0;
    unint64_t v15 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v23);
    (*(void (**)(void **__return_ptr, IBINasClient *, unint64_t))(*(void *)this + 136))(aBlock, this, (v15 >> 17) & 0xFFFF8000 | (v15 << 26));
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" successfully", 13);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v26 < 0) {
      operator delete(aBlock[0]);
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(v29);
    }
    long long v22 = 0uLL;
    uint64_t v17 = &unk_1F20B2680;
    char v18 = &_bambiDomain;
    int v19 = 0;
    long long v21 = 0uLL;
    long long v20 = 0uLL;
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v37);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v40);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v17 = &unk_1F20B2680;
    char v18 = &_bambiDomain;
    int v19 = 1073741826;
  }
  ImsResult::~ImsResult((ImsResult *)&v17);
  return MEMORY[0x1C878D8F0](v23);
}

void sub_1C54A293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v47);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v48 - 128);
  if (*(char *)(v48 - 49) < 0) {
    operator delete(*(void **)(v48 - 72));
  }
  MEMORY[0x1C878D8F0](&a19);
  _Unwind_Resume(a1);
}

void sub_1C54A2A78()
{
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x1C54A2A70);
}

uint64_t IBINasClient::handleRequestAcbBarringResp(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  memset(v17, 0, sizeof(v17));
  AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::ARI_IBINetGetAcBarringInfoRspCb_SDK((AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *)v17, a1);
  if (!AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *)v17))
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    uint64_t v16 = 0;
    long long v7 = (const unsigned __int8 *)a2;
    uint64_t v8 = *a3;
    uint64_t BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, v7);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 136))(&v14, v8, BufGmid);
    memset(&v13, 0, sizeof(v13));
    std::string::basic_string[abi:ne180100]<0>(&v13, "ibi.nas.");
    if (v16 >= 0) {
      uint64_t v10 = (const std::string::value_type *)&v14;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v14;
    }
    if (v16 >= 0) {
      std::string::size_type v11 = HIBYTE(v16);
    }
    else {
      std::string::size_type v11 = v15;
    }
    std::string::append(&v13, v10, v11);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  uint64_t v6 = ims::error((uint64_t)&v14, (uint64_t)&v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"failed to extract ACB info response params", 42);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  return MEMORY[0x1C878D9A0](v17);
}

void sub_1C54A2D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  MEMORY[0x1C878E320](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  MEMORY[0x1C878D9A0](&a38);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient27handleRequestAcbBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v12 = 0;
  *(void *)std::string v13 = 0;
  if (*(unsigned char *)(a1 + 60)) {
    __int16 v2 = 0;
  }
  else {
    __int16 v2 = 100;
  }
  LOWORD(v12) = v2;
  HIDWORD(v12) = 100;
  v13[0] = 0;
  *(void *)&v13[4] = 0x100000001;
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)v8);
  if (*(_DWORD *)(a1 + 56) == 1) {
    unsigned int v4 = "[SIM 2]: ";
  }
  else {
    unsigned int v4 = "[SIM 1]: ";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Got voice barring from ACB info response, Factor = ", 51);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)", time = ", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  IMSNasClient::notifyDelegates(*(void **)(a1 + 32), *(_DWORD *)(a1 + 56), (__int16 *)&v12, 2);
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1C54A2FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void IBINasClient::IBINasClient(IBINasClient *this, dispatch_object_t *a2)
{
  uint64_t v3 = (IBINasClient *)((char *)this + 160);
  *((void *)this + 20) = &unk_1F20B2FA8;
  IMSNasClient::IMSNasClient(this, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.nas");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 56, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipThreadSafeLockable::SipThreadSafeLockable(v3, (uint64_t *)off_1F20D3448);
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *(void *)this = &unk_1F20D32D0;
  *((void *)this + 7) = &unk_1F20D3388;
  *((void *)this + 20) = &unk_1F20D3408;
  *((void *)this + 40) = 0;
  *((unsigned char *)this + 328) = 0;
  *((_DWORD *)this + 87) = 0;
  *(void *)((char *)this + 340) = 0;
  *(void *)((char *)this + 332) = 0;
  *((void *)this + 44) = (char *)this + 360;
  *((void *)this + 45) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = (char *)this + 384;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_18))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDC2D0, "com.apple.ipTelephony.ibi.nas");
    __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBBDC2D0, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_18);
  }
  if (byte_1EBBDC2E7 >= 0) {
    unsigned int v4 = (const char *)&qword_1EBBDC2D0;
  }
  else {
    unsigned int v4 = (const char *)qword_1EBBDC2D0;
  }
  dispatch_queue_t v5 = dispatch_queue_create(v4, 0);
  uint64_t v6 = *((void *)this + 40);
  *((void *)this + 40) = v5;
  if (v6) {
    dispatch_release(v6);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  ctu::LogServer::create();
  if (__p.__r_.__value_.__r.__words[0])
  {
    char v7 = (std::__shared_weak_count *)operator new(0x30uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B91B8;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C9B38;
    v7[1].__shared_owners_ = (uint64_t)&unk_1F20C9B88;
    v7[1].__shared_weak_owners_ = (uint64_t)this + 56;
    std::string v13 = v7;
    ctu::LogServer::addWriter();
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  uint64_t v8 = *((void *)this + 40);
  object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  ice::Client::create();
  char v9 = (std::__shared_weak_count *)*((void *)this + 43);
  *((_OWORD *)this + 21) = v12;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (object) {
    dispatch_release(object);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1C54A330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __cxa_guard_abort(&_MergedGlobals_18);
  std::__tree<std::string>::destroy(v19 + 376, *(char **)(v19 + 384));
  std::__tree<unsigned int>::destroy(v19 + 352, *(void **)(v19 + 360));
  uint64_t v23 = *(std::__shared_weak_count **)(v19 + 344);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *(NSObject **)(v19 + 320);
  if (v24) {
    dispatch_release(v24);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(v19 + 312);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  SipThreadSafeLockable::~SipThreadSafeLockable(v20, (uint64_t *)off_1F20D3448);
  ImsLogContainer::~ImsLogContainer(v21);
  IMSNasClient::~IMSNasClient((IMSNasClient *)v19);
  _Unwind_Resume(a1);
}

void sub_1C54A33DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C54A33CCLL);
}

void sub_1C54A33F4()
{
}

void IBINasClient::~IBINasClient(IBINasClient *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *((void *)this + 7) = &unk_1F20D3388;
  dispatch_queue_t v5 = (IBINasClient *)((char *)this + 160);
  *((void *)this + 20) = a2[5];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[6];
  std::__tree<std::string>::destroy((uint64_t)this + 376, *((char **)this + 48));
  std::__tree<unsigned int>::destroy((uint64_t)this + 352, *((void **)this + 45));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = *((void *)this + 40);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  SipThreadSafeLockable::~SipThreadSafeLockable(v5, a2 + 1);
  *((void *)this + 7) = &unk_1F20C9CA0;
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  IMSNasClient::~IMSNasClient(this);
}

void IBINasClient::~IBINasClient(IBINasClient *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IBINasClient::~IBINasClient(IBINasClient *this)
{
}

{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void IBINasClient::updateBarringForInstance(IBINasClient *this, int a2, int a3)
{
  int v28 = a2;
  if (*((_DWORD *)this + 83) != 2)
  {
    long long v12 = (char *)this + 56;
    uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 7) + 64))((char *)this + 56);
    (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"IBINasClient not initialized. Don't register for indications.", 61);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    return;
  }
  long long v26 = 0uLL;
  int64_t v27 = 0;
  uint64_t v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v23, "ibi.nas.listen.");
  if (a2) {
    char v7 = "1";
  }
  else {
    char v7 = "0";
  }
  uint64_t v8 = std::string::append(v6, v7, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v27 = v8->__r_.__value_.__r.__words[2];
  long long v26 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v24) < 0) {
    operator delete((void *)v23);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (void *)this + 38);
  if (v19) {
    uint64_t v10 = (std::__shared_weak_count *)(v19 + 160);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v21 = v10;
  long long v22 = v20;
  uint64_t v19 = 0;
  long long v20 = 0;
  if (v27 >= 0) {
    char v11 = (const char *)&v26;
  }
  else {
    char v11 = (const char *)v26;
  }
  LoggableString::LoggableString((LoggableString *)&__p, v11);
  SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((std::__shared_weak_count **)&v23, &v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 44, (unsigned int *)&v28, (uint64_t)&std::piecewise_construct, (unsigned int **)&__p)+ 8) = a3;
  if ((a3 & 2) != 0)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 1174405120;
    v16[2] = ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke;
    void v16[3] = &__block_descriptor_tmp_49_0;
    v16[4] = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v17, (uint64_t)&v23);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*((void *)this + 42), 630358016, (uint64_t *)&__p);
    IBINasClient::requestAcbBarringInfo(this, v28);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v17);
    if ((a3 & 1) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    ice::Client::setIndShouldWake(*((ice::Client **)this + 42));
    if ((a3 & 1) == 0)
    {
LABEL_21:
      ice::Client::setIndShouldWake(*((ice::Client **)this + 42));
      goto LABEL_25;
    }
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke_50;
  void v14[3] = &__block_descriptor_tmp_53_2;
  void v14[4] = this;
  SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v15, (uint64_t)&v23);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*((void *)this + 42), 696320000, (uint64_t *)&__p);
  IBINasClient::requestSsacBarringInfo(this, v28);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v15);
LABEL_25:
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)&v23);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_1C54A39F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v37 - 128);
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[9];
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v44, (void *)(v5 + 304));
    long long v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    memset(v52, 0, sizeof(v52));
    AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::ARI_IBINetCellLteAcBarringStatusIndCb_SDK((AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *)v52, a2);
    if (!AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::unpack((AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *)v52))
    {
      int v11 = *(_DWORD *)v53;
      uint64_t v12 = v5 + 56;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 56) + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 56) + 16))(v5 + 56, v13);
      if (v11 == 1) {
        uint64_t v14 = "[SIM 2]: ";
      }
      else {
        uint64_t v14 = "[SIM 1]: ";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"*response.barring_info_type_t2 = ", 33);
      *(unsigned char *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v15);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"(*response.mo_data_barring_t4).barring_status = ", 48);
      *(unsigned char *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v16);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"(*response.mo_data_barring_t4).remaining_timer = ", 49);
      *(unsigned char *)(v16 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v17);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"(*response.mo_signaling_barring_t5).barring_status = ", 53);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v18);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v18 + 32))(v18, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"(*response.mo_signaling_barring_t5).remaining_timer = ", 54);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v19);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"*response.skip_barring_mmtel_voice_t7 = ", 40);
      *(unsigned char *)(v19 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v20);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"*response.skip_barring_sms_t9 = ", 32);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      int v21 = **((unsigned char **)&v53 + 1);
      if (v21 == 4)
      {
        int v23 = *(_DWORD *)v55;
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v27);
        std::string::basic_string[abi:ne180100]<0>(&__p, v14);
        (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"barring type: MO_SIGNALING, barringStatus=", 42);
        *(unsigned char *)(v27 + 17) = 0;
        if (v23) {
          int v28 = "true";
        }
        else {
          int v28 = "false";
        }
        if (v23) {
          uint64_t v29 = 4;
        }
        else {
          uint64_t v29 = 5;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)v28, v29);
        *(unsigned char *)(v27 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)", barringTime=", 14);
        *(unsigned char *)(v27 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        if (v47 < 0) {
          operator delete(__p);
        }
      }
      else if (v21 == 2)
      {
        int v22 = **((_DWORD **)&v54 + 1);
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v24);
        std::string::basic_string[abi:ne180100]<0>(&__p, v14);
        (*(void (**)(uint64_t, void **))(*(void *)v24 + 32))(v24, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"barring type: MO_DATA, barringStatus=", 37);
        *(unsigned char *)(v24 + 17) = 0;
        long long v25 = v22 ? "true" : "false";
        uint64_t v26 = v22 ? 4 : 5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)v25, v26);
        *(unsigned char *)(v24 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)", barringTime=", 14);
        *(unsigned char *)(v24 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v24 + 17) = 0;
        if (v47 < 0) {
          operator delete(__p);
        }
      }
      int v30 = *(_DWORD *)v56;
      int v31 = *v57;
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v32);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v32 + 32))(v32, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"skipBarringMmtelVoice=", 22);
      *(unsigned char *)(v32 + 17) = 0;
      if (v30 == 1) {
        uint64_t v33 = "true";
      }
      else {
        uint64_t v33 = "false";
      }
      if (v30 == 1) {
        uint64_t v34 = 4;
      }
      else {
        uint64_t v34 = 5;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)v33, v34);
      *(unsigned char *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v32 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v5 + 56, v35);
      std::string::basic_string[abi:ne180100]<0>(&__p, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v35 + 32))(v35, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"skipBarringSms=", 15);
      *(unsigned char *)(v35 + 17) = 0;
      if (v31 == 1) {
        uint64_t v36 = "true";
      }
      else {
        uint64_t v36 = "false";
      }
      if (v31 == 1) {
        uint64_t v37 = 4;
      }
      else {
        uint64_t v37 = 5;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)v36, v37);
      *(unsigned char *)(v35 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v35 + 17) = 0;
      if (v47 < 0) {
        operator delete(__p);
      }
      int64x2_t v49 = 0;
      std::string::size_type v50 = 0;
      uint64_t v51 = 0;
      uint64_t v38 = (const unsigned __int8 *)a3;
      uint64_t v39 = v44;
      uint64_t BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, v38);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v39 + 136))(&v49, v39, BufGmid);
      memset(&v48, 0, sizeof(v48));
      std::string::basic_string[abi:ne180100]<0>(&v48, "ibi.nas.");
      if (v51 >= 0) {
        std::string v41 = (const std::string::value_type *)&v49;
      }
      else {
        std::string v41 = (const std::string::value_type *)v49;
      }
      if (v51 >= 0) {
        std::string::size_type v42 = HIBYTE(v51);
      }
      else {
        std::string::size_type v42 = v50;
      }
      std::string::append(&v48, v41, v42);
      operator new();
    }
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v8 = v5 + 56;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"failed to extract ACB indication params", 39);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    MEMORY[0x1C878DB90](v52);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  return 0;
}

void sub_1C54A4A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke_50(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[9];
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (void *)(v5 + 304));
    uint64_t v25 = 0;
    long long v24 = 0u;
    memset(v23, 0, sizeof(v23));
    AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::ARI_IBINetDcSsacBarringInfoIndCb_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *)v23, a2);
    if (!AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::unpack((AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *)v23))
    {
      ibiBarringFactorToActualBarringFactor(**((_DWORD **)&v24 + 1));
      uint64_t v20 = 0;
      std::string::size_type v21 = 0;
      uint64_t v22 = 0;
      int v11 = (const unsigned __int8 *)a3;
      uint64_t v12 = v17;
      uint64_t BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, v11);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 136))(&v20, v12, BufGmid);
      memset(&v19, 0, sizeof(v19));
      std::string::basic_string[abi:ne180100]<0>(&v19, "ibi.nas.");
      if (v22 >= 0) {
        uint64_t v14 = (const std::string::value_type *)&v20;
      }
      else {
        uint64_t v14 = (const std::string::value_type *)v20;
      }
      if (v22 >= 0) {
        std::string::size_type v15 = HIBYTE(v22);
      }
      else {
        std::string::size_type v15 = v21;
      }
      std::string::append(&v19, v14, v15);
      operator new();
    }
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v8 = v5 + 56;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"failed to extract SSAC indication params", 40);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    MEMORY[0x1C878DA00](v23);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  return 0;
}

void sub_1C54A4EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  MEMORY[0x1C878E320](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  MEMORY[0x1C878DA00](&a38);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void IBINasClient::bootstrap(uint64_t a1, void **a2)
{
  int v4 = *(_DWORD *)(a1 + 332);
  if (v4 == 2)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(a1 + 8);
        if (v9) {
          (*(void (**)(uint64_t, void **))(*(void *)v9 + 16))(v9, a2);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  else if (v4 == 1)
  {
    uint64_t v5 = (uint64_t **)(a1 + 376);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, a2, (uint64_t)a2);
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*(void *)a1 + 48);
    v10();
  }
}

void sub_1C54A50B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IBINasClient::initialize(uint64_t a1, void **a2)
{
  int v4 = *(_DWORD *)(a1 + 332);
  if (v4 == 1)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 376), a2, (uint64_t)a2);
  }
  else if (v4 == 2)
  {
    uint64_t v5 = a1 + 56;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 64))(a1 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"already initialized", 19);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
  }
  else if (*(unsigned char *)(a1 + 328))
  {
    *(_DWORD *)(a1 + 332) = 2;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(a1 + 8);
        if (v10) {
          (*(void (**)(uint64_t, void **))(*(void *)v10 + 16))(v10, a2);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 56;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 56) + 64))(a1 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 56, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"initializing IBINasClient", 25);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    memset(v26, 0, sizeof(v26));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (void *)(a1 + 304));
    if (v22) {
      uint64_t v13 = (std::__shared_weak_count *)(v22 + 160);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v24 = v13;
    uint64_t v25 = v23;
    uint64_t v22 = 0;
    int v23 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "ibi.nas.init");
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v26, &v24, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    *(_DWORD *)(a1 + 332) = 1;
    uint64_t v14 = *(void *)(a1 + 336);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 1174405120;
    void v19[2] = ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
    v19[3] = &__block_descriptor_tmp_59_2;
    _OWORD v19[4] = a1;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v20, (uint64_t)v26);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    ice::Client::setEventHandler<void({block_pointer})(void)>(v14, 0, (uint64_t *)&__p);
    uint64_t v15 = *(void *)(a1 + 336);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1174405120;
    v17[2] = ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke_60;
    v17[3] = &__block_descriptor_tmp_63_1;
    v17[4] = a1;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v18, (uint64_t)v26);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    ice::Client::setEventHandler<void({block_pointer})(void)>(v15, 1, (uint64_t *)&__p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 376), a2, (uint64_t)a2);
    ice::Client::start(*(ice::Client **)(a1 + 336));
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v18);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v20);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v26);
  }
  return 1;
}

void sub_1C54A5490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v3 = a1[9];
  __int16 v2 = (std::__shared_weak_count *)a1[10];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v3)
  {
    int v4 = *(void (**)(uint64_t))(*(void *)v1 + 152);
    v4(v1);
  }
}

void ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke_60(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v3 = a1[9];
  __int16 v2 = (std::__shared_weak_count *)a1[10];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v3)
  {
    int v4 = *(void (**)(uint64_t))(*(void *)v1 + 160);
    v4(v1);
  }
}

uint64_t IBINasClient::handleClientStarted(IBINasClient *this)
{
  if (*((_DWORD *)this + 83) == 1)
  {
    *((_DWORD *)this + 83) = 2;
    __int16 v2 = *((void *)this + 6);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN12IBINasClient19handleClientStartedEv_block_invoke;
    block[3] = &__block_descriptor_tmp_64_0;
    block[4] = this;
    dispatch_async(v2, block);
  }
  uint64_t v4 = *((void *)this + 7);
  uint64_t v3 = (char *)this + 56;
  v3[272] = 1;
  uint64_t v5 = (*(uint64_t (**)(char *))(v4 + 64))(v3);
  (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"IBINasClient started", 20);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  return result;
}

void ___ZN12IBINasClient19handleClientStartedEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(v1 + 8);
      if (v5)
      {
        uint64_t v6 = *(void **)(v1 + 376);
        if (v6 != (void *)(v1 + 384))
        {
          do
          {
            memset(&__p, 0, sizeof(__p));
            if (*((char *)v6 + 55) < 0) {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v6[4], v6[5]);
            }
            else {
              std::string __p = *(std::string *)(v6 + 4);
            }
            (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 16))(v5, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v7 = (void *)v6[1];
            if (v7)
            {
              do
              {
                uint64_t v8 = v7;
                uint64_t v7 = (void *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                uint64_t v8 = (void *)v6[2];
                BOOL v9 = *v8 == (void)v6;
                uint64_t v6 = v8;
              }
              while (!v9);
            }
            uint64_t v6 = v8;
          }
          while (v8 != (void *)(v1 + 384));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  std::__tree<std::string>::destroy(v1 + 376, *(char **)(v1 + 384));
  *(void *)(v1 + 384) = 0;
  *(void *)(v1 + 392) = 0;
  *(void *)(v1 + 376) = v1 + 384;
}

void sub_1C54A5878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t IBINasClient::handleClientStopped(IBINasClient *this)
{
  __int16 v2 = (char *)this + 56;
  uint64_t v1 = *((void *)this + 7);
  *((unsigned char *)this + 328) = 0;
  uint64_t v3 = (*(uint64_t (**)(char *))(v1 + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"IBINasClient stopped", 20);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  return result;
}

uint64_t IBINasClient::deinitialize(uint64_t this)
{
  if (*(_DWORD *)(this + 332) == 2) {
    *(_DWORD *)(this + 332) = 0;
  }
  return this;
}

uint64_t (*IBINasClient::callbackForRequest(IBINasClient *this, int a2))(unsigned __int8 *a1, unsigned int a2, uint64_t *a3)
{
  __int16 v2 = (uint64_t (*)(unsigned __int8 *, unsigned int, uint64_t *))IBINasClient::handleUnknownResponse;
  if (a2 == 679575552) {
    __int16 v2 = IBINasClient::handleRequestSsacBarringResp;
  }
  if (a2 == 613548032) {
    return IBINasClient::handleRequestAcbBarringResp;
  }
  else {
    return v2;
  }
}

uint64_t IBINasClient::setAccessBarringType(IBINasClient *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 128))();
}

uint64_t IBINasClient::requestCurrentBarringInfo(uint64_t this)
{
  uint64_t v1 = (IBINasClient *)this;
  if (*(_DWORD *)(this + 332) == 2)
  {
    __int16 v2 = *(void **)(this + 352);
    uint64_t v3 = (void *)(this + 360);
    if (v2 != (void *)(this + 360))
    {
      do
      {
        int v4 = *((_DWORD *)v2 + 7);
        int v5 = *((_DWORD *)v2 + 8);
        if ((v5 & 2) != 0) {
          this = IBINasClient::requestAcbBarringInfo(v1, *((_DWORD *)v2 + 7));
        }
        if (v5) {
          this = IBINasClient::requestSsacBarringInfo(v1, v4);
        }
        uint64_t v6 = (void *)v2[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)v2[2];
            BOOL v8 = *v7 == (void)v2;
            __int16 v2 = v7;
          }
          while (!v8);
        }
        __int16 v2 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    uint64_t v9 = this + 56;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(this + 56) + 64))(this + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"IBINasClient not initialized. Don't request barring info.", 57);
    *(unsigned char *)(v10 + 17) = 0;
    this = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
  }
  return this;
}

void *IBINasClient::getMsgName@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  uint64_t v4 = Ari::MsgDefById((Ari *)(a1 >> 26));
  int v5 = "Unknown";
  if (v4 && *(void *)(v4 + 48)) {
    int v5 = *(char **)(v4 + 48);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t ___ZN12IBINasClient4sendIN6AriSdk34ARI_IBINetDcSsacBarringInfoReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[9];
  uint64_t v7 = (std::__shared_weak_count *)a1[10];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v8)
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[11];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (void *)(v6 + 304));
    v9(a2, a3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return 0;
}

void sub_1C54A5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12IBINasClient4sendIN6AriSdk33ARI_IBINetGetAcBarringInfoReq_SDKEEE9ImsResultRT__block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[9];
  uint64_t v7 = (std::__shared_weak_count *)a1[10];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v8)
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[11];
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (void *)(v6 + 304));
    v9(a2, a3, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return 0;
}

void sub_1C54A5CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void LazuliMessageIdHeader::create(const std::string *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F20D3740;
  int v5 = v4 + 24;
  LazuliStringHeader::LazuliStringHeader((std::string *)v4 + 1, (const std::string *)"Message-ID", a1);
  v4[104] = 1;
  *((void *)v4 + 3) = &unk_1F20D3790;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  if (!v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    goto LABEL_5;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    std::__shared_weak_count::__release_weak(v6);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C54A5DE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliMessageIdHeader::~LazuliMessageIdHeader(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliMessageIdHeader::clone@<D0>(LazuliMessageIdHeader *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1F20C26D8;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = &unk_1F20D36E0;
  *((unsigned char *)v4 + 104) = 1;
  *(void *)&long long v6 = v4 + 3;
  *((void *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1C54A5F7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D3740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D3740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipRequest::SipRequest(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a3;
  *(void *)a1 = &unk_1F20D3808;
  *(void *)(a1 + 88) = 0;
  int v5 = (std::string *)(a1 + 88);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  SipUri::SipUri((SipUri *)(a1 + 112));
  std::string::operator=(v5, a2);
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_1C54A6198(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v3);
  if (v1[111] < 0) {
    operator delete(*v2);
  }
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipRequest::SipRequest(SipRequest *this, const SipRequest *a2)
{
  SipMessage::SipMessage(this, a2);
  void *v4 = &unk_1F20D3808;
  v4[11] = 0;
  int v5 = (std::string *)(v4 + 11);
  v4[12] = 0;
  v4[13] = 0;
  long long v6 = (SipUri *)(v4 + 14);
  SipUri::SipUri((SipUri *)(v4 + 14));
  std::string::operator=(v5, (const std::string *)((char *)a2 + 88));
  SipUri::operator=(v6, (uint64_t)a2 + 112);
  *((unsigned char *)this + 520) = *((unsigned char *)a2 + 520);
}

void sub_1C54A6254(_Unwind_Exception *a1)
{
  if (v1[111] < 0) {
    operator delete(*v2);
  }
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipRequest::encodeStartLine(SipRequest *this, ImsOutStream *a2)
{
  uint64_t v4 = (const std::string *)(*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
  LoggableString::LoggableString(&__p, v4);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipUri::toStream((uint64_t)this + 112, (uint64_t)a2, 1);
  LoggableString::LoggableString((LoggableString *)&__p, " SIP/2.0");
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54A6394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipRequest::setCSeq(SipRequest *this, int a2)
{
  double result = (std::string *)SipMessage::header<SipCSeqHeader>(this, 0);
  if (result)
  {
    HIDWORD(result[2].__r_.__value_.__r.__words[1]) = a2;
  }
  else
  {
    int v5 = (char *)SipMessage::addHeader<SipCSeqHeader>(this, 0);
    *((_DWORD *)v5 + 15) = a2;
    long long v6 = (const std::string *)(*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
    return std::string::operator=((std::string *)(v5 + 64), v6);
  }
  return result;
}

SipHeader *SipMessage::header<SipCSeqHeader>(SipMessage *a1, int a2)
{
  double result = SipMessage::headerWithName(a1, "CSeq", a2);
  if (result)
  {
  }
  return result;
}

void *SipMessage::addHeader<SipCSeqHeader>(SipMessage *a1, int a2)
{
  uint64_t v4 = SipMessageEncodingMap::headerPrototype<SipCSeqHeader>(*((void **)a1 + 10));
  if (!v4) {
    return 0;
  }
  int v5 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v4 + 32))(v4);
  if (!v5) {
    return 0;
  }
  long long v6 = SipMessage::addHeader(a1, v5, a2);
  if (!v6) {
    return 0;
  }
}

uint64_t SipRequest::nextHop(SipRequest *this)
{
  HeaderWithName = (const void *)SipMessage::firstHeaderWithName((uint64_t)this, (const void **)"Route");
  if (!HeaderWithName) {
    return (uint64_t)this + 112;
  }
  if (!v3) {
    return (uint64_t)this + 112;
  }
  uint64_t v4 = v3[9];
  if (v4 == v3[10]) {
    return 0;
  }
  else {
    return *(void *)v4;
  }
}

BOOL SipRequest::isSessionRefresh(SipRequest *this)
{
  __int16 v2 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
  uint64_t v3 = v2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v2[23];
  }
  else {
    uint64_t v4 = *((void *)v2 + 1);
  }
  if (v4 == 6)
  {
    if ((v3 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v2, "INVITE", *((void *)v2 + 1))) {
        return 1;
      }
    }
    else
    {
      if (!v2[23]) {
        return 1;
      }
      for (uint64_t i = "INVITE"; *v2 == *(unsigned __int8 *)i; ++i)
      {
        ++v2;
        if (!--v3) {
          return 1;
        }
      }
    }
  }
  long long v6 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 6) {
    return 0;
  }
  if ((v7 & 0x80) != 0) {
    return memcmp(*(const void **)v6, "UPDATE", *((void *)v6 + 1)) == 0;
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v9 = v7 - 1;
  uint64_t v10 = "UPDATE";
  do
  {
    int v12 = *v6++;
    int v11 = v12;
    int v14 = *(unsigned __int8 *)v10++;
    int v13 = v14;
    BOOL v16 = v9-- != 0;
    BOOL v17 = v11 == v13;
    BOOL v18 = v11 == v13;
  }
  while (v17 && v16);
  return v18;
}

SipUri *SipRequest::bestSenderIdentity(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v4 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v4) {
      return (SipUri *)(v4 + 104);
    }
  }
  std::string __p = 0;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(a1, (uint64_t)&__p);
  long long v6 = __p;
  uint64_t v7 = v21;
  if (__p == v21) {
    goto LABEL_27;
  }
  uint64_t v8 = 0;
  int v5 = 0;
  do
  {
    uint64_t v9 = *v6 + 64;
    BOOL v17 = 0;
    BOOL v18 = 0;
    uint64_t v19 = 0;
    SipRouteSet::allHops(v9, &v17);
    uint64_t v10 = (SipUri **)v17;
    int v11 = v18;
    if (v17 == v18)
    {
      char v14 = 1;
      if (v17) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    while (1)
    {
      int v12 = *v10;
      if (!v5) {
        int v5 = *v10;
      }
      if (a2 == 1)
      {
        isSipUruint64_t i = SipUri::isSipUri(*v10);
        goto LABEL_15;
      }
      if (a2 == 2) {
        break;
      }
      if (!a2) {
        goto LABEL_20;
      }
LABEL_16:
      if (++v10 == (SipUri **)v11)
      {
        char v14 = 1;
        int v12 = v8;
        goto LABEL_21;
      }
    }
    isSipUruint64_t i = SipUri::isTelUri(*v10);
LABEL_15:
    if (!isSipUri) {
      goto LABEL_16;
    }
LABEL_20:
    char v14 = 0;
LABEL_21:
    uint64_t v10 = (SipUri **)v17;
    uint64_t v8 = v12;
    if (v17)
    {
LABEL_22:
      BOOL v18 = (char *)v10;
      operator delete(v10);
    }
LABEL_23:
    if ((v14 & 1) == 0)
    {
      int v5 = v8;
      goto LABEL_31;
    }
    ++v6;
  }
  while (v6 != v7);
  if (!v5 || !SipUri::isValidUri(v5))
  {
LABEL_27:
    uint64_t v15 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v15) {
      int v5 = (SipUri *)(v15 + 104);
    }
    else {
      int v5 = (SipUri *)SipUri::anonymousUri(0);
    }
  }
LABEL_31:
  if (__p)
  {
    std::string::size_type v21 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1C54A6904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == v4)
  {
    uint64_t v26 = v2;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = (void *)(a2 + 16);
    do
    {
      uint64_t v10 = *(unsigned __int8 **)(v4 + 8 * v7);
      if ((char)v10[31] < 0)
      {
        int v11 = (const void *)*((void *)v10 + 1);
        unint64_t v12 = *((void *)v10 + 2);
      }
      else
      {
        int v11 = v10 + 8;
        unint64_t v12 = v10[31];
      }
      if (v12 >= 0x13) {
        size_t v13 = 19;
      }
      else {
        size_t v13 = v12;
      }
      if (!memcmp(v11, "P-Asserted-Identity", v13) && v12 == 19)
      {
        BOOL v16 = v15;
        if ((unint64_t)v2 >= *v9)
        {
          uint64_t v17 = ((uint64_t)v2 - *(void *)a2) >> 3;
          if ((unint64_t)(v17 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *v9 - *(void *)a2;
          uint64_t v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
            uint64_t v19 = v17 + 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            std::string::size_type v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v9, v20);
          }
          else {
            std::string::size_type v21 = 0;
          }
          uint64_t v22 = &v21[8 * v17];
          *(void *)uint64_t v22 = v16;
          __int16 v2 = v22 + 8;
          long long v24 = *(void **)a2;
          int v23 = *(void **)(a2 + 8);
          if (v23 != *(void **)a2)
          {
            do
            {
              uint64_t v25 = *--v23;
              *((void *)v22 - 1) = v25;
              v22 -= 8;
            }
            while (v23 != v24);
            int v23 = *(void **)a2;
          }
          *(void *)a2 = v22;
          *(void *)(a2 + 8) = v2;
          *(void *)(a2 + 16) = &v21[8 * v20];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *v2++ = v15;
        }
        *(void *)(a2 + 8) = v2;
        uint64_t v4 = *(void *)(a1 + 8);
        uint64_t v3 = *(void *)(a1 + 16);
      }
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((v3 - v4) >> 3));
    uint64_t v26 = *(void **)a2;
  }
  return v26 != v2;
}

void SipRequest::bestSenderName(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, std::string *a4@<X8>)
{
  memset(&v29, 0, sizeof(v29));
  if (a2 == 3)
  {
    unsigned int v8 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v8)
    {
      uint64_t v9 = (const std::string::value_type **)(v8 + 304);
      if (v8[327] < 0)
      {
        std::string::size_type v11 = *((void *)v8 + 39);
        if (v11)
        {
          std::string::__init_copy_ctor_external(a4, *v9, v11);
          goto LABEL_44;
        }
      }
      else if (v8[327])
      {
        long long v10 = *(_OWORD *)v9;
        a4->__r_.__value_.__r.__words[2] = *((void *)v8 + 40);
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v10;
        goto LABEL_44;
      }
    }
  }
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(a1, (uint64_t)&__p);
  unint64_t v12 = __p;
  size_t v13 = v27;
LABEL_9:
  if (v12 != v13)
  {
    uint64_t v14 = *v12 + 64;
    int v23 = 0;
    long long v24 = 0;
    uint64_t v25 = 0;
    SipRouteSet::allHops(v14, &v23);
    uint64_t v15 = v23;
    BOOL v16 = v24;
    if (v23 == v24)
    {
      char v20 = 1;
      if (v23) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    while (1)
    {
      uint64_t v17 = *(void *)v15;
      if (*(char *)(*(void *)v15 + 223) < 0)
      {
        if (!*(void *)(v17 + 208)) {
          goto LABEL_26;
        }
      }
      else if (!*(unsigned char *)(*(void *)v15 + 223))
      {
        goto LABEL_26;
      }
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      if (!size) {
        std::string::operator=(&v29, (const std::string *)(v17 + 200));
      }
      switch(a2)
      {
        case 1:
          isSipUruint64_t i = SipUri::isSipUri((SipUri *)v17);
          break;
        case 2:
          isSipUruint64_t i = SipUri::isTelUri((SipUri *)v17);
          break;
        case 0:
          goto LABEL_30;
        default:
          goto LABEL_26;
      }
      if (isSipUri)
      {
LABEL_30:
        char v20 = 0;
        *a4 = v29;
        memset(&v29, 0, sizeof(v29));
LABEL_31:
        uint64_t v15 = v23;
        if (v23)
        {
LABEL_32:
          long long v24 = v15;
          operator delete(v15);
        }
LABEL_33:
        if ((v20 & 1) == 0) {
          goto LABEL_42;
        }
        ++v12;
        goto LABEL_9;
      }
LABEL_26:
      v15 += 8;
      if (v15 == v16)
      {
        char v20 = 1;
        goto LABEL_31;
      }
    }
  }
  std::string::size_type v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = v29.__r_.__value_.__l.__size_;
  }
  if (!v21 && (a3 & 1) == 0)
  {
    uint64_t v22 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v22) {
      std::string::operator=(&v29, (const std::string *)(v22 + 304));
    }
  }
  *a4 = v29;
  memset(&v29, 0, sizeof(v29));
LABEL_42:
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
LABEL_44:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_1C54A6D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRequest::canUpdateOutboundViaHeader(SipRequest *this)
{
  uint64_t v1 = (const void **)((char *)this + 88);
  uint64_t v2 = *((unsigned __int8 *)this + 111);
  size_t v3 = *((void *)this + 12);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 111);
  }
  else {
    uint64_t v4 = *((void *)this + 12);
  }
  if (v4 != 6)
  {
    if (v4 == 3)
    {
      if ((v2 & 0x80) == 0)
      {
        if (*((unsigned char *)this + 111))
        {
          long long v6 = &SipRequest::kMethodAck;
          while (*(unsigned __int8 *)v1 == *(unsigned __int8 *)v6)
          {
            uint64_t v1 = (const void **)((char *)v1 + 1);
            long long v6 = (long long *)((char *)v6 + 1);
            if (!--v2) {
              goto LABEL_24;
            }
          }
          goto LABEL_23;
        }
LABEL_24:
        BOOL v16 = *((unsigned char *)this + 520) != 0;
        return !v16;
      }
      if (!memcmp(*v1, &SipRequest::kMethodAck, v3)) {
        goto LABEL_24;
      }
    }
LABEL_23:
    BOOL v16 = 0;
    return !v16;
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v16 = memcmp(*v1, "CANCEL", v3) == 0;
  }
  else if (*((unsigned char *)this + 111))
  {
    uint64_t v7 = v2 - 1;
    unsigned int v8 = "CANCEL";
    do
    {
      int v10 = *(unsigned __int8 *)v1;
      uint64_t v1 = (const void **)((char *)v1 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v8++;
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
      BOOL v16 = v9 == v11;
    }
    while (v15 && v14);
  }
  else
  {
    BOOL v16 = 1;
  }
  return !v16;
}

double SipRequest::updateInboundViaHeader@<D0>(SipMessage *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a1, 0);
  if (HeaderWith
    && (long long v6 = (SipViaHop **)*((void *)HeaderWith + 8), v6 != *((SipViaHop ***)HeaderWith + 9))
    && (uint64_t v7 = *v6) != 0)
  {
    if (SipViaHop::supportsRport(*v6))
    {
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)a2 + 56))();
      SipViaHop::setRport(v7, v8);
      goto LABEL_14;
    }
    if (*((char *)v7 + 39) < 0)
    {
      if (*((void *)v7 + 3)) {
        goto LABEL_14;
      }
    }
    else if (*((unsigned char *)v7 + 39))
    {
      goto LABEL_14;
    }
    SipHost::address((SipViaHop *)((char *)v7 + 8), &v12);
    char v11 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)v12 + 104))(v12, a2, 0);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if ((v11 & 1) == 0) {
LABEL_14:
    }
      SipViaHop::setReceived();
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v12 = &unk_1F20B2680;
    size_t v13 = (std::__shared_weak_count *)&_bambiDomain;
    int v14 = 1073741828;
    int v9 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v12, "invalid Via header");
    ImsResult::ImsResult((ImsResult *)a3, v9);
    ImsResult::~ImsResult((ImsResult *)&v12);
  }
  return result;
}

void sub_1C54A703C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SipRequest::validate(SipRequest *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  SipMessage::validate(this, (uint64_t)&v23);
  if ((*(unsigned int (**)(void, void))(**((void **)&v23 + 1) + 24))(*((void *)&v23 + 1), v24))
  {
    ImsResult::ImsResult(a2, (uint64_t)&v23);
    goto LABEL_26;
  }
  uint64_t v4 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v4) {
    int v5 = (long long *)(v4 + 64);
  }
  else {
    int v5 = &ims::kEmptyString;
  }
  uint64_t v6 = (*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
  uint64_t v7 = *((unsigned __int8 *)v5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)v5 + 23);
  }
  else {
    uint64_t v8 = *((void *)v5 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  if (v8 == v9)
  {
    if (v10 >= 0) {
      char v11 = (unsigned __int8 *)v6;
    }
    else {
      char v11 = *(unsigned __int8 **)v6;
    }
    if ((v7 & 0x80) == 0)
    {
      if (*((unsigned char *)v5 + 23))
      {
        while (*(unsigned __int8 *)v5 == *v11)
        {
          int v5 = (long long *)((char *)v5 + 1);
          ++v11;
          if (!--v7) {
            goto LABEL_25;
          }
        }
        goto LABEL_21;
      }
LABEL_25:
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)a2 = &unk_1F20B2680;
      *(void *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 0;
      goto LABEL_26;
    }
    if (!memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_25;
    }
  }
LABEL_21:
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  v18[0] = &unk_1F20B2680;
  v18[1] = &_bambiDomain;
  int v19 = 1073741828;
  uint64_t v12 = (*(uint64_t (**)(SipRequest *))(*(void *)this + 112))(this);
  uint64_t v13 = ImsResult::operator<<<std::string>((uint64_t)v18, v12);
  uint64_t v14 = ImsResult::operator<<<char [26]>(v13, " request has CSeq method ");
  long long v15 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v15) {
    long long v16 = (long long *)(v15 + 64);
  }
  else {
    long long v16 = &ims::kEmptyString;
  }
  long long v17 = (const std::string *)ImsResult::operator<<<std::string>(v14, (uint64_t)v16);
  ImsResult::ImsResult((ImsResult *)a2, v17);
  ImsResult::~ImsResult((ImsResult *)v18);
LABEL_26:
  ImsResult::~ImsResult((ImsResult *)&v23);
}

void sub_1C54A72A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

uint64_t SipRequest::needsDefaultRoute(SipRequest *this)
{
  uint64_t v2 = *((unsigned __int8 *)this + 111);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 111);
  }
  else {
    uint64_t v3 = *((void *)this + 12);
  }
  if (v3 == 8)
  {
    uint64_t v4 = (const void **)((char *)this + 88);
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v4, "REGISTER", *((void *)this + 12));
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!*((unsigned char *)this + 111)) {
        return 0;
      }
      for (uint64_t i = "REGISTER"; *(unsigned __int8 *)v4 == *(unsigned __int8 *)i; ++i)
      {
        uint64_t v4 = (const void **)((char *)v4 + 1);
        if (!--v2) {
          return 0;
        }
      }
    }
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 4, "Route");
  return !v7 || *((void *)v7 + 5) == 0;
}

uint64_t SipRequest::createMatchingRequest(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 111);
    if ((v2 & 0x80u) == 0) {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      uint64_t v3 = *(void *)(a1 + 96);
    }
    if (v3 == 6)
    {
      uint64_t v4 = (const void **)(a1 + 88);
      if ((v2 & 0x80) == 0)
      {
        if (*(unsigned char *)(a1 + 111))
        {
          uint64_t v5 = "INVITE";
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v5)
          {
            uint64_t v4 = (const void **)((char *)v4 + 1);
            ++v5;
            if (!--v2) {
              goto LABEL_15;
            }
          }
          return 0;
        }
LABEL_15:
        SipMessageEncodingMap::createRequestFromTemplate();
      }
      if (!memcmp(*v4, "INVITE", *(void *)(a1 + 96))) {
        goto LABEL_15;
      }
    }
    return 0;
  }
  return v1;
}

void sub_1C54A753C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

SipMessage *SipRequest::createMatchingCancel(SipRequest *this)
{
  MatchingRequest = (SipMessage *)SipRequest::createMatchingRequest((uint64_t)this);
  uint64_t v3 = MatchingRequest;
  if (MatchingRequest) {
    SipMessage::copyHeaderFromMessage(MatchingRequest, (uint64_t)this, (uint64_t)SipHeader::kHeaderTo);
  }
  return v3;
}

SipMessage *SipRequest::createMatchingAckForResponse(SipRequest *this, const SipResponse *a2)
{
  MatchingRequest = (SipMessage *)SipRequest::createMatchingRequest((uint64_t)this);
  uint64_t v4 = MatchingRequest;
  if (MatchingRequest)
  {
    *((unsigned char *)MatchingRequest + 520) = 1;
    SipMessage::copyHeaderFromMessage(MatchingRequest, (uint64_t)a2, (uint64_t)SipHeader::kHeaderTo);
  }
  return v4;
}

uint64_t SipRequest::identityTypeFromString(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v26, "first");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v2 = (const char *)a1;
  }
  else {
    uint64_t v2 = *(const char **)a1;
  }
  int v3 = v27;
  uint64_t v4 = (void *)v26[0];
  if (v27 >= 0) {
    uint64_t v5 = (const char *)v26;
  }
  else {
    uint64_t v5 = (const char *)v26[0];
  }
  int v6 = strcasecmp(v2, v5);
  int v7 = v6;
  if ((v3 & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_9;
    }
    return 0;
  }
  operator delete(v4);
  if (!v7) {
    return 0;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v26, "tel");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v8 = (const char *)a1;
  }
  else {
    uint64_t v8 = *(const char **)a1;
  }
  int v9 = v27;
  uint64_t v10 = (void *)v26[0];
  if (v27 >= 0) {
    uint64_t v11 = (const char *)v26;
  }
  else {
    uint64_t v11 = (const char *)v26[0];
  }
  int v12 = strcasecmp(v8, v11);
  int v13 = v12;
  if ((v9 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_17;
    }
    return 2;
  }
  operator delete(v10);
  if (!v13) {
    return 2;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v26, "sip");
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v14 = (const char *)a1;
  }
  else {
    uint64_t v14 = *(const char **)a1;
  }
  int v15 = v27;
  long long v16 = (void *)v26[0];
  if (v27 >= 0) {
    long long v17 = (const char *)v26;
  }
  else {
    long long v17 = (const char *)v26[0];
  }
  int v18 = strcasecmp(v14, v17);
  int v19 = v18;
  if (v15 < 0)
  {
    operator delete(v16);
    if (v19) {
      goto LABEL_25;
    }
    return 1;
  }
  if (!v18) {
    return 1;
  }
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(v26, "from");
  if (*(char *)(a1 + 23) >= 0) {
    long long v20 = (const char *)a1;
  }
  else {
    long long v20 = *(const char **)a1;
  }
  int v21 = v27;
  long long v22 = (void *)v26[0];
  if (v27 >= 0) {
    long long v23 = (const char *)v26;
  }
  else {
    long long v23 = (const char *)v26[0];
  }
  int v24 = strcasecmp(v20, v23);
  if (v21 < 0) {
    operator delete(v22);
  }
  if (v24) {
    return 2;
  }
  else {
    return 3;
  }
}

void SipRequest::~SipRequest(void **this)
{
  *this = &unk_1F20D3808;
  SipUri::~SipUri((SipUri *)(this + 14));
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  SipMessage::~SipMessage((SipMessage *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F20D3808;
  SipUri::~SipUri((SipUri *)(this + 14));
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  SipMessage::~SipMessage((SipMessage *)this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *SipMessage::log(SipMessage *this, ImsOutStream *a2)
{
  return a2;
}

void SipMessage::loggableName(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)this + 48))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54A78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRequest::clone(SipRequest *this)
{
}

void sub_1C54A7960(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40979C6A35);
  _Unwind_Resume(a1);
}

uint64_t SipMessage::resultDescription(SipMessage *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

void SipRequest::debugStr(SipRequest *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

uint64_t SipRequest::longDebugStr(SipRequest *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t SipRequest::method(SipRequest *this)
{
  return (uint64_t)this + 88;
}

void *SipMessageEncodingMap::headerPrototype<SipCSeqHeader>(void *a1)
{
  uint64_t result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"CSeq");
  if (result)
  {
  }
  return result;
}

uint64_t ImsLogDestinationFile::ImsLogDestinationFile(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(_DWORD *)(a1 + 16) = 8;
  *(void *)a1 = &unk_1F20D38D8;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v8 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  int v9 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(unsigned char *)(a1 + 97) = 1;
  *(void *)(a1 + 104) = 0;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
  std::string::operator=(v9, (const std::string *)a2);
  *(unsigned char *)(a1 + 96) = a3;
  *(unsigned char *)(a1 + 97) = a4;
  *(void *)(a1 + 104) = 0;
  if (a3)
  {
    int v10 = *(char *)(a2 + 23);
    uint64_t v11 = v10 >= 0 ? (char *)a2 : *(char **)a2;
    int64_t v12 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    if (v12 >= 1)
    {
      int v13 = &v11[v12];
      uint64_t v14 = v11;
      do
      {
        int v15 = (char *)memchr(v14, 58, v12);
        if (!v15) {
          break;
        }
        if (*v15 == 58)
        {
          if (v15 != v13)
          {
            std::string::size_type v16 = v15 - v11;
            if (v16 != -1)
            {
              std::string::basic_string(&v18, (const std::string *)a2, 0, v16, (std::allocator<char> *)&v19);
              if (*(char *)(a1 + 47) < 0) {
                operator delete(*v8);
              }
              *(std::string *)uint64_t v8 = v18;
              std::string::basic_string(&v18, (const std::string *)a2, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
              if (*(char *)(a1 + 71) < 0) {
                operator delete(v9->__r_.__value_.__l.__data_);
              }
              std::string *v9 = v18;
            }
          }
          return a1;
        }
        uint64_t v14 = v15 + 1;
        int64_t v12 = v13 - (unsigned char *)v14;
      }
      while (v13 - (unsigned char *)v14 >= 1);
    }
  }
  return a1;
}

void sub_1C54A7C0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogDestinationFile::createFromString(int a1, std::string *this)
{
  if (!std::string::compare(this, 0, 5uLL, "file:"))
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if (size >= 6) {
      operator new();
    }
  }
  if (!std::string::compare(this, 0, 8uLL, "symfile:"))
  {
    std::string::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v4 & 0x80u) != 0) {
      std::string::size_type v4 = this->__r_.__value_.__l.__size_;
    }
    if (v4 >= 9) {
      operator new();
    }
  }
  if (!std::string::compare(this, 0, 0xCuLL, "global-file:"))
  {
    std::string::size_type v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v5 & 0x80u) != 0) {
      std::string::size_type v5 = this->__r_.__value_.__l.__size_;
    }
    if (v5 >= 0xD) {
      operator new();
    }
  }
  if (!std::string::compare(this, 0, 0xFuLL, "global-symfile:"))
  {
    std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80u) != 0) {
      std::string::size_type v6 = this->__r_.__value_.__l.__size_;
    }
    if (v6 >= 0x10) {
      operator new();
    }
  }
  return 0;
}

void sub_1C54A7EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878E320](v14, 0x10B3C40919B9137);
  _Unwind_Resume(a1);
}

BOOL ImsLogDestinationFile::initialize(ImsLogDestinationFile *this)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 47);
    if (!*((unsigned char *)this + 47)) {
      return v2 != 0;
    }
LABEL_5:
    int v3 = (const char **)((char *)this + 24);
    if (!*((unsigned char *)this + 96))
    {
      std::string::operator=((std::string *)this + 3, (const std::string *)this + 1);
      operator new();
    }
    time_t v53 = time(0);
    memset(&v52, 0, sizeof(v52));
    ims::localtime((ims *)&v53, &v52, v4);
    uint64_t v51 = 0;
    long long v49 = 0u;
    memset(v50, 0, sizeof(v50));
    *(_OWORD *)char v47 = 0u;
    long long v48 = 0u;
    memset(v46, 0, sizeof(v46));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    v45.__r_.__value_.__s.__data_[0] = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v46, (char *)&v45);
    v45.__r_.__value_.__s.__data_[0] = 45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&v45, 1);
    std::string::size_type v5 = (void *)std::ostream::operator<<();
    v45.__r_.__value_.__s.__data_[0] = 45;
    std::string::size_type v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v45, 1);
    *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
    int v7 = (void *)std::ostream::operator<<();
    v45.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v45, 1);
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
    int v9 = (void *)std::ostream::operator<<();
    v45.__r_.__value_.__s.__data_[0] = 45;
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v45, 1);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
    uint64_t v11 = (void *)std::ostream::operator<<();
    v45.__r_.__value_.__s.__data_[0] = 45;
    int64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v45, 1);
    *(void *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
    int v13 = (void *)std::ostream::operator<<();
    v45.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v45, 1);
    *(void *)((char *)v14 + *(void *)(*v14 - 24) + 24) = 2;
    std::ostream::operator<<();
    int v15 = (void **)((char *)this + 72);
    int v16 = *((char *)this + 71);
    BOOL v17 = v16 < 0;
    if (v16 >= 0) {
      std::string v18 = (char *)this + 48;
    }
    else {
      std::string v18 = (char *)*((void *)this + 6);
    }
    if (v17) {
      std::string::size_type v19 = *((void *)this + 7);
    }
    else {
      std::string::size_type v19 = *((unsigned __int8 *)this + 71);
    }
    if (!v19) {
      goto LABEL_39;
    }
    long long v20 = v18 - 1;
    do
    {
      if (!v19) {
        goto LABEL_39;
      }
      int v21 = v20[v19--];
    }
    while (v21 != 46);
    if (v19 == -1)
    {
LABEL_39:
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46 + 8, &v45);
      int v33 = *((char *)this + 71);
      if (v33 >= 0) {
        uint64_t v34 = (char *)this + 48;
      }
      else {
        uint64_t v34 = (const std::string::value_type *)*((void *)this + 6);
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *((unsigned __int8 *)this + 71);
      }
      else {
        std::string::size_type v35 = *((void *)this + 7);
      }
      uint64_t v36 = std::string::insert(&v45, 0, v34, v35);
      std::string::size_type v37 = v36->__r_.__value_.__r.__words[0];
      v55.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
      char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 95) < 0) {
        operator delete(*v15);
      }
      std::string::size_type v39 = v55.__r_.__value_.__r.__words[0];
      *((void *)this + 9) = v37;
      *((void *)this + 10) = v39;
      *(void *)((char *)this + 87) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
      *((unsigned char *)this + 95) = v38;
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v32 = (void *)v45.__r_.__value_.__r.__words[0];
        goto LABEL_49;
      }
    }
    else
    {
      std::string::basic_string(&v55, (const std::string *)this + 2, 0, v19, (std::allocator<char> *)v43);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46 + 8, v43);
      if ((v44 & 0x80u) == 0) {
        long long v22 = v43;
      }
      else {
        long long v22 = (void **)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v23 = v44;
      }
      else {
        std::string::size_type v23 = (std::string::size_type)v43[1];
      }
      int v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string(&__p, (const std::string *)this + 2, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v54);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = std::string::append(&v45, (const std::string::value_type *)p_p, size);
      std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
      v56[0] = v28->__r_.__value_.__l.__size_;
      *(void *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
      char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 95) < 0) {
        operator delete(*v15);
      }
      uint64_t v31 = v56[0];
      *((void *)this + 9) = v29;
      *((void *)this + 10) = v31;
      *(void *)((char *)this + 87) = *(void *)((char *)v56 + 7);
      *((unsigned char *)this + 95) = v30;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if ((char)v44 < 0) {
        operator delete(v43[0]);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v32 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_49:
        operator delete(v32);
      }
    }
    *(void *)&v46[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v46 + *(void *)(*(void *)&v46[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v46[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v50);
    uint64_t v40 = (char *)this + 24;
    if (*((char *)this + 47) < 0) {
      uint64_t v40 = *v3;
    }
    unlink(v40);
    operator new();
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    goto LABEL_5;
  }
  return v2 != 0;
}

void sub_1C54A84F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ImsLogDestinationFile::~ImsLogDestinationFile(ImsLogDestinationFile *this)
{
  *(void *)this = &unk_1F20D38D8;
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  ImsLogDestinationFile::~ImsLogDestinationFile(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsLogDestinationFile::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  int v9 = *(void **)(a1 + 104);
  uint64_t v10 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v11 = v10;
  }
  int64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, a2, v11);
  if ((a3 - 3) > 5) {
    int v13 = "?";
  }
  else {
    int v13 = off_1E6511708[a3 - 3];
  }
  size_t v14 = strlen(v13);
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  if (v8)
  {
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"[", 1);
    int v17 = *(char *)(a4 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a4;
    }
    else {
      uint64_t v18 = *(void *)a4;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a4 + 8);
    }
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    long long v20 = "]: ";
    uint64_t v21 = 3;
  }
  else
  {
    long long v20 = ": ";
    uint64_t v21 = 2;
  }
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v20, v21);
  size_t v23 = strlen(a5);
  int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)a5, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  long long v25 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1C54A8840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void ImsLogDestinationFile::dumpToPath(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 97))
  {
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(void *)(a1 + 80)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 95))
    {
      return;
    }
    uint64_t v4 = *(void *)(a1 + 104);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    ImsFileManager::moveFile(a1 + 72, a2, (uint64_t)v5);
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1C54A8930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ImsLogDestinationFile::name(ImsLogDestinationFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

uint64_t ATTRegistrationPolicy::ATTRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  int v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1F20D3BE8, v5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = &unk_1F20D3928;
  *(void *)(a1 + 104) = &unk_1F20D3B90;
  *(void *)(a1 + 184) = &unk_1F20D3BD8;
  *(unsigned char *)(a1 + 2364) = 0;
  return a1;
}

void sub_1C54A8A58(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ATTRegistrationPolicy::isForbiddenUserError(ATTRegistrationPolicy *this, unsigned __int16 a2)
{
  int v3 = (char *)this + 2320;
  if (SipResponseCodeMap::empty((ATTRegistrationPolicy *)((char *)this + 2320))) {
    return 0;
  }
  return SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

uint64_t ATTRegistrationPolicy::disableIfInWrongCountry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a3);
    if (result)
    {
      int v7 = *(_DWORD *)(a2 + 88) == 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      v8[0] = &unk_1F20B2680;
      v8[1] = &_bambiDomain;
      int v9 = v7 << 30;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 176))(a1, v8);
      ImsResult::~ImsResult((ImsResult *)v8);
      return 1;
    }
  }
  return result;
}

void sub_1C54A8BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ATTRegistrationPolicy::handleMaxReRegistrationErrors(uint64_t this)
{
  *(unsigned char *)(this + 2364) = 1;
  *(unsigned char *)(this + 228) = 1;
  *(_DWORD *)(this + 224) = 0;
  return this;
}

void ATTRegistrationPolicy::initialRegisterRequestSent(SipRegistrationPolicy *this)
{
  *((unsigned char *)this + 2364) = 0;
  SipRegistrationPolicy::initialRegisterRequestSent(this);
}

BOOL ATTRegistrationPolicy::useNextProxy(ATTRegistrationPolicy *this)
{
  return *((unsigned char *)this + 228) && *((unsigned char *)this + 2364) == 0;
}

void ATTRegistrationPolicy::skipToNextProxy(ATTRegistrationPolicy *this)
{
  uint64_t v2 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(ATTRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"skipToNextProxy...", 18);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  SipRegistrationPolicy::skipToNextProxy(this);
}

time_t ATTRegistrationPolicy::handleGeneralErrorFromOneProxy(ATTRegistrationPolicy *this, const ImsResult *a2)
{
  int v4 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 528))(this);
  uint64_t v5 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(ATTRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  if (v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"handleGeneralErrorFromOneProxy(emergency)...", 44);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    int v7 = (ImsOutStream *)(*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(ATTRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v7);
    SipRegistrationPolicy::printProxyErrors((uint64_t)this, v7, 2);
    if ((*(unsigned int (**)(ATTRegistrationPolicy *, void, void))(*(void *)this + 416))(this, 0, *((unsigned int *)a2 + 4)))
    {
      int v8 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 328))(this);
      return SipRegistrationPolicy::scheduleRetry(this, a2, 0, v8);
    }
    else
    {
      return -1;
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"handleGeneralErrorFromOneProxy(non-emergency)...", 48);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
}

uint64_t ATTRegistrationPolicy::handleGeneralErrorFromAllProxies(ATTRegistrationPolicy *this, const ImsResult *a2)
{
  int v4 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 528))(this);
  uint64_t v5 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(ATTRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  if (v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"handleGeneralErrorFromAllProxies(emergency)...", 46);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    int v7 = (ImsOutStream *)(*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(ATTRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v7);
    SipRegistrationPolicy::printProxyErrors((uint64_t)this, v7, 2);
    int v8 = *(uint64_t (**)(ATTRegistrationPolicy *, const ImsResult *))(*(void *)this + 144);
    return v8(this, a2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"handleGeneralErrorFromAllProxies(non-emergency)...", 50);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    return Rfc5626RegistrationPolicy::handleGeneralErrorFromAllProxies(this, a2);
  }
}

void ATTRegistrationPolicy::emergencyRegistrationTimeout(ATTRegistrationPolicy *this)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v13 = &unk_1F20B2680;
  uint64_t v14 = &_bambiDomain;
  int v15 = 1073741830;
  uint64_t v2 = *((void *)this + 55);
  if (v2) {
    BOOL v3 = v2 == *((void *)this + 56);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    ImsResult::operator=(v2 + 480 * *((void *)this + 58) + 408, (uint64_t)&v13);
  }
  ImsResult::~ImsResult((ImsResult *)&v13);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  int v4 = (ImsOutStream *)(*(uint64_t (**)(ATTRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(ATTRegistrationPolicy *, ImsOutStream *))(*(void *)this + 16))(this, v4);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v4, 2);
  if ((*(unsigned int (**)(ATTRegistrationPolicy *, void, uint64_t))(*(void *)this + 416))(this, 0, 408))
  {
    (*(void (**)(ATTRegistrationPolicy *))(*(void *)this + 504))(this);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = *((void *)this + 47);
        if (v8) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, 408);
        }
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  else
  {
    int v9 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        int v7 = v10;
        uint64_t v11 = *((void *)this + 47);
        if (v11)
        {
          long long v16 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          uint64_t v13 = &unk_1F20B2680;
          uint64_t v14 = &_bambiDomain;
          int v15 = 1073741842;
          uint64_t v12 = ImsResult::operator<<<char [31]>((uint64_t)&v13, "Emergency registration timeout");
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 88))(v11, v12);
          ImsResult::~ImsResult((ImsResult *)&v13);
        }
        goto LABEL_15;
      }
    }
  }
}

void sub_1C54A9438(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ATTRegistrationPolicy::isRegistrationRetryAllowed(SipRegistrationPolicy *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (IMSClientManager *)(*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 528))(a1);
  if (v6)
  {
    IMSClientManager::instance(v6);
    IPTelephonyManager::getInstance((uint64_t *)&__p);
    uint64_t v7 = *((void *)__p + 21);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 48);
    if (v8)
    {
      int v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *((void *)a1 + 47);
        if (v10)
        {
          if (v7)
          {
            uint64_t v37 = 0;
            char v38 = 0;
            (*(void (**)(void **__return_ptr))(*(void *)v10 + 136))(&__p);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v7 + 192))(&v37, v7, &__p);
            if (v36 < 0) {
              operator delete(__p);
            }
            if (v37)
            {
              if (*(unsigned char *)(v37 + 2680))
              {
                uint64_t v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
                (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v11);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"isRegistrationRetryAllowed(emergency) No: Roaming", 49);
                *(unsigned char *)(v11 + 17) = 0;
                uint64_t v12 = (unsigned char *)(v11 + 17);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                if (a3 == 408)
                {
                  int v22 = SipRegistrationPolicy::countOfProxiesWithErrors(a1);
                  uint64_t v23 = *(void *)a1;
                  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)a1 + 56) - *((void *)a1 + 55)) >> 5) == v22)
                  {
                    if ((*(unsigned int (**)(SipRegistrationPolicy *))(v23 + 528))(a1)) {
                      uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 280) + 16))(*((void *)a1 + 280), a2);
                    }
                    else {
                      uint64_t v18 = 1;
                    }
                    uint64_t v29 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
                    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v29);
                    uint64_t v30 = ImsOutStream::operator<<(v29, "isRegistrationRetryAllowed(emergency) ");
                    if (v18) {
                      uint64_t v31 = "Yes: ";
                    }
                    else {
                      uint64_t v31 = "No: ";
                    }
                    uint64_t v32 = ImsOutStream::operator<<(v30, v31);
                    uint64_t v33 = ImsOutStream::operator<<(v32, "RequestTimeout on all proxies. Default behavior");
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    uint64_t v12 = (unsigned char *)(v33 + 17);
                  }
                  else
                  {
                    uint64_t v24 = (*(uint64_t (**)(SipRegistrationPolicy *))(v23 + 64))(a1);
                    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v24);
                    uint64_t v25 = ImsOutStream::operator<<(v24, "isRegistrationRetryAllowed(emergency) Yes: RequestTimeout, still more proxy to try");
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    uint64_t v12 = (unsigned char *)(v25 + 17);
                    uint64_t v18 = 1;
                  }
                  goto LABEL_29;
                }
                if (a3 != 403)
                {
                  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(void *)a1 + 528))(a1)) {
                    uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 280) + 16))(*((void *)a1 + 280), a2);
                  }
                  else {
                    uint64_t v18 = 1;
                  }
                  uint64_t v26 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
                  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v26);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"isRegistrationRetryAllowed(emergency, statusCode=", 49);
                  *(unsigned char *)(v26 + 17) = 0;
                  uint64_t v12 = (unsigned char *)(v26 + 17);
                  std::ostream::operator<<();
                  *(unsigned char *)(v26 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)") ", 2);
                  *(unsigned char *)(v26 + 17) = 0;
                  if (v18) {
                    std::locale v27 = "Yes: ";
                  }
                  else {
                    std::locale v27 = "No: ";
                  }
                  if (v18) {
                    uint64_t v28 = 5;
                  }
                  else {
                    uint64_t v28 = 4;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)v27, v28);
                  *(unsigned char *)(v26 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Default behavior", 16);
                  *(unsigned char *)(v26 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  goto LABEL_29;
                }
                uint64_t v21 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
                (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v21);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"isRegistrationRetryAllowed(emergency) No: Forbidden", 51);
                *(unsigned char *)(v21 + 17) = 0;
                uint64_t v12 = (unsigned char *)(v21 + 17);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
            }
            else
            {
              uint64_t v20 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
              (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v20);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"isRegistrationRetryAllowed(emergency) No: null SipStack", 55);
              *(unsigned char *)(v20 + 17) = 0;
              uint64_t v12 = (unsigned char *)(v20 + 17);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            uint64_t v18 = 0;
LABEL_29:
            unsigned char *v12 = 0;
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            goto LABEL_25;
          }
        }
      }
    }
    else
    {
      int v9 = 0;
    }
    uint64_t v17 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"isRegistrationRetryAllowed(emergency) No: null delegate or bambi", 64);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v18 = 0;
    uint64_t v13 = 0;
    *(unsigned char *)(v17 + 17) = 0;
    if (v9)
    {
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      return v18;
    }
  }
  else
  {
    if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(void *)a1 + 528))(a1)) {
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 280) + 16))(*((void *)a1 + 280), a2);
    }
    else {
      uint64_t v13 = 1;
    }
    uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"isRegistrationRetryAllowed(non-emergency) ", 42);
    *(unsigned char *)(v14 + 17) = 0;
    if (v13) {
      int v15 = "Yes: ";
    }
    else {
      int v15 = "No: ";
    }
    if (v13) {
      uint64_t v16 = 5;
    }
    else {
      uint64_t v16 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)v15, v16);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Default behavior", 16);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  return v13;
}

void sub_1C54A9D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void ATTRegistrationPolicy::~ATTRegistrationPolicy(ATTRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1F20D3BF0);
  JUMPOUT(0x1C878E320);
}

char *ATTRegistrationPolicy::name(ATTRegistrationPolicy *this)
{
  return &ATTRegistrationPolicy::kPolicyName;
}

void non-virtual thunk to'ATTRegistrationPolicy::~ATTRegistrationPolicy(ATTRegistrationPolicy *this)
{
}

{
  uint64_t vars8;

  SipRegistrationPolicy::~SipRegistrationPolicy((ATTRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1F20D3BF0);
  JUMPOUT(0x1C878E320);
}

void *ims::toString<ims::SpamCategory>@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 0x13) {
    uint64_t v5 = "undefined";
  }
  else {
    uint64_t v5 = off_1E6511738[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void SpamCategoryMap::SpamCategoryMap(SpamCategoryMap *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  SpamCategoryMap::populateDefaultCategories((char **)this);
}

void sub_1C54A9EF0(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void SpamCategoryMap::populateDefaultCategories(char **this)
{
  uint64_t v2 = (char *)(this + 1);
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
  *this = v2;
  this[2] = 0;
  *(void *)uint64_t v2 = 0;
  int v3 = 3;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 3;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 4;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 4;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 5;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 5;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 6;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 6;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 7;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 7;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 8;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 8;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 9;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 9;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 10;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 10;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 11;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 11;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 12;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 12;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 13;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 13;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 14;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 14;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 15;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 15;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 16;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 16;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 17;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 17;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 18;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 18;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  int v3 = 19;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)std::string __p = *(_OWORD *)v4;
  uint64_t v7 = v5;
  v4[1] = 0;
  uint64_t v5 = 0;
  v4[0] = 0;
  int v8 = 19;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C54AA5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SpamCategoryMap::parseFromArray(uint64_t **a1, long long **a2)
{
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      memset(&v95, 0, sizeof(v95));
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v5 = *v2;
        v95.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v5;
      }
      std::string::basic_string[abi:ne180100]<0>(&v98, ";");
      ims::tokenize(&v95, &v91, (char *)&v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
    uint64_t v6 = v91;
    uint64_t v7 = v92;
    if (v91 != v92)
    {
      while (1)
      {
        memset(&__p, 0, sizeof(__p));
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v8 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        size_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        if (v10)
        {
          uint64_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          uint64_t v12 = memchr(v11, 58, v10);
          std::string::size_type v13 = v12 - (unsigned char *)v11;
          if (v12 && v13 != -1) {
            break;
          }
        }
LABEL_172:
        if (v9 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v6 += 24;
        if (v6 == v7) {
          goto LABEL_192;
        }
      }
      std::string::basic_string(&v98, &__p, 0, v13, (std::allocator<char> *)&v95);
      LODWORD(v94.__r_.__value_.__l.__data_) = 0;
      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
      int v15 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
      uint64_t v16 = (void *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v95;
      }
      else {
        uint64_t v17 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = &v98;
      }
      else {
        uint64_t v18 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      int v19 = strcasecmp((const char *)v17, (const char *)v18);
      int v20 = v19;
      if (v15 < 0)
      {
        operator delete(v16);
        if (v20)
        {
LABEL_33:
          LODWORD(v94.__r_.__value_.__l.__data_) = 2;
          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
          int v21 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
          int v22 = (void *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v95;
          }
          else {
            uint64_t v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v24 = &v98;
          }
          else {
            uint64_t v24 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          int v25 = strcasecmp((const char *)v23, (const char *)v24);
          int v26 = v25;
          if (v21 < 0)
          {
            operator delete(v22);
            if (v26)
            {
LABEL_41:
              LODWORD(v94.__r_.__value_.__l.__data_) = 3;
              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
              int v27 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
              uint64_t v28 = (void *)v95.__r_.__value_.__r.__words[0];
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v29 = &v95;
              }
              else {
                uint64_t v29 = (std::string *)v95.__r_.__value_.__r.__words[0];
              }
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v30 = &v98;
              }
              else {
                uint64_t v30 = (std::string *)v98.__r_.__value_.__r.__words[0];
              }
              int v31 = strcasecmp((const char *)v29, (const char *)v30);
              int v32 = v31;
              if (v27 < 0)
              {
                operator delete(v28);
                if (v32)
                {
LABEL_49:
                  LODWORD(v94.__r_.__value_.__l.__data_) = 4;
                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                  int v33 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                  uint64_t v34 = (void *)v95.__r_.__value_.__r.__words[0];
                  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v35 = &v95;
                  }
                  else {
                    std::string::size_type v35 = (std::string *)v95.__r_.__value_.__r.__words[0];
                  }
                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    char v36 = &v98;
                  }
                  else {
                    char v36 = (std::string *)v98.__r_.__value_.__r.__words[0];
                  }
                  int v37 = strcasecmp((const char *)v35, (const char *)v36);
                  int v38 = v37;
                  if (v33 < 0)
                  {
                    operator delete(v34);
                    if (v38)
                    {
LABEL_57:
                      LODWORD(v94.__r_.__value_.__l.__data_) = 5;
                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                      int v39 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                      uint64_t v40 = (void *)v95.__r_.__value_.__r.__words[0];
                      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string v41 = &v95;
                      }
                      else {
                        std::string v41 = (std::string *)v95.__r_.__value_.__r.__words[0];
                      }
                      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v42 = &v98;
                      }
                      else {
                        std::string::size_type v42 = (std::string *)v98.__r_.__value_.__r.__words[0];
                      }
                      int v43 = strcasecmp((const char *)v41, (const char *)v42);
                      int v44 = v43;
                      if (v39 < 0)
                      {
                        operator delete(v40);
                        if (v44)
                        {
LABEL_65:
                          LODWORD(v94.__r_.__value_.__l.__data_) = 6;
                          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                          int v45 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                          char v46 = (void *)v95.__r_.__value_.__r.__words[0];
                          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            char v47 = &v95;
                          }
                          else {
                            char v47 = (std::string *)v95.__r_.__value_.__r.__words[0];
                          }
                          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            long long v48 = &v98;
                          }
                          else {
                            long long v48 = (std::string *)v98.__r_.__value_.__r.__words[0];
                          }
                          int v49 = strcasecmp((const char *)v47, (const char *)v48);
                          int v50 = v49;
                          if (v45 < 0)
                          {
                            operator delete(v46);
                            if (v50)
                            {
LABEL_73:
                              LODWORD(v94.__r_.__value_.__l.__data_) = 7;
                              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                              int v51 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                              tm v52 = (void *)v95.__r_.__value_.__r.__words[0];
                              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                time_t v53 = &v95;
                              }
                              else {
                                time_t v53 = (std::string *)v95.__r_.__value_.__r.__words[0];
                              }
                              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                char v54 = &v98;
                              }
                              else {
                                char v54 = (std::string *)v98.__r_.__value_.__r.__words[0];
                              }
                              int v55 = strcasecmp((const char *)v53, (const char *)v54);
                              int v56 = v55;
                              if (v51 < 0)
                              {
                                operator delete(v52);
                                if (v56) {
                                  goto LABEL_81;
                                }
                              }
                              else if (v55)
                              {
LABEL_81:
                                LODWORD(v94.__r_.__value_.__l.__data_) = 8;
                                ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                int v57 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                long long v58 = (void *)v95.__r_.__value_.__r.__words[0];
                                if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  int v59 = &v95;
                                }
                                else {
                                  int v59 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                }
                                if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  uint64_t v60 = &v98;
                                }
                                else {
                                  uint64_t v60 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                }
                                int v61 = strcasecmp((const char *)v59, (const char *)v60);
                                int v62 = v61;
                                if (v57 < 0)
                                {
                                  operator delete(v58);
                                  if (v62) {
                                    goto LABEL_89;
                                  }
                                }
                                else if (v61)
                                {
LABEL_89:
                                  LODWORD(v94.__r_.__value_.__l.__data_) = 9;
                                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                  int v63 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                  int v64 = (void *)v95.__r_.__value_.__r.__words[0];
                                  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    uint64_t v65 = &v95;
                                  }
                                  else {
                                    uint64_t v65 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    uint64_t v66 = &v98;
                                  }
                                  else {
                                    uint64_t v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                  }
                                  int v67 = strcasecmp((const char *)v65, (const char *)v66);
                                  if (v63 < 0) {
                                    operator delete(v64);
                                  }
                                  if (v67)
                                  {
                                    LODWORD(v94.__r_.__value_.__l.__data_) = 10;
                                    ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                    int v68 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                    uint64_t v69 = (void *)v95.__r_.__value_.__r.__words[0];
                                    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                      std::string v70 = &v95;
                                    }
                                    else {
                                      std::string v70 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                    }
                                    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                      int v71 = &v98;
                                    }
                                    else {
                                      int v71 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                    }
                                    int v72 = strcasecmp((const char *)v70, (const char *)v71);
                                    if (v68 < 0) {
                                      operator delete(v69);
                                    }
                                    if (v72)
                                    {
                                      LODWORD(v94.__r_.__value_.__l.__data_) = 11;
                                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                      int v73 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                      unsigned __int8 v74 = (void *)v95.__r_.__value_.__r.__words[0];
                                      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                        int v75 = &v95;
                                      }
                                      else {
                                        int v75 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                      }
                                      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                        uint64_t v76 = &v98;
                                      }
                                      else {
                                        uint64_t v76 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                      }
                                      int v77 = strcasecmp((const char *)v75, (const char *)v76);
                                      if (v73 < 0) {
                                        operator delete(v74);
                                      }
                                      if (v77)
                                      {
                                        LODWORD(v94.__r_.__value_.__l.__data_) = 12;
                                        ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                        BOOL v78 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(v95.__r_.__value_.__l.__data_);
                                        }
                                        if (v78)
                                        {
                                          unsigned int v79 = 12;
                                        }
                                        else
                                        {
                                          LODWORD(v94.__r_.__value_.__l.__data_) = 13;
                                          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                          BOOL v80 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                            operator delete(v95.__r_.__value_.__l.__data_);
                                          }
                                          if (v80)
                                          {
                                            unsigned int v79 = 13;
                                          }
                                          else
                                          {
                                            LODWORD(v94.__r_.__value_.__l.__data_) = 14;
                                            ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                            BOOL v81 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                              operator delete(v95.__r_.__value_.__l.__data_);
                                            }
                                            if (v81)
                                            {
                                              unsigned int v79 = 14;
                                            }
                                            else
                                            {
                                              LODWORD(v94.__r_.__value_.__l.__data_) = 15;
                                              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                              BOOL v82 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                                operator delete(v95.__r_.__value_.__l.__data_);
                                              }
                                              if (v82)
                                              {
                                                unsigned int v79 = 15;
                                              }
                                              else
                                              {
                                                LODWORD(v94.__r_.__value_.__l.__data_) = 16;
                                                ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                BOOL v83 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                                  operator delete(v95.__r_.__value_.__l.__data_);
                                                }
                                                if (v83)
                                                {
                                                  unsigned int v79 = 16;
                                                }
                                                else
                                                {
                                                  LODWORD(v94.__r_.__value_.__l.__data_) = 17;
                                                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                  BOOL v84 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                                    operator delete(v95.__r_.__value_.__l.__data_);
                                                  }
                                                  if (v84)
                                                  {
                                                    unsigned int v79 = 17;
                                                  }
                                                  else
                                                  {
                                                    LODWORD(v94.__r_.__value_.__l.__data_) = 18;
                                                    ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                    BOOL v85 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                                      operator delete(v95.__r_.__value_.__l.__data_);
                                                    }
                                                    if (v85)
                                                    {
                                                      unsigned int v79 = 18;
                                                    }
                                                    else
                                                    {
                                                      LODWORD(v94.__r_.__value_.__l.__data_) = 19;
                                                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                      BOOL v86 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                                        operator delete(v95.__r_.__value_.__l.__data_);
                                                      }
                                                      if (v86) {
                                                        unsigned int v79 = 19;
                                                      }
                                                      else {
                                                        unsigned int v79 = 1;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        unsigned int v79 = 11;
                                      }
                                    }
                                    else
                                    {
                                      unsigned int v79 = 10;
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v79 = 9;
                                  }
                                  goto LABEL_168;
                                }
                                unsigned int v79 = 8;
LABEL_168:
                                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v98.__r_.__value_.__l.__data_);
                                }
                                memset(&v98, 0, sizeof(v98));
                                if (v79 >= 2)
                                {
                                  std::string::basic_string(&v95, &__p, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v94);
                                  std::string::basic_string[abi:ne180100]<0>(&v97, ",");
                                  ims::tokenize(&v95, (uint64_t *)&v98, (char *)&v97);
                                  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v97.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v95.__r_.__value_.__l.__data_);
                                  }
                                  std::string::size_type size = v98.__r_.__value_.__l.__size_;
                                  for (std::string::size_type i = v98.__r_.__value_.__r.__words[0]; i != size; i += 24)
                                  {
                                    memset(&v97, 0, sizeof(v97));
                                    if (*(char *)(i + 23) < 0)
                                    {
                                      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)i, *(void *)(i + 8));
                                    }
                                    else
                                    {
                                      long long v89 = *(_OWORD *)i;
                                      v97.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
                                      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v89;
                                    }
                                    ims::lowerCase((uint64_t)&v97, &v94);
                                    std::string v95 = v94;
                                    memset(&v94, 0, sizeof(v94));
                                    unsigned int v96 = v79;
                                    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>(a1, (void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&v95);
                                    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v95.__r_.__value_.__l.__data_);
                                    }
                                    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v94.__r_.__value_.__l.__data_);
                                    }
                                    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                                      operator delete(v97.__r_.__value_.__l.__data_);
                                    }
                                  }
                                }
                                v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
                                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                                char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                goto LABEL_172;
                              }
                              unsigned int v79 = 7;
                              goto LABEL_168;
                            }
                          }
                          else if (v49)
                          {
                            goto LABEL_73;
                          }
                          unsigned int v79 = 6;
                          goto LABEL_168;
                        }
                      }
                      else if (v43)
                      {
                        goto LABEL_65;
                      }
                      unsigned int v79 = 5;
                      goto LABEL_168;
                    }
                  }
                  else if (v37)
                  {
                    goto LABEL_57;
                  }
                  unsigned int v79 = 4;
                  goto LABEL_168;
                }
              }
              else if (v31)
              {
                goto LABEL_49;
              }
              unsigned int v79 = 3;
              goto LABEL_168;
            }
          }
          else if (v25)
          {
            goto LABEL_41;
          }
          unsigned int v79 = 2;
          goto LABEL_168;
        }
      }
      else if (v19)
      {
        goto LABEL_33;
      }
      unsigned int v79 = 0;
      goto LABEL_168;
    }
  }
LABEL_192:
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
}

void sub_1C54AAEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a25 = (void *)(v37 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (a14 < 0) {
    operator delete(a9);
  }
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SpamCategoryMap::SpamCategoryMap(uint64_t a1, long long **a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  SpamCategoryMap::parseFromArray((uint64_t **)a1, a2);
  return a1;
}

void sub_1C54AAFE4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t SpamCategoryMap::operator==(void *a1, void *a2)
{
  if (a1[2] == a2[2])
  {
    uint64_t v2 = a1 + 1;
    int v3 = (void *)*a1;
    if ((void *)*a1 == a1 + 1) {
      return 1;
    }
    uint64_t v4 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = *((unsigned __int8 *)v3 + 55);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v6 = v3[5];
      }
      uint64_t v7 = *((unsigned __int8 *)v4 + 55);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = v4[5];
      }
      if (v6 != v7) {
        break;
      }
      char v9 = (const void **)(v3 + 4);
      if (v8 >= 0) {
        size_t v10 = (unsigned __int8 *)(v4 + 4);
      }
      else {
        size_t v10 = (unsigned __int8 *)v4[4];
      }
      if ((v5 & 0x80) != 0)
      {
        BOOL v11 = memcmp(*v9, v10, v3[5]) == 0;
      }
      else
      {
        if (*((unsigned char *)v3 + 55))
        {
          while (*(unsigned __int8 *)v9 == *v10)
          {
            char v9 = (const void **)((char *)v9 + 1);
            ++v10;
            if (!--v5) {
              goto LABEL_17;
            }
          }
          return 0;
        }
LABEL_17:
        BOOL v11 = 1;
      }
      uint64_t result = 0;
      if (!v11 || *((_DWORD *)v3 + 14) != *((_DWORD *)v4 + 14)) {
        return result;
      }
      std::string::size_type v13 = (void *)v3[1];
      uint64_t v14 = v3;
      if (v13)
      {
        do
        {
          int v3 = v13;
          std::string::size_type v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v3 = (void *)v14[2];
          BOOL v15 = *v3 == (void)v14;
          uint64_t v14 = v3;
        }
        while (!v15);
      }
      uint64_t v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v4[2];
          BOOL v15 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }
        while (!v15);
      }
      uint64_t v4 = v17;
      if (v3 == v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t SpamCategoryMap::categoryForString(uint64_t a1, uint64_t a2)
{
  ims::lowerCase(a2, &__p);
  int v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void **)(a1 + 8) == v3) {
    return 1;
  }
  else {
    return *((unsigned int *)v3 + 14);
  }
}

void sub_1C54AB1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,ims::SpamCategory>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,ims::SpamCategory>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C54AB21C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,ims::SpamCategory>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ims::SpamCategory> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ims::SpamCategory> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  size_t v10 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C54AB3D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t **)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    uint64_t *result = (uint64_t)(result + 1);
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      int v8 = *(void **)(v6 + 8);
    }
    else {
      int v8 = (void *)v6;
    }
    uint64_t v18 = result;
    int v19 = v8;
    int v20 = v8;
    if (v8)
    {
      int v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          size_t v10 = v20;
          uint64_t v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v17, leaf_high, v10);
          int v8 = v19;
          int v20 = v19;
          if (v19) {
            int v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v18 = 0;
      int v19 = 0;
      int v20 = 0;
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>((uint64_t)v5, (uint64_t)(a2 + 4), &v18);
      uint64_t v17 = 0;
      uint64_t v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      uint64_t result = std::__tree<unsigned int>::__insert_node_at(v5, v17, v14, v18);
      BOOL v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)a2[2];
          BOOL v13 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1C54AB600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = operator new(0x40uLL);
    v7[2] = *(_OWORD *)a3;
    *((void *)v7 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a3 + 24);
    uint64_t v8 = v9;
    return std::__tree<unsigned int>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

BOOL SipEmergencyRegistrationPolicy::isRegistrationRetryAllowed(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 10)) {
    return 1;
  }
  if (a2 == 2) {
    return *(unsigned char *)(a1 + 11) != 0;
  }
  return 0;
}

uint64_t SipRegistrationPolicy::SipRegistrationPolicy(uint64_t a1, uint64_t *a2, std::__shared_weak_count **a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.reg");
  uint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *a3;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  ((void (*)(std::string *__return_ptr))v6->__vftable[3].__on_zero_shared)(&__p);
  ImsLogContainer::ImsLogContainer(a1, &__str, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = a2[1];
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 104 + *(void *)(v8 - 4IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 8)) = a2[2];
  *(unsigned char *)(a1 + 116) = 1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = &unk_1F20D4598;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 104) = a2[3];
  *(void *)(a1 + *(void *)(v9 - 24)) = a2[4];
  *(void *)(a1 + 184) = &unk_1F20D4508;
  *(_OWORD *)(a1 + 208) = xmmword_1C56D6080;
  *(_DWORD *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 228) = 1;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 232));
  *(void *)(a1 + 376) = *a3;
  size_t v10 = a3[1];
  *(void *)(a1 + 384) = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = -1;
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 488));
  *(unsigned char *)(a1 + 2160) = 0;
  *(void *)(a1 + 2176) = 0;
  *(_DWORD *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2168) = &unk_1F20B7E20;
  *(void *)(a1 + 2232) = 0;
  *(_WORD *)(a1 + 2248) = 0;
  *(void *)(a1 + 2256) = &unk_1F20E3DD0;
  *(void *)(a1 + 2280) = 0;
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = a1 + 2272;
  *(void *)(a1 + 2288) = &unk_1F20E3DD0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2296) = a1 + 2304;
  *(void *)(a1 + 2320) = &unk_1F20E3DD0;
  *(void *)(a1 + 2336) = 0;
  *(void *)(a1 + 2344) = 0;
  *(void *)(a1 + 2328) = a1 + 2336;
  *(unsigned char *)(a1 + 2352) = 0;
  *(_DWORD *)(a1 + 2356) = 0;
  *(void *)(a1 + 2240) = 0;
  BOOL v11 = a3[1];
  if (v11)
  {
    BOOL v11 = std::__shared_weak_count::lock(v11);
    uint64_t v12 = v11;
    if (v11) {
      BOOL v11 = *a3;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  ((void (*)(std::string *__return_ptr))v11->__vftable[3].__on_zero_shared)(&__str);
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 304), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  *(void *)(a1 + 336) = a1 + *(void *)(*(void *)a1 - 24);
  *(_DWORD *)(a1 + 432) = SipRegistrationMode::kModeNormal;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = -1;
  *(unsigned char *)(a1 + 2352) = 0;
  SipLockable::useBlockQueue((SipLockable *)(a1 + 104));
  return a1;
}

void sub_1C54ABBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void **a12, uint64_t a13, void *a14, SipBackoffTimer *a15, void **a16, SipTimerContainer *a17, uint64_t *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *uint64_t v34 = v36;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v30 + 2328, *v32);
  *a11 = v35;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v30 + 2296, *v33);
  *a14 = a13;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v30 + 2264, *a12);
  SipBackoffTimer::~SipBackoffTimer(a15);
  SipRegistrationConfig::~SipRegistrationConfig(a16);
  std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  uint64_t v37 = *(std::__shared_weak_count **)(v30 + 384);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  SipTimerContainer::~SipTimerContainer(a17);
  int v38 = *(std::__shared_weak_count **)(v30 + 200);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  SipLockable::~SipLockable(v31, a18);
  ImsLogContainer::~ImsLogContainer((void **)v30);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::~SipRegistrationPolicy(SipRegistrationPolicy *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  uint64_t v5 = (SipRegistrationPolicy *)((char *)this + 104);
  *((void *)this + 13) = a2[3];
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[4];
  *((void *)this + SipRegistrationClient::handlePathSatisfied(this - 23) = &unk_1F20D4508;
  uint64_t v6 = *((void *)this + 280);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 290) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2328, *((void **)this + 292));
  *((void *)this + 286) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2296, *((void **)this + 288));
  *((void *)this + 282) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2264, *((void **)this + 284));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationPolicy *)((char *)this + 2168));
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 61);
  uint64_t v9 = (void **)((char *)this + 440);
  std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  SipTimerContainer::~SipTimerContainer((SipRegistrationPolicy *)((char *)this + 232));
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  SipLockable::~SipLockable(v5, a2 + 1);
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void SipRegistrationPolicy::loggableName(SipRegistrationPolicy *this@<X0>, std::string *a2@<X8>)
{
  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(void *)this + 528))(this))
  {
    uint64_t v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 384))(this);
    uint64_t v5 = (char *)v4;
    if (*(char *)(v4 + 23) >= 0) {
      size_t v6 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      size_t v6 = *(void *)(v4 + 8);
    }
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 30);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (v5[23] >= 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = *(char **)v5;
      }
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, " RegistrationPolicy(EMERGENCY)");
    LoggableString::LoggableString(a2, &__p);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 384))(this);
    size_t v10 = (char *)v9;
    if (*(char *)(v9 + 23) >= 0) {
      size_t v11 = *(unsigned __int8 *)(v9 + 23);
    }
    else {
      size_t v11 = *(void *)(v9 + 8);
    }
    memset(&__p, 0, sizeof(__p));
    uint64_t v12 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if (v10[23] >= 0) {
        BOOL v13 = v10;
      }
      else {
        BOOL v13 = *(char **)v10;
      }
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, " RegistrationPolicy");
    LoggableString::LoggableString(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54AC110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipRegistrationPolicy::loggableName(SipRegistrationPolicy *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t SipRegistrationPolicy::terminationLocksReleased(SipRegistrationPolicy *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 280))();
}

uint64_t non-virtual thunk to'SipRegistrationPolicy::terminationLocksReleased(SipRegistrationPolicy *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 13) + 280))();
}

uint64_t SipRegistrationPolicy::initialize(SipRegistrationPolicy *this)
{
  *((unsigned char *)this + 228) = 1;
  *((_DWORD *)this + 56) = 0;
  (*(void (**)(SipRegistrationPolicy *))(*(void *)this + 192))(this);
  *((unsigned char *)this + 2352) = 1;
  return 1;
}

void SipRegistrationPolicy::deinitialize(SipRegistrationPolicy *this)
{
  SipTimerContainer::cancelAllTimers((SipRegistrationPolicy *)((char *)this + 232));
  std::string::basic_string[abi:ne180100]<0>(v6, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"flushing pending blocks", 23);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  int v3 = (ImsBlockQueue *)*((void *)this + 21);
  if (v3) {
    ImsBlockQueue::clearBlocks(v3, 0);
  }
  *((unsigned char *)this + 2352) = 0;
}

void sub_1C54AC2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::updateNextRetryTime(void *a1, ims *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v6);
  char v7 = *(void **)(v6 + 8);
  if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"setting nextRetryTime to ", 25);
    *(unsigned char *)(v6 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(a2, v6, v8);
    char v7 = *(void **)(v6 + 8);
    uint64_t v9 = " due to ";
    uint64_t v10 = 8;
  }
  else
  {
    uint64_t v9 = "clearing nextRetryTime due to ";
    uint64_t v10 = 30;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  a1[49] = a2;
  return result;
}

uint64_t SipRegistrationPolicy::isRegistrationRetryAllowed(void **a1)
{
  if (!((unsigned int (*)(void **))(*a1)[66])(a1)) {
    return 1;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*a1[280] + 16);
  return v2();
}

uint64_t SipRegistrationPolicy::useNextProxy(SipRegistrationPolicy *this)
{
  return *((unsigned __int8 *)this + 228);
}

time_t SipRegistrationPolicy::startTimer(SipRegistrationPolicy *this)
{
  std::string v20[4] = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 49)) {
    return -1;
  }
  time_t v2 = time(0);
  uint64_t v3 = *((void *)this + 49);
  time_t v4 = v3 - v2;
  if (v3 <= v2)
  {
    uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"startTimer: nextRetryTime has passed. Retrying immediately.", 59);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    LoggableString::LoggableString((LoggableString *)__p, "retryRegistration");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (void *)this + 24);
    if (v14) {
      uint64_t v10 = v14 + 104;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v16 = v10;
    uint64_t v17 = v15;
    uint64_t v14 = 0;
    BOOL v15 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    std::string::size_type v13[2] = ___ZN21SipRegistrationPolicy10startTimerEv_block_invoke;
    void v13[3] = &__block_descriptor_tmp_17;
    v13[4] = this;
    SipLockable::performBlock((uint64_t)this + 104, (uint64_t)__p, &v16, (uint64_t)v13);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 32))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"will attempt registration at ", 29);
    *(unsigned char *)(v5 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v5, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v8 = *((void *)this + 24);
    char v7 = (std::__shared_weak_count *)*((void *)this + 25);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (*((unsigned char *)this + 2160))
      {
LABEL_19:
        std::__shared_weak_count::__release_weak(v7);
        std::__shared_weak_count::__release_weak(v7);
        return v4;
      }
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else if (*((unsigned char *)this + 2160))
    {
      return v4;
    }
    size_t v11 = operator new(0x20uLL);
    *size_t v11 = &unk_1F20D45B0;
    v11[1] = this;
    void v11[2] = v8;
    v11[3] = v7;
    v20[3] = v11;
    SipTimerContainer::startTimer((int8x8_t *)this + 29, (uint64_t)"ThrottleTimer");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v20);
    if (v7) {
      goto LABEL_19;
    }
  }
  return v4;
}

void sub_1C54AC830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v25 - 72));
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(a1);
}

void ___ZN21SipRegistrationPolicy10startTimerEv_block_invoke(uint64_t a1)
{
}

void SipRegistrationPolicy::retryRegistration(SipRegistrationPolicy *this)
{
  time_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *((void *)this + 47)) == 0)
  {
LABEL_7:
    uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"retryRegistration: no delegate", 30);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
  int v5 = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*((void *)this + 47));
  uint64_t v6 = *(void *)this;
  if (v5)
  {
    uint64_t v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(v6 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"retryRegistration: registration already in progress", 51);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  else if ((*(unsigned int (**)(SipRegistrationPolicy *))(v6 + 432))(this))
  {
    uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"retryRegistration: waiting for calls started on proxy ", 54);
    *(unsigned char *)(v9 + 17) = 0;
    SipRegistrationPolicy::lastRegisteredProxyUriString((SipRegistrationPolicy *)v14, this);
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" to end before attempting registration with ", 44);
    *(unsigned char *)(v9 + 17) = 0;
    SipRegistrationPolicy::currentProxyUriString((SipRegistrationPolicy *)__p, this);
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    *((unsigned char *)this + 2248) = 1;
  }
  else
  {
    *((unsigned char *)this + 2248) = 0;
    if (*((void *)this + 49) <= time(0))
    {
      SipRegistrationPolicy::clearAllThrottling((ims **)this);
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else
    {
      uint64_t v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"retryRegistration: we are throttled until ", 42);
      *(unsigned char *)(v10 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v10, v11);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      SipRegistrationPolicy::startTimer(this);
    }
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1C54ACD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::startingRegistration(SipRegistrationPolicy *this)
{
  time_t v2 = time(0);
  uint64_t v3 = *(void *)this;
  if (*((void *)this + 49) <= v2)
  {
    if ((*(unsigned int (**)(SipRegistrationPolicy *))(v3 + 432))(this))
    {
      uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"waiting for calls started on proxy ", 35);
      *(unsigned char *)(v8 + 17) = 0;
      SipRegistrationPolicy::lastRegisteredProxyUriString((SipRegistrationPolicy *)__p, this);
      (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to end before attempting registration with ", 44);
      *(unsigned char *)(v8 + 17) = 0;
      SipRegistrationPolicy::currentProxyUriString((SipRegistrationPolicy *)v26, this);
      (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, v26);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = 0;
      *((unsigned char *)this + 2248) = 1;
    }
    else
    {
      *((unsigned char *)this + 2248) = 0;
      uint64_t v9 = *((void *)this + 49);
      uint64_t v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v10);
      size_t v11 = *(void **)(v10 + 8);
      if (v9)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"registration throttling expired at ", 35);
        *(unsigned char *)(v10 + 17) = 0;
        ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v10, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)".  Ok to retry registration.", 28);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "ThrottlingExpired");
        SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        *((void *)this + 50) = 0;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"there is currently no registration throttling.  Ok to retry registration.", 73);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
      }
      SipTimerContainer::cancelAllTimers((SipRegistrationPolicy *)((char *)this + 232));
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      __p[1] = &_bambiDomain;
      int v21 = 0;
      uint64_t v6 = (*(unsigned int (**)(uint64_t *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(_bambiDomain + 24))(&_bambiDomain, 0, v13, v14, v15, v16, v17, v18, &unk_1F20B2680) ^ 1;
      ImsResult::~ImsResult((ImsResult *)__p);
    }
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(v3 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"waiting for next allowed registration retry at ", 47);
    *(unsigned char *)(v4 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v4, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v6 = 0;
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 30, "ThrottleTimer"))
    {
      uint64_t v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"ThrottleTimer is not active. Start it now... ", 45);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      SipRegistrationPolicy::startTimer(this);
      return 0;
    }
  }
  return v6;
}

void sub_1C54AD2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::lastRegisteredProxyUriString(SipRegistrationPolicy *this, void *a2)
{
  unint64_t v2 = a2[60];
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v3 = a2[55], v2 >= 0xEEEEEEEEEEEEEEEFLL * ((a2[56] - v3) >> 5))) {
    std::string::basic_string[abi:ne180100]<0>(this, "(none)");
  }
  else {
    SipUri::asString(v3 + 480 * v2, this);
  }
}

void SipRegistrationPolicy::currentProxyUriString(SipRegistrationPolicy *this, void *a2)
{
  uint64_t v2 = a2[55];
  if (v2) {
    BOOL v3 = v2 == a2[56];
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    std::string::basic_string[abi:ne180100]<0>(this, "(none)");
  }
  else {
    SipUri::asString(v2 + 480 * a2[58], this);
  }
}

void SipRegistrationPolicy::startEmergencyRegistrationTimer(int8x8_t *this)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(int8x8_t *))(*(void *)this + 528))(this)
    && ((*(uint64_t (**)(void, void))(**(void **)&this[280] + 16))(*(void *)&this[280], 0) & 1) == 0)
  {
    int v2 = *(_DWORD *)(*(void *)&this[280] + 12);
    int8x8_t v4 = this[24];
    BOOL v3 = (std::__shared_weak_count *)this[25];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!v2)
      {
LABEL_8:
        std::__shared_weak_count::__release_weak(v3);
        std::__shared_weak_count::__release_weak(v3);
        return;
      }
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else if (!v2)
    {
      return;
    }
    int v5 = operator new(0x20uLL);
    *int v5 = &unk_1F20D4630;
    v5[1] = this;
    void v5[2] = v4;
    v5[3] = v3;
    void v6[3] = v5;
    SipTimerContainer::startTimer(this + 29, (uint64_t)&SipRegistrationPolicy::kEmergencyRegistrationTimer);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v6);
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
}

void sub_1C54AD508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::initialRegisterRequestSent(SipRegistrationPolicy *this)
{
  *((void *)this + 59) = *((void *)this + 58);
  time_t v2 = time(0);
  *((void *)this + 50) = v2;
  BOOL v3 = (ims *)(*((void *)this + 185) + v2);
  std::string::basic_string[abi:ne180100]<0>(__p, "SentInitialRegister");
  SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"sent initial REGISTER. No new registrations allowed until ", 58);
  *(unsigned char *)(v4 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v4, v5);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  SipRegistrationPolicy::startEmergencyRegistrationTimer((int8x8_t *)this);
}

void sub_1C54AD678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::authChallengeReceived(SipRegistrationPolicy *this)
{
  time_t result = time(0);
  BOOL v3 = (ims *)(*((void *)this + 185) + result);
  if (*((void *)this + 49) < (uint64_t)v3)
  {
    time_t v4 = result;
    std::string::basic_string[abi:ne180100]<0>(__p, "AuthChallengeReceived");
    SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    *((void *)this + 50) = v4;
    uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"received 401 response. No new registrations allowed until ", 58);
    *(unsigned char *)(v5 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v5, v6);
    time_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
  }
  return result;
}

void sub_1C54AD7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::endingRegistration(SipRegistrationPolicy *this)
{
}

void SipRegistrationPolicy::clearFailureFlags(SipRegistrationPolicy *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"clearing registration failure flags", 35);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ClearFailureFlags");
  SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 50) = 0;
  SipRegistrationPolicy::clearLastProxyErrors(this);
}

void sub_1C54AD908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::clearLastProxyErrors(SipRegistrationPolicy *this)
{
  uint64_t v1 = *((void *)this + 55);
  if (*((void *)this + 56) != v1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 408;
    do
    {
      long long v7 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      v5[0] = &unk_1F20B2680;
      v5[1] = &_bambiDomain;
      int v6 = 0;
      ImsResult::operator=(v1 + v4, (uint64_t)v5);
      ImsResult::~ImsResult((ImsResult *)v5);
      ++v3;
      uint64_t v1 = *((void *)this + 55);
      v4 += 480;
    }
    while (v3 < 0xEEEEEEEEEEEEEEEFLL * ((*((void *)this + 56) - v1) >> 5));
  }
}

void sub_1C54AD9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::clearAllThrottling(ims **this)
{
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(this + 29));
  if (this[49])
  {
    uint64_t v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
    (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"clearing throttling timer, previously set for ", 46);
    *(unsigned char *)(v2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(this[49], v2, v3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "ClearAllThrottling");
    SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    this[50] = 0;
  }
  *((unsigned char *)this + 2248) = 0;
}

void sub_1C54ADB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::scheduleRetry(SipRegistrationPolicy *this, const ImsResult *a2, uint64_t a3, int a4)
{
  time_t v7 = time(0);
  uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"scheduleRetry: now is ", 22);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (a4) {
    (*(void (**)(SipRegistrationPolicy *))(*(void *)this + 504))(this);
  }
  uint64_t v9 = *(void *)this;
  if (a3)
  {
    uint64_t v10 = "scheduleRetry: set retryInterval = ";
  }
  else
  {
    a3 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 208))(this);
    uint64_t v9 = *(void *)this;
    uint64_t v10 = "scheduleRetry: got retryInterval = ";
  }
  uint64_t v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(v9 + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v10, 35);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v12 = *((void *)this + 51);
  if (v12)
  {
    time_t v13 = *((void *)this + 52) + v12;
    uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"scheduleRetry: barringEndAt ", 28);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    BOOL v15 = v13 <= v7;
    uint64_t v16 = v13 - v7;
    if (!v15)
    {
      uint64_t v17 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"scheduleRetry: retryIntervalOfBarring = ", 40);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v16 <= a3)
      {
        *((void *)this + 53) = 0;
      }
      else
      {
        *((void *)this + 53) = v16 - a3;
        uint64_t v18 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"scheduleRetry: barring time is longer than the original retry interval: set retryInterval = ", 92);
        *(unsigned char *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        a3 = v16;
      }
    }
  }
  char v19 = (ims *)(a3 + v7);
  if (*((void *)this + 49) >= (uint64_t)v19)
  {
    uint64_t v20 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"keeping old retry time", 22);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
  }
  else
  {
    *((void *)this + 50) = v7;
    std::string::basic_string[abi:ne180100]<0>(__p, "ScheduleRetry");
    SipRegistrationPolicy::updateNextRetryTime(this, v19, (uint64_t)__p);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v21 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"registration retry is scheduled for ", 36);
  *(unsigned char *)(v21 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v21, v22);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  return SipRegistrationPolicy::startTimer(this);
}

void sub_1C54AE1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::handleBarringAccessAlleviated(SipRegistrationPolicy *this)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 30, (unsigned __int8 *)&kThrottleTimer)|| *((uint64_t *)this + 49) <= 0)
  {
    uint64_t v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v13);
    uint64_t v14 = *(void **)(v13 + 8);
    BOOL v15 = "handleBarringAccessAlleviated: no-op: registration is currently not being throttled";
    uint64_t v16 = 83;
LABEL_9:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    *(unsigned char *)(v13 + 17) = 0;
    time_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    return result;
  }
  if (!*((void *)this + 51))
  {
    uint64_t v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v13);
    uint64_t v14 = *(void **)(v13 + 8);
    BOOL v15 = "handleBarringAccessAlleviated: no-op: registration barring is not active";
    uint64_t v16 = 72;
    goto LABEL_9;
  }
  uint64_t v2 = *((void *)this + 53);
  uint64_t v3 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"handleBarringAccessAlleviated: retryIntervalExtendedByBarring=", 62);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  if (!v2)
  {
    uint64_t v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v13);
    uint64_t v14 = *(void **)(v13 + 8);
    BOOL v15 = "handleBarringAccessAlleviated: no-op: registration barring did not add extra wait time";
    uint64_t v16 = 86;
    goto LABEL_9;
  }
  uint64_t v4 = (ims *)(*((void *)this + 49) - v2);
  uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleBarringAccessAlleviated: existing nextRetryTime=", 54);
  *(unsigned char *)(v5 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v5, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleBarringAccessAlleviated: actual nextRetryTime=", 52);
  *(unsigned char *)(v7 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(v4, v7, v8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  SipTimerContainer::cancelTimer((int8x8_t *)this + 29, &kThrottleTimer);
  uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"handleBarringAccessAlleviated: canceled current ThrottleTimer", 61);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ScheduleRetry");
  SipRegistrationPolicy::updateNextRetryTime(this, v4, (uint64_t)__p);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleBarringAccessAlleviated: adjusted and scheduled registration retry for ", 77);
  *(unsigned char *)(v10 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v10, v11);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  return SipRegistrationPolicy::startTimer(this);
}

void sub_1C54AE79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::emergencyRegistrationTimeout(SipRegistrationPolicy *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 47);
      if (v5)
      {
        long long v9 = 0u;
        long long v10 = 0u;
        long long v11 = 0u;
        v7[0] = &unk_1F20B2680;
        v7[1] = &_bambiDomain;
        int v8 = 1073741842;
        uint64_t v6 = ImsResult::operator<<<char [31]>((uint64_t)v7, "Emergency registration timeout");
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, v6);
        ImsResult::~ImsResult((ImsResult *)v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54AE888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v6 != 13) {
    goto LABEL_12;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "ThrottleTimer", v5)) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)a1 + 64))(a1);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"registration throttling timer fired", 35);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    SipRegistrationPolicy::retryRegistration(a1);
    return;
  }
  if (!a2[23]) {
    goto LABEL_24;
  }
  uint64_t v7 = "ThrottleTimer";
  int v8 = a2;
  uint64_t v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    ++v7;
    if (!--v9) {
      goto LABEL_24;
    }
  }
LABEL_12:
  uint64_t v10 = qword_1EBBDB2D0;
  if (byte_1EBBDB2DF >= 0) {
    uint64_t v10 = byte_1EBBDB2DF;
  }
  if (v6 != v10) {
    goto LABEL_28;
  }
  if (byte_1EBBDB2DF >= 0) {
    long long v11 = &SipRegistrationPolicy::kSubscriptionRetryTimerName;
  }
  else {
    long long v11 = (uint64_t *)SipRegistrationPolicy::kSubscriptionRetryTimerName;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v2, v11, v5)) {
      goto LABEL_28;
    }
LABEL_43:
    char v18 = (std::__shared_weak_count *)*((void *)a1 + 48);
    if (v18)
    {
      char v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *((void *)a1 + 47);
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 96))(v21);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    return;
  }
  if (!v4) {
    goto LABEL_43;
  }
  uint64_t v12 = v2;
  while (*v12 == *(unsigned __int8 *)v11)
  {
    ++v12;
    long long v11 = (uint64_t *)((char *)v11 + 1);
    if (!--v4) {
      goto LABEL_43;
    }
  }
LABEL_28:
  if (!(*(unsigned int (**)(SipRegistrationPolicy *))(*(void *)a1 + 528))(a1)) {
    return;
  }
  uint64_t v14 = v2[23];
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v2[23];
  }
  else {
    uint64_t v15 = *((void *)v2 + 1);
  }
  uint64_t v16 = qword_1EBBDB2B8;
  if (byte_1EBBDB2C7 >= 0) {
    uint64_t v16 = byte_1EBBDB2C7;
  }
  if (v15 != v16) {
    return;
  }
  if (byte_1EBBDB2C7 >= 0) {
    uint64_t v17 = &SipRegistrationPolicy::kEmergencyRegistrationTimer;
  }
  else {
    uint64_t v17 = (uint64_t *)SipRegistrationPolicy::kEmergencyRegistrationTimer;
  }
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v2, v17, *((void *)v2 + 1))) {
      return;
    }
    goto LABEL_52;
  }
  if (!v2[23])
  {
LABEL_52:
    char v22 = *(void (**)(SipRegistrationPolicy *))(*(void *)a1 + 96);
    v22(a1);
    return;
  }
  while (*v2 == *(unsigned __int8 *)v17)
  {
    ++v2;
    uint64_t v17 = (uint64_t *)((char *)v17 + 1);
    if (!--v14) {
      goto LABEL_52;
    }
  }
}

void sub_1C54AEBFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
}

time_t SipRegistrationPolicy::handleNonSipError(SipRegistrationPolicy *this, const ImsResult *a2, int a3)
{
  uint64_t v4 = *(void *)this;
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(v4 + 64))(this, a2);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleNonSipError(causedByUAC): scheduleRetry(preferredRetryInterval=", 69);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", useNextProxy=false)", 21);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v7 = *((void *)this + 51);
    return SipRegistrationPolicy::scheduleRetry(this, v6, v7, 0);
  }
  else if ((*(unsigned int (**)(SipRegistrationPolicy *, void, uint64_t))(v4 + 416))(this, 0, 200))
  {
    return SipRegistrationPolicy::handleGeneralError(this, a2);
  }
  else
  {
    return -1;
  }
}

uint64_t SipRegistrationPolicy::handleGeneralError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4 = *((void *)this + 55);
  if (v4) {
    BOOL v5 = v4 == *((void *)this + 56);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    ImsResult::operator=(v4 + 480 * *((void *)this + 58) + 408, (uint64_t)a2);
  }
  ++*((_DWORD *)this + 52);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  uint64_t v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handling general registration error #", 37);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (!*((unsigned char *)this + 228))
  {
    unsigned int v7 = *((_DWORD *)this + 52);
    unsigned int v8 = *((_DWORD *)this + 457);
    uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
    uint64_t v10 = *(void **)(v9 + 8);
    if (v7 <= v8)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"still have ", 11);
      *(unsigned char *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" more re-registration attempts", 30);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"too many re-registration errors. Next attempt will be an initial registration.", 78);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(SipRegistrationPolicy *))(*(void *)this + 256))(this);
    }
  }
  int v11 = SipRegistrationPolicy::countOfProxiesWithErrors(this);
  unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 56) - *((void *)this + 55)) >> 5);
  uint64_t v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v13);
  uint64_t v14 = *(void **)(v13 + 8);
  if (v12 == v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"received general errors from all proxies", 40);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    uint64_t v15 = *(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(void *)this + 152);
    uint64_t v16 = this;
    uint64_t v17 = a2;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"received general errors from ", 29);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" of ", 4);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" proxies", 8);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    uint64_t v15 = *(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(void *)this + 144);
    uint64_t v16 = this;
    uint64_t v17 = a2;
  }
  return v15(v16, v17);
}

BOOL SipRegistrationPolicy::isFatalError(SipRegistrationPolicy *this, int a2)
{
  uint64_t v3 = (char *)this + 2288;
  if (SipResponseCodeMap::empty((SipRegistrationPolicy *)((char *)this + 2288))) {
    return (a2 & 0xFFFFFFFD) == 400;
  }
  return SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

BOOL SipRegistrationPolicy::isForbiddenUserError(SipRegistrationPolicy *this, int a2)
{
  uint64_t v3 = (char *)this + 2320;
  if (SipResponseCodeMap::empty((SipRegistrationPolicy *)((char *)this + 2320))) {
    return (a2 - 403) < 2;
  }
  return SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

uint64_t SipRegistrationPolicy::isForbiddenCountryError(SipRegistrationPolicy *this, const SipResponse *a2)
{
  if (*((_DWORD *)a2 + 22) != 403) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  SipMessage::reasonText(a2, &__p);
  uint64_t v3 = (*(uint64_t (**)(SipRegistrationPolicy *, std::string *))(*(void *)this + 128))(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1C54AF3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRegistrationPolicy::isForbiddenCountryReasonText(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v2 = (const char *)a2;
  }
  else {
    uint64_t v2 = *(const char **)a2;
  }
  if (byte_1EBBDBA4F >= 0) {
    uint64_t v3 = (const char *)&kResponseServiceNotAllowedInThisLocation;
  }
  else {
    uint64_t v3 = (const char *)kResponseServiceNotAllowedInThisLocation;
  }
  return strcasecmp(v2, v3) == 0;
}

uint64_t SipRegistrationPolicy::isWifiAccessNetwork(SipRegistrationPolicy *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 47);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C54AF4A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleDeregistrationError(ims **this, uint64_t **a2)
{
  if (a2[1] == &_posixDomain) {
    goto LABEL_13;
  }
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (uint64_t **)v4[4];
  }
  while (v4);
  if (v5[1] == &_posixDomain)
  {
LABEL_13:
    uint64_t v6 = a2;
    do
    {
      unsigned int v7 = v6;
      uint64_t v6 = (uint64_t **)v6[4];
    }
    while (v6);
    if (ImsResultSet::containsResult((ImsResultSet *)(this + 250), *((_DWORD *)v7 + 4)))
    {
      uint64_t v8 = (*((uint64_t (**)(ims **))*this + 8))(this);
      (*((void (**)(ims **, uint64_t))*this + 2))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"clearing throttling due to socket error: ", 41);
      *(unsigned char *)(v8 + 17) = 0;
      ((void (*)(uint64_t **, uint64_t))(*a2)[2])(a2, v8);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      SipRegistrationPolicy::clearAllThrottling(this);
    }
  }
}

time_t SipRegistrationPolicy::handleRegistrationError(ims **this, const SipResponse *a2)
{
  if (((*((uint64_t (**)(ims **, void, void))*this + 52))(this, 0, *((unsigned int *)a2 + 22)) & 1) == 0)
  {
    SipRegistrationPolicy::clearAllThrottling(this);
    return -1;
  }
  uint64_t v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"wifi access network: ", 21);
  *(unsigned char *)(v4 + 17) = 0;
  (*((void (**)(ims **))*this + 17))(this);
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if ((*((unsigned int (**)(ims **))*this + 17))(this)
    && (*((unsigned int (**)(ims **, const SipResponse *))*this + 15))(this, a2))
  {
    uint64_t v5 = (*((uint64_t (**)(ims **))*this + 8))(this);
    (*((void (**)(ims **, uint64_t))*this + 2))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Forbidden Country Situation", 27);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    int v6 = *((_DWORD *)a2 + 22) == 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v15 = &unk_1F20B2680;
    uint64_t v16 = &_bambiDomain;
    int v17 = v6 << 30;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    time_t v7 = (*((uint64_t (**)(ims **, void **))*this + 22))(this, &v15);
LABEL_16:
    time_t v8 = v7;
    ImsResult::~ImsResult((ImsResult *)&v15);
    return v8;
  }
  if (!(*((unsigned int (**)(ims **, void))*this + 14))(this, *((unsigned int *)a2 + 22)))
  {
    *((_DWORD *)this + 54) = 0;
    if (*((_DWORD *)a2 + 22) == 423)
    {
      int v11 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
      if (v11)
      {
        unint64_t v12 = v11;
        SipResultDomain::makeResult(a2, (uint64_t)&v15);
        time_t v7 = SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)this, v13, v12[26], 0);
        goto LABEL_16;
      }
    }
    else if ((*((unsigned int (**)(ims **))*this + 13))(this))
    {
      int v14 = *((_DWORD *)a2 + 22) == 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v15 = &unk_1F20B2680;
      uint64_t v16 = &_bambiDomain;
      int v17 = v14 << 30;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      time_t v7 = (*((uint64_t (**)(ims **, void **))*this + 20))(this, &v15);
      goto LABEL_16;
    }
    SipResultDomain::makeResult(a2, (uint64_t)&v15);
    time_t v7 = SipRegistrationPolicy::handleGeneralError((SipRegistrationPolicy *)this, (const ImsResult *)&v15);
    goto LABEL_16;
  }
  uint64_t v9 = (uint64_t (*)(ims **, const SipResponse *))*((void *)*this + 21);
  return v9(this, a2);
}

void sub_1C54AFAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::handleMaxReRegistrationErrors(uint64_t this)
{
  *(unsigned char *)(this + 228) = 1;
  *(_DWORD *)(this + 224) = 0;
  return this;
}

uint64_t SipRegistrationPolicy::handleAuthChallengeError(ims **this, const ImsResult *a2)
{
  SipRegistrationPolicy::clearAllThrottling(this);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  v11[0] = &unk_1F20B2680;
  v11[1] = &_bambiDomain;
  int v12 = 1073741832;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v4 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)v11);
    if (v4 == 1073741832)
    {
      uint64_t v5 = (*((uint64_t (**)(ims **))*this + 8))(this);
      (*((void (**)(ims **, uint64_t))*this + 2))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"retrying on auth challenge sync failure", 39);
      *(unsigned char *)(v5 + 17) = 0;
      return 1;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)v11);
  }
  int v6 = this[55];
  if (v6 && v6 != this[56]) {
    ImsResult::operator=((uint64_t)v6 + 480 * (void)this[58] + 408, (uint64_t)a2);
  }
  int v7 = SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)this);
  time_t v8 = *this;
  if (0xEEEEEEEEEEEEEEEFLL * ((this[56] - this[55]) >> 5) == v7)
  {
    uint64_t v9 = (*((uint64_t (**)(ims **))v8 + 8))(this);
    (*((void (**)(ims **, uint64_t))*this + 2))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"received auth challenge error from all proxies", 46);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    (*((void (**)(ims **, const ImsResult *))*this + 19))(this, a2);
    return 0;
  }
  if ((*((unsigned int (**)(ims **))v8 + 41))(this)) {
    (*((void (**)(ims **))*this + 63))(this);
  }
  return 1;
}

uint64_t SipRegistrationPolicy::countOfProxiesWithErrors(SipRegistrationPolicy *this)
{
  uint64_t v1 = *((void *)this + 55);
  if (*((void *)this + 56) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(v4) = 0;
  uint64_t v5 = 424;
  do
  {
    uint64_t v4 = v4
       + (*(unsigned int (**)(void, void))(**(void **)(v1 + v5 - 8) + 24))(*(void *)(v1 + v5 - 8), *(unsigned int *)(v1 + v5));
    ++v3;
    uint64_t v1 = *((void *)this + 55);
    v5 += 480;
  }
  while (v3 < 0xEEEEEEEEEEEEEEEFLL * ((*((void *)this + 56) - v1) >> 5));
  return v4;
}

uint64_t SipRegistrationPolicy::retryTimeFromResult(SipRegistrationPolicy *this, const ImsResult *a2)
{
  if (*((uint64_t **)a2 + 1) != &SipResultDomain::_domain) {
    return -1;
  }
  if (!SipRegistrationConfig::honorRetryAfterForStatusCode((SipRegistrationPolicy *)((char *)this + 488), *((_DWORD *)a2 + 4)))return -1; {
  uint64_t v5 = SipResultDomain::responseFromResult(a2, v4);
  }
  if (!v5) {
    return -1;
  }
  int v6 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)v5);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Using Retry-After header value: ", 32);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  return v7[26];
}

time_t SipRegistrationPolicy::handleGeneralErrorFromOneProxy(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v3 = SipRegistrationPolicy::retryTimeFromResult(this, a2);
  if (v3 == -1) {
    uint64_t v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 208))(this);
  }
  else {
    uint64_t v4 = v3;
  }
  int v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 328))(this);
  uint64_t v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v6);
  if (v5)
  {
    int v7 = "time to switch proxies";
    uint64_t v8 = 22;
  }
  else
  {
    int v7 = "will try again with the same proxy.";
    uint64_t v8 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  return SipRegistrationPolicy::scheduleRetry(this, v9, v4, v5);
}

uint64_t SipRegistrationPolicy::handleGeneralErrorFromAllProxies(SipRegistrationPolicy *this, const ImsResult *a2)
{
  return (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(void *)this + 144))(this, a2);
}

time_t SipRegistrationPolicy::handleFatalError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v3 = *((void *)this + 55);
  if (v3) {
    BOOL v4 = v3 == *((void *)this + 56);
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    ImsResult::operator=(v3 + 480 * *((void *)this + 58) + 408, (uint64_t)a2);
  }
  ++*((_DWORD *)this + 53);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handling fatal registration error #", 35);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (*((unsigned char *)this + 523))
  {
    unsigned int v6 = *((_DWORD *)this + 53);
    unsigned int v7 = *((_DWORD *)this + 372);
    uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 48))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
    uint64_t v9 = *(void **)(v8 + 8);
    if (v6 >= v7)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"too many fatal registration errors.  Disabling IMS registration.", 64);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeDisabled);
      return -1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"received fatal registration response.  ", 39);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v10 = *(void **)(v8 + 8);
    int v11 = " more and you're done.";
    uint64_t v12 = 22;
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
    uint64_t v10 = *(void **)(v8 + 8);
    int v11 = "disabled mode is, uh, disabled. I'll keep retrying.";
    uint64_t v12 = 51;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  int v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 328))(this);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"this is a re-registration. Trying to use the same proxy.", 56);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  uint64_t v16 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 216))(this);
  return SipRegistrationPolicy::scheduleRetry(this, v15, v16, v13);
}

void SipRegistrationPolicy::setRegistrationMode(unsigned int *a1, unsigned int *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 48);
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5 || (uint64_t v6 = *((void *)a1 + 47)) == 0)
  {
LABEL_9:
    uint64_t v9 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 64))(a1);
    (*(void (**)(unsigned int *, uint64_t))(*(void *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"setRegistrationMode: no delegate", 32);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }
  if (a1[108] != *a2)
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 64))(a1);
    (*(void (**)(unsigned int *, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"changing registration mode from ", 32);
    *(unsigned char *)(v7 + 17) = 0;
    operator<<(v7, a1 + 108);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v7 + 17) = 0;
    operator<<(v7, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    a1[108] = *a2;
    (*(void (**)(unsigned int *))(*(void *)a1 + 192))(a1);
    if (a1[108] != SipRegistrationMode::kModeNormal)
    {
      uint64_t v8 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 64))(a1);
      (*(void (**)(unsigned int *, uint64_t))(*(void *)a1 + 16))(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"not resetting registration mode until we see one of these events: ", 66);
      *(unsigned char *)(v8 + 17) = 0;
      deviceEventsToString(a1[448]);
    }
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v6 + 32))(v6, a2);
  }
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C54B08A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::handleForbiddenCountry(SipRegistrationPolicy *this, const ImsResult *a2)
{
  return -1;
}

uint64_t SipRegistrationPolicy::handleWarningHeader()
{
  return 0;
}

time_t SipRegistrationPolicy::handleForbiddenUser(SipRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  SipResultDomain::makeResult(a2, (uint64_t)v23);
  uint64_t v4 = *((void *)this + 55);
  if (v4) {
    BOOL v5 = v4 == *((void *)this + 56);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    ImsResult::operator=(v4 + 480 * *((void *)this + 58) + 408, (uint64_t)v23);
  }
  *((unsigned char *)this + 228) = 1;
  *((_DWORD *)this + 56) = 0;
  ++*((_DWORD *)this + 54);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  uint64_t v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 224))(this);
  uint64_t v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handling consecutive forbidden/unknown user registration error #", 64);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (*((_DWORD *)this + 54) == *((_DWORD *)this + 55))
  {
    if (*((unsigned char *)this + 522) && *((_DWORD *)this + 108) != SipRegistrationMode::kModeLimitedAccess)
    {
      uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 48))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"received Forbidden/Unknown responses from all proxies.  Falling back to limited-access mode.", 92);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeLimitedAccess);
      time_t v15 = time(0);
      *((void *)this + 50) = v15;
      uint64_t v16 = *((void *)this + 185);
      std::string::basic_string[abi:ne180100]<0>(v25, "LimitedAccessThrottling");
      SipRegistrationPolicy::updateNextRetryTime(this, (ims *)(v16 + v15), (uint64_t)v25);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      SipRegistrationPolicy::setProxyOffset(this, 0);
      goto LABEL_22;
    }
    uint64_t v8 = *(void *)this;
    if (*((unsigned char *)this + 523))
    {
      uint64_t v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(v8 + 48))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"received Forbidden/Unknown responses from all proxies.  Disabling IMS registration.", 83);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeDisabled);
LABEL_22:
      time_t v17 = -1;
      goto LABEL_27;
    }
    uint64_t v18 = (*(uint64_t (**)(SipRegistrationPolicy *))(v8 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"disabled mode is, uh, disabled. I'll keep retrying.", 51);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
  }
  else
  {
    uint64_t v10 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
    if (v10 && *((unsigned char *)this + 2112)) {
      uint64_t v6 = v10[26];
    }
    int v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "Warning");
    if (v11)
    {
      uint64_t v12 = (const void *)*((void *)v11 + 5);
      if (v12)
      {
        if (v13)
        {
          if ((*(uint64_t (**)(SipRegistrationPolicy *, void *))(*(void *)this + 184))(this, v13)) {
            goto LABEL_22;
          }
        }
      }
    }
  }
  int v20 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 328))(this);
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"this is a re-registration. Trying to use the same proxy.", 56);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
  }
  time_t v17 = SipRegistrationPolicy::scheduleRetry(this, v19, v6, v20);
LABEL_27:
  ImsResult::~ImsResult((ImsResult *)v23);
  return v17;
}

void sub_1C54B0EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationPolicy::shouldWaitForCallsToEnd(SipRegistrationPolicy *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  BOOL v5 = 0;
  if (*((unsigned char *)this + 2145))
  {
    uint64_t v6 = *((void *)this + 47);
    if (v6) {
      BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)v6 + 120))(v6)
    }
        && (uint64_t v7 = *((void *)this + 60), v7 != -1)
        && *((void *)this + 58) != v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_1C54B0FD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleAllCallsEnded(SipRegistrationPolicy *this)
{
  if (*((unsigned char *)this + 2248))
  {
    *((unsigned char *)this + 2248) = 0;
    uint64_t v2 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"all calls have ended. Retrying registration.", 44);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    SipRegistrationPolicy::retryRegistration(this);
  }
}

uint64_t SipRegistrationPolicy::handleRegistrationChange(int8x8_t *a1, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)a2 + 40))(a2) == 2)
  {
    if ((*(unsigned int (**)(int8x8_t *))(*(void *)a1 + 528))(a1)) {
      SipTimerContainer::cancelTimer(a1 + 29, (std::string *)&SipRegistrationPolicy::kEmergencyRegistrationTimer);
    }
    if (((*(uint64_t (**)(void *))(*(void *)a2 + 48))(a2) & 1) == 0)
    {
      if (a1[28].i8[4]) {
        a1[28].i8[4] = 0;
      }
      else {
        ++a1[28].i32[0];
      }
      (*(void (**)(int8x8_t *))(*(void *)a1 + 192))(a1);
      a1[60] = a1[58];
    }
    return -1;
  }
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)a2 + 40))(a2) != 3) {
    return -1;
  }
  a1[28].i8[4] = 1;
  a1[28].i32[0] = 0;
  if (!v6) {
    return -1;
  }
  uint64_t v7 = v6;
  if (v6[60])
  {
    time_t Retry = SipRegistrationNotification::secondsUntilNextRetry((SipRegistrationNotification *)a2);
    time_t v9 = (time_t)a1[184];
    if (v9 >= Retry || v9 == 0) {
      time_t v11 = Retry;
    }
    else {
      time_t v11 = (time_t)a1[184];
    }
    if ((unint64_t)(Retry - 1) >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v12 = (uint64_t)a1[184];
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 336))(a1);
    int v15 = *((_DWORD *)v7 + 14);
    if (v13)
    {
      if (v15 != 21)
      {
        uint64_t v16 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
        (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"moving to next proxy due to registration change", 47);
        *(unsigned char *)(v16 + 17) = 0;
LABEL_33:
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        int v20 = 1;
LABEL_35:
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        v21[0] = &unk_1F20B2680;
        v21[1] = &_bambiDomain;
        int v22 = 1073741839;
        time_t v17 = SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)a1, v14, v12, v20);
        ImsResult::~ImsResult((ImsResult *)v21);
        return v17;
      }
    }
    else if (v15 == 2 && a1[269].i8[0])
    {
      uint64_t v19 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v19);
      uint64_t v16 = ImsOutStream::operator<<(v19, "moving to next proxy due to P-CSCF restoration");
      goto LABEL_33;
    }
    int v20 = 0;
    goto LABEL_35;
  }
  if ((*((_DWORD *)v6 + 14) - 3) > 1) {
    return -1;
  }
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)&a1[29]);
  time_t v17 = -1;
  if (*((_DWORD *)v7 + 14) == 3 && *a3 == 2) {
    SipRegistrationPolicy::clearAllThrottling((ims **)a1);
  }
  return v17;
}

void sub_1C54B14D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::printProxyErrors(uint64_t this, ImsOutStream *a2, int a3)
{
  uint64_t v3 = *(void *)(this + 440);
  uint64_t v4 = *(void *)(this + 448);
  if (v3 != v4)
  {
    size_t v6 = a3;
    uint64_t v7 = v3 + 408;
    do
    {
      std::string::basic_string[abi:ne180100](__p, v6, 32);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
      uint64_t v8 = v7 - 408;
      (*(void (**)(uint64_t, ImsOutStream *))(*(void *)(v7 - 408) + 40))(v7 - 408, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if ((*(unsigned int (**)(void, void))(**(void **)(v7 + 8) + 24))(*(void *)(v7 + 8), *(unsigned int *)(v7 + 16)))
      {
        (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v7 + 16))(v7, a2);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"no errors", 9);
        *((unsigned char *)a2 + 17) = 0;
      }
      this = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      v3 += 480;
      v7 += 480;
    }
    while (v8 + 480 != v4);
  }
  return this;
}

void sub_1C54B16A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::printPolicyInfo(SipRegistrationPolicy *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Initial reg:   ", 19);
  *((unsigned char *)a2 + 17) = 0;
  if (*((unsigned char *)this + 228)) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  if (*((unsigned char *)this + 228)) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v4, v5);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Re-reg count:  ", 19);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 50))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Last Throttle: ", 19);
    *((unsigned char *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), (uint64_t)a2, v6);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((void *)this + 49))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Next retry:    ", 19);
    *((unsigned char *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), (uint64_t)a2, v7);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Mode:                 ", 26);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v8 = operator<<((uint64_t)a2, (unsigned int *)this + 108);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)a2 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((_DWORD *)this + 52) || *((_DWORD *)this + 54) || *((_DWORD *)this + 53))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Policy failures: ", 21);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"      General:    ", 18);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"      Forbidden:  ", 18);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"      Fatal:      ", 18);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Last error from each proxy: ", 32);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    return SipRegistrationPolicy::printProxyErrors((uint64_t)this, a2, 6);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Policy failures: none", 25);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  return result;
}

uint64_t SipRegistrationPolicy::emergencyStateExited(SipRegistrationPolicy *this)
{
  uint64_t result = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 528))(this);
  if (result)
  {
    *((unsigned char *)this + 228) = 1;
    *((_DWORD *)this + 56) = 0;
  }
  return result;
}

void SipRegistrationPolicy::logPrefix(SipRegistrationPolicy *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 480))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54B1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::checkTimers(SipRegistrationPolicy *this, ims *a2)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 30, "ThrottleTimer"))return; {
  uint64_t v4 = *((void *)this + 49);
  }
  if (v4 < 1) {
    return;
  }
  uint64_t v5 = v4 - (void)a2;
  if (v4 <= (uint64_t)a2)
  {
    uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"oops, I slept through the last throttle time", 44);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    goto LABEL_12;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 50);
  if (v7 >= 1)
  {
    BOOL v8 = v4 <= v7;
    uint64_t v9 = v4 - v7;
    if (!v8)
    {
      uint64_t v10 = v9 * *((unsigned int *)this + 137) / 100;
      if (v10 >= *((unsigned int *)this + 138)) {
        uint64_t v10 = *((unsigned int *)this + 138);
      }
      uint64_t v6 = v10 & ~(v10 >> 63);
    }
  }
  uint64_t v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v11);
  uint64_t v12 = *(void **)(v11 + 8);
  if (v5 > v6)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"restarting timer on system wake. Next retry scheduled for ", 58);
    *(unsigned char *)(v11 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v11, v13);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
LABEL_12:
    SipRegistrationPolicy::startTimer(this);
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"registration throttling ends at ", 32);
  *(unsigned char *)(v11 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v11, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)", retrying now", 14);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "CheckTimers");
  SipRegistrationPolicy::updateNextRetryTime(this, a2, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  SipRegistrationPolicy::retryRegistration(this);
}

void sub_1C54B1F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::currentProxies(SipRegistrationPolicy *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v2 = *((void *)this + 55);
  uint64_t v3 = *((void *)this + 56);
  if (v2 != v3)
  {
    uint64_t v6 = 0;
    uint64_t v49 = a2 + 24;
    do
    {
      if (v6 == *((void *)this + 58))
      {
        unint64_t v7 = *(void *)(a2 + 32);
        BOOL v8 = *(char **)(a2 + 8);
        uint64_t v9 = *(unsigned char **)(a2 + 16);
        if (!v7)
        {
          uint64_t v10 = 2 * (v9 - v8) - 1;
          unint64_t v11 = v9 - v8;
          if (v9 == v8) {
            uint64_t v10 = 0;
          }
          if ((unint64_t)(v10 - *(void *)(a2 + 40)) < 0x10)
          {
            uint64_t v12 = *(char **)(a2 + 24);
            int v13 = *(char **)a2;
            uint64_t v14 = (uint64_t)&v12[-*(void *)a2];
            if (v11 >= v14)
            {
              if (v12 == v13) {
                unint64_t v15 = 1;
              }
              else {
                unint64_t v15 = v14 >> 2;
              }
              uint64_t v55 = v49;
              std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v49, v15);
              tm v52 = (char *)__p;
              time_t v53 = (char *)__p;
              char v54 = (char *)__p + 8 * v16;
              int v50 = operator new(0x1980uLL);
              std::__split_buffer<SipUri *>::push_back(&__p, &v50);
              char v17 = *(char **)(a2 + 8);
              uint64_t v18 = v53;
              uint64_t v19 = v17;
              if (v17 != *(char **)(a2 + 16))
              {
                do
                {
                  if (v18 == v54)
                  {
                    int64_t v20 = v52 - (unsigned char *)__p;
                    if (v52 <= __p)
                    {
                      if (v18 == __p) {
                        unint64_t v28 = 1;
                      }
                      else {
                        unint64_t v28 = (v18 - (unsigned char *)__p) >> 2;
                      }
                      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v55, v28);
                      int v31 = v52;
                      uint64_t v18 = &v29[8 * (v28 >> 2)];
                      uint64_t v32 = v53 - v52;
                      if (v53 != v52)
                      {
                        uint64_t v18 = &v29[8 * (v28 >> 2) + (v32 & 0xFFFFFFFFFFFFFFF8)];
                        uint64_t v33 = 8 * (v32 >> 3);
                        uint64_t v34 = &v29[8 * (v28 >> 2)];
                        do
                        {
                          uint64_t v35 = *(void *)v31;
                          v31 += 8;
                          *(void *)uint64_t v34 = v35;
                          v34 += 8;
                          v33 -= 8;
                        }
                        while (v33);
                      }
                      uint64_t v36 = __p;
                      std::string __p = v29;
                      tm v52 = &v29[8 * (v28 >> 2)];
                      time_t v53 = v18;
                      char v54 = &v29[8 * v30];
                      if (v36)
                      {
                        operator delete(v36);
                        uint64_t v18 = v53;
                      }
                    }
                    else
                    {
                      uint64_t v21 = v20 >> 3;
                      BOOL v22 = v20 >> 3 < -1;
                      uint64_t v23 = (v20 >> 3) + 2;
                      if (v22) {
                        uint64_t v24 = v23;
                      }
                      else {
                        uint64_t v24 = v21 + 1;
                      }
                      long long v25 = &v52[-8 * (v24 >> 1)];
                      int64_t v26 = v18 - v52;
                      if (v18 != v52)
                      {
                        memmove(&v52[-8 * (v24 >> 1)], v52, v18 - v52);
                        uint64_t v18 = v52;
                      }
                      char v27 = &v18[-8 * (v24 >> 1)];
                      uint64_t v18 = &v25[v26];
                      tm v52 = v27;
                      time_t v53 = &v25[v26];
                    }
                  }
                  uint64_t v37 = *(void *)v19;
                  v19 += 8;
                  *(void *)uint64_t v18 = v37;
                  uint64_t v18 = v53 + 8;
                  v53 += 8;
                }
                while (v19 != *(char **)(a2 + 16));
                char v17 = *(char **)(a2 + 8);
              }
              int v38 = *(char **)a2;
              int v39 = v54;
              uint64_t v40 = *(char **)(a2 + 24);
              uint64_t v41 = *(void *)(a2 + 32);
              *(void *)(a2 + 16) = v18;
              *(void *)(a2 + 24) = v39;
              std::string::size_type v42 = v52;
              *(void *)a2 = __p;
              *(void *)(a2 + 8) = v42;
              std::string __p = v38;
              tm v52 = v17;
              time_t v53 = v19;
              char v54 = v40;
              int64_t v43 = v18 - v42;
              if (v43 != 8) {
                int64_t v43 = v41 + 16;
              }
              *(void *)(a2 + 32) = v43;
              if (v19 != v17) {
                time_t v53 = &v19[(v17 - v19 + 7) & 0xFFFFFFFFFFFFFFF8];
              }
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              if (v8 == v13)
              {
                std::string __p = operator new(0x1980uLL);
                std::__split_buffer<SipUri *>::push_back((void *)a2, &__p);
                uint64_t v44 = *(void *)(a2 + 16);
                std::string __p = *(void **)(v44 - 8);
                *(void *)(a2 + 16) = v44 - 8;
              }
              else
              {
                std::string __p = operator new(0x1980uLL);
              }
              std::__split_buffer<SipUri *>::push_front(a2, &__p);
              uint64_t v45 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
              if (v45 != 8) {
                uint64_t v45 = *(void *)(a2 + 32) + 16;
              }
              *(void *)(a2 + 32) = v45;
            }
          }
          else
          {
            *(void *)(a2 + 32) = 16;
            std::string __p = (void *)*((void *)v9 - 1);
            *(void *)(a2 + 16) = v9 - 8;
            std::__split_buffer<SipUri *>::push_front(a2, &__p);
          }
          unint64_t v7 = *(void *)(a2 + 32);
          BOOL v8 = *(char **)(a2 + 8);
          uint64_t v9 = *(unsigned char **)(a2 + 16);
        }
        char v46 = &v8[8 * (v7 >> 4)];
        uint64_t v47 = *(void *)v46 + 408 * (v7 & 0xF);
        if (v9 == v8) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = v47;
        }
        if (v48 == *(void *)v46) {
          uint64_t v48 = *((void *)v46 - 1) + 6528;
        }
        SipUri::SipUri((SipUri *)(v48 - 408), (const SipUri *)v2);
        *(int64x2_t *)(a2 + 32) = vaddq_s64(*(int64x2_t *)(a2 + 32), (int64x2_t)xmmword_1C56D6090);
      }
      else if (((*(uint64_t (**)(void, void))(**(void **)(v2 + 416) + 24))(*(void *)(v2 + 416), *(unsigned int *)(v2 + 424)) & 1) == 0)
      {
        std::deque<SipUri>::push_back((void *)a2, (SipUri *)v2);
      }
      ++v6;
      v2 += 480;
    }
    while (v2 != v3);
  }
}

void sub_1C54B2330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  operator delete(v17);
  if (__p) {
    operator delete(__p);
  }
  std::deque<SipUri>::~deque[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::transportInitializedToProxy(SipRegistrationPolicy *this, const SipUri *a2)
{
  uint64_t v2 = (const std::string *)*((void *)this + 55);
  uint64_t v3 = (const std::string *)*((void *)this + 56);
  if (v2 != v3)
  {
    uint64_t v6 = 0;
    do
    {
      memset(v10, 0, sizeof(v10));
      SipUri::SipUri((SipUri *)v10, (const SipUri *)v2);
      ImsResult::ImsResult((ImsResult *)((char *)&v10[25] + 8), v2 + 17);
      int v7 = SipUri::equals((SipUri *)v10, a2, 1);
      if (v7)
      {
        *((void *)this + 58) = v6;
        uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"initialized transport to proxy offset ", 38);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
      }
      else
      {
        ++v6;
      }
      ImsResult::~ImsResult((ImsResult *)((char *)&v10[25] + 8));
      SipUri::~SipUri((SipUri *)v10);
      v2 += 20;
      if (v2 == v3) {
        int v9 = 1;
      }
      else {
        int v9 = v7;
      }
    }
    while (v9 != 1);
  }
}

void sub_1C54B2550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipRegistrationPolicy::skipToNextProxy(SipRegistrationPolicy *this)
{
  uint64_t v1 = *((void *)this + 56) - *((void *)this + 55);
  if (v1 != 480)
  {
    uint64_t v2 = *((void *)this + 58);
    if (v2 + 1 < 0xEEEEEEEEEEEEEEEFLL * (v1 >> 5)) {
      unint64_t v3 = v2 + 1;
    }
    else {
      unint64_t v3 = 0;
    }
    SipRegistrationPolicy::setProxyOffset(this, v3);
  }
}

void SipRegistrationPolicy::setProxyOffset(SipRegistrationPolicy *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 55);
  uint64_t v3 = *((void *)this + 56);
  if (v2) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (*((void *)this + 58) == a2)
    {
      uint64_t v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"already using proxy #", 21);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v6 + 17) = 0;
      uint64_t v7 = *((void *)this + 55) + 480 * *((void *)this + 58);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v6);
      uint64_t v8 = *(void **)(v6 + 8);
      int v9 = ")";
      uint64_t v10 = 1;
LABEL_14:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      return;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((v3 - v2) >> 5) <= a2)
    {
      uint64_t v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 56))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v6);
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      uint64_t v8 = *(void **)(v6 + 8);
      int v9 = " is not a valid proxy offset";
      uint64_t v10 = 28;
      goto LABEL_14;
    }
    *((void *)this + 58) = a2;
    *((unsigned char *)this + 228) = 1;
    *((_DWORD *)this + 56) = 0;
    uint64_t v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"current proxy is now #", 22);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = *((void *)this + 55) + 480 * *((void *)this + 58);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(SipRegistrationPolicy *))(*(void *)this + 232))(this);
    int v13 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        unint64_t v15 = v14;
        uint64_t v16 = *((void *)this + 47);
        if (v16)
        {
          uint64_t v17 = *((void *)this + 55);
          if (v17 == *((void *)this + 56)) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = v17 + 480 * *((void *)this + 58);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 48))(v16, v18);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
}

void sub_1C54B2990(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::setProxy(SipRegistrationPolicy *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 56) == *((void *)this + 55))
  {
LABEL_13:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v15[0] = &unk_1F20B2680;
    v15[1] = &_bambiDomain;
    int v16 = 1073741836;
    uint64_t v12 = (const std::string *)ImsResult::operator<<<char [15]>((uint64_t)v15, "unknown proxy ");
    std::string::pointer data = v12[1].__r_.__value_.__l.__data_;
    if (!data) {
      operator new();
    }
    (*(void (**)(const SipUri *, std::string::pointer))(*(void *)a2 + 40))(a2, data);
    ImsResult::ImsResult((ImsResult *)a3, v12);
    ImsResult::~ImsResult((ImsResult *)v15);
    return;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 8;
  while (1)
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 48);
    if (v8)
    {
      int v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *((void *)this + 47);
        if (v10)
        {
          unsigned __int16 v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10);
          goto LABEL_9;
        }
      }
    }
    else
    {
      int v9 = 0;
    }
    unsigned __int16 v11 = 5060;
LABEL_9:
    if (SipHost::equalsWithDefaultPort((const SipUri *)((char *)a2 + 8), (const SipHost *)(*((void *)this + 55) + v7), v11))break; {
    if (v9)
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    ++v6;
    v7 += 480;
    if (v6 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)this + 56) - *((void *)this + 55)) >> 5)) {
      goto LABEL_13;
    }
  }
  uint64_t v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"desired proxy ", 14);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"matched proxy #", 15);
  *(unsigned char *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  SipRegistrationPolicy::setProxyOffset(this, v6);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C54B2CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1C878E320](v2, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::lastProxyResult(SipRegistrationPolicy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 55);
  if (v2) {
    BOOL v3 = v2 == *((void *)this + 56);
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)(v2 + 480 * *((void *)this + 58) + 408));
  }
}

BOOL SipRegistrationPolicy::allProxiesHaveError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v2 = *((void *)this + 55);
  uint64_t v3 = *((void *)this + 56) - v2;
  if (!v3) {
    return 1;
  }
  unint64_t v4 = v3 / 480;
  uint64_t v5 = *((void *)a2 + 1);
  if (v4 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4;
  }
  if (*(void *)(v2 + 416) != v5) {
    return 0;
  }
  int v7 = *((_DWORD *)a2 + 4);
  if (*(_DWORD *)(v2 + 424) != v7) {
    return 0;
  }
  uint64_t v8 = (_DWORD *)(v2 + 904);
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v6 == v9) {
      break;
    }
    if (*((void *)v8 - 1) != v5) {
      break;
    }
    int v11 = *v8;
    ++v9;
    v8 += 120;
  }
  while (v11 == v7);
  return v10 >= v4;
}

void SipRegistrationPolicy::onInterfaceChanged(ims **this)
{
  uint64_t v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Clearing throttling due to network interface change.", 52);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling(this);
}

void SipRegistrationPolicy::onProxyListChanged(SipRegistrationPolicy *a1)
{
}

void SipRegistrationPolicy::updateConfig(ims **this, const SipRegistrationConfig *a2)
{
  uint64_t v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"updating config", 15);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  bzero(v11, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v11, (const SipRegistrationConfig *)(this + 61));
  SipRegistrationConfig::operator=((uint64_t)(this + 61), (uint64_t)a2);
  if ((*((unsigned int (**)(ims **))*this + 66))(this))
  {
    SipRegistrationPolicy::clearAllThrottling(this);
    goto LABEL_11;
  }
  uint64_t v5 = (std::__shared_weak_count *)this[48];
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      int v7 = this[47];
      if (v7)
      {
        if ((*(unsigned int (**)(ims *))(*(void *)v7 + 128))(v7))
        {
          (*((void (**)(ims **))*this + 31))(this);
LABEL_10:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_11:
          if (v11[0] != v11[1])
          {
            uint64_t v9 = (*((uint64_t (**)(ims **))*this + 8))(this);
            (*((void (**)(ims **, uint64_t))*this + 2))(this, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"old proxies: ", 13);
            *(unsigned char *)(v9 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(&v12, ",");
            ims::join<std::__wrap_iter<SipUri const*>>();
          }
          uint64_t v10 = (*((uint64_t (**)(ims **))*this + 8))(this);
          (*((void (**)(ims **, uint64_t))*this + 2))(this, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"new proxies: ", 13);
          *(unsigned char *)(v10 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v12, ",");
          ims::join<std::__wrap_iter<SipUri const*>>();
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Network interface hasn't changed. Not clearing throttling.", 58);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (!v6) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

void sub_1C54B3C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  SipRegistrationConfig::~SipRegistrationConfig((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::bestAssociatedUri(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == *(void *)(a2 + 16)) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

void SipRegistrationPolicy::systemClockDidChange(SipRegistrationPolicy *this)
{
  if (*((void *)this + 49))
  {
    time_t v2 = time(0);
    uint64_t v3 = (ims *)((*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 208))(this) + v2);
    time_t v4 = *((void *)this + 49);
    if (v4 <= (uint64_t)v3)
    {
      uint64_t v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
      if (v4 >= v2)
      {
        uint64_t v9 = "systemClockDidChange: next retry time is still within our current retry interval: ";
        uint64_t v10 = 82;
      }
      else
      {
        uint64_t v9 = "systemClockDidChange: next retry time is in the past: ";
        uint64_t v10 = 54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)v9, v10);
      *(unsigned char *)(v8 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v8, v11);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"systemClockDidChange: resetting next retry time from ", 53);
      *(unsigned char *)(v5 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 49), v5, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" to ", 4);
      *(unsigned char *)(v5 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(v3, v5, v7);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "SystemClockDidChange");
      SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      *((void *)this + 50) = v2;
    }
  }
}

void sub_1C54B3FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::handleDeviceEvents(SipRegistrationPolicy *this, __int16 a2)
{
  uint64_t v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handling device events: ", 24);
  *(unsigned char *)(v4 + 17) = 0;
  deviceEventsToString(a2);
}

void sub_1C54B43BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::handleSubscriptionFailed(int8x8_t *this, const ImsResult *a2, unsigned int a3)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v4 = a3;
    int8x8_t v6 = this[24];
    uint64_t v5 = (std::__shared_weak_count *)this[25];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v7 = operator new(0x20uLL);
    *int v7 = &unk_1F20D46B0;
    v7[1] = this;
    void v7[2] = v6;
    v7[3] = v5;
    void v13[3] = v7;
    SipTimerContainer::startTimer(this + 29, (uint64_t)&SipRegistrationPolicy::kSubscriptionRetryTimerName);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v13);
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(int8x8_t *, const ImsResult *))(*(void *)this + 264))(this, a2);
    unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  time_t v9 = time(0);
  uint64_t v10 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"will retry subscription at ", 27);
  *(unsigned char *)(v10 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(v9 + v4), v10, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  return result;
}

void sub_1C54B4610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::handleSubscriptionSucceeded(SipRegistrationPolicy *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(SipRegistrationPolicy *))(*(void *)this + 264))(this)
                           + 16);
  return v1();
}

uint64_t SipRegistrationPolicy::disableIfInWrongCountry(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2);
    if (result)
    {
      int v5 = *(_DWORD *)(a2 + 88) == 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      v6[0] = &unk_1F20B2680;
      v6[1] = &_bambiDomain;
      int v7 = v5 << 30;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 176))(a1, v6);
      ImsResult::~ImsResult((ImsResult *)v6);
      return 1;
    }
  }
  return result;
}

void sub_1C54B47C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationPolicy::shouldDeferRegistration(SipRegistrationPolicy *this)
{
  return *((unsigned char *)this + 2249) && *((unsigned char *)this + 1835) != 0;
}

void *SipRegistrationPolicy::getClientRegTypeStr@<X0>(SipRegistrationPolicy *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((int *)this + 589);
  if (v4 > 3) {
    int v5 = "";
  }
  else {
    int v5 = off_1E65117F8[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void SipEmergencyRegistrationPolicy::~SipEmergencyRegistrationPolicy(SipEmergencyRegistrationPolicy *this)
{
  SipEmergencyRegistrationPolicy::~SipEmergencyRegistrationPolicy(this);
  JUMPOUT(0x1C878E320);
}

{
  void **v2;

  *(void *)this = &unk_1F20D4230;
  time_t v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  time_t v2 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 8) = &unk_1F20E3DD0;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  time_t v2 = (SipUri **)*a1;
  if (*v2)
  {
    std::vector<SipRegistrationPolicy::ProxyInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<SipRegistrationPolicy::ProxyInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, SipUri *a2)
{
  uint64_t v4 = *(SipUri **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      int v5 = (SipUri *)((char *)v4 - 480);
      ImsResult::~ImsResult((SipUri *)((char *)v4 - 72));
      SipUri::~SipUri(v5);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

SipUri *std::construct_at[abi:ne180100]<SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo*>(SipUri *a1, const SipUri *a2)
{
  SipUri::SipUri(a1, a2);
  ImsResult::ImsResult(v4 + 408, (uint64_t)a2 + 408);
  return a1;
}

void sub_1C54B4950(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipRegistrationPolicy::ProxyInfo>,std::reverse_iterator<SipRegistrationPolicy::ProxyInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 480)
    {
      ImsResult::~ImsResult((ImsResult *)(i + 408));
      SipUri::~SipUri((SipUri *)i);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<SipRegistrationPolicy::ProxyInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (SipUri *)(i - 480);
    *(void *)(a1 + 16) = i - 480;
    ImsResult::~ImsResult((ImsResult *)(i - 72));
    SipUri::~SipUri(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D45B0;
  time_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D45B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D45B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D45B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54B4D20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D4630;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D4630;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D4630;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D4630;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54B4FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void ims::join<std::__wrap_iter<SipUri const*>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C54B5170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D46B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20D46B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20D46B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20D46B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    int8x8_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C54B53D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipRegistrationPolicy_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kSubscriptionRetryTimerName, "RegSubscriptionRetryTimer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &SipRegistrationPolicy::kSubscriptionRetryTimerName, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kEmergencyRegistrationTimer, "EmergencyRegistrationTimer");
  __cxa_atexit(v0, &SipRegistrationPolicy::kEmergencyRegistrationTimer, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kThumperErrorUnauthorized, "Account Authentication Failure");
  __cxa_atexit(v0, &SipRegistrationPolicy::kThumperErrorUnauthorized, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&kResponseServiceNotAllowedInThisLocation, "Service not allowed in this location");
  return __cxa_atexit(v0, &kResponseServiceNotAllowedInThisLocation, &dword_1C51D1000);
}

uint64_t SipStandardDigestAuthScheme::parseNonce(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 184), a2);
  return 1;
}

uint64_t SipStandardDigestAuthScheme::encodeNonce(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 184));
  return 1;
}

BOOL SipStandardDigestAuthScheme::hasValidNonce(SipStandardDigestAuthScheme *this)
{
  if (*((char *)this + 207) < 0) {
    uint64_t v1 = *((void *)this + 24);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 207);
  }
  return v1 != 0;
}

uint64_t SipStandardDigestAuthScheme::parseAlgorithm(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 128), a2);
  return 1;
}

std::string *SipStandardDigestAuthScheme::encodeAlgorithm(uint64_t a1, std::string *this)
{
  return std::string::operator=(this, (const std::string *)(a1 + 128));
}

void SipStandardDigestAuthScheme::computeResponse(SipStandardDigestAuthScheme *this, const SipRequest *a2)
{
  (*(void (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  SipDigestAuthScheme::_computeResponse();
}

void SipStandardDigestAuthScheme::computeResponse()
{
}

void SipStandardDigestAuthScheme::computeResponse(uint64_t a1)
{
}

void SipStandardDigestAuthScheme::createChallenge(SipStandardDigestAuthScheme *this)
{
}

void sub_1C54B56C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipStandardDigestAuthScheme::createResponse(SipStandardDigestAuthScheme *this)
{
}

void sub_1C54B5730(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C405BF2102ELL);
  _Unwind_Resume(a1);
}

void SipStandardDigestAuthScheme::~SipStandardDigestAuthScheme(void **this)
{
  SipStandardDigestAuthScheme::~SipStandardDigestAuthScheme(this);
  JUMPOUT(0x1C878E320);
}

{
  void **v2;

  *this = &unk_1F20D4730;
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  *this = &unk_1F20C3648;
  uint64_t v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F20D2798;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 1));
}

void SipStandardDigestAuthScheme::clone(SipStandardDigestAuthScheme *this)
{
}

void sub_1C54B582C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4000F68170);
  _Unwind_Resume(a1);
}

void SipRegistrationInfoBody::SipRegistrationInfoBody(SipRegistrationInfoBody *this, const SipRegistrationInfoBody *a2)
{
  uint64_t v3 = SipXmlBody::SipXmlBody(this, (uint64_t)a2);
  void *v3 = &unk_1F20C8610;
  SipRegistrationInfo::SipRegistrationInfo((SipRegistrationInfo *)(v3 + 4), (const SipRegistrationInfoBody *)((char *)a2 + 32));
}

void sub_1C54B59CC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipRegistrationInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipRegistrationInfoBody::kContentType, "application/reginfo+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, SipRegistrationInfoBody::kContentType, &dword_1C51D1000);
}

void SipToHeader::~SipToHeader(SipToHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipToHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipToHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipToHeader::clone(SipToHeader *this)
{
}

void sub_1C54B5C14(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipRoutableLocalAddressHeader::SipRoutableLocalAddressHeader(SipRoutableLocalAddressHeader *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_31);
  SipStringHeader::SipStringHeader((uint64_t)this, (const std::string *)"Routable-Local-Address", &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20D4898;
  *((unsigned char *)this + 56) = 0;
}

void sub_1C54B5CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipRoutableLocalAddressHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  uint64_t v6 = 0;
  int v7 = 0;
  IpAddress::createAddress(a2, (uint64_t)&v6);
  if (v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 88))(v6)) {
    IpAddress::asString(&v5);
  }
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v3 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 87);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v3 != 0;
}

void sub_1C54B5D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void SipRoutableLocalAddressHeader::~SipRoutableLocalAddressHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipRoutableLocalAddressHeader::clone(SipRoutableLocalAddressHeader *this)
{
}

void sub_1C54B5EF4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void LazuliUri::LazuliUri(LazuliUri *this, const SipHost *a2, char a3)
{
  *(void *)this = &unk_1F20D4930;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (std::string *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 7) = &unk_1F20CA780;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 14) = &unk_1F20B37B0;
  *((void *)this + 16) = 0;
  *((void *)this + 15) = (char *)this + 128;
  long long v5 = (uint64_t **)((char *)this + 120);
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 152) = a3;
  *((_WORD *)this + 72) = 257;
  SipHost::operator=((uint64_t)this + 56, (uint64_t)a2);
  if (!*((_WORD *)this + 44))
  {
    *((_WORD *)this + 44) = 2855;
    uint64_t v6 = *((void *)this + 12);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 64))(v6, 2855);
    }
  }
  if (*((unsigned char *)this + 152)) {
    int v7 = "msrps";
  }
  else {
    int v7 = "msrp";
  }
  std::string::__assign_external(v4, v7);
  std::string::basic_string[abi:ne180100]<0>(v10, "tcp");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v12 = v10;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v10, (uint64_t)&std::piecewise_construct, (long long **)&v12);
  std::string::operator=((std::string *)(v8 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_1C54B60D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  *(void *)(v20 + 112) = v23;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v24, *(void **)(v20 + 128));
  SipHost::~SipHost(v22);
  if (*(char *)(v20 + 55) < 0) {
    operator delete(*(void **)(v20 + 32));
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*v21);
  }
  _Unwind_Resume(a1);
}

uint64_t LazuliUri::fromString(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "LazuliUri");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&__str, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"fromString ", 11);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    **(unsigned char **)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 31) = 0;
  }
  SipHost::clear((SipHost *)(a1 + 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 120, *(void **)(a1 + 128));
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    if (!*(unsigned char *)(a2 + 23)) {
      return 0;
    }
  }
  std::string::size_type v6 = std::string::find((const std::string *)a2, 58, 0);
  if (v6 == -1) {
    return 0;
  }
  std::string::size_type v7 = v6;
  std::string::basic_string(&__p, (const std::string *)a2, 0, v6, (std::allocator<char> *)v27);
  ims::lowerCase((uint64_t)&__p, &__str);
  uint64_t v8 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(void *)(a1 + 24) = *((void *)&__str.__r_.__value_.__l + 2);
  *((unsigned char *)&__str.__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(unsigned __int8 *)(a1 + 31);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  if (v9 == 5)
  {
    if (v10 >= 0) {
      uint64_t v14 = (unsigned __int8 *)(a1 + 8);
    }
    else {
      uint64_t v14 = (unsigned __int8 *)*v8;
    }
    int v15 = *(_DWORD *)v14;
    int v16 = v14[4];
    if (v15 != 1886548845 || v16 != 115) {
      return 0;
    }
    char v13 = 1;
    goto LABEL_35;
  }
  if (v9 != 4) {
    return 0;
  }
  uint64_t result = 0;
  if (v10 >= 0) {
    uint64_t v12 = (_DWORD *)(a1 + 8);
  }
  else {
    uint64_t v12 = *v8;
  }
  if (*v12 != 1886548845) {
    return result;
  }
  char v13 = 0;
LABEL_35:
  *(unsigned char *)(a1 + 152) = v13;
  std::string::size_type v18 = std::string::find((const std::string *)a2, 59, v7 + 1);
  if (v18 == -1) {
    return 0;
  }
  std::string::size_type v19 = v18;
  std::string::basic_string(&__str, (const std::string *)a2, v18 + 1, v5 + ~v18, (std::allocator<char> *)&__p);
  SipParameterMap::fromString(a1 + 112, &__str, 0, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::size_type v20 = v7 + 3;
  std::string::size_type v21 = std::string::find((const std::string *)a2, 47, v20);
  if (v21 == -1)
  {
    std::string::size_type v22 = v19;
  }
  else
  {
    std::string::size_type v22 = v21;
    std::string::basic_string(&__str, (const std::string *)a2, v21 + 1, v19 + ~v21, (std::allocator<char> *)&__p);
    uint64_t v23 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v23);
    }
    *(_OWORD *)uint64_t v23 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(void *)(a1 + 48) = *((void *)&__str.__r_.__value_.__l + 2);
  }
  if (v22 <= v20) {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string(&__str, (const std::string *)a2, v20, v22 - v20, (std::allocator<char> *)&__p);
  SipHost::fromString(a1 + 56, &__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LazuliUri");
  std::string::basic_string[abi:ne180100]<0>(v27, "");
  uint64_t v24 = ims::debug((uint64_t)&__p, (uint64_t)v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" scheme=", 8);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 32))(v24, a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" _hostname=", 11);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 32))(v24, a1 + 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" _hostport=", 11);
  *(unsigned char *)(v24 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v24 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" _sessionId=", 12);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 32))(v24, a1 + 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" tcp=", 5);
  *(unsigned char *)(v24 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v25, "tcp");
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, v25);
  std::ostream::operator<<();
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C54B66B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void LazuliUri::setHostPort(LazuliUri *this, unsigned __int16 a2)
{
  uint64_t v6 = 0;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  SipHost::SipHost((uint64_t)v4, (uint64_t)this + 56);
  LOWORD(v5) = a2;
  if (*((void *)&v5 + 1)) {
    (*(void (**)(void, void))(**((void **)&v5 + 1) + 64))(*((void *)&v5 + 1), a2);
  }
  (*(void (**)(LazuliUri *, _OWORD *))(*(void *)this + 24))(this, v4);
  SipHost::~SipHost((SipHost *)v4);
}

void sub_1C54B67F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void LazuliUri::~LazuliUri(LazuliUri *this)
{
  *(void *)this = &unk_1F20D4930;
  *((void *)this + 14) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 120, *((void **)this + 16));
  SipHost::~SipHost((LazuliUri *)((char *)this + 56));
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  LazuliUri::~LazuliUri(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *LazuliUri::toStream(LazuliUri *this, ImsOutStream *a2)
{
  if (*((char *)this + 31) < 0)
  {
    if (!*((void *)this + 2)) {
      goto LABEL_7;
    }
  }
  else if (!*((unsigned char *)this + 31))
  {
    goto LABEL_7;
  }
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"://", 3);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_7:
  SipHost::toStream((LazuliUri *)((char *)this + 56), a2, 1);
  if (*((char *)this + 55) < 0)
  {
    if (!*((void *)this + 5)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 55))
  {
    goto LABEL_13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"/", 1);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_13:
  SipParameterMap::toStream((LazuliUri *)((char *)this + 112), a2, 0, @"[]/:&+$", @"#@!'()*=", 0);
  return a2;
}

void sub_1C54B6A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliUri::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 8);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 40);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 55);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 40);
  }
  if (v11 != v12) {
    return 0;
  }
  uint64_t v14 = (const void **)(a1 + 32);
  if (v13 >= 0) {
    int v15 = (unsigned __int8 *)(a2 + 32);
  }
  else {
    int v15 = *(unsigned __int8 **)(a2 + 32);
  }
  if ((v10 & 0x80) != 0)
  {
    if (!memcmp(*v14, v15, *(void *)(a1 + 40))) {
      goto LABEL_31;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      uint64_t v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  if (*(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)
    || !SipHost::equals((SipHost *)(a1 + 56), (const SipHost *)(a2 + 56), 1))
  {
    return 0;
  }
  return SipParameterMap::operator==((void *)(a1 + 112), a2 + 112);
}

void LazuliUri::clone(LazuliUri *this)
{
}

void sub_1C54B6C0C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40431A04D0);
  _Unwind_Resume(a1);
}

uint64_t LazuliUri::setHost(LazuliUri *this, const SipHost *a2)
{
  return SipHost::operator=((uint64_t)this + 56, (uint64_t)a2);
}

void LazuliUri::ipAddress(LazuliUri *this@<X0>, void *a2@<X8>)
{
}

void LazuliUri::returnAddress(LazuliUri *this@<X0>, void *a2@<X8>)
{
}

void LazuliUri::LazuliUri(LazuliUri *this, const LazuliUri *a2)
{
  *(void *)this = &unk_1F20D4930;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  SipHost::SipHost((uint64_t)this + 56, (uint64_t)a2 + 56);
  *((void *)this + 14) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 15, *((void ***)a2 + 15), (void **)a2 + 16);
  *((unsigned char *)this + 145) = 1;
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
}

void sub_1C54B6D60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUint32Header::encodeValue(SipUint32Header *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  return 1;
}

uint64_t SipUint32Header::setValueFromString(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  *(_DWORD *)(a1 + 60) = strtoul(v3, 0, 10);
  return 1;
}

void SipUint32Header::~SipUint32Header(void **this)
{
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipUint32Header::clone(SipUint32Header *this)
{
}

void sub_1C54B6EC8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C401DA35BB1);
  _Unwind_Resume(a1);
}

uint64_t SipPAccessNetworkInfoHeader::SipPAccessNetworkInfoHeader(uint64_t a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringParameterHeader::SipStringParameterHeader(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20D4A20;
  *(_DWORD *)(a1 + 128) = 2;
  return a1;
}

void sub_1C54B6F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipPAccessNetworkInfoHeader::setAccessNetworkInfo(uint64_t a1, std::string *this, uint64_t a3, int a4)
{
  memset(&v23, 0, sizeof(v23));
  memset(&__str, 0, sizeof(__str));
  if (ims::AccessNetwork::isGSM((ims::AccessNetwork *)this))
  {
    uint64_t v8 = (const std::string *)"cgi-3gpp";
LABEL_7:
    std::string::operator=(&v23, v8);
    goto LABEL_8;
  }
  if (ims::AccessNetwork::isUMTS((ims::AccessNetwork *)this)
    || ims::AccessNetwork::isLTE((ims::AccessNetwork *)this)
    || ims::AccessNetwork::isNR((ims::AccessNetwork *)this))
  {
    uint64_t v8 = (const std::string *)"utran-cell-id-3gpp";
    goto LABEL_7;
  }
  if (ims::AccessNetwork::is3GPP2((ims::AccessNetwork *)this))
  {
    uint64_t v8 = (const std::string *)"ci-3gpp2";
    goto LABEL_7;
  }
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)this))
  {
    uint64_t v8 = (const std::string *)"i-wlan-node-id";
    goto LABEL_7;
  }
LABEL_8:
  if (a4)
  {
    uint64_t v21 = 0;
    long long v20 = 0u;
    memset(&v19[1], 0, 48);
    v19[0] = (long long *)time(0);
    ims::localtime((ims *)v19, (tm *)&v19[2], v9);
    LODWORD(v21) = v20;
    ImsInternetDateTime::toString((ImsInternetDateTime *)v19, &v18);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v18;
    ims::addQuotes((uint64_t)&__str, 0);
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=((std::string *)(a1 + 104), this);
    uint64_t v11 = (uint64_t **)(a1 + 72);
    v19[0] = (long long *)&v23;
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v19);
    std::string::operator=((std::string *)(v12 + 7), this + 1);
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a3 + 8);
    }
    if (v13)
    {
      v19[0] = (long long *)"country";
      uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)"country", (uint64_t)&std::piecewise_construct, v19);
      std::string::operator=((std::string *)(v14 + 7), (const std::string *)a3);
    }
    std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
    }
    if (v15)
    {
      v19[0] = (long long *)"local-time-zone";
      int v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)"local-time-zone", (uint64_t)&std::piecewise_construct, v19);
      std::string::operator=((std::string *)(v16 + 7), &__str);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return size != 0;
}

void sub_1C54B71DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void SipPAccessNetworkInfoHeader::~SipPAccessNetworkInfoHeader(void **this)
{
  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C0A78;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F20DEB80;
  this[8] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPAccessNetworkInfoHeader::clone(SipPAccessNetworkInfoHeader *this)
{
}

void sub_1C54B73E4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

std::string::size_type ims::nextToken(std::string *a1, std::string::size_type a2, std::string *a3, unsigned __int8 a4)
{
  char v7 = 1;
  LOWORD(__p) = a4;
  std::string::size_type Token = ims::nextToken(a1, a2, a3, (char *)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  return Token;
}

void sub_1C54B745C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::nextTokenView(uint64_t *a1, unint64_t a2, void *a3, char *a4)
{
  long long v4 = a4;
  unint64_t v6 = a2;
  char v7 = a1;
  *a3 = 0;
  a3[1] = 0;
  int v8 = *((char *)a1 + 23);
  if (v8 >= 0) {
    unint64_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v9 = a1[1];
  }
  if (v9 > a2)
  {
    if (a4[23] >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = *(char **)a4;
    }
    if (v8 >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = (uint64_t *)*a1;
    }
    while (strchr(v10, *((char *)v11 + v6)))
    {
      if (v9 == ++v6) {
        return -1;
      }
    }
  }
  if (v6 == v9) {
    return -1;
  }
  uint64_t v13 = (uint64_t *)*v7;
  unint64_t v12 = v6;
  if (v6 < v9)
  {
    if (v4[23] >= 0) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = *(char **)v4;
    }
    if (v8 >= 0) {
      std::string::size_type v15 = v7;
    }
    else {
      std::string::size_type v15 = (uint64_t *)*v7;
    }
    unint64_t v12 = v6;
    while (!strchr(v14, *((char *)v15 + v12)))
    {
      if (v9 == ++v12)
      {
        unint64_t v12 = v9;
        break;
      }
    }
  }
  if (v8 >= 0) {
    int v16 = v7;
  }
  else {
    int v16 = v13;
  }
  *a3 = (char *)v16 + v6;
  a3[1] = v12 - v6;
  unint64_t v17 = *((unsigned __int8 *)v7 + 23);
  char v18 = v17;
  unint64_t v19 = v7[1];
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *((unsigned __int8 *)v7 + 23);
  }
  else {
    unint64_t v20 = v7[1];
  }
  if (v12 < v20)
  {
    uint64_t v21 = v4[23] >= 0 ? v4 : *(char **)v4;
    uint64_t v22 = (v17 & 0x80u) == 0 ? (uint64_t)v7 : *v7;
    if (strchr(v21, *(char *)(v22 + v12)))
    {
      *(unsigned char *)(v22 + v12) = 0;
      unint64_t v17 = *((unsigned __int8 *)v7 + 23);
      unint64_t v19 = v7[1];
      char v18 = *((unsigned char *)v7 + 23);
    }
  }
  if (v18 < 0) {
    unint64_t v17 = v19;
  }
  if (v12 < v17)
  {
    if (v4[23] < 0) {
      long long v4 = *(char **)v4;
    }
    if (v18 < 0) {
      char v7 = (uint64_t *)*v7;
    }
    while (strchr(v4, *((char *)v7 + v12)))
    {
      if (v17 == ++v12) {
        return v17;
      }
    }
  }
  return v12;
}

unint64_t ims::nextTokenQ(std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a4)
{
  std::string::size_type v4 = __pos;
  char v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size > __pos)
  {
    if (v6 >= 0) {
      int v8 = __str;
    }
    else {
      int v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    while (v8->__r_.__value_.__s.__data_[v4] == 32)
    {
      if (size == ++v4) {
        return -1;
      }
    }
  }
  if (v4 == size) {
    return -1;
  }
  int v10 = a4;
  unint64_t v11 = v4;
  if (v4 >= size)
  {
LABEL_41:
    std::string::assign(this, __str, v4, v11 - v4);
    std::string::size_type v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      std::string::size_type v19 = __str->__r_.__value_.__l.__size_;
    }
    if (v20 >= 0) {
      uint64_t v21 = __str;
    }
    else {
      uint64_t v21 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    do
    {
      unint64_t v22 = v11 + 1;
      BOOL v23 = v21->__r_.__value_.__s.__data_[v11] != v10 || v11 >= v19;
      ++v11;
    }
    while (!v23);
    return v22 - 1;
  }
  char v12 = 0;
  if (v6 >= 0) {
    uint64_t v13 = __str;
  }
  else {
    uint64_t v13 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  unint64_t v11 = v4;
  while (1)
  {
    while ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
    {
      uint64_t v14 = __str;
      if (__str->__r_.__value_.__s.__data_[v11] == 92)
      {
        std::string::size_type v15 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        goto LABEL_31;
      }
LABEL_22:
      int v16 = v14->__r_.__value_.__s.__data_[v11];
      if (v16 == 34)
      {
        v12 ^= 1u;
        goto LABEL_34;
      }
      if (v12)
      {
        if (++v11 >= size) {
          goto LABEL_36;
        }
      }
      else
      {
        if (v16 == a4) {
          goto LABEL_41;
        }
        if (++v11 >= size) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(__str->__r_.__value_.__r.__words[0] + v11) != 92) {
      goto LABEL_22;
    }
    std::string::size_type v15 = __str->__r_.__value_.__l.__size_;
LABEL_31:
    if (v11 >= v15 - 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "util");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v24 = ims::error((uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Can't end a line with a backslash", 33);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      goto LABEL_37;
    }
    int v17 = v13->__r_.__value_.__s.__data_[++v11];
    if (v17 != 34 && v17 != 92) {
      break;
    }
LABEL_34:
    if (++v11 >= size)
    {
      if ((v12 & 1) == 0) {
        goto LABEL_41;
      }
LABEL_36:
      std::string::basic_string[abi:ne180100]<0>(v30, "util");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v18 = ims::error((uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unbalanced quotes at offset ", 28);
      *(unsigned char *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 32))(v18, __str);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      goto LABEL_37;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v25 = ims::error((uint64_t)v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Invalid escape \\"", 16);
  *(unsigned char *)(v25 + 17) = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v26 = __str;
  }
  else {
    char v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  char v27 = *(void **)(v25 + 8);
  std::string::value_type v32 = v26->__r_.__value_.__s.__data_[v11];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)&v32, 1);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
LABEL_37:
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  return -1;
}

void sub_1C54B7A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ims::tokenize(std::string *a1, uint64_t *a2, unsigned __int8 a3)
{
  __p[1] = 0;
  uint64_t v6 = 0x100000000000000;
  __p[0] = (void *)a3;
  unint64_t v3 = ims::tokenize(a1, a2, (char *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1C54B7AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::tokenizeAsView(uint64_t *a1, void **a2, char *a3)
{
  long long v21 = 0uLL;
  uint64_t v6 = ims::nextTokenView(a1, 0, &v21, a3);
  if (v6 != -1)
  {
    for (unint64_t i = v6; i != -1; unint64_t i = ims::nextTokenView(a1, i, &v21, a3))
    {
      if (*((void *)&v21 + 1))
      {
        unint64_t v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 4;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60) {
            std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)*a2;
          if (v13 >> 3 > v12) {
            unint64_t v12 = v13 >> 3;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14) {
            std::string::size_type v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a2 + 2), v14);
          }
          else {
            std::string::size_type v15 = 0;
          }
          int v16 = &v15[16 * v11];
          *(_OWORD *)int v16 = v21;
          uint64_t v18 = (char *)*a2;
          int v17 = (char *)a2[1];
          std::string::size_type v19 = v16;
          if (v17 != *a2)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            int v17 = (char *)*a2;
          }
          int v10 = v16 + 16;
          *a2 = v19;
          a2[1] = v16 + 16;
          a2[2] = &v15[16 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          _OWORD *v9 = v21;
          int v10 = v9 + 1;
        }
        a2[1] = v10;
      }
    }
  }
  return ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 4;
}

unint64_t ims::findNotQuoted(uint64_t *a1, unsigned __int8 a2)
{
  char v3 = 0;
  int v4 = 0;
  unint64_t result = 0;
  unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80u) == 0) {
    char v7 = a1;
  }
  else {
    char v7 = (uint64_t *)*a1;
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v8 = *((unsigned __int8 *)a1 + 23);
  if (result < v6)
  {
    do
    {
      if (v8 <= result) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      if ((v3 & 1) == 0)
      {
        int v9 = *((unsigned __int8 *)v7 + result);
        if (v9 == 92)
        {
          char v3 = 1;
          goto LABEL_16;
        }
        if (v9 == 34)
        {
          char v3 = 0;
          v4 ^= 1u;
          goto LABEL_16;
        }
        if (((v9 == a2) & ~v4) != 0) {
          return result;
        }
      }
      char v3 = 0;
LABEL_16:
      ++result;
      if ((v6 & 0x80) == 0) {
        goto LABEL_5;
      }
LABEL_7:
      unint64_t v8 = a1[1];
    }
    while (result < v8);
  }
  return -1;
}

void ims::chomp(std::string *__str, char *__s, char a3)
{
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v8 = 0;
  if (a3)
  {
    while (1)
    {
      std::string::size_type v9 = v6;
      if ((v6 & 0x80) != 0) {
        std::string::size_type v9 = __str->__r_.__value_.__l.__size_;
      }
      if (v8 >= v9) {
        break;
      }
      int v10 = __str;
      if ((v6 & 0x80) != 0) {
        int v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if (!strchr(__s, v10->__r_.__value_.__s.__data_[v8])) {
        break;
      }
      ++v8;
    }
  }
  if (v8 == size)
  {
    if ((v6 & 0x80) != 0)
    {
      *__str->__r_.__value_.__l.__data_ = 0;
      __str->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __str->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__str->__r_.__value_.__s + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
    }
  }
  else
  {
    if ((a3 & 2) != 0 && size >= 2)
    {
      while (1)
      {
        uint64_t v11 = __str;
        if ((v6 & 0x80) != 0) {
          uint64_t v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        if (!strchr(__s, v11->__r_.__value_.__s.__data_[size - 1])) {
          break;
        }
        if (--size <= 1)
        {
          std::string::size_type size = 1;
          break;
        }
      }
    }
    std::string::basic_string(&v12, __str, v8, size - v8, (std::allocator<char> *)&v13);
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str->__r_.__value_.__l.__data_);
    }
    *std::string __str = v12;
  }
}

void ims::chomp(char *__s@<X1>, uint64_t a2@<X0>, char a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  ims::chomp(a4, __s, a3);
}

void sub_1C54B7E98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::addPercentEscapes(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  std::string::size_type v6 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    std::string::size_type v6 = *(const char **)a1;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  if (v7)
  {
    CFStringRef v8 = v7;
    if (a3) {
      CFStringRef v9 = a3;
    }
    else {
      CFStringRef v9 = @":/?#[]@!$&'()*+,;=";
    }
    CFStringRef v10 = CFURLCreateStringByAddingPercentEscapes(0, v7, a2, v9, 0x8000100u);
    CFRelease(v8);
    if (v10)
    {
      BOOL v11 = ims::convertCFString(v10, (std::string *)a1, 0x8000100u);
      CFRelease(v10);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"CreateStringByAddingPercentEscapes failed for '", 47);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"addPercentEscapes: couldn't create CFString", 43);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  return 0;
}

void sub_1C54B80E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::convertCFString(const __CFString *a1, std::string *a2, CFStringEncoding a3)
{
  if (!a1) {
    return 0;
  }
  memset(&v10, 0, sizeof(v10));
  CFIndex Length = CFStringGetLength(a1);
  std::vector<char>::__append(&v10, Length + 1);
  int CString = CFStringGetCString(a1, v10.__begin_, v10.__end_ - v10.__begin_, a3);
  BOOL v8 = CString != 0;
  if (CString) {
    std::string::__assign_external(a2, v10.__begin_);
  }
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  return v8;
}

void sub_1C54B81C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::removePercentEscapes(uint64_t a1)
{
  if (std::string::find((const std::string *)a1, 37, 0) == -1) {
    return 1;
  }
  uint64_t v2 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v2 = *(const char **)a1;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFStringRef v5 = CFURLCreateStringByReplacingPercentEscapes(0, v3, &stru_1F20EAF20);
    CFRelease(v4);
    if (v5)
    {
      BOOL v6 = ims::convertCFString(v5, (std::string *)a1, 0x8000100u);
      CFRelease(v5);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"CreateStringByReplacingPercentEscapes failed for '", 50);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"'", 1);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::error((uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"removePercentEscapes: couldn't create CFString", 46);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return 0;
}

void sub_1C54B8414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::caseInsensitiveStringCompare(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void ims::addQuotes(uint64_t a1, int a2)
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  if (!a2 || !ims::hasQuotes((uint64_t *)a1))
  {
    std::operator+<char>();
    CFStringRef v3 = std::string::append(&__p, "\"", 1uLL);
    std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
    v8[0] = v3->__r_.__value_.__l.__size_;
    *(void *)((char *)v8 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    uint64_t v6 = v8[0];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 15) = *(void *)((char *)v8 + 7);
    *(unsigned char *)(a1 + SipRegistrationClient::handlePathSatisfied(this - 23) = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C54B8574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::hasQuotes(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v2 = a1[1];
    if (v2 <= 1) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
    if (*(unsigned char *)a1 != 34) {
      return 0;
    }
    return *((unsigned char *)a1 + v2 - 1) == 34;
  }
  uint64_t v1 = 0;
  unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 >= 2 && *(unsigned char *)a1 == 34) {
    return *((unsigned char *)a1 + v2 - 1) == 34;
  }
  return v1;
}

double ims::removeQuotes(uint64_t a1)
{
  if (ims::hasQuotes((uint64_t *)a1))
  {
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v3 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    }
    std::string::basic_string(&v4, (const std::string *)a1, 1uLL, v3 - 2, (std::allocator<char> *)&v5);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    double result = *(double *)&v4.__r_.__value_.__l.__data_;
    *(std::string *)a1 = v4;
  }
  return result;
}

double ims::removeQuotes@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return ims::removeQuotes((uint64_t)a2);
}

void sub_1C54B86D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ims::unescapeString(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  BOOL v6 = *((char *)a1 + 23) < 0;
  unint64_t v7 = a1[1];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v8 = a1[1];
  }
  if (v8)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v6) {
        uint64_t v14 = (uint64_t *)*a1;
      }
      else {
        uint64_t v14 = a1;
      }
      int v15 = *((unsigned __int8 *)v14 + v12);
      int v16 = v13 | (v15 != a2);
      if (v13 & 1 | (v15 != a2))
      {
        std::string::value_type v17 = v15;
        if (v13)
        {
          char v18 = *(char *)(a3 + 23) >= 0 ? (char *)a3 : *(char **)a3;
          if (!strchr(v18, (char)v15)) {
            std::string::push_back(a4, a2);
          }
        }
        std::string::push_back(a4, v17);
        unint64_t v5 = *((unsigned __int8 *)a1 + 23);
        unint64_t v7 = a1[1];
      }
      int v13 = v16 ^ 1;
      ++v12;
      BOOL v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0) {
        unint64_t v19 = v5;
      }
      else {
        unint64_t v19 = v7;
      }
    }
    while (v12 < v19);
  }
}

void sub_1C54B87E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__darwin_time_t ims::getCurrentNTPTimestampInMilliseconds(ims *this)
{
  v2.tv_sec = 0;
  *(void *)&v2.tv_usec = 0;
  gettimeofday(&v2, 0);
  return 1000 * v2.tv_sec + v2.tv_usec / 1000 + 2208988800000;
}

uint64_t ims::formatTime(ims *this, uint64_t a2, tm *a3)
{
  uint64_t v9 = 0;
  std::vector<char> v10 = this;
  __p[0] = 0;
  __p[1] = 0;
  std::string v4 = __p;
  ims::ctime((ims *)&v10, a3, __p);
  unint64_t v5 = (void **)__p[0];
  *((unsigned char *)__p[0] + 24) = 0;
  if (v9 < 0) {
    std::string v4 = v5;
  }
  size_t v6 = strlen((const char *)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v4, v6);
  *(unsigned char *)(a2 + 17) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1C54B88F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::formatTimeIntervalMillis(unint64_t this, uint64_t a2, ImsOutStream *a3)
{
  if (!this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"0s", 2);
    unint64_t v5 = (unsigned char *)(a2 + 17);
LABEL_22:
    *unint64_t v5 = 0;
    return a2;
  }
  unint64_t v4 = this % 0x3E8;
  if (this <= 0x3E7)
  {
    std::ostream::operator<<();
    *(unsigned char *)(a2 + 17) = 0;
    unint64_t v5 = (unsigned char *)(a2 + 17);
    size_t v6 = *(void **)(a2 + 8);
    unint64_t v7 = "ms";
    uint64_t v8 = 2;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    goto LABEL_22;
  }
  unint64_t v9 = this / 0x3E8 - 86400 * ((unint64_t)((this / 0x3E8 * (unsigned __int128)0x308B91419CA253uLL) >> 64) >> 6);
  if (this <= 0x5265BFF)
  {
    unsigned int v11 = v9 % 0xE10;
    unsigned int v10 = v9 % 0xE10;
    if (v9 < 0xE10)
    {
      uint64_t v12 = v9 % 0xE10 % 0x3C;
      if (v11 < 0x3C)
      {
        if (!v12) {
          return a2;
        }
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  std::ostream::operator<<();
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"d", 1);
  *(unsigned char *)(a2 + 17) = 0;
  unsigned int v10 = v9 % 0xE10;
  if (v9 >= 0xE10)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" ", 1);
    *(unsigned char *)(a2 + 17) = 0;
LABEL_12:
    std::ostream::operator<<();
    *(unsigned char *)(a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"h", 1);
    *(unsigned char *)(a2 + 17) = 0;
  }
  uint64_t v12 = (unsigned __int16)v10 % 0x3Cu;
  if (v10 < 0x3C) {
    goto LABEL_16;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" ", 1);
  *(unsigned char *)(a2 + 17) = 0;
LABEL_15:
  std::ostream::operator<<();
  *(unsigned char *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"m", 1);
  *(unsigned char *)(a2 + 17) = 0;
LABEL_16:
  if (v12)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" ", 1);
    *(unsigned char *)(a2 + 17) = 0;
LABEL_18:
    std::ostream::operator<<();
    *(unsigned char *)(a2 + 17) = 0;
    unint64_t v5 = (unsigned char *)(a2 + 17);
    if (v4)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)".", 1);
      *(unsigned char *)(a2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(a2 + 17) = 0;
    }
    size_t v6 = *(void **)(a2 + 8);
    unint64_t v7 = "s";
    uint64_t v8 = 1;
    goto LABEL_21;
  }
  return a2;
}

void ims::formatTimeInterval(ims *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C54B8C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ims::formatTimeAndIntervalFromNow(ims *this, uint64_t a2, tm *a3)
{
  ims::formatTime(this, a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(a2 + 17) = 0;
  time_t v5 = time(0);
  if (v5 >= (uint64_t)this)
  {
    if (v5 <= (uint64_t)this)
    {
      unint64_t v7 = *(void **)(a2 + 8);
      uint64_t v8 = "now";
      uint64_t v9 = 3;
    }
    else
    {
      ims::formatTimeIntervalMillis(1000 * (v5 - (void)this), a2, v6);
      unint64_t v7 = *(void **)(a2 + 8);
      uint64_t v8 = " ago";
      uint64_t v9 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(unsigned char *)(a2 + 17) = 0;
  }
  else
  {
    ims::formatTimeIntervalMillis(1000 * ((void)this - v5), a2, v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)")", 1);
  *(unsigned char *)(a2 + 17) = 0;
  return a2;
}

void ims::performBlock(IMSClientManager *a1)
{
  IMSClientManager::instance(a1);
  IMSClientManager::queue(&queue);
  dispatch_async(queue, a1);
  if (queue) {
    dispatch_release(queue);
  }
}

void ims::userHomeDirectory(uint64_t *a1@<X0>, void *a2@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  uint64_t v8 = 0;
  std::vector<char>::size_type v4 = sysconf(71);
  memset(&v7, 0, sizeof(v7));
  if (v4) {
    std::vector<char>::__append(&v7, v4);
  }
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_9:
      uid_t v6 = getuid();
      int v5 = getpwuid_r(v6, &v9, v7.__begin_, v4, &v8);
      goto LABEL_10;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_9;
  }
  int v5 = getpwnam_r((const char *)a1, &v9, v7.__begin_, v4, &v8);
LABEL_10:
  if (v5 || !v9.pw_dir)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v9.pw_dir);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1C54B8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::isCarrierInstall(ims *this)
{
  CFBooleanRef v1 = (const __CFBoolean *)MGCopyAnswer();
  std::vector<char>::size_type v4 = &unk_1F20E38B0;
  CFBooleanRef BOOLean = v1;
  if (v1)
  {
    CFRetain(v1);
    std::vector<char>::size_type v4 = &unk_1F20E3B50;
    BOOL v2 = CFBooleanGetValue(BOOLean) != 0;
  }
  else
  {
    BOOL v2 = 0;
    std::vector<char>::size_type v4 = &unk_1F20E3B50;
  }
  ims::CFType::~CFType((ims::CFType *)&v4);
  return v2;
}

void sub_1C54B9048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::osVersion(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, @"ProductVersion", (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54B90B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::simpleMobileGestaltString(std::string *this, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    *this = *(std::string *)a3;
  }
  std::vector<char> v7 = &unk_1F20E3908;
  CFStringRef v8 = (const __CFString *)MGCopyAnswer();
  memset(&__str, 0, sizeof(__str));
  ims::CFString::asString(v8, (const void *)0x8000100, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(this, &__str);
    char v5 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  ims::CFType::~CFType((ims::CFType *)&v7);
}

void sub_1C54B91B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a16);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

void ims::osBuild(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, @"BuildVersion", (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54B9250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::deviceClass(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, @"DeviceClass", (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C54B92C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::shortDeviceClass(void *a1@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  ims::deviceClass(&__p);
  std::string::basic_string[abi:ne180100]<0>(&v27, "Mac");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v4 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  char v5 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uid_t v6 = &v27;
  }
  else {
    uid_t v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  int v7 = strcasecmp((const char *)p_p, (const char *)v6);
  int v8 = v7;
  if ((v4 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_9;
    }
LABEL_37:
    char v26 = "A";
    goto LABEL_42;
  }
  operator delete(v5);
  if (!v8) {
    goto LABEL_37;
  }
LABEL_9:
  ims::CFString::asString(@"iPod", (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    passwd v9 = &__p;
  }
  else {
    passwd v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v10 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  unsigned int v11 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v27;
  }
  else {
    uint64_t v12 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  int v13 = strcasecmp((const char *)v9, (const char *)v12);
  int v14 = v13;
  if ((v10 & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_17;
    }
LABEL_39:
    char v26 = "P";
    goto LABEL_42;
  }
  operator delete(v11);
  if (!v14) {
    goto LABEL_39;
  }
LABEL_17:
  ims::CFString::asString(@"iPad", (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &__p;
  }
  else {
    int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v16 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  std::string::value_type v17 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v18 = &v27;
  }
  else {
    char v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  int v19 = strcasecmp((const char *)v15, (const char *)v18);
  int v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20) {
      goto LABEL_25;
    }
LABEL_41:
    char v26 = "T";
    goto LABEL_42;
  }
  if (!v19) {
    goto LABEL_41;
  }
LABEL_25:
  ims::CFString::asString(@"Watch", (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v21 = &__p;
  }
  else {
    long long v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v22 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  BOOL v23 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v27;
  }
  else {
    uint64_t v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  int v25 = strcasecmp((const char *)v21, (const char *)v24);
  if (v22 < 0) {
    operator delete(v23);
  }
  if (v25) {
    char v26 = "M";
  }
  else {
    char v26 = "C";
  }
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(a1, v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54B94D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::userAssignedDeviceName(std::string *a1@<X8>)
{
  ims::deviceClass(&__p);
  ims::simpleMobileGestaltString(a1, @"UserAssignedDeviceName", (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54B9558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::substituteVar@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v32, 0, sizeof(v32));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  for (std::string::size_type i = 0; ; std::string::size_type i = v26 + v13)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = a1->__r_.__value_.__l.__size_;
      if (i >= size) {
        goto LABEL_48;
      }
      std::string::size_type v9 = a1->__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = (std::string::size_type)a1;
      if (i >= size) {
        goto LABEL_48;
      }
    }
    int v10 = *(char *)(a2 + 23);
    unsigned int v11 = v10 >= 0 ? (char *)a2 : *(char **)a2;
    int64_t v12 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    std::string::size_type v13 = i;
    if (v12) {
      break;
    }
LABEL_23:
    std::string::basic_string(&v31, a1, i, v13 - i, (std::allocator<char> *)v38);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v21 = &v31;
    }
    else {
      long long v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v31.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v21, v22);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(a2 + 8);
    }
  }
  int v14 = (void *)(v9 + i);
  int v15 = (char *)(v9 + size);
  int64_t v16 = size - i;
  if (v16 >= v12)
  {
    int v17 = *v11;
    do
    {
      int64_t v18 = v16 - v12;
      if (v18 == -1) {
        break;
      }
      int v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19) {
        break;
      }
      int v20 = v19;
      if (!memcmp(v19, v11, v12))
      {
        if (v20 == v15) {
          break;
        }
        std::string::size_type v13 = (std::string::size_type)&v20[-v9];
        if (&v20[-v9] == (char *)-1) {
          break;
        }
        goto LABEL_23;
      }
      int v14 = v20 + 1;
      int64_t v16 = v15 - (v20 + 1);
    }
    while (v16 >= v12);
  }
  std::string::basic_string(&v31, a1, i, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v38);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v27 = &v31;
  }
  else {
    std::string v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = v31.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v27, v28);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_48:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32 + 8, a4);
  *(void *)&v32[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v32 + *(void *)(*(void *)&v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v32[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v36);
}

void sub_1C54B9880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void ims::makeUrnFromImei(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6)
  {
    memset(&v47[24], 0, 48);
    *(void *)uint64_t v47 = &unk_1F20B2680;
    *(void *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 1073741825;
    int v14 = (const std::string *)ImsResult::operator<<<char [14]>((uint64_t)v47, "IMEI is empty");
    ImsResult::ImsResult((ImsResult *)a5, v14);
    ImsResult::~ImsResult((ImsResult *)v47);
    return;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v51 = 0;
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  long long v48 = 0u;
  memset(v47, 0, sizeof(v47));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"imei:", 5);
  if (std::string::find((const std::string *)a1, 45, 0) != -1)
  {
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(void *)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v12, v13);
LABEL_66:
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v47[8], &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    char v36 = 1;
    goto LABEL_69;
  }
  memset(&__str, 0, sizeof(__str));
  LODWORD(v15) = *(char *)(a1 + 23);
  if ((v15 & 0x80000000) == 0)
  {
    std::string __str = *(std::string *)a1;
LABEL_16:
    int v16 = 0;
    uint64_t v17 = v15;
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  LODWORD(v15) = *(char *)(a1 + 23);
  if ((v15 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  uint64_t v17 = *(void *)(a1 + 8);
  int v16 = 1;
LABEL_17:
  if (v17 == 14)
  {
    if (a3) {
      goto LABEL_38;
    }
    uint64_t v18 = *(void *)(a1 + 8);
    if (!v16) {
      uint64_t v18 = v15;
    }
    if (!v18) {
      goto LABEL_38;
    }
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = v16 ? *(void *)a1 : a1;
    do
    {
      if (v20) {
        int v22 = ims::sumOfDouble[(*(unsigned char *)(v21 + v20) - 48)];
      }
      else {
        int v22 = (*(unsigned char *)(v21 + v20) - 48);
      }
      v19 += v22;
      ++v20;
    }
    while (v18 != v20);
    unsigned int v23 = v19 % 0xA;
    if (v23) {
      std::string::value_type v24 = (10 - v23) | 0x30;
    }
    else {
LABEL_38:
    }
      std::string::value_type v24 = 48;
    std::string::push_back(&__str, v24);
LABEL_40:
    std::string::basic_string(&v45, &__str, 0, 8uLL, (std::allocator<char> *)&v44);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v45;
    }
    else {
      uint64_t v26 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v26, size);
    v44.__r_.__value_.__s.__data_[0] = 45;
    char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v44, 1);
    std::string::basic_string(&v44, &__str, 8uLL, 6uLL, (std::allocator<char> *)&v43);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v44;
    }
    else {
      uint64_t v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v44.__r_.__value_.__l.__size_;
    }
    std::string::value_type v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v43.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&v43, 1);
    std::string::basic_string(&v43, &__str, 0xEuLL, 1uLL, (std::allocator<char> *)&v52);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v34 = &v43;
    }
    else {
      long long v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v43.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_66;
  }
  uint64_t v15 = v15;
  if (v16) {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  if (v15 == 15)
  {
    if (a3)
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      p_str->__r_.__value_.__s.__data_[14] = 48;
    }
    goto LABEL_40;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v36 = 0;
LABEL_69:
  *(void *)uint64_t v47 = *MEMORY[0x1E4FBA418];
  *(void *)&v47[*(void *)(*(void *)v47 - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&v47[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v48) < 0) {
    operator delete(*(void **)&v47[72]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](v50);
  if ((v36 & 1) == 0)
  {
    memset(&v47[24], 0, 48);
    *(void *)uint64_t v47 = &unk_1F20B2680;
    *(void *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 0x40000000;
    uint64_t v37 = ImsResult::operator<<<char [39]>((uint64_t)v47, "couldn't format device id as an IMEI: ");
    int v38 = (const std::string *)ImsResult::operator<<<std::string>(v37, a1);
    ImsResult::ImsResult((ImsResult *)a5, v38);
    ImsResult::~ImsResult((ImsResult *)v47);
    goto LABEL_91;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "gsma");
  SipUri::makeUrn((SipUri *)a4);
  std::string::operator=((std::string *)(a4 + 224), (const std::string *)v47);
  if ((v47[23] & 0x80000000) != 0) {
    operator delete(*(void **)v47);
  }
  SipUri::setNamespaceStr(a4, &__p);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v39 = *(void *)(a2 + 8);
    if (v39 - 1 < 2)
    {
      memset(v47, 0, 24);
      std::string::__init_copy_ctor_external((std::string *)v47, *(const std::string::value_type **)a2, v39);
      goto LABEL_80;
    }
  }
  else if (*(unsigned __int8 *)(a2 + 23) - 1 <= 1)
  {
    *(_OWORD *)uint64_t v47 = *(_OWORD *)a2;
    *(void *)&v47[16] = *(void *)(a2 + 16);
LABEL_80:
    uint64_t v40 = v47[23];
    if (v47[23] < 0) {
      uint64_t v40 = *(void *)&v47[8];
    }
    if (v40 == 1)
    {
      std::operator+<char>();
      if ((v47[23] & 0x80000000) != 0) {
        operator delete(*(void **)v47);
      }
      *(std::string *)uint64_t v47 = __str;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "svn");
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 72), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v45);
    std::string::operator=((std::string *)(v41 + 7), (const std::string *)v47);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((v47[23] & 0x80000000) != 0) {
      operator delete(*(void **)v47);
    }
  }
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(void *)a5 = &unk_1F20B2680;
  *(void *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
LABEL_91:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C54B9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ims::makeUrnFromUuid(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    memset(&v35, 0, sizeof(v35));
    uint64_t v46 = 0;
    long long v44 = 0u;
    memset(v45, 0, sizeof(v45));
    long long v43 = 0u;
    memset(v42, 0, sizeof(v42));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    memset(&__str, 0, sizeof(__str));
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __str = *(std::string *)a1;
    }
    while (1)
    {
      char v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __str.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_63;
      }
      int v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      int v11 = memchr(v10, 45, size);
      std::string::size_type v12 = v11 - (unsigned char *)v10;
      if (!v11 || v12 == -1) {
        break;
      }
      std::string::erase(&__str, v12, 1uLL);
    }
    if (size != 32)
    {
LABEL_63:
      char v32 = 0;
      if ((v8 & 0x80) == 0) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    std::string::basic_string(&v40, &__str, 0, 8uLL, (std::allocator<char> *)&v39);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = &v40;
    }
    else {
      int v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v40.__r_.__value_.__l.__size_;
    }
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v14, v15);
    v39.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v39, 1);
    std::string::basic_string(&v39, &__str, 8uLL, 4uLL, (std::allocator<char> *)&v38);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v39;
    }
    else {
      uint64_t v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v39.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    v38.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v38, 1);
    std::string::basic_string(&v38, &__str, 0xCuLL, 4uLL, (std::allocator<char> *)&v37);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v38;
    }
    else {
      int v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v38.__r_.__value_.__l.__size_;
    }
    std::string::value_type v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    v37.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v37, 1);
    std::string::basic_string(&v37, &__str, 0x10uLL, 4uLL, (std::allocator<char> *)&v36);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v37;
    }
    else {
      uint64_t v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v37.__r_.__value_.__l.__size_;
    }
    std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v36.__r_.__value_.__s.__data_[0] = 45;
    char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v36, 1);
    std::string::basic_string(&v36, &__str, 0x14uLL, 0xCuLL, (std::allocator<char> *)&v47);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v36;
    }
    else {
      uint64_t v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v36.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v42[8], &v40);
    std::string v35 = v40;
    char v32 = 1;
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_64:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_65:
    *(void *)std::string::size_type v42 = *MEMORY[0x1E4FBA418];
    *(void *)&v42[*(void *)(*(void *)v42 - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *(void *)&v42[8] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v43) < 0) {
      operator delete(*(void **)&v42[72]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v45);
    if (v32)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "uuid");
      SipUri::makeUrn((SipUri *)a2);
      std::string::operator=((std::string *)(a2 + 224), (const std::string *)v42);
      if ((v42[23] & 0x80000000) != 0) {
        operator delete(*(void **)v42);
      }
      SipUri::setNamespaceStr(a2, &v35);
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      memset(&v42[24], 0, 48);
      *(void *)std::string::size_type v42 = &unk_1F20B2680;
      *(void *)&v42[8] = &_bambiDomain;
      *(_DWORD *)&v42[16] = 0x40000000;
      uint64_t v33 = ImsResult::operator<<<char [39]>((uint64_t)v42, "couldn't format device id as an UUID: ");
      long long v34 = (const std::string *)ImsResult::operator<<<std::string>(v33, a1);
      ImsResult::ImsResult((ImsResult *)a3, v34);
      ImsResult::~ImsResult((ImsResult *)v42);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    memset(&v42[24], 0, 48);
    *(void *)std::string::size_type v42 = &unk_1F20B2680;
    *(void *)&v42[8] = &_bambiDomain;
    *(_DWORD *)&v42[16] = 1073741825;
    int v7 = (const std::string *)ImsResult::operator<<<char [14]>((uint64_t)v42, "UUID is empty");
    ImsResult::ImsResult((ImsResult *)a3, v7);
    ImsResult::~ImsResult((ImsResult *)v42);
  }
}

void sub_1C54BA628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a52);
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

uint64_t ims::makeHexString@<X0>(ims *this@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  *(_DWORD *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v7
                                                                                  + *(void *)(*(void *)&v7[0] - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
  char v13 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, &v13);
  for (; a2; --a2)
  {
    *(void *)((char *)&v7[1] + *(void *)(*(void *)&v7[0] - 24) + 8) = 2;
    this = (ims *)((char *)this + 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7 + 8, a3);
  *(void *)&v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(*(void *)&v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v7[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v11);
}

void sub_1C54BA920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t ims::strToUint32(uint64_t *a1, uint64_t a2)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return a2;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return a2;
  }
  unint64_t v3 = strtoul((const char *)a1, 0, 10);
  if (v3 || *__error() != 22) {
    return v3;
  }
  return a2;
}

uint64_t ims::strToLong(uint64_t *a1, uint64_t *a2)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  uint64_t v3 = strtol((const char *)a1, 0, 10);
  if (!v3 && *__error() == 22) {
    return 0;
  }
  *a2 = v3;
  return 1;
}

BOOL ims::strToBool(uint64_t a1, int a2)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "false");
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v3 = (const char *)a1;
    }
    else {
      uint64_t v3 = *(const char **)a1;
    }
    char v4 = v29;
    if (v29 >= 0) {
      char v5 = v28;
    }
    else {
      char v5 = (void **)v28[0];
    }
    if (!strcasecmp(v3, (const char *)v5))
    {
      BOOL v13 = 0;
      if ((v4 & 0x80) == 0) {
        return v13;
      }
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "off");
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v6 = (const char *)a1;
    }
    else {
      uint64_t v6 = *(const char **)a1;
    }
    char v7 = v27;
    if (v27 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    if (strcasecmp(v6, (const char *)v8))
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "no");
      if (*(char *)(a1 + 23) >= 0) {
        long long v9 = (const char *)a1;
      }
      else {
        long long v9 = *(const char **)a1;
      }
      int v10 = v25;
      int v11 = (void *)v24[0];
      if (v25 >= 0) {
        uint64_t v12 = (const char *)v24;
      }
      else {
        uint64_t v12 = (const char *)v24[0];
      }
      BOOL v13 = strcasecmp(v9, v12) != 0;
      if (v10 < 0) {
LABEL_23:
      }
        operator delete(v11);
LABEL_24:
      if ((v27 & 0x80) == 0) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    BOOL v13 = 0;
    if (v7 < 0) {
      goto LABEL_25;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "true");
    if (*(char *)(a1 + 23) >= 0) {
      std::string::size_type v15 = (const char *)a1;
    }
    else {
      std::string::size_type v15 = *(const char **)a1;
    }
    char v16 = v29;
    if (v29 >= 0) {
      uint64_t v17 = v28;
    }
    else {
      uint64_t v17 = (void **)v28[0];
    }
    if (!strcasecmp(v15, (const char *)v17))
    {
      BOOL v13 = 1;
      if ((v16 & 0x80) == 0) {
        return v13;
      }
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "on");
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v18 = (const char *)a1;
    }
    else {
      uint64_t v18 = *(const char **)a1;
    }
    char v19 = v27;
    if (v27 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    if (strcasecmp(v18, (const char *)v20))
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "yes");
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v21 = (const char *)a1;
      }
      else {
        uint64_t v21 = *(const char **)a1;
      }
      int v22 = v25;
      int v11 = (void *)v24[0];
      if (v25 >= 0) {
        std::string::size_type v23 = (const char *)v24;
      }
      else {
        std::string::size_type v23 = (const char *)v24[0];
      }
      BOOL v13 = strcasecmp(v21, v23) == 0;
      if (v22 < 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    BOOL v13 = 1;
    if (v19 < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
LABEL_26:
  if (v29 < 0) {
LABEL_27:
  }
    operator delete(v28[0]);
  return v13;
}

void sub_1C54BAC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

char *ims::lowerCase(char *result)
{
  CFBooleanRef v1 = result;
  if (result[23] < 0)
  {
    CFBooleanRef v1 = *(char **)result;
    uint64_t v2 = *((void *)result + 1);
  }
  else
  {
    uint64_t v2 = result[23];
  }
  uint64_t v3 = &v1[v2];
  while (v1 != v3)
  {
    double result = (char *)__tolower(*v1);
    *v1++ = (char)result;
  }
  return result;
}

char *ims::lowerCase@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return ims::lowerCase((char *)a2);
}

void sub_1C54BAD04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *ims::upperCase(char *result)
{
  uint64_t v1 = result;
  if (result[23] < 0)
  {
    uint64_t v1 = *(char **)result;
    uint64_t v2 = *((void *)result + 1);
  }
  else
  {
    uint64_t v2 = result[23];
  }
  uint64_t v3 = &v1[v2];
  while (v1 != v3)
  {
    double result = (char *)__toupper(*v1);
    *v1++ = (char)result;
  }
  return result;
}

char *ims::upperCase@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return ims::upperCase((char *)a2);
}

void sub_1C54BADC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ims::normalize(std::string *__str, int a2)
{
  if (a2 == 1)
  {
    ims::upperCase((char *)__str);
  }
  else if (a2 == 2)
  {
    ims::lowerCase((char *)__str);
  }
  ims::chomp(__str, "\r\n\t ", 3);
}

void ims::normalize(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  ims::normalize(a3, a2);
}

void sub_1C54BAEA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::fileExists(const std::string *__s, std::string *a2)
{
  memset(&__str, 0, sizeof(__str));
  LODWORD(size) = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((size & 0x80000000) == 0)
  {
    std::string __str = *__s;
LABEL_4:
    uint64_t size = size;
    char v5 = __s;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, __s->__r_.__value_.__l.__data_, __s->__r_.__value_.__l.__size_);
  LODWORD(size) = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((size & 0x80000000) == 0) {
    goto LABEL_4;
  }
  char v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  uint64_t size = __s->__r_.__value_.__l.__size_;
LABEL_5:
  if (size >= 2)
  {
    uint64_t v6 = (const std::string *)((char *)v5 + size);
    char v7 = (std::string *)v5;
    do
    {
      char v8 = (const std::string *)memchr(v7, 126, size - 1);
      if (!v8) {
        break;
      }
      if (LOWORD(v8->__r_.__value_.__l.__data_) == 12158)
      {
        if (v8 != v6 && v8 == v5)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "~");
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v15 = 0;
          ims::userHomeDirectory((uint64_t *)__p, v16);
          ims::substituteVar(__s, (uint64_t)v18, (uint64_t)v16, &v13);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v13.st_dev;
          __str.__r_.__value_.__r.__words[2] = *(void *)&v13.st_uid;
          HIBYTE(v13.st_gid) = 0;
          LOBYTE(v13.st_dev) = 0;
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
          if (v19 < 0) {
            operator delete(v18[0]);
          }
        }
        break;
      }
      char v7 = (std::string *)((char *)&v8->__r_.__value_.__l.__data_ + 1);
      uint64_t size = (char *)v6 - (char *)v7;
    }
    while ((char *)v6 - (char *)v7 >= 2);
  }
  memset(&v13, 0, sizeof(v13));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v10 = stat((const char *)p_str, &v13);
  int v11 = v10;
  if (a2 && !v10) {
    std::string::operator=(a2, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v11 == 0;
}

void sub_1C54BB090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 81) < 0) {
    operator delete(*(void **)(v33 - 104));
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::makeAwdCallId@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v5, a1);
  uint64_t v10 = 0;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  *(_DWORD *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v5
                                                                                  + *(void *)(*(void *)&v5[0] - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
  char v11 = 48;
  uint64_t v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, &v11);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 2;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5 + 8, a2);
  *(void *)&v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v5[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v9);
}

void sub_1C54BB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ims::convertBundleIdToUuid(void *a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v4 = (void *)NEHelperCacheCopyAppUUIDMapping();
  if (v4)
  {
    char v5 = v4;
    memset(out, 0, 37);
    uuid = xpc_array_get_uuid(v4, 0);
    uuid_unparse(uuid, out);
    std::string::basic_string[abi:ne180100]<0>(&v7, out);
    *(_OWORD *)a1 = v7;
    a1[2] = v8;
    xpc_release(v5);
  }
}

void sub_1C54BB384(_Unwind_Exception *exception_object)
{
}

void ims::getCpimContentType()
{
  memset(v0, 0, sizeof(v0));
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)v0, "(Content-Type: ([^ \r\n]*))", 1);
}

void sub_1C54BB61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::locale a30)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a30);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(this);
}

void std::vector<std::string_view>::__throw_length_error[abi:ne180100]()
{
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  char v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1C54BB758(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1C878E220]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1C54BB7C4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1C54BB998(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BBA10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  end = a1->__end_;
  long long v7 = a2;
  do
  {
    uint64_t v8 = v7;
    long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    long long v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    char v11 = v8 + 1;
    do
    {
      uint64_t v8 = v11;
      char v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  char v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a3;
  end = a1->__end_;
  long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    long long v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  end = a1->__end_;
  long long v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    char v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    long long v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  end = a1->__end_;
  long long v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    char v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    long long v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BC034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C54BC0DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1C878E320);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    long long v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      long long v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        long long v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            memset(&v18, 0, sizeof(v18));
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            memset(&v18, 0, sizeof(v18));
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            uint64_t v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1C54BC780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        long long v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unsigned int v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    LODWORD(__max) = 0;
    int v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::string::size_type v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        char v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unsigned int v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unsigned int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1C54BCF10(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BCF78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4CB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4CB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1F20D4CF8;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20D4CF8;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20D4CF8;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1C878E320);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  long long v21 = 0u;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)std::string __p = 0u;
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  *((void *)&v18[0] + 1) = *(void *)(a2 + 24);
  *(void *)&v18[1] = *((void *)&v18[0] + 1);
  std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)__p, v4, (std::vector<std::csub_match>::const_reference)((char *)v18 + 8));
  *(void *)&long long v19 = v5;
  *((void *)&v19 + 1) = v5;
  LOBYTE(v20[0]) = 0;
  *(_OWORD *)((char *)v20 + 8) = *(_OWORD *)((char *)v18 + 8);
  BYTE8(v20[1]) = BYTE8(v18[1]);
  *((void *)&v21 + 1) = v5;
  LOBYTE(v21) = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    uint64_t v9 = (char *)__p[0];
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  uint64_t v9 = (char *)__p[0];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!v9) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &v9[24 * v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
    *(unsigned char *)(v16 + 16) = v15[16];
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p[1] = v9;
  operator delete(v9);
}

void sub_1C54BD7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  std::string::size_type v42 = 0;
  long long v43 = 0;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(void *)&__x.matched = 0;
    __x.first = a3;
    LODWORD(v40[0]) = 0;
    memset((char *)v40 + 8, 0, 80);
    *(void *)((char *)&v40[5] + 5) = 0;
    long long v43 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v42, (uint64_t)v40);
    if (*((void *)&v40[3] + 1))
    {
      *(void *)&void v40[4] = *((void *)&v40[3] + 1);
      operator delete(*((void **)&v40[3] + 1));
    }
    if (*(void *)&v40[2])
    {
      *((void *)&v40[2] + 1) = *(void *)&v40[2];
      operator delete(*(void **)&v40[2]);
    }
    std::string v38 = a4;
    uint64_t v13 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v43 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v14 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *((unsigned char *)v14 - 4) = a6;
    std::string v39 = a3;
    signed int v15 = a3 - a2;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        size_t v18 = v14 - 1;
        uint64_t v17 = *((void *)v14 - 2);
        long long v19 = v14 - 6;
        if (v17) {
          (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v14 - 6);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            BOOL v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              uint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            long long v21 = v43 - 6;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v43 - 12);
            long long v43 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            memset(v40, 0, sizeof(v40));
            long long v22 = *(v14 - 5);
            v40[0] = *v19;
            v40[1] = v22;
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v40[2], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            memset((char *)&v40[3] + 8, 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v40[3] + 8, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *v18;
            *(void *)((char *)&v40[5] + 5) = *(void *)((char *)v14 - 11);
            *(void *)&v40[5] = v23;
            (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v14 - 6);
            (*(void (**)(void, void, _OWORD *))(**(void **)&v40[5] + 24))(*(void *)&v40[5], 0, v40);
            std::string::value_type v24 = v43;
            if ((unint64_t)v43 >= v44)
            {
              long long v43 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v42, (uint64_t)v40);
              if (*((void *)&v40[3] + 1))
              {
                *(void *)&void v40[4] = *((void *)&v40[3] + 1);
                operator delete(*((void **)&v40[3] + 1));
              }
            }
            else
            {
              long long v25 = v40[1];
              *long long v43 = v40[0];
              v24[1] = v25;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              void v24[2] = v40[2];
              *((void *)v24 + 6) = *(void *)&v40[3];
              memset(&v40[2], 0, 24);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)((char *)&v40[3] + 8);
              *((void *)v24 + 9) = *((void *)&v40[4] + 1);
              memset((char *)&v40[3] + 8, 0, 24);
              uint64_t v26 = *(void *)&v40[5];
              *(void *)((char *)v24 + 85) = *(void *)((char *)&v40[5] + 5);
              *((void *)v24 + 10) = v26;
              long long v43 = v24 + 6;
            }
            if (*(void *)&v40[2])
            {
              *((void *)&v40[2] + 1) = *(void *)&v40[2];
              operator delete(*(void **)&v40[2]);
            }
LABEL_23:
            unint64_t v14 = v43;
            ++v16;
            if (v42 == v43) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)&v40[0] = &v42;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_1C54BDC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  CFStringRef value = this->__end_cap_.__value_;
  std::vector<char>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      size_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      long long v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      CFStringRef value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BDF7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BDFD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1C54BE124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v8 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v8 - 40) = result;
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      uint64_t v12 = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 11) = *(void *)(a3 + v7 - 11);
      *(void *)(v8 - 16) = v12;
      v7 -= 96;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  CFStringRef value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      signed int v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    size_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    long long v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *std::pair<const char *, const char *> v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    uint64_t v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  CFStringRef value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    signed int v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C54BE638(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C54BE6AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    __n128 result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2 + 1, a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BEA8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BEC50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  int v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1C54BF2FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54BF364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F20D4D88;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1C54BF53C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  int v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4D88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4D88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4DD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4DD0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4E60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4E60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4EA8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20D4EA8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        __n128 result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (__n128 result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1C54C0070(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      long long v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          uint64_t v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  std::basic_regex<char>::value_type v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    unint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1C54C0428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::basic_regex<char>::value_type v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::locale v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  std::string v17 = *v13;
  if (*v13)
  {
    void v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x1C878E320);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v17 = 0;
    BOOL negate = this->__negate_;
LABEL_156:
    int v82 = negate;
    goto LABEL_157;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_27;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v86 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v87 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v86 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v87 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88, (uint64_t)&__p);
  if ((SHIBYTE(v85) & 0x80000000) == 0)
  {
    if (HIBYTE(v85)) {
      goto LABEL_8;
    }
LABEL_27:
    int v82 = 0;
    uint64_t v17 = 1;
    goto LABEL_28;
  }
  size_t v19 = v84;
  operator delete(__p);
  if (!v19) {
    goto LABEL_27;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v9 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v9)
  {
    uint64_t v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1) {
      uint64_t v10 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v86 == *(p_second - 1) && v87 == *p_second) {
        goto LABEL_164;
      }
      p_second += 2;
      --v10;
    }
    while (v10);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    int v82 = 0;
LABEL_99:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_129;
    }
    std::string __p = 0;
    size_t v84 = 0;
    uint64_t v85 = 0;
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88, (uint64_t *)&__p);
    std::vector<std::string>::pointer v52 = this->__equivalences_.__begin_;
    uint64_t v53 = HIBYTE(v85);
    int64_t v54 = (char *)this->__equivalences_.__end_ - (char *)v52;
    if (!v54)
    {
LABEL_127:
      if ((v53 & 0x80) != 0) {
LABEL_128:
      }
        operator delete(__p);
      goto LABEL_129;
    }
    unint64_t v55 = 0;
    unint64_t v56 = v54 / 24;
    int v57 = __p;
    size_t v58 = v84;
    if (v85 >= 0) {
      size_t v59 = HIBYTE(v85);
    }
    else {
      size_t v59 = v84;
    }
    if (v56 <= 1) {
      uint64_t v60 = 1;
    }
    else {
      uint64_t v60 = v54 / 24;
    }
    for (BOOL i = 1; ; BOOL i = v55 < v56)
    {
      int v62 = &v52[v55];
      std::string::size_type size = HIBYTE(v62->__r_.__value_.__r.__words[2]);
      int v64 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v62->__r_.__value_.__l.__size_;
      }
      if (v59 != size) {
        goto LABEL_120;
      }
      uint64_t v65 = v64 >= 0 ? &v52[v55] : (std::string *)v62->__r_.__value_.__r.__words[0];
      if ((v53 & 0x80) == 0) {
        break;
      }
      BOOL v81 = i;
      uint64_t v67 = v60;
      int v68 = v57;
      size_t v69 = v58;
      if (!memcmp(v57, v65, v58))
      {
        operator delete(__p);
        if (v81) {
          goto LABEL_164;
        }
LABEL_126:
        int v82 = 1;
LABEL_129:
        if ((char)v86 < 0)
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          goto LABEL_142;
        }
        std::regex_traits<char>::char_class_type mask = this->__mask_;
        tab = this->__traits_.__ct_->__tab_;
        std::ctype_base::mask v72 = tab[v86];
        if ((v72 & mask) == 0 && (v86 != 95 || (mask & 0x80) == 0)
          || (char)v87 < 0
          || (tab[v87] & mask) == 0 && ((mask & 0x80) == 0 || v87 != 95))
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          if ((neg_mask & v72) != 0 || v86 == 95 && (neg_mask & 0x80) != 0) {
            goto LABEL_146;
          }
LABEL_142:
          if ((char)v87 < 0) {
            goto LABEL_164;
          }
          if ((this->__traits_.__ct_->__tab_[v87] & neg_mask) != 0 || (int v74 = 1, v87 == 95) && (neg_mask & 0x80) != 0) {
LABEL_146:
          }
            int v74 = v82;
LABEL_165:
          int v82 = v74;
LABEL_166:
          uint64_t v17 = 2;
          goto LABEL_157;
        }
LABEL_164:
        int v74 = 1;
        goto LABEL_165;
      }
      ++v55;
      uint64_t v60 = v67;
      size_t v58 = v69;
      int v57 = v68;
      if (v55 == v67) {
        goto LABEL_128;
      }
LABEL_124:
      ;
    }
    if (!v53)
    {
LABEL_125:
      if (i) {
        goto LABEL_164;
      }
      goto LABEL_126;
    }
    uint64_t v66 = 0;
    while (*((unsigned __int8 *)&__p + v66) == v65->__r_.__value_.__s.__data_[v66])
    {
      if (v53 == ++v66) {
        goto LABEL_125;
      }
    }
LABEL_120:
    if (++v55 == v60) {
      goto LABEL_127;
    }
    goto LABEL_124;
  }
  std::string __p = 0;
  size_t v84 = 0;
  uint64_t v85 = 0;
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88);
  unint64_t v13 = this->__ranges_.__begin_;
  if (this->__ranges_.__end_ == v13)
  {
LABEL_24:
    int v82 = 0;
    char v16 = 1;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 3;
    while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v13->first.__r_.__value_.__r.__words[v15 - 3], &__p) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v15 * 8)) << 24) >= 0x1000000)
    {
      ++v14;
      unint64_t v13 = this->__ranges_.__begin_;
      v15 += 6;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v13) >> 4)) {
        goto LABEL_24;
      }
    }
    char v16 = 0;
    int v82 = 1;
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  if ((v82 & 1) == 0) {
    goto LABEL_99;
  }
  if ((v16 & 1) == 0) {
    goto LABEL_166;
  }
  uint64_t v17 = 2;
LABEL_28:
  unsigned __int8 v20 = *a2->__current_;
  unsigned __int8 v86 = v20;
  if (this->__icase_)
  {
    unsigned __int8 v20 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v20);
    unsigned __int8 v86 = v20;
  }
  std::vector<char>::pointer v21 = this->__chars_.__begin_;
  unint64_t v22 = this->__chars_.__end_ - v21;
  if (v22)
  {
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    do
    {
      int v23 = *v21++;
      if (v23 == v20) {
        goto LABEL_155;
      }
    }
    while (--v22);
  }
  std::regex_traits<char>::char_class_type v24 = this->__neg_mask_;
  if (v24 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v20 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v20] & v24) == 0)
    {
      int v26 = (v24 >> 7) & 1;
      char v25 = v20 == 95 ? v26 : 0;
    }
    else
    {
      char v25 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v28 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v20, end - this->__neg_chars_.__begin_);
    uint64_t v29 = v28 ? v28 : end;
    if ((v25 & 1) == 0 && v29 == end)
    {
LABEL_155:
      BOOL negate = 1;
      goto LABEL_156;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v30 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v31 = this->__ranges_.__end_;
  if (v30 != v31)
  {
    std::string __p = 0;
    size_t v84 = 0;
    uint64_t v85 = 0;
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v87);
      std::vector<std::pair<std::string, std::string>>::pointer v30 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v31 = this->__ranges_.__end_;
    }
    else
    {
      HIBYTE(v85) = 1;
      LOWORD(__p) = v20;
    }
    if (v31 == v30)
    {
LABEL_58:
      char v34 = 0;
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 3;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30->first.__r_.__value_.__r.__words[v33 - 3], &__p) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_+ v33 * 8)) << 24) >= 0x1000000)
      {
        ++v32;
        std::vector<std::pair<std::string, std::string>>::pointer v30 = this->__ranges_.__begin_;
        v33 += 6;
        if (v32 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v30) >> 4)) {
          goto LABEL_58;
        }
      }
      char v34 = 1;
      int v82 = 1;
    }
    if (SHIBYTE(v85) < 0) {
      operator delete(__p);
    }
    if (v34) {
      goto LABEL_157;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_150:
    if ((char)v86 < 0) {
      goto LABEL_157;
    }
    std::regex_traits<char>::char_class_type v75 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v86] & v75) == 0)
    {
      int v76 = (v75 >> 7) & 1;
      if (v86 != 95) {
        int v76 = 0;
      }
      if (v76 != 1) {
        goto LABEL_157;
      }
    }
    goto LABEL_155;
  }
  std::string __p = 0;
  size_t v84 = 0;
  uint64_t v85 = 0;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v87, (uint64_t *)&__p);
  std::vector<std::string>::pointer v35 = this->__equivalences_.__begin_;
  uint64_t v36 = HIBYTE(v85);
  int64_t v37 = (char *)this->__equivalences_.__end_ - (char *)v35;
  if (!v37)
  {
    if (v85 < 0) {
      operator delete(__p);
    }
    goto LABEL_150;
  }
  uint64_t v80 = v17;
  unint64_t v38 = 0;
  unint64_t v39 = v37 / 24;
  std::string v40 = __p;
  size_t v41 = v84;
  if (v85 >= 0) {
    size_t v42 = HIBYTE(v85);
  }
  else {
    size_t v42 = v84;
  }
  if (v39 <= 1) {
    uint64_t v43 = 1;
  }
  else {
    uint64_t v43 = v37 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v38 < v39)
  {
    std::string v45 = &v35[v38];
    std::string::size_type v46 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
    int v47 = (char)v46;
    if ((v46 & 0x80u) != 0) {
      std::string::size_type v46 = v45->__r_.__value_.__l.__size_;
    }
    if (v42 == v46) {
      break;
    }
LABEL_84:
    if (++v38 == v43)
    {
      if ((v36 & 0x80) != 0) {
LABEL_148:
      }
        operator delete(__p);
      uint64_t v17 = v80;
      goto LABEL_150;
    }
LABEL_88:
    ;
  }
  if (v47 >= 0) {
    long long v48 = &v35[v38];
  }
  else {
    long long v48 = (std::string *)v45->__r_.__value_.__r.__words[0];
  }
  if ((v36 & 0x80) == 0)
  {
    if (!v36)
    {
LABEL_89:
      int v82 = 1;
      uint64_t v17 = v80;
      if (!j) {
        goto LABEL_150;
      }
      goto LABEL_157;
    }
    uint64_t v49 = 0;
    while (*((unsigned __int8 *)&__p + v49) == v48->__r_.__value_.__s.__data_[v49])
    {
      if (v36 == ++v49) {
        goto LABEL_89;
      }
    }
    goto LABEL_84;
  }
  BOOL v79 = j;
  int v50 = v40;
  size_t v51 = v41;
  if (memcmp(v40, v48, v41))
  {
    ++v38;
    size_t v41 = v51;
    std::string v40 = v50;
    if (v38 == v43) {
      goto LABEL_148;
    }
    goto LABEL_88;
  }
  operator delete(__p);
  int v82 = 1;
  uint64_t v17 = v80;
  if (!v79) {
    goto LABEL_150;
  }
LABEL_157:
  if (v82 == this->__negate_)
  {
    first = 0;
    int v78 = -993;
  }
  else
  {
    a2->__current_ += v17;
    first = this->__first_;
    int v78 = -995;
  }
  a2->__do_ = v78;
  a2->__node_ = first;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, a3, a3 - a2);
  uint64_t v4 = HIBYTE(v8);
  if (v8 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if (v8 < 0) {
    uint64_t v4 = v7;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), p_p, &p_p[v4]);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
}

void sub_1C54C0EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__s, 0, sizeof(__s));
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C54C1050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, a3, a3 - a2);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v6 = HIBYTE(v13);
  if (v13 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if (v13 < 0) {
    uint64_t v6 = v12;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), p_p, &p_p[v6]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = (uint64_t *)*a4;
      }
      *((unsigned char *)v10 + 11) = *((unsigned char *)v10 + 3);
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a4 = 0;
      a4[1] = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
    }
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
}

void sub_1C54C1188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C11E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  if (a2 + 1 != a3 && v5 == 91)
  {
    int v11 = a2[1];
    switch(v11)
    {
      case '.':
        uint64_t v4 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v31);
        unsigned int v9 = HIBYTE(v32);
        uint64_t v10 = *((void *)&v31 + 1);
        break;
      case ':':
        uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
        goto LABEL_11;
      case '=':
        uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_11:
        uint64_t v6 = v12;
        char v13 = 0;
        goto LABEL_44;
      default:
        uint64_t v10 = 0;
        unsigned int v9 = 0;
        break;
    }
  }
  int v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  if (v10)
  {
    uint64_t v15 = v4;
    goto LABEL_28;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
  {
    int v16 = *v4;
    if (v16 == 92)
    {
      uint64_t v17 = v4 + 1;
      if (v14) {
        uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v17, a3, (uint64_t *)&v31);
      }
      else {
        uint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v17, (unsigned __int8 *)a3, (uint64_t)&v31, v6);
      }
      uint64_t v15 = v18;
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v16) = *v4;
  }
  if ((v9 & 0x80) != 0)
  {
    size_t v19 = (long long *)v31;
    *((void *)&v31 + 1) = 1;
  }
  else
  {
    HIBYTE(v32) = 1;
    size_t v19 = &v31;
  }
  *(unsigned char *)size_t v19 = v16;
  *((unsigned char *)v19 + 1) = 0;
  uint64_t v15 = v4 + 1;
LABEL_28:
  if (v15 == a3
    || (int v20 = *v15, v20 == 93)
    || (std::vector<char>::pointer v21 = v15 + 1, v15 + 1 == a3)
    || v20 != 45
    || *v21 == 93)
  {
    if (SHIBYTE(v32) < 0)
    {
      if (*((void *)&v31 + 1))
      {
        if (*((void *)&v31 + 1) != 1)
        {
          unint64_t v22 = (char *)v31;
LABEL_42:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, *v22, v22[1]);
          goto LABEL_43;
        }
        unint64_t v22 = (char *)v31;
        goto LABEL_40;
      }
    }
    else if (HIBYTE(v32))
    {
      unint64_t v22 = (char *)&v31;
      if (HIBYTE(v32) != 1) {
        goto LABEL_42;
      }
LABEL_40:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, *v22);
    }
LABEL_43:
    char v13 = 1;
    uint64_t v4 = v15;
    goto LABEL_44;
  }
  uint64_t v4 = v15 + 2;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  if (v15 + 2 != a3 && *v21 == 91 && *v4 == 46)
  {
    uint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v15 + 3, a3, (uint64_t)v29);
LABEL_60:
    uint64_t v4 = (char *)v24;
    goto LABEL_61;
  }
  if ((v14 | 0x40) == 0x40)
  {
    LODWORD(v21) = *v21;
    if (v21 == 92)
    {
      if (v14) {
        uint64_t v24 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v15 + 2, a3, (uint64_t *)v29);
      }
      else {
        uint64_t v24 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v15 + 2, (unsigned __int8 *)a3, (uint64_t)v29, v6);
      }
      goto LABEL_60;
    }
  }
  else
  {
    LOBYTE(v21) = *v21;
  }
  HIBYTE(v30) = 1;
  LOWORD(v29[0]) = v21;
LABEL_61:
  *(_OWORD *)unint64_t v27 = v31;
  uint64_t v28 = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  *(_OWORD *)std::string __p = *(_OWORD *)v29;
  uint64_t v26 = v30;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)v27, (char *)__p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  char v13 = 1;
LABEL_44:
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (v13) {
    return v4;
  }
  return (char *)v6;
}

void sub_1C54C1570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    uint64_t v8 = HIBYTE(v19);
    if (HIBYTE(v19))
    {
      long long __p = 0uLL;
      unsigned int v9 = (char *)&v17;
      uint64_t v16 = 0;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  long long __p = 0uLL;
  uint64_t v16 = 0;
  unsigned int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t *)&__p);
  uint64_t v10 = HIBYTE(v16);
  if (v16 < 0) {
    uint64_t v10 = *((void *)&__p + 1);
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, &__p);
  }
  else
  {
    uint64_t v11 = HIBYTE(v19);
    if (v19 < 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      char v13 = (char *)&v17;
      if (v19 < 0) {
        char v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      uint64_t v12 = (char *)&v17;
      if (v19 < 0) {
        uint64_t v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1C54C1790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    goto LABEL_25;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return a2 + 1;
  }
LABEL_25:
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  unsigned int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        unsigned int v9 = a2 + 3;
      }
      else {
        unsigned int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  unsigned int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        std::basic_regex<char>::value_type v8 = v4;
        if (v4[23] < 0) {
          std::basic_regex<char>::value_type v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        char v10 = v4;
        if (v4[23] < 0) {
          char v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        __int16 v13 = v3;
        if (v3[23] < 0) {
          __int16 v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        uint64_t v15 = v3;
        if (v3[23] < 0) {
          uint64_t v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        uint64_t v19 = a2;
        if (a2[23] < 0) {
          uint64_t v19 = *(char **)a2;
        }
        int v20 = a2;
        if (a2[23] < 0) {
          int v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        uint64_t v24 = a3;
        if (a3[23] < 0) {
          uint64_t v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      uint64_t v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)std::string v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)long long __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      uint64_t v30 = a2;
      if (a2[23] < 0) {
        uint64_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      uint64_t v32 = v4;
      if (v4[23] < 0) {
        uint64_t v32 = *(unsigned char **)v4;
      }
      *uint64_t v32 = v31;
      uint64_t v33 = v3;
      if (v3[23] < 0) {
        uint64_t v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      std::vector<std::string>::pointer v35 = v3;
      if (v3[23] < 0) {
        std::vector<std::string>::pointer v35 = *(unsigned char **)v3;
      }
      *std::vector<std::string>::pointer v35 = v34;
    }
    *(_OWORD *)std::string v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = 0;
    *(_OWORD *)long long __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1C54C21E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    char v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        uint64_t v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        uint64_t v26 = v27 + 2;
        std::string v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    _WORD *v9 = v8;
    uint64_t v26 = v9 + 1;
    goto LABEL_48;
  }
  char v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  uint64_t v26 = v27 + 2;
  uint64_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C24D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__s, 0, sizeof(__s));
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C54C26AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, a3, a3 - a2);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v6 = HIBYTE(v13);
  if (v13 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if (v13 < 0) {
    uint64_t v6 = v12;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), p_p, &p_p[v6]);
  uint64_t v8 = *((unsigned __int8 *)a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a4[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = (uint64_t *)*a4;
      }
      *((unsigned char *)v10 + 11) = *((unsigned char *)v10 + 3);
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a4 = 0;
      a4[1] = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *((unsigned char *)a4 + SipRegistrationClient::handlePathSatisfied(this - 23) = 0;
    }
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
}

void sub_1C54C27E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C2844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, a3, a3 - a2);
  uint64_t v6 = HIBYTE(v13);
  if (v13 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if (v13 < 0) {
    uint64_t v6 = v12;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, &p_p[v6]);
  if (v13 >= 0) {
    uint64_t v8 = (const char *)&__p;
  }
  else {
    uint64_t v8 = (const char *)__p;
  }
  uint64_t classname = std::__get_classname(v8, a4);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  return classname;
}

void sub_1C54C2918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      uint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          uint64_t v12 = operator new(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          uint64_t v12 = operator new(v28);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned __int8 v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    uint64_t v12 = operator new(v18);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t v4 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v26.__end_cap_.__value_ = v4;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>((uint64_t)v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[48 * v11];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v20 = *a1;
    unint64_t v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      int64x2_t v24 = vdupq_n_s64(v19);
      uint64_t v21 = &v15[48 * v11];
    }
    else
    {
      uint64_t v21 = &v15[48 * v11];
      do
      {
        long long v22 = *(_OWORD *)(v19 - 48);
        *((void *)v21 - 4) = *(void *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(void *)(v19 - 40) = 0;
        *(void *)(v19 - 32) = 0;
        *(void *)(v19 - 48) = 0;
        long long v23 = *(_OWORD *)(v19 - 24);
        *((void *)v21 - 1) = *(void *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(void *)(v19 - 16) = 0;
        *(void *)(v19 - 8) = 0;
        *(void *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      int64x2_t v24 = *(int64x2_t *)a1;
    }
    unint64_t v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    *(int64x2_t *)&v26.__begin_ = v24;
    uint64_t v25 = (std::pair<std::string, std::string> *)a1[2];
    a1[2] = &v15[48 * v14];
    v26.__end_cap_.__value_ = v25;
    v26.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v24.i64[0];
    std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&v26);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unint64_t v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  long long __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, a3, a3 - a2);
  uint64_t v4 = HIBYTE(v8);
  if (v8 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  if (v8 < 0) {
    uint64_t v4 = v7;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), p_p, &p_p[v4]);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
}

void sub_1C54C2DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C2E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1C54C31FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C3318(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C3370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C878E320);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C878E320);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20D5070;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1C878E320);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C878DE80](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C54C36EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  unint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          unint64_t v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        unint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            long long v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          long long v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a2);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, a2, a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this == a3) {
    return (char *)v3;
  }
  int v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (char *)v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    return (char *)v3 + 2;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    return (char *)v3 + v10;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (char *)a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    unint64_t v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  std::vector<std::ssub_match>::pointer begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      long long v17 = (void *)(v15 + v12 * 24);
      if (v16 <= v13) {
        size_t v18 = a4 + 3;
      }
      else {
        size_t v18 = v17;
      }
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        size_t v19 = a4 + 3;
      }
      else {
        size_t v19 = (uint64_t *)(*a4 + v12 * 24);
      }
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        size_t v20 = a4 + 3;
      }
      else {
        size_t v20 = (uint64_t *)(*a4 + v12 * 24);
      }
      char v21 = *((unsigned char *)v20 + 16);
      std::vector<std::ssub_match>::pointer begin = a1->__begin_;
      std::vector<std::ssub_match>::pointer end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  long long v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[4].__end_ = v23;
  }
  LOBYTE(a1[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    LODWORD(v57[0]) = 0;
    memset((char *)v57 + 8, 0, 80);
    *(void *)((char *)&v57[5] + 5) = 0;
    std::deque<std::__state<char>>::push_back(&v58, (uint64_t)v57);
    if (*((void *)&v57[3] + 1))
    {
      *(void *)&v57[4] = *((void *)&v57[3] + 1);
      operator delete(*((void **)&v57[3] + 1));
    }
    size_t v51 = a4;
    if (*(void *)&v57[2])
    {
      *((void *)&v57[2] + 1) = *(void *)&v57[2];
      operator delete(*(void **)&v57[2]);
    }
    uint64_t v12 = *((void *)&v58 + 1);
    unint64_t v13 = *((void *)&v60 + 1) + v60 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v58 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v19 = *((void *)&v60 + 1);
    uint64_t v20 = *((void *)&v58 + 1);
    unint64_t v21 = *((void *)&v60 + 1) + v60 - 1;
    unint64_t v22 = v21 / 0x2A;
    unint64_t v23 = 3 * (v21 % 0x2A);
    *(void *)(*(void *)(*((void *)&v58 + 1) + 8 * v22) + 32 * v23 + 80) = v6;
    uint64_t v24 = a3 - a2;
    uint64_t v25 = *(void *)(v20 + 8 * v22) + 32 * v23;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    uint64_t v52 = a3;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v24) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v19 + v60 - 1;
      uint64_t v28 = *(void *)(*((void *)&v58 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == v52;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v24)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v58);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v58 + 1);
          uint64_t v40 = v59;
          if ((void)v59 == *((void *)&v58 + 1))
          {
            uint64_t v40 = *((void *)&v58 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v58 + 1) + 8 * ((unint64_t)v60 / 0x2A));
            size_t v42 = (void *)(*v41 + 96 * ((unint64_t)v60 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v58 + 1) + 8 * ((*((void *)&v60 + 1) + (void)v60) / 0x2AuLL))
                + 96 * ((*((void *)&v60 + 1) + (void)v60) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  unint64_t v44 = (void *)v41[1];
                  ++v41;
                  size_t v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v58 + 1);
              uint64_t v40 = v59;
            }
          }
          *((void *)&v60 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v58 + 1) + 8);
              *((void *)&v58 + 1) = v39;
              unint64_t v47 = v59 - (void)v39;
            }
            while ((void)v59 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v60 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v24;
LABEL_38:
          uint64_t v19 = *((void *)&v60 + 1);
          if (*((void *)&v60 + 1)) {
            continue;
          }
          if (v55)
          {
            uint64_t v49 = *v51;
            *(void *)uint64_t v49 = v54;
            *(void *)(v49 + 8) = v54 + v53;
            uint64_t v6 = 1;
            *(unsigned char *)(v49 + 16) = 1;
          }
          else
          {
            uint64_t v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v58, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v58);
          goto LABEL_38;
        case 0xFFFFFC20:
          memset(v57, 0, sizeof(v57));
          long long v45 = *(_OWORD *)(v30 + 16);
          v57[0] = *(_OWORD *)v30;
          v57[1] = v45;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v57[2], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          memset((char *)&v57[3] + 8, 0, 24);
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v57[3] + 8, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v57[5] + 5) = *(void *)(v30 + 85);
          *(void *)&v57[5] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, _OWORD *))(**(void **)&v57[5] + 24))(*(void *)&v57[5], 0, v57);
          std::deque<std::__state<char>>::push_back(&v58, (uint64_t)v57);
          if (*((void *)&v57[3] + 1))
          {
            *(void *)&v57[4] = *((void *)&v57[3] + 1);
            operator delete(*((void **)&v57[3] + 1));
          }
          if (*(void *)&v57[2])
          {
            *((void *)&v57[2] + 1) = *(void *)&v57[2];
            operator delete(*(void **)&v57[2]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v58);
  return v6;
}

void sub_1C54C4A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v56 = 0;
  int v57 = 0;
  unint64_t v58 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  *(_OWORD *)uint64_t v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_43;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0;
  __x.first = a3;
  LODWORD(v48[0]) = 0;
  *(_OWORD *)((char *)v48 + 8) = 0uLL;
  *(_OWORD *)((char *)&v48[1] + 8) = 0uLL;
  *(_OWORD *)((char *)&v48[2] + 8) = 0uLL;
  *(_OWORD *)((char *)&v48[3] + 8) = 0uLL;
  *(_OWORD *)((char *)&v48[4] + 8) = 0uLL;
  *(void *)((char *)&v48[5] + 5) = 0;
  int v57 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v56, (uint64_t)v48);
  if (*((void *)&v48[3] + 1))
  {
    *(void *)&v48[4] = *((void *)&v48[3] + 1);
    operator delete(*((void **)&v48[3] + 1));
  }
  if (*(void *)&v48[2])
  {
    *((void *)&v48[2] + 1) = *(void *)&v48[2];
    operator delete(*(void **)&v48[2]);
  }
  unint64_t v44 = a4;
  uint64_t v12 = v57;
  *((_DWORD *)v57 - 24) = 0;
  *((void *)v12 - 11) = a2;
  *((void *)v12 - 10) = a2;
  *((void *)v12 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v57 - 40), *(unsigned int *)(a1 + 32));
  long long v45 = a3;
  uint64_t v46 = 0;
  char v13 = 0;
  unsigned int v14 = 0;
  uint64_t v15 = (const char *)(a3 - a2);
  unint64_t v16 = v57;
  *((void *)v57 - 2) = v6;
  *((_DWORD *)v16 - 2) = a5;
  *((unsigned char *)v16 - 4) = a6;
  do
  {
    BOOL v17 = (++v14 & 0xFFF) != 0 || (int)(v14 >> 12) < (int)v15;
    if (!v17) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v19 = v16 - 1;
    uint64_t v18 = *((void *)v16 - 2);
    uint64_t v20 = v16 - 6;
    if (v18) {
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v18 + 16))(v18, v16 - 6);
    }
    switch(*(_DWORD *)v20)
    {
      case 0xFFFFFC18:
        unint64_t v21 = (const char *)*((void *)v16 - 10);
        if ((a5 & 0x20) != 0 && v21 == a2 || (a5 & 0x1000) != 0 && v21 != v45) {
          goto LABEL_19;
        }
        char v28 = v13;
        unint64_t v29 = &v21[-*((void *)v16 - 11)];
        uint64_t v30 = v46;
        if ((v28 & ((uint64_t)v46 >= (uint64_t)v29)) == 0)
        {
          long long v31 = *(v16 - 5);
          long long v50 = *v20;
          long long v51 = v31;
          if (&v50 != v20)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(v52, *((long long **)v16 - 8), *((long long **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v16 - 7) - *((void *)v16 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(&v53[1], *((uint64_t **)v16 - 5), *((uint64_t **)v16 - 4), (uint64_t)(*((void *)v16 - 4) - *((void *)v16 - 5)) >> 4);
          }
          uint64_t v32 = *v19;
          *(void *)((char *)&v55 + 5) = *(void *)((char *)v16 - 11);
          *(void *)&long long v55 = v32;
          uint64_t v30 = v29;
        }
        uint64_t v33 = v57;
        if (v30 == v15)
        {
          uint64_t v34 = (uint64_t)v56;
          while (v33 != (void *)v34)
          {
            v33 -= 12;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v33);
          }
          int v57 = (_OWORD *)v34;
          char v13 = 1;
          uint64_t v46 = v15;
        }
        else
        {
          uint64_t v46 = v30;
          BOOL v35 = v57 - 6;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v57 - 12);
          int v57 = v35;
          char v13 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        unint64_t v22 = v57 - 6;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v57 - 12);
        int v57 = v22;
        break;
      case 0xFFFFFC20:
        memset(v48, 0, sizeof(v48));
        long long v23 = *(v16 - 5);
        v48[0] = *v20;
        v48[1] = v23;
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v48[2], *((long long **)v16 - 8), *((long long **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v16 - 7) - *((void *)v16 - 8)) >> 3));
        memset((char *)&v48[3] + 8, 0, 24);
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v48[3] + 8, *((long long **)v16 - 5), *((long long **)v16 - 4), (uint64_t)(*((void *)v16 - 4) - *((void *)v16 - 5)) >> 4);
        uint64_t v24 = *v19;
        *(void *)((char *)&v48[5] + 5) = *(void *)((char *)v16 - 11);
        *(void *)&v48[5] = v24;
        (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v19 + 24))(*v19, 1, v16 - 6);
        (*(void (**)(void, void, _OWORD *))(**(void **)&v48[5] + 24))(*(void *)&v48[5], 0, v48);
        uint64_t v25 = v57;
        if ((unint64_t)v57 >= v58)
        {
          int v57 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v56, (uint64_t)v48);
          if (*((void *)&v48[3] + 1))
          {
            *(void *)&v48[4] = *((void *)&v48[3] + 1);
            operator delete(*((void **)&v48[3] + 1));
          }
        }
        else
        {
          long long v26 = v48[1];
          *int v57 = v48[0];
          v25[1] = v26;
          *((void *)v25 + 4) = 0;
          *((void *)v25 + 5) = 0;
          *((void *)v25 + 6) = 0;
          *((void *)v25 + 7) = 0;
          std::string v25[2] = v48[2];
          *((void *)v25 + 6) = *(void *)&v48[3];
          memset(&v48[2], 0, 24);
          *((void *)v25 + 8) = 0;
          *((void *)v25 + 9) = 0;
          *(_OWORD *)((char *)v25 + 56) = *(_OWORD *)((char *)&v48[3] + 8);
          *((void *)v25 + 9) = *((void *)&v48[4] + 1);
          memset((char *)&v48[3] + 8, 0, 24);
          uint64_t v27 = *(void *)&v48[5];
          *(void *)((char *)v25 + 85) = *(void *)((char *)&v48[5] + 5);
          *((void *)v25 + 10) = v27;
          int v57 = v25 + 6;
        }
        if (*(void *)&v48[2])
        {
          *((void *)&v48[2] + 1) = *(void *)&v48[2];
          operator delete(*(void **)&v48[2]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    unint64_t v16 = v57;
  }
  while (v56 != v57);
  if (v13)
  {
    uint64_t v36 = *v44;
    *(void *)uint64_t v36 = a2;
    *(void *)(v36 + 8) = &v46[(void)a2];
    *(unsigned char *)(v36 + 16) = 1;
    if (v52[1] != v52[0])
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52[1] - (char *)v52[0]) >> 3);
      uint64_t v38 = (char *)v52[0] + 16;
      unsigned int v39 = 1;
      do
      {
        uint64_t v40 = v36 + 24 * v39;
        *(_OWORD *)uint64_t v40 = *((_OWORD *)v38 - 1);
        char v41 = *v38;
        v38 += 24;
        *(unsigned char *)(v40 + 16) = v41;
        BOOL v17 = v37 > v39++;
      }
      while (v17);
    }
    uint64_t v42 = 1;
  }
  else
  {
LABEL_43:
    uint64_t v42 = 0;
  }
  if (v53[1])
  {
    *(void **)&long long v54 = v53[1];
    operator delete(v53[1]);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  *(void *)&long long v50 = &v56;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  return v42;
}

void sub_1C54C4FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  --a1[5];
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C56D6090);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<SipUri *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<SipUri *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<SipUri *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<SipUri *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1C54C55B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      long long __p = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      unint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0xFC0uLL);
      std::__split_buffer<SipUri *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              long long __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              unint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              unint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      unint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      long long __p = v36;
      unint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      unint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        unint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        long long __p = operator new(0xFC0uLL);
        std::__split_buffer<SipUri *>::push_back(a1, &__p);
        uint64_t v34 = a1[2];
        long long __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        long long __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<SipUri *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    long long __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<SipUri *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1C54C5948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<SipUri *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  void *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v3 = __sz >= v2;
  std::vector<std::ssub_match>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  CFStringRef value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &v7[__n];
      std::vector<std::ssub_match>::size_type v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    long long v16 = &v15[__n];
    std::vector<std::ssub_match>::size_type v17 = 24 * __n;
    int64_t v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<std::ssub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v15[-1].matched = *(void *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
    {
      operator delete(end);
    }
  }
}

void SDPAudioBuilder::adjustModel(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v7 = *(void *)(*a2 + 416);
  uint64_t v6 = *(void *)(*a2 + 424);
  if (v7 == v6) {
    return;
  }
  for (uint64_t i = v7 + 136; *(_DWORD *)(i - 124) != 2; i += 200)
  {
    uint64_t v13 = i + 64;
    if (v13 == v6) {
      return;
    }
  }
  if (*(unsigned char *)(a3 + 432))
  {
    *(void *)(v5 + 144) = *(void *)(a3 + 96);
    signed int ResponseDirection = SDPModelBuilder::getResponseDirection(a1, *(unsigned int *)(a3 + 40), a5);
    unsigned int v112 = ResponseDirection;
    signed int v15 = SDPModelBuilder::getResponseDirection(a1, *(unsigned int *)(a3 + 36), a5);
    unsigned int v16 = v15;
    signed int v111 = v15;
    if (*(unsigned char *)(a1 + 25))
    {
      if (ResponseDirection <= v15)
      {
        if (ResponseDirection < v15)
        {
          std::string::basic_string[abi:ne180100]<0>(&v129, "sdp");
          std::string::basic_string[abi:ne180100]<0>(&v113, "");
          uint64_t v26 = ims::debug((uint64_t)&v129, (uint64_t)&v113);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Media-level direction was: ", 27);
          *(unsigned char *)(v26 + 17) = 0;
          ims::toString<MediaDirection>(&v112, v97);
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 32))(v26, v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" setting it to: ", 16);
          *(unsigned char *)(v26 + 17) = 0;
          ims::toString<MediaDirection>((unsigned int *)&v111, &__p);
          (*(void (**)(uint64_t, void **))(*(void *)v26 + 32))(v26, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v26 + 17) = 0;
          if (SHIBYTE(v108) < 0) {
            operator delete(__p);
          }
          if ((v97[23] & 0x80000000) != 0) {
            operator delete(*(void **)v97);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v130) < 0) {
            operator delete(v129);
          }
          unsigned int v112 = v16;
          signed int ResponseDirection = v16;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v129, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v113, "");
        uint64_t v17 = ims::debug((uint64_t)&v129, (uint64_t)&v113);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Session-level direction was: ", 29);
        *(unsigned char *)(v17 + 17) = 0;
        ims::toString<MediaDirection>((unsigned int *)&v111, v97);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 32))(v17, v97);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" setting it to: ", 16);
        *(unsigned char *)(v17 + 17) = 0;
        ims::toString<MediaDirection>(&v112, &__p);
        (*(void (**)(uint64_t, void **))(*(void *)v17 + 32))(v17, &__p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        if (SHIBYTE(v108) < 0) {
          operator delete(__p);
        }
        if ((v97[23] & 0x80000000) != 0) {
          operator delete(*(void **)v97);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130) < 0) {
          operator delete(v129);
        }
      }
      if (!ResponseDirection)
      {
        std::string::basic_string[abi:ne180100]<0>(&v129, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v113, "");
        uint64_t v27 = ims::warn((uint64_t)&v129, (uint64_t)&v113);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"The audio direction was set to undefined, setting to sendrecv", 61);
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130) < 0) {
          operator delete(v129);
        }
        signed int ResponseDirection = 1;
        unsigned int v112 = 1;
      }
    }
    else if (!ResponseDirection)
    {
      if (v15 <= 1) {
        signed int ResponseDirection = 1;
      }
      else {
        signed int ResponseDirection = v15;
      }
      unsigned int v112 = ResponseDirection;
      std::string::basic_string[abi:ne180100]<0>(&v129, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v113, "");
      uint64_t v25 = ims::warn((uint64_t)&v129, (uint64_t)&v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"The audio direction was set to undefined, setting to ", 53);
      *(unsigned char *)(v25 + 17) = 0;
      ims::toString<MediaDirection>(&v112, v97);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v25 + 32))(v25, v97);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
      if ((v97[23] & 0x80000000) != 0) {
        operator delete(*(void **)v97);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v130) < 0) {
        operator delete(v129);
      }
    }
    uint64_t v28 = *a2 + 392;
    uint64_t v29 = *(void *)(*a2 + 400);
    if (v29 != v28)
    {
      uint64_t v30 = *(void *)(*a2 + 400);
      while (*(_DWORD *)(v30 + 136) != 4)
      {
        uint64_t v30 = *(void *)(v30 + 8);
        if (v30 == v28) {
          goto LABEL_73;
        }
      }
      while (*(_DWORD *)(v29 + 136) != 4)
        uint64_t v29 = *(void *)(v29 + 8);
      *(_DWORD *)(v29 + 56) = ResponseDirection;
    }
LABEL_73:
    uint64_t v31 = *(void *)(i + 8);
    if (i != v31)
    {
      uint64_t v32 = *(void *)(i + 8);
      while (*(_DWORD *)(v32 + 136) != 4)
      {
        uint64_t v32 = *(void *)(v32 + 8);
        if (i == v32) {
          goto LABEL_81;
        }
      }
      while (*(_DWORD *)(v31 + 136) != 4)
        uint64_t v31 = *(void *)(v31 + 8);
      *(_DWORD *)(v31 + 56) = ResponseDirection;
    }
LABEL_81:
    if (*(_WORD *)(a3 + 28) == 255) {
      goto LABEL_202;
    }
    uint64_t v92 = i - 96;
    std::__list_imp<SDPMediaFormatInfo>::clear((uint64_t *)(i - 96));
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    uint64_t v142 = 0;
    long long v141 = 0u;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    long long v136 = 0u;
    long long v135 = 0u;
    long long v134 = 0u;
    memset(v133, 0, sizeof(v133));
    __int16 v33 = *(_WORD *)(a3 + 28);
    long long v129 = &unk_1F20DB438;
    LOWORD(v130) = v33;
    LOBYTE(v131) = 1;
    *((void *)&v131 + 1) = 0;
    long long v132 = 0uLL;
    *((void *)&v130 + 1) = &unk_1F20E7518;
    LOWORD(v133[0]) = 255;
    v133[1] = 0;
    LODWORD(v134) = 0x10000;
    long long v135 = 1uLL;
    long long v136 = 0uLL;
    long long v137 = 0xFFuLL;
    *((void *)&v134 + 1) = &unk_1F20B3A68;
    long long v138 = 0uLL;
    uint64_t v34 = (_OWORD *)(a3 + 280);
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(a3 + 280), *(void *)(a3 + 288));
    }
    else
    {
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = *v34;
      v110.__r_.__value_.__r.__words[2] = *(void *)(a3 + 296);
    }
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v113, v33, (long long *)&v110, *(_WORD *)(a3 + 308), 1);
    LOBYTE(v131) = v113.__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)((char *)&v131 + 8), (const std::string *)&v113.__r_.__value_.__r.__words[2]);
    LOWORD(v133[0]) = v116;
    std::string::operator=((std::string *)&v133[1], &v117);
    LODWORD(v134) = v118;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v113.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(a3 + 280), *(void *)(a3 + 288));
    }
    else
    {
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = *v34;
      v113.__r_.__value_.__r.__words[2] = *(void *)(a3 + 296);
    }
    std::string::size_type size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v113.__r_.__value_.__l.__size_;
    }
    if (size == 6)
    {
      uint64_t v36 = (std::string *)v113.__r_.__value_.__r.__words[0];
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v113;
      }
      int data = (int)v36->__r_.__value_.__l.__data_;
      int v38 = WORD2(v36->__r_.__value_.__r.__words[0]);
      if (data == 760368449 && v38 == 16983)
      {
        BOOL v45 = 1;
        if ((*((unsigned char *)&v113.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_118:
          if (v45)
          {
LABEL_119:
            long long __p = &unk_1F20B3020;
            long long v46 = *(_OWORD *)(a3 + 344);
            long long v108 = *(_OWORD *)(a3 + 328);
            long long v109 = v46;
            long long v98 = 0u;
            long long v99 = 0u;
            memset(v97, 0, sizeof(v97));
            __int16 v47 = *(_WORD *)(a3 + 28);
            int v48 = (*(uint64_t (**)(void))(*((void *)&v130 + 1) + 24))();
            if (!v48) {
              goto LABEL_172;
            }
            if (SHIBYTE(v133[3]) < 0) {
              std::string::__init_copy_ctor_external(&v106, (const std::string::value_type *)v133[1], v133[2]);
            }
            else {
              std::string v106 = *(std::string *)&v133[1];
            }
            std::string::size_type v62 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v62 = v106.__r_.__value_.__l.__size_;
            }
            if (v62 == 6)
            {
              int v63 = &v106;
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v63 = (std::string *)v106.__r_.__value_.__r.__words[0];
              }
              int v64 = (int)v63->__r_.__value_.__l.__data_;
              int v65 = WORD2(v63->__r_.__value_.__r.__words[0]);
              BOOL v67 = v64 == 760368449 && v65 == 16983;
            }
            else
            {
LABEL_172:
              BOOL v67 = 0;
            }
            SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v97, v47, v67);
            if (v48 && SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v106.__r_.__value_.__l.__data_);
            }
            if (HIBYTE(v108))
            {
              BYTE11(v98) = v108;
              BYTE12(v98) = 1;
            }
            if (BYTE14(v108))
            {
              HIWORD(v98) = WORD2(v108);
              HIBYTE(v99) = 0;
            }
            if ((_BYTE)v109)
            {
              LOWORD(v99) = WORD3(v108);
              BYTE2(v99) = 1;
            }
            if (BYTE1(v109))
            {
              WORD2(v99) = WORD4(v108);
              BYTE6(v99) = 1;
            }
            if (BYTE2(v109))
            {
              WORD4(v99) = WORD5(v108);
              BYTE10(v99) = 1;
            }
            if (BYTE3(v109))
            {
              WORD6(v99) = WORD6(v108);
              BYTE14(v99) = 1;
            }
            SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v113, (const SDPMediaFormatAMRParams *)v97);
            LODWORD(v122) = 1;
            SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v129, (uint64_t)&v113);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v113);
            int v68 = (std::__shared_weak_count *)a2[1];
            uint64_t v104 = *a2;
            char v105 = v68;
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!*(unsigned char *)(a3 + 432)) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v104, i - 136, a3, *((uint64_t *)&v109 + 1));
            int v61 = v105;
            if (!v105) {
              goto LABEL_193;
            }
            goto LABEL_192;
          }
LABEL_124:
          if (*(char *)(a3 + 303) < 0)
          {
            std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(a3 + 280), *(void *)(a3 + 288));
          }
          else
          {
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = *v34;
            v113.__r_.__value_.__r.__words[2] = *(void *)(a3 + 296);
          }
          std::string::size_type v49 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
          if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v49 = v113.__r_.__value_.__l.__size_;
          }
          if (v49 == 3)
          {
            uint64_t v50 = (std::string *)v113.__r_.__value_.__r.__words[0];
            if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v50 = &v113;
            }
            int data_low = LOWORD(v50->__r_.__value_.__l.__data_);
            int v52 = v50->__r_.__value_.__s.__data_[2];
            BOOL v54 = data_low == 22085 && v52 == 83;
          }
          else
          {
            BOOL v54 = 0;
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (!v54) {
            goto LABEL_195;
          }
          uint64_t v55 = *(void *)(a3 + 360);
          int v90 = *(unsigned __int16 *)(a3 + 368);
          __int16 v56 = *(_WORD *)(a3 + 374);
          char v57 = *(unsigned char *)(a3 + 378);
          int v86 = *(unsigned __int8 *)(a3 + 377);
          char v87 = *(unsigned char *)(a3 + 380);
          int v58 = *(_DWORD *)(a3 + 396);
          char v59 = *(unsigned char *)(a3 + 400);
          uint64_t v84 = *(void *)(a3 + 408);
          __int16 v80 = *(_WORD *)(a3 + 416);
          __int16 v81 = *(_WORD *)(a3 + 418);
          __int16 v82 = *(_WORD *)(a3 + 420);
          int v83 = *(unsigned __int8 *)(a3 + 376);
          int v85 = *(unsigned __int8 *)(a3 + 422);
          int v88 = *(unsigned __int8 *)(a3 + 423);
          int v89 = *(unsigned __int8 *)(a3 + 424);
          int v91 = *(unsigned __int8 *)(a3 + 425);
          uint64_t v103 = 0;
          long long v102 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          memset(v97, 0, sizeof(v97));
          SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v97, *(_WORD *)(a3 + 28));
          BYTE12(v98) = v59;
          LOWORD(v99) = v56;
          *((void *)&v99 + 1) = v55;
          BYTE13(v102) = 0;
          SDPMediaFormatEVSParams::updateConfigName((uint64_t)v97);
          DWORD1(v101) = v58;
          BYTE13(v102) = 0;
          SDPMediaFormatEVSParams::updateConfigName((uint64_t)v97);
          BYTE3(v102) = v57;
          if (v86)
          {
            BYTE13(v98) = v83;
            BYTE14(v98) = 1;
          }
          BYTE2(v102) = v87;
          if (v85 || (unsigned __int16)v103 <= 2u && v90 == 7 && !v83)
          {
            LOWORD(v101) = v90;
            BYTE14(v102) = 0;
          }
          if (v88)
          {
            WORD2(v102) = v80;
            BYTE10(v102) = 1;
          }
          if (v89)
          {
            WORD3(v102) = v81;
            BYTE11(v102) = 1;
          }
          if (v91)
          {
            WORD4(v102) = v82;
            BYTE12(v102) = 1;
          }
          SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v113, (const SDPMediaFormatEVSParams *)v97);
          LODWORD(v122) = 2;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v129, (uint64_t)&v113);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v113);
          long long v60 = (std::__shared_weak_count *)a2[1];
          uint64_t v95 = *a2;
          unsigned int v96 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!*(unsigned char *)(a3 + 432)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v95, i - 136, a3, v84);
          int v61 = v96;
          if (!v96)
          {
LABEL_193:
            *(void *)std::string v97 = &unk_1F20E5C78;
            if (SBYTE7(v98) < 0) {
              operator delete(*(void **)&v97[16]);
            }
LABEL_195:
            size_t v69 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v92, 0, 0, (uint64_t)&v129);
            v69[1] = v92;
            uint64_t v70 = *(void *)(i - 96);
            *size_t v69 = v70;
            *(void *)(v70 + 8) = v69;
            *(void *)(i - 96) = v69;
            ++*(void *)(i - 80);
            int v71 = *(unsigned __int16 *)(a3 + 304);
            if (v71 != 255)
            {
              v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DB438;
              LOWORD(v113.__r_.__value_.__r.__words[1]) = v71;
              char v114 = 1;
              uint64_t v116 = 0;
              v117.__r_.__value_.__r.__words[0] = 0;
              uint64_t v115 = 0;
              v113.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F20E7518;
              LOWORD(v117.__r_.__value_.__r.__words[1]) = 255;
              uint64_t v118 = 0;
              uint64_t v119 = 0;
              v117.__r_.__value_.__r.__words[2] = 0;
              int v120 = 0x10000;
              v121[1] = 1;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              v121[2] = 0;
              uint64_t v124 = 255;
              v121[0] = &unk_1F20B3A68;
              uint64_t v125 = 0;
              uint64_t v127 = 0;
              uint64_t v126 = 0;
              int v128 = 0;
              SDPMediaFormatInfo::operator=((uint64_t)&v129, (uint64_t)&v113);
              v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DB438;
              std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v121);
              SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v113.__r_.__value_.__r.__words[2]);
              __int16 v72 = *(_WORD *)(a3 + 304);
              std::string::basic_string[abi:ne180100]<0>(v93, "telephone-event");
              SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v113, v72, (long long *)v93, *(_WORD *)(a3 + 308), 1);
              LOBYTE(v131) = v113.__r_.__value_.__s.__data_[8];
              std::string::operator=((std::string *)((char *)&v131 + 8), (const std::string *)&v113.__r_.__value_.__r.__words[2]);
              LOWORD(v133[0]) = v116;
              std::string::operator=((std::string *)&v133[1], &v117);
              LODWORD(v134) = v118;
              SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v113.__r_.__value_.__l.__data_);
              if (v94 < 0) {
                operator delete(v93[0]);
              }
              SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v97, *(_WORD *)(a3 + 304));
              *(void *)std::string v97 = &unk_1F20B39F0;
              std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams>((uint64_t)&v113, (uint64_t)v97);
              LODWORD(v122) = 3;
              SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v129, (uint64_t)&v113);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v113);
              *(void *)std::string v97 = &unk_1F20E5C78;
              if (SBYTE7(v98) < 0) {
                operator delete(*(void **)&v97[16]);
              }
              int v73 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v92, 0, 0, (uint64_t)&v129);
              v73[1] = v92;
              uint64_t v74 = *(void *)(i - 96);
              *int v73 = v74;
              *(void *)(v74 + 8) = v73;
              *(void *)(i - 96) = v73;
              ++*(void *)(i - 80);
            }
            long long v129 = &unk_1F20DB438;
            std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v134 + 2);
            SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v130 + 1);
LABEL_202:
            SDPMedia::setMaxPacketizationTime((SDPMedia *)(i - 136), *(_WORD *)(a3 + 314));
            SDPMedia::setPacketizationTime((SDPMedia *)(i - 136), *(_WORD *)(a3 + 312));
            if (*(unsigned char *)(a3 + 272))
            {
              SDPMedia::mediaCryptoList((void *)(i - 136), &v129);
              uint64_t v75 = v130;
              if ((void **)v130 != &v129)
              {
                uint64_t v76 = a3 + 192;
                if (!*(unsigned char *)(a3 + 272)) {
                  uint64_t v76 = 0;
                }
                int v77 = *(unsigned __int16 *)(v76 + 40);
                do
                {
                  uint64_t v78 = *(void *)(v75 + 16);
                  if (*(unsigned __int16 *)(v78 + 40) == v77)
                  {
                    *(_WORD *)(v78 + 73) = *(_WORD *)(v76 + 73);
                    *(unsigned char *)(v78 + 75) = *(unsigned char *)(v76 + 75);
                  }
                  uint64_t v75 = *(void *)(v75 + 8);
                }
                while ((void **)v75 != &v129);
              }
              std::__list_imp<unsigned long long>::clear(&v129);
            }
            for (uint64_t j = *(void *)(i + 8); i != j; uint64_t j = *(void *)(j + 8))
            {
              if (*(_DWORD *)(j + 136) == 5)
              {
                if (*(unsigned char *)(a3 + 316)) {
                  *(unsigned char *)(j + 56) = 0;
                }
                return;
              }
            }
            return;
          }
LABEL_192:
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          goto LABEL_193;
        }
LABEL_123:
        operator delete(v113.__r_.__value_.__l.__data_);
        if (v45) {
          goto LABEL_119;
        }
        goto LABEL_124;
      }
    }
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v97, *(const std::string::value_type **)(a3 + 280), *(void *)(a3 + 288));
    }
    else
    {
      *(_OWORD *)std::string v97 = *v34;
      *(void *)&v97[16] = *(void *)(a3 + 296);
    }
    uint64_t v40 = v97[23];
    if (v97[23] < 0) {
      uint64_t v40 = *(void *)&v97[8];
    }
    if (v40 == 3)
    {
      char v41 = *(unsigned __int16 **)v97;
      if (v97[23] >= 0) {
        char v41 = (unsigned __int16 *)v97;
      }
      int v42 = *v41;
      int v43 = *((unsigned __int8 *)v41 + 2);
      BOOL v45 = v42 == 19777 && v43 == 82;
      if ((v97[23] & 0x80000000) == 0)
      {
LABEL_117:
        if ((*((unsigned char *)&v113.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_118;
        }
        goto LABEL_123;
      }
    }
    else
    {
      BOOL v45 = 0;
      if ((v97[23] & 0x80000000) == 0) {
        goto LABEL_117;
      }
    }
    operator delete(*(void **)v97);
    goto LABEL_117;
  }
  uint64_t v18 = *(void *)(i + 8);
  if (i != v18)
  {
    uint64_t v19 = *(void *)(i + 8);
    while (*(_DWORD *)(v19 + 136) != 4)
    {
      uint64_t v19 = *(void *)(v19 + 8);
      if (i == v19) {
        goto LABEL_28;
      }
    }
    while (*(_DWORD *)(v18 + 136) != 4)
      uint64_t v18 = *(void *)(v18 + 8);
    if (a5) {
      int v20 = 3;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v18 + 56) = v20;
  }
LABEL_28:
  uint64_t v21 = v5 + 392;
  uint64_t v22 = *(void *)(v5 + 400);
  if (v22 != v21)
  {
    uint64_t v23 = v22;
    while (*(_DWORD *)(v23 + 136) != 4)
    {
      uint64_t v23 = *(void *)(v23 + 8);
      if (v23 == v21) {
        return;
      }
    }
    while (*(_DWORD *)(v22 + 136) != 4)
      uint64_t v22 = *(void *)(v22 + 8);
    if (a5) {
      int v24 = 3;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v22 + 56) = v24;
  }
}

void sub_1C54C70D8(_Unwind_Exception *a1)
{
}

void SDPAudioBuilder::~SDPAudioBuilder(SDPAudioBuilder *this)
{
  *(void *)this = &unk_1F20D5210;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20D5210;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1C878E320);
}

void IBIRTPClient::IBIRTPClient(IBIRTPClient *this, dispatch_object_t *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20D5238;
  *(_OWORD *)((char *)this + 24) = 0u;
  BOOL v3 = (dispatch_object_t *)((char *)this + 24);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 10) = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  std::vector<std::ssub_match>::size_type v4 = (void **)((char *)this + 32);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 56) = 0;
  std::to_string(&v20, ++_MergedGlobals_19);
  if (byte_1EBBDC307 >= 0) {
    uint64_t v5 = (const std::string::value_type *)&qword_1EBBDC2F0;
  }
  else {
    uint64_t v5 = (const std::string::value_type *)qword_1EBBDC2F0;
  }
  if (byte_1EBBDC307 >= 0) {
    std::string::size_type v6 = byte_1EBBDC307;
  }
  else {
    std::string::size_type v6 = unk_1EBBDC2F8;
  }
  uint64_t v7 = std::string::insert(&v20, 0, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
  *(void *)&long long v21 = v7->__r_.__value_.__l.__size_;
  *(void *)((char *)&v21 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 55) < 0) {
    operator delete(*v4);
  }
  uint64_t v10 = v21;
  *((void *)this + 4) = v8;
  *((void *)this + 5) = v10;
  *(void *)((char *)this + 47) = *(void *)((char *)&v21 + 7);
  *((unsigned char *)this + 55) = v9;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    char v9 = *((unsigned char *)this + 55);
  }
  unint64_t v11 = (char *)this + 32;
  if (v9 < 0) {
    unint64_t v11 = (const char *)*v4;
  }
  dispatch_queue_t v12 = dispatch_queue_create(v11, 0);
  uint64_t v13 = *v3;
  dispatch_object_t *v3 = v12;
  if (v13) {
    dispatch_release(v13);
  }
  long long v21 = 0uLL;
  ctu::LogServer::create();
  if ((void)v21)
  {
    std::vector<std::ssub_match>::size_type v14 = (std::__shared_weak_count *)operator new(0x38uLL);
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5688;
    std::string::basic_string[abi:ne180100]<0>(&v20, "ibi.client");
    v14[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C9C20;
    p_shared_owners = (std::string *)&v14[1].__shared_owners_;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(p_shared_owners, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(_OWORD *)&p_shared_owners->__r_.__value_.__l.__data_ = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
      v14[2].__vftable = (std::__shared_weak_count_vtbl *)v20.__r_.__value_.__r.__words[2];
    }
    ctu::LogServer::addWriter();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  object = *v3;
  if (*v3) {
    dispatch_retain(*v3);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  ice::Client::create();
  long long v16 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v16;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (v20.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.__r_.__value_.__l.__size_);
    }
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (object) {
    dispatch_release(object);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
}

void sub_1C54C7634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v27);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v22 + 96);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *(NSObject **)(v22 + 80);
  if (v29) {
    dispatch_release(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v22 + 72);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (*(char *)(v22 + 55) < 0) {
    operator delete(*v23);
  }
  if (*v25) {
    dispatch_release(*v25);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v22 + 16);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  _Unwind_Resume(a1);
}

void IBIRTPClient::~IBIRTPClient(IBIRTPClient *this)
{
  *(void *)this = &unk_1F20D5238;
  std::vector<std::ssub_match>::size_type v2 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    BOOL v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::vector<std::ssub_match>::size_type v4 = *((void *)this + 10);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  std::string::size_type v6 = *((void *)this + 3);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  uint64_t vars8;

  IBIRTPClient::~IBIRTPClient(this);
  JUMPOUT(0x1C878E320);
}

void IBIRTPClient::registerClient(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"ARI client already registered, skipping another register request.", 65);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v25);
    }
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
LABEL_7:
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    return;
  }
  if (!*(void *)(a1 + 88))
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::error((uint64_t)&v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"IceClient creation failed.", 26);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v25);
    }
    std::vector<std::ssub_match>::size_type v14 = (std::__shared_weak_count *)a2[1];
    if (v14)
    {
      signed int v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        long long v16 = v15;
        uint64_t v17 = *a2;
        if (*a2)
        {
          uint64_t v18 = *(void *)(v17 + 48);
          uint64_t v19 = *(std::__shared_weak_count **)(v17 + 56);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = *(void *)(v18 + 296);
          if (v20) {
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v20 + 120), 1);
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    goto LABEL_7;
  }
  *(unsigned char *)(a1 + 56) = 1;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (void *)(a1 + 8));
  std::string::size_type v8 = v25;
  uint64_t v7 = v26;
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1174405120;
  void v21[2] = ___ZN12IBIRTPClient14registerClientENSt3__18weak_ptrI21IBIRTPStackControllerEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_46;
  void v21[4] = v8;
  uint64_t v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = v21;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v9, 0, (uint64_t *)&v25);
  ice::Client::start(*(ice::Client **)(a1 + 88));
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  dispatch_queue_t v12 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v10;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C54C7B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient14registerClientENSt3__18weak_ptrI21IBIRTPStackControllerEE_block_invoke(uint64_t a1)
{
  std::vector<std::ssub_match>::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    BOOL v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, (void *)(v5 + 8));
        std::string::size_type v6 = *(NSObject **)(v5 + 80);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZN12IBIRTPClient19handleClientStartedEv_block_invoke;
        block[3] = &__block_descriptor_tmp_8_0;
        block[4] = v5;
        void block[5] = v9;
        std::string::size_type v8 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        dispatch_async(v6, block);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C54C7CDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient19handleClientStartedEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4 && *(void *)(v2 + 64))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v22, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v6 = ims::debug((uint64_t)&v22, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Registered ARI client ", 22);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v22);
      }
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (void *)(v5 + 8));
      std::string::size_type v8 = v22;
      uint64_t v7 = (std::__shared_weak_count *)v23;
      if (v23)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v22 = (void *)MEMORY[0x1E4F143A8];
      uint64_t v23 = 1174405120;
      char v24 = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke;
      uint64_t v25 = &__block_descriptor_tmp_13_0;
      uint64_t v26 = v8;
      char v27 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = &v22;
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)1174405120;
      uint64_t v17 = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_14;
      uint64_t v18 = &__block_descriptor_tmp_17_4;
      uint64_t v19 = v8;
      uint64_t v20 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      long long v21 = __p;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      std::string::size_type v13[2] = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_18;
      void v13[3] = &__block_descriptor_tmp_21_3;
      v13[4] = v8;
      std::vector<std::ssub_match>::size_type v14 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      signed int v15 = v13;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 1174405120;
      void v10[2] = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_22;
      void v10[3] = &__block_descriptor_tmp_25_1;
      void v10[4] = v8;
      uint64_t v11 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_queue_t v12 = v10;
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(void *)(v5 + 88), 1166049280, (uint64_t *)&v28);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(void *)(v5 + 88), 1166082048, (uint64_t *)&v21);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(void *)(v5 + 88), 1166114816, (uint64_t *)&v15);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(void *)(v5 + 88), 1166147584, (uint64_t *)&v12);
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_34:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      return;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::debug((uint64_t)&v22, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ARI client started notification after stackController goes away", 63);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  if (v4) {
    goto LABEL_34;
  }
}

void sub_1C54C80AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      std::string::size_type v8 = v7;
      uint64_t v9 = *(void **)(a1 + 32);
      if (!v9)
      {
LABEL_41:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return 0;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(&v44, "");
      uint64_t v10 = ims::debug((uint64_t)__p, (uint64_t)&v44);
      size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleMediaSessionErrIndication", 31);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SBYTE7(v45) < 0) {
        operator delete((void *)v44);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::ARI_IBIImsMEMediaSessionErrIndCb_SDK((AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *)&v44, a2);
      if (ice::isARIResponseValid())
      {
        if (!AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::unpack((AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *)&v44))
        {
          v41[0] = 0;
          v41[1] = v41;
          uint64_t v42 = 0x2000000000;
          int v43 = 0;
          int v43 = *(_DWORD *)v48;
          v39[0] = 0;
          v39[1] = v39;
          std::string v39[2] = 0x2000000000;
          BOOL v40 = 0;
          int v20 = **((_DWORD **)&v48 + 1);
          BOOL v40 = **((_DWORD **)&v48 + 1) == 4;
          v37[0] = 0;
          v37[1] = v37;
          v37[2] = 0x2000000000;
          BOOL v38 = v20 == 5;
          memset(&v36, 0, sizeof(v36));
          unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
          IBIRTPClient::getMsgName(BufGmid, &v36);
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v34, v9 + 1);
          uint64_t v22 = v9[10];
          __p[0] = (void *)MEMORY[0x1E4F143A8];
          __p[1] = (void *)1174405120;
          uint64_t v25 = ___ZN12IBIRTPClient31handleMediaSessionErrIndicationEPhj_block_invoke;
          uint64_t v26 = &unk_1F20D5570;
          unsigned int v33 = a3;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v30, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
          }
          else {
            std::string v30 = v36;
          }
          uint64_t v31 = v34;
          uint64_t v32 = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v27 = v41;
          uint64_t v28 = v39;
          uint64_t v29 = v37;
          dispatch_async(v22, __p);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          _Block_object_dispose(v37, 8);
          _Block_object_dispose(v39, 8);
          _Block_object_dispose(v41, 8);
          goto LABEL_40;
        }
        dispatch_queue_t v12 = (std::__shared_weak_count *)v9[9];
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            std::vector<std::ssub_match>::size_type v14 = v13;
            uint64_t v15 = v9[8];
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + 48);
              uint64_t v17 = *(std::__shared_weak_count **)(v15 + 56);
              if (v17) {
                atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v18 = *(void *)(v16 + 296);
              if (v18) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 3);
              }
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(v41, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Failed to extract IBIImsMEMediaSessionErrIndCb: ", 48);
        *(unsigned char *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(v41, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Invalid MediaSessionErrIndication", 33);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v19 + 17) = 0;
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
LABEL_40:
      MEMORY[0x1C878D9D0](&v44);
      goto LABEL_41;
    }
  }
  return 0;
}

void sub_1C54C8674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  MEMORY[0x1C878D9D0](v40 - 144);
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_14(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      std::string::size_type v8 = v7;
      uint64_t v9 = *(void **)(a1 + 32);
      if (!v9)
      {
LABEL_45:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v51, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)&v51, (uint64_t)__p);
      size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleRTCPSRReportInd", 21);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(v43) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v52) < 0) {
        operator delete((void *)v51);
      }
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::ARI_IBIImsMERtcpSenderReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *)&v51, a2);
      if (ice::isARIResponseValid())
      {
        if (AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *)&v51))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v31, "");
          uint64_t v12 = ims::error((uint64_t)__p, (uint64_t)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Failed to extract IBIImsMERtcpSenderReportInd: ", 47);
          *(unsigned char *)(v12 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          if (SHIBYTE(v32) < 0) {
            operator delete(v31[0]);
          }
          if (SHIBYTE(v43) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v13 = (std::__shared_weak_count *)v9[9];
          if (v13)
          {
            std::vector<std::ssub_match>::size_type v14 = std::__shared_weak_count::lock(v13);
            if (v14)
            {
              uint64_t v15 = v14;
              uint64_t v16 = v9[8];
              if (v16)
              {
                uint64_t v17 = *(void *)(v16 + 48);
                uint64_t v18 = *(std::__shared_weak_count **)(v16 + 56);
                if (v18) {
                  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v19 = *(void *)(v17 + 296);
                if (v19) {
                  AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 3);
                }
                if (v18) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
          }
          goto LABEL_44;
        }
        unsigned int v22 = **((_DWORD **)&v56 + 1);
        unsigned int v23 = *(_DWORD *)v57;
        unsigned int v24 = **((_DWORD **)&v57 + 1);
        unsigned int v25 = *(_DWORD *)v58;
        unsigned int v26 = **((_DWORD **)&v58 + 1);
        __p[0] = 0;
        __p[1] = __p;
        uint64_t v43 = 0x7002000000;
        long long v44 = __Block_byref_object_copy__4;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v45 = __Block_byref_object_dispose__4;
        uint64_t v50 = 0;
        unsigned int v27 = *(_DWORD *)v56;
        *(void *)&long long v46 = &unk_1F20E0780;
        *((void *)&v47 + 1) = __PAIR64__(v22, v27);
        *(void *)&long long v48 = __PAIR64__(v24, v23);
        *((void *)&v48 + 1) = __PAIR64__(v26, v25);
        uint64_t v50 = 0;
        long long v49 = 0uLL;
        memset(&v41, 0, sizeof(v41));
        unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
        IBIRTPClient::getMsgName(BufGmid, &v41);
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v39, v9 + 1);
        uint64_t v29 = v9[10];
        v31[0] = (void *)MEMORY[0x1E4F143A8];
        v31[1] = (void *)1174405120;
        uint64_t v32 = ___ZN12IBIRTPClient21handleRTCPSRReportIndEPhj_block_invoke;
        unsigned int v33 = &unk_1F20D55A8;
        unsigned int v38 = a3;
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v35, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
        }
        else {
          std::string v35 = v41;
        }
        uint64_t v36 = v39;
        unint64_t v37 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v34 = __p;
        dispatch_async(v29, v31);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        _Block_object_dispose(__p, 8);
        *(void *)&long long v46 = &unk_1F20E0780;
        long long v21 = (void *)v49;
        if (!(void)v49) {
          goto LABEL_44;
        }
        *((void *)&v49 + 1) = v49;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(v31, "");
        uint64_t v20 = ims::error((uint64_t)__p, (uint64_t)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Invalid RTCPSRReportIndication", 30);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        if ((SHIBYTE(v43) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        long long v21 = __p[0];
      }
      operator delete(v21);
LABEL_44:
      MEMORY[0x1C878DA80](&v51);
      goto LABEL_45;
    }
  }
  return 0;
}

void sub_1C54C8CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  MEMORY[0x1C878DA80](v49 - 192);
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_18(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      std::string::size_type v8 = v7;
      uint64_t v9 = *(void **)(a1 + 32);
      if (!v9)
      {
LABEL_43:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v51, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v51, (uint64_t)__p);
      size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleRTCPRRReportInd", 21);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v52) < 0) {
        operator delete(v51[0]);
      }
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      *(_OWORD *)long long v51 = 0u;
      AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::ARI_IBIImsMERtcpReceiverReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *)v51, a2);
      if (ice::isARIResponseValid())
      {
        if (!AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *)v51))
        {
          BYTE7(v32) = 0;
          *(_WORD *)((char *)&v32 + 5) = 0;
          int v21 = **((_DWORD **)&v56 + 1);
          char v22 = *(unsigned char *)v57;
          unsigned int v23 = **((_DWORD **)&v57 + 1);
          unsigned int v24 = *(_DWORD *)v58;
          unsigned int v25 = **((_DWORD **)&v58 + 1);
          unsigned int v26 = *(_DWORD *)v59;
          int v27 = **((_DWORD **)&v59 + 1);
          __p[0] = 0;
          __p[1] = __p;
          uint64_t v44 = 0x6002000000;
          long long v45 = __Block_byref_object_copy__78;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = __Block_byref_object_dispose__79;
          uint64_t v50 = 0;
          int v28 = *(_DWORD *)v56;
          *(void *)&long long v47 = &unk_1F20E3660;
          DWORD2(v48) = v28;
          uint64_t v50 = 0;
          long long v49 = 0uLL;
          LODWORD(v32) = v21;
          BYTE4(v32) = v22;
          *((void *)&v32 + 1) = __PAIR64__(v24, v23);
          unsigned int v33 = (void (*)(uint64_t))__PAIR64__(v26, v25);
          LODWORD(v34) = v27;
          RTCPReceiverReports::addReport((void **)&v49, &v32);
          memset(&v42, 0, sizeof(v42));
          unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
          IBIRTPClient::getMsgName(BufGmid, &v42);
          uint64_t v40 = 0;
          std::string v41 = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v40, v9 + 1);
          std::string v30 = v9[10];
          *(void *)&long long v32 = MEMORY[0x1E4F143A8];
          *((void *)&v32 + 1) = 1174405120;
          unsigned int v33 = ___ZN12IBIRTPClient21handleRTCPRRReportIndEPhj_block_invoke;
          uint64_t v34 = &unk_1F20D55E0;
          unsigned int v39 = a3;
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v36, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
          }
          else {
            std::string v36 = v42;
          }
          uint64_t v37 = v40;
          unsigned int v38 = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v35 = __p;
          dispatch_async(v30, &v32);
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
          _Block_object_dispose(__p, 8);
          *(void *)&long long v47 = &unk_1F20E3660;
          uint64_t v20 = (void *)v49;
          if (!(void)v49) {
            goto LABEL_42;
          }
          *((void *)&v49 + 1) = v49;
          goto LABEL_41;
        }
        uint64_t v12 = (std::__shared_weak_count *)v9[9];
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            std::vector<std::ssub_match>::size_type v14 = v13;
            uint64_t v15 = v9[8];
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + 48);
              uint64_t v17 = *(std::__shared_weak_count **)(v15 + 56);
              if (v17) {
                atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v18 = *(void *)(v16 + 296);
              if (v18) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 3);
              }
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(&v32, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)&v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Failed to extract IBIImsMERtcpReceiverReportInd: ", 49);
        *(unsigned char *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(&v32, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)&v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Invalid RTCPRRReportIndication", 30);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v19 + 17) = 0;
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      uint64_t v20 = __p[0];
LABEL_41:
      operator delete(v20);
LABEL_42:
      MEMORY[0x1C878DB10](v51);
      goto LABEL_43;
    }
  }
  return 0;
}

void sub_1C54C931C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  MEMORY[0x1C878DB10](&a46);
  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_22(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      std::string::size_type v8 = v7;
      uint64_t v9 = *(void **)(a1 + 32);
      if (!v9)
      {
LABEL_40:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v34, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v34, (uint64_t)__p);
      size_t v11 = strlen((const char *)(*(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), *(void *)(*(void *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleRTCPSDESReportInd", 23);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v35) < 0) {
        operator delete(v34[0]);
      }
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      *(_OWORD *)uint64_t v34 = 0u;
      AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::ARI_IBIImsMERtcpSDESReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *)v34, a2);
      if (ice::isARIResponseValid())
      {
        if (!AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *)v34))
        {
          memset(&v33, 0, sizeof(v33));
          unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
          IBIRTPClient::getMsgName(BufGmid, &v33);
          uint64_t v31 = 0;
          long long v32 = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, v9 + 1);
          char v22 = v9[10];
          __p[0] = (void *)MEMORY[0x1E4F143A8];
          __p[1] = (void *)1174405120;
          unsigned int v25 = ___ZN12IBIRTPClient23handleRTCPSDESReportIndEPhj_block_invoke;
          unsigned int v26 = &__block_descriptor_tmp_87_1;
          unsigned int v30 = a3;
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v27, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
          }
          else {
            std::string v27 = v33;
          }
          uint64_t v28 = v31;
          uint64_t v29 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          dispatch_async(v22, __p);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_39;
          }
          uint64_t v20 = (void *)v33.__r_.__value_.__r.__words[0];
          goto LABEL_26;
        }
        uint64_t v12 = (std::__shared_weak_count *)v9[9];
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            std::vector<std::ssub_match>::size_type v14 = v13;
            uint64_t v15 = v9[8];
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + 48);
              uint64_t v17 = *(std::__shared_weak_count **)(v15 + 56);
              if (v17) {
                atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v18 = *(void *)(v16 + 296);
              if (v18) {
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 3);
              }
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(&v33, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Failed to extract IBIImsMERtcpSDESReportInd: ", 45);
        *(unsigned char *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(&v33, "");
        uint64_t v19 = ims::error((uint64_t)__p, (uint64_t)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Invalid RTCPSDESReportIndication", 32);
        *(unsigned char *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(unsigned char *)(v19 + 17) = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      uint64_t v20 = __p[0];
LABEL_26:
      operator delete(v20);
LABEL_39:
      MEMORY[0x1C878D970](v34);
      goto LABEL_40;
    }
  }
  return 0;
}

void sub_1C54C9874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  MEMORY[0x1C878D970](&a31);
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void (*IBIRTPClient::callbackForRequest(IBIRTPClient *this, int a2))()
{
  uint64_t v2 = IBIRTPClient::handleGetMediaCapabilityResponse;
  if (a2 > 1149370367)
  {
    if (a2 <= 1149435903)
    {
      if (a2 == 1149370368) {
        return (void (*)())IBIRTPClient::handleTerminateMediaSessionResponse;
      }
      if (a2 == 1149403136) {
        return (void (*)())IBIRTPClient::handleStartDTMFCodeResponse;
      }
    }
    else
    {
      switch(a2)
      {
        case 1149435904:
          return (void (*)())IBIRTPClient::handleStopDTMFCodeResponse;
        case 1149468672:
          return (void (*)())IBIRTPClient::handleCreateAudioMediaSessionResponse;
        case 1149501440:
          return (void (*)())IBIRTPClient::handleConfigureAudioMediaResponse;
      }
    }
    return IBIRTPClient::handleUnknownResponse;
  }
  if (a2 <= 1149272063)
  {
    if (a2 == -259653632) {
      return (void (*)())IBIRTPClient::handleAudioCallEventResponse;
    }
    if (a2 == 210337792) {
      return (void (*)())IBIRTPClient::handleCallPsRtpResponse;
    }
    return IBIRTPClient::handleUnknownResponse;
  }
  if (a2 != 1149272064)
  {
    if (a2 == 1149304832) {
      return (void (*)())IBIRTPClient::handleStartMediaResponse;
    }
    if (a2 == 1149337600) {
      return (void (*)())IBIRTPClient::handleStopMediaResponse;
    }
    return IBIRTPClient::handleUnknownResponse;
  }
  return (void (*)())v2;
}

uint64_t IBIRTPClient::handleGetMediaCapabilityResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleGetMediaCapabilityResponse", 32);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v22 = 0u;
  AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK((AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *)__p, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v10 = ims::error((uint64_t)&v26, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Invalid GetMediaCapabilityResponse", 34);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    size_t v11 = (void *)v19[0];
    goto LABEL_17;
  }
  memset(&v26, 0, sizeof(v26));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v26);
  uint64_t v8 = *a3;
  uint64_t v9 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient32handleGetMediaCapabilityResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &__block_descriptor_tmp_29_1;
  unsigned int v18 = a2;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    uint64_t v8 = *a3;
  }
  else
  {
    std::string v15 = v26;
  }
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v16 = v8;
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v9, block);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v11 = (void *)v15.__r_.__value_.__r.__words[0];
LABEL_17:
    operator delete(v11);
  }
LABEL_18:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return MEMORY[0x1C878DAE0](__p);
}

void sub_1C54C9D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 49) < 0) {
    operator delete(*(void **)(v31 - 72));
  }
  MEMORY[0x1C878DAE0](&__p);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStartMediaResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleStartMediaResponse", 24);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::ARI_IBIImsMEStartMediaRspCb_SDK((AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid StartMediaResponse", 26);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract StartMediaSessionResponse : ", 46);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878D830](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  uint64_t v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient24handleStartMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D53B0;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  size_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = __p;
  void block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878D830](&v25);
}

void sub_1C54CA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878D830](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStopMediaResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleStopMediaResponse", 23);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::ARI_IBIImsMEStopMediaRspCb_SDK((AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid StopMediaSessionResponse", 32);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract StopMediaSessionResponse : ", 45);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878D800](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  uint64_t v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient23handleStopMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D53E8;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  size_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = __p;
  void block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878D800](&v25);
}

void sub_1C54CA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878D800](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleTerminateMediaSessionResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::ARI_IBIImsMETerminateMediaSessionRspCb_SDK((AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid TerminateMediaSessionResponse", 37);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::unpack((AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract TerminateMediaSessionResponse : ", 50);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878DBE0](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  uint64_t v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient35handleTerminateMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D5420;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  size_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = __p;
  void block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878DBE0](&v25);
}

void sub_1C54CAA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878DBE0](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStartDTMFCodeResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::ARI_IBIImsMEStartDTMFCodeRspCb_SDK((AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid StartDTMFCodeResponse", 29);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract StartDTMFCodeResponse : ", 42);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878D920](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  uint64_t v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient27handleStartDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D5458;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  size_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = __p;
  void block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878D920](&v25);
}

void sub_1C54CAEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878D920](v40 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStopDTMFCodeResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::ARI_IBIImsMEStopDTMFCodeRspCb_SDK((AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *)&v25, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Invalid StopDTMFCodeResponse", 28);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *)&v25))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    uint64_t v7 = ims::error((uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to extract StopDTMFCodeResponse : ", 41);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    return MEMORY[0x1C878D8D0](&v25);
  }
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  int v24 = *(_DWORD *)v29;
  v19[0] = 0;
  v19[1] = v19;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  int v21 = **((_DWORD **)&v29 + 1);
  memset(&v18, 0, sizeof(v18));
  unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v18);
  uint64_t v9 = *a3;
  uint64_t v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient26handleStopDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D5490;
  unsigned int v17 = a2;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    uint64_t v9 = *a3;
  }
  else
  {
    std::string v14 = v18;
  }
  size_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = v9;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = __p;
  void block[5] = v19;
  dispatch_async(v10, block);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C878D8D0](&v25);
}

void sub_1C54CB364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C878D8D0](v40 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleCreateAudioMediaSessionResponse(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v35, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  uint64_t v6 = ims::debug((uint64_t)&v35, (uint64_t)&v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
  if (SBYTE7(v36) < 0) {
    operator delete((void *)v35);
  }
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK((AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *)&v35, a1);
  if (ice::isARIResponseValid())
  {
    int v7 = AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::unpack((AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *)&v35);
    uint64_t v31 = 0;
    long long v32 = &v31;
    uint64_t v33 = 0x2000000000;
    int v34 = -1;
    long long v27 = 0;
    long long v28 = &v27;
    uint64_t v29 = 0x2000000000;
    int v30 = 0;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "handleCreateAudioMediaSessionResponse");
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Failed to extract CreateAudioMediaSessionResponse : ", 52);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
    }
    else
    {
      *((_DWORD *)v32 + 6) = **((_DWORD **)&v39 + 1);
      *((_DWORD *)v28 + 6) = *v40;
      unsigned int BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
      IBIRTPClient::getMsgName(BufGmid, v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }
      *(_OWORD *)long long v25 = *(_OWORD *)v21;
      uint64_t v26 = v22;
    }
    uint64_t v14 = *a3;
    uint64_t v15 = *(NSObject **)(*a3 + 80);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1174405120;
    v17[2] = ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke_56;
    v17[3] = &unk_1F20D5500;
    uint64_t v16 = (std::__shared_weak_count *)a3[1];
    v17[6] = v14;
    std::string v18 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v17[4] = &v31;
    void v17[5] = &v27;
    dispatch_async(v15, v17);
    size_t v11 = v18;
    if (!v18) {
      goto LABEL_19;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(&v27, "");
  uint64_t v9 = ims::error((uint64_t)&v31, (uint64_t)&v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Invalid CreateAudioMediaSessionResponse", 39);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v31);
  }
  uint64_t v31 = 0;
  long long v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = -1;
  long long v27 = 0;
  long long v28 = &v27;
  uint64_t v29 = 0x2000000000;
  int v30 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(v25, "handleCreateAudioMediaSessionResponse");
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1F20D54C8;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  void block[6] = *a3;
  int v24 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = &v31;
  void block[5] = &v27;
  dispatch_async(MEMORY[0x1E4F14428], block);
  size_t v11 = v24;
  if (v24) {
    goto LABEL_18;
  }
LABEL_19:
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  return MEMORY[0x1C878DC10](&v35);
}